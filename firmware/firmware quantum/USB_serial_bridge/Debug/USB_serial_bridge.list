
USB_serial_bridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a048  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a240  0800a240  0001a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a8  0800a2a8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2b0  0800a2b0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2b0  0800a2b0  0001a2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2b4  0800a2b4  0001a2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a2b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b5c  200001f4  0800a4ac  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  0800a4ac  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eae2  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cba  00000000  00000000  0003ed04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  000429c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  00043ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c5cd  00000000  00000000  00045458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000144ed  00000000  00000000  00071a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107b60  00000000  00000000  00085f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018da72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d8c  00000000  00000000  0018daf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001f4 	.word	0x200001f4
 8000214:	00000000 	.word	0x00000000
 8000218:	0800a228 	.word	0x0800a228

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001f8 	.word	0x200001f8
 8000234:	0800a228 	.word	0x0800a228

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fd47 	bl	8000fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f810 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f9c6 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000548:	f000 f992 	bl	8000870 <MX_DMA_Init>
  MX_ETH_Init();
 800054c:	f000 f8a2 	bl	8000694 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f95e 	bl	8000810 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000554:	f008 ff86 	bl	8009464 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000558:	f000 f8dc 	bl	8000714 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800055c:	f000 f928 	bl	80007b0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x28>
	...

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b0b8      	sub	sp, #224	; 0xe0
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800056e:	2234      	movs	r2, #52	; 0x34
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f009 fd96 	bl	800a0a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2290      	movs	r2, #144	; 0x90
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f009 fd87 	bl	800a0a4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000596:	f003 fa4b 	bl	8003a30 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <SystemClock_Config+0x124>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	4a3a      	ldr	r2, [pc, #232]	; (8000688 <SystemClock_Config+0x124>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a4:	6413      	str	r3, [r2, #64]	; 0x40
 80005a6:	4b38      	ldr	r3, [pc, #224]	; (8000688 <SystemClock_Config+0x124>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b2:	4b36      	ldr	r3, [pc, #216]	; (800068c <SystemClock_Config+0x128>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a35      	ldr	r2, [pc, #212]	; (800068c <SystemClock_Config+0x128>)
 80005b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	4b33      	ldr	r3, [pc, #204]	; (800068c <SystemClock_Config+0x128>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ca:	2301      	movs	r3, #1
 80005cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005ec:	23d8      	movs	r3, #216	; 0xd8
 80005ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005f8:	2309      	movs	r3, #9
 80005fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fa74 	bl	8003af0 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800060e:	f000 fa03 	bl	8000a18 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000612:	f003 fa1d 	bl	8003a50 <HAL_PWREx_EnableOverDrive>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800061c:	f000 f9fc 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000642:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000646:	2107      	movs	r1, #7
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fcff 	bl	800404c <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000654:	f000 f9e0 	bl	8000a18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <SystemClock_Config+0x12c>)
 800065a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800065c:	2300      	movs	r3, #0
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000660:	2300      	movs	r3, #0
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fee4 	bl	800443c <HAL_RCCEx_PeriphCLKConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800067a:	f000 f9cd 	bl	8000a18 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	37e0      	adds	r7, #224	; 0xe0
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000
 8000690:	00200140 	.word	0x00200140

08000694 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ETH_Init+0x78>)
 800069a:	4a1d      	ldr	r2, [pc, #116]	; (8000710 <MX_ETH_Init+0x7c>)
 800069c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_ETH_Init+0x78>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ETH_Init+0x78>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_ETH_Init+0x78>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_ETH_Init+0x78>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	3301      	adds	r3, #1
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_ETH_Init+0x78>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	3302      	adds	r3, #2
 80006c2:	22e1      	movs	r2, #225	; 0xe1
 80006c4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_ETH_Init+0x78>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	3303      	adds	r3, #3
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_ETH_Init+0x78>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_ETH_Init+0x78>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	3305      	adds	r3, #5
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_ETH_Init+0x78>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_ETH_Init+0x78>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_ETH_Init+0x78>)
 80006f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006f6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_ETH_Init+0x78>)
 80006fa:	f001 f991 	bl	8001a20 <HAL_ETH_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000704:	f000 f988 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000428 	.word	0x20000428
 8000710:	40028000 	.word	0x40028000

08000714 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_TIM3_Init+0x94>)
 8000734:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <MX_TIM3_Init+0x98>)
 8000736:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_TIM3_Init+0x94>)
 800073a:	22d8      	movs	r2, #216	; 0xd8
 800073c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_TIM3_Init+0x94>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_TIM3_Init+0x94>)
 8000746:	22c8      	movs	r2, #200	; 0xc8
 8000748:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_TIM3_Init+0x94>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_TIM3_Init+0x94>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000756:	4814      	ldr	r0, [pc, #80]	; (80007a8 <MX_TIM3_Init+0x94>)
 8000758:	f004 fa96 	bl	8004c88 <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f959 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_TIM3_Init+0x94>)
 8000774:	f004 fbfe 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f94b 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <MX_TIM3_Init+0x94>)
 8000790:	f004 fe0c 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800079a:	f000 f93d 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000308 	.word	0x20000308
 80007ac:	40000400 	.word	0x40000400

080007b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART1_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART1_UART_Init+0x58>)
 80007f4:	f004 fe86 	bl	8005504 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f90b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200003a8 	.word	0x200003a8
 800080c:	40011000 	.word	0x40011000

08000810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART3_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000854:	f004 fe56 	bl	8005504 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f8db 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000228 	.word	0x20000228
 800086c:	40004800 	.word	0x40004800

08000870 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_DMA_Init+0x60>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_DMA_Init+0x60>)
 800087c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_DMA_Init+0x60>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_DMA_Init+0x60>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <MX_DMA_Init+0x60>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_DMA_Init+0x60>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 6, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2106      	movs	r1, #6
 80008aa:	200e      	movs	r0, #14
 80008ac:	f000 fce9 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008b0:	200e      	movs	r0, #14
 80008b2:	f000 fd02 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2046      	movs	r0, #70	; 0x46
 80008bc:	f000 fce1 	bl	8001282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008c0:	2046      	movs	r0, #70	; 0x46
 80008c2:	f000 fcfa 	bl	80012ba <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	; 0x30
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b46      	ldr	r3, [pc, #280]	; (8000a04 <MX_GPIO_Init+0x130>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a45      	ldr	r2, [pc, #276]	; (8000a04 <MX_GPIO_Init+0x130>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <MX_GPIO_Init+0x130>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	61bb      	str	r3, [r7, #24]
 8000900:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a3f      	ldr	r2, [pc, #252]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <MX_GPIO_Init+0x130>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a39      	ldr	r2, [pc, #228]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a33      	ldr	r2, [pc, #204]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <MX_GPIO_Init+0x130>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a2d      	ldr	r2, [pc, #180]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x130>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000980:	4821      	ldr	r0, [pc, #132]	; (8000a08 <MX_GPIO_Init+0x134>)
 8000982:	f001 fe63 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	4820      	ldr	r0, [pc, #128]	; (8000a0c <MX_GPIO_Init+0x138>)
 800098c:	f001 fe5e 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_GPIO_Init+0x13c>)
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <MX_GPIO_Init+0x140>)
 80009a6:	f001 fca7 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009aa:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_GPIO_Init+0x134>)
 80009c4:	f001 fc98 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009c8:	2340      	movs	r3, #64	; 0x40
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0x138>)
 80009e0:	f001 fc8a 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_GPIO_Init+0x138>)
 80009f8:	f001 fc7e 	bl	80022f8 <HAL_GPIO_Init>

}
 80009fc:	bf00      	nop
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	40021800 	.word	0x40021800
 8000a10:	10110000 	.word	0x10110000
 8000a14:	40020800 	.word	0x40020800

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a4e      	ldr	r2, [pc, #312]	; (8000bc8 <HAL_ETH_MspInit+0x158>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	f040 8096 	bne.w	8000bc0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a94:	4b4d      	ldr	r3, [pc, #308]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a4c      	ldr	r2, [pc, #304]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b4a      	ldr	r3, [pc, #296]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa8:	623b      	str	r3, [r7, #32]
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a46      	ldr	r2, [pc, #280]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a40      	ldr	r2, [pc, #256]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000aca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a3a      	ldr	r2, [pc, #232]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
 8000b00:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000b12:	f043 0302 	orr.w	r3, r3, #2
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_ETH_MspInit+0x15c>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b3c:	2332      	movs	r3, #50	; 0x32
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	481e      	ldr	r0, [pc, #120]	; (8000bd0 <HAL_ETH_MspInit+0x160>)
 8000b58:	f001 fbce 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b5c:	2386      	movs	r3, #134	; 0x86
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <HAL_ETH_MspInit+0x164>)
 8000b78:	f001 fbbe 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8e:	230b      	movs	r3, #11
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <HAL_ETH_MspInit+0x168>)
 8000b9a:	f001 fbad 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb0:	230b      	movs	r3, #11
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4808      	ldr	r0, [pc, #32]	; (8000bdc <HAL_ETH_MspInit+0x16c>)
 8000bbc:	f001 fb9c 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3738      	adds	r7, #56	; 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40028000 	.word	0x40028000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40021800 	.word	0x40021800

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_TIM_Base_MspInit+0x44>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d113      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2105      	movs	r1, #5
 8000c0e:	201d      	movs	r0, #29
 8000c10:	f000 fb37 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c14:	201d      	movs	r0, #29
 8000c16:	f000 fb50 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40000400 	.word	0x40000400
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a6d      	ldr	r2, [pc, #436]	; (8000e00 <HAL_UART_MspInit+0x1d4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d16f      	bne.n	8000d2e <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4e:	4b6d      	ldr	r3, [pc, #436]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a6c      	ldr	r2, [pc, #432]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b6a      	ldr	r3, [pc, #424]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a66      	ldr	r2, [pc, #408]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c90:	2304      	movs	r3, #4
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	485b      	ldr	r0, [pc, #364]	; (8000e08 <HAL_UART_MspInit+0x1dc>)
 8000c9c:	f001 fb2c 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4853      	ldr	r0, [pc, #332]	; (8000e08 <HAL_UART_MspInit+0x1dc>)
 8000cbc:	f001 fb1c 	bl	80022f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000cc0:	4b52      	ldr	r3, [pc, #328]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cc2:	4a53      	ldr	r2, [pc, #332]	; (8000e10 <HAL_UART_MspInit+0x1e4>)
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000cc6:	4b51      	ldr	r3, [pc, #324]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cce:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce2:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce8:	4b48      	ldr	r3, [pc, #288]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000cee:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf4:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cfa:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d00:	4842      	ldr	r0, [pc, #264]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000d02:	f000 faf5 	bl	80012f0 <HAL_DMA_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8000d0c:	f7ff fe84 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3e      	ldr	r2, [pc, #248]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000d14:	669a      	str	r2, [r3, #104]	; 0x68
 8000d16:	4a3d      	ldr	r2, [pc, #244]	; (8000e0c <HAL_UART_MspInit+0x1e0>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	2025      	movs	r0, #37	; 0x25
 8000d22:	f000 faae 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d26:	2025      	movs	r0, #37	; 0x25
 8000d28:	f000 fac7 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d2c:	e063      	b.n	8000df6 <HAL_UART_MspInit+0x1ca>
  else if(huart->Instance==USART3)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a38      	ldr	r2, [pc, #224]	; (8000e14 <HAL_UART_MspInit+0x1e8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d15e      	bne.n	8000df6 <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d38:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a31      	ldr	r2, [pc, #196]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <HAL_UART_MspInit+0x1d8>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4824      	ldr	r0, [pc, #144]	; (8000e18 <HAL_UART_MspInit+0x1ec>)
 8000d86:	f001 fab7 	bl	80022f8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000d8c:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <HAL_UART_MspInit+0x1f4>)
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000d92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d96:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d98:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000d9a:	2240      	movs	r2, #64	; 0x40
 8000d9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000dcc:	f000 fa90 	bl	80012f0 <HAL_DMA_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_UART_MspInit+0x1ae>
      Error_Handler();
 8000dd6:	f7ff fe1f 	bl	8000a18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000dde:	669a      	str	r2, [r3, #104]	; 0x68
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_UART_MspInit+0x1f0>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2105      	movs	r1, #5
 8000dea:	2027      	movs	r0, #39	; 0x27
 8000dec:	f000 fa49 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000df0:	2027      	movs	r0, #39	; 0x27
 8000df2:	f000 fa62 	bl	80012ba <HAL_NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	3730      	adds	r7, #48	; 0x30
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	20000348 	.word	0x20000348
 8000e10:	400264b8 	.word	0x400264b8
 8000e14:	40004800 	.word	0x40004800
 8000e18:	40020c00 	.word	0x40020c00
 8000e1c:	200002a8 	.word	0x200002a8
 8000e20:	40026058 	.word	0x40026058

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f8e6 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA1_Stream3_IRQHandler+0x10>)
 8000e86:	f000 fb63 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200002a8 	.word	0x200002a8

08000e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM3_IRQHandler+0x10>)
 8000e9a:	f003 ff4b 	bl	8004d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000308 	.word	0x20000308

08000ea8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <USART1_IRQHandler+0x10>)
 8000eae:	f004 fc95 	bl	80057dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200003a8 	.word	0x200003a8

08000ebc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART3_IRQHandler+0x10>)
 8000ec2:	f004 fc8b 	bl	80057dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000228 	.word	0x20000228

08000ed0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <OTG_FS_IRQHandler+0x10>)
 8000ed6:	f001 fd32 	bl	800293e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20001948 	.word	0x20001948

08000ee4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <DMA2_Stream7_IRQHandler+0x10>)
 8000eea:	f000 fb31 	bl	8001550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000348 	.word	0x20000348

08000ef8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <_sbrk+0x50>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x16>
		heap_end = &end;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <_sbrk+0x50>)
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <_sbrk+0x54>)
 8000f0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <_sbrk+0x50>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <_sbrk+0x50>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	466a      	mov	r2, sp
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d907      	bls.n	8000f32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f22:	f009 f885 	bl	800a030 <__errno>
 8000f26:	4602      	mov	r2, r0
 8000f28:	230c      	movs	r3, #12
 8000f2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f30:	e006      	b.n	8000f40 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <_sbrk+0x50>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a03      	ldr	r2, [pc, #12]	; (8000f48 <_sbrk+0x50>)
 8000f3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000210 	.word	0x20000210
 8000f4c:	20001d50 	.word	0x20001d50

08000f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <SystemInit+0x28>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <SystemInit+0x28>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SystemInit+0x28>)
 8000f66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f82:	e003      	b.n	8000f8c <LoopCopyDataInit>

08000f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f8a:	3104      	adds	r1, #4

08000f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f94:	d3f6      	bcc.n	8000f84 <CopyDataInit>
  ldr  r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f98:	e002      	b.n	8000fa0 <LoopFillZerobss>

08000f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f9c:	f842 3b04 	str.w	r3, [r2], #4

08000fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fa4:	d3f9      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ffd3 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f009 f847 	bl	800a03c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fac3 	bl	8000538 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000fb8:	0800a2b8 	.word	0x0800a2b8
  ldr  r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fc0:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8000fc4:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8000fc8:	20001d50 	.word	0x20001d50

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>

08000fce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f94a 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 f805 	bl	8000fe8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fde:	f7ff fd23 	bl	8000a28 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f965 	bl	80012d6 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001024:	f000 f92d 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	20000470 	.word	0x20000470

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000470 	.word	0x20000470

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_Delay+0x40>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	db0b      	blt.n	800115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 021f 	and.w	r2, r3, #31
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <__NVIC_EnableIRQ+0x38>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	095b      	lsrs	r3, r3, #5
 8001150:	2001      	movs	r0, #1
 8001152:	fa00 f202 	lsl.w	r2, r0, r2
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff29 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff3e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff31 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff feb8 	bl	8001070 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e099      	b.n	8001440 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800132c:	e00f      	b.n	800134e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800132e:	f7ff fe9f 	bl	8001070 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b05      	cmp	r3, #5
 800133a:	d908      	bls.n	800134e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2220      	movs	r2, #32
 8001340:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e078      	b.n	8001440 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e8      	bne.n	800132e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_DMA_Init+0x158>)
 8001368:	4013      	ands	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d107      	bne.n	80013b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4313      	orrs	r3, r2
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f023 0307 	bic.w	r3, r3, #7
 80013ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d117      	bne.n	8001412 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00e      	beq.n	8001412 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fa99 	bl	800192c <DMA_CheckFifoParam>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2240      	movs	r2, #64	; 0x40
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800140e:	2301      	movs	r3, #1
 8001410:	e016      	b.n	8001440 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fa50 	bl	80018c0 <DMA_CalcBaseAndBitshift>
 8001420:	4603      	mov	r3, r0
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001428:	223f      	movs	r2, #63	; 0x3f
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	e010803f 	.word	0xe010803f

0800144c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_DMA_Start_IT+0x26>
 800146e:	2302      	movs	r3, #2
 8001470:	e048      	b.n	8001504 <HAL_DMA_Start_IT+0xb8>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b01      	cmp	r3, #1
 8001484:	d137      	bne.n	80014f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2202      	movs	r2, #2
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f9e2 	bl	8001864 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	223f      	movs	r2, #63	; 0x3f
 80014a6:	409a      	lsls	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0216 	orr.w	r2, r2, #22
 80014ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0208 	orr.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e005      	b.n	8001502 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014fe:	2302      	movs	r3, #2
 8001500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d004      	beq.n	800152a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00c      	b.n	8001544 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2205      	movs	r2, #5
 800152e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800155c:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <HAL_DMA_IRQHandler+0x258>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a92      	ldr	r2, [pc, #584]	; (80017ac <HAL_DMA_IRQHandler+0x25c>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	0a9b      	lsrs	r3, r3, #10
 8001568:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	2208      	movs	r2, #8
 800157c:	409a      	lsls	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4013      	ands	r3, r2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01a      	beq.n	80015bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d013      	beq.n	80015bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0204 	bic.w	r2, r2, #4
 80015a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2208      	movs	r2, #8
 80015aa:	409a      	lsls	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d012      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2201      	movs	r2, #1
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	f043 0202 	orr.w	r2, r3, #2
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2204      	movs	r2, #4
 80015f8:	409a      	lsls	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d012      	beq.n	8001628 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2204      	movs	r2, #4
 8001616:	409a      	lsls	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	f043 0204 	orr.w	r2, r3, #4
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	2210      	movs	r2, #16
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d043      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d03c      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	2210      	movs	r2, #16
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d018      	beq.n	8001692 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2b00      	cmp	r3, #0
 8001674:	d024      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
 800167e:	e01f      	b.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01b      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
 8001690:	e016      	b.n	80016c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0208 	bic.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	2220      	movs	r2, #32
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 808e 	beq.w	80017ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8086 	beq.w	80017ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	2220      	movs	r2, #32
 80016e8:	409a      	lsls	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d136      	bne.n	8001768 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0216 	bic.w	r2, r2, #22
 8001708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001718:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <HAL_DMA_IRQHandler+0x1da>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0208 	bic.w	r2, r2, #8
 8001738:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	223f      	movs	r2, #63	; 0x3f
 8001740:	409a      	lsls	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175a:	2b00      	cmp	r3, #0
 800175c:	d07d      	beq.n	800185a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
        }
        return;
 8001766:	e078      	b.n	800185a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d01c      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d108      	bne.n	8001796 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	2b00      	cmp	r3, #0
 800178a:	d030      	beq.n	80017ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	4798      	blx	r3
 8001794:	e02b      	b.n	80017ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	2b00      	cmp	r3, #0
 800179c:	d027      	beq.n	80017ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
 80017a6:	e022      	b.n	80017ee <HAL_DMA_IRQHandler+0x29e>
 80017a8:	20000000 	.word	0x20000000
 80017ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10f      	bne.n	80017de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0210 	bic.w	r2, r2, #16
 80017cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d032      	beq.n	800185c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d022      	beq.n	8001848 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2205      	movs	r2, #5
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3301      	adds	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	429a      	cmp	r2, r3
 8001824:	d307      	bcc.n	8001836 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f2      	bne.n	800181a <HAL_DMA_IRQHandler+0x2ca>
 8001834:	e000      	b.n	8001838 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001836:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
 8001858:	e000      	b.n	800185c <HAL_DMA_IRQHandler+0x30c>
        return;
 800185a:	bf00      	nop
    }
  }
}
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop

08001864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001880:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b40      	cmp	r3, #64	; 0x40
 8001890:	d108      	bne.n	80018a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018a2:	e007      	b.n	80018b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3b10      	subs	r3, #16
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <DMA_CalcBaseAndBitshift+0x60>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <DMA_CalcBaseAndBitshift+0x64>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d908      	bls.n	8001900 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <DMA_CalcBaseAndBitshift+0x68>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	1d1a      	adds	r2, r3, #4
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	659a      	str	r2, [r3, #88]	; 0x58
 80018fe:	e006      	b.n	800190e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <DMA_CalcBaseAndBitshift+0x68>)
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	aaaaaaab 	.word	0xaaaaaaab
 8001924:	0800a2a0 	.word	0x0800a2a0
 8001928:	fffffc00 	.word	0xfffffc00

0800192c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d11f      	bne.n	8001986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d855      	bhi.n	80019f8 <DMA_CheckFifoParam+0xcc>
 800194c:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <DMA_CheckFifoParam+0x28>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001965 	.word	0x08001965
 8001958:	08001977 	.word	0x08001977
 800195c:	08001965 	.word	0x08001965
 8001960:	080019f9 	.word	0x080019f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d045      	beq.n	80019fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001974:	e042      	b.n	80019fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800197e:	d13f      	bne.n	8001a00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001984:	e03c      	b.n	8001a00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198e:	d121      	bne.n	80019d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d836      	bhi.n	8001a04 <DMA_CheckFifoParam+0xd8>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <DMA_CheckFifoParam+0x70>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	080019b3 	.word	0x080019b3
 80019a4:	080019ad 	.word	0x080019ad
 80019a8:	080019c5 	.word	0x080019c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      break;
 80019b0:	e02f      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d024      	beq.n	8001a08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c2:	e021      	b.n	8001a08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019cc:	d11e      	bne.n	8001a0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019d2:	e01b      	b.n	8001a0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d902      	bls.n	80019e0 <DMA_CheckFifoParam+0xb4>
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d003      	beq.n	80019e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019de:	e018      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      break;
 80019e4:	e015      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00e      	beq.n	8001a10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      break;
 80019f6:	e00b      	b.n	8001a10 <DMA_CheckFifoParam+0xe4>
      break;
 80019f8:	bf00      	nop
 80019fa:	e00a      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 80019fc:	bf00      	nop
 80019fe:	e008      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a00:	bf00      	nop
 8001a02:	e006      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a04:	bf00      	nop
 8001a06:	e004      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a08:	bf00      	nop
 8001a0a:	e002      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a0c:	bf00      	nop
 8001a0e:	e000      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a10:	bf00      	nop
    }
  } 
  
  return status; 
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001a30:	4ba9      	ldr	r3, [pc, #676]	; (8001cd8 <HAL_ETH_Init+0x2b8>)
 8001a32:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e183      	b.n	8001d4e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff f808 	bl	8000a70 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a60:	4b9e      	ldr	r3, [pc, #632]	; (8001cdc <HAL_ETH_Init+0x2bc>)
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	4a9d      	ldr	r2, [pc, #628]	; (8001cdc <HAL_ETH_Init+0x2bc>)
 8001a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6c:	4b9b      	ldr	r3, [pc, #620]	; (8001cdc <HAL_ETH_Init+0x2bc>)
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a78:	4b99      	ldr	r3, [pc, #612]	; (8001ce0 <HAL_ETH_Init+0x2c0>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <HAL_ETH_Init+0x2c0>)
 8001a7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a82:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a84:	4b96      	ldr	r3, [pc, #600]	; (8001ce0 <HAL_ETH_Init+0x2c0>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4994      	ldr	r1, [pc, #592]	; (8001ce0 <HAL_ETH_Init+0x2c0>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0201 	orr.w	r2, r2, #1
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001aaa:	f7ff fae1 	bl	8001070 <HAL_GetTick>
 8001aae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ab0:	e011      	b.n	8001ad6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001ab2:	f7ff fadd 	bl	8001070 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ac0:	d909      	bls.n	8001ad6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e13b      	b.n	8001d4e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e4      	bne.n	8001ab2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f023 031c 	bic.w	r3, r3, #28
 8001af6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001af8:	f002 fc6c 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 8001afc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4a78      	ldr	r2, [pc, #480]	; (8001ce4 <HAL_ETH_Init+0x2c4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d908      	bls.n	8001b18 <HAL_ETH_Init+0xf8>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4a77      	ldr	r2, [pc, #476]	; (8001ce8 <HAL_ETH_Init+0x2c8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d804      	bhi.n	8001b18 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e027      	b.n	8001b68 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	4a73      	ldr	r2, [pc, #460]	; (8001ce8 <HAL_ETH_Init+0x2c8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d908      	bls.n	8001b32 <HAL_ETH_Init+0x112>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_ETH_Init+0x2cc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d804      	bhi.n	8001b32 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f043 030c 	orr.w	r3, r3, #12
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	e01a      	b.n	8001b68 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4a6d      	ldr	r2, [pc, #436]	; (8001cec <HAL_ETH_Init+0x2cc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d903      	bls.n	8001b42 <HAL_ETH_Init+0x122>
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4a6c      	ldr	r2, [pc, #432]	; (8001cf0 <HAL_ETH_Init+0x2d0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d911      	bls.n	8001b66 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4a6a      	ldr	r2, [pc, #424]	; (8001cf0 <HAL_ETH_Init+0x2d0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d908      	bls.n	8001b5c <HAL_ETH_Init+0x13c>
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4a69      	ldr	r2, [pc, #420]	; (8001cf4 <HAL_ETH_Init+0x2d4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d804      	bhi.n	8001b5c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e005      	b.n	8001b68 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f043 0310 	orr.w	r3, r3, #16
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	e000      	b.n	8001b68 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b66:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b74:	2100      	movs	r1, #0
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f956 	bl	8001e28 <HAL_ETH_WritePHYRegister>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b86:	6939      	ldr	r1, [r7, #16]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f9b3 	bl	8001ef4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0d9      	b.n	8001d4e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b9a:	20ff      	movs	r0, #255	; 0xff
 8001b9c:	f7ff fa74 	bl	8001088 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a7 	beq.w	8001cf8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001baa:	f7ff fa61 	bl	8001070 <HAL_GetTick>
 8001bae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8cd 	bl	8001d58 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001bbe:	f7ff fa57 	bl	8001070 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d90f      	bls.n	8001bf0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001bd4:	6939      	ldr	r1, [r7, #16]
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f98c 	bl	8001ef4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0ae      	b.n	8001d4e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0da      	beq.n	8001bb0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001bfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bfe:	2100      	movs	r1, #0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f911 	bl	8001e28 <HAL_ETH_WritePHYRegister>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c10:	6939      	ldr	r1, [r7, #16]
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f96e 	bl	8001ef4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c20:	2301      	movs	r3, #1
 8001c22:	e094      	b.n	8001d4e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff fa24 	bl	8001070 <HAL_GetTick>
 8001c28:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2101      	movs	r1, #1
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f890 	bl	8001d58 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c38:	f7ff fa1a 	bl	8001070 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d90f      	bls.n	8001c6a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c4e:	6939      	ldr	r1, [r7, #16]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f94f 	bl	8001ef4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e071      	b.n	8001d4e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0da      	beq.n	8001c2a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	461a      	mov	r2, r3
 8001c7a:	211f      	movs	r1, #31
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f86b 	bl	8001d58 <HAL_ETH_ReadPHYRegister>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c8c:	6939      	ldr	r1, [r7, #16]
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f930 	bl	8001ef4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e056      	b.n	8001d4e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	e002      	b.n	8001cba <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	e037      	b.n	8001d3c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	e032      	b.n	8001d3c <HAL_ETH_Init+0x31c>
 8001cd6:	bf00      	nop
 8001cd8:	03938700 	.word	0x03938700
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	01312cff 	.word	0x01312cff
 8001ce8:	02160ebf 	.word	0x02160ebf
 8001cec:	039386ff 	.word	0x039386ff
 8001cf0:	05f5e0ff 	.word	0x05f5e0ff
 8001cf4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2100      	movs	r1, #0
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f889 	bl	8001e28 <HAL_ETH_WritePHYRegister>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00b      	beq.n	8001d34 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d20:	6939      	ldr	r1, [r7, #16]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8e6 	bl	8001ef4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e00c      	b.n	8001d4e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d34:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001d38:	f7ff f9a6 	bl	8001088 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d3c:	6939      	ldr	r1, [r7, #16]
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8d8 	bl	8001ef4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop

08001d58 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	460b      	mov	r3, r1
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b82      	cmp	r3, #130	; 0x82
 8001d78:	d101      	bne.n	8001d7e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e050      	b.n	8001e20 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2282      	movs	r2, #130	; 0x82
 8001d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f003 031c 	and.w	r3, r3, #28
 8001d94:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8a1b      	ldrh	r3, [r3, #16]
 8001d9a:	02db      	lsls	r3, r3, #11
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001da4:	897b      	ldrh	r3, [r7, #10]
 8001da6:	019b      	lsls	r3, r3, #6
 8001da8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f023 0302 	bic.w	r3, r3, #2
 8001db8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dca:	f7ff f951 	bl	8001070 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd0:	e015      	b.n	8001dfe <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001dd2:	f7ff f94d 	bl	8001070 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d309      	bcc.n	8001df6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e014      	b.n	8001e20 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e4      	bne.n	8001dd2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	460b      	mov	r3, r1
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b42      	cmp	r3, #66	; 0x42
 8001e48:	d101      	bne.n	8001e4e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e04e      	b.n	8001eec <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2242      	movs	r2, #66	; 0x42
 8001e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 031c 	and.w	r3, r3, #28
 8001e64:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8a1b      	ldrh	r3, [r3, #16]
 8001e6a:	02db      	lsls	r3, r3, #11
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	019b      	lsls	r3, r3, #6
 8001e78:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea4:	f7ff f8e4 	bl	8001070 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eaa:	e015      	b.n	8001ed8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001eac:	f7ff f8e0 	bl	8001070 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eba:	d309      	bcc.n	8001ed0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e00d      	b.n	8001eec <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1e4      	bne.n	8001eac <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b0b0      	sub	sp, #192	; 0xc0
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f10:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f22:	2300      	movs	r3, #0
 8001f24:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f40:	e001      	b.n	8001f46 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f50:	2300      	movs	r3, #0
 8001f52:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f60:	2340      	movs	r3, #64	; 0x40
 8001f62:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001fc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fcc:	4bab      	ldr	r3, [pc, #684]	; (800227c <ETH_MACDMAConfig+0x388>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fd8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fdc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fe0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fe6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ff4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ff8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ffc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002000:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002004:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002008:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800200a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800201c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff f82d 	bl	8001088 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002036:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002038:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800203a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800203c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800203e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002040:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002042:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002046:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800204c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800204e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002052:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002058:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800205c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002064:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002066:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002072:	2001      	movs	r0, #1
 8002074:	f7ff f808 	bl	8001088 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002080:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800208a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002094:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80020a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020a8:	4013      	ands	r3, r2
 80020aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020b8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020be:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020c4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020ca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80020cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020d0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7fe ffc9 	bl	8001088 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002100:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002104:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800211a:	2001      	movs	r0, #1
 800211c:	f7fe ffb4 	bl	8001088 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002128:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800212e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002132:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002138:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800213c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800214e:	2304      	movs	r3, #4
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800215e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800216e:	2300      	movs	r3, #0
 8002170:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002172:	2300      	movs	r3, #0
 8002174:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f241 0318 	movw	r3, #4120	; 0x1018
 800217e:	4413      	add	r3, r2
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002186:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <ETH_MACDMAConfig+0x38c>)
 800218c:	4013      	ands	r3, r2
 800218e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002192:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002194:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002196:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002198:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800219a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800219c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800219e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80021a0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80021a2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80021a4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021a6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021a8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021aa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021ae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021b2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	f241 0318 	movw	r3, #4120	; 0x1018
 80021c6:	4413      	add	r3, r2
 80021c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80021d6:	4413      	add	r3, r2
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7fe ff52 	bl	8001088 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80021ec:	4413      	add	r3, r2
 80021ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021f8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021fc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002200:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002204:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002208:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800220a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800220c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800220e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800222c:	2001      	movs	r0, #1
 800222e:	f7fe ff2b 	bl	8001088 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800223e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10d      	bne.n	8002264 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002250:	4413      	add	r3, r2
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6811      	ldr	r1, [r2, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <ETH_MACDMAConfig+0x390>)
 800225a:	431a      	orrs	r2, r3
 800225c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002260:	440b      	add	r3, r1
 8002262:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	461a      	mov	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f80b 	bl	8002288 <ETH_MACAddressConfig>
}
 8002272:	bf00      	nop
 8002274:	37c0      	adds	r7, #192	; 0xc0
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	ff20810f 	.word	0xff20810f
 8002280:	f8de3f23 	.word	0xf8de3f23
 8002284:	00010040 	.word	0x00010040

08002288 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3305      	adds	r3, #5
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	3204      	adds	r2, #4
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <ETH_MACAddressConfig+0x68>)
 80022aa:	4413      	add	r3, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3303      	adds	r3, #3
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	061a      	lsls	r2, r3, #24
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3302      	adds	r3, #2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3301      	adds	r3, #1
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	4313      	orrs	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <ETH_MACAddressConfig+0x6c>)
 80022da:	4413      	add	r3, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	6013      	str	r3, [r2, #0]
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40028040 	.word	0x40028040
 80022f4:	40028044 	.word	0x40028044

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	e175      	b.n	8002604 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	429a      	cmp	r2, r3
 8002332:	f040 8164 	bne.w	80025fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d00b      	beq.n	8002356 <HAL_GPIO_Init+0x5e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800234a:	2b11      	cmp	r3, #17
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b12      	cmp	r3, #18
 8002354:	d130      	bne.n	80023b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0201 	and.w	r2, r3, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x100>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b12      	cmp	r3, #18
 80023f6:	d123      	bne.n	8002440 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	08da      	lsrs	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3208      	adds	r2, #8
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	69b9      	ldr	r1, [r7, #24]
 800243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0203 	and.w	r2, r3, #3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80be 	beq.w	80025fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_GPIO_Init+0x320>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a64      	ldr	r2, [pc, #400]	; (8002618 <HAL_GPIO_Init+0x320>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_GPIO_Init+0x320>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800249a:	4a60      	ldr	r2, [pc, #384]	; (800261c <HAL_GPIO_Init+0x324>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a57      	ldr	r2, [pc, #348]	; (8002620 <HAL_GPIO_Init+0x328>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d037      	beq.n	8002536 <HAL_GPIO_Init+0x23e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_GPIO_Init+0x32c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d031      	beq.n	8002532 <HAL_GPIO_Init+0x23a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a55      	ldr	r2, [pc, #340]	; (8002628 <HAL_GPIO_Init+0x330>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02b      	beq.n	800252e <HAL_GPIO_Init+0x236>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a54      	ldr	r2, [pc, #336]	; (800262c <HAL_GPIO_Init+0x334>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d025      	beq.n	800252a <HAL_GPIO_Init+0x232>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a53      	ldr	r2, [pc, #332]	; (8002630 <HAL_GPIO_Init+0x338>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <HAL_GPIO_Init+0x22e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_GPIO_Init+0x33c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x22a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a51      	ldr	r2, [pc, #324]	; (8002638 <HAL_GPIO_Init+0x340>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x226>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a50      	ldr	r2, [pc, #320]	; (800263c <HAL_GPIO_Init+0x344>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x222>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4f      	ldr	r2, [pc, #316]	; (8002640 <HAL_GPIO_Init+0x348>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x21e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4e      	ldr	r2, [pc, #312]	; (8002644 <HAL_GPIO_Init+0x34c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x21a>
 800250e:	2309      	movs	r3, #9
 8002510:	e012      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002512:	230a      	movs	r3, #10
 8002514:	e010      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002516:	2308      	movs	r3, #8
 8002518:	e00e      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800251a:	2307      	movs	r3, #7
 800251c:	e00c      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800251e:	2306      	movs	r3, #6
 8002520:	e00a      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002522:	2305      	movs	r3, #5
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002526:	2304      	movs	r3, #4
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002536:	2300      	movs	r3, #0
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002548:	4934      	ldr	r1, [pc, #208]	; (800261c <HAL_GPIO_Init+0x324>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002556:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <HAL_GPIO_Init+0x350>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257a:	4a33      	ldr	r2, [pc, #204]	; (8002648 <HAL_GPIO_Init+0x350>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_GPIO_Init+0x350>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a4:	4a28      	ldr	r2, [pc, #160]	; (8002648 <HAL_GPIO_Init+0x350>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025aa:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_GPIO_Init+0x350>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ce:	4a1e      	ldr	r2, [pc, #120]	; (8002648 <HAL_GPIO_Init+0x350>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_GPIO_Init+0x350>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <HAL_GPIO_Init+0x350>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	f67f ae86 	bls.w	8002318 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800260c:	bf00      	nop
 800260e:	3724      	adds	r7, #36	; 0x24
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40023800 	.word	0x40023800
 800261c:	40013800 	.word	0x40013800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000
 8002634:	40021400 	.word	0x40021400
 8002638:	40021800 	.word	0x40021800
 800263c:	40021c00 	.word	0x40021c00
 8002640:	40022000 	.word	0x40022000
 8002644:	40022400 	.word	0x40022400
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	041a      	lsls	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026a0:	887a      	ldrh	r2, [r7, #2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b4:	b08f      	sub	sp, #60	; 0x3c
 80026b6:	af0a      	add	r7, sp, #40	; 0x28
 80026b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e116      	b.n	80028f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f007 f946 	bl	8009970 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2203      	movs	r2, #3
 80026e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f004 f861 	bl	80067ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	687e      	ldr	r6, [r7, #4]
 8002710:	466d      	mov	r5, sp
 8002712:	f106 0410 	add.w	r4, r6, #16
 8002716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002722:	e885 0003 	stmia.w	r5, {r0, r1}
 8002726:	1d33      	adds	r3, r6, #4
 8002728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272a:	6838      	ldr	r0, [r7, #0]
 800272c:	f003 ff42 	bl	80065b4 <USB_CoreInit>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0d7      	b.n	80028f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f004 f84f 	bl	80067ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	e04a      	b.n	80027ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	333d      	adds	r3, #61	; 0x3d
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	333c      	adds	r3, #60	; 0x3c
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	b298      	uxth	r0, r3
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3342      	adds	r3, #66	; 0x42
 8002790:	4602      	mov	r2, r0
 8002792:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	333f      	adds	r3, #63	; 0x3f
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3344      	adds	r3, #68	; 0x44
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3348      	adds	r3, #72	; 0x48
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	3350      	adds	r3, #80	; 0x50
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	3301      	adds	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d3af      	bcc.n	8002754 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e044      	b.n	8002884 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	3301      	adds	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	429a      	cmp	r2, r3
 800288c:	d3b5      	bcc.n	80027fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	687e      	ldr	r6, [r7, #4]
 8002896:	466d      	mov	r5, sp
 8002898:	f106 0410 	add.w	r4, r6, #16
 800289c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ac:	1d33      	adds	r3, r6, #4
 80028ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b0:	6838      	ldr	r0, [r7, #0]
 80028b2:	f003 ffc5 	bl	8006840 <USB_DevInit>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e014      	b.n	80028f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d102      	bne.n	80028e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f001 f881 	bl	80039e8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f005 f814 	bl	8007918 <USB_DevDisconnect>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_PCD_Start+0x16>
 800290c:	2302      	movs	r3, #2
 800290e:	e012      	b.n	8002936 <HAL_PCD_Start+0x3c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f004 ffe3 	bl	80078e8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f003 ff3e 	bl	80067a8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800293e:	b590      	push	{r4, r7, lr}
 8002940:	b08d      	sub	sp, #52	; 0x34
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f005 f88a 	bl	8007a6e <USB_GetMode>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 83ca 	bne.w	80030f6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 ffee 	bl	8007948 <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 83c0 	beq.w	80030f4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f004 ffe5 	bl	8007948 <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d107      	bne.n	8002998 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f002 0202 	and.w	r2, r2, #2
 8002996:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f004 ffd3 	bl	8007948 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d161      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0210 	bic.w	r2, r2, #16
 80029ba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f003 020f 	and.w	r2, r3, #15
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	3304      	adds	r3, #4
 80029da:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	0c5b      	lsrs	r3, r3, #17
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d124      	bne.n	8002a32 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d035      	beq.n	8002a60 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	6a38      	ldr	r0, [r7, #32]
 8002a08:	f004 fe4b 	bl	80076a2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a18:	441a      	add	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a2a:	441a      	add	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	619a      	str	r2, [r3, #24]
 8002a30:	e016      	b.n	8002a60 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	0c5b      	lsrs	r3, r3, #17
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d110      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a44:	2208      	movs	r2, #8
 8002a46:	4619      	mov	r1, r3
 8002a48:	6a38      	ldr	r0, [r7, #32]
 8002a4a:	f004 fe2a 	bl	80076a2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a5a:	441a      	add	r2, r3
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0210 	orr.w	r2, r2, #16
 8002a6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 ff67 	bl	8007948 <USB_ReadInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a84:	d16e      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 ff6d 	bl	800796e <USB_ReadDevAllOutEpInterrupt>
 8002a94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a96:	e062      	b.n	8002b5e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d057      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 ff92 	bl	80079d6 <USB_ReadDevOutEPInterrupt>
 8002ab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aca:	461a      	mov	r2, r3
 8002acc:	2301      	movs	r3, #1
 8002ace:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fdde 	bl	8003694 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aee:	461a      	mov	r2, r3
 8002af0:	2308      	movs	r3, #8
 8002af2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fed8 	bl	80038ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b12:	461a      	mov	r2, r3
 8002b14:	2310      	movs	r3, #16
 8002b16:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2320      	movs	r3, #32
 8002b32:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b50:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	3301      	adds	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d199      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 feed 	bl	8007948 <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b78:	f040 80c0 	bne.w	8002cfc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f004 ff0e 	bl	80079a2 <USB_ReadDevAllInEpInterrupt>
 8002b86:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b8c:	e0b2      	b.n	8002cf4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80a7 	beq.w	8002ce8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 ff34 	bl	8007a12 <USB_ReadDevInEPInterrupt>
 8002baa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d057      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69f9      	ldr	r1, [r7, #28]
 8002bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be6:	461a      	mov	r2, r3
 8002be8:	2301      	movs	r3, #1
 8002bea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d132      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3348      	adds	r3, #72	; 0x48
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4403      	add	r3, r0
 8002c14:	3344      	adds	r3, #68	; 0x44
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4419      	add	r1, r3
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4403      	add	r3, r0
 8002c28:	3348      	adds	r3, #72	; 0x48
 8002c2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d113      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x31c>
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3350      	adds	r3, #80	; 0x50
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d108      	bne.n	8002c5a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c52:	461a      	mov	r2, r3
 8002c54:	2101      	movs	r1, #1
 8002c56:	f004 ff3d 	bl	8007ad4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f006 ff16 	bl	8009a92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2308      	movs	r3, #8
 8002c80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2310      	movs	r3, #16
 8002c9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2340      	movs	r3, #64	; 0x40
 8002cb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fc48 	bl	8003578 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	3301      	adds	r3, #1
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f af49 	bne.w	8002b8e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f004 fe21 	bl	8007948 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d10:	d122      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d108      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d38:	2100      	movs	r1, #0
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f007 f8f8 	bl	8009f30 <HAL_PCDEx_LPM_Callback>
 8002d40:	e002      	b.n	8002d48 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f006 ff1c 	bl	8009b80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 fdf3 	bl	8007948 <USB_ReadInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6c:	d112      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f006 fed8 	bl	8009b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d92:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fdd5 	bl	8007948 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da8:	d121      	bne.n	8002dee <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695a      	ldr	r2, [r3, #20]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002db8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d111      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002dde:	2101      	movs	r1, #1
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f007 f8a5 	bl	8009f30 <HAL_PCDEx_LPM_Callback>
 8002de6:	e002      	b.n	8002dee <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f006 fea3 	bl	8009b34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f004 fda8 	bl	8007948 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e02:	f040 80c7 	bne.w	8002f94 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2110      	movs	r1, #16
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fe7b 	bl	8006b1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2a:	e056      	b.n	8002eda <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e50:	0151      	lsls	r1, r2, #5
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	440a      	add	r2, r1
 8002e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e5e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e70:	0151      	lsls	r1, r2, #5
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	440a      	add	r2, r1
 8002e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e92:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea4:	0151      	lsls	r1, r2, #5
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec4:	0151      	lsls	r1, r2, #5
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	440a      	add	r2, r1
 8002eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ed2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d3a3      	bcc.n	8002e2c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ef6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d016      	beq.n	8002f2e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f10:	f043 030b 	orr.w	r3, r3, #11
 8002f14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f26:	f043 030b 	orr.w	r3, r3, #11
 8002f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2c:	e015      	b.n	8002f5a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f242 032b 	movw	r3, #8235	; 0x202b
 8002f42:	4313      	orrs	r3, r2
 8002f44:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f54:	f043 030b 	orr.w	r3, r3, #11
 8002f58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f004 fda8 	bl	8007ad4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fcd5 	bl	8007948 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d124      	bne.n	8002ff4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fd6c 	bl	8007a8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fe10 	bl	8006bde <USB_GetDevSpeed>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681c      	ldr	r4, [r3, #0]
 8002fca:	f001 fa03 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 8002fce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f003 fb43 	bl	8006664 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f006 fd7f 	bl	8009ae2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f004 fca5 	bl	8007948 <USB_ReadInterrupts>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b08      	cmp	r3, #8
 8003006:	d10a      	bne.n	800301e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f006 fd5c 	bl	8009ac6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f002 0208 	and.w	r2, r2, #8
 800301c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f004 fc90 	bl	8007948 <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003032:	d10f      	bne.n	8003054 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f006 fdbe 	bl	8009bc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003052:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f004 fc75 	bl	8007948 <USB_ReadInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003064:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003068:	d10f      	bne.n	800308a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	b2db      	uxtb	r3, r3
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f006 fd91 	bl	8009b9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f004 fc5a 	bl	8007948 <USB_ReadInterrupts>
 8003094:	4603      	mov	r3, r0
 8003096:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d10a      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f006 fd9f 	bl	8009be4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 fc44 	bl	8007948 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d115      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f006 fd8f 	bl	8009c00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	e000      	b.n	80030f6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80030f4:	bf00      	nop
    }
  }
}
 80030f6:	3734      	adds	r7, #52	; 0x34
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd90      	pop	{r4, r7, pc}

080030fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_PCD_SetAddress+0x1a>
 8003112:	2302      	movs	r3, #2
 8003114:	e013      	b.n	800313e <HAL_PCD_SetAddress+0x42>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f004 fbb4 	bl	800789c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	4608      	mov	r0, r1
 8003150:	4611      	mov	r1, r2
 8003152:	461a      	mov	r2, r3
 8003154:	4603      	mov	r3, r0
 8003156:	70fb      	strb	r3, [r7, #3]
 8003158:	460b      	mov	r3, r1
 800315a:	803b      	strh	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003168:	2b00      	cmp	r3, #0
 800316a:	da0f      	bge.n	800318c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	f003 020f 	and.w	r2, r3, #15
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	3338      	adds	r3, #56	; 0x38
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2201      	movs	r2, #1
 8003188:	705a      	strb	r2, [r3, #1]
 800318a:	e00f      	b.n	80031ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	3304      	adds	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031b8:	883a      	ldrh	r2, [r7, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	78ba      	ldrb	r2, [r7, #2]
 80031c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031d6:	78bb      	ldrb	r3, [r7, #2]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d102      	bne.n	80031e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_PCD_EP_Open+0xaa>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e00e      	b.n	800320e <HAL_PCD_EP_Open+0xc8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fd12 	bl	8006c28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800320c:	7afb      	ldrb	r3, [r7, #11]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003226:	2b00      	cmp	r3, #0
 8003228:	da0f      	bge.n	800324a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	3338      	adds	r3, #56	; 0x38
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	705a      	strb	r2, [r3, #1]
 8003248:	e00f      	b.n	800326a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_PCD_EP_Close+0x6e>
 8003280:	2302      	movs	r3, #2
 8003282:	e00e      	b.n	80032a2 <HAL_PCD_EP_Close+0x8c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fd50 	bl	8006d38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	460b      	mov	r3, r1
 80032b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d102      	bne.n	8003306 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003306:	7afb      	ldrb	r3, [r7, #11]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	6979      	ldr	r1, [r7, #20]
 800331e:	f004 f833 	bl	8007388 <USB_EP0StartXfer>
 8003322:	e008      	b.n	8003336 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	6979      	ldr	r1, [r7, #20]
 8003332:	f003 fddd 	bl	8006ef0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	f003 020f 	and.w	r2, r3, #15
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	460b      	mov	r3, r1
 800337e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003380:	7afb      	ldrb	r3, [r7, #11]
 8003382:	f003 020f 	and.w	r2, r3, #15
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	3338      	adds	r3, #56	; 0x38
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2201      	movs	r2, #1
 80033ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b0:	7afb      	ldrb	r3, [r7, #11]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d102      	bne.n	80033ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	6979      	ldr	r1, [r7, #20]
 80033e2:	f003 ffd1 	bl	8007388 <USB_EP0StartXfer>
 80033e6:	e008      	b.n	80033fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	6979      	ldr	r1, [r7, #20]
 80033f6:	f003 fd7b 	bl	8006ef0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 020f 	and.w	r2, r3, #15
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	429a      	cmp	r2, r3
 800341c:	d901      	bls.n	8003422 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e050      	b.n	80034c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003422:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003426:	2b00      	cmp	r3, #0
 8003428:	da0f      	bge.n	800344a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	3338      	adds	r3, #56	; 0x38
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	3304      	adds	r3, #4
 8003440:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	705a      	strb	r2, [r3, #1]
 8003448:	e00d      	b.n	8003466 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_PCD_EP_SetStall+0x82>
 8003482:	2302      	movs	r3, #2
 8003484:	e01e      	b.n	80034c4 <HAL_PCD_EP_SetStall+0xc0>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f004 f92d 	bl	80076f4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	b2d9      	uxtb	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034b4:	461a      	mov	r2, r3
 80034b6:	f004 fb0d 	bl	8007ad4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	f003 020f 	and.w	r2, r3, #15
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d901      	bls.n	80034ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e042      	b.n	8003570 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da0f      	bge.n	8003512 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	3338      	adds	r3, #56	; 0x38
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	705a      	strb	r2, [r3, #1]
 8003510:	e00f      	b.n	8003532 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 020f 	and.w	r2, r3, #15
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	b2da      	uxtb	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_PCD_EP_ClrStall+0x86>
 800354e:	2302      	movs	r3, #2
 8003550:	e00e      	b.n	8003570 <HAL_PCD_EP_ClrStall+0xa4>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	4618      	mov	r0, r3
 8003562:	f004 f935 	bl	80077d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af02      	add	r7, sp, #8
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3338      	adds	r3, #56	; 0x38
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	4413      	add	r3, r2
 800359c:	3304      	adds	r3, #4
 800359e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d901      	bls.n	80035b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e06c      	b.n	800368a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d902      	bls.n	80035cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	3303      	adds	r3, #3
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d4:	e02b      	b.n	800362e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d902      	bls.n	80035f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3303      	adds	r3, #3
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68d9      	ldr	r1, [r3, #12]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800360a:	b2db      	uxtb	r3, r3
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4603      	mov	r3, r0
 8003610:	6978      	ldr	r0, [r7, #20]
 8003612:	f004 f811 	bl	8007638 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	441a      	add	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	b29b      	uxth	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	429a      	cmp	r2, r3
 8003642:	d809      	bhi.n	8003658 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364c:	429a      	cmp	r2, r3
 800364e:	d203      	bcs.n	8003658 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1be      	bne.n	80035d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	429a      	cmp	r2, r3
 8003662:	d811      	bhi.n	8003688 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	2201      	movs	r2, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	43db      	mvns	r3, r3
 800367e:	6939      	ldr	r1, [r7, #16]
 8003680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003684:	4013      	ands	r3, r2
 8003686:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	333c      	adds	r3, #60	; 0x3c
 80036ac:	3304      	adds	r3, #4
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	f040 80a0 	bne.w	800380c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d015      	beq.n	8003702 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a72      	ldr	r2, [pc, #456]	; (80038a4 <PCD_EP_OutXfrComplete_int+0x210>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	f240 80dd 	bls.w	800389a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80d7 	beq.w	800389a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	461a      	mov	r2, r3
 80036fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fe:	6093      	str	r3, [r2, #8]
 8003700:	e0cb      	b.n	800389a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	461a      	mov	r2, r3
 800371a:	2320      	movs	r3, #32
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	e0bc      	b.n	800389a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	f040 80b7 	bne.w	800389a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d90f      	bls.n	8003754 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003750:	6093      	str	r3, [r2, #8]
 8003752:	e0a2      	b.n	800389a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003766:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	0159      	lsls	r1, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	440b      	add	r3, r1
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800377a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4403      	add	r3, r0
 800378a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800378e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4403      	add	r3, r0
 80037b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4419      	add	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4403      	add	r3, r0
 80037c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037cc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d114      	bne.n	80037fe <PCD_EP_OutXfrComplete_int+0x16a>
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d108      	bne.n	80037fe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037f6:	461a      	mov	r2, r3
 80037f8:	2101      	movs	r1, #1
 80037fa:	f004 f96b 	bl	8007ad4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f006 f929 	bl	8009a5c <HAL_PCD_DataOutStageCallback>
 800380a:	e046      	b.n	800389a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d124      	bne.n	800385e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382a:	461a      	mov	r2, r3
 800382c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003830:	6093      	str	r3, [r2, #8]
 8003832:	e032      	b.n	800389a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	461a      	mov	r2, r3
 800384c:	2320      	movs	r3, #32
 800384e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f006 f900 	bl	8009a5c <HAL_PCD_DataOutStageCallback>
 800385c:	e01d      	b.n	800389a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d114      	bne.n	800388e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003886:	461a      	mov	r2, r3
 8003888:	2100      	movs	r1, #0
 800388a:	f004 f923 	bl	8007ad4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f006 f8e1 	bl	8009a5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	4f54300a 	.word	0x4f54300a
 80038a8:	4f54310a 	.word	0x4f54310a

080038ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	333c      	adds	r3, #60	; 0x3c
 80038c4:	3304      	adds	r3, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a15      	ldr	r2, [pc, #84]	; (8003934 <PCD_EP_OutSetupPacket_int+0x88>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d90e      	bls.n	8003900 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	461a      	mov	r2, r3
 80038fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f006 f899 	bl	8009a38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <PCD_EP_OutSetupPacket_int+0x88>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d90c      	bls.n	8003928 <PCD_EP_OutSetupPacket_int+0x7c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d108      	bne.n	8003928 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003920:	461a      	mov	r2, r3
 8003922:	2101      	movs	r1, #1
 8003924:	f004 f8d6 	bl	8007ad4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	4f54300a 	.word	0x4f54300a

08003938 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
 8003944:	4613      	mov	r3, r2
 8003946:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003956:	883b      	ldrh	r3, [r7, #0]
 8003958:	0419      	lsls	r1, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	430a      	orrs	r2, r1
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
 8003964:	e028      	b.n	80039b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4413      	add	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]
 8003978:	e00d      	b.n	8003996 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	3340      	adds	r3, #64	; 0x40
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4413      	add	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	3301      	adds	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	3b01      	subs	r3, #1
 800399c:	429a      	cmp	r2, r3
 800399e:	d3ec      	bcc.n	800397a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039a0:	883b      	ldrh	r3, [r7, #0]
 80039a2:	0418      	lsls	r0, r3, #16
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4302      	orrs	r2, r0
 80039b0:	3340      	adds	r3, #64	; 0x40
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_PCDEx_ActivateLPM+0x44>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	10000003 	.word	0x10000003

08003a30 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40007000 	.word	0x40007000

08003a50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a7e:	f7fd faf7 	bl	8001070 <HAL_GetTick>
 8003a82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a84:	e009      	b.n	8003a9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a86:	f7fd faf3 	bl	8001070 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a94:	d901      	bls.n	8003a9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e022      	b.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a9a:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d1ee      	bne.n	8003a86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ab4:	f7fd fadc 	bl	8001070 <HAL_GetTick>
 8003ab8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aba:	e009      	b.n	8003ad0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003abc:	f7fd fad8 	bl	8001070 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aca:	d901      	bls.n	8003ad0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e007      	b.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003adc:	d1ee      	bne.n	8003abc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000

08003af0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e29b      	b.n	800403e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 8087 	beq.w	8003c22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b14:	4b96      	ldr	r3, [pc, #600]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d00c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b20:	4b93      	ldr	r3, [pc, #588]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d112      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62>
 8003b2c:	4b90      	ldr	r3, [pc, #576]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b38:	d10b      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3a:	4b8d      	ldr	r3, [pc, #564]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d06c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x130>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d168      	bne.n	8003c20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e275      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x7a>
 8003b5c:	4b84      	ldr	r3, [pc, #528]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a83      	ldr	r2, [pc, #524]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e02e      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x9c>
 8003b72:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7e      	ldr	r2, [pc, #504]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b7c      	ldr	r3, [pc, #496]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7b      	ldr	r2, [pc, #492]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e01d      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xc0>
 8003b96:	4b76      	ldr	r3, [pc, #472]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a75      	ldr	r2, [pc, #468]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b73      	ldr	r3, [pc, #460]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a72      	ldr	r2, [pc, #456]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0xd8>
 8003bb0:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6e      	ldr	r2, [pc, #440]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b6c      	ldr	r3, [pc, #432]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6b      	ldr	r2, [pc, #428]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fa4e 	bl	8001070 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fd fa4a 	bl	8001070 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e229      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xe8>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fa3a 	bl	8001070 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fd fa36 	bl	8001070 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e215      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	4b57      	ldr	r3, [pc, #348]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x110>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d069      	beq.n	8003d02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c2e:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3a:	4b4d      	ldr	r3, [pc, #308]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x190>
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x17a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e1e9      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	493d      	ldr	r1, [pc, #244]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	e040      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d023      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fd f9ec 	bl	8001070 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fd f9e8 	bl	8001070 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1c7      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cae:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4929      	ldr	r1, [pc, #164]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	600b      	str	r3, [r1, #0]
 8003cce:	e018      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd0:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a26      	ldr	r2, [pc, #152]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cd6:	f023 0301 	bic.w	r3, r3, #1
 8003cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd f9c8 	bl	8001070 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fd f9c4 	bl	8001070 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1a3      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d038      	beq.n	8003d80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d019      	beq.n	8003d4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fd f9a5 	bl	8001070 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2a:	f7fd f9a1 	bl	8001070 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e180      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x23a>
 8003d48:	e01a      	b.n	8003d80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_RCC_OscConfig+0x280>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d56:	f7fd f98b 	bl	8001070 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5e:	f7fd f987 	bl	8001070 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d903      	bls.n	8003d74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e166      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
 8003d70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ee      	bne.n	8003d5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a4 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b8c      	ldr	r3, [pc, #560]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b89      	ldr	r3, [pc, #548]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a88      	ldr	r2, [pc, #544]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b86      	ldr	r3, [pc, #536]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db6:	4b83      	ldr	r3, [pc, #524]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dc2:	4b80      	ldr	r3, [pc, #512]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7f      	ldr	r2, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fd f94f 	bl	8001070 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fd f94b 	bl	8001070 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e12a      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de8:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_RCC_OscConfig+0x4d4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x31a>
 8003dfc:	4b70      	ldr	r3, [pc, #448]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a6f      	ldr	r2, [pc, #444]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	e02d      	b.n	8003e66 <HAL_RCC_OscConfig+0x376>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x33c>
 8003e12:	4b6b      	ldr	r3, [pc, #428]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a6a      	ldr	r2, [pc, #424]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	4b68      	ldr	r3, [pc, #416]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a67      	ldr	r2, [pc, #412]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCC_OscConfig+0x376>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_OscConfig+0x35e>
 8003e34:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a61      	ldr	r2, [pc, #388]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	4b5f      	ldr	r3, [pc, #380]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a5e      	ldr	r2, [pc, #376]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	e00b      	b.n	8003e66 <HAL_RCC_OscConfig+0x376>
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a5b      	ldr	r2, [pc, #364]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fd f8ff 	bl	8001070 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fd f8fb 	bl	8001070 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0d8      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ee      	beq.n	8003e76 <HAL_RCC_OscConfig+0x386>
 8003e98:	e014      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7fd f8e9 	bl	8001070 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fd f8e5 	bl	8001070 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0c2      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ee      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80ae 	beq.w	800403c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d06d      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d14b      	bne.n	8003f8c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fd f8b6 	bl	8001070 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fd f8b2 	bl	8001070 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e091      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	061b      	lsls	r3, r3, #24
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	071b      	lsls	r3, r3, #28
 8003f52:	491b      	ldr	r1, [pc, #108]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd f884 	bl	8001070 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd f880 	bl	8001070 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e05f      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x47c>
 8003f8a:	e057      	b.n	800403c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fd f86a 	bl	8001070 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fd f866 	bl	8001070 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e045      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <HAL_RCC_OscConfig+0x4d0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4b0>
 8003fbe:	e03d      	b.n	800403c <HAL_RCC_OscConfig+0x54c>
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fc8:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <HAL_RCC_OscConfig+0x558>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d030      	beq.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d129      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d122      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ffe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004000:	4293      	cmp	r3, r2
 8004002:	d119      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	3b01      	subs	r3, #1
 8004012:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d10f      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0d0      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d910      	bls.n	8004094 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b67      	ldr	r3, [pc, #412]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 020f 	bic.w	r2, r3, #15
 800407a:	4965      	ldr	r1, [pc, #404]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b63      	ldr	r3, [pc, #396]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0b8      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ac:	4b59      	ldr	r3, [pc, #356]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a58      	ldr	r2, [pc, #352]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c4:	4b53      	ldr	r3, [pc, #332]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b50      	ldr	r3, [pc, #320]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	494d      	ldr	r1, [pc, #308]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d040      	beq.n	8004170 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	4b47      	ldr	r3, [pc, #284]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d115      	bne.n	800412e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e07f      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	4b41      	ldr	r3, [pc, #260]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e073      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e06b      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4936      	ldr	r1, [pc, #216]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004140:	f7fc ff96 	bl	8001070 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fc ff92 	bl	8001070 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e053      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 020c 	and.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d1eb      	bne.n	8004148 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b27      	ldr	r3, [pc, #156]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d210      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 020f 	bic.w	r2, r3, #15
 8004186:	4922      	ldr	r1, [pc, #136]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b20      	ldr	r3, [pc, #128]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e032      	b.n	8004206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ac:	4b19      	ldr	r3, [pc, #100]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4916      	ldr	r1, [pc, #88]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	490e      	ldr	r1, [pc, #56]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041de:	f000 f821 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80041e2:	4601      	mov	r1, r0
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x1cc>)
 80041f0:	5cd3      	ldrb	r3, [r2, r3]
 80041f2:	fa21 f303 	lsr.w	r3, r1, r3
 80041f6:	4a09      	ldr	r2, [pc, #36]	; (800421c <HAL_RCC_ClockConfig+0x1d0>)
 80041f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1d4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc fef2 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023c00 	.word	0x40023c00
 8004214:	40023800 	.word	0x40023800
 8004218:	0800a288 	.word	0x0800a288
 800421c:	20000000 	.word	0x20000000
 8004220:	20000004 	.word	0x20000004

08004224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	2300      	movs	r3, #0
 8004234:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800423a:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b04      	cmp	r3, #4
 8004244:	d007      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x32>
 8004246:	2b08      	cmp	r3, #8
 8004248:	d008      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x38>
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 80b4 	bne.w	80043b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b5e      	ldr	r3, [pc, #376]	; (80043cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004252:	60bb      	str	r3, [r7, #8]
      break;
 8004254:	e0b3      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004256:	4b5e      	ldr	r3, [pc, #376]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004258:	60bb      	str	r3, [r7, #8]
      break;
 800425a:	e0b0      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800425c:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004264:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004266:	4b58      	ldr	r3, [pc, #352]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d04a      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	4b55      	ldr	r3, [pc, #340]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	f04f 0400 	mov.w	r4, #0
 800427c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	ea03 0501 	and.w	r5, r3, r1
 8004288:	ea04 0602 	and.w	r6, r4, r2
 800428c:	4629      	mov	r1, r5
 800428e:	4632      	mov	r2, r6
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	0154      	lsls	r4, r2, #5
 800429a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800429e:	014b      	lsls	r3, r1, #5
 80042a0:	4619      	mov	r1, r3
 80042a2:	4622      	mov	r2, r4
 80042a4:	1b49      	subs	r1, r1, r5
 80042a6:	eb62 0206 	sbc.w	r2, r2, r6
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	f04f 0400 	mov.w	r4, #0
 80042b2:	0194      	lsls	r4, r2, #6
 80042b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042b8:	018b      	lsls	r3, r1, #6
 80042ba:	1a5b      	subs	r3, r3, r1
 80042bc:	eb64 0402 	sbc.w	r4, r4, r2
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	00e2      	lsls	r2, r4, #3
 80042ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ce:	00d9      	lsls	r1, r3, #3
 80042d0:	460b      	mov	r3, r1
 80042d2:	4614      	mov	r4, r2
 80042d4:	195b      	adds	r3, r3, r5
 80042d6:	eb44 0406 	adc.w	r4, r4, r6
 80042da:	f04f 0100 	mov.w	r1, #0
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	0262      	lsls	r2, r4, #9
 80042e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042e8:	0259      	lsls	r1, r3, #9
 80042ea:	460b      	mov	r3, r1
 80042ec:	4614      	mov	r4, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	4621      	mov	r1, r4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f04f 0400 	mov.w	r4, #0
 80042f8:	461a      	mov	r2, r3
 80042fa:	4623      	mov	r3, r4
 80042fc:	f7fb ff9c 	bl	8000238 <__aeabi_uldivmod>
 8004300:	4603      	mov	r3, r0
 8004302:	460c      	mov	r4, r1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	e049      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004308:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	f04f 0400 	mov.w	r4, #0
 8004312:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	ea03 0501 	and.w	r5, r3, r1
 800431e:	ea04 0602 	and.w	r6, r4, r2
 8004322:	4629      	mov	r1, r5
 8004324:	4632      	mov	r2, r6
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	f04f 0400 	mov.w	r4, #0
 800432e:	0154      	lsls	r4, r2, #5
 8004330:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004334:	014b      	lsls	r3, r1, #5
 8004336:	4619      	mov	r1, r3
 8004338:	4622      	mov	r2, r4
 800433a:	1b49      	subs	r1, r1, r5
 800433c:	eb62 0206 	sbc.w	r2, r2, r6
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	f04f 0400 	mov.w	r4, #0
 8004348:	0194      	lsls	r4, r2, #6
 800434a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800434e:	018b      	lsls	r3, r1, #6
 8004350:	1a5b      	subs	r3, r3, r1
 8004352:	eb64 0402 	sbc.w	r4, r4, r2
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	00e2      	lsls	r2, r4, #3
 8004360:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004364:	00d9      	lsls	r1, r3, #3
 8004366:	460b      	mov	r3, r1
 8004368:	4614      	mov	r4, r2
 800436a:	195b      	adds	r3, r3, r5
 800436c:	eb44 0406 	adc.w	r4, r4, r6
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	02a2      	lsls	r2, r4, #10
 800437a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800437e:	0299      	lsls	r1, r3, #10
 8004380:	460b      	mov	r3, r1
 8004382:	4614      	mov	r4, r2
 8004384:	4618      	mov	r0, r3
 8004386:	4621      	mov	r1, r4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f04f 0400 	mov.w	r4, #0
 800438e:	461a      	mov	r2, r3
 8004390:	4623      	mov	r3, r4
 8004392:	f7fb ff51 	bl	8000238 <__aeabi_uldivmod>
 8004396:	4603      	mov	r3, r0
 8004398:	460c      	mov	r4, r1
 800439a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	3301      	adds	r3, #1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	60bb      	str	r3, [r7, #8]
      break;
 80043b6:	e002      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043ba:	60bb      	str	r3, [r7, #8]
      break;
 80043bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043be:	68bb      	ldr	r3, [r7, #8]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c8:	40023800 	.word	0x40023800
 80043cc:	00f42400 	.word	0x00f42400
 80043d0:	007a1200 	.word	0x007a1200

080043d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000000 	.word	0x20000000

080043ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043f0:	f7ff fff0 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 80043f4:	4601      	mov	r1, r0
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0a9b      	lsrs	r3, r3, #10
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4a03      	ldr	r2, [pc, #12]	; (8004410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004402:	5cd3      	ldrb	r3, [r2, r3]
 8004404:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004408:	4618      	mov	r0, r3
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	0800a298 	.word	0x0800a298

08004414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004418:	f7ff ffdc 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 800441c:	4601      	mov	r1, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	0b5b      	lsrs	r3, r3, #13
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4a03      	ldr	r2, [pc, #12]	; (8004438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800442a:	5cd3      	ldrb	r3, [r2, r3]
 800442c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40023800 	.word	0x40023800
 8004438:	0800a298 	.word	0x0800a298

0800443c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d012      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004464:	4b69      	ldr	r3, [pc, #420]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a68      	ldr	r2, [pc, #416]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800446e:	6093      	str	r3, [r2, #8]
 8004470:	4b66      	ldr	r3, [pc, #408]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	4964      	ldr	r1, [pc, #400]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004486:	2301      	movs	r3, #1
 8004488:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d017      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004496:	4b5d      	ldr	r3, [pc, #372]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	4959      	ldr	r1, [pc, #356]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b4:	d101      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d017      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044d2:	4b4e      	ldr	r3, [pc, #312]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	494a      	ldr	r1, [pc, #296]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f0:	d101      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800450e:	2301      	movs	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 808b 	beq.w	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004520:	4b3a      	ldr	r3, [pc, #232]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	4a39      	ldr	r2, [pc, #228]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	6413      	str	r3, [r2, #64]	; 0x40
 800452c:	4b37      	ldr	r3, [pc, #220]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004538:	4b35      	ldr	r3, [pc, #212]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a34      	ldr	r2, [pc, #208]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004544:	f7fc fd94 	bl	8001070 <HAL_GetTick>
 8004548:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fc fd90 	bl	8001070 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e38d      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800456a:	4b28      	ldr	r3, [pc, #160]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d035      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	d02e      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004588:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004590:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004592:	4b1e      	ldr	r3, [pc, #120]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a1d      	ldr	r2, [pc, #116]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a1a      	ldr	r2, [pc, #104]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045aa:	4a18      	ldr	r2, [pc, #96]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045b0:	4b16      	ldr	r3, [pc, #88]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d114      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fc fd58 	bl	8001070 <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	e00a      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fc fd54 	bl	8001070 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e34f      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ee      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045f2:	d111      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004602:	400b      	ands	r3, r1
 8004604:	4901      	ldr	r1, [pc, #4]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
 800460a:	e00b      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800460c:	40023800 	.word	0x40023800
 8004610:	40007000 	.word	0x40007000
 8004614:	0ffffcff 	.word	0x0ffffcff
 8004618:	4bb3      	ldr	r3, [pc, #716]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	4ab2      	ldr	r2, [pc, #712]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004622:	6093      	str	r3, [r2, #8]
 8004624:	4bb0      	ldr	r3, [pc, #704]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004626:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004630:	49ad      	ldr	r1, [pc, #692]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004632:	4313      	orrs	r3, r2
 8004634:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004642:	4ba9      	ldr	r3, [pc, #676]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004648:	4aa7      	ldr	r2, [pc, #668]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004652:	4ba5      	ldr	r3, [pc, #660]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004654:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	49a2      	ldr	r1, [pc, #648]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004670:	4b9d      	ldr	r3, [pc, #628]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467e:	499a      	ldr	r1, [pc, #616]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004692:	4b95      	ldr	r3, [pc, #596]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a0:	4991      	ldr	r1, [pc, #580]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046b4:	4b8c      	ldr	r3, [pc, #560]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c2:	4989      	ldr	r1, [pc, #548]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046d6:	4b84      	ldr	r3, [pc, #528]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	4980      	ldr	r1, [pc, #512]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046f8:	4b7b      	ldr	r3, [pc, #492]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	4978      	ldr	r1, [pc, #480]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800471a:	4b73      	ldr	r3, [pc, #460]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f023 020c 	bic.w	r2, r3, #12
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004728:	496f      	ldr	r1, [pc, #444]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800473c:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474a:	4967      	ldr	r1, [pc, #412]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800475e:	4b62      	ldr	r3, [pc, #392]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	495e      	ldr	r1, [pc, #376]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004780:	4b59      	ldr	r3, [pc, #356]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478e:	4956      	ldr	r1, [pc, #344]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047a2:	4b51      	ldr	r3, [pc, #324]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b0:	494d      	ldr	r1, [pc, #308]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047c4:	4b48      	ldr	r3, [pc, #288]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	4945      	ldr	r1, [pc, #276]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047e6:	4b40      	ldr	r3, [pc, #256]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f4:	493c      	ldr	r1, [pc, #240]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004808:	4b37      	ldr	r3, [pc, #220]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004816:	4934      	ldr	r1, [pc, #208]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d011      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800482a:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004838:	492b      	ldr	r1, [pc, #172]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004848:	d101      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800485a:	2301      	movs	r3, #1
 800485c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800486a:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004878:	491b      	ldr	r1, [pc, #108]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800488c:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800489c:	4912      	ldr	r1, [pc, #72]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c0:	4909      	ldr	r1, [pc, #36]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00f      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	e002      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	4985      	ldr	r1, [pc, #532]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004900:	4b80      	ldr	r3, [pc, #512]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004906:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004910:	497c      	ldr	r1, [pc, #496]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d005      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004926:	f040 80d6 	bne.w	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800492a:	4b76      	ldr	r3, [pc, #472]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a75      	ldr	r2, [pc, #468]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004930:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004936:	f7fc fb9b 	bl	8001070 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800493e:	f7fc fb97 	bl	8001070 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b64      	cmp	r3, #100	; 0x64
 800494a:	d901      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e194      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004950:	4b6c      	ldr	r3, [pc, #432]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d021      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496c:	2b00      	cmp	r3, #0
 800496e:	d11d      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004970:	4b64      	ldr	r3, [pc, #400]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004976:	0c1b      	lsrs	r3, r3, #16
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800497e:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004984:	0e1b      	lsrs	r3, r3, #24
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	019a      	lsls	r2, r3, #6
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	431a      	orrs	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	061b      	lsls	r3, r3, #24
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	071b      	lsls	r3, r3, #28
 80049a4:	4957      	ldr	r1, [pc, #348]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d02e      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d6:	d129      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049d8:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049e6:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ec:	0f1b      	lsrs	r3, r3, #28
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	019a      	lsls	r2, r3, #6
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	061b      	lsls	r3, r3, #24
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	071b      	lsls	r3, r3, #28
 8004a0c:	493d      	ldr	r1, [pc, #244]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a14:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1a:	f023 021f 	bic.w	r2, r3, #31
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	3b01      	subs	r3, #1
 8004a24:	4937      	ldr	r1, [pc, #220]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01d      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a38:	4b32      	ldr	r3, [pc, #200]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3e:	0e1b      	lsrs	r3, r3, #24
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a46:	4b2f      	ldr	r3, [pc, #188]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4c:	0f1b      	lsrs	r3, r3, #28
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	019a      	lsls	r2, r3, #6
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	431a      	orrs	r2, r3
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	061b      	lsls	r3, r3, #24
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	071b      	lsls	r3, r3, #28
 8004a6c:	4925      	ldr	r1, [pc, #148]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d011      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	019a      	lsls	r2, r3, #6
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	061b      	lsls	r3, r3, #24
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	071b      	lsls	r3, r3, #28
 8004a9c:	4919      	ldr	r1, [pc, #100]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aa4:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a16      	ldr	r2, [pc, #88]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab0:	f7fc fade 	bl	8001070 <HAL_GetTick>
 8004ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ab8:	f7fc fada 	bl	8001070 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0d7      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aca:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	f040 80cd 	bne.w	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aea:	f7fc fac1 	bl	8001070 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004af0:	e00a      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004af2:	f7fc fabd 	bl	8001070 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b64      	cmp	r3, #100	; 0x64
 8004afe:	d903      	bls.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e0ba      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004b04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b08:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b14:	d0ed      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d02e      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d12a      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b3e:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b4c:	4b4d      	ldr	r3, [pc, #308]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	0f1b      	lsrs	r3, r3, #28
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	019a      	lsls	r2, r3, #6
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	061b      	lsls	r3, r3, #24
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	071b      	lsls	r3, r3, #28
 8004b72:	4944      	ldr	r1, [pc, #272]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b7a:	4b42      	ldr	r3, [pc, #264]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	493d      	ldr	r1, [pc, #244]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d022      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba8:	d11d      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004baa:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	0e1b      	lsrs	r3, r3, #24
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bb8:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	0f1b      	lsrs	r3, r3, #28
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	019a      	lsls	r2, r3, #6
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	061b      	lsls	r3, r3, #24
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	071b      	lsls	r3, r3, #28
 8004bde:	4929      	ldr	r1, [pc, #164]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d028      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	0e1b      	lsrs	r3, r3, #24
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c00:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	019a      	lsls	r2, r3, #6
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	071b      	lsls	r3, r3, #28
 8004c26:	4917      	ldr	r1, [pc, #92]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	4911      	ldr	r1, [pc, #68]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c50:	f7fc fa0e 	bl	8001070 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c58:	f7fc fa0a 	bl	8001070 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e007      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c76:	d1ef      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40023800 	.word	0x40023800

08004c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e01d      	b.n	8004cd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fb ff96 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 fa36 	bl	8005138 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_TIM_Base_Start_IT+0x50>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b06      	cmp	r3, #6
 8004d08:	d00b      	beq.n	8004d22 <HAL_TIM_Base_Start_IT+0x42>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d10:	d007      	beq.n	8004d22 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0201 	orr.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	00010007 	.word	0x00010007

08004d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0202 	mvn.w	r2, #2
 8004d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9c0 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9b2 	bl	80050e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9c3 	bl	8005110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0204 	mvn.w	r2, #4
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f996 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f988 	bl	80050e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f999 	bl	8005110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d122      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d11b      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0208 	mvn.w	r2, #8
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f96c 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f95e 	bl	80050e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f96f 	bl	8005110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d122      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d11b      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0210 	mvn.w	r2, #16
 8004e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f942 	bl	80050fc <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f934 	bl	80050e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f945 	bl	8005110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0201 	mvn.w	r2, #1
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f004 fbee 	bl	8009694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fafc 	bl	80054dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d10e      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d107      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 faef 	bl	80054f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d10e      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	d107      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8f3 	bl	8005124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d10e      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f06f 0220 	mvn.w	r2, #32
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 faaf 	bl	80054c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_ConfigClockSource+0x18>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0a6      	b.n	80050da <HAL_TIM_ConfigClockSource+0x166>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4b4f      	ldr	r3, [pc, #316]	; (80050e4 <HAL_TIM_ConfigClockSource+0x170>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d067      	beq.n	8005094 <HAL_TIM_ConfigClockSource+0x120>
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d80b      	bhi.n	8004fe0 <HAL_TIM_ConfigClockSource+0x6c>
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d073      	beq.n	80050b4 <HAL_TIM_ConfigClockSource+0x140>
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d802      	bhi.n	8004fd6 <HAL_TIM_ConfigClockSource+0x62>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d06f      	beq.n	80050b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fd4:	e078      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d06c      	beq.n	80050b4 <HAL_TIM_ConfigClockSource+0x140>
 8004fda:	2b30      	cmp	r3, #48	; 0x30
 8004fdc:	d06a      	beq.n	80050b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004fde:	e073      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004fe0:	2b70      	cmp	r3, #112	; 0x70
 8004fe2:	d00d      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x8c>
 8004fe4:	2b70      	cmp	r3, #112	; 0x70
 8004fe6:	d804      	bhi.n	8004ff2 <HAL_TIM_ConfigClockSource+0x7e>
 8004fe8:	2b50      	cmp	r3, #80	; 0x50
 8004fea:	d033      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0xe0>
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d041      	beq.n	8005074 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ff0:	e06a      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d066      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x152>
 8004ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffc:	d017      	beq.n	800502e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ffe:	e063      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6899      	ldr	r1, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f000 f9ac 	bl	800536c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005022:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	609a      	str	r2, [r3, #8]
      break;
 800502c:	e04c      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6899      	ldr	r1, [r3, #8]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f000 f995 	bl	800536c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005050:	609a      	str	r2, [r3, #8]
      break;
 8005052:	e039      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	461a      	mov	r2, r3
 8005062:	f000 f909 	bl	8005278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2150      	movs	r1, #80	; 0x50
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f962 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8005072:	e029      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	461a      	mov	r2, r3
 8005082:	f000 f928 	bl	80052d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2160      	movs	r1, #96	; 0x60
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f952 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 8005092:	e019      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	6859      	ldr	r1, [r3, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	461a      	mov	r2, r3
 80050a2:	f000 f8e9 	bl	8005278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2140      	movs	r1, #64	; 0x40
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f942 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 80050b2:	e009      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f000 f939 	bl	8005336 <TIM_ITRx_SetConfig>
      break;
 80050c4:	e000      	b.n	80050c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80050c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	fffeff88 	.word	0xfffeff88

080050e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a40      	ldr	r2, [pc, #256]	; (800524c <TIM_Base_SetConfig+0x114>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005156:	d00f      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3d      	ldr	r2, [pc, #244]	; (8005250 <TIM_Base_SetConfig+0x118>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00b      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a3c      	ldr	r2, [pc, #240]	; (8005254 <TIM_Base_SetConfig+0x11c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a3b      	ldr	r2, [pc, #236]	; (8005258 <TIM_Base_SetConfig+0x120>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0x40>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a3a      	ldr	r2, [pc, #232]	; (800525c <TIM_Base_SetConfig+0x124>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d108      	bne.n	800518a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2f      	ldr	r2, [pc, #188]	; (800524c <TIM_Base_SetConfig+0x114>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d02b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d027      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2c      	ldr	r2, [pc, #176]	; (8005250 <TIM_Base_SetConfig+0x118>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d023      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2b      	ldr	r2, [pc, #172]	; (8005254 <TIM_Base_SetConfig+0x11c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01f      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a2a      	ldr	r2, [pc, #168]	; (8005258 <TIM_Base_SetConfig+0x120>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a29      	ldr	r2, [pc, #164]	; (800525c <TIM_Base_SetConfig+0x124>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d017      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a28      	ldr	r2, [pc, #160]	; (8005260 <TIM_Base_SetConfig+0x128>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a27      	ldr	r2, [pc, #156]	; (8005264 <TIM_Base_SetConfig+0x12c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a26      	ldr	r2, [pc, #152]	; (8005268 <TIM_Base_SetConfig+0x130>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a25      	ldr	r2, [pc, #148]	; (800526c <TIM_Base_SetConfig+0x134>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a24      	ldr	r2, [pc, #144]	; (8005270 <TIM_Base_SetConfig+0x138>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a23      	ldr	r2, [pc, #140]	; (8005274 <TIM_Base_SetConfig+0x13c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d108      	bne.n	80051fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a0a      	ldr	r2, [pc, #40]	; (800524c <TIM_Base_SetConfig+0x114>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0xf8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <TIM_Base_SetConfig+0x124>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d103      	bne.n	8005238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	615a      	str	r2, [r3, #20]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40010000 	.word	0x40010000
 8005250:	40000400 	.word	0x40000400
 8005254:	40000800 	.word	0x40000800
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40010400 	.word	0x40010400
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800
 800526c:	40001800 	.word	0x40001800
 8005270:	40001c00 	.word	0x40001c00
 8005274:	40002000 	.word	0x40002000

08005278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f023 0201 	bic.w	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 030a 	bic.w	r3, r3, #10
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	621a      	str	r2, [r3, #32]
}
 80052ca:	bf00      	nop
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b087      	sub	sp, #28
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0210 	bic.w	r2, r3, #16
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	031b      	lsls	r3, r3, #12
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	621a      	str	r2, [r3, #32]
}
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	f043 0307 	orr.w	r3, r3, #7
 8005358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	609a      	str	r2, [r3, #8]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	021a      	lsls	r2, r3, #8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	431a      	orrs	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4313      	orrs	r3, r2
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e06d      	b.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a30      	ldr	r2, [pc, #192]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2f      	ldr	r2, [pc, #188]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d108      	bne.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a20      	ldr	r2, [pc, #128]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d022      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005436:	d01d      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d018      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d10c      	bne.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	4313      	orrs	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40010400 	.word	0x40010400
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40001800 	.word	0x40001800

080054c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e040      	b.n	8005598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fb80 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	; 0x24
 8005530:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 faae 	bl	8005aa4 <UART_SetConfig>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e022      	b.n	8005598 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fd4c 	bl	8005ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800556e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800557e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fdd3 	bl	800613c <UART_CheckIdleState>
 8005596:	4603      	mov	r3, r0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	f040 808a 	bne.w	80056cc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Receive_IT+0x24>
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e082      	b.n	80056ce <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Receive_IT+0x36>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e07b      	b.n	80056ce <HAL_UART_Receive_IT+0x12e>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005602:	d10e      	bne.n	8005622 <HAL_UART_Receive_IT+0x82>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <HAL_UART_Receive_IT+0x78>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005612:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005616:	e02d      	b.n	8005674 <HAL_UART_Receive_IT+0xd4>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	22ff      	movs	r2, #255	; 0xff
 800561c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005620:	e028      	b.n	8005674 <HAL_UART_Receive_IT+0xd4>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10d      	bne.n	8005646 <HAL_UART_Receive_IT+0xa6>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <HAL_UART_Receive_IT+0x9c>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800563a:	e01b      	b.n	8005674 <HAL_UART_Receive_IT+0xd4>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	227f      	movs	r2, #127	; 0x7f
 8005640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005644:	e016      	b.n	8005674 <HAL_UART_Receive_IT+0xd4>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800564e:	d10d      	bne.n	800566c <HAL_UART_Receive_IT+0xcc>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <HAL_UART_Receive_IT+0xc2>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	227f      	movs	r2, #127	; 0x7f
 800565c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005660:	e008      	b.n	8005674 <HAL_UART_Receive_IT+0xd4>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	223f      	movs	r2, #63	; 0x3f
 8005666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800566a:	e003      	b.n	8005674 <HAL_UART_Receive_IT+0xd4>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2222      	movs	r2, #34	; 0x22
 800567e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	d107      	bne.n	80056aa <HAL_UART_Receive_IT+0x10a>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <HAL_UART_Receive_IT+0x13c>)
 80056a6:	661a      	str	r2, [r3, #96]	; 0x60
 80056a8:	e002      	b.n	80056b0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a0c      	ldr	r2, [pc, #48]	; (80056e0 <HAL_UART_Receive_IT+0x140>)
 80056ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80056c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	0800650f 	.word	0x0800650f
 80056e0:	08006469 	.word	0x08006469

080056e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d164      	bne.n	80057c4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_UART_Transmit_DMA+0x22>
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e05d      	b.n	80057c6 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_UART_Transmit_DMA+0x34>
 8005714:	2302      	movs	r3, #2
 8005716:	e056      	b.n	80057c6 <HAL_UART_Transmit_DMA+0xe2>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	88fa      	ldrh	r2, [r7, #6]
 800572a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2221      	movs	r2, #33	; 0x21
 8005740:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02a      	beq.n	80057a0 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574e:	4a20      	ldr	r2, [pc, #128]	; (80057d0 <HAL_UART_Transmit_DMA+0xec>)
 8005750:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005756:	4a1f      	ldr	r2, [pc, #124]	; (80057d4 <HAL_UART_Transmit_DMA+0xf0>)
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800575e:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <HAL_UART_Transmit_DMA+0xf4>)
 8005760:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005766:	2200      	movs	r2, #0
 8005768:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	4619      	mov	r1, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3328      	adds	r3, #40	; 0x28
 800577a:	461a      	mov	r2, r3
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	f7fb fe65 	bl	800144c <HAL_DMA_Start_IT>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2210      	movs	r2, #16
 800578c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e012      	b.n	80057c6 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2240      	movs	r2, #64	; 0x40
 80057a6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057be:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	e000      	b.n	80057c6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
  }
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	08006327 	.word	0x08006327
 80057d4:	08006377 	.word	0x08006377
 80057d8:	08006393 	.word	0x08006393

080057dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005802:	4013      	ands	r3, r2
 8005804:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d113      	bne.n	8005834 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d009      	beq.n	8005834 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8114 	beq.w	8005a52 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	4798      	blx	r3
      }
      return;
 8005832:	e10e      	b.n	8005a52 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80d6 	beq.w	80059e8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d105      	bne.n	8005852 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80cb 	beq.w	80059e8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00e      	beq.n	800587a <HAL_UART_IRQHandler+0x9e>
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2201      	movs	r2, #1
 800586c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005872:	f043 0201 	orr.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <HAL_UART_IRQHandler+0xc6>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2202      	movs	r2, #2
 8005894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589a:	f043 0204 	orr.w	r2, r3, #4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <HAL_UART_IRQHandler+0xee>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2204      	movs	r2, #4
 80058bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c2:	f043 0202 	orr.w	r2, r3, #2
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2208      	movs	r2, #8
 80058ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f4:	f043 0208 	orr.w	r2, r3, #8
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <HAL_UART_IRQHandler+0x14a>
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005918:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8093 	beq.w	8005a56 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00c      	beq.n	8005954 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005958:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d004      	beq.n	8005972 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800596e:	2b00      	cmp	r3, #0
 8005970:	d031      	beq.n	80059d6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fcb7 	bl	80062e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d123      	bne.n	80059ce <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005994:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d013      	beq.n	80059c6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a2:	4a30      	ldr	r2, [pc, #192]	; (8005a64 <HAL_UART_IRQHandler+0x288>)
 80059a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fb fdae 	bl	800150c <HAL_DMA_Abort_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c4:	e00e      	b.n	80059e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f858 	bl	8005a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	e00a      	b.n	80059e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f854 	bl	8005a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	e006      	b.n	80059e4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f850 	bl	8005a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80059e2:	e038      	b.n	8005a56 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e4:	bf00      	nop
    return;
 80059e6:	e036      	b.n	8005a56 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <HAL_UART_IRQHandler+0x232>
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f842 	bl	8005a90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a0c:	e026      	b.n	8005a5c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
    }
    return;
 8005a32:	e012      	b.n	8005a5a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <HAL_UART_IRQHandler+0x280>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d009      	beq.n	8005a5c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fcf4 	bl	8006436 <UART_EndTransmit_IT>
    return;
 8005a4e:	bf00      	nop
 8005a50:	e004      	b.n	8005a5c <HAL_UART_IRQHandler+0x280>
      return;
 8005a52:	bf00      	nop
 8005a54:	e002      	b.n	8005a5c <HAL_UART_IRQHandler+0x280>
    return;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <HAL_UART_IRQHandler+0x280>
    return;
 8005a5a:	bf00      	nop
  }

}
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	0800640b 	.word	0x0800640b

08005a68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4bb1      	ldr	r3, [pc, #708]	; (8005d98 <UART_SetConfig+0x2f4>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	6939      	ldr	r1, [r7, #16]
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a9f      	ldr	r2, [pc, #636]	; (8005d9c <UART_SetConfig+0x2f8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d121      	bne.n	8005b68 <UART_SetConfig+0xc4>
 8005b24:	4b9e      	ldr	r3, [pc, #632]	; (8005da0 <UART_SetConfig+0x2fc>)
 8005b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d816      	bhi.n	8005b60 <UART_SetConfig+0xbc>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0x94>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b4f 	.word	0x08005b4f
 8005b44:	08005b5b 	.word	0x08005b5b
 8005b48:	2301      	movs	r3, #1
 8005b4a:	77fb      	strb	r3, [r7, #31]
 8005b4c:	e151      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	77fb      	strb	r3, [r7, #31]
 8005b52:	e14e      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005b54:	2304      	movs	r3, #4
 8005b56:	77fb      	strb	r3, [r7, #31]
 8005b58:	e14b      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	77fb      	strb	r3, [r7, #31]
 8005b5e:	e148      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005b60:	2310      	movs	r3, #16
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	bf00      	nop
 8005b66:	e144      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a8d      	ldr	r2, [pc, #564]	; (8005da4 <UART_SetConfig+0x300>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d134      	bne.n	8005bdc <UART_SetConfig+0x138>
 8005b72:	4b8b      	ldr	r3, [pc, #556]	; (8005da0 <UART_SetConfig+0x2fc>)
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b78:	f003 030c 	and.w	r3, r3, #12
 8005b7c:	2b0c      	cmp	r3, #12
 8005b7e:	d829      	bhi.n	8005bd4 <UART_SetConfig+0x130>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <UART_SetConfig+0xe4>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bbd 	.word	0x08005bbd
 8005b8c:	08005bd5 	.word	0x08005bd5
 8005b90:	08005bd5 	.word	0x08005bd5
 8005b94:	08005bd5 	.word	0x08005bd5
 8005b98:	08005bc9 	.word	0x08005bc9
 8005b9c:	08005bd5 	.word	0x08005bd5
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005bd5 	.word	0x08005bd5
 8005ba8:	08005bc3 	.word	0x08005bc3
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005bd5 	.word	0x08005bd5
 8005bb4:	08005bd5 	.word	0x08005bd5
 8005bb8:	08005bcf 	.word	0x08005bcf
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e117      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e114      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e111      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005bce:	2308      	movs	r3, #8
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e10e      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	bf00      	nop
 8005bda:	e10a      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a71      	ldr	r2, [pc, #452]	; (8005da8 <UART_SetConfig+0x304>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d120      	bne.n	8005c28 <UART_SetConfig+0x184>
 8005be6:	4b6e      	ldr	r3, [pc, #440]	; (8005da0 <UART_SetConfig+0x2fc>)
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d00f      	beq.n	8005c14 <UART_SetConfig+0x170>
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d802      	bhi.n	8005bfe <UART_SetConfig+0x15a>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <UART_SetConfig+0x164>
 8005bfc:	e010      	b.n	8005c20 <UART_SetConfig+0x17c>
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d005      	beq.n	8005c0e <UART_SetConfig+0x16a>
 8005c02:	2b30      	cmp	r3, #48	; 0x30
 8005c04:	d009      	beq.n	8005c1a <UART_SetConfig+0x176>
 8005c06:	e00b      	b.n	8005c20 <UART_SetConfig+0x17c>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e0f1      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e0ee      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c14:	2304      	movs	r3, #4
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e0eb      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e0e8      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c20:	2310      	movs	r3, #16
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	bf00      	nop
 8005c26:	e0e4      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5f      	ldr	r2, [pc, #380]	; (8005dac <UART_SetConfig+0x308>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d120      	bne.n	8005c74 <UART_SetConfig+0x1d0>
 8005c32:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <UART_SetConfig+0x2fc>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d00f      	beq.n	8005c60 <UART_SetConfig+0x1bc>
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d802      	bhi.n	8005c4a <UART_SetConfig+0x1a6>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <UART_SetConfig+0x1b0>
 8005c48:	e010      	b.n	8005c6c <UART_SetConfig+0x1c8>
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d005      	beq.n	8005c5a <UART_SetConfig+0x1b6>
 8005c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c50:	d009      	beq.n	8005c66 <UART_SetConfig+0x1c2>
 8005c52:	e00b      	b.n	8005c6c <UART_SetConfig+0x1c8>
 8005c54:	2300      	movs	r3, #0
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e0cb      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e0c8      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c60:	2304      	movs	r3, #4
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e0c5      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c66:	2308      	movs	r3, #8
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e0c2      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	bf00      	nop
 8005c72:	e0be      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a4d      	ldr	r2, [pc, #308]	; (8005db0 <UART_SetConfig+0x30c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d124      	bne.n	8005cc8 <UART_SetConfig+0x224>
 8005c7e:	4b48      	ldr	r3, [pc, #288]	; (8005da0 <UART_SetConfig+0x2fc>)
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8c:	d012      	beq.n	8005cb4 <UART_SetConfig+0x210>
 8005c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c92:	d802      	bhi.n	8005c9a <UART_SetConfig+0x1f6>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <UART_SetConfig+0x204>
 8005c98:	e012      	b.n	8005cc0 <UART_SetConfig+0x21c>
 8005c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c9e:	d006      	beq.n	8005cae <UART_SetConfig+0x20a>
 8005ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca4:	d009      	beq.n	8005cba <UART_SetConfig+0x216>
 8005ca6:	e00b      	b.n	8005cc0 <UART_SetConfig+0x21c>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e0a1      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e09e      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e09b      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005cba:	2308      	movs	r3, #8
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e098      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	bf00      	nop
 8005cc6:	e094      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a39      	ldr	r2, [pc, #228]	; (8005db4 <UART_SetConfig+0x310>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d124      	bne.n	8005d1c <UART_SetConfig+0x278>
 8005cd2:	4b33      	ldr	r3, [pc, #204]	; (8005da0 <UART_SetConfig+0x2fc>)
 8005cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce0:	d012      	beq.n	8005d08 <UART_SetConfig+0x264>
 8005ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce6:	d802      	bhi.n	8005cee <UART_SetConfig+0x24a>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <UART_SetConfig+0x258>
 8005cec:	e012      	b.n	8005d14 <UART_SetConfig+0x270>
 8005cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf2:	d006      	beq.n	8005d02 <UART_SetConfig+0x25e>
 8005cf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cf8:	d009      	beq.n	8005d0e <UART_SetConfig+0x26a>
 8005cfa:	e00b      	b.n	8005d14 <UART_SetConfig+0x270>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e077      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d02:	2302      	movs	r3, #2
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e074      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e071      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d0e:	2308      	movs	r3, #8
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	e06e      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d14:	2310      	movs	r3, #16
 8005d16:	77fb      	strb	r3, [r7, #31]
 8005d18:	bf00      	nop
 8005d1a:	e06a      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a25      	ldr	r2, [pc, #148]	; (8005db8 <UART_SetConfig+0x314>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d124      	bne.n	8005d70 <UART_SetConfig+0x2cc>
 8005d26:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <UART_SetConfig+0x2fc>)
 8005d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d34:	d012      	beq.n	8005d5c <UART_SetConfig+0x2b8>
 8005d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3a:	d802      	bhi.n	8005d42 <UART_SetConfig+0x29e>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <UART_SetConfig+0x2ac>
 8005d40:	e012      	b.n	8005d68 <UART_SetConfig+0x2c4>
 8005d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d46:	d006      	beq.n	8005d56 <UART_SetConfig+0x2b2>
 8005d48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d4c:	d009      	beq.n	8005d62 <UART_SetConfig+0x2be>
 8005d4e:	e00b      	b.n	8005d68 <UART_SetConfig+0x2c4>
 8005d50:	2300      	movs	r3, #0
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e04d      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d56:	2302      	movs	r3, #2
 8005d58:	77fb      	strb	r3, [r7, #31]
 8005d5a:	e04a      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e047      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d62:	2308      	movs	r3, #8
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e044      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	bf00      	nop
 8005d6e:	e040      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <UART_SetConfig+0x318>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d139      	bne.n	8005dee <UART_SetConfig+0x34a>
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <UART_SetConfig+0x2fc>)
 8005d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d88:	d027      	beq.n	8005dda <UART_SetConfig+0x336>
 8005d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d8e:	d817      	bhi.n	8005dc0 <UART_SetConfig+0x31c>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01c      	beq.n	8005dce <UART_SetConfig+0x32a>
 8005d94:	e027      	b.n	8005de6 <UART_SetConfig+0x342>
 8005d96:	bf00      	nop
 8005d98:	efff69f3 	.word	0xefff69f3
 8005d9c:	40011000 	.word	0x40011000
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40004400 	.word	0x40004400
 8005da8:	40004800 	.word	0x40004800
 8005dac:	40004c00 	.word	0x40004c00
 8005db0:	40005000 	.word	0x40005000
 8005db4:	40011400 	.word	0x40011400
 8005db8:	40007800 	.word	0x40007800
 8005dbc:	40007c00 	.word	0x40007c00
 8005dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc4:	d006      	beq.n	8005dd4 <UART_SetConfig+0x330>
 8005dc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dca:	d009      	beq.n	8005de0 <UART_SetConfig+0x33c>
 8005dcc:	e00b      	b.n	8005de6 <UART_SetConfig+0x342>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e00e      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e00b      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005dda:	2304      	movs	r3, #4
 8005ddc:	77fb      	strb	r3, [r7, #31]
 8005dde:	e008      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005de0:	2308      	movs	r3, #8
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e005      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005de6:	2310      	movs	r3, #16
 8005de8:	77fb      	strb	r3, [r7, #31]
 8005dea:	bf00      	nop
 8005dec:	e001      	b.n	8005df2 <UART_SetConfig+0x34e>
 8005dee:	2310      	movs	r3, #16
 8005df0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfa:	d17f      	bne.n	8005efc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005dfc:	7ffb      	ldrb	r3, [r7, #31]
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d85c      	bhi.n	8005ebc <UART_SetConfig+0x418>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x364>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e4d 	.word	0x08005e4d
 8005e10:	08005e6d 	.word	0x08005e6d
 8005e14:	08005ebd 	.word	0x08005ebd
 8005e18:	08005e85 	.word	0x08005e85
 8005e1c:	08005ebd 	.word	0x08005ebd
 8005e20:	08005ebd 	.word	0x08005ebd
 8005e24:	08005ebd 	.word	0x08005ebd
 8005e28:	08005ea5 	.word	0x08005ea5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7fe fade 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 8005e30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	005a      	lsls	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	441a      	add	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	61bb      	str	r3, [r7, #24]
        break;
 8005e4a:	e03a      	b.n	8005ec2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e4c:	f7fe fae2 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8005e50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	005a      	lsls	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	441a      	add	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	61bb      	str	r3, [r7, #24]
        break;
 8005e6a:	e02a      	b.n	8005ec2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	085a      	lsrs	r2, r3, #1
 8005e72:	4b5f      	ldr	r3, [pc, #380]	; (8005ff0 <UART_SetConfig+0x54c>)
 8005e74:	4413      	add	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6852      	ldr	r2, [r2, #4]
 8005e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	61bb      	str	r3, [r7, #24]
        break;
 8005e82:	e01e      	b.n	8005ec2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e84:	f7fe f9ce 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 8005e88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	005a      	lsls	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	441a      	add	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	61bb      	str	r3, [r7, #24]
        break;
 8005ea2:	e00e      	b.n	8005ec2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	61bb      	str	r3, [r7, #24]
        break;
 8005eba:	e002      	b.n	8005ec2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
        break;
 8005ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b0f      	cmp	r3, #15
 8005ec6:	d916      	bls.n	8005ef6 <UART_SetConfig+0x452>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ece:	d212      	bcs.n	8005ef6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f023 030f 	bic.w	r3, r3, #15
 8005ed8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	897b      	ldrh	r3, [r7, #10]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	897a      	ldrh	r2, [r7, #10]
 8005ef2:	60da      	str	r2, [r3, #12]
 8005ef4:	e070      	b.n	8005fd8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
 8005efa:	e06d      	b.n	8005fd8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005efc:	7ffb      	ldrb	r3, [r7, #31]
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d859      	bhi.n	8005fb6 <UART_SetConfig+0x512>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0x464>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f4b 	.word	0x08005f4b
 8005f10:	08005f69 	.word	0x08005f69
 8005f14:	08005fb7 	.word	0x08005fb7
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005fb7 	.word	0x08005fb7
 8005f20:	08005fb7 	.word	0x08005fb7
 8005f24:	08005fb7 	.word	0x08005fb7
 8005f28:	08005f9f 	.word	0x08005f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f2c:	f7fe fa5e 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 8005f30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	085a      	lsrs	r2, r3, #1
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	441a      	add	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	61bb      	str	r3, [r7, #24]
        break;
 8005f48:	e038      	b.n	8005fbc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f4a:	f7fe fa63 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8005f4e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	085a      	lsrs	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	441a      	add	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	61bb      	str	r3, [r7, #24]
        break;
 8005f66:	e029      	b.n	8005fbc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	085a      	lsrs	r2, r3, #1
 8005f6e:	4b21      	ldr	r3, [pc, #132]	; (8005ff4 <UART_SetConfig+0x550>)
 8005f70:	4413      	add	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6852      	ldr	r2, [r2, #4]
 8005f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	61bb      	str	r3, [r7, #24]
        break;
 8005f7e:	e01d      	b.n	8005fbc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f80:	f7fe f950 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 8005f84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	085a      	lsrs	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	441a      	add	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	61bb      	str	r3, [r7, #24]
        break;
 8005f9c:	e00e      	b.n	8005fbc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	61bb      	str	r3, [r7, #24]
        break;
 8005fb4:	e002      	b.n	8005fbc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
        break;
 8005fba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	2b0f      	cmp	r3, #15
 8005fc0:	d908      	bls.n	8005fd4 <UART_SetConfig+0x530>
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc8:	d204      	bcs.n	8005fd4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	e001      	b.n	8005fd8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	01e84800 	.word	0x01e84800
 8005ff4:	00f42400 	.word	0x00f42400

08005ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	f003 0310 	and.w	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00a      	beq.n	80060aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00a      	beq.n	80060cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01a      	beq.n	800610e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f6:	d10a      	bne.n	800610e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	605a      	str	r2, [r3, #4]
  }
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af02      	add	r7, sp, #8
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800614a:	f7fa ff91 	bl	8001070 <HAL_GetTick>
 800614e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b08      	cmp	r3, #8
 800615c:	d10e      	bne.n	800617c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800615e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f82a 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e020      	b.n	80061be <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b04      	cmp	r3, #4
 8006188:	d10e      	bne.n	80061a8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f814 	bl	80061c6 <UART_WaitOnFlagUntilTimeout>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e00a      	b.n	80061be <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	4613      	mov	r3, r2
 80061d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d6:	e05d      	b.n	8006294 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061de:	d059      	beq.n	8006294 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e0:	f7fa ff46 	bl	8001070 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d11b      	bne.n	800622e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006204:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0201 	bic.w	r2, r2, #1
 8006214:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e042      	b.n	80062b4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d02b      	beq.n	8006294 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624a:	d123      	bne.n	8006294 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006254:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006264:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e00f      	b.n	80062b4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4013      	ands	r3, r2
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d092      	beq.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80062d2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062fc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0201 	bic.w	r2, r2, #1
 800630c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	661a      	str	r2, [r3, #96]	; 0x60
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633c:	d014      	beq.n	8006368 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006354:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006364:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006366:	e002      	b.n	800636e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f003 f961 	bl	8009630 <HAL_UART_TxCpltCallback>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7ff fb6f 	bl	8005a68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b086      	sub	sp, #24
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b80      	cmp	r3, #128	; 0x80
 80063b8:	d109      	bne.n	80063ce <UART_DMAError+0x3c>
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b21      	cmp	r3, #33	; 0x21
 80063be:	d106      	bne.n	80063ce <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80063c8:	6978      	ldr	r0, [r7, #20]
 80063ca:	f7ff ff77 	bl	80062bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d109      	bne.n	80063f0 <UART_DMAError+0x5e>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b22      	cmp	r3, #34	; 0x22
 80063e0:	d106      	bne.n	80063f0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80063ea:	6978      	ldr	r0, [r7, #20]
 80063ec:	f7ff ff7b 	bl	80062e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f4:	f043 0210 	orr.w	r2, r3, #16
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063fc:	6978      	ldr	r0, [r7, #20]
 80063fe:	f7ff fb3d 	bl	8005a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006402:	bf00      	nop
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff fb27 	bl	8005a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f003 f8e8 	bl	8009630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006476:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800647c:	2b22      	cmp	r3, #34	; 0x22
 800647e:	d13a      	bne.n	80064f6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006488:	89bb      	ldrh	r3, [r7, #12]
 800648a:	b2d9      	uxtb	r1, r3
 800648c:	89fb      	ldrh	r3, [r7, #14]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	400a      	ands	r2, r1
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d121      	bne.n	8006506 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064d0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0201 	bic.w	r2, r2, #1
 80064e0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f003 f8ac 	bl	800964c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064f4:	e007      	b.n	8006506 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699a      	ldr	r2, [r3, #24]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f042 0208 	orr.w	r2, r2, #8
 8006504:	619a      	str	r2, [r3, #24]
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800651c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006522:	2b22      	cmp	r3, #34	; 0x22
 8006524:	d13a      	bne.n	800659c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006534:	89ba      	ldrh	r2, [r7, #12]
 8006536:	89fb      	ldrh	r3, [r7, #14]
 8006538:	4013      	ands	r3, r2
 800653a:	b29a      	uxth	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006544:	1c9a      	adds	r2, r3, #2
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d121      	bne.n	80065ac <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006576:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f003 f859 	bl	800964c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800659a:	e007      	b.n	80065ac <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0208 	orr.w	r2, r2, #8
 80065aa:	619a      	str	r2, [r3, #24]
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b4:	b084      	sub	sp, #16
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	f107 001c 	add.w	r0, r7, #28
 80065c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d120      	bne.n	800660e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	4b20      	ldr	r3, [pc, #128]	; (8006660 <USB_CoreInit+0xac>)
 80065de:	4013      	ands	r3, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d105      	bne.n	8006602 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 fac4 	bl	8007b90 <USB_CoreReset>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	e010      	b.n	8006630 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 fab8 	bl	8007b90 <USB_CoreReset>
 8006620:	4603      	mov	r3, r0
 8006622:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10b      	bne.n	800664e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f043 0206 	orr.w	r2, r3, #6
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800665a:	b004      	add	sp, #16
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	ffbdffbf 	.word	0xffbdffbf

08006664 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d165      	bne.n	8006744 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4a41      	ldr	r2, [pc, #260]	; (8006780 <USB_SetTurnaroundTime+0x11c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d906      	bls.n	800668e <USB_SetTurnaroundTime+0x2a>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4a40      	ldr	r2, [pc, #256]	; (8006784 <USB_SetTurnaroundTime+0x120>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d802      	bhi.n	800668e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006688:	230f      	movs	r3, #15
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e062      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4a3c      	ldr	r2, [pc, #240]	; (8006784 <USB_SetTurnaroundTime+0x120>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d906      	bls.n	80066a4 <USB_SetTurnaroundTime+0x40>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	4a3b      	ldr	r2, [pc, #236]	; (8006788 <USB_SetTurnaroundTime+0x124>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d802      	bhi.n	80066a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800669e:	230e      	movs	r3, #14
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e057      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4a38      	ldr	r2, [pc, #224]	; (8006788 <USB_SetTurnaroundTime+0x124>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d906      	bls.n	80066ba <USB_SetTurnaroundTime+0x56>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4a37      	ldr	r2, [pc, #220]	; (800678c <USB_SetTurnaroundTime+0x128>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d802      	bhi.n	80066ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066b4:	230d      	movs	r3, #13
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e04c      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4a33      	ldr	r2, [pc, #204]	; (800678c <USB_SetTurnaroundTime+0x128>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d906      	bls.n	80066d0 <USB_SetTurnaroundTime+0x6c>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4a32      	ldr	r2, [pc, #200]	; (8006790 <USB_SetTurnaroundTime+0x12c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d802      	bhi.n	80066d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066ca:	230c      	movs	r3, #12
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	e041      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4a2f      	ldr	r2, [pc, #188]	; (8006790 <USB_SetTurnaroundTime+0x12c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d906      	bls.n	80066e6 <USB_SetTurnaroundTime+0x82>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4a2e      	ldr	r2, [pc, #184]	; (8006794 <USB_SetTurnaroundTime+0x130>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d802      	bhi.n	80066e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066e0:	230b      	movs	r3, #11
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e036      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <USB_SetTurnaroundTime+0x130>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d906      	bls.n	80066fc <USB_SetTurnaroundTime+0x98>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4a29      	ldr	r2, [pc, #164]	; (8006798 <USB_SetTurnaroundTime+0x134>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d802      	bhi.n	80066fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066f6:	230a      	movs	r3, #10
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	e02b      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4a26      	ldr	r2, [pc, #152]	; (8006798 <USB_SetTurnaroundTime+0x134>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d906      	bls.n	8006712 <USB_SetTurnaroundTime+0xae>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4a25      	ldr	r2, [pc, #148]	; (800679c <USB_SetTurnaroundTime+0x138>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d802      	bhi.n	8006712 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800670c:	2309      	movs	r3, #9
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e020      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4a21      	ldr	r2, [pc, #132]	; (800679c <USB_SetTurnaroundTime+0x138>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d906      	bls.n	8006728 <USB_SetTurnaroundTime+0xc4>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <USB_SetTurnaroundTime+0x13c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d802      	bhi.n	8006728 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006722:	2308      	movs	r3, #8
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e015      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4a1d      	ldr	r2, [pc, #116]	; (80067a0 <USB_SetTurnaroundTime+0x13c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d906      	bls.n	800673e <USB_SetTurnaroundTime+0xda>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <USB_SetTurnaroundTime+0x140>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d802      	bhi.n	800673e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006738:	2307      	movs	r3, #7
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	e00a      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800673e:	2306      	movs	r3, #6
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e007      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800674a:	2309      	movs	r3, #9
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e001      	b.n	8006754 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006750:	2309      	movs	r3, #9
 8006752:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	029b      	lsls	r3, r3, #10
 8006768:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800676c:	431a      	orrs	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	00d8acbf 	.word	0x00d8acbf
 8006784:	00e4e1bf 	.word	0x00e4e1bf
 8006788:	00f423ff 	.word	0x00f423ff
 800678c:	0106737f 	.word	0x0106737f
 8006790:	011a499f 	.word	0x011a499f
 8006794:	01312cff 	.word	0x01312cff
 8006798:	014ca43f 	.word	0x014ca43f
 800679c:	016e35ff 	.word	0x016e35ff
 80067a0:	01a6ab1f 	.word	0x01a6ab1f
 80067a4:	01e847ff 	.word	0x01e847ff

080067a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f043 0201 	orr.w	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f023 0201 	bic.w	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d106      	bne.n	8006818 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	e00b      	b.n	8006830 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60da      	str	r2, [r3, #12]
 800682a:	e001      	b.n	8006830 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e003      	b.n	8006838 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006830:	2032      	movs	r0, #50	; 0x32
 8006832:	f7fa fc29 	bl	8001088 <HAL_Delay>

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006840:	b084      	sub	sp, #16
 8006842:	b580      	push	{r7, lr}
 8006844:	b086      	sub	sp, #24
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800684e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	e009      	b.n	8006874 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3340      	adds	r3, #64	; 0x40
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b0e      	cmp	r3, #14
 8006878:	d9f2      	bls.n	8006860 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11c      	bne.n	80068ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688e:	f043 0302 	orr.w	r3, r3, #2
 8006892:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e005      	b.n	80068c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d8:	4619      	mov	r1, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	461a      	mov	r2, r3
 80068e2:	680b      	ldr	r3, [r1, #0]
 80068e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10c      	bne.n	8006906 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d104      	bne.n	80068fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068f2:	2100      	movs	r1, #0
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f959 	bl	8006bac <USB_SetDevSpeed>
 80068fa:	e018      	b.n	800692e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068fc:	2101      	movs	r1, #1
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f954 	bl	8006bac <USB_SetDevSpeed>
 8006904:	e013      	b.n	800692e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	2b03      	cmp	r3, #3
 800690a:	d10c      	bne.n	8006926 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006912:	2100      	movs	r1, #0
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f949 	bl	8006bac <USB_SetDevSpeed>
 800691a:	e008      	b.n	800692e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800691c:	2101      	movs	r1, #1
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f944 	bl	8006bac <USB_SetDevSpeed>
 8006924:	e003      	b.n	800692e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006926:	2103      	movs	r1, #3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f93f 	bl	8006bac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800692e:	2110      	movs	r1, #16
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f8f3 	bl	8006b1c <USB_FlushTxFifo>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f911 	bl	8006b68 <USB_FlushRxFifo>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	461a      	mov	r2, r3
 8006958:	2300      	movs	r3, #0
 800695a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006962:	461a      	mov	r2, r3
 8006964:	2300      	movs	r3, #0
 8006966:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696e:	461a      	mov	r2, r3
 8006970:	2300      	movs	r3, #0
 8006972:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	e043      	b.n	8006a02 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800698c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006990:	d118      	bne.n	80069c4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	461a      	mov	r2, r3
 80069a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e013      	b.n	80069d6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ba:	461a      	mov	r2, r3
 80069bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	e008      	b.n	80069d6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	461a      	mov	r2, r3
 80069d2:	2300      	movs	r3, #0
 80069d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e2:	461a      	mov	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f4:	461a      	mov	r2, r3
 80069f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3301      	adds	r3, #1
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d3b7      	bcc.n	800697a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
 8006a0e:	e043      	b.n	8006a98 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a26:	d118      	bne.n	8006a5a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	e013      	b.n	8006a6c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a50:	461a      	mov	r2, r3
 8006a52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	e008      	b.n	8006a6c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a66:	461a      	mov	r2, r3
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3301      	adds	r3, #1
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d3b7      	bcc.n	8006a10 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ac0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d105      	bne.n	8006ad4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	f043 0210 	orr.w	r2, r3, #16
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <USB_DevInit+0x2d4>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f043 0208 	orr.w	r2, r3, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d105      	bne.n	8006b04 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699a      	ldr	r2, [r3, #24]
 8006afc:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <USB_DevInit+0x2d8>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b10:	b004      	add	sp, #16
 8006b12:	4770      	bx	lr
 8006b14:	803c3800 	.word	0x803c3800
 8006b18:	40000004 	.word	0x40000004

08006b1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	019b      	lsls	r3, r3, #6
 8006b2e:	f043 0220 	orr.w	r2, r3, #32
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <USB_FlushTxFifo+0x48>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d901      	bls.n	8006b48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e006      	b.n	8006b56 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d0f0      	beq.n	8006b36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	00030d40 	.word	0x00030d40

08006b68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2210      	movs	r2, #16
 8006b78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4a09      	ldr	r2, [pc, #36]	; (8006ba8 <USB_FlushRxFifo+0x40>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e006      	b.n	8006b9a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d0f0      	beq.n	8006b7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	00030d40 	.word	0x00030d40

08006bac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	68f9      	ldr	r1, [r7, #12]
 8006bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b087      	sub	sp, #28
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0306 	and.w	r3, r3, #6
 8006bf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]
 8006c02:	e00a      	b.n	8006c1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d002      	beq.n	8006c10 <USB_GetDevSpeed+0x32>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b06      	cmp	r3, #6
 8006c0e:	d102      	bne.n	8006c16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c10:	2302      	movs	r3, #2
 8006c12:	75fb      	strb	r3, [r7, #23]
 8006c14:	e001      	b.n	8006c1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c16:	230f      	movs	r3, #15
 8006c18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	785b      	ldrb	r3, [r3, #1]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d139      	bne.n	8006cb8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	2101      	movs	r1, #1
 8006c56:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	68f9      	ldr	r1, [r7, #12]
 8006c5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c62:	4313      	orrs	r3, r2
 8006c64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d153      	bne.n	8006d24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	78db      	ldrb	r3, [r3, #3]
 8006c96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	059b      	lsls	r3, r3, #22
 8006c9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	0159      	lsls	r1, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	440b      	add	r3, r1
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4b20      	ldr	r3, [pc, #128]	; (8006d34 <USB_ActivateEndpoint+0x10c>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	600b      	str	r3, [r1, #0]
 8006cb6:	e035      	b.n	8006d24 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	2101      	movs	r1, #1
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	041b      	lsls	r3, r3, #16
 8006cd0:	68f9      	ldr	r1, [r7, #12]
 8006cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d119      	bne.n	8006d24 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	78db      	ldrb	r3, [r3, #3]
 8006d0a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	0159      	lsls	r1, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	440b      	add	r3, r1
 8006d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <USB_ActivateEndpoint+0x10c>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	10008000 	.word	0x10008000

08006d38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d161      	bne.n	8006e18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d6a:	d11f      	bne.n	8006dac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006daa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 030f 	and.w	r3, r3, #15
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dcc:	4013      	ands	r3, r2
 8006dce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	2101      	movs	r1, #1
 8006de2:	fa01 f303 	lsl.w	r3, r1, r3
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	43db      	mvns	r3, r3
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df0:	4013      	ands	r3, r2
 8006df2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	0159      	lsls	r1, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	440b      	add	r3, r1
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4b35      	ldr	r3, [pc, #212]	; (8006ee8 <USB_DeactivateEndpoint+0x1b0>)
 8006e12:	4013      	ands	r3, r2
 8006e14:	600b      	str	r3, [r1, #0]
 8006e16:	e060      	b.n	8006eda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e2e:	d11f      	bne.n	8006e70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	0151      	lsls	r1, r2, #5
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	440a      	add	r2, r1
 8006e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	2101      	movs	r1, #1
 8006e82:	fa01 f303 	lsl.w	r3, r1, r3
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e90:	4013      	ands	r3, r2
 8006e92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eaa:	041b      	lsls	r3, r3, #16
 8006eac:	43db      	mvns	r3, r3
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	0159      	lsls	r1, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	440b      	add	r3, r1
 8006ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <USB_DeactivateEndpoint+0x1b4>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	ec337800 	.word	0xec337800
 8006eec:	eff37800 	.word	0xeff37800

08006ef0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08a      	sub	sp, #40	; 0x28
 8006ef4:	af02      	add	r7, sp, #8
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	f040 8163 	bne.w	80071d8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d132      	bne.n	8006f80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	0159      	lsls	r1, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	440b      	add	r3, r1
 8006f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f34:	4619      	mov	r1, r3
 8006f36:	4ba5      	ldr	r3, [pc, #660]	; (80071cc <USB_EPStartXfer+0x2dc>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	0159      	lsls	r1, r3, #5
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	440b      	add	r3, r1
 8006f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f76:	4619      	mov	r1, r3
 8006f78:	4b95      	ldr	r3, [pc, #596]	; (80071d0 <USB_EPStartXfer+0x2e0>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	610b      	str	r3, [r1, #16]
 8006f7e:	e074      	b.n	800706a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	0159      	lsls	r1, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	440b      	add	r3, r1
 8006f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4b8c      	ldr	r3, [pc, #560]	; (80071d0 <USB_EPStartXfer+0x2e0>)
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	0159      	lsls	r1, r3, #5
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	440b      	add	r3, r1
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4b83      	ldr	r3, [pc, #524]	; (80071cc <USB_EPStartXfer+0x2dc>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6959      	ldr	r1, [r3, #20]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	440b      	add	r3, r1
 8006fdc:	1e59      	subs	r1, r3, #1
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fe6:	04d9      	lsls	r1, r3, #19
 8006fe8:	4b7a      	ldr	r3, [pc, #488]	; (80071d4 <USB_EPStartXfer+0x2e4>)
 8006fea:	400b      	ands	r3, r1
 8006fec:	69b9      	ldr	r1, [r7, #24]
 8006fee:	0148      	lsls	r0, r1, #5
 8006ff0:	69f9      	ldr	r1, [r7, #28]
 8006ff2:	4401      	add	r1, r0
 8006ff4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007012:	69b9      	ldr	r1, [r7, #24]
 8007014:	0148      	lsls	r0, r1, #5
 8007016:	69f9      	ldr	r1, [r7, #28]
 8007018:	4401      	add	r1, r0
 800701a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800701e:	4313      	orrs	r3, r2
 8007020:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	78db      	ldrb	r3, [r3, #3]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d11f      	bne.n	800706a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007044:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007048:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	0151      	lsls	r1, r2, #5
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	440a      	add	r2, r1
 8007060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007068:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d14b      	bne.n	8007108 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	461a      	mov	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	78db      	ldrb	r3, [r3, #3]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d128      	bne.n	80070e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d110      	bne.n	80070c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	e00f      	b.n	80070e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	0151      	lsls	r1, r2, #5
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	440a      	add	r2, r1
 80070fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	e133      	b.n	8007370 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	440a      	add	r2, r1
 800711e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007122:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007126:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	78db      	ldrb	r3, [r3, #3]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d015      	beq.n	800715c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 811b 	beq.w	8007370 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	2101      	movs	r1, #1
 800714c:	fa01 f303 	lsl.w	r3, r1, r3
 8007150:	69f9      	ldr	r1, [r7, #28]
 8007152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007156:	4313      	orrs	r3, r2
 8007158:	634b      	str	r3, [r1, #52]	; 0x34
 800715a:	e109      	b.n	8007370 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	d110      	bne.n	800718e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007186:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	e00f      	b.n	80071ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	0151      	lsls	r1, r2, #5
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	440a      	add	r2, r1
 80071a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	68d9      	ldr	r1, [r3, #12]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	781a      	ldrb	r2, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	b298      	uxth	r0, r3
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4603      	mov	r3, r0
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fa38 	bl	8007638 <USB_WritePacket>
 80071c8:	e0d2      	b.n	8007370 <USB_EPStartXfer+0x480>
 80071ca:	bf00      	nop
 80071cc:	e007ffff 	.word	0xe007ffff
 80071d0:	fff80000 	.word	0xfff80000
 80071d4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	0159      	lsls	r1, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	4619      	mov	r1, r3
 80071f4:	4b61      	ldr	r3, [pc, #388]	; (800737c <USB_EPStartXfer+0x48c>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	0159      	lsls	r1, r3, #5
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	440b      	add	r3, r1
 8007210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007214:	4619      	mov	r1, r3
 8007216:	4b5a      	ldr	r3, [pc, #360]	; (8007380 <USB_EPStartXfer+0x490>)
 8007218:	4013      	ands	r3, r2
 800721a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d123      	bne.n	800726c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800723a:	69b9      	ldr	r1, [r7, #24]
 800723c:	0148      	lsls	r0, r1, #5
 800723e:	69f9      	ldr	r1, [r7, #28]
 8007240:	4401      	add	r1, r0
 8007242:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007246:	4313      	orrs	r3, r2
 8007248:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	440a      	add	r2, r1
 8007260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007268:	6113      	str	r3, [r2, #16]
 800726a:	e033      	b.n	80072d4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	695a      	ldr	r2, [r3, #20]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	4413      	add	r3, r2
 8007276:	1e5a      	subs	r2, r3, #1
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007280:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	8afb      	ldrh	r3, [r7, #22]
 8007292:	04d9      	lsls	r1, r3, #19
 8007294:	4b3b      	ldr	r3, [pc, #236]	; (8007384 <USB_EPStartXfer+0x494>)
 8007296:	400b      	ands	r3, r1
 8007298:	69b9      	ldr	r1, [r7, #24]
 800729a:	0148      	lsls	r0, r1, #5
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	4401      	add	r1, r0
 80072a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072a4:	4313      	orrs	r3, r2
 80072a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	8af9      	ldrh	r1, [r7, #22]
 80072bc:	fb01 f303 	mul.w	r3, r1, r3
 80072c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c4:	69b9      	ldr	r1, [r7, #24]
 80072c6:	0148      	lsls	r0, r1, #5
 80072c8:	69f9      	ldr	r1, [r7, #28]
 80072ca:	4401      	add	r1, r0
 80072cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072d0:	4313      	orrs	r3, r2
 80072d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80072d4:	79fb      	ldrb	r3, [r7, #7]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d10d      	bne.n	80072f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	68d9      	ldr	r1, [r3, #12]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	460a      	mov	r2, r1
 80072f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	78db      	ldrb	r3, [r3, #3]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d128      	bne.n	8007350 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d110      	bne.n	8007330 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	0151      	lsls	r1, r2, #5
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	440a      	add	r2, r1
 8007324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	e00f      	b.n	8007350 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	69fa      	ldr	r2, [r7, #28]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800734a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800734e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800736e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	fff80000 	.word	0xfff80000
 8007380:	e007ffff 	.word	0xe007ffff
 8007384:	1ff80000 	.word	0x1ff80000

08007388 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	f040 80cd 	bne.w	8007544 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d132      	bne.n	8007418 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	0159      	lsls	r1, r3, #5
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	440b      	add	r3, r1
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	4619      	mov	r1, r3
 80073ce:	4b98      	ldr	r3, [pc, #608]	; (8007630 <USB_EP0StartXfer+0x2a8>)
 80073d0:	4013      	ands	r3, r2
 80073d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	0159      	lsls	r1, r3, #5
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	440b      	add	r3, r1
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	4619      	mov	r1, r3
 8007410:	4b88      	ldr	r3, [pc, #544]	; (8007634 <USB_EP0StartXfer+0x2ac>)
 8007412:	4013      	ands	r3, r2
 8007414:	610b      	str	r3, [r1, #16]
 8007416:	e04e      	b.n	80074b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	0159      	lsls	r1, r3, #5
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	440b      	add	r3, r1
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	4619      	mov	r1, r3
 8007434:	4b7f      	ldr	r3, [pc, #508]	; (8007634 <USB_EP0StartXfer+0x2ac>)
 8007436:	4013      	ands	r3, r2
 8007438:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	0159      	lsls	r1, r3, #5
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	440b      	add	r3, r1
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	4619      	mov	r1, r3
 8007456:	4b76      	ldr	r3, [pc, #472]	; (8007630 <USB_EP0StartXfer+0x2a8>)
 8007458:	4013      	ands	r3, r2
 800745a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	d903      	bls.n	8007470 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	440a      	add	r2, r1
 8007486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800748e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a6:	6939      	ldr	r1, [r7, #16]
 80074a8:	0148      	lsls	r0, r1, #5
 80074aa:	6979      	ldr	r1, [r7, #20]
 80074ac:	4401      	add	r1, r0
 80074ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074b2:	4313      	orrs	r3, r2
 80074b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d11e      	bne.n	80074fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d009      	beq.n	80074d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d0:	461a      	mov	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	e092      	b.n	8007620 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007518:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d07e      	beq.n	8007620 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	2101      	movs	r1, #1
 8007534:	fa01 f303 	lsl.w	r3, r1, r3
 8007538:	6979      	ldr	r1, [r7, #20]
 800753a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800753e:	4313      	orrs	r3, r2
 8007540:	634b      	str	r3, [r1, #52]	; 0x34
 8007542:	e06d      	b.n	8007620 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007550:	691a      	ldr	r2, [r3, #16]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	0159      	lsls	r1, r3, #5
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	440b      	add	r3, r1
 800755a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755e:	4619      	mov	r1, r3
 8007560:	4b34      	ldr	r3, [pc, #208]	; (8007634 <USB_EP0StartXfer+0x2ac>)
 8007562:	4013      	ands	r3, r2
 8007564:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	0159      	lsls	r1, r3, #5
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	440b      	add	r3, r1
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	4619      	mov	r1, r3
 8007582:	4b2b      	ldr	r3, [pc, #172]	; (8007630 <USB_EP0StartXfer+0x2a8>)
 8007584:	4013      	ands	r3, r2
 8007586:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	0151      	lsls	r1, r2, #5
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	440a      	add	r2, r1
 80075ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ce:	6939      	ldr	r1, [r7, #16]
 80075d0:	0148      	lsls	r0, r1, #5
 80075d2:	6979      	ldr	r1, [r7, #20]
 80075d4:	4401      	add	r1, r0
 80075d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075da:	4313      	orrs	r3, r2
 80075dc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d10d      	bne.n	8007600 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d009      	beq.n	8007600 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	68d9      	ldr	r1, [r3, #12]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fc:	460a      	mov	r2, r1
 80075fe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800761a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800761e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	e007ffff 	.word	0xe007ffff
 8007634:	fff80000 	.word	0xfff80000

08007638 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007638:	b480      	push	{r7}
 800763a:	b089      	sub	sp, #36	; 0x24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4611      	mov	r1, r2
 8007644:	461a      	mov	r2, r3
 8007646:	460b      	mov	r3, r1
 8007648:	71fb      	strb	r3, [r7, #7]
 800764a:	4613      	mov	r3, r2
 800764c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d11a      	bne.n	8007694 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800765e:	88bb      	ldrh	r3, [r7, #4]
 8007660:	3303      	adds	r3, #3
 8007662:	089b      	lsrs	r3, r3, #2
 8007664:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007666:	2300      	movs	r3, #0
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e00f      	b.n	800768c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	031a      	lsls	r2, r3, #12
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4413      	add	r3, r2
 8007674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007678:	461a      	mov	r2, r3
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	3304      	adds	r3, #4
 8007684:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	3301      	adds	r3, #1
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3eb      	bcc.n	800766c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3724      	adds	r7, #36	; 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b089      	sub	sp, #36	; 0x24
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	4613      	mov	r3, r2
 80076ae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	3303      	adds	r3, #3
 80076bc:	089b      	lsrs	r3, r3, #2
 80076be:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80076c0:	2300      	movs	r3, #0
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	e00b      	b.n	80076de <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	601a      	str	r2, [r3, #0]
    pDest++;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	3304      	adds	r3, #4
 80076d6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	3301      	adds	r3, #1
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d3ef      	bcc.n	80076c6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80076e6:	69fb      	ldr	r3, [r7, #28]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3724      	adds	r7, #36	; 0x24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d12c      	bne.n	800776a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	db12      	blt.n	8007748 <USB_EPSetStall+0x54>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00f      	beq.n	8007748 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007742:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007746:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	e02b      	b.n	80077c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	db12      	blt.n	80077a2 <USB_EPSetStall+0xae>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00f      	beq.n	80077a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	0151      	lsls	r1, r2, #5
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	440a      	add	r2, r1
 8007798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d128      	bne.n	800783e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800780a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	78db      	ldrb	r3, [r3, #3]
 8007810:	2b03      	cmp	r3, #3
 8007812:	d003      	beq.n	800781c <USB_EPClearStall+0x4c>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	78db      	ldrb	r3, [r3, #3]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d138      	bne.n	800788e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	e027      	b.n	800788e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007858:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800785c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	78db      	ldrb	r3, [r3, #3]
 8007862:	2b03      	cmp	r3, #3
 8007864:	d003      	beq.n	800786e <USB_EPClearStall+0x9e>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	78db      	ldrb	r3, [r3, #3]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d10f      	bne.n	800788e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	0151      	lsls	r1, r2, #5
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	440a      	add	r2, r1
 8007884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800788c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80078be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80078d0:	68f9      	ldr	r1, [r7, #12]
 80078d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078d6:	4313      	orrs	r3, r2
 80078d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007902:	f023 0302 	bic.w	r3, r3, #2
 8007906:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007908:	2003      	movs	r0, #3
 800790a:	f7f9 fbbd 	bl	8001088 <HAL_Delay>

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007932:	f043 0302 	orr.w	r3, r3, #2
 8007936:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007938:	2003      	movs	r0, #3
 800793a:	f7f9 fba5 	bl	8001088 <HAL_Delay>

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4013      	ands	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007960:	68fb      	ldr	r3, [r7, #12]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	4013      	ands	r3, r2
 8007990:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	0c1b      	lsrs	r3, r3, #16
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b085      	sub	sp, #20
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	4013      	ands	r3, r2
 80079c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	b29b      	uxth	r3, r3
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	4013      	ands	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a04:	68bb      	ldr	r3, [r7, #8]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b087      	sub	sp, #28
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a42:	01db      	lsls	r3, r3, #7
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a60:	68bb      	ldr	r3, [r7, #8]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <USB_ActivateSetup+0x44>)
 8007aaa:	4013      	ands	r3, r2
 8007aac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	fffff800 	.word	0xfffff800

08007ad4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	460b      	mov	r3, r1
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	333c      	adds	r3, #60	; 0x3c
 8007aea:	3304      	adds	r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <USB_EP0_OutStart+0xb8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d90a      	bls.n	8007b0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b08:	d101      	bne.n	8007b0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e037      	b.n	8007b7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b14:	461a      	mov	r2, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b3c:	f043 0318 	orr.w	r3, r3, #24
 8007b40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007b54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b56:	7afb      	ldrb	r3, [r7, #11]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d10f      	bne.n	8007b7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	461a      	mov	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	4f54300a 	.word	0x4f54300a

08007b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <USB_CoreReset+0x64>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d901      	bls.n	8007bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e01b      	b.n	8007be6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	daf2      	bge.n	8007b9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f043 0201 	orr.w	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4a09      	ldr	r2, [pc, #36]	; (8007bf4 <USB_CoreReset+0x64>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d901      	bls.n	8007bd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e006      	b.n	8007be6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d0f0      	beq.n	8007bc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	00030d40 	.word	0x00030d40

08007bf8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007c08:	f002 fa3c 	bl	800a084 <malloc>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d105      	bne.n	8007c22 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	e066      	b.n	8007cf0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	7c1b      	ldrb	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d119      	bne.n	8007c66 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c36:	2202      	movs	r2, #2
 8007c38:	2181      	movs	r1, #129	; 0x81
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f002 f855 	bl	8009cea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f002 f84b 	bl	8009cea <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2210      	movs	r2, #16
 8007c60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007c64:	e016      	b.n	8007c94 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c66:	2340      	movs	r3, #64	; 0x40
 8007c68:	2202      	movs	r2, #2
 8007c6a:	2181      	movs	r1, #129	; 0x81
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f002 f83c 	bl	8009cea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c78:	2340      	movs	r3, #64	; 0x40
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f002 f833 	bl	8009cea <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2210      	movs	r2, #16
 8007c90:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c94:	2308      	movs	r3, #8
 8007c96:	2203      	movs	r2, #3
 8007c98:	2182      	movs	r1, #130	; 0x82
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f002 f825 	bl	8009cea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7c1b      	ldrb	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d109      	bne.n	8007cde <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f002 f8f6 	bl	8009ec8 <USBD_LL_PrepareReceive>
 8007cdc:	e007      	b.n	8007cee <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ce4:	2340      	movs	r3, #64	; 0x40
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f002 f8ed 	bl	8009ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d08:	2181      	movs	r1, #129	; 0x81
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f002 f813 	bl	8009d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d16:	2101      	movs	r1, #1
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f002 f80c 	bl	8009d36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d26:	2182      	movs	r1, #130	; 0x82
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f002 f804 	bl	8009d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00e      	beq.n	8007d66 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 f99b 	bl	800a094 <free>
    pdev->pClassData = NULL;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d80:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d03a      	beq.n	8007e10 <USBD_CDC_Setup+0xa0>
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	f040 8097 	bne.w	8007ece <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	88db      	ldrh	r3, [r3, #6]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d029      	beq.n	8007dfc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	b25b      	sxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	da11      	bge.n	8007dd6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007dbe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	88d2      	ldrh	r2, [r2, #6]
 8007dc4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007dc6:	6939      	ldr	r1, [r7, #16]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	88db      	ldrh	r3, [r3, #6]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 fac7 	bl	8009362 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007dd4:	e082      	b.n	8007edc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	785a      	ldrb	r2, [r3, #1]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	88db      	ldrh	r3, [r3, #6]
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007dec:	6939      	ldr	r1, [r7, #16]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	88db      	ldrh	r3, [r3, #6]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 fae0 	bl	80093ba <USBD_CtlPrepareRx>
    break;
 8007dfa:	e06f      	b.n	8007edc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	7850      	ldrb	r0, [r2, #1]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	4798      	blx	r3
    break;
 8007e0e:	e065      	b.n	8007edc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b0b      	cmp	r3, #11
 8007e16:	d84f      	bhi.n	8007eb8 <USBD_CDC_Setup+0x148>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <USBD_CDC_Setup+0xb0>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007ec7 	.word	0x08007ec7
 8007e28:	08007eb9 	.word	0x08007eb9
 8007e2c:	08007eb9 	.word	0x08007eb9
 8007e30:	08007eb9 	.word	0x08007eb9
 8007e34:	08007eb9 	.word	0x08007eb9
 8007e38:	08007eb9 	.word	0x08007eb9
 8007e3c:	08007eb9 	.word	0x08007eb9
 8007e40:	08007eb9 	.word	0x08007eb9
 8007e44:	08007eb9 	.word	0x08007eb9
 8007e48:	08007e79 	.word	0x08007e79
 8007e4c:	08007ea1 	.word	0x08007ea1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d107      	bne.n	8007e6a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e5a:	f107 030c 	add.w	r3, r7, #12
 8007e5e:	2202      	movs	r2, #2
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 fa7d 	bl	8009362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007e68:	e030      	b.n	8007ecc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fa07 	bl	8009280 <USBD_CtlError>
        ret = USBD_FAIL;
 8007e72:	2303      	movs	r3, #3
 8007e74:	75fb      	strb	r3, [r7, #23]
      break;
 8007e76:	e029      	b.n	8007ecc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d107      	bne.n	8007e92 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e82:	f107 030f 	add.w	r3, r7, #15
 8007e86:	2201      	movs	r2, #1
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fa69 	bl	8009362 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007e90:	e01c      	b.n	8007ecc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f9f3 	bl	8009280 <USBD_CtlError>
        ret = USBD_FAIL;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e9e:	e015      	b.n	8007ecc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d00f      	beq.n	8007eca <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 f9e7 	bl	8009280 <USBD_CtlError>
        ret = USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007eb6:	e008      	b.n	8007eca <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 f9e0 	bl	8009280 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec4:	e002      	b.n	8007ecc <USBD_CDC_Setup+0x15c>
      break;
 8007ec6:	bf00      	nop
 8007ec8:	e008      	b.n	8007edc <USBD_CDC_Setup+0x16c>
      break;
 8007eca:	bf00      	nop
    }
    break;
 8007ecc:	e006      	b.n	8007edc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f9d5 	bl	8009280 <USBD_CtlError>
    ret = USBD_FAIL;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	75fb      	strb	r3, [r7, #23]
    break;
 8007eda:	bf00      	nop
  }

  return (uint8_t)ret;
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop

08007ee8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007efa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e049      	b.n	8007f9e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	3318      	adds	r3, #24
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d029      	beq.n	8007f7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	3318      	adds	r3, #24
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	78f9      	ldrb	r1, [r7, #3]
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	1a5b      	subs	r3, r3, r1
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4403      	add	r3, r0
 8007f48:	3344      	adds	r3, #68	; 0x44
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f50:	fb03 f301 	mul.w	r3, r3, r1
 8007f54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d110      	bne.n	8007f7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	440b      	add	r3, r1
 8007f68:	3318      	adds	r3, #24
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f6e:	78f9      	ldrb	r1, [r7, #3]
 8007f70:	2300      	movs	r3, #0
 8007f72:	2200      	movs	r2, #0
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f001 ff86 	bl	8009e86 <USBD_LL_Transmit>
 8007f7a:	e00f      	b.n	8007f9c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007f98:	78fa      	ldrb	r2, [r7, #3]
 8007f9a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e015      	b.n	8007ff4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 ff9c 	bl	8009f0a <USBD_LL_GetRxDataSize>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d015      	beq.n	8008042 <USBD_CDC_EP0_RxReady+0x46>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800801c:	2bff      	cmp	r3, #255	; 0xff
 800801e:	d010      	beq.n	8008042 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800802e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008036:	b292      	uxth	r2, r2
 8008038:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	22ff      	movs	r2, #255	; 0xff
 800803e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2243      	movs	r2, #67	; 0x43
 8008058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800805a:	4b03      	ldr	r3, [pc, #12]	; (8008068 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	20000094 	.word	0x20000094

0800806c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2243      	movs	r2, #67	; 0x43
 8008078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	20000050 	.word	0x20000050

0800808c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2243      	movs	r2, #67	; 0x43
 8008098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	200000d8 	.word	0x200000d8

080080ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	220a      	movs	r2, #10
 80080b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080ba:	4b03      	ldr	r3, [pc, #12]	; (80080c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	2000000c 	.word	0x2000000c

080080cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080dc:	2303      	movs	r3, #3
 80080de:	e004      	b.n	80080ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b087      	sub	sp, #28
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008108:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	371c      	adds	r7, #28
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008138:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	683a      	ldr	r2, [r7, #0]
 800813e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800815e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008160:	2301      	movs	r3, #1
 8008162:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800816e:	2303      	movs	r3, #3
 8008170:	e01a      	b.n	80081a8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008178:	2b00      	cmp	r3, #0
 800817a:	d114      	bne.n	80081a6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2201      	movs	r2, #1
 8008180:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800819a:	2181      	movs	r1, #129	; 0x81
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fe72 	bl	8009e86 <USBD_LL_Transmit>

    ret = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e016      	b.n	80081fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7c1b      	ldrb	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081e0:	2101      	movs	r1, #1
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 fe70 	bl	8009ec8 <USBD_LL_PrepareReceive>
 80081e8:	e007      	b.n	80081fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081f0:	2340      	movs	r3, #64	; 0x40
 80081f2:	2101      	movs	r1, #1
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 fe67 	bl	8009ec8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008218:	2303      	movs	r3, #3
 800821a:	e025      	b.n	8008268 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	79fa      	ldrb	r2, [r7, #7]
 800825a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f001 fcdd 	bl	8009c1c <USBD_LL_Init>
 8008262:	4603      	mov	r3, r0
 8008264:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	e010      	b.n	80082aa <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008298:	f107 020e 	add.w	r2, r7, #14
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	4602      	mov	r2, r0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fcfa 	bl	8009cb4 <USBD_LL_Start>
 80082c0:	4603      	mov	r3, r0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082ec:	2303      	movs	r3, #3
 80082ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	4611      	mov	r1, r2
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	4611      	mov	r1, r2
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	4798      	blx	r3
  }

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 ff56 	bl	800920c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800836e:	461a      	mov	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800837c:	f003 031f 	and.w	r3, r3, #31
 8008380:	2b01      	cmp	r3, #1
 8008382:	d00e      	beq.n	80083a2 <USBD_LL_SetupStage+0x5a>
 8008384:	2b01      	cmp	r3, #1
 8008386:	d302      	bcc.n	800838e <USBD_LL_SetupStage+0x46>
 8008388:	2b02      	cmp	r3, #2
 800838a:	d014      	beq.n	80083b6 <USBD_LL_SetupStage+0x6e>
 800838c:	e01d      	b.n	80083ca <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa18 	bl	80087cc <USBD_StdDevReq>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
      break;
 80083a0:	e020      	b.n	80083e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa7c 	bl	80088a8 <USBD_StdItfReq>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
      break;
 80083b4:	e016      	b.n	80083e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fab8 	bl	8008934 <USBD_StdEPReq>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]
      break;
 80083c8:	e00c      	b.n	80083e4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 fccb 	bl	8009d74 <USBD_LL_StallEP>
 80083de:	4603      	mov	r3, r0
 80083e0:	73fb      	strb	r3, [r7, #15]
      break;
 80083e2:	bf00      	nop
  }

  return ret;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b086      	sub	sp, #24
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	460b      	mov	r3, r1
 80083f8:	607a      	str	r2, [r7, #4]
 80083fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d137      	bne.n	8008472 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008408:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008410:	2b03      	cmp	r3, #3
 8008412:	d14a      	bne.n	80084aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	429a      	cmp	r2, r3
 800841e:	d913      	bls.n	8008448 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	4293      	cmp	r3, r2
 8008438:	bf28      	it	cs
 800843a:	4613      	movcs	r3, r2
 800843c:	461a      	mov	r2, r3
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 ffd7 	bl	80093f4 <USBD_CtlContinueRx>
 8008446:	e030      	b.n	80084aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00a      	beq.n	800846a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800845a:	2b03      	cmp	r3, #3
 800845c:	d105      	bne.n	800846a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 ffd3 	bl	8009416 <USBD_CtlSendStatus>
 8008470:	e01b      	b.n	80084aa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d013      	beq.n	80084a6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008484:	2b03      	cmp	r3, #3
 8008486:	d10e      	bne.n	80084a6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	7afa      	ldrb	r2, [r7, #11]
 8008492:	4611      	mov	r1, r2
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	4798      	blx	r3
 8008498:	4603      	mov	r3, r0
 800849a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	e002      	b.n	80084ac <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e000      	b.n	80084ac <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	460b      	mov	r3, r1
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d16a      	bne.n	800859e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3314      	adds	r3, #20
 80084cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d155      	bne.n	8008584 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d914      	bls.n	800850e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	1ad2      	subs	r2, r2, r3
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 ff4c 	bl	8009398 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008500:	2300      	movs	r3, #0
 8008502:	2200      	movs	r2, #0
 8008504:	2100      	movs	r1, #0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f001 fcde 	bl	8009ec8 <USBD_LL_PrepareReceive>
 800850c:	e03a      	b.n	8008584 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	429a      	cmp	r2, r3
 8008518:	d11c      	bne.n	8008554 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008522:	429a      	cmp	r2, r3
 8008524:	d316      	bcc.n	8008554 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008530:	429a      	cmp	r2, r3
 8008532:	d20f      	bcs.n	8008554 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008534:	2200      	movs	r2, #0
 8008536:	2100      	movs	r1, #0
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 ff2d 	bl	8009398 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008546:	2300      	movs	r3, #0
 8008548:	2200      	movs	r2, #0
 800854a:	2100      	movs	r1, #0
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f001 fcbb 	bl	8009ec8 <USBD_LL_PrepareReceive>
 8008552:	e017      	b.n	8008584 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008566:	2b03      	cmp	r3, #3
 8008568:	d105      	bne.n	8008576 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008576:	2180      	movs	r1, #128	; 0x80
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f001 fbfb 	bl	8009d74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 ff5c 	bl	800943c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800858a:	2b01      	cmp	r3, #1
 800858c:	d123      	bne.n	80085d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff fe9b 	bl	80082ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800859c:	e01b      	b.n	80085d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d013      	beq.n	80085d2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d10e      	bne.n	80085d2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	7afa      	ldrb	r2, [r7, #11]
 80085be:	4611      	mov	r1, r2
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	4798      	blx	r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
 80085d0:	e002      	b.n	80085d8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e000      	b.n	80085d8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800860c:	2b00      	cmp	r3, #0
 800860e:	d009      	beq.n	8008624 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6852      	ldr	r2, [r2, #4]
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	4611      	mov	r1, r2
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008624:	2340      	movs	r3, #64	; 0x40
 8008626:	2200      	movs	r2, #0
 8008628:	2100      	movs	r1, #0
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fb5d 	bl	8009cea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2240      	movs	r2, #64	; 0x40
 800863c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008640:	2340      	movs	r3, #64	; 0x40
 8008642:	2200      	movs	r2, #0
 8008644:	2180      	movs	r1, #128	; 0x80
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f001 fb4f 	bl	8009cea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2240      	movs	r2, #64	; 0x40
 8008656:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2204      	movs	r2, #4
 800869a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d105      	bne.n	80086ca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d10b      	bne.n	8008702 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d005      	beq.n	8008702 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b082      	sub	sp, #8
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6852      	ldr	r2, [r2, #4]
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	4611      	mov	r1, r2
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3
  }

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800878e:	b480      	push	{r7}
 8008790:	b087      	sub	sp, #28
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	3301      	adds	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80087ac:	8a3b      	ldrh	r3, [r7, #16]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	b21a      	sxth	r2, r3
 80087b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	b21b      	sxth	r3, r3
 80087ba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80087bc:	89fb      	ldrh	r3, [r7, #14]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
	...

080087cc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087e2:	2b20      	cmp	r3, #32
 80087e4:	d004      	beq.n	80087f0 <USBD_StdDevReq+0x24>
 80087e6:	2b40      	cmp	r3, #64	; 0x40
 80087e8:	d002      	beq.n	80087f0 <USBD_StdDevReq+0x24>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <USBD_StdDevReq+0x38>
 80087ee:	e050      	b.n	8008892 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
 80087fe:	4603      	mov	r3, r0
 8008800:	73fb      	strb	r3, [r7, #15]
    break;
 8008802:	e04b      	b.n	800889c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	785b      	ldrb	r3, [r3, #1]
 8008808:	2b09      	cmp	r3, #9
 800880a:	d83c      	bhi.n	8008886 <USBD_StdDevReq+0xba>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <USBD_StdDevReq+0x48>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008869 	.word	0x08008869
 8008818:	0800887d 	.word	0x0800887d
 800881c:	08008887 	.word	0x08008887
 8008820:	08008873 	.word	0x08008873
 8008824:	08008887 	.word	0x08008887
 8008828:	08008847 	.word	0x08008847
 800882c:	0800883d 	.word	0x0800883d
 8008830:	08008887 	.word	0x08008887
 8008834:	0800885f 	.word	0x0800885f
 8008838:	08008851 	.word	0x08008851
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f9ce 	bl	8008be0 <USBD_GetDescriptor>
      break;
 8008844:	e024      	b.n	8008890 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fb5d 	bl	8008f08 <USBD_SetAddress>
      break;
 800884e:	e01f      	b.n	8008890 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fb9a 	bl	8008f8c <USBD_SetConfig>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]
      break;
 800885c:	e018      	b.n	8008890 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fc37 	bl	80090d4 <USBD_GetConfig>
      break;
 8008866:	e013      	b.n	8008890 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fc66 	bl	800913c <USBD_GetStatus>
      break;
 8008870:	e00e      	b.n	8008890 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fc94 	bl	80091a2 <USBD_SetFeature>
      break;
 800887a:	e009      	b.n	8008890 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fca3 	bl	80091ca <USBD_ClrFeature>
      break;
 8008884:	e004      	b.n	8008890 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fcf9 	bl	8009280 <USBD_CtlError>
      break;
 800888e:	bf00      	nop
    }
    break;
 8008890:	e004      	b.n	800889c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fcf3 	bl	8009280 <USBD_CtlError>
    break;
 800889a:	bf00      	nop
  }

  return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop

080088a8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d003      	beq.n	80088ca <USBD_StdItfReq+0x22>
 80088c2:	2b40      	cmp	r3, #64	; 0x40
 80088c4:	d001      	beq.n	80088ca <USBD_StdItfReq+0x22>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d12a      	bne.n	8008920 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d0:	3b01      	subs	r3, #1
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d81d      	bhi.n	8008912 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	889b      	ldrh	r3, [r3, #4]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d813      	bhi.n	8008908 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	88db      	ldrh	r3, [r3, #6]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d110      	bne.n	800891c <USBD_StdItfReq+0x74>
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10d      	bne.n	800891c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fd88 	bl	8009416 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008906:	e009      	b.n	800891c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fcb8 	bl	8009280 <USBD_CtlError>
      break;
 8008910:	e004      	b.n	800891c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fcb3 	bl	8009280 <USBD_CtlError>
      break;
 800891a:	e000      	b.n	800891e <USBD_StdItfReq+0x76>
      break;
 800891c:	bf00      	nop
    }
    break;
 800891e:	e004      	b.n	800892a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fcac 	bl	8009280 <USBD_CtlError>
    break;
 8008928:	bf00      	nop
  }

  return ret;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	889b      	ldrh	r3, [r3, #4]
 8008946:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008950:	2b20      	cmp	r3, #32
 8008952:	d004      	beq.n	800895e <USBD_StdEPReq+0x2a>
 8008954:	2b40      	cmp	r3, #64	; 0x40
 8008956:	d002      	beq.n	800895e <USBD_StdEPReq+0x2a>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <USBD_StdEPReq+0x3e>
 800895c:	e135      	b.n	8008bca <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	4798      	blx	r3
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
    break;
 8008970:	e130      	b.n	8008bd4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d03e      	beq.n	80089f8 <USBD_StdEPReq+0xc4>
 800897a:	2b03      	cmp	r3, #3
 800897c:	d002      	beq.n	8008984 <USBD_StdEPReq+0x50>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d077      	beq.n	8008a72 <USBD_StdEPReq+0x13e>
 8008982:	e11c      	b.n	8008bbe <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898a:	2b02      	cmp	r3, #2
 800898c:	d002      	beq.n	8008994 <USBD_StdEPReq+0x60>
 800898e:	2b03      	cmp	r3, #3
 8008990:	d015      	beq.n	80089be <USBD_StdEPReq+0x8a>
 8008992:	e02b      	b.n	80089ec <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00c      	beq.n	80089b4 <USBD_StdEPReq+0x80>
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b80      	cmp	r3, #128	; 0x80
 800899e:	d009      	beq.n	80089b4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f001 f9e5 	bl	8009d74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089aa:	2180      	movs	r1, #128	; 0x80
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 f9e1 	bl	8009d74 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80089b2:	e020      	b.n	80089f6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fc62 	bl	8009280 <USBD_CtlError>
        break;
 80089bc:	e01b      	b.n	80089f6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10e      	bne.n	80089e4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USBD_StdEPReq+0xb0>
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	2b80      	cmp	r3, #128	; 0x80
 80089d0:	d008      	beq.n	80089e4 <USBD_StdEPReq+0xb0>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	88db      	ldrh	r3, [r3, #6]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d104      	bne.n	80089e4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 f9c8 	bl	8009d74 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fd16 	bl	8009416 <USBD_CtlSendStatus>

        break;
 80089ea:	e004      	b.n	80089f6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fc46 	bl	8009280 <USBD_CtlError>
        break;
 80089f4:	bf00      	nop
      }
      break;
 80089f6:	e0e7      	b.n	8008bc8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d002      	beq.n	8008a08 <USBD_StdEPReq+0xd4>
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d015      	beq.n	8008a32 <USBD_StdEPReq+0xfe>
 8008a06:	e02d      	b.n	8008a64 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00c      	beq.n	8008a28 <USBD_StdEPReq+0xf4>
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b80      	cmp	r3, #128	; 0x80
 8008a12:	d009      	beq.n	8008a28 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 f9ab 	bl	8009d74 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a1e:	2180      	movs	r1, #128	; 0x80
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 f9a7 	bl	8009d74 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a26:	e023      	b.n	8008a70 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fc28 	bl	8009280 <USBD_CtlError>
        break;
 8008a30:	e01e      	b.n	8008a70 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	885b      	ldrh	r3, [r3, #2]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d119      	bne.n	8008a6e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 f9b2 	bl	8009db2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fce1 	bl	8009416 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
        }
        break;
 8008a62:	e004      	b.n	8008a6e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc0a 	bl	8009280 <USBD_CtlError>
        break;
 8008a6c:	e000      	b.n	8008a70 <USBD_StdEPReq+0x13c>
        break;
 8008a6e:	bf00      	nop
      }
      break;
 8008a70:	e0aa      	b.n	8008bc8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d002      	beq.n	8008a82 <USBD_StdEPReq+0x14e>
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d032      	beq.n	8008ae6 <USBD_StdEPReq+0x1b2>
 8008a80:	e097      	b.n	8008bb2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <USBD_StdEPReq+0x164>
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	2b80      	cmp	r3, #128	; 0x80
 8008a8c:	d004      	beq.n	8008a98 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fbf5 	bl	8009280 <USBD_CtlError>
          break;
 8008a96:	e091      	b.n	8008bbc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da0b      	bge.n	8008ab8 <USBD_StdEPReq+0x184>
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	3310      	adds	r3, #16
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	e00b      	b.n	8008ad0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	3304      	adds	r3, #4
 8008ad0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2202      	movs	r2, #2
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fc3f 	bl	8009362 <USBD_CtlSendData>
        break;
 8008ae4:	e06a      	b.n	8008bbc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008ae6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	da11      	bge.n	8008b12 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	f003 020f 	and.w	r2, r3, #15
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	440b      	add	r3, r1
 8008b00:	3324      	adds	r3, #36	; 0x24
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d117      	bne.n	8008b38 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fbb8 	bl	8009280 <USBD_CtlError>
            break;
 8008b10:	e054      	b.n	8008bbc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	f003 020f 	and.w	r2, r3, #15
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	440b      	add	r3, r1
 8008b24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d104      	bne.n	8008b38 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fba5 	bl	8009280 <USBD_CtlError>
            break;
 8008b36:	e041      	b.n	8008bbc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da0b      	bge.n	8008b58 <USBD_StdEPReq+0x224>
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b46:	4613      	mov	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	3310      	adds	r3, #16
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	4413      	add	r3, r2
 8008b54:	3304      	adds	r3, #4
 8008b56:	e00b      	b.n	8008b70 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	3304      	adds	r3, #4
 8008b70:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <USBD_StdEPReq+0x24a>
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	2b80      	cmp	r3, #128	; 0x80
 8008b7c:	d103      	bne.n	8008b86 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e00e      	b.n	8008ba4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 f930 	bl	8009df0 <USBD_LL_IsStallEP>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	e002      	b.n	8008ba4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fbd9 	bl	8009362 <USBD_CtlSendData>
          break;
 8008bb0:	e004      	b.n	8008bbc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fb63 	bl	8009280 <USBD_CtlError>
        break;
 8008bba:	bf00      	nop
      }
      break;
 8008bbc:	e004      	b.n	8008bc8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fb5d 	bl	8009280 <USBD_CtlError>
      break;
 8008bc6:	bf00      	nop
    }
    break;
 8008bc8:	e004      	b.n	8008bd4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fb57 	bl	8009280 <USBD_CtlError>
    break;
 8008bd2:	bf00      	nop
  }

  return ret;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	885b      	ldrh	r3, [r3, #2]
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	2b0e      	cmp	r3, #14
 8008c02:	f200 8152 	bhi.w	8008eaa <USBD_GetDescriptor+0x2ca>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <USBD_GetDescriptor+0x2c>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c7d 	.word	0x08008c7d
 8008c10:	08008c95 	.word	0x08008c95
 8008c14:	08008cd5 	.word	0x08008cd5
 8008c18:	08008eab 	.word	0x08008eab
 8008c1c:	08008eab 	.word	0x08008eab
 8008c20:	08008e4b 	.word	0x08008e4b
 8008c24:	08008e77 	.word	0x08008e77
 8008c28:	08008eab 	.word	0x08008eab
 8008c2c:	08008eab 	.word	0x08008eab
 8008c30:	08008eab 	.word	0x08008eab
 8008c34:	08008eab 	.word	0x08008eab
 8008c38:	08008eab 	.word	0x08008eab
 8008c3c:	08008eab 	.word	0x08008eab
 8008c40:	08008eab 	.word	0x08008eab
 8008c44:	08008c49 	.word	0x08008c49
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00b      	beq.n	8008c6c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	7c12      	ldrb	r2, [r2, #16]
 8008c60:	f107 0108 	add.w	r1, r7, #8
 8008c64:	4610      	mov	r0, r2
 8008c66:	4798      	blx	r3
 8008c68:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008c6a:	e126      	b.n	8008eba <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb06 	bl	8009280 <USBD_CtlError>
      err++;
 8008c74:	7afb      	ldrb	r3, [r7, #11]
 8008c76:	3301      	adds	r3, #1
 8008c78:	72fb      	strb	r3, [r7, #11]
    break;
 8008c7a:	e11e      	b.n	8008eba <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
    break;
 8008c92:	e112      	b.n	8008eba <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	f107 0208 	add.w	r2, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008cb6:	e100      	b.n	8008eba <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	f107 0208 	add.w	r2, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
    break;
 8008cd2:	e0f2      	b.n	8008eba <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	885b      	ldrh	r3, [r3, #2]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	f200 80ac 	bhi.w	8008e38 <USBD_GetDescriptor+0x258>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <USBD_GetDescriptor+0x108>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d35 	.word	0x08008d35
 8008cf0:	08008d69 	.word	0x08008d69
 8008cf4:	08008d9d 	.word	0x08008d9d
 8008cf8:	08008dd1 	.word	0x08008dd1
 8008cfc:	08008e05 	.word	0x08008e05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7c12      	ldrb	r2, [r2, #16]
 8008d18:	f107 0108 	add.w	r1, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d22:	e091      	b.n	8008e48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 faaa 	bl	8009280 <USBD_CtlError>
        err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
      break;
 8008d32:	e089      	b.n	8008e48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d56:	e077      	b.n	8008e48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fa90 	bl	8009280 <USBD_CtlError>
        err++;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	3301      	adds	r3, #1
 8008d64:	72fb      	strb	r3, [r7, #11]
      break;
 8008d66:	e06f      	b.n	8008e48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d8a:	e05d      	b.n	8008e48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa76 	bl	8009280 <USBD_CtlError>
        err++;
 8008d94:	7afb      	ldrb	r3, [r7, #11]
 8008d96:	3301      	adds	r3, #1
 8008d98:	72fb      	strb	r3, [r7, #11]
      break;
 8008d9a:	e055      	b.n	8008e48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dbe:	e043      	b.n	8008e48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa5c 	bl	8009280 <USBD_CtlError>
        err++;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	72fb      	strb	r3, [r7, #11]
      break;
 8008dce:	e03b      	b.n	8008e48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008df2:	e029      	b.n	8008e48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa42 	bl	8009280 <USBD_CtlError>
        err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
      break;
 8008e02:	e021      	b.n	8008e48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e26:	e00f      	b.n	8008e48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa28 	bl	8009280 <USBD_CtlError>
        err++;
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	3301      	adds	r3, #1
 8008e34:	72fb      	strb	r3, [r7, #11]
      break;
 8008e36:	e007      	b.n	8008e48 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa20 	bl	8009280 <USBD_CtlError>
      err++;
 8008e40:	7afb      	ldrb	r3, [r7, #11]
 8008e42:	3301      	adds	r3, #1
 8008e44:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008e46:	bf00      	nop
    }
    break;
 8008e48:	e037      	b.n	8008eba <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7c1b      	ldrb	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e5a:	f107 0208 	add.w	r2, r7, #8
 8008e5e:	4610      	mov	r0, r2
 8008e60:	4798      	blx	r3
 8008e62:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e64:	e029      	b.n	8008eba <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa09 	bl	8009280 <USBD_CtlError>
      err++;
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	3301      	adds	r3, #1
 8008e72:	72fb      	strb	r3, [r7, #11]
    break;
 8008e74:	e021      	b.n	8008eba <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7c1b      	ldrb	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10d      	bne.n	8008e9a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	f107 0208 	add.w	r2, r7, #8
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4798      	blx	r3
 8008e8e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	2207      	movs	r2, #7
 8008e96:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008e98:	e00f      	b.n	8008eba <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f9ef 	bl	8009280 <USBD_CtlError>
      err++;
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	72fb      	strb	r3, [r7, #11]
    break;
 8008ea8:	e007      	b.n	8008eba <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f9e7 	bl	8009280 <USBD_CtlError>
    err++;
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	72fb      	strb	r3, [r7, #11]
    break;
 8008eb8:	bf00      	nop
  }

  if (err != 0U)
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11e      	bne.n	8008efe <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	88db      	ldrh	r3, [r3, #6]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d016      	beq.n	8008ef6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008ec8:	893b      	ldrh	r3, [r7, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	88da      	ldrh	r2, [r3, #6]
 8008ed2:	893b      	ldrh	r3, [r7, #8]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bf28      	it	cs
 8008ed8:	4613      	movcs	r3, r2
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ede:	893b      	ldrh	r3, [r7, #8]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa3c 	bl	8009362 <USBD_CtlSendData>
 8008eea:	e009      	b.n	8008f00 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f9c6 	bl	8009280 <USBD_CtlError>
 8008ef4:	e004      	b.n	8008f00 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fa8d 	bl	8009416 <USBD_CtlSendStatus>
 8008efc:	e000      	b.n	8008f00 <USBD_GetDescriptor+0x320>
    return;
 8008efe:	bf00      	nop
    }
  }
}
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop

08008f08 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	889b      	ldrh	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d130      	bne.n	8008f7c <USBD_SetAddress+0x74>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88db      	ldrh	r3, [r3, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d12c      	bne.n	8008f7c <USBD_SetAddress+0x74>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	885b      	ldrh	r3, [r3, #2]
 8008f26:	2b7f      	cmp	r3, #127	; 0x7f
 8008f28:	d828      	bhi.n	8008f7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d104      	bne.n	8008f4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f99c 	bl	8009280 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f48:	e01c      	b.n	8008f84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	7bfa      	ldrb	r2, [r7, #15]
 8008f4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 ff76 	bl	8009e48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fa5a 	bl	8009416 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f70:	e008      	b.n	8008f84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7a:	e003      	b.n	8008f84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f97e 	bl	8009280 <USBD_CtlError>
  }
}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	4b4b      	ldr	r3, [pc, #300]	; (80090d0 <USBD_SetConfig+0x144>)
 8008fa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fa4:	4b4a      	ldr	r3, [pc, #296]	; (80090d0 <USBD_SetConfig+0x144>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d905      	bls.n	8008fb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f966 	bl	8009280 <USBD_CtlError>
    return USBD_FAIL;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e087      	b.n	80090c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d002      	beq.n	8008fc8 <USBD_SetConfig+0x3c>
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d025      	beq.n	8009012 <USBD_SetConfig+0x86>
 8008fc6:	e071      	b.n	80090ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008fc8:	4b41      	ldr	r3, [pc, #260]	; (80090d0 <USBD_SetConfig+0x144>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01c      	beq.n	800900a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008fd0:	4b3f      	ldr	r3, [pc, #252]	; (80090d0 <USBD_SetConfig+0x144>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fda:	4b3d      	ldr	r3, [pc, #244]	; (80090d0 <USBD_SetConfig+0x144>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff f97d 	bl	80082e0 <USBD_SetClassConfig>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f944 	bl	8009280 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008ff8:	e065      	b.n	80090c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa0b 	bl	8009416 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2203      	movs	r2, #3
 8009004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009008:	e05d      	b.n	80090c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 fa03 	bl	8009416 <USBD_CtlSendStatus>
    break;
 8009010:	e059      	b.n	80090c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009012:	4b2f      	ldr	r3, [pc, #188]	; (80090d0 <USBD_SetConfig+0x144>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d112      	bne.n	8009040 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2202      	movs	r2, #2
 800901e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009022:	4b2b      	ldr	r3, [pc, #172]	; (80090d0 <USBD_SetConfig+0x144>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800902c:	4b28      	ldr	r3, [pc, #160]	; (80090d0 <USBD_SetConfig+0x144>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff f970 	bl	8008318 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f9ec 	bl	8009416 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800903e:	e042      	b.n	80090c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009040:	4b23      	ldr	r3, [pc, #140]	; (80090d0 <USBD_SetConfig+0x144>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	461a      	mov	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	429a      	cmp	r2, r3
 800904c:	d02a      	beq.n	80090a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff f95e 	bl	8008318 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800905c:	4b1c      	ldr	r3, [pc, #112]	; (80090d0 <USBD_SetConfig+0x144>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	461a      	mov	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009066:	4b1a      	ldr	r3, [pc, #104]	; (80090d0 <USBD_SetConfig+0x144>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7ff f937 	bl	80082e0 <USBD_SetClassConfig>
 8009072:	4603      	mov	r3, r0
 8009074:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00f      	beq.n	800909c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f8fe 	bl	8009280 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	b2db      	uxtb	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff f943 	bl	8008318 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2202      	movs	r2, #2
 8009096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800909a:	e014      	b.n	80090c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f9ba 	bl	8009416 <USBD_CtlSendStatus>
    break;
 80090a2:	e010      	b.n	80090c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f9b6 	bl	8009416 <USBD_CtlSendStatus>
    break;
 80090aa:	e00c      	b.n	80090c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f8e6 	bl	8009280 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090b4:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <USBD_SetConfig+0x144>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	4619      	mov	r1, r3
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff f92c 	bl	8008318 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80090c0:	2303      	movs	r3, #3
 80090c2:	73fb      	strb	r3, [r7, #15]
    break;
 80090c4:	bf00      	nop
  }

  return ret;
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20000214 	.word	0x20000214

080090d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	88db      	ldrh	r3, [r3, #6]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d004      	beq.n	80090f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f8c9 	bl	8009280 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80090ee:	e021      	b.n	8009134 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	db17      	blt.n	800912a <USBD_GetConfig+0x56>
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	dd02      	ble.n	8009104 <USBD_GetConfig+0x30>
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d00b      	beq.n	800911a <USBD_GetConfig+0x46>
 8009102:	e012      	b.n	800912a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3308      	adds	r3, #8
 800910e:	2201      	movs	r2, #1
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f925 	bl	8009362 <USBD_CtlSendData>
      break;
 8009118:	e00c      	b.n	8009134 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	2201      	movs	r2, #1
 8009120:	4619      	mov	r1, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f91d 	bl	8009362 <USBD_CtlSendData>
      break;
 8009128:	e004      	b.n	8009134 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f8a7 	bl	8009280 <USBD_CtlError>
      break;
 8009132:	bf00      	nop
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800914c:	3b01      	subs	r3, #1
 800914e:	2b02      	cmp	r3, #2
 8009150:	d81e      	bhi.n	8009190 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	88db      	ldrh	r3, [r3, #6]
 8009156:	2b02      	cmp	r3, #2
 8009158:	d004      	beq.n	8009164 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f88f 	bl	8009280 <USBD_CtlError>
      break;
 8009162:	e01a      	b.n	800919a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f043 0202 	orr.w	r2, r3, #2
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	330c      	adds	r3, #12
 8009184:	2202      	movs	r2, #2
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f8ea 	bl	8009362 <USBD_CtlSendData>
    break;
 800918e:	e004      	b.n	800919a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f874 	bl	8009280 <USBD_CtlError>
    break;
 8009198:	bf00      	nop
  }
}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	885b      	ldrh	r3, [r3, #2]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d106      	bne.n	80091c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f92a 	bl	8009416 <USBD_CtlSendStatus>
  }
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091da:	3b01      	subs	r3, #1
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d80b      	bhi.n	80091f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	885b      	ldrh	r3, [r3, #2]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d10c      	bne.n	8009202 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f910 	bl	8009416 <USBD_CtlSendStatus>
      }
      break;
 80091f6:	e004      	b.n	8009202 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f840 	bl	8009280 <USBD_CtlError>
      break;
 8009200:	e000      	b.n	8009204 <USBD_ClrFeature+0x3a>
      break;
 8009202:	bf00      	nop
  }
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	781a      	ldrb	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3301      	adds	r3, #1
 8009234:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7ff faa9 	bl	800878e <SWAPBYTE>
 800923c:	4603      	mov	r3, r0
 800923e:	461a      	mov	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3301      	adds	r3, #1
 8009248:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3301      	adds	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f7ff fa9c 	bl	800878e <SWAPBYTE>
 8009256:	4603      	mov	r3, r0
 8009258:	461a      	mov	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff fa8f 	bl	800878e <SWAPBYTE>
 8009270:	4603      	mov	r3, r0
 8009272:	461a      	mov	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	80da      	strh	r2, [r3, #6]
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800928a:	2180      	movs	r1, #128	; 0x80
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fd71 	bl	8009d74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009292:	2100      	movs	r1, #0
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fd6d 	bl	8009d74 <USBD_LL_StallEP>
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d036      	beq.n	8009326 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80092bc:	6938      	ldr	r0, [r7, #16]
 80092be:	f000 f836 	bl	800932e <USBD_GetLen>
 80092c2:	4603      	mov	r3, r0
 80092c4:	3301      	adds	r3, #1
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	4413      	add	r3, r2
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	7812      	ldrb	r2, [r2, #0]
 80092da:	701a      	strb	r2, [r3, #0]
  idx++;
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	3301      	adds	r3, #1
 80092e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	4413      	add	r3, r2
 80092e8:	2203      	movs	r2, #3
 80092ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	3301      	adds	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80092f2:	e013      	b.n	800931c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	4413      	add	r3, r2
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	7812      	ldrb	r2, [r2, #0]
 80092fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	3301      	adds	r3, #1
 8009304:	613b      	str	r3, [r7, #16]
    idx++;
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	3301      	adds	r3, #1
 800930a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	4413      	add	r3, r2
 8009312:	2200      	movs	r2, #0
 8009314:	701a      	strb	r2, [r3, #0]
    idx++;
 8009316:	7dfb      	ldrb	r3, [r7, #23]
 8009318:	3301      	adds	r3, #1
 800931a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e7      	bne.n	80092f4 <USBD_GetString+0x52>
 8009324:	e000      	b.n	8009328 <USBD_GetString+0x86>
    return;
 8009326:	bf00      	nop
  }
}
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800933e:	e005      	b.n	800934c <USBD_GetLen+0x1e>
  {
    len++;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	3301      	adds	r3, #1
 8009344:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	3301      	adds	r3, #1
 800934a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1f5      	bne.n	8009340 <USBD_GetLen+0x12>
  }

  return len;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2202      	movs	r2, #2
 8009372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	2100      	movs	r1, #0
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 fd7c 	bl	8009e86 <USBD_LL_Transmit>

  return USBD_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	2100      	movs	r1, #0
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 fd6b 	bl	8009e86 <USBD_LL_Transmit>

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	60f8      	str	r0, [r7, #12]
 80093c2:	60b9      	str	r1, [r7, #8]
 80093c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2203      	movs	r2, #3
 80093ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	2100      	movs	r1, #0
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fd6f 	bl	8009ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	2100      	movs	r1, #0
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 fd5e 	bl	8009ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2204      	movs	r2, #4
 8009422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009426:	2300      	movs	r3, #0
 8009428:	2200      	movs	r2, #0
 800942a:	2100      	movs	r1, #0
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fd2a 	bl	8009e86 <USBD_LL_Transmit>

  return USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2205      	movs	r2, #5
 8009448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800944c:	2300      	movs	r3, #0
 800944e:	2200      	movs	r2, #0
 8009450:	2100      	movs	r1, #0
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fd38 	bl	8009ec8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009468:	2200      	movs	r2, #0
 800946a:	4912      	ldr	r1, [pc, #72]	; (80094b4 <MX_USB_DEVICE_Init+0x50>)
 800946c:	4812      	ldr	r0, [pc, #72]	; (80094b8 <MX_USB_DEVICE_Init+0x54>)
 800946e:	f7fe fec9 	bl	8008204 <USBD_Init>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009478:	f7f7 face 	bl	8000a18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800947c:	490f      	ldr	r1, [pc, #60]	; (80094bc <MX_USB_DEVICE_Init+0x58>)
 800947e:	480e      	ldr	r0, [pc, #56]	; (80094b8 <MX_USB_DEVICE_Init+0x54>)
 8009480:	f7fe fef6 	bl	8008270 <USBD_RegisterClass>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800948a:	f7f7 fac5 	bl	8000a18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800948e:	490c      	ldr	r1, [pc, #48]	; (80094c0 <MX_USB_DEVICE_Init+0x5c>)
 8009490:	4809      	ldr	r0, [pc, #36]	; (80094b8 <MX_USB_DEVICE_Init+0x54>)
 8009492:	f7fe fe1b 	bl	80080cc <USBD_CDC_RegisterInterface>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800949c:	f7f7 fabc 	bl	8000a18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094a0:	4805      	ldr	r0, [pc, #20]	; (80094b8 <MX_USB_DEVICE_Init+0x54>)
 80094a2:	f7fe ff06 	bl	80082b2 <USBD_Start>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094ac:	f7f7 fab4 	bl	8000a18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094b0:	bf00      	nop
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20000130 	.word	0x20000130
 80094b8:	20000474 	.word	0x20000474
 80094bc:	20000018 	.word	0x20000018
 80094c0:	2000011c 	.word	0x2000011c

080094c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094c8:	2200      	movs	r2, #0
 80094ca:	490e      	ldr	r1, [pc, #56]	; (8009504 <CDC_Init_FS+0x40>)
 80094cc:	480e      	ldr	r0, [pc, #56]	; (8009508 <CDC_Init_FS+0x44>)
 80094ce:	f7fe fe12 	bl	80080f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094d2:	490e      	ldr	r1, [pc, #56]	; (800950c <CDC_Init_FS+0x48>)
 80094d4:	480c      	ldr	r0, [pc, #48]	; (8009508 <CDC_Init_FS+0x44>)
 80094d6:	f7fe fe27 	bl	8008128 <USBD_CDC_SetRxBuffer>


  if(HAL_UART_Receive_IT(&huart1, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 80094da:	2201      	movs	r2, #1
 80094dc:	4909      	ldr	r1, [pc, #36]	; (8009504 <CDC_Init_FS+0x40>)
 80094de:	480c      	ldr	r0, [pc, #48]	; (8009510 <CDC_Init_FS+0x4c>)
 80094e0:	f7fc f85e 	bl	80055a0 <HAL_UART_Receive_IT>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <CDC_Init_FS+0x2a>
  {
    /* Transfer error in reception process */
    Error_Handler();
 80094ea:	f7f7 fa95 	bl	8000a18 <Error_Handler>
  }

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80094ee:	4809      	ldr	r0, [pc, #36]	; (8009514 <CDC_Init_FS+0x50>)
 80094f0:	f7fb fbf6 	bl	8004ce0 <HAL_TIM_Base_Start_IT>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <CDC_Init_FS+0x3a>
  {
    /* Starting Error */
    Error_Handler();
 80094fa:	f7f7 fa8d 	bl	8000a18 <Error_Handler>
  }

  return (USBD_OK);
 80094fe:	2300      	movs	r3, #0




  /* USER CODE END 3 */
}
 8009500:	4618      	mov	r0, r3
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20000f48 	.word	0x20000f48
 8009508:	20000474 	.word	0x20000474
 800950c:	20000748 	.word	0x20000748
 8009510:	200003a8 	.word	0x200003a8
 8009514:	20000308 	.word	0x20000308

08009518 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009518:	b480      	push	{r7}
 800951a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800951c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800951e:	4618      	mov	r0, r3
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	71fb      	strb	r3, [r7, #7]
 8009534:	4613      	mov	r3, r2
 8009536:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b23      	cmp	r3, #35	; 0x23
 800953c:	d84a      	bhi.n	80095d4 <CDC_Control_FS+0xac>
 800953e:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <CDC_Control_FS+0x1c>)
 8009540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009544:	080095d5 	.word	0x080095d5
 8009548:	080095d5 	.word	0x080095d5
 800954c:	080095d5 	.word	0x080095d5
 8009550:	080095d5 	.word	0x080095d5
 8009554:	080095d5 	.word	0x080095d5
 8009558:	080095d5 	.word	0x080095d5
 800955c:	080095d5 	.word	0x080095d5
 8009560:	080095d5 	.word	0x080095d5
 8009564:	080095d5 	.word	0x080095d5
 8009568:	080095d5 	.word	0x080095d5
 800956c:	080095d5 	.word	0x080095d5
 8009570:	080095d5 	.word	0x080095d5
 8009574:	080095d5 	.word	0x080095d5
 8009578:	080095d5 	.word	0x080095d5
 800957c:	080095d5 	.word	0x080095d5
 8009580:	080095d5 	.word	0x080095d5
 8009584:	080095d5 	.word	0x080095d5
 8009588:	080095d5 	.word	0x080095d5
 800958c:	080095d5 	.word	0x080095d5
 8009590:	080095d5 	.word	0x080095d5
 8009594:	080095d5 	.word	0x080095d5
 8009598:	080095d5 	.word	0x080095d5
 800959c:	080095d5 	.word	0x080095d5
 80095a0:	080095d5 	.word	0x080095d5
 80095a4:	080095d5 	.word	0x080095d5
 80095a8:	080095d5 	.word	0x080095d5
 80095ac:	080095d5 	.word	0x080095d5
 80095b0:	080095d5 	.word	0x080095d5
 80095b4:	080095d5 	.word	0x080095d5
 80095b8:	080095d5 	.word	0x080095d5
 80095bc:	080095d5 	.word	0x080095d5
 80095c0:	080095d5 	.word	0x080095d5
 80095c4:	080095d5 	.word	0x080095d5
 80095c8:	080095d5 	.word	0x080095d5
 80095cc:	080095d5 	.word	0x080095d5
 80095d0:	080095d5 	.word	0x080095d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095d4:	bf00      	nop
  }

  return (USBD_OK);
 80095d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	//CDC_Transmit_FS(Buf, *Len);
	//HAL_UART_Transmit(&huart3, UserRxBufferFS, *Len, 10000);
	HAL_UART_Transmit_DMA(&huart1, Buf, *Len);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	4803      	ldr	r0, [pc, #12]	; (8009608 <CDC_Receive_FS+0x24>)
 80095fa:	f7fc f873 	bl	80056e4 <HAL_UART_Transmit_DMA>


return (USBD_OK);
 80095fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	200003a8 	.word	0x200003a8

0800960c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	4613      	mov	r3, r2
 8009618:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800961e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009622:	4618      	mov	r0, r3
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
	...

08009630 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009638:	4803      	ldr	r0, [pc, #12]	; (8009648 <HAL_UART_TxCpltCallback+0x18>)
 800963a:	f7fe fdb9 	bl	80081b0 <USBD_CDC_ReceivePacket>
}
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20000474 	.word	0x20000474

0800964c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 8009654:	4b0c      	ldr	r3, [pc, #48]	; (8009688 <HAL_UART_RxCpltCallback+0x3c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3301      	adds	r3, #1
 800965a:	4a0b      	ldr	r2, [pc, #44]	; (8009688 <HAL_UART_RxCpltCallback+0x3c>)
 800965c:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 800965e:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <HAL_UART_RxCpltCallback+0x3c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009666:	d102      	bne.n	800966e <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 8009668:	4b07      	ldr	r3, [pc, #28]	; (8009688 <HAL_UART_RxCpltCallback+0x3c>)
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 800966e:	4b06      	ldr	r3, [pc, #24]	; (8009688 <HAL_UART_RxCpltCallback+0x3c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a06      	ldr	r2, [pc, #24]	; (800968c <HAL_UART_RxCpltCallback+0x40>)
 8009674:	4413      	add	r3, r2
 8009676:	2201      	movs	r2, #1
 8009678:	4619      	mov	r1, r3
 800967a:	4805      	ldr	r0, [pc, #20]	; (8009690 <HAL_UART_RxCpltCallback+0x44>)
 800967c:	f7fb ff90 	bl	80055a0 <HAL_UART_Receive_IT>
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20000218 	.word	0x20000218
 800968c:	20000f48 	.word	0x20000f48
 8009690:	200003a8 	.word	0x200003a8

08009694 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 800969c:	2101      	movs	r1, #1
 800969e:	481f      	ldr	r0, [pc, #124]	; (800971c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80096a0:	f7f8 ffed 	bl	800267e <HAL_GPIO_TogglePin>
	  uint32_t buffptr;
	  uint32_t buffsize;

	  if(UserTxBufPtrOut != UserTxBufPtrIn)
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	4b1e      	ldr	r3, [pc, #120]	; (8009724 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d030      	beq.n	8009712 <HAL_TIM_PeriodElapsedCallback+0x7e>
	  {
	    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Roll-back */
 80096b0:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	4b1b      	ldr	r3, [pc, #108]	; (8009724 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d905      	bls.n	80096c8 <HAL_TIM_PeriodElapsedCallback+0x34>
	    {
	      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 80096bc:	4b18      	ldr	r3, [pc, #96]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	e005      	b.n	80096d4 <HAL_TIM_PeriodElapsedCallback+0x40>
	    }
	    else
	    {
	      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 80096c8:	4b16      	ldr	r3, [pc, #88]	; (8009724 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4b14      	ldr	r3, [pc, #80]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	60fb      	str	r3, [r7, #12]
	    }

	    buffptr = UserTxBufPtrOut;
 80096d4:	4b12      	ldr	r3, [pc, #72]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	60bb      	str	r3, [r7, #8]

	    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBufferFS[buffptr], buffsize);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	4a12      	ldr	r2, [pc, #72]	; (8009728 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80096de:	4413      	add	r3, r2
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4619      	mov	r1, r3
 80096e4:	4811      	ldr	r0, [pc, #68]	; (800972c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80096e6:	f7fe fd06 	bl	80080f6 <USBD_CDC_SetTxBuffer>

	    if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 80096ea:	4810      	ldr	r0, [pc, #64]	; (800972c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80096ec:	f7fe fd30 	bl	8008150 <USBD_CDC_TransmitPacket>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10d      	bne.n	8009712 <HAL_TIM_PeriodElapsedCallback+0x7e>
	    {
	      UserTxBufPtrOut += buffsize;
 80096f6:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	4a08      	ldr	r2, [pc, #32]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8009700:	6013      	str	r3, [r2, #0]
	      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800970a:	d102      	bne.n	8009712 <HAL_TIM_PeriodElapsedCallback+0x7e>
	      {
	        UserTxBufPtrOut = 0;
 800970c:	4b04      	ldr	r3, [pc, #16]	; (8009720 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]
	      }
	    }
	  }
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	40020400 	.word	0x40020400
 8009720:	2000021c 	.word	0x2000021c
 8009724:	20000218 	.word	0x20000218
 8009728:	20000f48 	.word	0x20000f48
 800972c:	20000474 	.word	0x20000474

08009730 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2212      	movs	r2, #18
 8009740:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009742:	4b03      	ldr	r3, [pc, #12]	; (8009750 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	20000150 	.word	0x20000150

08009754 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2204      	movs	r2, #4
 8009764:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009766:	4b03      	ldr	r3, [pc, #12]	; (8009774 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	20000170 	.word	0x20000170

08009778 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d105      	bne.n	8009796 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	4907      	ldr	r1, [pc, #28]	; (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
 800978e:	4808      	ldr	r0, [pc, #32]	; (80097b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009790:	f7ff fd87 	bl	80092a2 <USBD_GetString>
 8009794:	e004      	b.n	80097a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	4904      	ldr	r1, [pc, #16]	; (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
 800979a:	4805      	ldr	r0, [pc, #20]	; (80097b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800979c:	f7ff fd81 	bl	80092a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a0:	4b02      	ldr	r3, [pc, #8]	; (80097ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20001748 	.word	0x20001748
 80097b0:	0800a240 	.word	0x0800a240

080097b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	6039      	str	r1, [r7, #0]
 80097be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	4904      	ldr	r1, [pc, #16]	; (80097d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097c4:	4804      	ldr	r0, [pc, #16]	; (80097d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097c6:	f7ff fd6c 	bl	80092a2 <USBD_GetString>
  return USBD_StrDesc;
 80097ca:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20001748 	.word	0x20001748
 80097d8:	0800a258 	.word	0x0800a258

080097dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	221a      	movs	r2, #26
 80097ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097ee:	f000 f855 	bl	800989c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097f2:	4b02      	ldr	r3, [pc, #8]	; (80097fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	20000174 	.word	0x20000174

08009800 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d105      	bne.n	800981e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4907      	ldr	r1, [pc, #28]	; (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009816:	4808      	ldr	r0, [pc, #32]	; (8009838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009818:	f7ff fd43 	bl	80092a2 <USBD_GetString>
 800981c:	e004      	b.n	8009828 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	4904      	ldr	r1, [pc, #16]	; (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009822:	4805      	ldr	r0, [pc, #20]	; (8009838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009824:	f7ff fd3d 	bl	80092a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009828:	4b02      	ldr	r3, [pc, #8]	; (8009834 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20001748 	.word	0x20001748
 8009838:	0800a26c 	.word	0x0800a26c

0800983c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	6039      	str	r1, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4907      	ldr	r1, [pc, #28]	; (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009852:	4808      	ldr	r0, [pc, #32]	; (8009874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009854:	f7ff fd25 	bl	80092a2 <USBD_GetString>
 8009858:	e004      	b.n	8009864 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	4904      	ldr	r1, [pc, #16]	; (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800985e:	4805      	ldr	r0, [pc, #20]	; (8009874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009860:	f7ff fd1f 	bl	80092a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009864:	4b02      	ldr	r3, [pc, #8]	; (8009870 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20001748 	.word	0x20001748
 8009874:	0800a278 	.word	0x0800a278

08009878 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	4603      	mov	r3, r0
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	220c      	movs	r2, #12
 8009888:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800988a:	4b03      	ldr	r3, [pc, #12]	; (8009898 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	20000164 	.word	0x20000164

0800989c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098a2:	4b0f      	ldr	r3, [pc, #60]	; (80098e0 <Get_SerialNum+0x44>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098a8:	4b0e      	ldr	r3, [pc, #56]	; (80098e4 <Get_SerialNum+0x48>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098ae:	4b0e      	ldr	r3, [pc, #56]	; (80098e8 <Get_SerialNum+0x4c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d009      	beq.n	80098d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098c2:	2208      	movs	r2, #8
 80098c4:	4909      	ldr	r1, [pc, #36]	; (80098ec <Get_SerialNum+0x50>)
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f000 f814 	bl	80098f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098cc:	2204      	movs	r2, #4
 80098ce:	4908      	ldr	r1, [pc, #32]	; (80098f0 <Get_SerialNum+0x54>)
 80098d0:	68b8      	ldr	r0, [r7, #8]
 80098d2:	f000 f80f 	bl	80098f4 <IntToUnicode>
  }
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	1ff0f420 	.word	0x1ff0f420
 80098e4:	1ff0f424 	.word	0x1ff0f424
 80098e8:	1ff0f428 	.word	0x1ff0f428
 80098ec:	20000176 	.word	0x20000176
 80098f0:	20000186 	.word	0x20000186

080098f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]
 800990a:	e027      	b.n	800995c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	0f1b      	lsrs	r3, r3, #28
 8009910:	2b09      	cmp	r3, #9
 8009912:	d80b      	bhi.n	800992c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	0f1b      	lsrs	r3, r3, #28
 8009918:	b2da      	uxtb	r2, r3
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4619      	mov	r1, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	440b      	add	r3, r1
 8009924:	3230      	adds	r2, #48	; 0x30
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e00a      	b.n	8009942 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	0f1b      	lsrs	r3, r3, #28
 8009930:	b2da      	uxtb	r2, r3
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4619      	mov	r1, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	440b      	add	r3, r1
 800993c:	3237      	adds	r2, #55	; 0x37
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	011b      	lsls	r3, r3, #4
 8009946:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	3301      	adds	r3, #1
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	3301      	adds	r3, #1
 800995a:	75fb      	strb	r3, [r7, #23]
 800995c:	7dfa      	ldrb	r2, [r7, #23]
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	429a      	cmp	r2, r3
 8009962:	d3d3      	bcc.n	800990c <IntToUnicode+0x18>
  }
}
 8009964:	bf00      	nop
 8009966:	371c      	adds	r7, #28
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	; 0x28
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009978:	f107 0314 	add.w	r3, r7, #20
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	605a      	str	r2, [r3, #4]
 8009982:	609a      	str	r2, [r3, #8]
 8009984:	60da      	str	r2, [r3, #12]
 8009986:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009990:	d149      	bne.n	8009a26 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009992:	4b27      	ldr	r3, [pc, #156]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 8009994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009996:	4a26      	ldr	r2, [pc, #152]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 8009998:	f043 0301 	orr.w	r3, r3, #1
 800999c:	6313      	str	r3, [r2, #48]	; 0x30
 800999e:	4b24      	ldr	r3, [pc, #144]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 80099a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	613b      	str	r3, [r7, #16]
 80099a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80099aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80099ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b0:	2302      	movs	r3, #2
 80099b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099b8:	2303      	movs	r3, #3
 80099ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099bc:	230a      	movs	r3, #10
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099c0:	f107 0314 	add.w	r3, r7, #20
 80099c4:	4619      	mov	r1, r3
 80099c6:	481b      	ldr	r0, [pc, #108]	; (8009a34 <HAL_PCD_MspInit+0xc4>)
 80099c8:	f7f8 fc96 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80099cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80099d2:	2300      	movs	r3, #0
 80099d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80099da:	f107 0314 	add.w	r3, r7, #20
 80099de:	4619      	mov	r1, r3
 80099e0:	4814      	ldr	r0, [pc, #80]	; (8009a34 <HAL_PCD_MspInit+0xc4>)
 80099e2:	f7f8 fc89 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099e6:	4b12      	ldr	r3, [pc, #72]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 80099e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ea:	4a11      	ldr	r2, [pc, #68]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 80099ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f0:	6353      	str	r3, [r2, #52]	; 0x34
 80099f2:	4b0f      	ldr	r3, [pc, #60]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 80099f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 8009a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a02:	4a0b      	ldr	r2, [pc, #44]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 8009a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a08:	6453      	str	r3, [r2, #68]	; 0x44
 8009a0a:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <HAL_PCD_MspInit+0xc0>)
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a12:	60bb      	str	r3, [r7, #8]
 8009a14:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a16:	2200      	movs	r2, #0
 8009a18:	2100      	movs	r1, #0
 8009a1a:	2043      	movs	r0, #67	; 0x43
 8009a1c:	f7f7 fc31 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a20:	2043      	movs	r0, #67	; 0x43
 8009a22:	f7f7 fc4a 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a26:	bf00      	nop
 8009a28:	3728      	adds	r7, #40	; 0x28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	40023800 	.word	0x40023800
 8009a34:	40020000 	.word	0x40020000

08009a38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4610      	mov	r0, r2
 8009a50:	f7fe fc7a 	bl	8008348 <USBD_LL_SetupStage>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8009a6e:	78fa      	ldrb	r2, [r7, #3]
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	4613      	mov	r3, r2
 8009a74:	00db      	lsls	r3, r3, #3
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	78fb      	ldrb	r3, [r7, #3]
 8009a84:	4619      	mov	r1, r3
 8009a86:	f7fe fcb2 	bl	80083ee <USBD_LL_DataOutStage>
}
 8009a8a:	bf00      	nop
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8009aa4:	78fa      	ldrb	r2, [r7, #3]
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	3348      	adds	r3, #72	; 0x48
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	f7fe fcfb 	bl	80084b4 <USBD_LL_DataInStage>
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fe fdff 	bl	80086d8 <USBD_LL_SOF>
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aea:	2301      	movs	r3, #1
 8009aec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
 8009afa:	e008      	b.n	8009b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d102      	bne.n	8009b0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009b04:	2301      	movs	r3, #1
 8009b06:	73fb      	strb	r3, [r7, #15]
 8009b08:	e001      	b.n	8009b0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009b0a:	f7f6 ff85 	bl	8000a18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b14:	7bfa      	ldrb	r2, [r7, #15]
 8009b16:	4611      	mov	r1, r2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe fda2 	bl	8008662 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fd5b 	bl	80085e0 <USBD_LL_Reset>
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe fd9d 	bl	8008682 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d005      	beq.n	8009b74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b68:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <HAL_PCD_SuspendCallback+0x48>)
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	4a03      	ldr	r2, [pc, #12]	; (8009b7c <HAL_PCD_SuspendCallback+0x48>)
 8009b6e:	f043 0306 	orr.w	r3, r3, #6
 8009b72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	e000ed00 	.word	0xe000ed00

08009b80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fd8c 	bl	80086ac <USBD_LL_Resume>
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009bae:	78fa      	ldrb	r2, [r7, #3]
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe fdb7 	bl	8008726 <USBD_LL_IsoOUTIncomplete>
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009bd2:	78fa      	ldrb	r2, [r7, #3]
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe fd98 	bl	800870c <USBD_LL_IsoINIncomplete>
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fda4 	bl	8008740 <USBD_LL_DevConnected>
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fda1 	bl	8008756 <USBD_LL_DevDisconnected>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d13c      	bne.n	8009ca6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c2c:	4a20      	ldr	r2, [pc, #128]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a1e      	ldr	r2, [pc, #120]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c3c:	4b1c      	ldr	r3, [pc, #112]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009c44:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c46:	2206      	movs	r2, #6
 8009c48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c4a:	4b19      	ldr	r3, [pc, #100]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c50:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c56:	4b16      	ldr	r3, [pc, #88]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c58:	2202      	movs	r2, #2
 8009c5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009c5c:	4b14      	ldr	r3, [pc, #80]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c5e:	2201      	movs	r2, #1
 8009c60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c62:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c68:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009c6e:	4b10      	ldr	r3, [pc, #64]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c70:	2201      	movs	r2, #1
 8009c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c7a:	480d      	ldr	r0, [pc, #52]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c7c:	f7f8 fd19 	bl	80026b2 <HAL_PCD_Init>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c86:	f7f6 fec7 	bl	8000a18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c8a:	2180      	movs	r1, #128	; 0x80
 8009c8c:	4808      	ldr	r0, [pc, #32]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c8e:	f7f9 fe9a 	bl	80039c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c92:	2240      	movs	r2, #64	; 0x40
 8009c94:	2100      	movs	r1, #0
 8009c96:	4806      	ldr	r0, [pc, #24]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009c98:	f7f9 fe4e 	bl	8003938 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c9c:	2280      	movs	r2, #128	; 0x80
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	4803      	ldr	r0, [pc, #12]	; (8009cb0 <USBD_LL_Init+0x94>)
 8009ca2:	f7f9 fe49 	bl	8003938 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	20001948 	.word	0x20001948

08009cb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7f8 fe15 	bl	80028fa <HAL_PCD_Start>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f97e 	bl	8009fd8 <USBD_Get_USB_Status>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	70fb      	strb	r3, [r7, #3]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70bb      	strb	r3, [r7, #2]
 8009d00:	4613      	mov	r3, r2
 8009d02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d12:	78bb      	ldrb	r3, [r7, #2]
 8009d14:	883a      	ldrh	r2, [r7, #0]
 8009d16:	78f9      	ldrb	r1, [r7, #3]
 8009d18:	f7f9 fa15 	bl	8003146 <HAL_PCD_EP_Open>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f958 	bl	8009fd8 <USBD_Get_USB_Status>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d50:	78fa      	ldrb	r2, [r7, #3]
 8009d52:	4611      	mov	r1, r2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7f9 fa5e 	bl	8003216 <HAL_PCD_EP_Close>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f939 	bl	8009fd8 <USBD_Get_USB_Status>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d8e:	78fa      	ldrb	r2, [r7, #3]
 8009d90:	4611      	mov	r1, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f9 fb36 	bl	8003404 <HAL_PCD_EP_SetStall>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 f91a 	bl	8009fd8 <USBD_Get_USB_Status>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f9 fb7b 	bl	80034cc <HAL_PCD_EP_ClrStall>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 f8fb 	bl	8009fd8 <USBD_Get_USB_Status>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e02:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da0b      	bge.n	8009e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e12:	68f9      	ldr	r1, [r7, #12]
 8009e14:	4613      	mov	r3, r2
 8009e16:	00db      	lsls	r3, r3, #3
 8009e18:	1a9b      	subs	r3, r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	333e      	adds	r3, #62	; 0x3e
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	e00b      	b.n	8009e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e2a:	68f9      	ldr	r1, [r7, #12]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	00db      	lsls	r3, r3, #3
 8009e30:	1a9b      	subs	r3, r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	440b      	add	r3, r1
 8009e36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e62:	78fa      	ldrb	r2, [r7, #3]
 8009e64:	4611      	mov	r1, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7f9 f948 	bl	80030fc <HAL_PCD_SetAddress>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 f8b0 	bl	8009fd8 <USBD_Get_USB_Status>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b086      	sub	sp, #24
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	60f8      	str	r0, [r7, #12]
 8009e8e:	607a      	str	r2, [r7, #4]
 8009e90:	603b      	str	r3, [r7, #0]
 8009e92:	460b      	mov	r3, r1
 8009e94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ea4:	7af9      	ldrb	r1, [r7, #11]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	f7f9 fa61 	bl	8003370 <HAL_PCD_EP_Transmit>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 f88f 	bl	8009fd8 <USBD_Get_USB_Status>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ee6:	7af9      	ldrb	r1, [r7, #11]
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	f7f9 f9dd 	bl	80032aa <HAL_PCD_EP_Receive>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 f86e 	bl	8009fd8 <USBD_Get_USB_Status>
 8009efc:	4603      	mov	r3, r0
 8009efe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009f00:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f1c:	78fa      	ldrb	r2, [r7, #3]
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7f9 fa0d 	bl	8003340 <HAL_PCD_EP_GetRxCount>
 8009f26:	4603      	mov	r3, r0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009f3c:	78fb      	ldrb	r3, [r7, #3]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_PCDEx_LPM_Callback+0x18>
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d01f      	beq.n	8009f86 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009f46:	e03b      	b.n	8009fc0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d007      	beq.n	8009f60 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009f50:	f000 f83c 	bl	8009fcc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f54:	4b1c      	ldr	r3, [pc, #112]	; (8009fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	4a1b      	ldr	r2, [pc, #108]	; (8009fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f5a:	f023 0306 	bic.w	r3, r3, #6
 8009f5e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6812      	ldr	r2, [r2, #0]
 8009f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f72:	f023 0301 	bic.w	r3, r3, #1
 8009f76:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fb94 	bl	80086ac <USBD_LL_Resume>
    break;
 8009f84:	e01c      	b.n	8009fc0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f98:	f043 0301 	orr.w	r3, r3, #1
 8009f9c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fe fb6c 	bl	8008682 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009fb2:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	4a04      	ldr	r2, [pc, #16]	; (8009fc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8009fb8:	f043 0306 	orr.w	r3, r3, #6
 8009fbc:	6113      	str	r3, [r2, #16]
    break;   
 8009fbe:	bf00      	nop
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	e000ed00 	.word	0xe000ed00

08009fcc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009fd0:	f7f6 fac8 	bl	8000564 <SystemClock_Config>
}
 8009fd4:	bf00      	nop
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d817      	bhi.n	800a01c <USBD_Get_USB_Status+0x44>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <USBD_Get_USB_Status+0x1c>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a005 	.word	0x0800a005
 8009ff8:	0800a00b 	.word	0x0800a00b
 8009ffc:	0800a011 	.word	0x0800a011
 800a000:	0800a017 	.word	0x0800a017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
    break;
 800a008:	e00b      	b.n	800a022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a00a:	2303      	movs	r3, #3
 800a00c:	73fb      	strb	r3, [r7, #15]
    break;
 800a00e:	e008      	b.n	800a022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a010:	2301      	movs	r3, #1
 800a012:	73fb      	strb	r3, [r7, #15]
    break;
 800a014:	e005      	b.n	800a022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a016:	2303      	movs	r3, #3
 800a018:	73fb      	strb	r3, [r7, #15]
    break;
 800a01a:	e002      	b.n	800a022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	73fb      	strb	r3, [r7, #15]
    break;
 800a020:	bf00      	nop
  }
  return usb_status;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <__errno>:
 800a030:	4b01      	ldr	r3, [pc, #4]	; (800a038 <__errno+0x8>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20000190 	.word	0x20000190

0800a03c <__libc_init_array>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4e0d      	ldr	r6, [pc, #52]	; (800a074 <__libc_init_array+0x38>)
 800a040:	4c0d      	ldr	r4, [pc, #52]	; (800a078 <__libc_init_array+0x3c>)
 800a042:	1ba4      	subs	r4, r4, r6
 800a044:	10a4      	asrs	r4, r4, #2
 800a046:	2500      	movs	r5, #0
 800a048:	42a5      	cmp	r5, r4
 800a04a:	d109      	bne.n	800a060 <__libc_init_array+0x24>
 800a04c:	4e0b      	ldr	r6, [pc, #44]	; (800a07c <__libc_init_array+0x40>)
 800a04e:	4c0c      	ldr	r4, [pc, #48]	; (800a080 <__libc_init_array+0x44>)
 800a050:	f000 f8ea 	bl	800a228 <_init>
 800a054:	1ba4      	subs	r4, r4, r6
 800a056:	10a4      	asrs	r4, r4, #2
 800a058:	2500      	movs	r5, #0
 800a05a:	42a5      	cmp	r5, r4
 800a05c:	d105      	bne.n	800a06a <__libc_init_array+0x2e>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a064:	4798      	blx	r3
 800a066:	3501      	adds	r5, #1
 800a068:	e7ee      	b.n	800a048 <__libc_init_array+0xc>
 800a06a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a06e:	4798      	blx	r3
 800a070:	3501      	adds	r5, #1
 800a072:	e7f2      	b.n	800a05a <__libc_init_array+0x1e>
 800a074:	0800a2b0 	.word	0x0800a2b0
 800a078:	0800a2b0 	.word	0x0800a2b0
 800a07c:	0800a2b0 	.word	0x0800a2b0
 800a080:	0800a2b4 	.word	0x0800a2b4

0800a084 <malloc>:
 800a084:	4b02      	ldr	r3, [pc, #8]	; (800a090 <malloc+0xc>)
 800a086:	4601      	mov	r1, r0
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f000 b861 	b.w	800a150 <_malloc_r>
 800a08e:	bf00      	nop
 800a090:	20000190 	.word	0x20000190

0800a094 <free>:
 800a094:	4b02      	ldr	r3, [pc, #8]	; (800a0a0 <free+0xc>)
 800a096:	4601      	mov	r1, r0
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	f000 b80b 	b.w	800a0b4 <_free_r>
 800a09e:	bf00      	nop
 800a0a0:	20000190 	.word	0x20000190

0800a0a4 <memset>:
 800a0a4:	4402      	add	r2, r0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d100      	bne.n	800a0ae <memset+0xa>
 800a0ac:	4770      	bx	lr
 800a0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a0b2:	e7f9      	b.n	800a0a8 <memset+0x4>

0800a0b4 <_free_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	2900      	cmp	r1, #0
 800a0ba:	d045      	beq.n	800a148 <_free_r+0x94>
 800a0bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c0:	1f0c      	subs	r4, r1, #4
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	bfb8      	it	lt
 800a0c6:	18e4      	addlt	r4, r4, r3
 800a0c8:	f000 f8ac 	bl	800a224 <__malloc_lock>
 800a0cc:	4a1f      	ldr	r2, [pc, #124]	; (800a14c <_free_r+0x98>)
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	b933      	cbnz	r3, 800a0e2 <_free_r+0x2e>
 800a0d4:	6063      	str	r3, [r4, #4]
 800a0d6:	6014      	str	r4, [r2, #0]
 800a0d8:	4628      	mov	r0, r5
 800a0da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0de:	f000 b8a2 	b.w	800a226 <__malloc_unlock>
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	d90c      	bls.n	800a100 <_free_r+0x4c>
 800a0e6:	6821      	ldr	r1, [r4, #0]
 800a0e8:	1862      	adds	r2, r4, r1
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	bf04      	itt	eq
 800a0ee:	681a      	ldreq	r2, [r3, #0]
 800a0f0:	685b      	ldreq	r3, [r3, #4]
 800a0f2:	6063      	str	r3, [r4, #4]
 800a0f4:	bf04      	itt	eq
 800a0f6:	1852      	addeq	r2, r2, r1
 800a0f8:	6022      	streq	r2, [r4, #0]
 800a0fa:	6004      	str	r4, [r0, #0]
 800a0fc:	e7ec      	b.n	800a0d8 <_free_r+0x24>
 800a0fe:	4613      	mov	r3, r2
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	b10a      	cbz	r2, 800a108 <_free_r+0x54>
 800a104:	42a2      	cmp	r2, r4
 800a106:	d9fa      	bls.n	800a0fe <_free_r+0x4a>
 800a108:	6819      	ldr	r1, [r3, #0]
 800a10a:	1858      	adds	r0, r3, r1
 800a10c:	42a0      	cmp	r0, r4
 800a10e:	d10b      	bne.n	800a128 <_free_r+0x74>
 800a110:	6820      	ldr	r0, [r4, #0]
 800a112:	4401      	add	r1, r0
 800a114:	1858      	adds	r0, r3, r1
 800a116:	4282      	cmp	r2, r0
 800a118:	6019      	str	r1, [r3, #0]
 800a11a:	d1dd      	bne.n	800a0d8 <_free_r+0x24>
 800a11c:	6810      	ldr	r0, [r2, #0]
 800a11e:	6852      	ldr	r2, [r2, #4]
 800a120:	605a      	str	r2, [r3, #4]
 800a122:	4401      	add	r1, r0
 800a124:	6019      	str	r1, [r3, #0]
 800a126:	e7d7      	b.n	800a0d8 <_free_r+0x24>
 800a128:	d902      	bls.n	800a130 <_free_r+0x7c>
 800a12a:	230c      	movs	r3, #12
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	e7d3      	b.n	800a0d8 <_free_r+0x24>
 800a130:	6820      	ldr	r0, [r4, #0]
 800a132:	1821      	adds	r1, r4, r0
 800a134:	428a      	cmp	r2, r1
 800a136:	bf04      	itt	eq
 800a138:	6811      	ldreq	r1, [r2, #0]
 800a13a:	6852      	ldreq	r2, [r2, #4]
 800a13c:	6062      	str	r2, [r4, #4]
 800a13e:	bf04      	itt	eq
 800a140:	1809      	addeq	r1, r1, r0
 800a142:	6021      	streq	r1, [r4, #0]
 800a144:	605c      	str	r4, [r3, #4]
 800a146:	e7c7      	b.n	800a0d8 <_free_r+0x24>
 800a148:	bd38      	pop	{r3, r4, r5, pc}
 800a14a:	bf00      	nop
 800a14c:	20000220 	.word	0x20000220

0800a150 <_malloc_r>:
 800a150:	b570      	push	{r4, r5, r6, lr}
 800a152:	1ccd      	adds	r5, r1, #3
 800a154:	f025 0503 	bic.w	r5, r5, #3
 800a158:	3508      	adds	r5, #8
 800a15a:	2d0c      	cmp	r5, #12
 800a15c:	bf38      	it	cc
 800a15e:	250c      	movcc	r5, #12
 800a160:	2d00      	cmp	r5, #0
 800a162:	4606      	mov	r6, r0
 800a164:	db01      	blt.n	800a16a <_malloc_r+0x1a>
 800a166:	42a9      	cmp	r1, r5
 800a168:	d903      	bls.n	800a172 <_malloc_r+0x22>
 800a16a:	230c      	movs	r3, #12
 800a16c:	6033      	str	r3, [r6, #0]
 800a16e:	2000      	movs	r0, #0
 800a170:	bd70      	pop	{r4, r5, r6, pc}
 800a172:	f000 f857 	bl	800a224 <__malloc_lock>
 800a176:	4a21      	ldr	r2, [pc, #132]	; (800a1fc <_malloc_r+0xac>)
 800a178:	6814      	ldr	r4, [r2, #0]
 800a17a:	4621      	mov	r1, r4
 800a17c:	b991      	cbnz	r1, 800a1a4 <_malloc_r+0x54>
 800a17e:	4c20      	ldr	r4, [pc, #128]	; (800a200 <_malloc_r+0xb0>)
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	b91b      	cbnz	r3, 800a18c <_malloc_r+0x3c>
 800a184:	4630      	mov	r0, r6
 800a186:	f000 f83d 	bl	800a204 <_sbrk_r>
 800a18a:	6020      	str	r0, [r4, #0]
 800a18c:	4629      	mov	r1, r5
 800a18e:	4630      	mov	r0, r6
 800a190:	f000 f838 	bl	800a204 <_sbrk_r>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d124      	bne.n	800a1e2 <_malloc_r+0x92>
 800a198:	230c      	movs	r3, #12
 800a19a:	6033      	str	r3, [r6, #0]
 800a19c:	4630      	mov	r0, r6
 800a19e:	f000 f842 	bl	800a226 <__malloc_unlock>
 800a1a2:	e7e4      	b.n	800a16e <_malloc_r+0x1e>
 800a1a4:	680b      	ldr	r3, [r1, #0]
 800a1a6:	1b5b      	subs	r3, r3, r5
 800a1a8:	d418      	bmi.n	800a1dc <_malloc_r+0x8c>
 800a1aa:	2b0b      	cmp	r3, #11
 800a1ac:	d90f      	bls.n	800a1ce <_malloc_r+0x7e>
 800a1ae:	600b      	str	r3, [r1, #0]
 800a1b0:	50cd      	str	r5, [r1, r3]
 800a1b2:	18cc      	adds	r4, r1, r3
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f000 f836 	bl	800a226 <__malloc_unlock>
 800a1ba:	f104 000b 	add.w	r0, r4, #11
 800a1be:	1d23      	adds	r3, r4, #4
 800a1c0:	f020 0007 	bic.w	r0, r0, #7
 800a1c4:	1ac3      	subs	r3, r0, r3
 800a1c6:	d0d3      	beq.n	800a170 <_malloc_r+0x20>
 800a1c8:	425a      	negs	r2, r3
 800a1ca:	50e2      	str	r2, [r4, r3]
 800a1cc:	e7d0      	b.n	800a170 <_malloc_r+0x20>
 800a1ce:	428c      	cmp	r4, r1
 800a1d0:	684b      	ldr	r3, [r1, #4]
 800a1d2:	bf16      	itet	ne
 800a1d4:	6063      	strne	r3, [r4, #4]
 800a1d6:	6013      	streq	r3, [r2, #0]
 800a1d8:	460c      	movne	r4, r1
 800a1da:	e7eb      	b.n	800a1b4 <_malloc_r+0x64>
 800a1dc:	460c      	mov	r4, r1
 800a1de:	6849      	ldr	r1, [r1, #4]
 800a1e0:	e7cc      	b.n	800a17c <_malloc_r+0x2c>
 800a1e2:	1cc4      	adds	r4, r0, #3
 800a1e4:	f024 0403 	bic.w	r4, r4, #3
 800a1e8:	42a0      	cmp	r0, r4
 800a1ea:	d005      	beq.n	800a1f8 <_malloc_r+0xa8>
 800a1ec:	1a21      	subs	r1, r4, r0
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f000 f808 	bl	800a204 <_sbrk_r>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d0cf      	beq.n	800a198 <_malloc_r+0x48>
 800a1f8:	6025      	str	r5, [r4, #0]
 800a1fa:	e7db      	b.n	800a1b4 <_malloc_r+0x64>
 800a1fc:	20000220 	.word	0x20000220
 800a200:	20000224 	.word	0x20000224

0800a204 <_sbrk_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4c06      	ldr	r4, [pc, #24]	; (800a220 <_sbrk_r+0x1c>)
 800a208:	2300      	movs	r3, #0
 800a20a:	4605      	mov	r5, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	6023      	str	r3, [r4, #0]
 800a210:	f7f6 fe72 	bl	8000ef8 <_sbrk>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_sbrk_r+0x1a>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_sbrk_r+0x1a>
 800a21c:	602b      	str	r3, [r5, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20001d4c 	.word	0x20001d4c

0800a224 <__malloc_lock>:
 800a224:	4770      	bx	lr

0800a226 <__malloc_unlock>:
 800a226:	4770      	bx	lr

0800a228 <_init>:
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22a:	bf00      	nop
 800a22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a22e:	bc08      	pop	{r3}
 800a230:	469e      	mov	lr, r3
 800a232:	4770      	bx	lr

0800a234 <_fini>:
 800a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a236:	bf00      	nop
 800a238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23a:	bc08      	pop	{r3}
 800a23c:	469e      	mov	lr, r3
 800a23e:	4770      	bx	lr
