
updating_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00050000  2**2
                  ALLOC
  1 .isr_vector   000001fc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014e2c  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013a90  0801d02c  0801d02c  0001d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08030abc  08030abc  00030abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08030ac4  08030ac4  00030ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08030ac8  08030ac8  00030ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000080  20000040  08030acc  00040040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000b2a4  200000c0  08030b4c  000400c0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000b364  08030b4c  0004b364  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003e676  00000000  00000000  000400ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007980  00000000  00000000  0007e764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001f60  00000000  00000000  000860e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001d88  00000000  00000000  00088048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00037b55  00000000  00000000  00089dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0002a859  00000000  00000000  000c1925  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001199df  00000000  00000000  000ec17e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00205b5d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000084a0  00000000  00000000  00205bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	200000c0 	.word	0x200000c0
 800821c:	00000000 	.word	0x00000000
 8008220:	0801d014 	.word	0x0801d014

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	200000c4 	.word	0x200000c4
 800823c:	0801d014 	.word	0x0801d014

08008240 <strcmp>:
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008248:	2a01      	cmp	r2, #1
 800824a:	bf28      	it	cs
 800824c:	429a      	cmpcs	r2, r3
 800824e:	d0f7      	beq.n	8008240 <strcmp>
 8008250:	1ad0      	subs	r0, r2, r3
 8008252:	4770      	bx	lr

08008254 <strlen>:
 8008254:	4603      	mov	r3, r0
 8008256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800825a:	2a00      	cmp	r2, #0
 800825c:	d1fb      	bne.n	8008256 <strlen+0x2>
 800825e:	1a18      	subs	r0, r3, r0
 8008260:	3801      	subs	r0, #1
 8008262:	4770      	bx	lr
	...

08008270 <memchr>:
 8008270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008274:	2a10      	cmp	r2, #16
 8008276:	db2b      	blt.n	80082d0 <memchr+0x60>
 8008278:	f010 0f07 	tst.w	r0, #7
 800827c:	d008      	beq.n	8008290 <memchr+0x20>
 800827e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008282:	3a01      	subs	r2, #1
 8008284:	428b      	cmp	r3, r1
 8008286:	d02d      	beq.n	80082e4 <memchr+0x74>
 8008288:	f010 0f07 	tst.w	r0, #7
 800828c:	b342      	cbz	r2, 80082e0 <memchr+0x70>
 800828e:	d1f6      	bne.n	800827e <memchr+0xe>
 8008290:	b4f0      	push	{r4, r5, r6, r7}
 8008292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800829a:	f022 0407 	bic.w	r4, r2, #7
 800829e:	f07f 0700 	mvns.w	r7, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80082a8:	3c08      	subs	r4, #8
 80082aa:	ea85 0501 	eor.w	r5, r5, r1
 80082ae:	ea86 0601 	eor.w	r6, r6, r1
 80082b2:	fa85 f547 	uadd8	r5, r5, r7
 80082b6:	faa3 f587 	sel	r5, r3, r7
 80082ba:	fa86 f647 	uadd8	r6, r6, r7
 80082be:	faa5 f687 	sel	r6, r5, r7
 80082c2:	b98e      	cbnz	r6, 80082e8 <memchr+0x78>
 80082c4:	d1ee      	bne.n	80082a4 <memchr+0x34>
 80082c6:	bcf0      	pop	{r4, r5, r6, r7}
 80082c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80082cc:	f002 0207 	and.w	r2, r2, #7
 80082d0:	b132      	cbz	r2, 80082e0 <memchr+0x70>
 80082d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082d6:	3a01      	subs	r2, #1
 80082d8:	ea83 0301 	eor.w	r3, r3, r1
 80082dc:	b113      	cbz	r3, 80082e4 <memchr+0x74>
 80082de:	d1f8      	bne.n	80082d2 <memchr+0x62>
 80082e0:	2000      	movs	r0, #0
 80082e2:	4770      	bx	lr
 80082e4:	3801      	subs	r0, #1
 80082e6:	4770      	bx	lr
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	bf06      	itte	eq
 80082ec:	4635      	moveq	r5, r6
 80082ee:	3803      	subeq	r0, #3
 80082f0:	3807      	subne	r0, #7
 80082f2:	f015 0f01 	tst.w	r5, #1
 80082f6:	d107      	bne.n	8008308 <memchr+0x98>
 80082f8:	3001      	adds	r0, #1
 80082fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80082fe:	bf02      	ittt	eq
 8008300:	3001      	addeq	r0, #1
 8008302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008306:	3001      	addeq	r0, #1
 8008308:	bcf0      	pop	{r4, r5, r6, r7}
 800830a:	3801      	subs	r0, #1
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <__aeabi_uldivmod>:
 8008310:	b953      	cbnz	r3, 8008328 <__aeabi_uldivmod+0x18>
 8008312:	b94a      	cbnz	r2, 8008328 <__aeabi_uldivmod+0x18>
 8008314:	2900      	cmp	r1, #0
 8008316:	bf08      	it	eq
 8008318:	2800      	cmpeq	r0, #0
 800831a:	bf1c      	itt	ne
 800831c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008324:	f000 b972 	b.w	800860c <__aeabi_idiv0>
 8008328:	f1ad 0c08 	sub.w	ip, sp, #8
 800832c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008330:	f000 f806 	bl	8008340 <__udivmoddi4>
 8008334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr

08008340 <__udivmoddi4>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	9e08      	ldr	r6, [sp, #32]
 8008346:	4604      	mov	r4, r0
 8008348:	4688      	mov	r8, r1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14b      	bne.n	80083e6 <__udivmoddi4+0xa6>
 800834e:	428a      	cmp	r2, r1
 8008350:	4615      	mov	r5, r2
 8008352:	d967      	bls.n	8008424 <__udivmoddi4+0xe4>
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	b14a      	cbz	r2, 800836e <__udivmoddi4+0x2e>
 800835a:	f1c2 0720 	rsb	r7, r2, #32
 800835e:	fa01 f302 	lsl.w	r3, r1, r2
 8008362:	fa20 f707 	lsr.w	r7, r0, r7
 8008366:	4095      	lsls	r5, r2
 8008368:	ea47 0803 	orr.w	r8, r7, r3
 800836c:	4094      	lsls	r4, r2
 800836e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008372:	0c23      	lsrs	r3, r4, #16
 8008374:	fbb8 f7fe 	udiv	r7, r8, lr
 8008378:	fa1f fc85 	uxth.w	ip, r5
 800837c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008384:	fb07 f10c 	mul.w	r1, r7, ip
 8008388:	4299      	cmp	r1, r3
 800838a:	d909      	bls.n	80083a0 <__udivmoddi4+0x60>
 800838c:	18eb      	adds	r3, r5, r3
 800838e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8008392:	f080 811b 	bcs.w	80085cc <__udivmoddi4+0x28c>
 8008396:	4299      	cmp	r1, r3
 8008398:	f240 8118 	bls.w	80085cc <__udivmoddi4+0x28c>
 800839c:	3f02      	subs	r7, #2
 800839e:	442b      	add	r3, r5
 80083a0:	1a5b      	subs	r3, r3, r1
 80083a2:	b2a4      	uxth	r4, r4
 80083a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80083a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80083ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80083b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80083b4:	45a4      	cmp	ip, r4
 80083b6:	d909      	bls.n	80083cc <__udivmoddi4+0x8c>
 80083b8:	192c      	adds	r4, r5, r4
 80083ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083be:	f080 8107 	bcs.w	80085d0 <__udivmoddi4+0x290>
 80083c2:	45a4      	cmp	ip, r4
 80083c4:	f240 8104 	bls.w	80085d0 <__udivmoddi4+0x290>
 80083c8:	3802      	subs	r0, #2
 80083ca:	442c      	add	r4, r5
 80083cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80083d0:	eba4 040c 	sub.w	r4, r4, ip
 80083d4:	2700      	movs	r7, #0
 80083d6:	b11e      	cbz	r6, 80083e0 <__udivmoddi4+0xa0>
 80083d8:	40d4      	lsrs	r4, r2
 80083da:	2300      	movs	r3, #0
 80083dc:	e9c6 4300 	strd	r4, r3, [r6]
 80083e0:	4639      	mov	r1, r7
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d909      	bls.n	80083fe <__udivmoddi4+0xbe>
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	f000 80eb 	beq.w	80085c6 <__udivmoddi4+0x286>
 80083f0:	2700      	movs	r7, #0
 80083f2:	e9c6 0100 	strd	r0, r1, [r6]
 80083f6:	4638      	mov	r0, r7
 80083f8:	4639      	mov	r1, r7
 80083fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fe:	fab3 f783 	clz	r7, r3
 8008402:	2f00      	cmp	r7, #0
 8008404:	d147      	bne.n	8008496 <__udivmoddi4+0x156>
 8008406:	428b      	cmp	r3, r1
 8008408:	d302      	bcc.n	8008410 <__udivmoddi4+0xd0>
 800840a:	4282      	cmp	r2, r0
 800840c:	f200 80fa 	bhi.w	8008604 <__udivmoddi4+0x2c4>
 8008410:	1a84      	subs	r4, r0, r2
 8008412:	eb61 0303 	sbc.w	r3, r1, r3
 8008416:	2001      	movs	r0, #1
 8008418:	4698      	mov	r8, r3
 800841a:	2e00      	cmp	r6, #0
 800841c:	d0e0      	beq.n	80083e0 <__udivmoddi4+0xa0>
 800841e:	e9c6 4800 	strd	r4, r8, [r6]
 8008422:	e7dd      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008424:	b902      	cbnz	r2, 8008428 <__udivmoddi4+0xe8>
 8008426:	deff      	udf	#255	; 0xff
 8008428:	fab2 f282 	clz	r2, r2
 800842c:	2a00      	cmp	r2, #0
 800842e:	f040 808f 	bne.w	8008550 <__udivmoddi4+0x210>
 8008432:	1b49      	subs	r1, r1, r5
 8008434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008438:	fa1f f885 	uxth.w	r8, r5
 800843c:	2701      	movs	r7, #1
 800843e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008442:	0c23      	lsrs	r3, r4, #16
 8008444:	fb0e 111c 	mls	r1, lr, ip, r1
 8008448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800844c:	fb08 f10c 	mul.w	r1, r8, ip
 8008450:	4299      	cmp	r1, r3
 8008452:	d907      	bls.n	8008464 <__udivmoddi4+0x124>
 8008454:	18eb      	adds	r3, r5, r3
 8008456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800845a:	d202      	bcs.n	8008462 <__udivmoddi4+0x122>
 800845c:	4299      	cmp	r1, r3
 800845e:	f200 80cd 	bhi.w	80085fc <__udivmoddi4+0x2bc>
 8008462:	4684      	mov	ip, r0
 8008464:	1a59      	subs	r1, r3, r1
 8008466:	b2a3      	uxth	r3, r4
 8008468:	fbb1 f0fe 	udiv	r0, r1, lr
 800846c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008474:	fb08 f800 	mul.w	r8, r8, r0
 8008478:	45a0      	cmp	r8, r4
 800847a:	d907      	bls.n	800848c <__udivmoddi4+0x14c>
 800847c:	192c      	adds	r4, r5, r4
 800847e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008482:	d202      	bcs.n	800848a <__udivmoddi4+0x14a>
 8008484:	45a0      	cmp	r8, r4
 8008486:	f200 80b6 	bhi.w	80085f6 <__udivmoddi4+0x2b6>
 800848a:	4618      	mov	r0, r3
 800848c:	eba4 0408 	sub.w	r4, r4, r8
 8008490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008494:	e79f      	b.n	80083d6 <__udivmoddi4+0x96>
 8008496:	f1c7 0c20 	rsb	ip, r7, #32
 800849a:	40bb      	lsls	r3, r7
 800849c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80084a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80084a4:	fa01 f407 	lsl.w	r4, r1, r7
 80084a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80084ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80084b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80084b4:	4325      	orrs	r5, r4
 80084b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80084ba:	0c2c      	lsrs	r4, r5, #16
 80084bc:	fb08 3319 	mls	r3, r8, r9, r3
 80084c0:	fa1f fa8e 	uxth.w	sl, lr
 80084c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80084c8:	fb09 f40a 	mul.w	r4, r9, sl
 80084cc:	429c      	cmp	r4, r3
 80084ce:	fa02 f207 	lsl.w	r2, r2, r7
 80084d2:	fa00 f107 	lsl.w	r1, r0, r7
 80084d6:	d90b      	bls.n	80084f0 <__udivmoddi4+0x1b0>
 80084d8:	eb1e 0303 	adds.w	r3, lr, r3
 80084dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80084e0:	f080 8087 	bcs.w	80085f2 <__udivmoddi4+0x2b2>
 80084e4:	429c      	cmp	r4, r3
 80084e6:	f240 8084 	bls.w	80085f2 <__udivmoddi4+0x2b2>
 80084ea:	f1a9 0902 	sub.w	r9, r9, #2
 80084ee:	4473      	add	r3, lr
 80084f0:	1b1b      	subs	r3, r3, r4
 80084f2:	b2ad      	uxth	r5, r5
 80084f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80084f8:	fb08 3310 	mls	r3, r8, r0, r3
 80084fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008500:	fb00 fa0a 	mul.w	sl, r0, sl
 8008504:	45a2      	cmp	sl, r4
 8008506:	d908      	bls.n	800851a <__udivmoddi4+0x1da>
 8008508:	eb1e 0404 	adds.w	r4, lr, r4
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008510:	d26b      	bcs.n	80085ea <__udivmoddi4+0x2aa>
 8008512:	45a2      	cmp	sl, r4
 8008514:	d969      	bls.n	80085ea <__udivmoddi4+0x2aa>
 8008516:	3802      	subs	r0, #2
 8008518:	4474      	add	r4, lr
 800851a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800851e:	fba0 8902 	umull	r8, r9, r0, r2
 8008522:	eba4 040a 	sub.w	r4, r4, sl
 8008526:	454c      	cmp	r4, r9
 8008528:	46c2      	mov	sl, r8
 800852a:	464b      	mov	r3, r9
 800852c:	d354      	bcc.n	80085d8 <__udivmoddi4+0x298>
 800852e:	d051      	beq.n	80085d4 <__udivmoddi4+0x294>
 8008530:	2e00      	cmp	r6, #0
 8008532:	d069      	beq.n	8008608 <__udivmoddi4+0x2c8>
 8008534:	ebb1 050a 	subs.w	r5, r1, sl
 8008538:	eb64 0403 	sbc.w	r4, r4, r3
 800853c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008540:	40fd      	lsrs	r5, r7
 8008542:	40fc      	lsrs	r4, r7
 8008544:	ea4c 0505 	orr.w	r5, ip, r5
 8008548:	e9c6 5400 	strd	r5, r4, [r6]
 800854c:	2700      	movs	r7, #0
 800854e:	e747      	b.n	80083e0 <__udivmoddi4+0xa0>
 8008550:	f1c2 0320 	rsb	r3, r2, #32
 8008554:	fa20 f703 	lsr.w	r7, r0, r3
 8008558:	4095      	lsls	r5, r2
 800855a:	fa01 f002 	lsl.w	r0, r1, r2
 800855e:	fa21 f303 	lsr.w	r3, r1, r3
 8008562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008566:	4338      	orrs	r0, r7
 8008568:	0c01      	lsrs	r1, r0, #16
 800856a:	fbb3 f7fe 	udiv	r7, r3, lr
 800856e:	fa1f f885 	uxth.w	r8, r5
 8008572:	fb0e 3317 	mls	r3, lr, r7, r3
 8008576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800857a:	fb07 f308 	mul.w	r3, r7, r8
 800857e:	428b      	cmp	r3, r1
 8008580:	fa04 f402 	lsl.w	r4, r4, r2
 8008584:	d907      	bls.n	8008596 <__udivmoddi4+0x256>
 8008586:	1869      	adds	r1, r5, r1
 8008588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800858c:	d22f      	bcs.n	80085ee <__udivmoddi4+0x2ae>
 800858e:	428b      	cmp	r3, r1
 8008590:	d92d      	bls.n	80085ee <__udivmoddi4+0x2ae>
 8008592:	3f02      	subs	r7, #2
 8008594:	4429      	add	r1, r5
 8008596:	1acb      	subs	r3, r1, r3
 8008598:	b281      	uxth	r1, r0
 800859a:	fbb3 f0fe 	udiv	r0, r3, lr
 800859e:	fb0e 3310 	mls	r3, lr, r0, r3
 80085a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80085a6:	fb00 f308 	mul.w	r3, r0, r8
 80085aa:	428b      	cmp	r3, r1
 80085ac:	d907      	bls.n	80085be <__udivmoddi4+0x27e>
 80085ae:	1869      	adds	r1, r5, r1
 80085b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80085b4:	d217      	bcs.n	80085e6 <__udivmoddi4+0x2a6>
 80085b6:	428b      	cmp	r3, r1
 80085b8:	d915      	bls.n	80085e6 <__udivmoddi4+0x2a6>
 80085ba:	3802      	subs	r0, #2
 80085bc:	4429      	add	r1, r5
 80085be:	1ac9      	subs	r1, r1, r3
 80085c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80085c4:	e73b      	b.n	800843e <__udivmoddi4+0xfe>
 80085c6:	4637      	mov	r7, r6
 80085c8:	4630      	mov	r0, r6
 80085ca:	e709      	b.n	80083e0 <__udivmoddi4+0xa0>
 80085cc:	4607      	mov	r7, r0
 80085ce:	e6e7      	b.n	80083a0 <__udivmoddi4+0x60>
 80085d0:	4618      	mov	r0, r3
 80085d2:	e6fb      	b.n	80083cc <__udivmoddi4+0x8c>
 80085d4:	4541      	cmp	r1, r8
 80085d6:	d2ab      	bcs.n	8008530 <__udivmoddi4+0x1f0>
 80085d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80085dc:	eb69 020e 	sbc.w	r2, r9, lr
 80085e0:	3801      	subs	r0, #1
 80085e2:	4613      	mov	r3, r2
 80085e4:	e7a4      	b.n	8008530 <__udivmoddi4+0x1f0>
 80085e6:	4660      	mov	r0, ip
 80085e8:	e7e9      	b.n	80085be <__udivmoddi4+0x27e>
 80085ea:	4618      	mov	r0, r3
 80085ec:	e795      	b.n	800851a <__udivmoddi4+0x1da>
 80085ee:	4667      	mov	r7, ip
 80085f0:	e7d1      	b.n	8008596 <__udivmoddi4+0x256>
 80085f2:	4681      	mov	r9, r0
 80085f4:	e77c      	b.n	80084f0 <__udivmoddi4+0x1b0>
 80085f6:	3802      	subs	r0, #2
 80085f8:	442c      	add	r4, r5
 80085fa:	e747      	b.n	800848c <__udivmoddi4+0x14c>
 80085fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8008600:	442b      	add	r3, r5
 8008602:	e72f      	b.n	8008464 <__udivmoddi4+0x124>
 8008604:	4638      	mov	r0, r7
 8008606:	e708      	b.n	800841a <__udivmoddi4+0xda>
 8008608:	4637      	mov	r7, r6
 800860a:	e6e9      	b.n	80083e0 <__udivmoddi4+0xa0>

0800860c <__aeabi_idiv0>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008614:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008618:	4b05      	ldr	r3, [pc, #20]	; (8008630 <__NVIC_SystemReset+0x20>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008620:	4903      	ldr	r1, [pc, #12]	; (8008630 <__NVIC_SystemReset+0x20>)
 8008622:	4b04      	ldr	r3, [pc, #16]	; (8008634 <__NVIC_SystemReset+0x24>)
 8008624:	4313      	orrs	r3, r2
 8008626:	60cb      	str	r3, [r1, #12]
 8008628:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800862c:	bf00      	nop
 800862e:	e7fd      	b.n	800862c <__NVIC_SystemReset+0x1c>
 8008630:	e000ed00 	.word	0xe000ed00
 8008634:	05fa0004 	.word	0x05fa0004

08008638 <BootActivate>:
** \brief     Bootloader activation function.
** \return    none.
**
****************************************************************************************/
void BootActivate(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* perform software reset to activate the bootoader again */
  NVIC_SystemReset();
 800863c:	f7ff ffe8 	bl	8008610 <__NVIC_SystemReset>

08008640 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4a07      	ldr	r2, [pc, #28]	; (800866c <vApplicationGetIdleTaskMemory+0x2c>)
 8008650:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	4a06      	ldr	r2, [pc, #24]	; (8008670 <vApplicationGetIdleTaskMemory+0x30>)
 8008656:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2280      	movs	r2, #128	; 0x80
 800865c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800865e:	bf00      	nop
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	200000dc 	.word	0x200000dc
 8008670:	20000130 	.word	0x20000130

08008674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008674:	b5b0      	push	{r4, r5, r7, lr}
 8008676:	b08a      	sub	sp, #40	; 0x28
 8008678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VectorBase_Config();
 800867a:	f000 f9e3 	bl	8008a44 <VectorBase_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800867e:	f000 fca2 	bl	8008fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008682:	f000 f849 	bl	8008718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008686:	f000 f93b 	bl	8008900 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800868a:	f000 f8db 	bl	8008844 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800868e:	f000 f909 	bl	80088a4 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8008692:	4b1e      	ldr	r3, [pc, #120]	; (800870c <main+0x98>)
 8008694:	1d3c      	adds	r4, r7, #4
 8008696:	461d      	mov	r5, r3
 8008698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800869a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800869c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80086a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80086a4:	1d3b      	adds	r3, r7, #4
 80086a6:	2100      	movs	r1, #0
 80086a8:	4618      	mov	r0, r3
 80086aa:	f005 f8b8 	bl	800d81e <osThreadCreate>
 80086ae:	4602      	mov	r2, r0
 80086b0:	4b17      	ldr	r3, [pc, #92]	; (8008710 <main+0x9c>)
 80086b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80086b4:	f005 f89c 	bl	800d7f0 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i= 0; i <10 ; i++){
 80086b8:	2300      	movs	r3, #0
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
 80086bc:	e00b      	b.n	80086d6 <main+0x62>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 80086be:	f244 0181 	movw	r1, #16513	; 0x4081
 80086c2:	4814      	ldr	r0, [pc, #80]	; (8008714 <main+0xa0>)
 80086c4:	f002 f959 	bl	800a97a <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80086c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086cc:	f000 fcd8 	bl	8009080 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	3301      	adds	r3, #1
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	2b09      	cmp	r3, #9
 80086da:	ddf0      	ble.n	80086be <main+0x4a>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 80086dc:	2300      	movs	r3, #0
 80086de:	623b      	str	r3, [r7, #32]
 80086e0:	e00a      	b.n	80086f8 <main+0x84>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 80086e2:	f244 0181 	movw	r1, #16513	; 0x4081
 80086e6:	480b      	ldr	r0, [pc, #44]	; (8008714 <main+0xa0>)
 80086e8:	f002 f947 	bl	800a97a <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 80086ec:	2032      	movs	r0, #50	; 0x32
 80086ee:	f000 fcc7 	bl	8009080 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	3301      	adds	r3, #1
 80086f6:	623b      	str	r3, [r7, #32]
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	2b09      	cmp	r3, #9
 80086fc:	ddf1      	ble.n	80086e2 <main+0x6e>
	  }
      SharedParamsWriteByIndex(0, 1);
 80086fe:	2101      	movs	r1, #1
 8008700:	2000      	movs	r0, #0
 8008702:	f000 f9e7 	bl	8008ad4 <SharedParamsWriteByIndex>
      /* connection request received so start the bootloader */
      BootActivate();
 8008706:	f7ff ff97 	bl	8008638 <BootActivate>
	  for(int i= 0; i <10 ; i++){
 800870a:	e7d5      	b.n	80086b8 <main+0x44>
 800870c:	0801d038 	.word	0x0801d038
 8008710:	20004660 	.word	0x20004660
 8008714:	40020400 	.word	0x40020400

08008718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b0b8      	sub	sp, #224	; 0xe0
 800871c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800871e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008722:	2234      	movs	r2, #52	; 0x34
 8008724:	2100      	movs	r1, #0
 8008726:	4618      	mov	r0, r3
 8008728:	f013 fd2c 	bl	801c184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800872c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	605a      	str	r2, [r3, #4]
 8008736:	609a      	str	r2, [r3, #8]
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800873c:	f107 0308 	add.w	r3, r7, #8
 8008740:	2290      	movs	r2, #144	; 0x90
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f013 fd1d 	bl	801c184 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800874a:	f002 fa79 	bl	800ac40 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800874e:	4b3a      	ldr	r3, [pc, #232]	; (8008838 <SystemClock_Config+0x120>)
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	4a39      	ldr	r2, [pc, #228]	; (8008838 <SystemClock_Config+0x120>)
 8008754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008758:	6413      	str	r3, [r2, #64]	; 0x40
 800875a:	4b37      	ldr	r3, [pc, #220]	; (8008838 <SystemClock_Config+0x120>)
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008762:	607b      	str	r3, [r7, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008766:	4b35      	ldr	r3, [pc, #212]	; (800883c <SystemClock_Config+0x124>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800876e:	4a33      	ldr	r2, [pc, #204]	; (800883c <SystemClock_Config+0x124>)
 8008770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	4b31      	ldr	r3, [pc, #196]	; (800883c <SystemClock_Config+0x124>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008782:	2301      	movs	r3, #1
 8008784:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008788:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800878c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008790:	2302      	movs	r3, #2
 8008792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800879a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800879e:	2304      	movs	r3, #4
 80087a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80087a4:	2360      	movs	r3, #96	; 0x60
 80087a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80087aa:	2302      	movs	r3, #2
 80087ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80087b0:	2304      	movs	r3, #4
 80087b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80087b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80087ba:	4618      	mov	r0, r3
 80087bc:	f002 faa0 	bl	800ad00 <HAL_RCC_OscConfig>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80087c6:	f000 f97d 	bl	8008ac4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80087ca:	f002 fa49 	bl	800ac60 <HAL_PWREx_EnableOverDrive>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80087d4:	f000 f976 	bl	8008ac4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80087d8:	230f      	movs	r3, #15
 80087da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80087de:	2302      	movs	r3, #2
 80087e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80087ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80087f2:	2300      	movs	r3, #0
 80087f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80087f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80087fc:	2103      	movs	r1, #3
 80087fe:	4618      	mov	r0, r3
 8008800:	f002 fd2c 	bl	800b25c <HAL_RCC_ClockConfig>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800880a:	f000 f95b 	bl	8008ac4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800880e:	4b0c      	ldr	r3, [pc, #48]	; (8008840 <SystemClock_Config+0x128>)
 8008810:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008812:	2300      	movs	r3, #0
 8008814:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008816:	2300      	movs	r3, #0
 8008818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800881c:	f107 0308 	add.w	r3, r7, #8
 8008820:	4618      	mov	r0, r3
 8008822:	f002 ff13 	bl	800b64c <HAL_RCCEx_PeriphCLKConfig>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800882c:	f000 f94a 	bl	8008ac4 <Error_Handler>
  }
}
 8008830:	bf00      	nop
 8008832:	37e0      	adds	r7, #224	; 0xe0
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40023800 	.word	0x40023800
 800883c:	40007000 	.word	0x40007000
 8008840:	00200100 	.word	0x00200100

08008844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008848:	4b14      	ldr	r3, [pc, #80]	; (800889c <MX_USART3_UART_Init+0x58>)
 800884a:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <MX_USART3_UART_Init+0x5c>)
 800884c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <MX_USART3_UART_Init+0x58>)
 8008850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008856:	4b11      	ldr	r3, [pc, #68]	; (800889c <MX_USART3_UART_Init+0x58>)
 8008858:	2200      	movs	r2, #0
 800885a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800885c:	4b0f      	ldr	r3, [pc, #60]	; (800889c <MX_USART3_UART_Init+0x58>)
 800885e:	2200      	movs	r2, #0
 8008860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008862:	4b0e      	ldr	r3, [pc, #56]	; (800889c <MX_USART3_UART_Init+0x58>)
 8008864:	2200      	movs	r2, #0
 8008866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008868:	4b0c      	ldr	r3, [pc, #48]	; (800889c <MX_USART3_UART_Init+0x58>)
 800886a:	220c      	movs	r2, #12
 800886c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800886e:	4b0b      	ldr	r3, [pc, #44]	; (800889c <MX_USART3_UART_Init+0x58>)
 8008870:	2200      	movs	r2, #0
 8008872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008874:	4b09      	ldr	r3, [pc, #36]	; (800889c <MX_USART3_UART_Init+0x58>)
 8008876:	2200      	movs	r2, #0
 8008878:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800887a:	4b08      	ldr	r3, [pc, #32]	; (800889c <MX_USART3_UART_Init+0x58>)
 800887c:	2200      	movs	r2, #0
 800887e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008880:	4b06      	ldr	r3, [pc, #24]	; (800889c <MX_USART3_UART_Init+0x58>)
 8008882:	2200      	movs	r2, #0
 8008884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008886:	4805      	ldr	r0, [pc, #20]	; (800889c <MX_USART3_UART_Init+0x58>)
 8008888:	f003 fb06 	bl	800be98 <HAL_UART_Init>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8008892:	f000 f917 	bl	8008ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008896:	bf00      	nop
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20004664 	.word	0x20004664
 80088a0:	40004800 	.word	0x40004800

080088a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80088b0:	4b12      	ldr	r3, [pc, #72]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088b2:	2206      	movs	r2, #6
 80088b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088b6:	4b11      	ldr	r3, [pc, #68]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088b8:	2202      	movs	r2, #2
 80088ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088be:	2200      	movs	r2, #0
 80088c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088c2:	4b0e      	ldr	r3, [pc, #56]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088c4:	2202      	movs	r2, #2
 80088c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088ca:	2201      	movs	r2, #1
 80088cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088ce:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088d4:	4b09      	ldr	r3, [pc, #36]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80088da:	4b08      	ldr	r3, [pc, #32]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088dc:	2201      	movs	r2, #1
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088e0:	4b06      	ldr	r3, [pc, #24]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088e6:	4805      	ldr	r0, [pc, #20]	; (80088fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088e8:	f002 f861 	bl	800a9ae <HAL_PCD_Init>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80088f2:	f000 f8e7 	bl	8008ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80088f6:	bf00      	nop
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200046e4 	.word	0x200046e4

08008900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08c      	sub	sp, #48	; 0x30
 8008904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008906:	f107 031c 	add.w	r3, r7, #28
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	605a      	str	r2, [r3, #4]
 8008910:	609a      	str	r2, [r3, #8]
 8008912:	60da      	str	r2, [r3, #12]
 8008914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008916:	4b46      	ldr	r3, [pc, #280]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	4a45      	ldr	r2, [pc, #276]	; (8008a30 <MX_GPIO_Init+0x130>)
 800891c:	f043 0304 	orr.w	r3, r3, #4
 8008920:	6313      	str	r3, [r2, #48]	; 0x30
 8008922:	4b43      	ldr	r3, [pc, #268]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	61bb      	str	r3, [r7, #24]
 800892c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800892e:	4b40      	ldr	r3, [pc, #256]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	4a3f      	ldr	r2, [pc, #252]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008938:	6313      	str	r3, [r2, #48]	; 0x30
 800893a:	4b3d      	ldr	r3, [pc, #244]	; (8008a30 <MX_GPIO_Init+0x130>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008946:	4b3a      	ldr	r3, [pc, #232]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	4a39      	ldr	r2, [pc, #228]	; (8008a30 <MX_GPIO_Init+0x130>)
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	6313      	str	r3, [r2, #48]	; 0x30
 8008952:	4b37      	ldr	r3, [pc, #220]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800895e:	4b34      	ldr	r3, [pc, #208]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	4a33      	ldr	r2, [pc, #204]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008964:	f043 0302 	orr.w	r3, r3, #2
 8008968:	6313      	str	r3, [r2, #48]	; 0x30
 800896a:	4b31      	ldr	r3, [pc, #196]	; (8008a30 <MX_GPIO_Init+0x130>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008976:	4b2e      	ldr	r3, [pc, #184]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	4a2d      	ldr	r2, [pc, #180]	; (8008a30 <MX_GPIO_Init+0x130>)
 800897c:	f043 0308 	orr.w	r3, r3, #8
 8008980:	6313      	str	r3, [r2, #48]	; 0x30
 8008982:	4b2b      	ldr	r3, [pc, #172]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	60bb      	str	r3, [r7, #8]
 800898c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800898e:	4b28      	ldr	r3, [pc, #160]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	4a27      	ldr	r2, [pc, #156]	; (8008a30 <MX_GPIO_Init+0x130>)
 8008994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008998:	6313      	str	r3, [r2, #48]	; 0x30
 800899a:	4b25      	ldr	r3, [pc, #148]	; (8008a30 <MX_GPIO_Init+0x130>)
 800899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a2:	607b      	str	r3, [r7, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80089a6:	2200      	movs	r2, #0
 80089a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80089ac:	4821      	ldr	r0, [pc, #132]	; (8008a34 <MX_GPIO_Init+0x134>)
 80089ae:	f001 ffcb 	bl	800a948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80089b2:	2200      	movs	r2, #0
 80089b4:	2140      	movs	r1, #64	; 0x40
 80089b6:	4820      	ldr	r0, [pc, #128]	; (8008a38 <MX_GPIO_Init+0x138>)
 80089b8:	f001 ffc6 	bl	800a948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80089bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80089c2:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <MX_GPIO_Init+0x13c>)
 80089c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80089ca:	f107 031c 	add.w	r3, r7, #28
 80089ce:	4619      	mov	r1, r3
 80089d0:	481b      	ldr	r0, [pc, #108]	; (8008a40 <MX_GPIO_Init+0x140>)
 80089d2:	f001 fe0f 	bl	800a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80089d6:	f244 0381 	movw	r3, #16513	; 0x4081
 80089da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089dc:	2301      	movs	r3, #1
 80089de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089e0:	2300      	movs	r3, #0
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089e4:	2300      	movs	r3, #0
 80089e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089e8:	f107 031c 	add.w	r3, r7, #28
 80089ec:	4619      	mov	r1, r3
 80089ee:	4811      	ldr	r0, [pc, #68]	; (8008a34 <MX_GPIO_Init+0x134>)
 80089f0:	f001 fe00 	bl	800a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089f8:	2301      	movs	r3, #1
 80089fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a00:	2300      	movs	r3, #0
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008a04:	f107 031c 	add.w	r3, r7, #28
 8008a08:	4619      	mov	r1, r3
 8008a0a:	480b      	ldr	r0, [pc, #44]	; (8008a38 <MX_GPIO_Init+0x138>)
 8008a0c:	f001 fdf2 	bl	800a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8008a10:	2380      	movs	r3, #128	; 0x80
 8008a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a14:	2300      	movs	r3, #0
 8008a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008a1c:	f107 031c 	add.w	r3, r7, #28
 8008a20:	4619      	mov	r1, r3
 8008a22:	4805      	ldr	r0, [pc, #20]	; (8008a38 <MX_GPIO_Init+0x138>)
 8008a24:	f001 fde6 	bl	800a5f4 <HAL_GPIO_Init>

}
 8008a28:	bf00      	nop
 8008a2a:	3730      	adds	r7, #48	; 0x30
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40023800 	.word	0x40023800
 8008a34:	40020400 	.word	0x40020400
 8008a38:	40021800 	.word	0x40021800
 8008a3c:	10110000 	.word	0x10110000
 8008a40:	40020800 	.word	0x40020800

08008a44 <VectorBase_Config>:

/* USER CODE BEGIN 4 */
static void VectorBase_Config(void)
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 8008a48:	4b03      	ldr	r3, [pc, #12]	; (8008a58 <VectorBase_Config+0x14>)
 8008a4a:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <VectorBase_Config+0x18>)
 8008a4c:	609a      	str	r2, [r3, #8]
}
 8008a4e:	bf00      	nop
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	e000ed00 	.word	0xe000ed00
 8008a5c:	08008000 	.word	0x08008000

08008a60 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8008a68:	f004 f920 	bl	800ccac <MX_LWIP_Init>
  httpd_init();
 8008a6c:	f008 fd56 	bl	801151c <httpd_init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  for(int i= 0; i <30; i++){
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e00a      	b.n	8008a8c <StartDefaultTask+0x2c>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8008a76:	2101      	movs	r1, #1
 8008a78:	4811      	ldr	r0, [pc, #68]	; (8008ac0 <StartDefaultTask+0x60>)
 8008a7a:	f001 ff7e 	bl	800a97a <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8008a7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a82:	f000 fafd 	bl	8009080 <HAL_Delay>
	  for(int i= 0; i <30; i++){
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b1d      	cmp	r3, #29
 8008a90:	ddf1      	ble.n	8008a76 <StartDefaultTask+0x16>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
 8008a96:	e009      	b.n	8008aac <StartDefaultTask+0x4c>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8008a98:	2101      	movs	r1, #1
 8008a9a:	4809      	ldr	r0, [pc, #36]	; (8008ac0 <StartDefaultTask+0x60>)
 8008a9c:	f001 ff6d 	bl	800a97a <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8008aa0:	2032      	movs	r0, #50	; 0x32
 8008aa2:	f000 faed 	bl	8009080 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	60bb      	str	r3, [r7, #8]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b09      	cmp	r3, #9
 8008ab0:	ddf2      	ble.n	8008a98 <StartDefaultTask+0x38>
	  }
      SharedParamsWriteByIndex(0, 1);
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	f000 f80d 	bl	8008ad4 <SharedParamsWriteByIndex>
      /* connection request received so start the bootloader */
      BootActivate();
 8008aba:	f7ff fdbd 	bl	8008638 <BootActivate>
	  for(int i= 0; i <30; i++){
 8008abe:	e7d7      	b.n	8008a70 <StartDefaultTask+0x10>
 8008ac0:	40020400 	.word	0x40020400

08008ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ac8:	bf00      	nop
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
	...

08008ad4 <SharedParamsWriteByIndex>:
** \param     value Value to write.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsWriteByIndex(uint32_t idx, uint8_t value)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	70fb      	strb	r3, [r7, #3]
  bool result = false;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 8008ae4:	f000 f818 	bl	8008b18 <SharedParamsValidateBuffer>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00c      	beq.n	8008b08 <SharedParamsWriteByIndex+0x34>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b37      	cmp	r3, #55	; 0x37
 8008af2:	d809      	bhi.n	8008b08 <SharedParamsWriteByIndex+0x34>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN) )
  {
    /* Write the value. */
    sharedParamsBuffer.data[idx] = value;
 8008af4:	4a07      	ldr	r2, [pc, #28]	; (8008b14 <SharedParamsWriteByIndex+0x40>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4413      	add	r3, r2
 8008afa:	3304      	adds	r3, #4
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	701a      	strb	r2, [r3, #0]
    /* Update the checksum since the contents were just changed. */
    SharedParamsWriteChecksum();
 8008b00:	f000 f824 	bl	8008b4c <SharedParamsWriteChecksum>
    /* Update the result. */
    result = true;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsWriteByIndex ***/
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20000000 	.word	0x20000000

08008b18 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
  bool result = false;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8008b22:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <SharedParamsValidateBuffer+0x2c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <SharedParamsValidateBuffer+0x30>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d106      	bne.n	8008b3a <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 8008b2c:	f000 f81a 	bl	8008b64 <SharedParamsVerifyChecksum>
 8008b30:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 8008b36:	2301      	movs	r3, #1
 8008b38:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20000000 	.word	0x20000000
 8008b48:	ce42e7a2 	.word	0xce42e7a2

08008b4c <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8008b50:	f000 f81e 	bl	8008b90 <SharedParamsCalculateChecksum>
 8008b54:	4603      	mov	r3, r0
 8008b56:	461a      	mov	r2, r3
 8008b58:	4b01      	ldr	r3, [pc, #4]	; (8008b60 <SharedParamsWriteChecksum+0x14>)
 8008b5a:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8008b5c:	bf00      	nop
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20000000 	.word	0x20000000

08008b64 <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
  bool result = false;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 8008b6e:	f000 f80f 	bl	8008b90 <SharedParamsCalculateChecksum>
 8008b72:	4603      	mov	r3, r0
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <SharedParamsVerifyChecksum+0x28>)
 8008b78:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d101      	bne.n	8008b82 <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8008b82:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20000000 	.word	0x20000000

08008b90 <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8008b9a:	4b1f      	ldr	r3, [pc, #124]	; (8008c18 <SharedParamsCalculateChecksum+0x88>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8008ba8:	4b1b      	ldr	r3, [pc, #108]	; (8008c18 <SharedParamsCalculateChecksum+0x88>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	0a1b      	lsrs	r3, r3, #8
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8008bb8:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <SharedParamsCalculateChecksum+0x88>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	0c1b      	lsrs	r3, r3, #16
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	88fb      	ldrh	r3, [r7, #6]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8008bc8:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <SharedParamsCalculateChecksum+0x88>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	0e1b      	lsrs	r3, r3, #24
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	88fb      	ldrh	r3, [r7, #6]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008bd8:	2300      	movs	r3, #0
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	e00b      	b.n	8008bf6 <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 8008bde:	4a0e      	ldr	r2, [pc, #56]	; (8008c18 <SharedParamsCalculateChecksum+0x88>)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	4413      	add	r3, r2
 8008be4:	3304      	adds	r3, #4
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	4413      	add	r3, r2
 8008bee:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	603b      	str	r3, [r7, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2b37      	cmp	r3, #55	; 0x37
 8008bfa:	d9f0      	bls.n	8008bde <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	3301      	adds	r3, #1
 8008c06:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 8008c08:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000000 	.word	0x20000000

08008c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c22:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <HAL_MspInit+0x4c>)
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	4a10      	ldr	r2, [pc, #64]	; (8008c68 <HAL_MspInit+0x4c>)
 8008c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c2e:	4b0e      	ldr	r3, [pc, #56]	; (8008c68 <HAL_MspInit+0x4c>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c36:	607b      	str	r3, [r7, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <HAL_MspInit+0x4c>)
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3e:	4a0a      	ldr	r2, [pc, #40]	; (8008c68 <HAL_MspInit+0x4c>)
 8008c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c44:	6453      	str	r3, [r2, #68]	; 0x44
 8008c46:	4b08      	ldr	r3, [pc, #32]	; (8008c68 <HAL_MspInit+0x4c>)
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008c52:	2200      	movs	r2, #0
 8008c54:	210f      	movs	r1, #15
 8008c56:	f06f 0001 	mvn.w	r0, #1
 8008c5a:	f000 fb0e 	bl	800927a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	40023800 	.word	0x40023800

08008c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08a      	sub	sp, #40	; 0x28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c74:	f107 0314 	add.w	r3, r7, #20
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]
 8008c7c:	605a      	str	r2, [r3, #4]
 8008c7e:	609a      	str	r2, [r3, #8]
 8008c80:	60da      	str	r2, [r3, #12]
 8008c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <HAL_UART_MspInit+0x7c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d128      	bne.n	8008ce0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008c8e:	4b17      	ldr	r3, [pc, #92]	; (8008cec <HAL_UART_MspInit+0x80>)
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	4a16      	ldr	r2, [pc, #88]	; (8008cec <HAL_UART_MspInit+0x80>)
 8008c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c98:	6413      	str	r3, [r2, #64]	; 0x40
 8008c9a:	4b14      	ldr	r3, [pc, #80]	; (8008cec <HAL_UART_MspInit+0x80>)
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ca6:	4b11      	ldr	r3, [pc, #68]	; (8008cec <HAL_UART_MspInit+0x80>)
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008caa:	4a10      	ldr	r2, [pc, #64]	; (8008cec <HAL_UART_MspInit+0x80>)
 8008cac:	f043 0308 	orr.w	r3, r3, #8
 8008cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8008cb2:	4b0e      	ldr	r3, [pc, #56]	; (8008cec <HAL_UART_MspInit+0x80>)
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8008cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008cd0:	2307      	movs	r3, #7
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008cd4:	f107 0314 	add.w	r3, r7, #20
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4805      	ldr	r0, [pc, #20]	; (8008cf0 <HAL_UART_MspInit+0x84>)
 8008cdc:	f001 fc8a 	bl	800a5f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008ce0:	bf00      	nop
 8008ce2:	3728      	adds	r7, #40	; 0x28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40004800 	.word	0x40004800
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	40020c00 	.word	0x40020c00

08008cf4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08a      	sub	sp, #40	; 0x28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cfc:	f107 0314 	add.w	r3, r7, #20
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	609a      	str	r2, [r3, #8]
 8008d08:	60da      	str	r2, [r3, #12]
 8008d0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d14:	d141      	bne.n	8008d9a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d16:	4b23      	ldr	r3, [pc, #140]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	4a22      	ldr	r2, [pc, #136]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d1c:	f043 0301 	orr.w	r3, r3, #1
 8008d20:	6313      	str	r3, [r2, #48]	; 0x30
 8008d22:	4b20      	ldr	r3, [pc, #128]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	613b      	str	r3, [r7, #16]
 8008d2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008d2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d34:	2302      	movs	r3, #2
 8008d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d40:	230a      	movs	r3, #10
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d44:	f107 0314 	add.w	r3, r7, #20
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4817      	ldr	r0, [pc, #92]	; (8008da8 <HAL_PCD_MspInit+0xb4>)
 8008d4c:	f001 fc52 	bl	800a5f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d56:	2300      	movs	r3, #0
 8008d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	4619      	mov	r1, r3
 8008d64:	4810      	ldr	r0, [pc, #64]	; (8008da8 <HAL_PCD_MspInit+0xb4>)
 8008d66:	f001 fc45 	bl	800a5f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d6a:	4b0e      	ldr	r3, [pc, #56]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6e:	4a0d      	ldr	r2, [pc, #52]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d74:	6353      	str	r3, [r2, #52]	; 0x34
 8008d76:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d86:	4a07      	ldr	r2, [pc, #28]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d8e:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <HAL_PCD_MspInit+0xb0>)
 8008d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8008d9a:	bf00      	nop
 8008d9c:	3728      	adds	r7, #40	; 0x28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40023800 	.word	0x40023800
 8008da8:	40020000 	.word	0x40020000

08008dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008db0:	bf00      	nop
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008dbe:	e7fe      	b.n	8008dbe <HardFault_Handler+0x4>

08008dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008dc4:	e7fe      	b.n	8008dc4 <MemManage_Handler+0x4>

08008dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008dca:	e7fe      	b.n	8008dca <BusFault_Handler+0x4>

08008dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008dd0:	e7fe      	b.n	8008dd0 <UsageFault_Handler+0x4>

08008dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008dd6:	bf00      	nop
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008de4:	f000 f92c 	bl	8009040 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008de8:	f006 fdb8 	bl	800f95c <xTaskGetSchedulerState>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d001      	beq.n	8008df6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8008df2:	f007 f989 	bl	8010108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008df6:	bf00      	nop
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8008e00:	4802      	ldr	r0, [pc, #8]	; (8008e0c <ETH_IRQHandler+0x10>)
 8008e02:	f000 fe55 	bl	8009ab0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8008e06:	bf00      	nop
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20006410 	.word	0x20006410

08008e10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]
 8008e20:	e00a      	b.n	8008e38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008e22:	f3af 8000 	nop.w
 8008e26:	4601      	mov	r1, r0
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	60ba      	str	r2, [r7, #8]
 8008e2e:	b2ca      	uxtb	r2, r1
 8008e30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	3301      	adds	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	dbf0      	blt.n	8008e22 <_read+0x12>
	}

return len;
 8008e40:	687b      	ldr	r3, [r7, #4]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	e009      	b.n	8008e70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	60ba      	str	r2, [r7, #8]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	dbf1      	blt.n	8008e5c <_write+0x12>
	}
	return len;
 8008e78:	687b      	ldr	r3, [r7, #4]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <_close>:

int _close(int file)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
	return -1;
 8008e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008eaa:	605a      	str	r2, [r3, #4]
	return 0;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <_isatty>:

int _isatty(int file)
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b083      	sub	sp, #12
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
	return 1;
 8008ec2:	2301      	movs	r3, #1
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
	return 0;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008ef4:	4b11      	ldr	r3, [pc, #68]	; (8008f3c <_sbrk+0x50>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <_sbrk+0x16>
		heap_end = &end;
 8008efc:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <_sbrk+0x50>)
 8008efe:	4a10      	ldr	r2, [pc, #64]	; (8008f40 <_sbrk+0x54>)
 8008f00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008f02:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <_sbrk+0x50>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008f08:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <_sbrk+0x50>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4413      	add	r3, r2
 8008f10:	466a      	mov	r2, sp
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d905      	bls.n	8008f22 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8008f16:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <_sbrk+0x58>)
 8008f18:	220c      	movs	r2, #12
 8008f1a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8008f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f20:	e006      	b.n	8008f30 <_sbrk+0x44>
	}

	heap_end += incr;
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <_sbrk+0x50>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4413      	add	r3, r2
 8008f2a:	4a04      	ldr	r2, [pc, #16]	; (8008f3c <_sbrk+0x50>)
 8008f2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	20000330 	.word	0x20000330
 8008f40:	2000b364 	.word	0x2000b364
 8008f44:	2000b35c 	.word	0x2000b35c

08008f48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008f4c:	4b08      	ldr	r3, [pc, #32]	; (8008f70 <SystemInit+0x28>)
 8008f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f52:	4a07      	ldr	r2, [pc, #28]	; (8008f70 <SystemInit+0x28>)
 8008f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008f5c:	4b04      	ldr	r3, [pc, #16]	; (8008f70 <SystemInit+0x28>)
 8008f5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008f62:	609a      	str	r2, [r3, #8]
#endif
}
 8008f64:	bf00      	nop
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	e000ed00 	.word	0xe000ed00

08008f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008fac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008f78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008f7a:	e003      	b.n	8008f84 <LoopCopyDataInit>

08008f7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008f7c:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008f7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008f80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008f82:	3104      	adds	r1, #4

08008f84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008f84:	480b      	ldr	r0, [pc, #44]	; (8008fb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008f88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008f8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008f8c:	d3f6      	bcc.n	8008f7c <CopyDataInit>
  ldr  r2, =_sbss
 8008f8e:	4a0b      	ldr	r2, [pc, #44]	; (8008fbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008f90:	e002      	b.n	8008f98 <LoopFillZerobss>

08008f92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008f92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008f94:	f842 3b04 	str.w	r3, [r2], #4

08008f98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008f98:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008f9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008f9c:	d3f9      	bcc.n	8008f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008f9e:	f7ff ffd3 	bl	8008f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008fa2:	f013 f8b1 	bl	801c108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008fa6:	f7ff fb65 	bl	8008674 <main>
  bx  lr    
 8008faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008fac:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008fb0:	08030acc 	.word	0x08030acc
  ldr  r0, =_sdata
 8008fb4:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 8008fb8:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8008fbc:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8008fc0:	2000b364 	.word	0x2000b364

08008fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008fc4:	e7fe      	b.n	8008fc4 <ADC_IRQHandler>

08008fc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fca:	2003      	movs	r0, #3
 8008fcc:	f000 f94a 	bl	8009264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008fd0:	200f      	movs	r0, #15
 8008fd2:	f000 f805 	bl	8008fe0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008fd6:	f7ff fe21 	bl	8008c1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008fe8:	4b12      	ldr	r3, [pc, #72]	; (8009034 <HAL_InitTick+0x54>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	4b12      	ldr	r3, [pc, #72]	; (8009038 <HAL_InitTick+0x58>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 f965 	bl	80092ce <HAL_SYSTICK_Config>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e00e      	b.n	800902c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b0f      	cmp	r3, #15
 8009012:	d80a      	bhi.n	800902a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009014:	2200      	movs	r2, #0
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800901c:	f000 f92d 	bl	800927a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009020:	4a06      	ldr	r2, [pc, #24]	; (800903c <HAL_InitTick+0x5c>)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	e000      	b.n	800902c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20000040 	.word	0x20000040
 8009038:	20000048 	.word	0x20000048
 800903c:	20000044 	.word	0x20000044

08009040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009044:	4b06      	ldr	r3, [pc, #24]	; (8009060 <HAL_IncTick+0x20>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	461a      	mov	r2, r3
 800904a:	4b06      	ldr	r3, [pc, #24]	; (8009064 <HAL_IncTick+0x24>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4413      	add	r3, r2
 8009050:	4a04      	ldr	r2, [pc, #16]	; (8009064 <HAL_IncTick+0x24>)
 8009052:	6013      	str	r3, [r2, #0]
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20000048 	.word	0x20000048
 8009064:	20004ae8 	.word	0x20004ae8

08009068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  return uwTick;
 800906c:	4b03      	ldr	r3, [pc, #12]	; (800907c <HAL_GetTick+0x14>)
 800906e:	681b      	ldr	r3, [r3, #0]
}
 8009070:	4618      	mov	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	20004ae8 	.word	0x20004ae8

08009080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009088:	f7ff ffee 	bl	8009068 <HAL_GetTick>
 800908c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009098:	d005      	beq.n	80090a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800909a:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <HAL_Delay+0x40>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090a6:	bf00      	nop
 80090a8:	f7ff ffde 	bl	8009068 <HAL_GetTick>
 80090ac:	4602      	mov	r2, r0
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d8f7      	bhi.n	80090a8 <HAL_Delay+0x28>
  {
  }
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20000048 	.word	0x20000048

080090c4 <__NVIC_SetPriorityGrouping>:
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090d4:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <__NVIC_SetPriorityGrouping+0x40>)
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090e0:	4013      	ands	r3, r2
 80090e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80090ec:	4b06      	ldr	r3, [pc, #24]	; (8009108 <__NVIC_SetPriorityGrouping+0x44>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090f2:	4a04      	ldr	r2, [pc, #16]	; (8009104 <__NVIC_SetPriorityGrouping+0x40>)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	60d3      	str	r3, [r2, #12]
}
 80090f8:	bf00      	nop
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	e000ed00 	.word	0xe000ed00
 8009108:	05fa0000 	.word	0x05fa0000

0800910c <__NVIC_GetPriorityGrouping>:
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009110:	4b04      	ldr	r3, [pc, #16]	; (8009124 <__NVIC_GetPriorityGrouping+0x18>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	0a1b      	lsrs	r3, r3, #8
 8009116:	f003 0307 	and.w	r3, r3, #7
}
 800911a:	4618      	mov	r0, r3
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	e000ed00 	.word	0xe000ed00

08009128 <__NVIC_EnableIRQ>:
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009136:	2b00      	cmp	r3, #0
 8009138:	db0b      	blt.n	8009152 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	f003 021f 	and.w	r2, r3, #31
 8009140:	4907      	ldr	r1, [pc, #28]	; (8009160 <__NVIC_EnableIRQ+0x38>)
 8009142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	2001      	movs	r0, #1
 800914a:	fa00 f202 	lsl.w	r2, r0, r2
 800914e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	e000e100 	.word	0xe000e100

08009164 <__NVIC_SetPriority>:
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009174:	2b00      	cmp	r3, #0
 8009176:	db0a      	blt.n	800918e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	b2da      	uxtb	r2, r3
 800917c:	490c      	ldr	r1, [pc, #48]	; (80091b0 <__NVIC_SetPriority+0x4c>)
 800917e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009182:	0112      	lsls	r2, r2, #4
 8009184:	b2d2      	uxtb	r2, r2
 8009186:	440b      	add	r3, r1
 8009188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800918c:	e00a      	b.n	80091a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	b2da      	uxtb	r2, r3
 8009192:	4908      	ldr	r1, [pc, #32]	; (80091b4 <__NVIC_SetPriority+0x50>)
 8009194:	79fb      	ldrb	r3, [r7, #7]
 8009196:	f003 030f 	and.w	r3, r3, #15
 800919a:	3b04      	subs	r3, #4
 800919c:	0112      	lsls	r2, r2, #4
 800919e:	b2d2      	uxtb	r2, r2
 80091a0:	440b      	add	r3, r1
 80091a2:	761a      	strb	r2, [r3, #24]
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	e000e100 	.word	0xe000e100
 80091b4:	e000ed00 	.word	0xe000ed00

080091b8 <NVIC_EncodePriority>:
{
 80091b8:	b480      	push	{r7}
 80091ba:	b089      	sub	sp, #36	; 0x24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	f1c3 0307 	rsb	r3, r3, #7
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	bf28      	it	cs
 80091d6:	2304      	movcs	r3, #4
 80091d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	3304      	adds	r3, #4
 80091de:	2b06      	cmp	r3, #6
 80091e0:	d902      	bls.n	80091e8 <NVIC_EncodePriority+0x30>
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	3b03      	subs	r3, #3
 80091e6:	e000      	b.n	80091ea <NVIC_EncodePriority+0x32>
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	fa02 f303 	lsl.w	r3, r2, r3
 80091f6:	43da      	mvns	r2, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	401a      	ands	r2, r3
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	fa01 f303 	lsl.w	r3, r1, r3
 800920a:	43d9      	mvns	r1, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009210:	4313      	orrs	r3, r2
}
 8009212:	4618      	mov	r0, r3
 8009214:	3724      	adds	r7, #36	; 0x24
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
	...

08009220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3b01      	subs	r3, #1
 800922c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009230:	d301      	bcc.n	8009236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009232:	2301      	movs	r3, #1
 8009234:	e00f      	b.n	8009256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009236:	4a0a      	ldr	r2, [pc, #40]	; (8009260 <SysTick_Config+0x40>)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3b01      	subs	r3, #1
 800923c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800923e:	210f      	movs	r1, #15
 8009240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009244:	f7ff ff8e 	bl	8009164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009248:	4b05      	ldr	r3, [pc, #20]	; (8009260 <SysTick_Config+0x40>)
 800924a:	2200      	movs	r2, #0
 800924c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800924e:	4b04      	ldr	r3, [pc, #16]	; (8009260 <SysTick_Config+0x40>)
 8009250:	2207      	movs	r2, #7
 8009252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	e000e010 	.word	0xe000e010

08009264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff ff29 	bl	80090c4 <__NVIC_SetPriorityGrouping>
}
 8009272:	bf00      	nop
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	4603      	mov	r3, r0
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	607a      	str	r2, [r7, #4]
 8009286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009288:	2300      	movs	r3, #0
 800928a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800928c:	f7ff ff3e 	bl	800910c <__NVIC_GetPriorityGrouping>
 8009290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	68b9      	ldr	r1, [r7, #8]
 8009296:	6978      	ldr	r0, [r7, #20]
 8009298:	f7ff ff8e 	bl	80091b8 <NVIC_EncodePriority>
 800929c:	4602      	mov	r2, r0
 800929e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff ff5d 	bl	8009164 <__NVIC_SetPriority>
}
 80092aa:	bf00      	nop
 80092ac:	3718      	adds	r7, #24
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	4603      	mov	r3, r0
 80092ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80092bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff ff31 	bl	8009128 <__NVIC_EnableIRQ>
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff ffa2 	bl	8009220 <SysTick_Config>
 80092dc:	4603      	mov	r3, r0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	61fb      	str	r3, [r7, #28]
 80092f4:	2300      	movs	r3, #0
 80092f6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80092f8:	4ba9      	ldr	r3, [pc, #676]	; (80095a0 <HAL_ETH_Init+0x2b8>)
 80092fa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8009300:	2300      	movs	r3, #0
 8009302:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e183      	b.n	8009616 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f003 fe20 	bl	800cf68 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009328:	4b9e      	ldr	r3, [pc, #632]	; (80095a4 <HAL_ETH_Init+0x2bc>)
 800932a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800932c:	4a9d      	ldr	r2, [pc, #628]	; (80095a4 <HAL_ETH_Init+0x2bc>)
 800932e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009332:	6453      	str	r3, [r2, #68]	; 0x44
 8009334:	4b9b      	ldr	r3, [pc, #620]	; (80095a4 <HAL_ETH_Init+0x2bc>)
 8009336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800933c:	60bb      	str	r3, [r7, #8]
 800933e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009340:	4b99      	ldr	r3, [pc, #612]	; (80095a8 <HAL_ETH_Init+0x2c0>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	4a98      	ldr	r2, [pc, #608]	; (80095a8 <HAL_ETH_Init+0x2c0>)
 8009346:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800934a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800934c:	4b96      	ldr	r3, [pc, #600]	; (80095a8 <HAL_ETH_Init+0x2c0>)
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a1b      	ldr	r3, [r3, #32]
 8009354:	4994      	ldr	r1, [pc, #592]	; (80095a8 <HAL_ETH_Init+0x2c0>)
 8009356:	4313      	orrs	r3, r2
 8009358:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0201 	orr.w	r2, r2, #1
 800936c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009370:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009372:	f7ff fe79 	bl	8009068 <HAL_GetTick>
 8009376:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009378:	e011      	b.n	800939e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800937a:	f7ff fe75 	bl	8009068 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009388:	d909      	bls.n	800939e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2203      	movs	r2, #3
 800938e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e13b      	b.n	8009616 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e4      	bne.n	800937a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80093b8:	69fb      	ldr	r3, [r7, #28]
 80093ba:	f023 031c 	bic.w	r3, r3, #28
 80093be:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80093c0:	f002 f910 	bl	800b5e4 <HAL_RCC_GetHCLKFreq>
 80093c4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	4a78      	ldr	r2, [pc, #480]	; (80095ac <HAL_ETH_Init+0x2c4>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d908      	bls.n	80093e0 <HAL_ETH_Init+0xf8>
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	4a77      	ldr	r2, [pc, #476]	; (80095b0 <HAL_ETH_Init+0x2c8>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d804      	bhi.n	80093e0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	f043 0308 	orr.w	r3, r3, #8
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	e027      	b.n	8009430 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	4a73      	ldr	r2, [pc, #460]	; (80095b0 <HAL_ETH_Init+0x2c8>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d908      	bls.n	80093fa <HAL_ETH_Init+0x112>
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	4a72      	ldr	r2, [pc, #456]	; (80095b4 <HAL_ETH_Init+0x2cc>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d804      	bhi.n	80093fa <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f043 030c 	orr.w	r3, r3, #12
 80093f6:	61fb      	str	r3, [r7, #28]
 80093f8:	e01a      	b.n	8009430 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	4a6d      	ldr	r2, [pc, #436]	; (80095b4 <HAL_ETH_Init+0x2cc>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d903      	bls.n	800940a <HAL_ETH_Init+0x122>
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	4a6c      	ldr	r2, [pc, #432]	; (80095b8 <HAL_ETH_Init+0x2d0>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d911      	bls.n	800942e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	4a6a      	ldr	r2, [pc, #424]	; (80095b8 <HAL_ETH_Init+0x2d0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d908      	bls.n	8009424 <HAL_ETH_Init+0x13c>
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	4a69      	ldr	r2, [pc, #420]	; (80095bc <HAL_ETH_Init+0x2d4>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d804      	bhi.n	8009424 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	f043 0304 	orr.w	r3, r3, #4
 8009420:	61fb      	str	r3, [r7, #28]
 8009422:	e005      	b.n	8009430 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	f043 0310 	orr.w	r3, r3, #16
 800942a:	61fb      	str	r3, [r7, #28]
 800942c:	e000      	b.n	8009430 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800942e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69fa      	ldr	r2, [r7, #28]
 8009436:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8009438:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800943c:	2100      	movs	r1, #0
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fc19 	bl	8009c76 <HAL_ETH_WritePHYRegister>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00b      	beq.n	8009462 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800944e:	6939      	ldr	r1, [r7, #16]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fdcf 	bl	8009ff4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e0d9      	b.n	8009616 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8009462:	20ff      	movs	r0, #255	; 0xff
 8009464:	f7ff fe0c 	bl	8009080 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 80a7 	beq.w	80095c0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8009472:	f7ff fdf9 	bl	8009068 <HAL_GetTick>
 8009476:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009478:	f107 030c 	add.w	r3, r7, #12
 800947c:	461a      	mov	r2, r3
 800947e:	2101      	movs	r1, #1
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fb90 	bl	8009ba6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009486:	f7ff fdef 	bl	8009068 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	f241 3288 	movw	r2, #5000	; 0x1388
 8009494:	4293      	cmp	r3, r2
 8009496:	d90f      	bls.n	80094b8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800949c:	6939      	ldr	r1, [r7, #16]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fda8 	bl	8009ff4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e0ae      	b.n	8009616 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0da      	beq.n	8009478 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80094c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094c6:	2100      	movs	r1, #0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fbd4 	bl	8009c76 <HAL_ETH_WritePHYRegister>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80094d8:	6939      	ldr	r1, [r7, #16]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fd8a 	bl	8009ff4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80094e8:	2301      	movs	r3, #1
 80094ea:	e094      	b.n	8009616 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80094ec:	f7ff fdbc 	bl	8009068 <HAL_GetTick>
 80094f0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80094f2:	f107 030c 	add.w	r3, r7, #12
 80094f6:	461a      	mov	r2, r3
 80094f8:	2101      	movs	r1, #1
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fb53 	bl	8009ba6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8009500:	f7ff fdb2 	bl	8009068 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	f241 3288 	movw	r2, #5000	; 0x1388
 800950e:	4293      	cmp	r3, r2
 8009510:	d90f      	bls.n	8009532 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8009516:	6939      	ldr	r1, [r7, #16]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fd6b 	bl	8009ff4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e071      	b.n	8009616 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0da      	beq.n	80094f2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800953c:	f107 030c 	add.w	r3, r7, #12
 8009540:	461a      	mov	r2, r3
 8009542:	211f      	movs	r1, #31
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fb2e 	bl	8009ba6 <HAL_ETH_ReadPHYRegister>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009554:	6939      	ldr	r1, [r7, #16]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fd4c 	bl	8009ff4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8009564:	2301      	movs	r3, #1
 8009566:	e056      	b.n	8009616 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f003 0310 	and.w	r3, r3, #16
 800956e:	2b00      	cmp	r3, #0
 8009570:	d004      	beq.n	800957c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009578:	60da      	str	r2, [r3, #12]
 800957a:	e002      	b.n	8009582 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	d003      	beq.n	8009594 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	609a      	str	r2, [r3, #8]
 8009592:	e037      	b.n	8009604 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800959a:	609a      	str	r2, [r3, #8]
 800959c:	e032      	b.n	8009604 <HAL_ETH_Init+0x31c>
 800959e:	bf00      	nop
 80095a0:	03938700 	.word	0x03938700
 80095a4:	40023800 	.word	0x40023800
 80095a8:	40013800 	.word	0x40013800
 80095ac:	01312cff 	.word	0x01312cff
 80095b0:	02160ebf 	.word	0x02160ebf
 80095b4:	039386ff 	.word	0x039386ff
 80095b8:	05f5e0ff 	.word	0x05f5e0ff
 80095bc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	08db      	lsrs	r3, r3, #3
 80095c6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	085b      	lsrs	r3, r3, #1
 80095ce:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80095d0:	4313      	orrs	r3, r2
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	461a      	mov	r2, r3
 80095d6:	2100      	movs	r1, #0
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fb4c 	bl	8009c76 <HAL_ETH_WritePHYRegister>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00b      	beq.n	80095fc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80095e8:	6939      	ldr	r1, [r7, #16]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fd02 	bl	8009ff4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e00c      	b.n	8009616 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80095fc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009600:	f7ff fd3e 	bl	8009080 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8009604:	6939      	ldr	r1, [r7, #16]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fcf4 	bl	8009ff4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3720      	adds	r7, #32
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop

08009620 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_ETH_DMATxDescListInit+0x20>
 800963c:	2302      	movs	r3, #2
 800963e:	e052      	b.n	80096e6 <HAL_ETH_DMATxDescListInit+0xc6>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	e030      	b.n	80096be <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	015b      	lsls	r3, r3, #5
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	4413      	add	r3, r2
 8009664:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800966c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009674:	fb02 f303 	mul.w	r3, r2, r3
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	4413      	add	r3, r2
 800967c:	461a      	mov	r2, r3
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d105      	bne.n	8009696 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	3b01      	subs	r3, #1
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	429a      	cmp	r2, r3
 800969e:	d208      	bcs.n	80096b2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	3301      	adds	r3, #1
 80096a4:	015b      	lsls	r3, r3, #5
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	4413      	add	r3, r2
 80096aa:	461a      	mov	r2, r3
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	60da      	str	r2, [r3, #12]
 80096b0:	e002      	b.n	80096b8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	3301      	adds	r3, #1
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d3ca      	bcc.n	800965c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6819      	ldr	r1, [r3, #0]
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	f241 0310 	movw	r3, #4112	; 0x1010
 80096d0:	440b      	add	r3, r1
 80096d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b087      	sub	sp, #28
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
 80096fe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_ETH_DMARxDescListInit+0x20>
 800970e:	2302      	movs	r3, #2
 8009710:	e056      	b.n	80097c0 <HAL_ETH_DMARxDescListInit+0xce>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2202      	movs	r2, #2
 800971e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e034      	b.n	8009798 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	015b      	lsls	r3, r3, #5
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	4413      	add	r3, r2
 8009736:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800973e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8009746:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800974e:	fb02 f303 	mul.w	r3, r2, r3
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	4413      	add	r3, r2
 8009756:	461a      	mov	r2, r3
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d105      	bne.n	8009770 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	3b01      	subs	r3, #1
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	429a      	cmp	r2, r3
 8009778:	d208      	bcs.n	800978c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	3301      	adds	r3, #1
 800977e:	015b      	lsls	r3, r3, #5
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	4413      	add	r3, r2
 8009784:	461a      	mov	r2, r3
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	60da      	str	r2, [r3, #12]
 800978a:	e002      	b.n	8009792 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	3301      	adds	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	d3c6      	bcc.n	800972e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	f241 030c 	movw	r3, #4108	; 0x100c
 80097aa:	440b      	add	r3, r1
 80097ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	2300      	movs	r3, #0
 80097e0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <HAL_ETH_TransmitFrame+0x24>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e0cd      	b.n	800998c <HAL_ETH_TransmitFrame+0x1c0>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8009816:	2301      	movs	r3, #1
 8009818:	e0b8      	b.n	800998c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	da09      	bge.n	8009838 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2212      	movs	r2, #18
 8009828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e0a9      	b.n	800998c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800983e:	4293      	cmp	r3, r2
 8009840:	d915      	bls.n	800986e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	4a54      	ldr	r2, [pc, #336]	; (8009998 <HAL_ETH_TransmitFrame+0x1cc>)
 8009846:	fba2 2303 	umull	r2, r3, r2, r3
 800984a:	0a9b      	lsrs	r3, r3, #10
 800984c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4b51      	ldr	r3, [pc, #324]	; (8009998 <HAL_ETH_TransmitFrame+0x1cc>)
 8009852:	fba3 1302 	umull	r1, r3, r3, r2
 8009856:	0a9b      	lsrs	r3, r3, #10
 8009858:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800985c:	fb01 f303 	mul.w	r3, r1, r3
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	3301      	adds	r3, #1
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	e001      	b.n	8009872 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800986e:	2301      	movs	r3, #1
 8009870:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d11c      	bne.n	80098b2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8009886:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8009892:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80098a2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	461a      	mov	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80098b0:	e04b      	b.n	800994a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80098b2:	2300      	movs	r3, #0
 80098b4:	613b      	str	r3, [r7, #16]
 80098b6:	e044      	b.n	8009942 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80098c6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d107      	bne.n	80098de <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80098dc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80098e6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d116      	bne.n	8009920 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009900:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4a25      	ldr	r2, [pc, #148]	; (800999c <HAL_ETH_TransmitFrame+0x1d0>)
 8009906:	fb02 f203 	mul.w	r2, r2, r3
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	4413      	add	r3, r2
 800990e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009912:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800991e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800992e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	461a      	mov	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	3301      	adds	r3, #1
 8009940:	613b      	str	r3, [r7, #16]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	429a      	cmp	r2, r3
 8009948:	d3b6      	bcc.n	80098b8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	f241 0314 	movw	r3, #4116	; 0x1014
 8009952:	4413      	add	r3, r2
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00d      	beq.n	800997a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	f241 0314 	movw	r3, #4116	; 0x1014
 8009966:	4413      	add	r3, r2
 8009968:	2204      	movs	r2, #4
 800996a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	f241 0304 	movw	r3, #4100	; 0x1004
 8009974:	4413      	add	r3, r2
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	371c      	adds	r7, #28
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	ac02b00b 	.word	0xac02b00b
 800999c:	fffffa0c 	.word	0xfffffa0c

080099a0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d101      	bne.n	80099ba <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80099b6:	2302      	movs	r3, #2
 80099b8:	e074      	b.n	8009aa4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2202      	movs	r2, #2
 80099c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80099ca:	e05a      	b.n	8009a82 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3301      	adds	r3, #1
 80099d0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099e0:	d10d      	bne.n	80099fe <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	461a      	mov	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	629a      	str	r2, [r3, #40]	; 0x28
 80099fc:	e041      	b.n	8009a82 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10b      	bne.n	8009a24 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	629a      	str	r2, [r3, #40]	; 0x28
 8009a22:	e02e      	b.n	8009a82 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d103      	bne.n	8009a46 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	0c1b      	lsrs	r3, r3, #16
 8009a4e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009a52:	1f1a      	subs	r2, r3, #4
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5c:	689a      	ldr	r2, [r3, #8]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e010      	b.n	8009aa4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	db02      	blt.n	8009a92 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d99c      	bls.n	80099cc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	f241 0314 	movw	r3, #4116	; 0x1014
 8009ac0:	4413      	add	r3, r2
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	d112      	bne.n	8009af2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f003 fb0b 	bl	800d0e8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	f241 0314 	movw	r3, #4116	; 0x1014
 8009ada:	4413      	add	r3, r2
 8009adc:	2240      	movs	r2, #64	; 0x40
 8009ade:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009af0:	e01b      	b.n	8009b2a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	f241 0314 	movw	r3, #4116	; 0x1014
 8009afa:	4413      	add	r3, r2
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d111      	bne.n	8009b2a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f839 	bl	8009b7e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	f241 0314 	movw	r3, #4116	; 0x1014
 8009b14:	4413      	add	r3, r2
 8009b16:	2201      	movs	r2, #1
 8009b18:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	f241 0314 	movw	r3, #4116	; 0x1014
 8009b32:	4413      	add	r3, r2
 8009b34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009b38:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8009b42:	4413      	add	r3, r2
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b4e:	d112      	bne.n	8009b76 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f81e 	bl	8009b92 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	f241 0314 	movw	r3, #4116	; 0x1014
 8009b5e:	4413      	add	r3, r2
 8009b60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009b64:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b083      	sub	sp, #12
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b086      	sub	sp, #24
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b82      	cmp	r3, #130	; 0x82
 8009bc6:	d101      	bne.n	8009bcc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e050      	b.n	8009c6e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2282      	movs	r2, #130	; 0x82
 8009bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f003 031c 	and.w	r3, r3, #28
 8009be2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	8a1b      	ldrh	r3, [r3, #16]
 8009be8:	02db      	lsls	r3, r3, #11
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009bf2:	897b      	ldrh	r3, [r7, #10]
 8009bf4:	019b      	lsls	r3, r3, #6
 8009bf6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f023 0302 	bic.w	r3, r3, #2
 8009c06:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f043 0301 	orr.w	r3, r3, #1
 8009c0e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009c18:	f7ff fa26 	bl	8009068 <HAL_GetTick>
 8009c1c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009c1e:	e015      	b.n	8009c4c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8009c20:	f7ff fa22 	bl	8009068 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c2e:	d309      	bcc.n	8009c44 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e014      	b.n	8009c6e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e4      	bne.n	8009c20 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	461a      	mov	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b086      	sub	sp, #24
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	607a      	str	r2, [r7, #4]
 8009c82:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b42      	cmp	r3, #66	; 0x42
 8009c96:	d101      	bne.n	8009c9c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	e04e      	b.n	8009d3a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2242      	movs	r2, #66	; 0x42
 8009ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f003 031c 	and.w	r3, r3, #28
 8009cb2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8a1b      	ldrh	r3, [r3, #16]
 8009cb8:	02db      	lsls	r3, r3, #11
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009cc2:	897b      	ldrh	r3, [r7, #10]
 8009cc4:	019b      	lsls	r3, r3, #6
 8009cc6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f043 0302 	orr.w	r3, r3, #2
 8009cd6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f043 0301 	orr.w	r3, r3, #1
 8009cde:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009cf2:	f7ff f9b9 	bl	8009068 <HAL_GetTick>
 8009cf6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009cf8:	e015      	b.n	8009d26 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009cfa:	f7ff f9b5 	bl	8009068 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d08:	d309      	bcc.n	8009d1e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e00d      	b.n	8009d3a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f003 0301 	and.w	r3, r3, #1
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e4      	bne.n	8009cfa <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b082      	sub	sp, #8
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d101      	bne.n	8009d58 <HAL_ETH_Start+0x16>
 8009d54:	2302      	movs	r3, #2
 8009d56:	e01f      	b.n	8009d98 <HAL_ETH_Start+0x56>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fb45 	bl	800a3f8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fb7c 	bl	800a46c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fc13 	bl	800a5a0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fbb0 	bl	800a4e0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fbdd 	bl	800a540 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d101      	bne.n	8009db6 <HAL_ETH_Stop+0x16>
 8009db2:	2302      	movs	r3, #2
 8009db4:	e01f      	b.n	8009df6 <HAL_ETH_Stop+0x56>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fba2 	bl	800a510 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fbcf 	bl	800a570 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fb67 	bl	800a4a6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fbe1 	bl	800a5a0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fb27 	bl	800a432 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_ETH_ConfigMAC+0x1c>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e0e4      	b.n	8009fe6 <HAL_ETH_ConfigMAC+0x1e6>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 80b1 	beq.w	8009f96 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	4b6c      	ldr	r3, [pc, #432]	; (8009ff0 <HAL_ETH_ConfigMAC+0x1f0>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8009e4c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8009e52:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8009e58:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8009e5e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8009e64:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8009e6a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8009e70:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8009e76:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8009e7c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8009e82:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8009e88:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8009e8e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	f7ff f8ea 	bl	8009080 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8009ebc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8009ec2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8009ec8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8009ece:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8009ed4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8009eda:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8009ee6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8009ee8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	f7ff f8c4 	bl	8009080 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009f08:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009f12:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8009f22:	4013      	ands	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8009f30:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8009f36:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8009f3c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8009f42:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8009f48:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f60:	2001      	movs	r0, #1
 8009f62:	f7ff f88d 	bl	8009080 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f86:	2001      	movs	r0, #1
 8009f88:	f7ff f87a 	bl	8009080 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	61da      	str	r2, [r3, #28]
 8009f94:	e01e      	b.n	8009fd4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009fa4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	f7ff f85a 	bl	8009080 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	ff20810f 	.word	0xff20810f

08009ff4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b0b0      	sub	sp, #192	; 0xc0
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d007      	beq.n	800a01a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a010:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a018:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800a01e:	2300      	movs	r3, #0
 800a020:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800a022:	2300      	movs	r3, #0
 800a024:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800a026:	2300      	movs	r3, #0
 800a028:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800a02a:	2300      	movs	r3, #0
 800a02c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800a02e:	2300      	movs	r3, #0
 800a030:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d103      	bne.n	800a042 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800a03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a03e:	663b      	str	r3, [r7, #96]	; 0x60
 800a040:	e001      	b.n	800a046 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800a042:	2300      	movs	r3, #0
 800a044:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800a046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a04a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a050:	2300      	movs	r3, #0
 800a052:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800a054:	2300      	movs	r3, #0
 800a056:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800a058:	2300      	movs	r3, #0
 800a05a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800a05c:	2300      	movs	r3, #0
 800a05e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800a060:	2340      	movs	r3, #64	; 0x40
 800a062:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800a064:	2300      	movs	r3, #0
 800a066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800a070:	2300      	movs	r3, #0
 800a072:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800a076:	2300      	movs	r3, #0
 800a078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800a07c:	2300      	movs	r3, #0
 800a07e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800a082:	2300      	movs	r3, #0
 800a084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800a08e:	2300      	movs	r3, #0
 800a090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800a094:	2380      	movs	r3, #128	; 0x80
 800a096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800a09a:	2300      	movs	r3, #0
 800a09c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a0c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a0cc:	4bab      	ldr	r3, [pc, #684]	; (800a37c <ETH_MACDMAConfig+0x388>)
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800a0d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800a0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800a0d8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800a0da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800a0dc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800a0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800a0e0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800a0e6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800a0e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800a0ea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800a0ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800a0ee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800a0f4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800a0f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800a0f8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800a0fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800a0fc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800a0fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800a100:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800a102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800a104:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800a106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800a108:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800a10a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a10e:	4313      	orrs	r3, r2
 800a110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a11c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a128:	2001      	movs	r0, #1
 800a12a:	f7fe ffa9 	bl	8009080 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a136:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a138:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800a13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a13c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800a13e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800a140:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800a142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800a146:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800a148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800a14c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800a14e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800a152:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800a154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800a158:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800a15c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800a164:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a166:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a172:	2001      	movs	r0, #1
 800a174:	f7fe ff84 	bl	8009080 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a180:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a18a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a194:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a1a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a1a4:	f64f 7341 	movw	r3, #65345	; 0xff41
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800a1ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1b2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800a1b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800a1b8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800a1ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800a1be:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800a1c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800a1c4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800a1c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800a1ca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800a1cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800a1d0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800a1d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a1e4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	f7fe ff45 	bl	8009080 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a1fe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800a200:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800a204:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	430a      	orrs	r2, r1
 800a20e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a21a:	2001      	movs	r0, #1
 800a21c:	f7fe ff30 	bl	8009080 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a228:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800a22e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a232:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800a234:	2300      	movs	r3, #0
 800a236:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800a238:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a23c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800a23e:	2300      	movs	r3, #0
 800a240:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800a242:	2300      	movs	r3, #0
 800a244:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800a246:	2300      	movs	r3, #0
 800a248:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800a24a:	2300      	movs	r3, #0
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800a24e:	2304      	movs	r3, #4
 800a250:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800a252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a256:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800a258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a25c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a25e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a268:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800a26a:	2380      	movs	r3, #128	; 0x80
 800a26c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800a26e:	2300      	movs	r3, #0
 800a270:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800a272:	2300      	movs	r3, #0
 800a274:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	f241 0318 	movw	r3, #4120	; 0x1018
 800a27e:	4413      	add	r3, r2
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800a286:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a28a:	4b3d      	ldr	r3, [pc, #244]	; (800a380 <ETH_MACDMAConfig+0x38c>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a292:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800a294:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a296:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800a298:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800a29a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800a29c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800a29e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800a2a0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800a2a2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800a2a4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800a2a6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800a2aa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800a2ae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800a2b2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a2b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	f241 0318 	movw	r3, #4120	; 0x1018
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a2cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	f241 0318 	movw	r3, #4120	; 0x1018
 800a2d6:	4413      	add	r3, r2
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a2de:	2001      	movs	r0, #1
 800a2e0:	f7fe fece 	bl	8009080 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	f241 0318 	movw	r3, #4120	; 0x1018
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a2f2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a2f8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800a2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800a2fc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800a300:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800a302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800a304:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800a306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a308:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800a30a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800a30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800a30e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a31c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a32c:	2001      	movs	r0, #1
 800a32e:	f7fe fea7 	bl	8009080 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a33a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a33e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d10d      	bne.n	800a364 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	f241 031c 	movw	r3, #4124	; 0x101c
 800a350:	4413      	add	r3, r2
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	6811      	ldr	r1, [r2, #0]
 800a358:	4a0a      	ldr	r2, [pc, #40]	; (800a384 <ETH_MACDMAConfig+0x390>)
 800a35a:	431a      	orrs	r2, r3
 800a35c:	f241 031c 	movw	r3, #4124	; 0x101c
 800a360:	440b      	add	r3, r1
 800a362:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	695b      	ldr	r3, [r3, #20]
 800a368:	461a      	mov	r2, r3
 800a36a:	2100      	movs	r1, #0
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f80b 	bl	800a388 <ETH_MACAddressConfig>
}
 800a372:	bf00      	nop
 800a374:	37c0      	adds	r7, #192	; 0xc0
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	ff20810f 	.word	0xff20810f
 800a380:	f8de3f23 	.word	0xf8de3f23
 800a384:	00010040 	.word	0x00010040

0800a388 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3305      	adds	r3, #5
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	021b      	lsls	r3, r3, #8
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	3204      	adds	r2, #4
 800a3a0:	7812      	ldrb	r2, [r2, #0]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	4b11      	ldr	r3, [pc, #68]	; (800a3f0 <ETH_MACAddressConfig+0x68>)
 800a3aa:	4413      	add	r3, r2
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3303      	adds	r3, #3
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	061a      	lsls	r2, r3, #24
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3302      	adds	r3, #2
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	041b      	lsls	r3, r3, #16
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	7812      	ldrb	r2, [r2, #0]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	4b06      	ldr	r3, [pc, #24]	; (800a3f4 <ETH_MACAddressConfig+0x6c>)
 800a3da:	4413      	add	r3, r2
 800a3dc:	461a      	mov	r2, r3
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	6013      	str	r3, [r2, #0]
}
 800a3e2:	bf00      	nop
 800a3e4:	371c      	adds	r7, #28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	40028040 	.word	0x40028040
 800a3f4:	40028044 	.word	0x40028044

0800a3f8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f042 0208 	orr.w	r2, r2, #8
 800a412:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a41c:	2001      	movs	r0, #1
 800a41e:	f7fe fe2f 	bl	8009080 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	601a      	str	r2, [r3, #0]
}
 800a42a:	bf00      	nop
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800a432:	b580      	push	{r7, lr}
 800a434:	b084      	sub	sp, #16
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0208 	bic.w	r2, r2, #8
 800a44c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a456:	2001      	movs	r0, #1
 800a458:	f7fe fe12 	bl	8009080 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	601a      	str	r2, [r3, #0]
}
 800a464:	bf00      	nop
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f042 0204 	orr.w	r2, r2, #4
 800a486:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a490:	2001      	movs	r0, #1
 800a492:	f7fe fdf5 	bl	8009080 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	601a      	str	r2, [r3, #0]
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f022 0204 	bic.w	r2, r2, #4
 800a4c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	f7fe fdd8 	bl	8009080 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	601a      	str	r2, [r3, #0]
}
 800a4d8:	bf00      	nop
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	f241 0318 	movw	r3, #4120	; 0x1018
 800a4f0:	4413      	add	r3, r2
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6811      	ldr	r1, [r2, #0]
 800a4f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a4fc:	f241 0318 	movw	r3, #4120	; 0x1018
 800a500:	440b      	add	r3, r1
 800a502:	601a      	str	r2, [r3, #0]
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	f241 0318 	movw	r3, #4120	; 0x1018
 800a520:	4413      	add	r3, r2
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	6811      	ldr	r1, [r2, #0]
 800a528:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a52c:	f241 0318 	movw	r3, #4120	; 0x1018
 800a530:	440b      	add	r3, r1
 800a532:	601a      	str	r2, [r3, #0]
}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	f241 0318 	movw	r3, #4120	; 0x1018
 800a550:	4413      	add	r3, r2
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6811      	ldr	r1, [r2, #0]
 800a558:	f043 0202 	orr.w	r2, r3, #2
 800a55c:	f241 0318 	movw	r3, #4120	; 0x1018
 800a560:	440b      	add	r3, r1
 800a562:	601a      	str	r2, [r3, #0]
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	f241 0318 	movw	r3, #4120	; 0x1018
 800a580:	4413      	add	r3, r2
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	6811      	ldr	r1, [r2, #0]
 800a588:	f023 0202 	bic.w	r2, r3, #2
 800a58c:	f241 0318 	movw	r3, #4120	; 0x1018
 800a590:	440b      	add	r3, r1
 800a592:	601a      	str	r2, [r3, #0]
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	f241 0318 	movw	r3, #4120	; 0x1018
 800a5b4:	4413      	add	r3, r2
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	6811      	ldr	r1, [r2, #0]
 800a5bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a5c0:	f241 0318 	movw	r3, #4120	; 0x1018
 800a5c4:	440b      	add	r3, r1
 800a5c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	f241 0318 	movw	r3, #4120	; 0x1018
 800a5d0:	4413      	add	r3, r2
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	f7fe fd52 	bl	8009080 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6819      	ldr	r1, [r3, #0]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	f241 0318 	movw	r3, #4120	; 0x1018
 800a5e6:	440b      	add	r3, r1
 800a5e8:	601a      	str	r2, [r3, #0]
}
 800a5ea:	bf00      	nop
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b089      	sub	sp, #36	; 0x24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a5fe:	2300      	movs	r3, #0
 800a600:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a602:	2300      	movs	r3, #0
 800a604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a606:	2300      	movs	r3, #0
 800a608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a60e:	2300      	movs	r3, #0
 800a610:	61fb      	str	r3, [r7, #28]
 800a612:	e175      	b.n	800a900 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a614:	2201      	movs	r2, #1
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	fa02 f303 	lsl.w	r3, r2, r3
 800a61c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	4013      	ands	r3, r2
 800a626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	f040 8164 	bne.w	800a8fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d00b      	beq.n	800a652 <HAL_GPIO_Init+0x5e>
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d007      	beq.n	800a652 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a646:	2b11      	cmp	r3, #17
 800a648:	d003      	beq.n	800a652 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2b12      	cmp	r3, #18
 800a650:	d130      	bne.n	800a6b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	2203      	movs	r2, #3
 800a65e:	fa02 f303 	lsl.w	r3, r2, r3
 800a662:	43db      	mvns	r3, r3
 800a664:	69ba      	ldr	r2, [r7, #24]
 800a666:	4013      	ands	r3, r2
 800a668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	fa02 f303 	lsl.w	r3, r2, r3
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	4313      	orrs	r3, r2
 800a67a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a688:	2201      	movs	r2, #1
 800a68a:	69fb      	ldr	r3, [r7, #28]
 800a68c:	fa02 f303 	lsl.w	r3, r2, r3
 800a690:	43db      	mvns	r3, r3
 800a692:	69ba      	ldr	r2, [r7, #24]
 800a694:	4013      	ands	r3, r2
 800a696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	091b      	lsrs	r3, r3, #4
 800a69e:	f003 0201 	and.w	r2, r3, #1
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	69ba      	ldr	r2, [r7, #24]
 800a6b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	2203      	movs	r2, #3
 800a6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c4:	43db      	mvns	r3, r3
 800a6c6:	69ba      	ldr	r2, [r7, #24]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	689a      	ldr	r2, [r3, #8]
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d003      	beq.n	800a6f4 <HAL_GPIO_Init+0x100>
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	2b12      	cmp	r3, #18
 800a6f2:	d123      	bne.n	800a73c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	08da      	lsrs	r2, r3, #3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3208      	adds	r2, #8
 800a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	f003 0307 	and.w	r3, r3, #7
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	220f      	movs	r2, #15
 800a70c:	fa02 f303 	lsl.w	r3, r2, r3
 800a710:	43db      	mvns	r3, r3
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	4013      	ands	r3, r2
 800a716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	691a      	ldr	r2, [r3, #16]
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	69ba      	ldr	r2, [r7, #24]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	08da      	lsrs	r2, r3, #3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	3208      	adds	r2, #8
 800a736:	69b9      	ldr	r1, [r7, #24]
 800a738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	2203      	movs	r2, #3
 800a748:	fa02 f303 	lsl.w	r3, r2, r3
 800a74c:	43db      	mvns	r3, r3
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	4013      	ands	r3, r2
 800a752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f003 0203 	and.w	r2, r3, #3
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	005b      	lsls	r3, r3, #1
 800a760:	fa02 f303 	lsl.w	r3, r2, r3
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	4313      	orrs	r3, r2
 800a768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	69ba      	ldr	r2, [r7, #24]
 800a76e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 80be 	beq.w	800a8fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a77e:	4b65      	ldr	r3, [pc, #404]	; (800a914 <HAL_GPIO_Init+0x320>)
 800a780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a782:	4a64      	ldr	r2, [pc, #400]	; (800a914 <HAL_GPIO_Init+0x320>)
 800a784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a788:	6453      	str	r3, [r2, #68]	; 0x44
 800a78a:	4b62      	ldr	r3, [pc, #392]	; (800a914 <HAL_GPIO_Init+0x320>)
 800a78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a78e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a796:	4a60      	ldr	r2, [pc, #384]	; (800a918 <HAL_GPIO_Init+0x324>)
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	089b      	lsrs	r3, r3, #2
 800a79c:	3302      	adds	r3, #2
 800a79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	f003 0303 	and.w	r3, r3, #3
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	220f      	movs	r2, #15
 800a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b2:	43db      	mvns	r3, r3
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a57      	ldr	r2, [pc, #348]	; (800a91c <HAL_GPIO_Init+0x328>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d037      	beq.n	800a832 <HAL_GPIO_Init+0x23e>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a56      	ldr	r2, [pc, #344]	; (800a920 <HAL_GPIO_Init+0x32c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d031      	beq.n	800a82e <HAL_GPIO_Init+0x23a>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a55      	ldr	r2, [pc, #340]	; (800a924 <HAL_GPIO_Init+0x330>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d02b      	beq.n	800a82a <HAL_GPIO_Init+0x236>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a54      	ldr	r2, [pc, #336]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d025      	beq.n	800a826 <HAL_GPIO_Init+0x232>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a53      	ldr	r2, [pc, #332]	; (800a92c <HAL_GPIO_Init+0x338>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d01f      	beq.n	800a822 <HAL_GPIO_Init+0x22e>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a52      	ldr	r2, [pc, #328]	; (800a930 <HAL_GPIO_Init+0x33c>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d019      	beq.n	800a81e <HAL_GPIO_Init+0x22a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a51      	ldr	r2, [pc, #324]	; (800a934 <HAL_GPIO_Init+0x340>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d013      	beq.n	800a81a <HAL_GPIO_Init+0x226>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a50      	ldr	r2, [pc, #320]	; (800a938 <HAL_GPIO_Init+0x344>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d00d      	beq.n	800a816 <HAL_GPIO_Init+0x222>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a4f      	ldr	r2, [pc, #316]	; (800a93c <HAL_GPIO_Init+0x348>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d007      	beq.n	800a812 <HAL_GPIO_Init+0x21e>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a4e      	ldr	r2, [pc, #312]	; (800a940 <HAL_GPIO_Init+0x34c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d101      	bne.n	800a80e <HAL_GPIO_Init+0x21a>
 800a80a:	2309      	movs	r3, #9
 800a80c:	e012      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a80e:	230a      	movs	r3, #10
 800a810:	e010      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a812:	2308      	movs	r3, #8
 800a814:	e00e      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a816:	2307      	movs	r3, #7
 800a818:	e00c      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a81a:	2306      	movs	r3, #6
 800a81c:	e00a      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a81e:	2305      	movs	r3, #5
 800a820:	e008      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a822:	2304      	movs	r3, #4
 800a824:	e006      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a826:	2303      	movs	r3, #3
 800a828:	e004      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a82a:	2302      	movs	r3, #2
 800a82c:	e002      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a82e:	2301      	movs	r3, #1
 800a830:	e000      	b.n	800a834 <HAL_GPIO_Init+0x240>
 800a832:	2300      	movs	r3, #0
 800a834:	69fa      	ldr	r2, [r7, #28]
 800a836:	f002 0203 	and.w	r2, r2, #3
 800a83a:	0092      	lsls	r2, r2, #2
 800a83c:	4093      	lsls	r3, r2
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	4313      	orrs	r3, r2
 800a842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a844:	4934      	ldr	r1, [pc, #208]	; (800a918 <HAL_GPIO_Init+0x324>)
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	089b      	lsrs	r3, r3, #2
 800a84a:	3302      	adds	r3, #2
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a852:	4b3c      	ldr	r3, [pc, #240]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	43db      	mvns	r3, r3
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	4013      	ands	r3, r2
 800a860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	4313      	orrs	r3, r2
 800a874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a876:	4a33      	ldr	r2, [pc, #204]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a87c:	4b31      	ldr	r3, [pc, #196]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	43db      	mvns	r3, r3
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	4013      	ands	r3, r2
 800a88a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d003      	beq.n	800a8a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a8a0:	4a28      	ldr	r2, [pc, #160]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a8a6:	4b27      	ldr	r3, [pc, #156]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	69ba      	ldr	r2, [r7, #24]
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a8c2:	69ba      	ldr	r2, [r7, #24]
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a8ca:	4a1e      	ldr	r2, [pc, #120]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a8d0:	4b1c      	ldr	r3, [pc, #112]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	43db      	mvns	r3, r3
 800a8da:	69ba      	ldr	r2, [r7, #24]
 800a8dc:	4013      	ands	r3, r2
 800a8de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a8f4:	4a13      	ldr	r2, [pc, #76]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	2b0f      	cmp	r3, #15
 800a904:	f67f ae86 	bls.w	800a614 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a908:	bf00      	nop
 800a90a:	3724      	adds	r7, #36	; 0x24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	40023800 	.word	0x40023800
 800a918:	40013800 	.word	0x40013800
 800a91c:	40020000 	.word	0x40020000
 800a920:	40020400 	.word	0x40020400
 800a924:	40020800 	.word	0x40020800
 800a928:	40020c00 	.word	0x40020c00
 800a92c:	40021000 	.word	0x40021000
 800a930:	40021400 	.word	0x40021400
 800a934:	40021800 	.word	0x40021800
 800a938:	40021c00 	.word	0x40021c00
 800a93c:	40022000 	.word	0x40022000
 800a940:	40022400 	.word	0x40022400
 800a944:	40013c00 	.word	0x40013c00

0800a948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	807b      	strh	r3, [r7, #2]
 800a954:	4613      	mov	r3, r2
 800a956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a958:	787b      	ldrb	r3, [r7, #1]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a95e:	887a      	ldrh	r2, [r7, #2]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a964:	e003      	b.n	800a96e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a966:	887b      	ldrh	r3, [r7, #2]
 800a968:	041a      	lsls	r2, r3, #16
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	619a      	str	r2, [r3, #24]
}
 800a96e:	bf00      	nop
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	695a      	ldr	r2, [r3, #20]
 800a98a:	887b      	ldrh	r3, [r7, #2]
 800a98c:	4013      	ands	r3, r2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a992:	887b      	ldrh	r3, [r7, #2]
 800a994:	041a      	lsls	r2, r3, #16
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800a99a:	e002      	b.n	800a9a2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a99c:	887a      	ldrh	r2, [r7, #2]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	619a      	str	r2, [r3, #24]
}
 800a9a2:	bf00      	nop
 800a9a4:	370c      	adds	r7, #12
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a9ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9b0:	b08f      	sub	sp, #60	; 0x3c
 800a9b2:	af0a      	add	r7, sp, #40	; 0x28
 800a9b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e116      	b.n	800abee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fe f98a 	bl	8008cf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2203      	movs	r2, #3
 800a9e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d102      	bne.n	800a9fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f001 fefc 	bl	800c7fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	603b      	str	r3, [r7, #0]
 800aa0a:	687e      	ldr	r6, [r7, #4]
 800aa0c:	466d      	mov	r5, sp
 800aa0e:	f106 0410 	add.w	r4, r6, #16
 800aa12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa1e:	e885 0003 	stmia.w	r5, {r0, r1}
 800aa22:	1d33      	adds	r3, r6, #4
 800aa24:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aa26:	6838      	ldr	r0, [r7, #0]
 800aa28:	f001 fe90 	bl	800c74c <USB_CoreInit>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d005      	beq.n	800aa3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2202      	movs	r2, #2
 800aa36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e0d7      	b.n	800abee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2100      	movs	r1, #0
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 feea 	bl	800c81e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73fb      	strb	r3, [r7, #15]
 800aa4e:	e04a      	b.n	800aae6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800aa50:	7bfa      	ldrb	r2, [r7, #15]
 800aa52:	6879      	ldr	r1, [r7, #4]
 800aa54:	4613      	mov	r3, r2
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	1a9b      	subs	r3, r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	440b      	add	r3, r1
 800aa5e:	333d      	adds	r3, #61	; 0x3d
 800aa60:	2201      	movs	r2, #1
 800aa62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aa64:	7bfa      	ldrb	r2, [r7, #15]
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	4613      	mov	r3, r2
 800aa6a:	00db      	lsls	r3, r3, #3
 800aa6c:	1a9b      	subs	r3, r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	440b      	add	r3, r1
 800aa72:	333c      	adds	r3, #60	; 0x3c
 800aa74:	7bfa      	ldrb	r2, [r7, #15]
 800aa76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aa78:	7bfa      	ldrb	r2, [r7, #15]
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
 800aa7c:	b298      	uxth	r0, r3
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	4613      	mov	r3, r2
 800aa82:	00db      	lsls	r3, r3, #3
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	440b      	add	r3, r1
 800aa8a:	3342      	adds	r3, #66	; 0x42
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800aa90:	7bfa      	ldrb	r2, [r7, #15]
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	4613      	mov	r3, r2
 800aa96:	00db      	lsls	r3, r3, #3
 800aa98:	1a9b      	subs	r3, r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	440b      	add	r3, r1
 800aa9e:	333f      	adds	r3, #63	; 0x3f
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800aaa4:	7bfa      	ldrb	r2, [r7, #15]
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	1a9b      	subs	r3, r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	440b      	add	r3, r1
 800aab2:	3344      	adds	r3, #68	; 0x44
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800aab8:	7bfa      	ldrb	r2, [r7, #15]
 800aaba:	6879      	ldr	r1, [r7, #4]
 800aabc:	4613      	mov	r3, r2
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	1a9b      	subs	r3, r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	440b      	add	r3, r1
 800aac6:	3348      	adds	r3, #72	; 0x48
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800aacc:	7bfa      	ldrb	r2, [r7, #15]
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	4613      	mov	r3, r2
 800aad2:	00db      	lsls	r3, r3, #3
 800aad4:	1a9b      	subs	r3, r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	440b      	add	r3, r1
 800aada:	3350      	adds	r3, #80	; 0x50
 800aadc:	2200      	movs	r2, #0
 800aade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
 800aae2:	3301      	adds	r3, #1
 800aae4:	73fb      	strb	r3, [r7, #15]
 800aae6:	7bfa      	ldrb	r2, [r7, #15]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d3af      	bcc.n	800aa50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73fb      	strb	r3, [r7, #15]
 800aaf4:	e044      	b.n	800ab80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800aaf6:	7bfa      	ldrb	r2, [r7, #15]
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	4613      	mov	r3, r2
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	1a9b      	subs	r3, r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ab08:	2200      	movs	r2, #0
 800ab0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ab0c:	7bfa      	ldrb	r2, [r7, #15]
 800ab0e:	6879      	ldr	r1, [r7, #4]
 800ab10:	4613      	mov	r3, r2
 800ab12:	00db      	lsls	r3, r3, #3
 800ab14:	1a9b      	subs	r3, r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	440b      	add	r3, r1
 800ab1a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ab1e:	7bfa      	ldrb	r2, [r7, #15]
 800ab20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ab22:	7bfa      	ldrb	r2, [r7, #15]
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	4613      	mov	r3, r2
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	440b      	add	r3, r1
 800ab30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ab34:	2200      	movs	r2, #0
 800ab36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ab38:	7bfa      	ldrb	r2, [r7, #15]
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	1a9b      	subs	r3, r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	440b      	add	r3, r1
 800ab46:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ab4e:	7bfa      	ldrb	r2, [r7, #15]
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	4613      	mov	r3, r2
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ab60:	2200      	movs	r2, #0
 800ab62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ab64:	7bfa      	ldrb	r2, [r7, #15]
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4613      	mov	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	1a9b      	subs	r3, r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	440b      	add	r3, r1
 800ab72:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	73fb      	strb	r3, [r7, #15]
 800ab80:	7bfa      	ldrb	r2, [r7, #15]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d3b5      	bcc.n	800aaf6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	687e      	ldr	r6, [r7, #4]
 800ab92:	466d      	mov	r5, sp
 800ab94:	f106 0410 	add.w	r4, r6, #16
 800ab98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aba0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aba4:	e885 0003 	stmia.w	r5, {r0, r1}
 800aba8:	1d33      	adds	r3, r6, #4
 800abaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abac:	6838      	ldr	r0, [r7, #0]
 800abae:	f001 fe61 	bl	800c874 <USB_DevInit>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e014      	b.n	800abee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d102      	bne.n	800abe2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f80b 	bl	800abf8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f002 f813 	bl	800cc12 <USB_DevDisconnect>

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800abf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	699b      	ldr	r3, [r3, #24]
 800ac1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <HAL_PCDEx_ActivateLPM+0x44>)
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	10000003 	.word	0x10000003

0800ac40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ac40:	b480      	push	{r7}
 800ac42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a04      	ldr	r2, [pc, #16]	; (800ac5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ac4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac4e:	6013      	str	r3, [r2, #0]
}
 800ac50:	bf00      	nop
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	40007000 	.word	0x40007000

0800ac60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac6a:	4b23      	ldr	r3, [pc, #140]	; (800acf8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6e:	4a22      	ldr	r2, [pc, #136]	; (800acf8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac74:	6413      	str	r3, [r2, #64]	; 0x40
 800ac76:	4b20      	ldr	r3, [pc, #128]	; (800acf8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac82:	4b1e      	ldr	r3, [pc, #120]	; (800acfc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a1d      	ldr	r2, [pc, #116]	; (800acfc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac8e:	f7fe f9eb 	bl	8009068 <HAL_GetTick>
 800ac92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac94:	e009      	b.n	800acaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac96:	f7fe f9e7 	bl	8009068 <HAL_GetTick>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aca4:	d901      	bls.n	800acaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aca6:	2303      	movs	r3, #3
 800aca8:	e022      	b.n	800acf0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800acaa:	4b14      	ldr	r3, [pc, #80]	; (800acfc <HAL_PWREx_EnableOverDrive+0x9c>)
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb6:	d1ee      	bne.n	800ac96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800acb8:	4b10      	ldr	r3, [pc, #64]	; (800acfc <HAL_PWREx_EnableOverDrive+0x9c>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a0f      	ldr	r2, [pc, #60]	; (800acfc <HAL_PWREx_EnableOverDrive+0x9c>)
 800acbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acc4:	f7fe f9d0 	bl	8009068 <HAL_GetTick>
 800acc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acca:	e009      	b.n	800ace0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800accc:	f7fe f9cc 	bl	8009068 <HAL_GetTick>
 800acd0:	4602      	mov	r2, r0
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acda:	d901      	bls.n	800ace0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e007      	b.n	800acf0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ace0:	4b06      	ldr	r3, [pc, #24]	; (800acfc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acec:	d1ee      	bne.n	800accc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40023800 	.word	0x40023800
 800acfc:	40007000 	.word	0x40007000

0800ad00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e29b      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f000 8087 	beq.w	800ae32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ad24:	4b96      	ldr	r3, [pc, #600]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f003 030c 	and.w	r3, r3, #12
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d00c      	beq.n	800ad4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad30:	4b93      	ldr	r3, [pc, #588]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f003 030c 	and.w	r3, r3, #12
 800ad38:	2b08      	cmp	r3, #8
 800ad3a:	d112      	bne.n	800ad62 <HAL_RCC_OscConfig+0x62>
 800ad3c:	4b90      	ldr	r3, [pc, #576]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad48:	d10b      	bne.n	800ad62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad4a:	4b8d      	ldr	r3, [pc, #564]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d06c      	beq.n	800ae30 <HAL_RCC_OscConfig+0x130>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d168      	bne.n	800ae30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e275      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad6a:	d106      	bne.n	800ad7a <HAL_RCC_OscConfig+0x7a>
 800ad6c:	4b84      	ldr	r3, [pc, #528]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a83      	ldr	r2, [pc, #524]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	e02e      	b.n	800add8 <HAL_RCC_OscConfig+0xd8>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10c      	bne.n	800ad9c <HAL_RCC_OscConfig+0x9c>
 800ad82:	4b7f      	ldr	r3, [pc, #508]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a7e      	ldr	r2, [pc, #504]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad8c:	6013      	str	r3, [r2, #0]
 800ad8e:	4b7c      	ldr	r3, [pc, #496]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a7b      	ldr	r2, [pc, #492]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ad94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	e01d      	b.n	800add8 <HAL_RCC_OscConfig+0xd8>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ada4:	d10c      	bne.n	800adc0 <HAL_RCC_OscConfig+0xc0>
 800ada6:	4b76      	ldr	r3, [pc, #472]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a75      	ldr	r2, [pc, #468]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800adac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	4b73      	ldr	r3, [pc, #460]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a72      	ldr	r2, [pc, #456]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800adb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	e00b      	b.n	800add8 <HAL_RCC_OscConfig+0xd8>
 800adc0:	4b6f      	ldr	r3, [pc, #444]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a6e      	ldr	r2, [pc, #440]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800adc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	4b6c      	ldr	r3, [pc, #432]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a6b      	ldr	r2, [pc, #428]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800add2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800add6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d013      	beq.n	800ae08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade0:	f7fe f942 	bl	8009068 <HAL_GetTick>
 800ade4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ade6:	e008      	b.n	800adfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ade8:	f7fe f93e 	bl	8009068 <HAL_GetTick>
 800adec:	4602      	mov	r2, r0
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	2b64      	cmp	r3, #100	; 0x64
 800adf4:	d901      	bls.n	800adfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e229      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adfa:	4b61      	ldr	r3, [pc, #388]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0f0      	beq.n	800ade8 <HAL_RCC_OscConfig+0xe8>
 800ae06:	e014      	b.n	800ae32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae08:	f7fe f92e 	bl	8009068 <HAL_GetTick>
 800ae0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae0e:	e008      	b.n	800ae22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae10:	f7fe f92a 	bl	8009068 <HAL_GetTick>
 800ae14:	4602      	mov	r2, r0
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	2b64      	cmp	r3, #100	; 0x64
 800ae1c:	d901      	bls.n	800ae22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e215      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae22:	4b57      	ldr	r3, [pc, #348]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1f0      	bne.n	800ae10 <HAL_RCC_OscConfig+0x110>
 800ae2e:	e000      	b.n	800ae32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d069      	beq.n	800af12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ae3e:	4b50      	ldr	r3, [pc, #320]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	f003 030c 	and.w	r3, r3, #12
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00b      	beq.n	800ae62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae4a:	4b4d      	ldr	r3, [pc, #308]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f003 030c 	and.w	r3, r3, #12
 800ae52:	2b08      	cmp	r3, #8
 800ae54:	d11c      	bne.n	800ae90 <HAL_RCC_OscConfig+0x190>
 800ae56:	4b4a      	ldr	r3, [pc, #296]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d116      	bne.n	800ae90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae62:	4b47      	ldr	r3, [pc, #284]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0302 	and.w	r3, r3, #2
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d005      	beq.n	800ae7a <HAL_RCC_OscConfig+0x17a>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d001      	beq.n	800ae7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e1e9      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae7a:	4b41      	ldr	r3, [pc, #260]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	493d      	ldr	r1, [pc, #244]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae8e:	e040      	b.n	800af12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d023      	beq.n	800aee0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae98:	4b39      	ldr	r3, [pc, #228]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a38      	ldr	r2, [pc, #224]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aea4:	f7fe f8e0 	bl	8009068 <HAL_GetTick>
 800aea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeaa:	e008      	b.n	800aebe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aeac:	f7fe f8dc 	bl	8009068 <HAL_GetTick>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d901      	bls.n	800aebe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e1c7      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aebe:	4b30      	ldr	r3, [pc, #192]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 0302 	and.w	r3, r3, #2
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d0f0      	beq.n	800aeac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aeca:	4b2d      	ldr	r3, [pc, #180]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	4929      	ldr	r1, [pc, #164]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	600b      	str	r3, [r1, #0]
 800aede:	e018      	b.n	800af12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aee0:	4b27      	ldr	r3, [pc, #156]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a26      	ldr	r2, [pc, #152]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800aee6:	f023 0301 	bic.w	r3, r3, #1
 800aeea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeec:	f7fe f8bc 	bl	8009068 <HAL_GetTick>
 800aef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aef2:	e008      	b.n	800af06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aef4:	f7fe f8b8 	bl	8009068 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d901      	bls.n	800af06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e1a3      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af06:	4b1e      	ldr	r3, [pc, #120]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1f0      	bne.n	800aef4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0308 	and.w	r3, r3, #8
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d038      	beq.n	800af90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d019      	beq.n	800af5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af26:	4b16      	ldr	r3, [pc, #88]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800af28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af2a:	4a15      	ldr	r2, [pc, #84]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800af2c:	f043 0301 	orr.w	r3, r3, #1
 800af30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af32:	f7fe f899 	bl	8009068 <HAL_GetTick>
 800af36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af38:	e008      	b.n	800af4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af3a:	f7fe f895 	bl	8009068 <HAL_GetTick>
 800af3e:	4602      	mov	r2, r0
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	2b02      	cmp	r3, #2
 800af46:	d901      	bls.n	800af4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800af48:	2303      	movs	r3, #3
 800af4a:	e180      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af4c:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800af4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af50:	f003 0302 	and.w	r3, r3, #2
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0f0      	beq.n	800af3a <HAL_RCC_OscConfig+0x23a>
 800af58:	e01a      	b.n	800af90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af5a:	4b09      	ldr	r3, [pc, #36]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800af5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af5e:	4a08      	ldr	r2, [pc, #32]	; (800af80 <HAL_RCC_OscConfig+0x280>)
 800af60:	f023 0301 	bic.w	r3, r3, #1
 800af64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af66:	f7fe f87f 	bl	8009068 <HAL_GetTick>
 800af6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af6c:	e00a      	b.n	800af84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af6e:	f7fe f87b 	bl	8009068 <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d903      	bls.n	800af84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e166      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
 800af80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af84:	4b92      	ldr	r3, [pc, #584]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800af86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1ee      	bne.n	800af6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 0304 	and.w	r3, r3, #4
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 80a4 	beq.w	800b0e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af9e:	4b8c      	ldr	r3, [pc, #560]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10d      	bne.n	800afc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800afaa:	4b89      	ldr	r3, [pc, #548]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	4a88      	ldr	r2, [pc, #544]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800afb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afb4:	6413      	str	r3, [r2, #64]	; 0x40
 800afb6:	4b86      	ldr	r3, [pc, #536]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afbe:	60bb      	str	r3, [r7, #8]
 800afc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800afc2:	2301      	movs	r3, #1
 800afc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800afc6:	4b83      	ldr	r3, [pc, #524]	; (800b1d4 <HAL_RCC_OscConfig+0x4d4>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d118      	bne.n	800b004 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800afd2:	4b80      	ldr	r3, [pc, #512]	; (800b1d4 <HAL_RCC_OscConfig+0x4d4>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a7f      	ldr	r2, [pc, #508]	; (800b1d4 <HAL_RCC_OscConfig+0x4d4>)
 800afd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800afde:	f7fe f843 	bl	8009068 <HAL_GetTick>
 800afe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800afe4:	e008      	b.n	800aff8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afe6:	f7fe f83f 	bl	8009068 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	2b64      	cmp	r3, #100	; 0x64
 800aff2:	d901      	bls.n	800aff8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e12a      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aff8:	4b76      	ldr	r3, [pc, #472]	; (800b1d4 <HAL_RCC_OscConfig+0x4d4>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b000:	2b00      	cmp	r3, #0
 800b002:	d0f0      	beq.n	800afe6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d106      	bne.n	800b01a <HAL_RCC_OscConfig+0x31a>
 800b00c:	4b70      	ldr	r3, [pc, #448]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b010:	4a6f      	ldr	r2, [pc, #444]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b012:	f043 0301 	orr.w	r3, r3, #1
 800b016:	6713      	str	r3, [r2, #112]	; 0x70
 800b018:	e02d      	b.n	800b076 <HAL_RCC_OscConfig+0x376>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10c      	bne.n	800b03c <HAL_RCC_OscConfig+0x33c>
 800b022:	4b6b      	ldr	r3, [pc, #428]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b026:	4a6a      	ldr	r2, [pc, #424]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b028:	f023 0301 	bic.w	r3, r3, #1
 800b02c:	6713      	str	r3, [r2, #112]	; 0x70
 800b02e:	4b68      	ldr	r3, [pc, #416]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b032:	4a67      	ldr	r2, [pc, #412]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b034:	f023 0304 	bic.w	r3, r3, #4
 800b038:	6713      	str	r3, [r2, #112]	; 0x70
 800b03a:	e01c      	b.n	800b076 <HAL_RCC_OscConfig+0x376>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	2b05      	cmp	r3, #5
 800b042:	d10c      	bne.n	800b05e <HAL_RCC_OscConfig+0x35e>
 800b044:	4b62      	ldr	r3, [pc, #392]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b048:	4a61      	ldr	r2, [pc, #388]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b04a:	f043 0304 	orr.w	r3, r3, #4
 800b04e:	6713      	str	r3, [r2, #112]	; 0x70
 800b050:	4b5f      	ldr	r3, [pc, #380]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b054:	4a5e      	ldr	r2, [pc, #376]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b056:	f043 0301 	orr.w	r3, r3, #1
 800b05a:	6713      	str	r3, [r2, #112]	; 0x70
 800b05c:	e00b      	b.n	800b076 <HAL_RCC_OscConfig+0x376>
 800b05e:	4b5c      	ldr	r3, [pc, #368]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b062:	4a5b      	ldr	r2, [pc, #364]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b064:	f023 0301 	bic.w	r3, r3, #1
 800b068:	6713      	str	r3, [r2, #112]	; 0x70
 800b06a:	4b59      	ldr	r3, [pc, #356]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06e:	4a58      	ldr	r2, [pc, #352]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b070:	f023 0304 	bic.w	r3, r3, #4
 800b074:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d015      	beq.n	800b0aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b07e:	f7fd fff3 	bl	8009068 <HAL_GetTick>
 800b082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b084:	e00a      	b.n	800b09c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b086:	f7fd ffef 	bl	8009068 <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	f241 3288 	movw	r2, #5000	; 0x1388
 800b094:	4293      	cmp	r3, r2
 800b096:	d901      	bls.n	800b09c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e0d8      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b09c:	4b4c      	ldr	r3, [pc, #304]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a0:	f003 0302 	and.w	r3, r3, #2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0ee      	beq.n	800b086 <HAL_RCC_OscConfig+0x386>
 800b0a8:	e014      	b.n	800b0d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0aa:	f7fd ffdd 	bl	8009068 <HAL_GetTick>
 800b0ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0b0:	e00a      	b.n	800b0c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0b2:	f7fd ffd9 	bl	8009068 <HAL_GetTick>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d901      	bls.n	800b0c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e0c2      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0c8:	4b41      	ldr	r3, [pc, #260]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b0ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1ee      	bne.n	800b0b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b0d4:	7dfb      	ldrb	r3, [r7, #23]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d105      	bne.n	800b0e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0da:	4b3d      	ldr	r3, [pc, #244]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0de:	4a3c      	ldr	r2, [pc, #240]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b0e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f000 80ae 	beq.w	800b24c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b0f0:	4b37      	ldr	r3, [pc, #220]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	f003 030c 	and.w	r3, r3, #12
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d06d      	beq.n	800b1d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d14b      	bne.n	800b19c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b104:	4b32      	ldr	r3, [pc, #200]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a31      	ldr	r2, [pc, #196]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b10a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b10e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b110:	f7fd ffaa 	bl	8009068 <HAL_GetTick>
 800b114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b116:	e008      	b.n	800b12a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b118:	f7fd ffa6 	bl	8009068 <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	2b02      	cmp	r3, #2
 800b124:	d901      	bls.n	800b12a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e091      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b12a:	4b29      	ldr	r3, [pc, #164]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1f0      	bne.n	800b118 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	69da      	ldr	r2, [r3, #28]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	431a      	orrs	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	019b      	lsls	r3, r3, #6
 800b146:	431a      	orrs	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14c:	085b      	lsrs	r3, r3, #1
 800b14e:	3b01      	subs	r3, #1
 800b150:	041b      	lsls	r3, r3, #16
 800b152:	431a      	orrs	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	061b      	lsls	r3, r3, #24
 800b15a:	431a      	orrs	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b160:	071b      	lsls	r3, r3, #28
 800b162:	491b      	ldr	r1, [pc, #108]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b164:	4313      	orrs	r3, r2
 800b166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b168:	4b19      	ldr	r3, [pc, #100]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a18      	ldr	r2, [pc, #96]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b16e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b174:	f7fd ff78 	bl	8009068 <HAL_GetTick>
 800b178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b17a:	e008      	b.n	800b18e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b17c:	f7fd ff74 	bl	8009068 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	2b02      	cmp	r3, #2
 800b188:	d901      	bls.n	800b18e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e05f      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b18e:	4b10      	ldr	r3, [pc, #64]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0f0      	beq.n	800b17c <HAL_RCC_OscConfig+0x47c>
 800b19a:	e057      	b.n	800b24c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b19c:	4b0c      	ldr	r3, [pc, #48]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a0b      	ldr	r2, [pc, #44]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b1a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a8:	f7fd ff5e 	bl	8009068 <HAL_GetTick>
 800b1ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1ae:	e008      	b.n	800b1c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1b0:	f7fd ff5a 	bl	8009068 <HAL_GetTick>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d901      	bls.n	800b1c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e045      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1c2:	4b03      	ldr	r3, [pc, #12]	; (800b1d0 <HAL_RCC_OscConfig+0x4d0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1f0      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x4b0>
 800b1ce:	e03d      	b.n	800b24c <HAL_RCC_OscConfig+0x54c>
 800b1d0:	40023800 	.word	0x40023800
 800b1d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b1d8:	4b1f      	ldr	r3, [pc, #124]	; (800b258 <HAL_RCC_OscConfig+0x558>)
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d030      	beq.n	800b248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d129      	bne.n	800b248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d122      	bne.n	800b248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b208:	4013      	ands	r3, r2
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b20e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b210:	4293      	cmp	r3, r2
 800b212:	d119      	bne.n	800b248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21e:	085b      	lsrs	r3, r3, #1
 800b220:	3b01      	subs	r3, #1
 800b222:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b224:	429a      	cmp	r2, r3
 800b226:	d10f      	bne.n	800b248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b232:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b234:	429a      	cmp	r2, r3
 800b236:	d107      	bne.n	800b248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b242:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b244:	429a      	cmp	r2, r3
 800b246:	d001      	beq.n	800b24c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e000      	b.n	800b24e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	40023800 	.word	0x40023800

0800b25c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e0d0      	b.n	800b416 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b274:	4b6a      	ldr	r3, [pc, #424]	; (800b420 <HAL_RCC_ClockConfig+0x1c4>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 030f 	and.w	r3, r3, #15
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d910      	bls.n	800b2a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b282:	4b67      	ldr	r3, [pc, #412]	; (800b420 <HAL_RCC_ClockConfig+0x1c4>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f023 020f 	bic.w	r2, r3, #15
 800b28a:	4965      	ldr	r1, [pc, #404]	; (800b420 <HAL_RCC_ClockConfig+0x1c4>)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	4313      	orrs	r3, r2
 800b290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b292:	4b63      	ldr	r3, [pc, #396]	; (800b420 <HAL_RCC_ClockConfig+0x1c4>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d001      	beq.n	800b2a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e0b8      	b.n	800b416 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0302 	and.w	r3, r3, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d020      	beq.n	800b2f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b2bc:	4b59      	ldr	r3, [pc, #356]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	4a58      	ldr	r2, [pc, #352]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b2c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b2c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d005      	beq.n	800b2e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b2d4:	4b53      	ldr	r3, [pc, #332]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	4a52      	ldr	r2, [pc, #328]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b2da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b2de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2e0:	4b50      	ldr	r3, [pc, #320]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	494d      	ldr	r1, [pc, #308]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d040      	beq.n	800b380 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d107      	bne.n	800b316 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b306:	4b47      	ldr	r3, [pc, #284]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d115      	bne.n	800b33e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e07f      	b.n	800b416 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d107      	bne.n	800b32e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b31e:	4b41      	ldr	r3, [pc, #260]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e073      	b.n	800b416 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b32e:	4b3d      	ldr	r3, [pc, #244]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e06b      	b.n	800b416 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b33e:	4b39      	ldr	r3, [pc, #228]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f023 0203 	bic.w	r2, r3, #3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	4936      	ldr	r1, [pc, #216]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b34c:	4313      	orrs	r3, r2
 800b34e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b350:	f7fd fe8a 	bl	8009068 <HAL_GetTick>
 800b354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b356:	e00a      	b.n	800b36e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b358:	f7fd fe86 	bl	8009068 <HAL_GetTick>
 800b35c:	4602      	mov	r2, r0
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	f241 3288 	movw	r2, #5000	; 0x1388
 800b366:	4293      	cmp	r3, r2
 800b368:	d901      	bls.n	800b36e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e053      	b.n	800b416 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b36e:	4b2d      	ldr	r3, [pc, #180]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f003 020c 	and.w	r2, r3, #12
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d1eb      	bne.n	800b358 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b380:	4b27      	ldr	r3, [pc, #156]	; (800b420 <HAL_RCC_ClockConfig+0x1c4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 030f 	and.w	r3, r3, #15
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d210      	bcs.n	800b3b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b38e:	4b24      	ldr	r3, [pc, #144]	; (800b420 <HAL_RCC_ClockConfig+0x1c4>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f023 020f 	bic.w	r2, r3, #15
 800b396:	4922      	ldr	r1, [pc, #136]	; (800b420 <HAL_RCC_ClockConfig+0x1c4>)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b39e:	4b20      	ldr	r3, [pc, #128]	; (800b420 <HAL_RCC_ClockConfig+0x1c4>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d001      	beq.n	800b3b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e032      	b.n	800b416 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 0304 	and.w	r3, r3, #4
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d008      	beq.n	800b3ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3bc:	4b19      	ldr	r3, [pc, #100]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	4916      	ldr	r1, [pc, #88]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 0308 	and.w	r3, r3, #8
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d009      	beq.n	800b3ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b3da:	4b12      	ldr	r3, [pc, #72]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	490e      	ldr	r1, [pc, #56]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b3ee:	f000 f821 	bl	800b434 <HAL_RCC_GetSysClockFreq>
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <HAL_RCC_ClockConfig+0x1c8>)
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	091b      	lsrs	r3, r3, #4
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	4a0a      	ldr	r2, [pc, #40]	; (800b428 <HAL_RCC_ClockConfig+0x1cc>)
 800b400:	5cd3      	ldrb	r3, [r2, r3]
 800b402:	fa21 f303 	lsr.w	r3, r1, r3
 800b406:	4a09      	ldr	r2, [pc, #36]	; (800b42c <HAL_RCC_ClockConfig+0x1d0>)
 800b408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <HAL_RCC_ClockConfig+0x1d4>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fd fde6 	bl	8008fe0 <HAL_InitTick>

  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	40023c00 	.word	0x40023c00
 800b424:	40023800 	.word	0x40023800
 800b428:	0801fda0 	.word	0x0801fda0
 800b42c:	20000040 	.word	0x20000040
 800b430:	20000044 	.word	0x20000044

0800b434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	607b      	str	r3, [r7, #4]
 800b43e:	2300      	movs	r3, #0
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	2300      	movs	r3, #0
 800b444:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b44a:	4b63      	ldr	r3, [pc, #396]	; (800b5d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f003 030c 	and.w	r3, r3, #12
 800b452:	2b04      	cmp	r3, #4
 800b454:	d007      	beq.n	800b466 <HAL_RCC_GetSysClockFreq+0x32>
 800b456:	2b08      	cmp	r3, #8
 800b458:	d008      	beq.n	800b46c <HAL_RCC_GetSysClockFreq+0x38>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f040 80b4 	bne.w	800b5c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b460:	4b5e      	ldr	r3, [pc, #376]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b462:	60bb      	str	r3, [r7, #8]
      break;
 800b464:	e0b3      	b.n	800b5ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b466:	4b5e      	ldr	r3, [pc, #376]	; (800b5e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b468:	60bb      	str	r3, [r7, #8]
      break;
 800b46a:	e0b0      	b.n	800b5ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b46c:	4b5a      	ldr	r3, [pc, #360]	; (800b5d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b474:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b476:	4b58      	ldr	r3, [pc, #352]	; (800b5d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d04a      	beq.n	800b518 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b482:	4b55      	ldr	r3, [pc, #340]	; (800b5d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	099b      	lsrs	r3, r3, #6
 800b488:	f04f 0400 	mov.w	r4, #0
 800b48c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b490:	f04f 0200 	mov.w	r2, #0
 800b494:	ea03 0501 	and.w	r5, r3, r1
 800b498:	ea04 0602 	and.w	r6, r4, r2
 800b49c:	4629      	mov	r1, r5
 800b49e:	4632      	mov	r2, r6
 800b4a0:	f04f 0300 	mov.w	r3, #0
 800b4a4:	f04f 0400 	mov.w	r4, #0
 800b4a8:	0154      	lsls	r4, r2, #5
 800b4aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b4ae:	014b      	lsls	r3, r1, #5
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	1b49      	subs	r1, r1, r5
 800b4b6:	eb62 0206 	sbc.w	r2, r2, r6
 800b4ba:	f04f 0300 	mov.w	r3, #0
 800b4be:	f04f 0400 	mov.w	r4, #0
 800b4c2:	0194      	lsls	r4, r2, #6
 800b4c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b4c8:	018b      	lsls	r3, r1, #6
 800b4ca:	1a5b      	subs	r3, r3, r1
 800b4cc:	eb64 0402 	sbc.w	r4, r4, r2
 800b4d0:	f04f 0100 	mov.w	r1, #0
 800b4d4:	f04f 0200 	mov.w	r2, #0
 800b4d8:	00e2      	lsls	r2, r4, #3
 800b4da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b4de:	00d9      	lsls	r1, r3, #3
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4614      	mov	r4, r2
 800b4e4:	195b      	adds	r3, r3, r5
 800b4e6:	eb44 0406 	adc.w	r4, r4, r6
 800b4ea:	f04f 0100 	mov.w	r1, #0
 800b4ee:	f04f 0200 	mov.w	r2, #0
 800b4f2:	0262      	lsls	r2, r4, #9
 800b4f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b4f8:	0259      	lsls	r1, r3, #9
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	4618      	mov	r0, r3
 800b500:	4621      	mov	r1, r4
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f04f 0400 	mov.w	r4, #0
 800b508:	461a      	mov	r2, r3
 800b50a:	4623      	mov	r3, r4
 800b50c:	f7fc ff00 	bl	8008310 <__aeabi_uldivmod>
 800b510:	4603      	mov	r3, r0
 800b512:	460c      	mov	r4, r1
 800b514:	60fb      	str	r3, [r7, #12]
 800b516:	e049      	b.n	800b5ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b518:	4b2f      	ldr	r3, [pc, #188]	; (800b5d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	099b      	lsrs	r3, r3, #6
 800b51e:	f04f 0400 	mov.w	r4, #0
 800b522:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	ea03 0501 	and.w	r5, r3, r1
 800b52e:	ea04 0602 	and.w	r6, r4, r2
 800b532:	4629      	mov	r1, r5
 800b534:	4632      	mov	r2, r6
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	f04f 0400 	mov.w	r4, #0
 800b53e:	0154      	lsls	r4, r2, #5
 800b540:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b544:	014b      	lsls	r3, r1, #5
 800b546:	4619      	mov	r1, r3
 800b548:	4622      	mov	r2, r4
 800b54a:	1b49      	subs	r1, r1, r5
 800b54c:	eb62 0206 	sbc.w	r2, r2, r6
 800b550:	f04f 0300 	mov.w	r3, #0
 800b554:	f04f 0400 	mov.w	r4, #0
 800b558:	0194      	lsls	r4, r2, #6
 800b55a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b55e:	018b      	lsls	r3, r1, #6
 800b560:	1a5b      	subs	r3, r3, r1
 800b562:	eb64 0402 	sbc.w	r4, r4, r2
 800b566:	f04f 0100 	mov.w	r1, #0
 800b56a:	f04f 0200 	mov.w	r2, #0
 800b56e:	00e2      	lsls	r2, r4, #3
 800b570:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b574:	00d9      	lsls	r1, r3, #3
 800b576:	460b      	mov	r3, r1
 800b578:	4614      	mov	r4, r2
 800b57a:	195b      	adds	r3, r3, r5
 800b57c:	eb44 0406 	adc.w	r4, r4, r6
 800b580:	f04f 0100 	mov.w	r1, #0
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	02a2      	lsls	r2, r4, #10
 800b58a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b58e:	0299      	lsls	r1, r3, #10
 800b590:	460b      	mov	r3, r1
 800b592:	4614      	mov	r4, r2
 800b594:	4618      	mov	r0, r3
 800b596:	4621      	mov	r1, r4
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f04f 0400 	mov.w	r4, #0
 800b59e:	461a      	mov	r2, r3
 800b5a0:	4623      	mov	r3, r4
 800b5a2:	f7fc feb5 	bl	8008310 <__aeabi_uldivmod>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b5ac:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	0c1b      	lsrs	r3, r3, #16
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c4:	60bb      	str	r3, [r7, #8]
      break;
 800b5c6:	e002      	b.n	800b5ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b5c8:	4b04      	ldr	r3, [pc, #16]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b5ca:	60bb      	str	r3, [r7, #8]
      break;
 800b5cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d8:	40023800 	.word	0x40023800
 800b5dc:	00f42400 	.word	0x00f42400
 800b5e0:	007a1200 	.word	0x007a1200

0800b5e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b5e8:	4b03      	ldr	r3, [pc, #12]	; (800b5f8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	20000040 	.word	0x20000040

0800b5fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b600:	f7ff fff0 	bl	800b5e4 <HAL_RCC_GetHCLKFreq>
 800b604:	4601      	mov	r1, r0
 800b606:	4b05      	ldr	r3, [pc, #20]	; (800b61c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	0a9b      	lsrs	r3, r3, #10
 800b60c:	f003 0307 	and.w	r3, r3, #7
 800b610:	4a03      	ldr	r2, [pc, #12]	; (800b620 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b612:	5cd3      	ldrb	r3, [r2, r3]
 800b614:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b618:	4618      	mov	r0, r3
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	40023800 	.word	0x40023800
 800b620:	0801fdb0 	.word	0x0801fdb0

0800b624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b628:	f7ff ffdc 	bl	800b5e4 <HAL_RCC_GetHCLKFreq>
 800b62c:	4601      	mov	r1, r0
 800b62e:	4b05      	ldr	r3, [pc, #20]	; (800b644 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	0b5b      	lsrs	r3, r3, #13
 800b634:	f003 0307 	and.w	r3, r3, #7
 800b638:	4a03      	ldr	r2, [pc, #12]	; (800b648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b63a:	5cd3      	ldrb	r3, [r2, r3]
 800b63c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b640:	4618      	mov	r0, r3
 800b642:	bd80      	pop	{r7, pc}
 800b644:	40023800 	.word	0x40023800
 800b648:	0801fdb0 	.word	0x0801fdb0

0800b64c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b654:	2300      	movs	r3, #0
 800b656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b00      	cmp	r3, #0
 800b672:	d012      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b674:	4b69      	ldr	r3, [pc, #420]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	4a68      	ldr	r2, [pc, #416]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b67a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b67e:	6093      	str	r3, [r2, #8]
 800b680:	4b66      	ldr	r3, [pc, #408]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b682:	689a      	ldr	r2, [r3, #8]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b688:	4964      	ldr	r1, [pc, #400]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b696:	2301      	movs	r3, #1
 800b698:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d017      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6a6:	4b5d      	ldr	r3, [pc, #372]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b4:	4959      	ldr	r1, [pc, #356]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6c4:	d101      	bne.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d017      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b6e2:	4b4e      	ldr	r3, [pc, #312]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f0:	494a      	ldr	r1, [pc, #296]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b700:	d101      	bne.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b702:	2301      	movs	r3, #1
 800b704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b70e:	2301      	movs	r3, #1
 800b710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b71e:	2301      	movs	r3, #1
 800b720:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 0320 	and.w	r3, r3, #32
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 808b 	beq.w	800b846 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b730:	4b3a      	ldr	r3, [pc, #232]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b734:	4a39      	ldr	r2, [pc, #228]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b73a:	6413      	str	r3, [r2, #64]	; 0x40
 800b73c:	4b37      	ldr	r3, [pc, #220]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b744:	60bb      	str	r3, [r7, #8]
 800b746:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b748:	4b35      	ldr	r3, [pc, #212]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a34      	ldr	r2, [pc, #208]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b74e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b754:	f7fd fc88 	bl	8009068 <HAL_GetTick>
 800b758:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b75a:	e008      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b75c:	f7fd fc84 	bl	8009068 <HAL_GetTick>
 800b760:	4602      	mov	r2, r0
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	2b64      	cmp	r3, #100	; 0x64
 800b768:	d901      	bls.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e38d      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b76e:	4b2c      	ldr	r3, [pc, #176]	; (800b820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0f0      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b77a:	4b28      	ldr	r3, [pc, #160]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b77e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b782:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d035      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	429a      	cmp	r2, r3
 800b796:	d02e      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b798:	4b20      	ldr	r3, [pc, #128]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b79a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b79c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b7a2:	4b1e      	ldr	r3, [pc, #120]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a6:	4a1d      	ldr	r2, [pc, #116]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b7ae:	4b1b      	ldr	r3, [pc, #108]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7b2:	4a1a      	ldr	r2, [pc, #104]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b7ba:	4a18      	ldr	r2, [pc, #96]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b7c0:	4b16      	ldr	r3, [pc, #88]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c4:	f003 0301 	and.w	r3, r3, #1
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d114      	bne.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7cc:	f7fd fc4c 	bl	8009068 <HAL_GetTick>
 800b7d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7d2:	e00a      	b.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b7d4:	f7fd fc48 	bl	8009068 <HAL_GetTick>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d901      	bls.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e34f      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7ea:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ee:	f003 0302 	and.w	r3, r3, #2
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0ee      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b802:	d111      	bne.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b804:	4b05      	ldr	r3, [pc, #20]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b810:	4b04      	ldr	r3, [pc, #16]	; (800b824 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b812:	400b      	ands	r3, r1
 800b814:	4901      	ldr	r1, [pc, #4]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b816:	4313      	orrs	r3, r2
 800b818:	608b      	str	r3, [r1, #8]
 800b81a:	e00b      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b81c:	40023800 	.word	0x40023800
 800b820:	40007000 	.word	0x40007000
 800b824:	0ffffcff 	.word	0x0ffffcff
 800b828:	4bb3      	ldr	r3, [pc, #716]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	4ab2      	ldr	r2, [pc, #712]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b82e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b832:	6093      	str	r3, [r2, #8]
 800b834:	4bb0      	ldr	r3, [pc, #704]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b83c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b840:	49ad      	ldr	r1, [pc, #692]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b842:	4313      	orrs	r3, r2
 800b844:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0310 	and.w	r3, r3, #16
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d010      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b852:	4ba9      	ldr	r3, [pc, #676]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b858:	4aa7      	ldr	r2, [pc, #668]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b85a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b85e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b862:	4ba5      	ldr	r3, [pc, #660]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b864:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86c:	49a2      	ldr	r1, [pc, #648]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00a      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b880:	4b9d      	ldr	r3, [pc, #628]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b886:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b88e:	499a      	ldr	r1, [pc, #616]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b890:	4313      	orrs	r3, r2
 800b892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00a      	beq.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b8a2:	4b95      	ldr	r3, [pc, #596]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8b0:	4991      	ldr	r1, [pc, #580]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00a      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b8c4:	4b8c      	ldr	r3, [pc, #560]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d2:	4989      	ldr	r1, [pc, #548]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00a      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8e6:	4b84      	ldr	r3, [pc, #528]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f4:	4980      	ldr	r1, [pc, #512]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00a      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b908:	4b7b      	ldr	r3, [pc, #492]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b90a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b90e:	f023 0203 	bic.w	r2, r3, #3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b916:	4978      	ldr	r1, [pc, #480]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b92a:	4b73      	ldr	r3, [pc, #460]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b930:	f023 020c 	bic.w	r2, r3, #12
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b938:	496f      	ldr	r1, [pc, #444]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00a      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b94c:	4b6a      	ldr	r3, [pc, #424]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b952:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95a:	4967      	ldr	r1, [pc, #412]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b95c:	4313      	orrs	r3, r2
 800b95e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b96e:	4b62      	ldr	r3, [pc, #392]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b974:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b97c:	495e      	ldr	r1, [pc, #376]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00a      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b990:	4b59      	ldr	r3, [pc, #356]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b99e:	4956      	ldr	r1, [pc, #344]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b9b2:	4b51      	ldr	r3, [pc, #324]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c0:	494d      	ldr	r1, [pc, #308]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00a      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b9d4:	4b48      	ldr	r3, [pc, #288]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9e2:	4945      	ldr	r1, [pc, #276]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b9f6:	4b40      	ldr	r3, [pc, #256]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba04:	493c      	ldr	r1, [pc, #240]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00a      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba18:	4b37      	ldr	r3, [pc, #220]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba26:	4934      	ldr	r1, [pc, #208]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d011      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ba3a:	4b2f      	ldr	r3, [pc, #188]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba48:	492b      	ldr	r1, [pc, #172]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba58:	d101      	bne.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0308 	and.w	r3, r3, #8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ba7a:	4b1f      	ldr	r3, [pc, #124]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba88:	491b      	ldr	r1, [pc, #108]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00b      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ba9c:	4b16      	ldr	r3, [pc, #88]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ba9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baac:	4912      	ldr	r1, [pc, #72]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800baae:	4313      	orrs	r3, r2
 800bab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00b      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800bac0:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bac6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bad0:	4909      	ldr	r1, [pc, #36]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bad2:	4313      	orrs	r3, r2
 800bad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00f      	beq.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bae4:	4b04      	ldr	r3, [pc, #16]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baf4:	e002      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800baf6:	bf00      	nop
 800baf8:	40023800 	.word	0x40023800
 800bafc:	4985      	ldr	r1, [pc, #532]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bb10:	4b80      	ldr	r3, [pc, #512]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb20:	497c      	ldr	r1, [pc, #496]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb22:	4313      	orrs	r3, r2
 800bb24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d005      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb36:	f040 80d6 	bne.w	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bb3a:	4b76      	ldr	r3, [pc, #472]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a75      	ldr	r2, [pc, #468]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb46:	f7fd fa8f 	bl	8009068 <HAL_GetTick>
 800bb4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bb4c:	e008      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bb4e:	f7fd fa8b 	bl	8009068 <HAL_GetTick>
 800bb52:	4602      	mov	r2, r0
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	2b64      	cmp	r3, #100	; 0x64
 800bb5a:	d901      	bls.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e194      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bb60:	4b6c      	ldr	r3, [pc, #432]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1f0      	bne.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d021      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x570>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11d      	bne.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bb80:	4b64      	ldr	r3, [pc, #400]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb86:	0c1b      	lsrs	r3, r3, #16
 800bb88:	f003 0303 	and.w	r3, r3, #3
 800bb8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bb8e:	4b61      	ldr	r3, [pc, #388]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bb90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb94:	0e1b      	lsrs	r3, r3, #24
 800bb96:	f003 030f 	and.w	r3, r3, #15
 800bb9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	019a      	lsls	r2, r3, #6
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	041b      	lsls	r3, r3, #16
 800bba6:	431a      	orrs	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	061b      	lsls	r3, r3, #24
 800bbac:	431a      	orrs	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	071b      	lsls	r3, r3, #28
 800bbb4:	4957      	ldr	r1, [pc, #348]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d004      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbd0:	d00a      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d02e      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbe6:	d129      	bne.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bbe8:	4b4a      	ldr	r3, [pc, #296]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bbea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbee:	0c1b      	lsrs	r3, r3, #16
 800bbf0:	f003 0303 	and.w	r3, r3, #3
 800bbf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bbf6:	4b47      	ldr	r3, [pc, #284]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bbf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbfc:	0f1b      	lsrs	r3, r3, #28
 800bbfe:	f003 0307 	and.w	r3, r3, #7
 800bc02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	019a      	lsls	r2, r3, #6
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	041b      	lsls	r3, r3, #16
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	061b      	lsls	r3, r3, #24
 800bc16:	431a      	orrs	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	071b      	lsls	r3, r3, #28
 800bc1c:	493d      	ldr	r1, [pc, #244]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bc24:	4b3b      	ldr	r3, [pc, #236]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc2a:	f023 021f 	bic.w	r2, r3, #31
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	3b01      	subs	r3, #1
 800bc34:	4937      	ldr	r1, [pc, #220]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d01d      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc48:	4b32      	ldr	r3, [pc, #200]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc4e:	0e1b      	lsrs	r3, r3, #24
 800bc50:	f003 030f 	and.w	r3, r3, #15
 800bc54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc56:	4b2f      	ldr	r3, [pc, #188]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc5c:	0f1b      	lsrs	r3, r3, #28
 800bc5e:	f003 0307 	and.w	r3, r3, #7
 800bc62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	019a      	lsls	r2, r3, #6
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	041b      	lsls	r3, r3, #16
 800bc70:	431a      	orrs	r2, r3
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	061b      	lsls	r3, r3, #24
 800bc76:	431a      	orrs	r2, r3
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	071b      	lsls	r3, r3, #28
 800bc7c:	4925      	ldr	r1, [pc, #148]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d011      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	019a      	lsls	r2, r3, #6
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	041b      	lsls	r3, r3, #16
 800bc9c:	431a      	orrs	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	061b      	lsls	r3, r3, #24
 800bca4:	431a      	orrs	r2, r3
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	071b      	lsls	r3, r3, #28
 800bcac:	4919      	ldr	r1, [pc, #100]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bcb4:	4b17      	ldr	r3, [pc, #92]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a16      	ldr	r2, [pc, #88]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bcba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bcbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcc0:	f7fd f9d2 	bl	8009068 <HAL_GetTick>
 800bcc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bcc6:	e008      	b.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bcc8:	f7fd f9ce 	bl	8009068 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2b64      	cmp	r3, #100	; 0x64
 800bcd4:	d901      	bls.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e0d7      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bcda:	4b0e      	ldr	r3, [pc, #56]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0f0      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	f040 80cd 	bne.w	800be88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bcee:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a08      	ldr	r2, [pc, #32]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800bcf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcfa:	f7fd f9b5 	bl	8009068 <HAL_GetTick>
 800bcfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd00:	e00a      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd02:	f7fd f9b1 	bl	8009068 <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	2b64      	cmp	r3, #100	; 0x64
 800bd0e:	d903      	bls.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e0ba      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800bd14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bd18:	4b5e      	ldr	r3, [pc, #376]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd24:	d0ed      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d009      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d02e      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d12a      	bne.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd4e:	4b51      	ldr	r3, [pc, #324]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd54:	0c1b      	lsrs	r3, r3, #16
 800bd56:	f003 0303 	and.w	r3, r3, #3
 800bd5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bd5c:	4b4d      	ldr	r3, [pc, #308]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd62:	0f1b      	lsrs	r3, r3, #28
 800bd64:	f003 0307 	and.w	r3, r3, #7
 800bd68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	019a      	lsls	r2, r3, #6
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	041b      	lsls	r3, r3, #16
 800bd74:	431a      	orrs	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	699b      	ldr	r3, [r3, #24]
 800bd7a:	061b      	lsls	r3, r3, #24
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	071b      	lsls	r3, r3, #28
 800bd82:	4944      	ldr	r1, [pc, #272]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd84:	4313      	orrs	r3, r2
 800bd86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bd8a:	4b42      	ldr	r3, [pc, #264]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	021b      	lsls	r3, r3, #8
 800bd9c:	493d      	ldr	r1, [pc, #244]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d022      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdb8:	d11d      	bne.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bdba:	4b36      	ldr	r3, [pc, #216]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bdbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdc0:	0e1b      	lsrs	r3, r3, #24
 800bdc2:	f003 030f 	and.w	r3, r3, #15
 800bdc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bdc8:	4b32      	ldr	r3, [pc, #200]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bdca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdce:	0f1b      	lsrs	r3, r3, #28
 800bdd0:	f003 0307 	and.w	r3, r3, #7
 800bdd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	019a      	lsls	r2, r3, #6
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a1b      	ldr	r3, [r3, #32]
 800bde0:	041b      	lsls	r3, r3, #16
 800bde2:	431a      	orrs	r2, r3
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	061b      	lsls	r3, r3, #24
 800bde8:	431a      	orrs	r2, r3
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	071b      	lsls	r3, r3, #28
 800bdee:	4929      	ldr	r1, [pc, #164]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f003 0308 	and.w	r3, r3, #8
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d028      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800be02:	4b24      	ldr	r3, [pc, #144]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800be04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be08:	0e1b      	lsrs	r3, r3, #24
 800be0a:	f003 030f 	and.w	r3, r3, #15
 800be0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800be10:	4b20      	ldr	r3, [pc, #128]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800be12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be16:	0c1b      	lsrs	r3, r3, #16
 800be18:	f003 0303 	and.w	r3, r3, #3
 800be1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	695b      	ldr	r3, [r3, #20]
 800be22:	019a      	lsls	r2, r3, #6
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	041b      	lsls	r3, r3, #16
 800be28:	431a      	orrs	r2, r3
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	061b      	lsls	r3, r3, #24
 800be2e:	431a      	orrs	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	69db      	ldr	r3, [r3, #28]
 800be34:	071b      	lsls	r3, r3, #28
 800be36:	4917      	ldr	r1, [pc, #92]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800be38:	4313      	orrs	r3, r2
 800be3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800be3e:	4b15      	ldr	r3, [pc, #84]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800be40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	4911      	ldr	r1, [pc, #68]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800be4e:	4313      	orrs	r3, r2
 800be50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800be54:	4b0f      	ldr	r3, [pc, #60]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a0e      	ldr	r2, [pc, #56]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800be5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be60:	f7fd f902 	bl	8009068 <HAL_GetTick>
 800be64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800be66:	e008      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800be68:	f7fd f8fe 	bl	8009068 <HAL_GetTick>
 800be6c:	4602      	mov	r2, r0
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	2b64      	cmp	r3, #100	; 0x64
 800be74:	d901      	bls.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	e007      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800be7a:	4b06      	ldr	r3, [pc, #24]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be86:	d1ef      	bne.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3720      	adds	r7, #32
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	40023800 	.word	0x40023800

0800be98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e040      	b.n	800bf2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d106      	bne.n	800bec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7fc fed6 	bl	8008c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2224      	movs	r2, #36	; 0x24
 800bec4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f022 0201 	bic.w	r2, r2, #1
 800bed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f82c 	bl	800bf34 <UART_SetConfig>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d101      	bne.n	800bee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e022      	b.n	800bf2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	2b00      	cmp	r3, #0
 800beec:	d002      	beq.n	800bef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 faca 	bl	800c488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	689a      	ldr	r2, [r3, #8]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f042 0201 	orr.w	r2, r2, #1
 800bf22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fb51 	bl	800c5cc <UART_CheckIdleState>
 800bf2a:	4603      	mov	r3, r0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	431a      	orrs	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	431a      	orrs	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	4bb1      	ldr	r3, [pc, #708]	; (800c228 <UART_SetConfig+0x2f4>)
 800bf64:	4013      	ands	r3, r2
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	6812      	ldr	r2, [r2, #0]
 800bf6a:	6939      	ldr	r1, [r7, #16]
 800bf6c:	430b      	orrs	r3, r1
 800bf6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a1b      	ldr	r3, [r3, #32]
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4313      	orrs	r3, r2
 800bf94:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a9f      	ldr	r2, [pc, #636]	; (800c22c <UART_SetConfig+0x2f8>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d121      	bne.n	800bff8 <UART_SetConfig+0xc4>
 800bfb4:	4b9e      	ldr	r3, [pc, #632]	; (800c230 <UART_SetConfig+0x2fc>)
 800bfb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfba:	f003 0303 	and.w	r3, r3, #3
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	d816      	bhi.n	800bff0 <UART_SetConfig+0xbc>
 800bfc2:	a201      	add	r2, pc, #4	; (adr r2, 800bfc8 <UART_SetConfig+0x94>)
 800bfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc8:	0800bfd9 	.word	0x0800bfd9
 800bfcc:	0800bfe5 	.word	0x0800bfe5
 800bfd0:	0800bfdf 	.word	0x0800bfdf
 800bfd4:	0800bfeb 	.word	0x0800bfeb
 800bfd8:	2301      	movs	r3, #1
 800bfda:	77fb      	strb	r3, [r7, #31]
 800bfdc:	e151      	b.n	800c282 <UART_SetConfig+0x34e>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	77fb      	strb	r3, [r7, #31]
 800bfe2:	e14e      	b.n	800c282 <UART_SetConfig+0x34e>
 800bfe4:	2304      	movs	r3, #4
 800bfe6:	77fb      	strb	r3, [r7, #31]
 800bfe8:	e14b      	b.n	800c282 <UART_SetConfig+0x34e>
 800bfea:	2308      	movs	r3, #8
 800bfec:	77fb      	strb	r3, [r7, #31]
 800bfee:	e148      	b.n	800c282 <UART_SetConfig+0x34e>
 800bff0:	2310      	movs	r3, #16
 800bff2:	77fb      	strb	r3, [r7, #31]
 800bff4:	bf00      	nop
 800bff6:	e144      	b.n	800c282 <UART_SetConfig+0x34e>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a8d      	ldr	r2, [pc, #564]	; (800c234 <UART_SetConfig+0x300>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d134      	bne.n	800c06c <UART_SetConfig+0x138>
 800c002:	4b8b      	ldr	r3, [pc, #556]	; (800c230 <UART_SetConfig+0x2fc>)
 800c004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c008:	f003 030c 	and.w	r3, r3, #12
 800c00c:	2b0c      	cmp	r3, #12
 800c00e:	d829      	bhi.n	800c064 <UART_SetConfig+0x130>
 800c010:	a201      	add	r2, pc, #4	; (adr r2, 800c018 <UART_SetConfig+0xe4>)
 800c012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c016:	bf00      	nop
 800c018:	0800c04d 	.word	0x0800c04d
 800c01c:	0800c065 	.word	0x0800c065
 800c020:	0800c065 	.word	0x0800c065
 800c024:	0800c065 	.word	0x0800c065
 800c028:	0800c059 	.word	0x0800c059
 800c02c:	0800c065 	.word	0x0800c065
 800c030:	0800c065 	.word	0x0800c065
 800c034:	0800c065 	.word	0x0800c065
 800c038:	0800c053 	.word	0x0800c053
 800c03c:	0800c065 	.word	0x0800c065
 800c040:	0800c065 	.word	0x0800c065
 800c044:	0800c065 	.word	0x0800c065
 800c048:	0800c05f 	.word	0x0800c05f
 800c04c:	2300      	movs	r3, #0
 800c04e:	77fb      	strb	r3, [r7, #31]
 800c050:	e117      	b.n	800c282 <UART_SetConfig+0x34e>
 800c052:	2302      	movs	r3, #2
 800c054:	77fb      	strb	r3, [r7, #31]
 800c056:	e114      	b.n	800c282 <UART_SetConfig+0x34e>
 800c058:	2304      	movs	r3, #4
 800c05a:	77fb      	strb	r3, [r7, #31]
 800c05c:	e111      	b.n	800c282 <UART_SetConfig+0x34e>
 800c05e:	2308      	movs	r3, #8
 800c060:	77fb      	strb	r3, [r7, #31]
 800c062:	e10e      	b.n	800c282 <UART_SetConfig+0x34e>
 800c064:	2310      	movs	r3, #16
 800c066:	77fb      	strb	r3, [r7, #31]
 800c068:	bf00      	nop
 800c06a:	e10a      	b.n	800c282 <UART_SetConfig+0x34e>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a71      	ldr	r2, [pc, #452]	; (800c238 <UART_SetConfig+0x304>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d120      	bne.n	800c0b8 <UART_SetConfig+0x184>
 800c076:	4b6e      	ldr	r3, [pc, #440]	; (800c230 <UART_SetConfig+0x2fc>)
 800c078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c07c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c080:	2b10      	cmp	r3, #16
 800c082:	d00f      	beq.n	800c0a4 <UART_SetConfig+0x170>
 800c084:	2b10      	cmp	r3, #16
 800c086:	d802      	bhi.n	800c08e <UART_SetConfig+0x15a>
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d005      	beq.n	800c098 <UART_SetConfig+0x164>
 800c08c:	e010      	b.n	800c0b0 <UART_SetConfig+0x17c>
 800c08e:	2b20      	cmp	r3, #32
 800c090:	d005      	beq.n	800c09e <UART_SetConfig+0x16a>
 800c092:	2b30      	cmp	r3, #48	; 0x30
 800c094:	d009      	beq.n	800c0aa <UART_SetConfig+0x176>
 800c096:	e00b      	b.n	800c0b0 <UART_SetConfig+0x17c>
 800c098:	2300      	movs	r3, #0
 800c09a:	77fb      	strb	r3, [r7, #31]
 800c09c:	e0f1      	b.n	800c282 <UART_SetConfig+0x34e>
 800c09e:	2302      	movs	r3, #2
 800c0a0:	77fb      	strb	r3, [r7, #31]
 800c0a2:	e0ee      	b.n	800c282 <UART_SetConfig+0x34e>
 800c0a4:	2304      	movs	r3, #4
 800c0a6:	77fb      	strb	r3, [r7, #31]
 800c0a8:	e0eb      	b.n	800c282 <UART_SetConfig+0x34e>
 800c0aa:	2308      	movs	r3, #8
 800c0ac:	77fb      	strb	r3, [r7, #31]
 800c0ae:	e0e8      	b.n	800c282 <UART_SetConfig+0x34e>
 800c0b0:	2310      	movs	r3, #16
 800c0b2:	77fb      	strb	r3, [r7, #31]
 800c0b4:	bf00      	nop
 800c0b6:	e0e4      	b.n	800c282 <UART_SetConfig+0x34e>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a5f      	ldr	r2, [pc, #380]	; (800c23c <UART_SetConfig+0x308>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d120      	bne.n	800c104 <UART_SetConfig+0x1d0>
 800c0c2:	4b5b      	ldr	r3, [pc, #364]	; (800c230 <UART_SetConfig+0x2fc>)
 800c0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c0cc:	2b40      	cmp	r3, #64	; 0x40
 800c0ce:	d00f      	beq.n	800c0f0 <UART_SetConfig+0x1bc>
 800c0d0:	2b40      	cmp	r3, #64	; 0x40
 800c0d2:	d802      	bhi.n	800c0da <UART_SetConfig+0x1a6>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d005      	beq.n	800c0e4 <UART_SetConfig+0x1b0>
 800c0d8:	e010      	b.n	800c0fc <UART_SetConfig+0x1c8>
 800c0da:	2b80      	cmp	r3, #128	; 0x80
 800c0dc:	d005      	beq.n	800c0ea <UART_SetConfig+0x1b6>
 800c0de:	2bc0      	cmp	r3, #192	; 0xc0
 800c0e0:	d009      	beq.n	800c0f6 <UART_SetConfig+0x1c2>
 800c0e2:	e00b      	b.n	800c0fc <UART_SetConfig+0x1c8>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	77fb      	strb	r3, [r7, #31]
 800c0e8:	e0cb      	b.n	800c282 <UART_SetConfig+0x34e>
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	77fb      	strb	r3, [r7, #31]
 800c0ee:	e0c8      	b.n	800c282 <UART_SetConfig+0x34e>
 800c0f0:	2304      	movs	r3, #4
 800c0f2:	77fb      	strb	r3, [r7, #31]
 800c0f4:	e0c5      	b.n	800c282 <UART_SetConfig+0x34e>
 800c0f6:	2308      	movs	r3, #8
 800c0f8:	77fb      	strb	r3, [r7, #31]
 800c0fa:	e0c2      	b.n	800c282 <UART_SetConfig+0x34e>
 800c0fc:	2310      	movs	r3, #16
 800c0fe:	77fb      	strb	r3, [r7, #31]
 800c100:	bf00      	nop
 800c102:	e0be      	b.n	800c282 <UART_SetConfig+0x34e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a4d      	ldr	r2, [pc, #308]	; (800c240 <UART_SetConfig+0x30c>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d124      	bne.n	800c158 <UART_SetConfig+0x224>
 800c10e:	4b48      	ldr	r3, [pc, #288]	; (800c230 <UART_SetConfig+0x2fc>)
 800c110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c11c:	d012      	beq.n	800c144 <UART_SetConfig+0x210>
 800c11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c122:	d802      	bhi.n	800c12a <UART_SetConfig+0x1f6>
 800c124:	2b00      	cmp	r3, #0
 800c126:	d007      	beq.n	800c138 <UART_SetConfig+0x204>
 800c128:	e012      	b.n	800c150 <UART_SetConfig+0x21c>
 800c12a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c12e:	d006      	beq.n	800c13e <UART_SetConfig+0x20a>
 800c130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c134:	d009      	beq.n	800c14a <UART_SetConfig+0x216>
 800c136:	e00b      	b.n	800c150 <UART_SetConfig+0x21c>
 800c138:	2300      	movs	r3, #0
 800c13a:	77fb      	strb	r3, [r7, #31]
 800c13c:	e0a1      	b.n	800c282 <UART_SetConfig+0x34e>
 800c13e:	2302      	movs	r3, #2
 800c140:	77fb      	strb	r3, [r7, #31]
 800c142:	e09e      	b.n	800c282 <UART_SetConfig+0x34e>
 800c144:	2304      	movs	r3, #4
 800c146:	77fb      	strb	r3, [r7, #31]
 800c148:	e09b      	b.n	800c282 <UART_SetConfig+0x34e>
 800c14a:	2308      	movs	r3, #8
 800c14c:	77fb      	strb	r3, [r7, #31]
 800c14e:	e098      	b.n	800c282 <UART_SetConfig+0x34e>
 800c150:	2310      	movs	r3, #16
 800c152:	77fb      	strb	r3, [r7, #31]
 800c154:	bf00      	nop
 800c156:	e094      	b.n	800c282 <UART_SetConfig+0x34e>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a39      	ldr	r2, [pc, #228]	; (800c244 <UART_SetConfig+0x310>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d124      	bne.n	800c1ac <UART_SetConfig+0x278>
 800c162:	4b33      	ldr	r3, [pc, #204]	; (800c230 <UART_SetConfig+0x2fc>)
 800c164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c170:	d012      	beq.n	800c198 <UART_SetConfig+0x264>
 800c172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c176:	d802      	bhi.n	800c17e <UART_SetConfig+0x24a>
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d007      	beq.n	800c18c <UART_SetConfig+0x258>
 800c17c:	e012      	b.n	800c1a4 <UART_SetConfig+0x270>
 800c17e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c182:	d006      	beq.n	800c192 <UART_SetConfig+0x25e>
 800c184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c188:	d009      	beq.n	800c19e <UART_SetConfig+0x26a>
 800c18a:	e00b      	b.n	800c1a4 <UART_SetConfig+0x270>
 800c18c:	2301      	movs	r3, #1
 800c18e:	77fb      	strb	r3, [r7, #31]
 800c190:	e077      	b.n	800c282 <UART_SetConfig+0x34e>
 800c192:	2302      	movs	r3, #2
 800c194:	77fb      	strb	r3, [r7, #31]
 800c196:	e074      	b.n	800c282 <UART_SetConfig+0x34e>
 800c198:	2304      	movs	r3, #4
 800c19a:	77fb      	strb	r3, [r7, #31]
 800c19c:	e071      	b.n	800c282 <UART_SetConfig+0x34e>
 800c19e:	2308      	movs	r3, #8
 800c1a0:	77fb      	strb	r3, [r7, #31]
 800c1a2:	e06e      	b.n	800c282 <UART_SetConfig+0x34e>
 800c1a4:	2310      	movs	r3, #16
 800c1a6:	77fb      	strb	r3, [r7, #31]
 800c1a8:	bf00      	nop
 800c1aa:	e06a      	b.n	800c282 <UART_SetConfig+0x34e>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a25      	ldr	r2, [pc, #148]	; (800c248 <UART_SetConfig+0x314>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d124      	bne.n	800c200 <UART_SetConfig+0x2cc>
 800c1b6:	4b1e      	ldr	r3, [pc, #120]	; (800c230 <UART_SetConfig+0x2fc>)
 800c1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c1c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1c4:	d012      	beq.n	800c1ec <UART_SetConfig+0x2b8>
 800c1c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ca:	d802      	bhi.n	800c1d2 <UART_SetConfig+0x29e>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d007      	beq.n	800c1e0 <UART_SetConfig+0x2ac>
 800c1d0:	e012      	b.n	800c1f8 <UART_SetConfig+0x2c4>
 800c1d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1d6:	d006      	beq.n	800c1e6 <UART_SetConfig+0x2b2>
 800c1d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c1dc:	d009      	beq.n	800c1f2 <UART_SetConfig+0x2be>
 800c1de:	e00b      	b.n	800c1f8 <UART_SetConfig+0x2c4>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	77fb      	strb	r3, [r7, #31]
 800c1e4:	e04d      	b.n	800c282 <UART_SetConfig+0x34e>
 800c1e6:	2302      	movs	r3, #2
 800c1e8:	77fb      	strb	r3, [r7, #31]
 800c1ea:	e04a      	b.n	800c282 <UART_SetConfig+0x34e>
 800c1ec:	2304      	movs	r3, #4
 800c1ee:	77fb      	strb	r3, [r7, #31]
 800c1f0:	e047      	b.n	800c282 <UART_SetConfig+0x34e>
 800c1f2:	2308      	movs	r3, #8
 800c1f4:	77fb      	strb	r3, [r7, #31]
 800c1f6:	e044      	b.n	800c282 <UART_SetConfig+0x34e>
 800c1f8:	2310      	movs	r3, #16
 800c1fa:	77fb      	strb	r3, [r7, #31]
 800c1fc:	bf00      	nop
 800c1fe:	e040      	b.n	800c282 <UART_SetConfig+0x34e>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a11      	ldr	r2, [pc, #68]	; (800c24c <UART_SetConfig+0x318>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d139      	bne.n	800c27e <UART_SetConfig+0x34a>
 800c20a:	4b09      	ldr	r3, [pc, #36]	; (800c230 <UART_SetConfig+0x2fc>)
 800c20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c218:	d027      	beq.n	800c26a <UART_SetConfig+0x336>
 800c21a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c21e:	d817      	bhi.n	800c250 <UART_SetConfig+0x31c>
 800c220:	2b00      	cmp	r3, #0
 800c222:	d01c      	beq.n	800c25e <UART_SetConfig+0x32a>
 800c224:	e027      	b.n	800c276 <UART_SetConfig+0x342>
 800c226:	bf00      	nop
 800c228:	efff69f3 	.word	0xefff69f3
 800c22c:	40011000 	.word	0x40011000
 800c230:	40023800 	.word	0x40023800
 800c234:	40004400 	.word	0x40004400
 800c238:	40004800 	.word	0x40004800
 800c23c:	40004c00 	.word	0x40004c00
 800c240:	40005000 	.word	0x40005000
 800c244:	40011400 	.word	0x40011400
 800c248:	40007800 	.word	0x40007800
 800c24c:	40007c00 	.word	0x40007c00
 800c250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c254:	d006      	beq.n	800c264 <UART_SetConfig+0x330>
 800c256:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c25a:	d009      	beq.n	800c270 <UART_SetConfig+0x33c>
 800c25c:	e00b      	b.n	800c276 <UART_SetConfig+0x342>
 800c25e:	2300      	movs	r3, #0
 800c260:	77fb      	strb	r3, [r7, #31]
 800c262:	e00e      	b.n	800c282 <UART_SetConfig+0x34e>
 800c264:	2302      	movs	r3, #2
 800c266:	77fb      	strb	r3, [r7, #31]
 800c268:	e00b      	b.n	800c282 <UART_SetConfig+0x34e>
 800c26a:	2304      	movs	r3, #4
 800c26c:	77fb      	strb	r3, [r7, #31]
 800c26e:	e008      	b.n	800c282 <UART_SetConfig+0x34e>
 800c270:	2308      	movs	r3, #8
 800c272:	77fb      	strb	r3, [r7, #31]
 800c274:	e005      	b.n	800c282 <UART_SetConfig+0x34e>
 800c276:	2310      	movs	r3, #16
 800c278:	77fb      	strb	r3, [r7, #31]
 800c27a:	bf00      	nop
 800c27c:	e001      	b.n	800c282 <UART_SetConfig+0x34e>
 800c27e:	2310      	movs	r3, #16
 800c280:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c28a:	d17f      	bne.n	800c38c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800c28c:	7ffb      	ldrb	r3, [r7, #31]
 800c28e:	2b08      	cmp	r3, #8
 800c290:	d85c      	bhi.n	800c34c <UART_SetConfig+0x418>
 800c292:	a201      	add	r2, pc, #4	; (adr r2, 800c298 <UART_SetConfig+0x364>)
 800c294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c298:	0800c2bd 	.word	0x0800c2bd
 800c29c:	0800c2dd 	.word	0x0800c2dd
 800c2a0:	0800c2fd 	.word	0x0800c2fd
 800c2a4:	0800c34d 	.word	0x0800c34d
 800c2a8:	0800c315 	.word	0x0800c315
 800c2ac:	0800c34d 	.word	0x0800c34d
 800c2b0:	0800c34d 	.word	0x0800c34d
 800c2b4:	0800c34d 	.word	0x0800c34d
 800c2b8:	0800c335 	.word	0x0800c335
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2bc:	f7ff f99e 	bl	800b5fc <HAL_RCC_GetPCLK1Freq>
 800c2c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	005a      	lsls	r2, r3, #1
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	085b      	lsrs	r3, r3, #1
 800c2cc:	441a      	add	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	61bb      	str	r3, [r7, #24]
        break;
 800c2da:	e03a      	b.n	800c352 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2dc:	f7ff f9a2 	bl	800b624 <HAL_RCC_GetPCLK2Freq>
 800c2e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	005a      	lsls	r2, r3, #1
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	085b      	lsrs	r3, r3, #1
 800c2ec:	441a      	add	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	61bb      	str	r3, [r7, #24]
        break;
 800c2fa:	e02a      	b.n	800c352 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	085a      	lsrs	r2, r3, #1
 800c302:	4b5f      	ldr	r3, [pc, #380]	; (800c480 <UART_SetConfig+0x54c>)
 800c304:	4413      	add	r3, r2
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	6852      	ldr	r2, [r2, #4]
 800c30a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c30e:	b29b      	uxth	r3, r3
 800c310:	61bb      	str	r3, [r7, #24]
        break;
 800c312:	e01e      	b.n	800c352 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c314:	f7ff f88e 	bl	800b434 <HAL_RCC_GetSysClockFreq>
 800c318:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	005a      	lsls	r2, r3, #1
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	085b      	lsrs	r3, r3, #1
 800c324:	441a      	add	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32e:	b29b      	uxth	r3, r3
 800c330:	61bb      	str	r3, [r7, #24]
        break;
 800c332:	e00e      	b.n	800c352 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	085b      	lsrs	r3, r3, #1
 800c33a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	fbb2 f3f3 	udiv	r3, r2, r3
 800c346:	b29b      	uxth	r3, r3
 800c348:	61bb      	str	r3, [r7, #24]
        break;
 800c34a:	e002      	b.n	800c352 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	75fb      	strb	r3, [r7, #23]
        break;
 800c350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	2b0f      	cmp	r3, #15
 800c356:	d916      	bls.n	800c386 <UART_SetConfig+0x452>
 800c358:	69bb      	ldr	r3, [r7, #24]
 800c35a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c35e:	d212      	bcs.n	800c386 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	b29b      	uxth	r3, r3
 800c364:	f023 030f 	bic.w	r3, r3, #15
 800c368:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	085b      	lsrs	r3, r3, #1
 800c36e:	b29b      	uxth	r3, r3
 800c370:	f003 0307 	and.w	r3, r3, #7
 800c374:	b29a      	uxth	r2, r3
 800c376:	897b      	ldrh	r3, [r7, #10]
 800c378:	4313      	orrs	r3, r2
 800c37a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	897a      	ldrh	r2, [r7, #10]
 800c382:	60da      	str	r2, [r3, #12]
 800c384:	e070      	b.n	800c468 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	75fb      	strb	r3, [r7, #23]
 800c38a:	e06d      	b.n	800c468 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800c38c:	7ffb      	ldrb	r3, [r7, #31]
 800c38e:	2b08      	cmp	r3, #8
 800c390:	d859      	bhi.n	800c446 <UART_SetConfig+0x512>
 800c392:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <UART_SetConfig+0x464>)
 800c394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c398:	0800c3bd 	.word	0x0800c3bd
 800c39c:	0800c3db 	.word	0x0800c3db
 800c3a0:	0800c3f9 	.word	0x0800c3f9
 800c3a4:	0800c447 	.word	0x0800c447
 800c3a8:	0800c411 	.word	0x0800c411
 800c3ac:	0800c447 	.word	0x0800c447
 800c3b0:	0800c447 	.word	0x0800c447
 800c3b4:	0800c447 	.word	0x0800c447
 800c3b8:	0800c42f 	.word	0x0800c42f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3bc:	f7ff f91e 	bl	800b5fc <HAL_RCC_GetPCLK1Freq>
 800c3c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	085a      	lsrs	r2, r3, #1
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	441a      	add	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	61bb      	str	r3, [r7, #24]
        break;
 800c3d8:	e038      	b.n	800c44c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3da:	f7ff f923 	bl	800b624 <HAL_RCC_GetPCLK2Freq>
 800c3de:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	085a      	lsrs	r2, r3, #1
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	441a      	add	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	61bb      	str	r3, [r7, #24]
        break;
 800c3f6:	e029      	b.n	800c44c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	085a      	lsrs	r2, r3, #1
 800c3fe:	4b21      	ldr	r3, [pc, #132]	; (800c484 <UART_SetConfig+0x550>)
 800c400:	4413      	add	r3, r2
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	6852      	ldr	r2, [r2, #4]
 800c406:	fbb3 f3f2 	udiv	r3, r3, r2
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	61bb      	str	r3, [r7, #24]
        break;
 800c40e:	e01d      	b.n	800c44c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c410:	f7ff f810 	bl	800b434 <HAL_RCC_GetSysClockFreq>
 800c414:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	085a      	lsrs	r2, r3, #1
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	441a      	add	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	fbb2 f3f3 	udiv	r3, r2, r3
 800c428:	b29b      	uxth	r3, r3
 800c42a:	61bb      	str	r3, [r7, #24]
        break;
 800c42c:	e00e      	b.n	800c44c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	085b      	lsrs	r3, r3, #1
 800c434:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c440:	b29b      	uxth	r3, r3
 800c442:	61bb      	str	r3, [r7, #24]
        break;
 800c444:	e002      	b.n	800c44c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	75fb      	strb	r3, [r7, #23]
        break;
 800c44a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	2b0f      	cmp	r3, #15
 800c450:	d908      	bls.n	800c464 <UART_SetConfig+0x530>
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c458:	d204      	bcs.n	800c464 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	60da      	str	r2, [r3, #12]
 800c462:	e001      	b.n	800c468 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c474:	7dfb      	ldrb	r3, [r7, #23]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3720      	adds	r7, #32
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	01e84800 	.word	0x01e84800
 800c484:	00f42400 	.word	0x00f42400

0800c488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00a      	beq.n	800c4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b6:	f003 0302 	and.w	r3, r3, #2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00a      	beq.n	800c4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d8:	f003 0304 	and.w	r3, r3, #4
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00a      	beq.n	800c4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fa:	f003 0308 	and.w	r3, r3, #8
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00a      	beq.n	800c518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	430a      	orrs	r2, r1
 800c516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51c:	f003 0310 	and.w	r3, r3, #16
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00a      	beq.n	800c53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	430a      	orrs	r2, r1
 800c538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53e:	f003 0320 	and.w	r3, r3, #32
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00a      	beq.n	800c55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	430a      	orrs	r2, r1
 800c55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01a      	beq.n	800c59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	430a      	orrs	r2, r1
 800c57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c586:	d10a      	bne.n	800c59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	430a      	orrs	r2, r1
 800c59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00a      	beq.n	800c5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	430a      	orrs	r2, r1
 800c5be:	605a      	str	r2, [r3, #4]
  }
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af02      	add	r7, sp, #8
 800c5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c5da:	f7fc fd45 	bl	8009068 <HAL_GetTick>
 800c5de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 0308 	and.w	r3, r3, #8
 800c5ea:	2b08      	cmp	r3, #8
 800c5ec:	d10e      	bne.n	800c60c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c5ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c5f2:	9300      	str	r3, [sp, #0]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 f82a 	bl	800c656 <UART_WaitOnFlagUntilTimeout>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c608:	2303      	movs	r3, #3
 800c60a:	e020      	b.n	800c64e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f003 0304 	and.w	r3, r3, #4
 800c616:	2b04      	cmp	r3, #4
 800c618:	d10e      	bne.n	800c638 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c61a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 f814 	bl	800c656 <UART_WaitOnFlagUntilTimeout>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c634:	2303      	movs	r3, #3
 800c636:	e00a      	b.n	800c64e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2220      	movs	r2, #32
 800c63c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2220      	movs	r2, #32
 800c642:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b084      	sub	sp, #16
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	60f8      	str	r0, [r7, #12]
 800c65e:	60b9      	str	r1, [r7, #8]
 800c660:	603b      	str	r3, [r7, #0]
 800c662:	4613      	mov	r3, r2
 800c664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c666:	e05d      	b.n	800c724 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c66e:	d059      	beq.n	800c724 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c670:	f7fc fcfa 	bl	8009068 <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d302      	bcc.n	800c686 <UART_WaitOnFlagUntilTimeout+0x30>
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d11b      	bne.n	800c6be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c694:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	689a      	ldr	r2, [r3, #8]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f022 0201 	bic.w	r2, r2, #1
 800c6a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2220      	movs	r2, #32
 800c6aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	e042      	b.n	800c744 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 0304 	and.w	r3, r3, #4
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d02b      	beq.n	800c724 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c6da:	d123      	bne.n	800c724 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c6f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	689a      	ldr	r2, [r3, #8]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f022 0201 	bic.w	r2, r2, #1
 800c704:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2220      	movs	r2, #32
 800c70a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2220      	movs	r2, #32
 800c710:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2220      	movs	r2, #32
 800c716:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c720:	2303      	movs	r3, #3
 800c722:	e00f      	b.n	800c744 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	69da      	ldr	r2, [r3, #28]
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	4013      	ands	r3, r2
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	429a      	cmp	r2, r3
 800c732:	bf0c      	ite	eq
 800c734:	2301      	moveq	r3, #1
 800c736:	2300      	movne	r3, #0
 800c738:	b2db      	uxtb	r3, r3
 800c73a:	461a      	mov	r2, r3
 800c73c:	79fb      	ldrb	r3, [r7, #7]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d092      	beq.n	800c668 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c74c:	b084      	sub	sp, #16
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	f107 001c 	add.w	r0, r7, #28
 800c75a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	2b01      	cmp	r3, #1
 800c762:	d120      	bne.n	800c7a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	68da      	ldr	r2, [r3, #12]
 800c774:	4b20      	ldr	r3, [pc, #128]	; (800c7f8 <USB_CoreInit+0xac>)
 800c776:	4013      	ands	r3, r2
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d105      	bne.n	800c79a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fa52 	bl	800cc44 <USB_CoreReset>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73fb      	strb	r3, [r7, #15]
 800c7a4:	e010      	b.n	800c7c8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fa46 	bl	800cc44 <USB_CoreReset>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d10b      	bne.n	800c7e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	f043 0206 	orr.w	r2, r3, #6
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	f043 0220 	orr.w	r2, r3, #32
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7f2:	b004      	add	sp, #16
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	ffbdffbf 	.word	0xffbdffbf

0800c7fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	f023 0201 	bic.w	r2, r3, #1
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b082      	sub	sp, #8
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
 800c826:	460b      	mov	r3, r1
 800c828:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c836:	78fb      	ldrb	r3, [r7, #3]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d106      	bne.n	800c84a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	60da      	str	r2, [r3, #12]
 800c848:	e00b      	b.n	800c862 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c84a:	78fb      	ldrb	r3, [r7, #3]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d106      	bne.n	800c85e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	60da      	str	r2, [r3, #12]
 800c85c:	e001      	b.n	800c862 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c85e:	2301      	movs	r3, #1
 800c860:	e003      	b.n	800c86a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c862:	2032      	movs	r0, #50	; 0x32
 800c864:	f7fc fc0c 	bl	8009080 <HAL_Delay>

  return HAL_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c874:	b084      	sub	sp, #16
 800c876:	b580      	push	{r7, lr}
 800c878:	b086      	sub	sp, #24
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c88e:	2300      	movs	r3, #0
 800c890:	613b      	str	r3, [r7, #16]
 800c892:	e009      	b.n	800c8a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	3340      	adds	r3, #64	; 0x40
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4413      	add	r3, r2
 800c89e:	2200      	movs	r2, #0
 800c8a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	613b      	str	r3, [r7, #16]
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	2b0e      	cmp	r3, #14
 800c8ac:	d9f2      	bls.n	800c894 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d11c      	bne.n	800c8ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8c2:	f043 0302 	orr.w	r3, r3, #2
 800c8c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	e005      	b.n	800c8fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c900:	461a      	mov	r2, r3
 800c902:	2300      	movs	r3, #0
 800c904:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c90c:	4619      	mov	r1, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c914:	461a      	mov	r2, r3
 800c916:	680b      	ldr	r3, [r1, #0]
 800c918:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d10c      	bne.n	800c93a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	2b00      	cmp	r3, #0
 800c924:	d104      	bne.n	800c930 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c926:	2100      	movs	r1, #0
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f959 	bl	800cbe0 <USB_SetDevSpeed>
 800c92e:	e018      	b.n	800c962 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c930:	2101      	movs	r1, #1
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f954 	bl	800cbe0 <USB_SetDevSpeed>
 800c938:	e013      	b.n	800c962 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	2b03      	cmp	r3, #3
 800c93e:	d10c      	bne.n	800c95a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	2b00      	cmp	r3, #0
 800c944:	d104      	bne.n	800c950 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c946:	2100      	movs	r1, #0
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f949 	bl	800cbe0 <USB_SetDevSpeed>
 800c94e:	e008      	b.n	800c962 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c950:	2101      	movs	r1, #1
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f944 	bl	800cbe0 <USB_SetDevSpeed>
 800c958:	e003      	b.n	800c962 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c95a:	2103      	movs	r1, #3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f93f 	bl	800cbe0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c962:	2110      	movs	r1, #16
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f8f3 	bl	800cb50 <USB_FlushTxFifo>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d001      	beq.n	800c974 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f911 	bl	800cb9c <USB_FlushRxFifo>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	461a      	mov	r2, r3
 800c98c:	2300      	movs	r3, #0
 800c98e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c996:	461a      	mov	r2, r3
 800c998:	2300      	movs	r3, #0
 800c99a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	613b      	str	r3, [r7, #16]
 800c9ac:	e043      	b.n	800ca36 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	015a      	lsls	r2, r3, #5
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9c4:	d118      	bne.n	800c9f8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d10a      	bne.n	800c9e2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	015a      	lsls	r2, r3, #5
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d8:	461a      	mov	r2, r3
 800c9da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9de:	6013      	str	r3, [r2, #0]
 800c9e0:	e013      	b.n	800ca0a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	015a      	lsls	r2, r3, #5
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	e008      	b.n	800ca0a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	015a      	lsls	r2, r3, #5
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	4413      	add	r3, r2
 800ca00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca04:	461a      	mov	r2, r3
 800ca06:	2300      	movs	r3, #0
 800ca08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	015a      	lsls	r2, r3, #5
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	4413      	add	r3, r2
 800ca12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca16:	461a      	mov	r2, r3
 800ca18:	2300      	movs	r3, #0
 800ca1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	015a      	lsls	r2, r3, #5
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	4413      	add	r3, r2
 800ca24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca28:	461a      	mov	r2, r3
 800ca2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	3301      	adds	r3, #1
 800ca34:	613b      	str	r3, [r7, #16]
 800ca36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d3b7      	bcc.n	800c9ae <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca3e:	2300      	movs	r3, #0
 800ca40:	613b      	str	r3, [r7, #16]
 800ca42:	e043      	b.n	800cacc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	015a      	lsls	r2, r3, #5
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca5a:	d118      	bne.n	800ca8e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10a      	bne.n	800ca78 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e013      	b.n	800caa0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	015a      	lsls	r2, r3, #5
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	4413      	add	r3, r2
 800ca80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca84:	461a      	mov	r2, r3
 800ca86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	e008      	b.n	800caa0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	015a      	lsls	r2, r3, #5
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	4413      	add	r3, r2
 800ca96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	015a      	lsls	r2, r3, #5
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caac:	461a      	mov	r2, r3
 800caae:	2300      	movs	r3, #0
 800cab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	015a      	lsls	r2, r3, #5
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4413      	add	r3, r2
 800caba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cabe:	461a      	mov	r2, r3
 800cac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	3301      	adds	r3, #1
 800caca:	613b      	str	r3, [r7, #16]
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d3b7      	bcc.n	800ca44 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800caf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d105      	bne.n	800cb08 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	f043 0210 	orr.w	r2, r3, #16
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	699a      	ldr	r2, [r3, #24]
 800cb0c:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <USB_DevInit+0x2d4>)
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d005      	beq.n	800cb26 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	f043 0208 	orr.w	r2, r3, #8
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d105      	bne.n	800cb38 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	699a      	ldr	r2, [r3, #24]
 800cb30:	4b06      	ldr	r3, [pc, #24]	; (800cb4c <USB_DevInit+0x2d8>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb44:	b004      	add	sp, #16
 800cb46:	4770      	bx	lr
 800cb48:	803c3800 	.word	0x803c3800
 800cb4c:	40000004 	.word	0x40000004

0800cb50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	019b      	lsls	r3, r3, #6
 800cb62:	f043 0220 	orr.w	r2, r3, #32
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	60fb      	str	r3, [r7, #12]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4a09      	ldr	r2, [pc, #36]	; (800cb98 <USB_FlushTxFifo+0x48>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d901      	bls.n	800cb7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	e006      	b.n	800cb8a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	f003 0320 	and.w	r3, r3, #32
 800cb84:	2b20      	cmp	r3, #32
 800cb86:	d0f0      	beq.n	800cb6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3714      	adds	r7, #20
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	00030d40 	.word	0x00030d40

0800cb9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2210      	movs	r2, #16
 800cbac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	60fb      	str	r3, [r7, #12]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4a09      	ldr	r2, [pc, #36]	; (800cbdc <USB_FlushRxFifo+0x40>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d901      	bls.n	800cbc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	e006      	b.n	800cbce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	f003 0310 	and.w	r3, r3, #16
 800cbc8:	2b10      	cmp	r3, #16
 800cbca:	d0f0      	beq.n	800cbae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	00030d40 	.word	0x00030d40

0800cbe0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	78fb      	ldrb	r3, [r7, #3]
 800cbfa:	68f9      	ldr	r1, [r7, #12]
 800cbfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc00:	4313      	orrs	r3, r2
 800cc02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b084      	sub	sp, #16
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc2c:	f043 0302 	orr.w	r3, r3, #2
 800cc30:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800cc32:	2003      	movs	r0, #3
 800cc34:	f7fc fa24 	bl	8009080 <HAL_Delay>

  return HAL_OK;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
	...

0800cc44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3301      	adds	r3, #1
 800cc54:	60fb      	str	r3, [r7, #12]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	4a13      	ldr	r2, [pc, #76]	; (800cca8 <USB_CoreReset+0x64>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d901      	bls.n	800cc62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e01b      	b.n	800cc9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	daf2      	bge.n	800cc50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	f043 0201 	orr.w	r2, r3, #1
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	60fb      	str	r3, [r7, #12]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	4a09      	ldr	r2, [pc, #36]	; (800cca8 <USB_CoreReset+0x64>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d901      	bls.n	800cc8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	e006      	b.n	800cc9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d0f0      	beq.n	800cc7a <USB_CoreReset+0x36>

  return HAL_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	00030d40 	.word	0x00030d40

0800ccac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ccac:	b5b0      	push	{r4, r5, r7, lr}
 800ccae:	b08e      	sub	sp, #56	; 0x38
 800ccb0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ccb2:	4ba0      	ldr	r3, [pc, #640]	; (800cf34 <MX_LWIP_Init+0x288>)
 800ccb4:	22c0      	movs	r2, #192	; 0xc0
 800ccb6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ccb8:	4b9e      	ldr	r3, [pc, #632]	; (800cf34 <MX_LWIP_Init+0x288>)
 800ccba:	22a8      	movs	r2, #168	; 0xa8
 800ccbc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ccbe:	4b9d      	ldr	r3, [pc, #628]	; (800cf34 <MX_LWIP_Init+0x288>)
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 70;
 800ccc4:	4b9b      	ldr	r3, [pc, #620]	; (800cf34 <MX_LWIP_Init+0x288>)
 800ccc6:	2246      	movs	r2, #70	; 0x46
 800ccc8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ccca:	4b9b      	ldr	r3, [pc, #620]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cccc:	22ff      	movs	r2, #255	; 0xff
 800ccce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ccd0:	4b99      	ldr	r3, [pc, #612]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800ccd2:	22ff      	movs	r2, #255	; 0xff
 800ccd4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ccd6:	4b98      	ldr	r3, [pc, #608]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800ccd8:	22ff      	movs	r2, #255	; 0xff
 800ccda:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ccdc:	4b96      	ldr	r3, [pc, #600]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800cce2:	4b96      	ldr	r3, [pc, #600]	; (800cf3c <MX_LWIP_Init+0x290>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800cce8:	4b94      	ldr	r3, [pc, #592]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ccee:	4b93      	ldr	r3, [pc, #588]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800ccf4:	4b91      	ldr	r3, [pc, #580]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	f003 fdc9 	bl	8010894 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800cd02:	4b8c      	ldr	r3, [pc, #560]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	061a      	lsls	r2, r3, #24
 800cd08:	4b8a      	ldr	r3, [pc, #552]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd0a:	785b      	ldrb	r3, [r3, #1]
 800cd0c:	041b      	lsls	r3, r3, #16
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	4b88      	ldr	r3, [pc, #544]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd12:	789b      	ldrb	r3, [r3, #2]
 800cd14:	021b      	lsls	r3, r3, #8
 800cd16:	4313      	orrs	r3, r2
 800cd18:	4a86      	ldr	r2, [pc, #536]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd1a:	78d2      	ldrb	r2, [r2, #3]
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	061a      	lsls	r2, r3, #24
 800cd20:	4b84      	ldr	r3, [pc, #528]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	0619      	lsls	r1, r3, #24
 800cd26:	4b83      	ldr	r3, [pc, #524]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd28:	785b      	ldrb	r3, [r3, #1]
 800cd2a:	041b      	lsls	r3, r3, #16
 800cd2c:	4319      	orrs	r1, r3
 800cd2e:	4b81      	ldr	r3, [pc, #516]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd30:	789b      	ldrb	r3, [r3, #2]
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	430b      	orrs	r3, r1
 800cd36:	497f      	ldr	r1, [pc, #508]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd38:	78c9      	ldrb	r1, [r1, #3]
 800cd3a:	430b      	orrs	r3, r1
 800cd3c:	021b      	lsls	r3, r3, #8
 800cd3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd42:	431a      	orrs	r2, r3
 800cd44:	4b7b      	ldr	r3, [pc, #492]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	0619      	lsls	r1, r3, #24
 800cd4a:	4b7a      	ldr	r3, [pc, #488]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd4c:	785b      	ldrb	r3, [r3, #1]
 800cd4e:	041b      	lsls	r3, r3, #16
 800cd50:	4319      	orrs	r1, r3
 800cd52:	4b78      	ldr	r3, [pc, #480]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd54:	789b      	ldrb	r3, [r3, #2]
 800cd56:	021b      	lsls	r3, r3, #8
 800cd58:	430b      	orrs	r3, r1
 800cd5a:	4976      	ldr	r1, [pc, #472]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd5c:	78c9      	ldrb	r1, [r1, #3]
 800cd5e:	430b      	orrs	r3, r1
 800cd60:	0a1b      	lsrs	r3, r3, #8
 800cd62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cd66:	431a      	orrs	r2, r3
 800cd68:	4b72      	ldr	r3, [pc, #456]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	0619      	lsls	r1, r3, #24
 800cd6e:	4b71      	ldr	r3, [pc, #452]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd70:	785b      	ldrb	r3, [r3, #1]
 800cd72:	041b      	lsls	r3, r3, #16
 800cd74:	4319      	orrs	r1, r3
 800cd76:	4b6f      	ldr	r3, [pc, #444]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd78:	789b      	ldrb	r3, [r3, #2]
 800cd7a:	021b      	lsls	r3, r3, #8
 800cd7c:	430b      	orrs	r3, r1
 800cd7e:	496d      	ldr	r1, [pc, #436]	; (800cf34 <MX_LWIP_Init+0x288>)
 800cd80:	78c9      	ldrb	r1, [r1, #3]
 800cd82:	430b      	orrs	r3, r1
 800cd84:	0e1b      	lsrs	r3, r3, #24
 800cd86:	4313      	orrs	r3, r2
 800cd88:	4a6d      	ldr	r2, [pc, #436]	; (800cf40 <MX_LWIP_Init+0x294>)
 800cd8a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800cd8c:	4b6a      	ldr	r3, [pc, #424]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	061a      	lsls	r2, r3, #24
 800cd92:	4b69      	ldr	r3, [pc, #420]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cd94:	785b      	ldrb	r3, [r3, #1]
 800cd96:	041b      	lsls	r3, r3, #16
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	4b67      	ldr	r3, [pc, #412]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cd9c:	789b      	ldrb	r3, [r3, #2]
 800cd9e:	021b      	lsls	r3, r3, #8
 800cda0:	4313      	orrs	r3, r2
 800cda2:	4a65      	ldr	r2, [pc, #404]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cda4:	78d2      	ldrb	r2, [r2, #3]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	061a      	lsls	r2, r3, #24
 800cdaa:	4b63      	ldr	r3, [pc, #396]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	0619      	lsls	r1, r3, #24
 800cdb0:	4b61      	ldr	r3, [pc, #388]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdb2:	785b      	ldrb	r3, [r3, #1]
 800cdb4:	041b      	lsls	r3, r3, #16
 800cdb6:	4319      	orrs	r1, r3
 800cdb8:	4b5f      	ldr	r3, [pc, #380]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdba:	789b      	ldrb	r3, [r3, #2]
 800cdbc:	021b      	lsls	r3, r3, #8
 800cdbe:	430b      	orrs	r3, r1
 800cdc0:	495d      	ldr	r1, [pc, #372]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdc2:	78c9      	ldrb	r1, [r1, #3]
 800cdc4:	430b      	orrs	r3, r1
 800cdc6:	021b      	lsls	r3, r3, #8
 800cdc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cdcc:	431a      	orrs	r2, r3
 800cdce:	4b5a      	ldr	r3, [pc, #360]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	0619      	lsls	r1, r3, #24
 800cdd4:	4b58      	ldr	r3, [pc, #352]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdd6:	785b      	ldrb	r3, [r3, #1]
 800cdd8:	041b      	lsls	r3, r3, #16
 800cdda:	4319      	orrs	r1, r3
 800cddc:	4b56      	ldr	r3, [pc, #344]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdde:	789b      	ldrb	r3, [r3, #2]
 800cde0:	021b      	lsls	r3, r3, #8
 800cde2:	430b      	orrs	r3, r1
 800cde4:	4954      	ldr	r1, [pc, #336]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cde6:	78c9      	ldrb	r1, [r1, #3]
 800cde8:	430b      	orrs	r3, r1
 800cdea:	0a1b      	lsrs	r3, r3, #8
 800cdec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cdf0:	431a      	orrs	r2, r3
 800cdf2:	4b51      	ldr	r3, [pc, #324]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	0619      	lsls	r1, r3, #24
 800cdf8:	4b4f      	ldr	r3, [pc, #316]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800cdfa:	785b      	ldrb	r3, [r3, #1]
 800cdfc:	041b      	lsls	r3, r3, #16
 800cdfe:	4319      	orrs	r1, r3
 800ce00:	4b4d      	ldr	r3, [pc, #308]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800ce02:	789b      	ldrb	r3, [r3, #2]
 800ce04:	021b      	lsls	r3, r3, #8
 800ce06:	430b      	orrs	r3, r1
 800ce08:	494b      	ldr	r1, [pc, #300]	; (800cf38 <MX_LWIP_Init+0x28c>)
 800ce0a:	78c9      	ldrb	r1, [r1, #3]
 800ce0c:	430b      	orrs	r3, r1
 800ce0e:	0e1b      	lsrs	r3, r3, #24
 800ce10:	4313      	orrs	r3, r2
 800ce12:	4a4c      	ldr	r2, [pc, #304]	; (800cf44 <MX_LWIP_Init+0x298>)
 800ce14:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ce16:	4b49      	ldr	r3, [pc, #292]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	061a      	lsls	r2, r3, #24
 800ce1c:	4b47      	ldr	r3, [pc, #284]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce1e:	785b      	ldrb	r3, [r3, #1]
 800ce20:	041b      	lsls	r3, r3, #16
 800ce22:	431a      	orrs	r2, r3
 800ce24:	4b45      	ldr	r3, [pc, #276]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce26:	789b      	ldrb	r3, [r3, #2]
 800ce28:	021b      	lsls	r3, r3, #8
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	4a43      	ldr	r2, [pc, #268]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce2e:	78d2      	ldrb	r2, [r2, #3]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	061a      	lsls	r2, r3, #24
 800ce34:	4b41      	ldr	r3, [pc, #260]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	0619      	lsls	r1, r3, #24
 800ce3a:	4b40      	ldr	r3, [pc, #256]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce3c:	785b      	ldrb	r3, [r3, #1]
 800ce3e:	041b      	lsls	r3, r3, #16
 800ce40:	4319      	orrs	r1, r3
 800ce42:	4b3e      	ldr	r3, [pc, #248]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce44:	789b      	ldrb	r3, [r3, #2]
 800ce46:	021b      	lsls	r3, r3, #8
 800ce48:	430b      	orrs	r3, r1
 800ce4a:	493c      	ldr	r1, [pc, #240]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce4c:	78c9      	ldrb	r1, [r1, #3]
 800ce4e:	430b      	orrs	r3, r1
 800ce50:	021b      	lsls	r3, r3, #8
 800ce52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce56:	431a      	orrs	r2, r3
 800ce58:	4b38      	ldr	r3, [pc, #224]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	0619      	lsls	r1, r3, #24
 800ce5e:	4b37      	ldr	r3, [pc, #220]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce60:	785b      	ldrb	r3, [r3, #1]
 800ce62:	041b      	lsls	r3, r3, #16
 800ce64:	4319      	orrs	r1, r3
 800ce66:	4b35      	ldr	r3, [pc, #212]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce68:	789b      	ldrb	r3, [r3, #2]
 800ce6a:	021b      	lsls	r3, r3, #8
 800ce6c:	430b      	orrs	r3, r1
 800ce6e:	4933      	ldr	r1, [pc, #204]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce70:	78c9      	ldrb	r1, [r1, #3]
 800ce72:	430b      	orrs	r3, r1
 800ce74:	0a1b      	lsrs	r3, r3, #8
 800ce76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	4b2f      	ldr	r3, [pc, #188]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	0619      	lsls	r1, r3, #24
 800ce82:	4b2e      	ldr	r3, [pc, #184]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce84:	785b      	ldrb	r3, [r3, #1]
 800ce86:	041b      	lsls	r3, r3, #16
 800ce88:	4319      	orrs	r1, r3
 800ce8a:	4b2c      	ldr	r3, [pc, #176]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce8c:	789b      	ldrb	r3, [r3, #2]
 800ce8e:	021b      	lsls	r3, r3, #8
 800ce90:	430b      	orrs	r3, r1
 800ce92:	492a      	ldr	r1, [pc, #168]	; (800cf3c <MX_LWIP_Init+0x290>)
 800ce94:	78c9      	ldrb	r1, [r1, #3]
 800ce96:	430b      	orrs	r3, r1
 800ce98:	0e1b      	lsrs	r3, r3, #24
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	4a2a      	ldr	r2, [pc, #168]	; (800cf48 <MX_LWIP_Init+0x29c>)
 800ce9e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800cea0:	4b2a      	ldr	r3, [pc, #168]	; (800cf4c <MX_LWIP_Init+0x2a0>)
 800cea2:	9302      	str	r3, [sp, #8]
 800cea4:	4b2a      	ldr	r3, [pc, #168]	; (800cf50 <MX_LWIP_Init+0x2a4>)
 800cea6:	9301      	str	r3, [sp, #4]
 800cea8:	2300      	movs	r3, #0
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	4b26      	ldr	r3, [pc, #152]	; (800cf48 <MX_LWIP_Init+0x29c>)
 800ceae:	4a25      	ldr	r2, [pc, #148]	; (800cf44 <MX_LWIP_Init+0x298>)
 800ceb0:	4923      	ldr	r1, [pc, #140]	; (800cf40 <MX_LWIP_Init+0x294>)
 800ceb2:	4828      	ldr	r0, [pc, #160]	; (800cf54 <MX_LWIP_Init+0x2a8>)
 800ceb4:	f005 f8c2 	bl	801203c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ceb8:	4826      	ldr	r0, [pc, #152]	; (800cf54 <MX_LWIP_Init+0x2a8>)
 800ceba:	f005 fa71 	bl	80123a0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800cebe:	4b25      	ldr	r3, [pc, #148]	; (800cf54 <MX_LWIP_Init+0x2a8>)
 800cec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cec4:	089b      	lsrs	r3, r3, #2
 800cec6:	f003 0301 	and.w	r3, r3, #1
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d003      	beq.n	800ced8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ced0:	4820      	ldr	r0, [pc, #128]	; (800cf54 <MX_LWIP_Init+0x2a8>)
 800ced2:	f005 fa75 	bl	80123c0 <netif_set_up>
 800ced6:	e002      	b.n	800cede <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800ced8:	481e      	ldr	r0, [pc, #120]	; (800cf54 <MX_LWIP_Init+0x2a8>)
 800ceda:	f005 fadd 	bl	8012498 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800cede:	491e      	ldr	r1, [pc, #120]	; (800cf58 <MX_LWIP_Init+0x2ac>)
 800cee0:	481c      	ldr	r0, [pc, #112]	; (800cf54 <MX_LWIP_Init+0x2a8>)
 800cee2:	f005 fb6f 	bl	80125c4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800cee6:	2300      	movs	r3, #0
 800cee8:	623b      	str	r3, [r7, #32]
 800ceea:	2300      	movs	r3, #0
 800ceec:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800ceee:	f107 0320 	add.w	r3, r7, #32
 800cef2:	2101      	movs	r1, #1
 800cef4:	4618      	mov	r0, r3
 800cef6:	f000 fd8f 	bl	800da18 <osSemaphoreCreate>
 800cefa:	4602      	mov	r2, r0
 800cefc:	4b17      	ldr	r3, [pc, #92]	; (800cf5c <MX_LWIP_Init+0x2b0>)
 800cefe:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800cf00:	4b17      	ldr	r3, [pc, #92]	; (800cf60 <MX_LWIP_Init+0x2b4>)
 800cf02:	4a14      	ldr	r2, [pc, #80]	; (800cf54 <MX_LWIP_Init+0x2a8>)
 800cf04:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800cf06:	4b15      	ldr	r3, [pc, #84]	; (800cf5c <MX_LWIP_Init+0x2b0>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a15      	ldr	r2, [pc, #84]	; (800cf60 <MX_LWIP_Init+0x2b4>)
 800cf0c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800cf0e:	4b15      	ldr	r3, [pc, #84]	; (800cf64 <MX_LWIP_Init+0x2b8>)
 800cf10:	1d3c      	adds	r4, r7, #4
 800cf12:	461d      	mov	r5, r3
 800cf14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cf1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800cf20:	1d3b      	adds	r3, r7, #4
 800cf22:	490f      	ldr	r1, [pc, #60]	; (800cf60 <MX_LWIP_Init+0x2b4>)
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 fc7a 	bl	800d81e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800cf2a:	bf00      	nop
 800cf2c:	3728      	adds	r7, #40	; 0x28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bdb0      	pop	{r4, r5, r7, pc}
 800cf32:	bf00      	nop
 800cf34:	20004b34 	.word	0x20004b34
 800cf38:	20004b30 	.word	0x20004b30
 800cf3c:	20004af4 	.word	0x20004af4
 800cf40:	20004b2c 	.word	0x20004b2c
 800cf44:	20004b38 	.word	0x20004b38
 800cf48:	20004b3c 	.word	0x20004b3c
 800cf4c:	080107d1 	.word	0x080107d1
 800cf50:	0800d5ad 	.word	0x0800d5ad
 800cf54:	20004af8 	.word	0x20004af8
 800cf58:	0800d691 	.word	0x0800d691
 800cf5c:	20000334 	.word	0x20000334
 800cf60:	20004aec 	.word	0x20004aec
 800cf64:	0801d05c 	.word	0x0801d05c

0800cf68 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08e      	sub	sp, #56	; 0x38
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf74:	2200      	movs	r2, #0
 800cf76:	601a      	str	r2, [r3, #0]
 800cf78:	605a      	str	r2, [r3, #4]
 800cf7a:	609a      	str	r2, [r3, #8]
 800cf7c:	60da      	str	r2, [r3, #12]
 800cf7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a52      	ldr	r2, [pc, #328]	; (800d0d0 <HAL_ETH_MspInit+0x168>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	f040 809e 	bne.w	800d0c8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800cf8c:	4b51      	ldr	r3, [pc, #324]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cf8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf90:	4a50      	ldr	r2, [pc, #320]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cf92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cf96:	6313      	str	r3, [r2, #48]	; 0x30
 800cf98:	4b4e      	ldr	r3, [pc, #312]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cf9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfa0:	623b      	str	r3, [r7, #32]
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	4b4b      	ldr	r3, [pc, #300]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa8:	4a4a      	ldr	r2, [pc, #296]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cfae:	6313      	str	r3, [r2, #48]	; 0x30
 800cfb0:	4b48      	ldr	r3, [pc, #288]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfb8:	61fb      	str	r3, [r7, #28]
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	4b45      	ldr	r3, [pc, #276]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc0:	4a44      	ldr	r2, [pc, #272]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cfc6:	6313      	str	r3, [r2, #48]	; 0x30
 800cfc8:	4b42      	ldr	r3, [pc, #264]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfd0:	61bb      	str	r3, [r7, #24]
 800cfd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cfd4:	4b3f      	ldr	r3, [pc, #252]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd8:	4a3e      	ldr	r2, [pc, #248]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfda:	f043 0304 	orr.w	r3, r3, #4
 800cfde:	6313      	str	r3, [r2, #48]	; 0x30
 800cfe0:	4b3c      	ldr	r3, [pc, #240]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	617b      	str	r3, [r7, #20]
 800cfea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfec:	4b39      	ldr	r3, [pc, #228]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cfee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff0:	4a38      	ldr	r2, [pc, #224]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cff2:	f043 0301 	orr.w	r3, r3, #1
 800cff6:	6313      	str	r3, [r2, #48]	; 0x30
 800cff8:	4b36      	ldr	r3, [pc, #216]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800cffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cffc:	f003 0301 	and.w	r3, r3, #1
 800d000:	613b      	str	r3, [r7, #16]
 800d002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d004:	4b33      	ldr	r3, [pc, #204]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800d006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d008:	4a32      	ldr	r2, [pc, #200]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800d00a:	f043 0302 	orr.w	r3, r3, #2
 800d00e:	6313      	str	r3, [r2, #48]	; 0x30
 800d010:	4b30      	ldr	r3, [pc, #192]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800d012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d014:	f003 0302 	and.w	r3, r3, #2
 800d018:	60fb      	str	r3, [r7, #12]
 800d01a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800d01c:	4b2d      	ldr	r3, [pc, #180]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800d01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d020:	4a2c      	ldr	r2, [pc, #176]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800d022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d026:	6313      	str	r3, [r2, #48]	; 0x30
 800d028:	4b2a      	ldr	r3, [pc, #168]	; (800d0d4 <HAL_ETH_MspInit+0x16c>)
 800d02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d030:	60bb      	str	r3, [r7, #8]
 800d032:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800d034:	2332      	movs	r3, #50	; 0x32
 800d036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d038:	2302      	movs	r3, #2
 800d03a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d03c:	2300      	movs	r3, #0
 800d03e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d040:	2303      	movs	r3, #3
 800d042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d044:	230b      	movs	r3, #11
 800d046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d04c:	4619      	mov	r1, r3
 800d04e:	4822      	ldr	r0, [pc, #136]	; (800d0d8 <HAL_ETH_MspInit+0x170>)
 800d050:	f7fd fad0 	bl	800a5f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800d054:	2386      	movs	r3, #134	; 0x86
 800d056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d058:	2302      	movs	r3, #2
 800d05a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d05c:	2300      	movs	r3, #0
 800d05e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d060:	2303      	movs	r3, #3
 800d062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d064:	230b      	movs	r3, #11
 800d066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d06c:	4619      	mov	r1, r3
 800d06e:	481b      	ldr	r0, [pc, #108]	; (800d0dc <HAL_ETH_MspInit+0x174>)
 800d070:	f7fd fac0 	bl	800a5f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800d074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d07a:	2302      	movs	r3, #2
 800d07c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d07e:	2300      	movs	r3, #0
 800d080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d082:	2303      	movs	r3, #3
 800d084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d086:	230b      	movs	r3, #11
 800d088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800d08a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d08e:	4619      	mov	r1, r3
 800d090:	4813      	ldr	r0, [pc, #76]	; (800d0e0 <HAL_ETH_MspInit+0x178>)
 800d092:	f7fd faaf 	bl	800a5f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800d096:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d09a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d09c:	2302      	movs	r3, #2
 800d09e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d0a8:	230b      	movs	r3, #11
 800d0aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d0ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	480c      	ldr	r0, [pc, #48]	; (800d0e4 <HAL_ETH_MspInit+0x17c>)
 800d0b4:	f7fd fa9e 	bl	800a5f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2105      	movs	r1, #5
 800d0bc:	203d      	movs	r0, #61	; 0x3d
 800d0be:	f7fc f8dc 	bl	800927a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d0c2:	203d      	movs	r0, #61	; 0x3d
 800d0c4:	f7fc f8f5 	bl	80092b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800d0c8:	bf00      	nop
 800d0ca:	3738      	adds	r7, #56	; 0x38
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	40028000 	.word	0x40028000
 800d0d4:	40023800 	.word	0x40023800
 800d0d8:	40020800 	.word	0x40020800
 800d0dc:	40020000 	.word	0x40020000
 800d0e0:	40020400 	.word	0x40020400
 800d0e4:	40021800 	.word	0x40021800

0800d0e8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800d0f0:	4b04      	ldr	r3, [pc, #16]	; (800d104 <HAL_ETH_RxCpltCallback+0x1c>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f000 fd11 	bl	800db1c <osSemaphoreRelease>
}
 800d0fa:	bf00      	nop
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20000338 	.word	0x20000338

0800d108 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800d108:	b5b0      	push	{r4, r5, r7, lr}
 800d10a:	b090      	sub	sp, #64	; 0x40
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800d114:	4b5c      	ldr	r3, [pc, #368]	; (800d288 <low_level_init+0x180>)
 800d116:	4a5d      	ldr	r2, [pc, #372]	; (800d28c <low_level_init+0x184>)
 800d118:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800d11a:	4b5b      	ldr	r3, [pc, #364]	; (800d288 <low_level_init+0x180>)
 800d11c:	2201      	movs	r2, #1
 800d11e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800d120:	4b59      	ldr	r3, [pc, #356]	; (800d288 <low_level_init+0x180>)
 800d122:	2200      	movs	r2, #0
 800d124:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800d126:	2300      	movs	r3, #0
 800d128:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800d12c:	2380      	movs	r3, #128	; 0x80
 800d12e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800d132:	23e1      	movs	r3, #225	; 0xe1
 800d134:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800d138:	2300      	movs	r3, #0
 800d13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800d13e:	2300      	movs	r3, #0
 800d140:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800d144:	2300      	movs	r3, #0
 800d146:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800d14a:	4a4f      	ldr	r2, [pc, #316]	; (800d288 <low_level_init+0x180>)
 800d14c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d150:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800d152:	4b4d      	ldr	r3, [pc, #308]	; (800d288 <low_level_init+0x180>)
 800d154:	2201      	movs	r2, #1
 800d156:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800d158:	4b4b      	ldr	r3, [pc, #300]	; (800d288 <low_level_init+0x180>)
 800d15a:	2200      	movs	r2, #0
 800d15c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800d15e:	4b4a      	ldr	r3, [pc, #296]	; (800d288 <low_level_init+0x180>)
 800d160:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d164:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d166:	4848      	ldr	r0, [pc, #288]	; (800d288 <low_level_init+0x180>)
 800d168:	f7fc f8be 	bl	80092e8 <HAL_ETH_Init>
 800d16c:	4603      	mov	r3, r0
 800d16e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800d172:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d176:	2b00      	cmp	r3, #0
 800d178:	d108      	bne.n	800d18c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d180:	f043 0304 	orr.w	r3, r3, #4
 800d184:	b2da      	uxtb	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800d18c:	2304      	movs	r3, #4
 800d18e:	4a40      	ldr	r2, [pc, #256]	; (800d290 <low_level_init+0x188>)
 800d190:	4940      	ldr	r1, [pc, #256]	; (800d294 <low_level_init+0x18c>)
 800d192:	483d      	ldr	r0, [pc, #244]	; (800d288 <low_level_init+0x180>)
 800d194:	f7fc fa44 	bl	8009620 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800d198:	2304      	movs	r3, #4
 800d19a:	4a3f      	ldr	r2, [pc, #252]	; (800d298 <low_level_init+0x190>)
 800d19c:	493f      	ldr	r1, [pc, #252]	; (800d29c <low_level_init+0x194>)
 800d19e:	483a      	ldr	r0, [pc, #232]	; (800d288 <low_level_init+0x180>)
 800d1a0:	f7fc faa7 	bl	80096f2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2206      	movs	r2, #6
 800d1a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d1ac:	4b36      	ldr	r3, [pc, #216]	; (800d288 <low_level_init+0x180>)
 800d1ae:	695b      	ldr	r3, [r3, #20]
 800d1b0:	781a      	ldrb	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d1b8:	4b33      	ldr	r3, [pc, #204]	; (800d288 <low_level_init+0x180>)
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	785a      	ldrb	r2, [r3, #1]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d1c4:	4b30      	ldr	r3, [pc, #192]	; (800d288 <low_level_init+0x180>)
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	789a      	ldrb	r2, [r3, #2]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d1d0:	4b2d      	ldr	r3, [pc, #180]	; (800d288 <low_level_init+0x180>)
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	78da      	ldrb	r2, [r3, #3]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d1dc:	4b2a      	ldr	r3, [pc, #168]	; (800d288 <low_level_init+0x180>)
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	791a      	ldrb	r2, [r3, #4]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d1e8:	4b27      	ldr	r3, [pc, #156]	; (800d288 <low_level_init+0x180>)
 800d1ea:	695b      	ldr	r3, [r3, #20]
 800d1ec:	795a      	ldrb	r2, [r3, #5]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d1fa:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d202:	f043 030a 	orr.w	r3, r3, #10
 800d206:	b2da      	uxtb	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800d20e:	2300      	movs	r3, #0
 800d210:	62bb      	str	r3, [r7, #40]	; 0x28
 800d212:	2300      	movs	r3, #0
 800d214:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d21a:	2101      	movs	r1, #1
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 fbfb 	bl	800da18 <osSemaphoreCreate>
 800d222:	4602      	mov	r2, r0
 800d224:	4b1e      	ldr	r3, [pc, #120]	; (800d2a0 <low_level_init+0x198>)
 800d226:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800d228:	4b1e      	ldr	r3, [pc, #120]	; (800d2a4 <low_level_init+0x19c>)
 800d22a:	f107 040c 	add.w	r4, r7, #12
 800d22e:	461d      	mov	r5, r3
 800d230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d234:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d238:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800d23c:	f107 030c 	add.w	r3, r7, #12
 800d240:	6879      	ldr	r1, [r7, #4]
 800d242:	4618      	mov	r0, r3
 800d244:	f000 faeb 	bl	800d81e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800d248:	480f      	ldr	r0, [pc, #60]	; (800d288 <low_level_init+0x180>)
 800d24a:	f7fc fd7a 	bl	8009d42 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */
    
/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800d24e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d252:	461a      	mov	r2, r3
 800d254:	211d      	movs	r1, #29
 800d256:	480c      	ldr	r0, [pc, #48]	; (800d288 <low_level_init+0x180>)
 800d258:	f7fc fca5 	bl	8009ba6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25e:	f043 030b 	orr.w	r3, r3, #11
 800d262:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	461a      	mov	r2, r3
 800d268:	211d      	movs	r1, #29
 800d26a:	4807      	ldr	r0, [pc, #28]	; (800d288 <low_level_init+0x180>)
 800d26c:	f7fc fd03 	bl	8009c76 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800d270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d274:	461a      	mov	r2, r3
 800d276:	211d      	movs	r1, #29
 800d278:	4803      	ldr	r0, [pc, #12]	; (800d288 <low_level_init+0x180>)
 800d27a:	f7fc fc94 	bl	8009ba6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800d27e:	bf00      	nop
 800d280:	3740      	adds	r7, #64	; 0x40
 800d282:	46bd      	mov	sp, r7
 800d284:	bdb0      	pop	{r4, r5, r7, pc}
 800d286:	bf00      	nop
 800d288:	20006410 	.word	0x20006410
 800d28c:	40028000 	.word	0x40028000
 800d290:	20006458 	.word	0x20006458
 800d294:	20004b40 	.word	0x20004b40
 800d298:	20004bc0 	.word	0x20004bc0
 800d29c:	20006390 	.word	0x20006390
 800d2a0:	20000338 	.word	0x20000338
 800d2a4:	0801d080 	.word	0x0801d080

0800d2a8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b08a      	sub	sp, #40	; 0x28
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d2b2:	4b4b      	ldr	r3, [pc, #300]	; (800d3e0 <low_level_output+0x138>)
 800d2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800d2ca:	4b45      	ldr	r3, [pc, #276]	; (800d3e0 <low_level_output+0x138>)
 800d2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ce:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	623b      	str	r3, [r7, #32]
 800d2d8:	e05a      	b.n	800d390 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	da03      	bge.n	800d2ea <low_level_output+0x42>
      {
        errval = ERR_USE;
 800d2e2:	23f8      	movs	r3, #248	; 0xf8
 800d2e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800d2e8:	e05c      	b.n	800d3a4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800d2ea:	6a3b      	ldr	r3, [r7, #32]
 800d2ec:	895b      	ldrh	r3, [r3, #10]
 800d2ee:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d2f4:	e02f      	b.n	800d356 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800d2f6:	69fa      	ldr	r2, [r7, #28]
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	18d0      	adds	r0, r2, r3
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	685a      	ldr	r2, [r3, #4]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	18d1      	adds	r1, r2, r3
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d30a:	1a9b      	subs	r3, r3, r2
 800d30c:	461a      	mov	r2, r3
 800d30e:	f00e ff2e 	bl	801c16e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	da03      	bge.n	800d328 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800d320:	23f8      	movs	r3, #248	; 0xf8
 800d322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800d326:	e03d      	b.n	800d3a4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d32e:	693a      	ldr	r2, [r7, #16]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	4413      	add	r3, r2
 800d334:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d338:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d344:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d350:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	4413      	add	r3, r2
 800d35c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d360:	4293      	cmp	r3, r2
 800d362:	d8c8      	bhi.n	800d2f6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d364:	69fa      	ldr	r2, [r7, #28]
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	18d0      	adds	r0, r2, r3
 800d36a:	6a3b      	ldr	r3, [r7, #32]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	4413      	add	r3, r2
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	4619      	mov	r1, r3
 800d376:	f00e fefa 	bl	801c16e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	4413      	add	r3, r2
 800d380:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	4413      	add	r3, r2
 800d388:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800d38a:	6a3b      	ldr	r3, [r7, #32]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	623b      	str	r3, [r7, #32]
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1a1      	bne.n	800d2da <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800d396:	6979      	ldr	r1, [r7, #20]
 800d398:	4811      	ldr	r0, [pc, #68]	; (800d3e0 <low_level_output+0x138>)
 800d39a:	f7fc fa17 	bl	80097cc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800d3a4:	4b0e      	ldr	r3, [pc, #56]	; (800d3e0 <low_level_output+0x138>)
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	f241 0314 	movw	r3, #4116	; 0x1014
 800d3ac:	4413      	add	r3, r2
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 0320 	and.w	r3, r3, #32
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00d      	beq.n	800d3d4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d3b8:	4b09      	ldr	r3, [pc, #36]	; (800d3e0 <low_level_output+0x138>)
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	f241 0314 	movw	r3, #4116	; 0x1014
 800d3c0:	4413      	add	r3, r2
 800d3c2:	2220      	movs	r2, #32
 800d3c4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800d3c6:	4b06      	ldr	r3, [pc, #24]	; (800d3e0 <low_level_output+0x138>)
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	f241 0304 	movw	r3, #4100	; 0x1004
 800d3ce:	4413      	add	r3, r2
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800d3d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3728      	adds	r7, #40	; 0x28
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	20006410 	.word	0x20006410

0800d3e4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08c      	sub	sp, #48	; 0x30
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800d404:	2300      	movs	r3, #0
 800d406:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800d408:	484f      	ldr	r0, [pc, #316]	; (800d548 <low_level_input+0x164>)
 800d40a:	f7fc fac9 	bl	80099a0 <HAL_ETH_GetReceivedFrame_IT>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <low_level_input+0x34>

    return NULL;
 800d414:	2300      	movs	r3, #0
 800d416:	e092      	b.n	800d53e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800d418:	4b4b      	ldr	r3, [pc, #300]	; (800d548 <low_level_input+0x164>)
 800d41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d41e:	4b4a      	ldr	r3, [pc, #296]	; (800d548 <low_level_input+0x164>)
 800d420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d422:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800d424:	89fb      	ldrh	r3, [r7, #14]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d007      	beq.n	800d43a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800d42a:	89fb      	ldrh	r3, [r7, #14]
 800d42c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800d430:	4619      	mov	r1, r3
 800d432:	2000      	movs	r0, #0
 800d434:	f005 f990 	bl	8012758 <pbuf_alloc>
 800d438:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d04b      	beq.n	800d4d8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d440:	4b41      	ldr	r3, [pc, #260]	; (800d548 <low_level_input+0x164>)
 800d442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d444:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800d446:	2300      	movs	r3, #0
 800d448:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d44e:	e040      	b.n	800d4d2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d452:	895b      	ldrh	r3, [r3, #10]
 800d454:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d45a:	e021      	b.n	800d4a0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	18d0      	adds	r0, r2, r3
 800d464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	18d1      	adds	r1, r2, r3
 800d46a:	69fa      	ldr	r2, [r7, #28]
 800d46c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d470:	1a9b      	subs	r3, r3, r2
 800d472:	461a      	mov	r2, r3
 800d474:	f00e fe7b 	bl	801c16e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800d47e:	6a3b      	ldr	r3, [r7, #32]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d484:	69fa      	ldr	r2, [r7, #28]
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	4413      	add	r3, r2
 800d48a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d48e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800d490:	69ba      	ldr	r2, [r7, #24]
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d49a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800d49c:	2300      	movs	r3, #0
 800d49e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d4a0:	697a      	ldr	r2, [r7, #20]
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d8d6      	bhi.n	800d45c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	685a      	ldr	r2, [r3, #4]
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	18d0      	adds	r0, r2, r3
 800d4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	697a      	ldr	r2, [r7, #20]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	f00e fe55 	bl	801c16e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d4c4:	69fa      	ldr	r2, [r7, #28]
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1bb      	bne.n	800d450 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d4d8:	4b1b      	ldr	r3, [pc, #108]	; (800d548 <low_level_input+0x164>)
 800d4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4dc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d4de:	2300      	movs	r3, #0
 800d4e0:	613b      	str	r3, [r7, #16]
 800d4e2:	e00b      	b.n	800d4fc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d4e4:	6a3b      	ldr	r3, [r7, #32]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	613b      	str	r3, [r7, #16]
 800d4fc:	4b12      	ldr	r3, [pc, #72]	; (800d548 <low_level_input+0x164>)
 800d4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d500:	693a      	ldr	r2, [r7, #16]
 800d502:	429a      	cmp	r2, r3
 800d504:	d3ee      	bcc.n	800d4e4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800d506:	4b10      	ldr	r3, [pc, #64]	; (800d548 <low_level_input+0x164>)
 800d508:	2200      	movs	r2, #0
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800d50c:	4b0e      	ldr	r3, [pc, #56]	; (800d548 <low_level_input+0x164>)
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	f241 0314 	movw	r3, #4116	; 0x1014
 800d514:	4413      	add	r3, r2
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00d      	beq.n	800d53c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800d520:	4b09      	ldr	r3, [pc, #36]	; (800d548 <low_level_input+0x164>)
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	f241 0314 	movw	r3, #4116	; 0x1014
 800d528:	4413      	add	r3, r2
 800d52a:	2280      	movs	r2, #128	; 0x80
 800d52c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800d52e:	4b06      	ldr	r3, [pc, #24]	; (800d548 <low_level_input+0x164>)
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	f241 0308 	movw	r3, #4104	; 0x1008
 800d536:	4413      	add	r3, r2
 800d538:	2200      	movs	r2, #0
 800d53a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800d53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3730      	adds	r7, #48	; 0x30
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	20006410 	.word	0x20006410

0800d54c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d558:	4b12      	ldr	r3, [pc, #72]	; (800d5a4 <ethernetif_input+0x58>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d560:	4618      	mov	r0, r3
 800d562:	f000 fa8d 	bl	800da80 <osSemaphoreWait>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1f5      	bne.n	800d558 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800d56c:	480e      	ldr	r0, [pc, #56]	; (800d5a8 <ethernetif_input+0x5c>)
 800d56e:	f00e fd6b 	bl	801c048 <sys_mutex_lock>
        p = low_level_input( netif );
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f7ff ff36 	bl	800d3e4 <low_level_input>
 800d578:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00a      	beq.n	800d596 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	68f9      	ldr	r1, [r7, #12]
 800d586:	68b8      	ldr	r0, [r7, #8]
 800d588:	4798      	blx	r3
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800d590:	68b8      	ldr	r0, [r7, #8]
 800d592:	f005 fbc1 	bl	8012d18 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800d596:	4804      	ldr	r0, [pc, #16]	; (800d5a8 <ethernetif_input+0x5c>)
 800d598:	f00e fd65 	bl	801c066 <sys_mutex_unlock>
      } while(p!=NULL);
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1e4      	bne.n	800d56c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d5a2:	e7d9      	b.n	800d558 <ethernetif_input+0xc>
 800d5a4:	20000338 	.word	0x20000338
 800d5a8:	20007c28 	.word	0x20007c28

0800d5ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d106      	bne.n	800d5c8 <ethernetif_init+0x1c>
 800d5ba:	4b0e      	ldr	r3, [pc, #56]	; (800d5f4 <ethernetif_init+0x48>)
 800d5bc:	f240 2233 	movw	r2, #563	; 0x233
 800d5c0:	490d      	ldr	r1, [pc, #52]	; (800d5f8 <ethernetif_init+0x4c>)
 800d5c2:	480e      	ldr	r0, [pc, #56]	; (800d5fc <ethernetif_init+0x50>)
 800d5c4:	f00e fde6 	bl	801c194 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2273      	movs	r2, #115	; 0x73
 800d5cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2274      	movs	r2, #116	; 0x74
 800d5d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4a09      	ldr	r2, [pc, #36]	; (800d600 <ethernetif_init+0x54>)
 800d5dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a08      	ldr	r2, [pc, #32]	; (800d604 <ethernetif_init+0x58>)
 800d5e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff fd8f 	bl	800d108 <low_level_init>

  return ERR_OK;
 800d5ea:	2300      	movs	r3, #0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	0801d09c 	.word	0x0801d09c
 800d5f8:	0801d0b8 	.word	0x0801d0b8
 800d5fc:	0801d0c8 	.word	0x0801d0c8
 800d600:	0801a201 	.word	0x0801a201
 800d604:	0800d2a9 	.word	0x0800d2a9

0800d608 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d60c:	f7fb fd2c 	bl	8009068 <HAL_GetTick>
 800d610:	4603      	mov	r3, r0
}
 800d612:	4618      	mov	r0, r3
 800d614:	bd80      	pop	{r7, pc}
	...

0800d618 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800d620:	2300      	movs	r3, #0
 800d622:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800d628:	f107 0308 	add.w	r3, r7, #8
 800d62c:	461a      	mov	r2, r3
 800d62e:	2101      	movs	r1, #1
 800d630:	4816      	ldr	r0, [pc, #88]	; (800d68c <ethernetif_set_link+0x74>)
 800d632:	f7fc fab8 	bl	8009ba6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	f003 0304 	and.w	r3, r3, #4
 800d63c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d646:	f003 0304 	and.w	r3, r3, #4
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d108      	bne.n	800d660 <ethernetif_set_link+0x48>
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d005      	beq.n	800d660 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4618      	mov	r0, r3
 800d65a:	f004 ff4f 	bl	80124fc <netif_set_link_up>
 800d65e:	e011      	b.n	800d684 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d668:	089b      	lsrs	r3, r3, #2
 800d66a:	f003 0301 	and.w	r3, r3, #1
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d007      	beq.n	800d684 <ethernetif_set_link+0x6c>
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d104      	bne.n	800d684 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4618      	mov	r0, r3
 800d680:	f004 ff70 	bl	8012564 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800d684:	20c8      	movs	r0, #200	; 0xc8
 800d686:	f000 f916 	bl	800d8b6 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800d68a:	e7cd      	b.n	800d628 <ethernetif_set_link+0x10>
 800d68c:	20006410 	.word	0x20006410

0800d690 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6a6:	089b      	lsrs	r3, r3, #2
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d05d      	beq.n	800d76e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800d6b2:	4b34      	ldr	r3, [pc, #208]	; (800d784 <ethernetif_update_config+0xf4>)
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d03f      	beq.n	800d73a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800d6ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d6be:	2100      	movs	r1, #0
 800d6c0:	4830      	ldr	r0, [pc, #192]	; (800d784 <ethernetif_update_config+0xf4>)
 800d6c2:	f7fc fad8 	bl	8009c76 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800d6c6:	f7fb fccf 	bl	8009068 <HAL_GetTick>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800d6ce:	f107 0308 	add.w	r3, r7, #8
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	2101      	movs	r1, #1
 800d6d6:	482b      	ldr	r0, [pc, #172]	; (800d784 <ethernetif_update_config+0xf4>)
 800d6d8:	f7fc fa65 	bl	8009ba6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800d6dc:	f7fb fcc4 	bl	8009068 <HAL_GetTick>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	1ad3      	subs	r3, r2, r3
 800d6e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6ea:	d828      	bhi.n	800d73e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	f003 0320 	and.w	r3, r3, #32
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d0eb      	beq.n	800d6ce <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800d6f6:	f107 0308 	add.w	r3, r7, #8
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	211f      	movs	r1, #31
 800d6fe:	4821      	ldr	r0, [pc, #132]	; (800d784 <ethernetif_update_config+0xf4>)
 800d700:	f7fc fa51 	bl	8009ba6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	f003 0310 	and.w	r3, r3, #16
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d004      	beq.n	800d718 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800d70e:	4b1d      	ldr	r3, [pc, #116]	; (800d784 <ethernetif_update_config+0xf4>)
 800d710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d714:	60da      	str	r2, [r3, #12]
 800d716:	e002      	b.n	800d71e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800d718:	4b1a      	ldr	r3, [pc, #104]	; (800d784 <ethernetif_update_config+0xf4>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	f003 0304 	and.w	r3, r3, #4
 800d724:	2b00      	cmp	r3, #0
 800d726:	d003      	beq.n	800d730 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800d728:	4b16      	ldr	r3, [pc, #88]	; (800d784 <ethernetif_update_config+0xf4>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	609a      	str	r2, [r3, #8]
 800d72e:	e016      	b.n	800d75e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800d730:	4b14      	ldr	r3, [pc, #80]	; (800d784 <ethernetif_update_config+0xf4>)
 800d732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d736:	609a      	str	r2, [r3, #8]
 800d738:	e011      	b.n	800d75e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800d73a:	bf00      	nop
 800d73c:	e000      	b.n	800d740 <ethernetif_update_config+0xb0>
          goto error;
 800d73e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800d740:	4b10      	ldr	r3, [pc, #64]	; (800d784 <ethernetif_update_config+0xf4>)
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	08db      	lsrs	r3, r3, #3
 800d746:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800d748:	4b0e      	ldr	r3, [pc, #56]	; (800d784 <ethernetif_update_config+0xf4>)
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	085b      	lsrs	r3, r3, #1
 800d74e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800d750:	4313      	orrs	r3, r2
 800d752:	b29b      	uxth	r3, r3
 800d754:	461a      	mov	r2, r3
 800d756:	2100      	movs	r1, #0
 800d758:	480a      	ldr	r0, [pc, #40]	; (800d784 <ethernetif_update_config+0xf4>)
 800d75a:	f7fc fa8c 	bl	8009c76 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800d75e:	2100      	movs	r1, #0
 800d760:	4808      	ldr	r0, [pc, #32]	; (800d784 <ethernetif_update_config+0xf4>)
 800d762:	f7fc fb4d 	bl	8009e00 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800d766:	4807      	ldr	r0, [pc, #28]	; (800d784 <ethernetif_update_config+0xf4>)
 800d768:	f7fc faeb 	bl	8009d42 <HAL_ETH_Start>
 800d76c:	e002      	b.n	800d774 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800d76e:	4805      	ldr	r0, [pc, #20]	; (800d784 <ethernetif_update_config+0xf4>)
 800d770:	f7fc fb16 	bl	8009da0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 f807 	bl	800d788 <ethernetif_notify_conn_changed>
}
 800d77a:	bf00      	nop
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	20006410 	.word	0x20006410

0800d788 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d7aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d7ae:	2b84      	cmp	r3, #132	; 0x84
 800d7b0:	d005      	beq.n	800d7be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d7b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	3303      	adds	r3, #3
 800d7bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d7be:	68fb      	ldr	r3, [r7, #12]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7d2:	f3ef 8305 	mrs	r3, IPSR
 800d7d6:	607b      	str	r3, [r7, #4]
  return(result);
 800d7d8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	bf14      	ite	ne
 800d7de:	2301      	movne	r3, #1
 800d7e0:	2300      	moveq	r3, #0
 800d7e2:	b2db      	uxtb	r3, r3
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d7f4:	f001 fc88 	bl	800f108 <vTaskStartScheduler>
  
  return osOK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d802:	f7ff ffe3 	bl	800d7cc <inHandlerMode>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d003      	beq.n	800d814 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d80c:	f001 fd9a 	bl	800f344 <xTaskGetTickCountFromISR>
 800d810:	4603      	mov	r3, r0
 800d812:	e002      	b.n	800d81a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d814:	f001 fd86 	bl	800f324 <xTaskGetTickCount>
 800d818:	4603      	mov	r3, r0
  }
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d81e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d820:	b089      	sub	sp, #36	; 0x24
 800d822:	af04      	add	r7, sp, #16
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	695b      	ldr	r3, [r3, #20]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d020      	beq.n	800d872 <osThreadCreate+0x54>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d01c      	beq.n	800d872 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685c      	ldr	r4, [r3, #4]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681d      	ldr	r5, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	691e      	ldr	r6, [r3, #16]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff ffa6 	bl	800d79c <makeFreeRtosPriority>
 800d850:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d85a:	9202      	str	r2, [sp, #8]
 800d85c:	9301      	str	r3, [sp, #4]
 800d85e:	9100      	str	r1, [sp, #0]
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	4632      	mov	r2, r6
 800d864:	4629      	mov	r1, r5
 800d866:	4620      	mov	r0, r4
 800d868:	f001 fa81 	bl	800ed6e <xTaskCreateStatic>
 800d86c:	4603      	mov	r3, r0
 800d86e:	60fb      	str	r3, [r7, #12]
 800d870:	e01c      	b.n	800d8ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685c      	ldr	r4, [r3, #4]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d87e:	b29e      	uxth	r6, r3
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d886:	4618      	mov	r0, r3
 800d888:	f7ff ff88 	bl	800d79c <makeFreeRtosPriority>
 800d88c:	4602      	mov	r2, r0
 800d88e:	f107 030c 	add.w	r3, r7, #12
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	9200      	str	r2, [sp, #0]
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	4632      	mov	r2, r6
 800d89a:	4629      	mov	r1, r5
 800d89c:	4620      	mov	r0, r4
 800d89e:	f001 fac6 	bl	800ee2e <xTaskCreate>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d001      	beq.n	800d8ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	e000      	b.n	800d8ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3714      	adds	r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d8b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b084      	sub	sp, #16
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <osDelay+0x16>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	e000      	b.n	800d8ce <osDelay+0x18>
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fbe4 	bl	800f09c <vTaskDelay>
  
  return osOK;
 800d8d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b082      	sub	sp, #8
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d007      	beq.n	800d8fe <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	2001      	movs	r0, #1
 800d8f6:	f000 fc52 	bl	800e19e <xQueueCreateMutexStatic>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	e003      	b.n	800d906 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d8fe:	2001      	movs	r0, #1
 800d900:	f000 fc35 	bl	800e16e <xQueueCreateMutex>
 800d904:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d906:	4618      	mov	r0, r3
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
	...

0800d910 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d91a:	2300      	movs	r3, #0
 800d91c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <osMutexWait+0x18>
    return osErrorParameter;
 800d924:	2380      	movs	r3, #128	; 0x80
 800d926:	e03a      	b.n	800d99e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800d928:	2300      	movs	r3, #0
 800d92a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d932:	d103      	bne.n	800d93c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800d934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d938:	60fb      	str	r3, [r7, #12]
 800d93a:	e009      	b.n	800d950 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d006      	beq.n	800d950 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d101      	bne.n	800d950 <osMutexWait+0x40>
      ticks = 1;
 800d94c:	2301      	movs	r3, #1
 800d94e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d950:	f7ff ff3c 	bl	800d7cc <inHandlerMode>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d017      	beq.n	800d98a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d95a:	f107 0308 	add.w	r3, r7, #8
 800d95e:	461a      	mov	r2, r3
 800d960:	2100      	movs	r1, #0
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f001 f858 	bl	800ea18 <xQueueReceiveFromISR>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d001      	beq.n	800d972 <osMutexWait+0x62>
      return osErrorOS;
 800d96e:	23ff      	movs	r3, #255	; 0xff
 800d970:	e015      	b.n	800d99e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d011      	beq.n	800d99c <osMutexWait+0x8c>
 800d978:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <osMutexWait+0x98>)
 800d97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	e008      	b.n	800d99c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d98a:	68f9      	ldr	r1, [r7, #12]
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 ff33 	bl	800e7f8 <xQueueSemaphoreTake>
 800d992:	4603      	mov	r3, r0
 800d994:	2b01      	cmp	r3, #1
 800d996:	d001      	beq.n	800d99c <osMutexWait+0x8c>
    return osErrorOS;
 800d998:	23ff      	movs	r3, #255	; 0xff
 800d99a:	e000      	b.n	800d99e <osMutexWait+0x8e>
  }
  
  return osOK;
 800d99c:	2300      	movs	r3, #0
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	e000ed04 	.word	0xe000ed04

0800d9ac <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d9bc:	f7ff ff06 	bl	800d7cc <inHandlerMode>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d016      	beq.n	800d9f4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d9c6:	f107 0308 	add.w	r3, r7, #8
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 fd9f 	bl	800e510 <xQueueGiveFromISR>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d001      	beq.n	800d9dc <osMutexRelease+0x30>
      return osErrorOS;
 800d9d8:	23ff      	movs	r3, #255	; 0xff
 800d9da:	e017      	b.n	800da0c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d013      	beq.n	800da0a <osMutexRelease+0x5e>
 800d9e2:	4b0c      	ldr	r3, [pc, #48]	; (800da14 <osMutexRelease+0x68>)
 800d9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	e00a      	b.n	800da0a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fbea 	bl	800e1d4 <xQueueGenericSend>
 800da00:	4603      	mov	r3, r0
 800da02:	2b01      	cmp	r3, #1
 800da04:	d001      	beq.n	800da0a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800da06:	23ff      	movs	r3, #255	; 0xff
 800da08:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800da0a:	68fb      	ldr	r3, [r7, #12]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	e000ed04 	.word	0xe000ed04

0800da18 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af02      	add	r7, sp, #8
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d010      	beq.n	800da4c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d10b      	bne.n	800da48 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	2303      	movs	r3, #3
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	4613      	mov	r3, r2
 800da3a:	2200      	movs	r2, #0
 800da3c:	2100      	movs	r1, #0
 800da3e:	2001      	movs	r0, #1
 800da40:	f000 fa9e 	bl	800df80 <xQueueGenericCreateStatic>
 800da44:	4603      	mov	r3, r0
 800da46:	e016      	b.n	800da76 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800da48:	2300      	movs	r3, #0
 800da4a:	e014      	b.n	800da76 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d110      	bne.n	800da74 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800da52:	2203      	movs	r2, #3
 800da54:	2100      	movs	r1, #0
 800da56:	2001      	movs	r0, #1
 800da58:	f000 fb0f 	bl	800e07a <xQueueGenericCreate>
 800da5c:	60f8      	str	r0, [r7, #12]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d005      	beq.n	800da70 <osSemaphoreCreate+0x58>
 800da64:	2300      	movs	r3, #0
 800da66:	2200      	movs	r2, #0
 800da68:	2100      	movs	r1, #0
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 fbb2 	bl	800e1d4 <xQueueGenericSend>
      return sema;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	e000      	b.n	800da76 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800da74:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
	...

0800da80 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800da8a:	2300      	movs	r3, #0
 800da8c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d101      	bne.n	800da98 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800da94:	2380      	movs	r3, #128	; 0x80
 800da96:	e03a      	b.n	800db0e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800da98:	2300      	movs	r3, #0
 800da9a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800daa2:	d103      	bne.n	800daac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800daa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daa8:	60fb      	str	r3, [r7, #12]
 800daaa:	e009      	b.n	800dac0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d006      	beq.n	800dac0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d101      	bne.n	800dac0 <osSemaphoreWait+0x40>
      ticks = 1;
 800dabc:	2301      	movs	r3, #1
 800dabe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dac0:	f7ff fe84 	bl	800d7cc <inHandlerMode>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d017      	beq.n	800dafa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800daca:	f107 0308 	add.w	r3, r7, #8
 800dace:	461a      	mov	r2, r3
 800dad0:	2100      	movs	r1, #0
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 ffa0 	bl	800ea18 <xQueueReceiveFromISR>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d001      	beq.n	800dae2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800dade:	23ff      	movs	r3, #255	; 0xff
 800dae0:	e015      	b.n	800db0e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d011      	beq.n	800db0c <osSemaphoreWait+0x8c>
 800dae8:	4b0b      	ldr	r3, [pc, #44]	; (800db18 <osSemaphoreWait+0x98>)
 800daea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	f3bf 8f6f 	isb	sy
 800daf8:	e008      	b.n	800db0c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dafa:	68f9      	ldr	r1, [r7, #12]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fe7b 	bl	800e7f8 <xQueueSemaphoreTake>
 800db02:	4603      	mov	r3, r0
 800db04:	2b01      	cmp	r3, #1
 800db06:	d001      	beq.n	800db0c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800db08:	23ff      	movs	r3, #255	; 0xff
 800db0a:	e000      	b.n	800db0e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	e000ed04 	.word	0xe000ed04

0800db1c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800db24:	2300      	movs	r3, #0
 800db26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800db28:	2300      	movs	r3, #0
 800db2a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800db2c:	f7ff fe4e 	bl	800d7cc <inHandlerMode>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d016      	beq.n	800db64 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800db36:	f107 0308 	add.w	r3, r7, #8
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fce7 	bl	800e510 <xQueueGiveFromISR>
 800db42:	4603      	mov	r3, r0
 800db44:	2b01      	cmp	r3, #1
 800db46:	d001      	beq.n	800db4c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800db48:	23ff      	movs	r3, #255	; 0xff
 800db4a:	e017      	b.n	800db7c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d013      	beq.n	800db7a <osSemaphoreRelease+0x5e>
 800db52:	4b0c      	ldr	r3, [pc, #48]	; (800db84 <osSemaphoreRelease+0x68>)
 800db54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	e00a      	b.n	800db7a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800db64:	2300      	movs	r3, #0
 800db66:	2200      	movs	r2, #0
 800db68:	2100      	movs	r1, #0
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fb32 	bl	800e1d4 <xQueueGenericSend>
 800db70:	4603      	mov	r3, r0
 800db72:	2b01      	cmp	r3, #1
 800db74:	d001      	beq.n	800db7a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800db76:	23ff      	movs	r3, #255	; 0xff
 800db78:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800db7a:	68fb      	ldr	r3, [r7, #12]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	e000ed04 	.word	0xe000ed04

0800db88 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800db88:	b590      	push	{r4, r7, lr}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af02      	add	r7, sp, #8
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d012      	beq.n	800dbc0 <osMessageCreate+0x38>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00e      	beq.n	800dbc0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6818      	ldr	r0, [r3, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6859      	ldr	r1, [r3, #4]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	689a      	ldr	r2, [r3, #8]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	68dc      	ldr	r4, [r3, #12]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	4623      	mov	r3, r4
 800dbb8:	f000 f9e2 	bl	800df80 <xQueueGenericCreateStatic>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	e008      	b.n	800dbd2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6818      	ldr	r0, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	4619      	mov	r1, r3
 800dbcc:	f000 fa55 	bl	800e07a <xQueueGenericCreate>
 800dbd0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	370c      	adds	r7, #12
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd90      	pop	{r4, r7, pc}
	...

0800dbdc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d101      	bne.n	800dbfa <osMessagePut+0x1e>
    ticks = 1;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800dbfa:	f7ff fde7 	bl	800d7cc <inHandlerMode>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d018      	beq.n	800dc36 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800dc04:	f107 0210 	add.w	r2, r7, #16
 800dc08:	f107 0108 	add.w	r1, r7, #8
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f000 fbe2 	bl	800e3d8 <xQueueGenericSendFromISR>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d001      	beq.n	800dc1e <osMessagePut+0x42>
      return osErrorOS;
 800dc1a:	23ff      	movs	r3, #255	; 0xff
 800dc1c:	e018      	b.n	800dc50 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d014      	beq.n	800dc4e <osMessagePut+0x72>
 800dc24:	4b0c      	ldr	r3, [pc, #48]	; (800dc58 <osMessagePut+0x7c>)
 800dc26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc2a:	601a      	str	r2, [r3, #0]
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	e00b      	b.n	800dc4e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800dc36:	f107 0108 	add.w	r1, r7, #8
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	697a      	ldr	r2, [r7, #20]
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f000 fac8 	bl	800e1d4 <xQueueGenericSend>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d001      	beq.n	800dc4e <osMessagePut+0x72>
      return osErrorOS;
 800dc4a:	23ff      	movs	r3, #255	; 0xff
 800dc4c:	e000      	b.n	800dc50 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	e000ed04 	.word	0xe000ed04

0800dc5c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800dc5c:	b590      	push	{r4, r7, lr}
 800dc5e:	b08b      	sub	sp, #44	; 0x2c
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d10a      	bne.n	800dc8c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800dc76:	2380      	movs	r3, #128	; 0x80
 800dc78:	617b      	str	r3, [r7, #20]
    return event;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	461c      	mov	r4, r3
 800dc7e:	f107 0314 	add.w	r3, r7, #20
 800dc82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc8a:	e054      	b.n	800dd36 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc9a:	d103      	bne.n	800dca4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800dc9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dca0:	627b      	str	r3, [r7, #36]	; 0x24
 800dca2:	e009      	b.n	800dcb8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d006      	beq.n	800dcb8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d101      	bne.n	800dcb8 <osMessageGet+0x5c>
      ticks = 1;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800dcb8:	f7ff fd88 	bl	800d7cc <inHandlerMode>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d01c      	beq.n	800dcfc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800dcc2:	f107 0220 	add.w	r2, r7, #32
 800dcc6:	f107 0314 	add.w	r3, r7, #20
 800dcca:	3304      	adds	r3, #4
 800dccc:	4619      	mov	r1, r3
 800dcce:	68b8      	ldr	r0, [r7, #8]
 800dcd0:	f000 fea2 	bl	800ea18 <xQueueReceiveFromISR>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d102      	bne.n	800dce0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800dcda:	2310      	movs	r3, #16
 800dcdc:	617b      	str	r3, [r7, #20]
 800dcde:	e001      	b.n	800dce4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dce4:	6a3b      	ldr	r3, [r7, #32]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d01d      	beq.n	800dd26 <osMessageGet+0xca>
 800dcea:	4b15      	ldr	r3, [pc, #84]	; (800dd40 <osMessageGet+0xe4>)
 800dcec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	e014      	b.n	800dd26 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800dcfc:	f107 0314 	add.w	r3, r7, #20
 800dd00:	3304      	adds	r3, #4
 800dd02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd04:	4619      	mov	r1, r3
 800dd06:	68b8      	ldr	r0, [r7, #8]
 800dd08:	f000 fc94 	bl	800e634 <xQueueReceive>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d102      	bne.n	800dd18 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800dd12:	2310      	movs	r3, #16
 800dd14:	617b      	str	r3, [r7, #20]
 800dd16:	e006      	b.n	800dd26 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d101      	bne.n	800dd22 <osMessageGet+0xc6>
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e000      	b.n	800dd24 <osMessageGet+0xc8>
 800dd22:	2340      	movs	r3, #64	; 0x40
 800dd24:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	461c      	mov	r4, r3
 800dd2a:	f107 0314 	add.w	r3, r7, #20
 800dd2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	372c      	adds	r7, #44	; 0x2c
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd90      	pop	{r4, r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	e000ed04 	.word	0xe000ed04

0800dd44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f103 0208 	add.w	r2, r3, #8
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f103 0208 	add.w	r2, r3, #8
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f103 0208 	add.w	r2, r3, #8
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd78:	bf00      	nop
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd92:	bf00      	nop
 800dd94:	370c      	adds	r7, #12
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd9e:	b480      	push	{r7}
 800dda0:	b085      	sub	sp, #20
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
 800dda6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	689a      	ldr	r2, [r3, #8]
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	683a      	ldr	r2, [r7, #0]
 800ddc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	1c5a      	adds	r2, r3, #1
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	601a      	str	r2, [r3, #0]
}
 800ddda:	bf00      	nop
 800dddc:	3714      	adds	r7, #20
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dde6:	b480      	push	{r7}
 800dde8:	b085      	sub	sp, #20
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddfc:	d103      	bne.n	800de06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	60fb      	str	r3, [r7, #12]
 800de04:	e00c      	b.n	800de20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	3308      	adds	r3, #8
 800de0a:	60fb      	str	r3, [r7, #12]
 800de0c:	e002      	b.n	800de14 <vListInsert+0x2e>
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	685b      	ldr	r3, [r3, #4]
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d2f6      	bcs.n	800de0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	685a      	ldr	r2, [r3, #4]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	683a      	ldr	r2, [r7, #0]
 800de3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	1c5a      	adds	r2, r3, #1
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	601a      	str	r2, [r3, #0]
}
 800de4c:	bf00      	nop
 800de4e:	3714      	adds	r7, #20
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	6892      	ldr	r2, [r2, #8]
 800de6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	6852      	ldr	r2, [r2, #4]
 800de78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	429a      	cmp	r2, r3
 800de82:	d103      	bne.n	800de8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	689a      	ldr	r2, [r3, #8]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	1e5a      	subs	r2, r3, #1
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10b      	bne.n	800ded8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec4:	b672      	cpsid	i
 800dec6:	f383 8811 	msr	BASEPRI, r3
 800deca:	f3bf 8f6f 	isb	sy
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	b662      	cpsie	i
 800ded4:	60bb      	str	r3, [r7, #8]
 800ded6:	e7fe      	b.n	800ded6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800ded8:	f002 f886 	bl	800ffe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dee4:	68f9      	ldr	r1, [r7, #12]
 800dee6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dee8:	fb01 f303 	mul.w	r3, r1, r3
 800deec:	441a      	add	r2, r3
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2200      	movs	r2, #0
 800def6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df08:	3b01      	subs	r3, #1
 800df0a:	68f9      	ldr	r1, [r7, #12]
 800df0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df0e:	fb01 f303 	mul.w	r3, r1, r3
 800df12:	441a      	add	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	22ff      	movs	r2, #255	; 0xff
 800df1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	22ff      	movs	r2, #255	; 0xff
 800df24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d114      	bne.n	800df58 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	691b      	ldr	r3, [r3, #16]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d01a      	beq.n	800df6c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3310      	adds	r3, #16
 800df3a:	4618      	mov	r0, r3
 800df3c:	f001 fb50 	bl	800f5e0 <xTaskRemoveFromEventList>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d012      	beq.n	800df6c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df46:	4b0d      	ldr	r3, [pc, #52]	; (800df7c <xQueueGenericReset+0xd0>)
 800df48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	f3bf 8f4f 	dsb	sy
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	e009      	b.n	800df6c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	3310      	adds	r3, #16
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff fef1 	bl	800dd44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	3324      	adds	r3, #36	; 0x24
 800df66:	4618      	mov	r0, r3
 800df68:	f7ff feec 	bl	800dd44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df6c:	f002 f86e 	bl	801004c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df70:	2301      	movs	r3, #1
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	e000ed04 	.word	0xe000ed04

0800df80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df80:	b580      	push	{r7, lr}
 800df82:	b08e      	sub	sp, #56	; 0x38
 800df84:	af02      	add	r7, sp, #8
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
 800df8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10b      	bne.n	800dfac <xQueueGenericCreateStatic+0x2c>
 800df94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df98:	b672      	cpsid	i
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	b662      	cpsie	i
 800dfa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfaa:	e7fe      	b.n	800dfaa <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d10b      	bne.n	800dfca <xQueueGenericCreateStatic+0x4a>
 800dfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb6:	b672      	cpsid	i
 800dfb8:	f383 8811 	msr	BASEPRI, r3
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f3bf 8f4f 	dsb	sy
 800dfc4:	b662      	cpsie	i
 800dfc6:	627b      	str	r3, [r7, #36]	; 0x24
 800dfc8:	e7fe      	b.n	800dfc8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d002      	beq.n	800dfd6 <xQueueGenericCreateStatic+0x56>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <xQueueGenericCreateStatic+0x5a>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e000      	b.n	800dfdc <xQueueGenericCreateStatic+0x5c>
 800dfda:	2300      	movs	r3, #0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10b      	bne.n	800dff8 <xQueueGenericCreateStatic+0x78>
 800dfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe4:	b672      	cpsid	i
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	b662      	cpsie	i
 800dff4:	623b      	str	r3, [r7, #32]
 800dff6:	e7fe      	b.n	800dff6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <xQueueGenericCreateStatic+0x84>
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d101      	bne.n	800e008 <xQueueGenericCreateStatic+0x88>
 800e004:	2301      	movs	r3, #1
 800e006:	e000      	b.n	800e00a <xQueueGenericCreateStatic+0x8a>
 800e008:	2300      	movs	r3, #0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10b      	bne.n	800e026 <xQueueGenericCreateStatic+0xa6>
 800e00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e012:	b672      	cpsid	i
 800e014:	f383 8811 	msr	BASEPRI, r3
 800e018:	f3bf 8f6f 	isb	sy
 800e01c:	f3bf 8f4f 	dsb	sy
 800e020:	b662      	cpsie	i
 800e022:	61fb      	str	r3, [r7, #28]
 800e024:	e7fe      	b.n	800e024 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e026:	2348      	movs	r3, #72	; 0x48
 800e028:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2b48      	cmp	r3, #72	; 0x48
 800e02e:	d00b      	beq.n	800e048 <xQueueGenericCreateStatic+0xc8>
 800e030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e034:	b672      	cpsid	i
 800e036:	f383 8811 	msr	BASEPRI, r3
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	b662      	cpsie	i
 800e044:	61bb      	str	r3, [r7, #24]
 800e046:	e7fe      	b.n	800e046 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e048:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00d      	beq.n	800e070 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	2201      	movs	r2, #1
 800e058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e05c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	4613      	mov	r3, r2
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	68b9      	ldr	r1, [r7, #8]
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f000 f846 	bl	800e0fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e072:	4618      	mov	r0, r3
 800e074:	3730      	adds	r7, #48	; 0x30
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b08a      	sub	sp, #40	; 0x28
 800e07e:	af02      	add	r7, sp, #8
 800e080:	60f8      	str	r0, [r7, #12]
 800e082:	60b9      	str	r1, [r7, #8]
 800e084:	4613      	mov	r3, r2
 800e086:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10b      	bne.n	800e0a6 <xQueueGenericCreate+0x2c>
 800e08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e092:	b672      	cpsid	i
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	b662      	cpsie	i
 800e0a2:	613b      	str	r3, [r7, #16]
 800e0a4:	e7fe      	b.n	800e0a4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d102      	bne.n	800e0b2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	61fb      	str	r3, [r7, #28]
 800e0b0:	e004      	b.n	800e0bc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	fb02 f303 	mul.w	r3, r2, r3
 800e0ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	3348      	adds	r3, #72	; 0x48
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f002 f8b3 	bl	801022c <pvPortMalloc>
 800e0c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d011      	beq.n	800e0f2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	3348      	adds	r3, #72	; 0x48
 800e0d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0e0:	79fa      	ldrb	r2, [r7, #7]
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	697a      	ldr	r2, [r7, #20]
 800e0ea:	68b9      	ldr	r1, [r7, #8]
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 f805 	bl	800e0fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0f2:	69bb      	ldr	r3, [r7, #24]
	}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3720      	adds	r7, #32
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d103      	bne.n	800e118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	69ba      	ldr	r2, [r7, #24]
 800e114:	601a      	str	r2, [r3, #0]
 800e116:	e002      	b.n	800e11e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e12a:	2101      	movs	r1, #1
 800e12c:	69b8      	ldr	r0, [r7, #24]
 800e12e:	f7ff febd 	bl	800deac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e132:	bf00      	nop
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b082      	sub	sp, #8
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00e      	beq.n	800e166 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2200      	movs	r2, #0
 800e152:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e15a:	2300      	movs	r3, #0
 800e15c:	2200      	movs	r2, #0
 800e15e:	2100      	movs	r1, #0
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 f837 	bl	800e1d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e166:	bf00      	nop
 800e168:	3708      	adds	r7, #8
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b086      	sub	sp, #24
 800e172:	af00      	add	r7, sp, #0
 800e174:	4603      	mov	r3, r0
 800e176:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e178:	2301      	movs	r3, #1
 800e17a:	617b      	str	r3, [r7, #20]
 800e17c:	2300      	movs	r3, #0
 800e17e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e180:	79fb      	ldrb	r3, [r7, #7]
 800e182:	461a      	mov	r2, r3
 800e184:	6939      	ldr	r1, [r7, #16]
 800e186:	6978      	ldr	r0, [r7, #20]
 800e188:	f7ff ff77 	bl	800e07a <xQueueGenericCreate>
 800e18c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f7ff ffd3 	bl	800e13a <prvInitialiseMutex>

		return xNewQueue;
 800e194:	68fb      	ldr	r3, [r7, #12]
	}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b088      	sub	sp, #32
 800e1a2:	af02      	add	r7, sp, #8
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	6039      	str	r1, [r7, #0]
 800e1a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	617b      	str	r3, [r7, #20]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e1b2:	79fb      	ldrb	r3, [r7, #7]
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	6939      	ldr	r1, [r7, #16]
 800e1bc:	6978      	ldr	r0, [r7, #20]
 800e1be:	f7ff fedf 	bl	800df80 <xQueueGenericCreateStatic>
 800e1c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f7ff ffb8 	bl	800e13a <prvInitialiseMutex>

		return xNewQueue;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
	}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08e      	sub	sp, #56	; 0x38
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10b      	bne.n	800e208 <xQueueGenericSend+0x34>
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	b672      	cpsid	i
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	b662      	cpsie	i
 800e204:	62bb      	str	r3, [r7, #40]	; 0x28
 800e206:	e7fe      	b.n	800e206 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d103      	bne.n	800e216 <xQueueGenericSend+0x42>
 800e20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e212:	2b00      	cmp	r3, #0
 800e214:	d101      	bne.n	800e21a <xQueueGenericSend+0x46>
 800e216:	2301      	movs	r3, #1
 800e218:	e000      	b.n	800e21c <xQueueGenericSend+0x48>
 800e21a:	2300      	movs	r3, #0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d10b      	bne.n	800e238 <xQueueGenericSend+0x64>
 800e220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e224:	b672      	cpsid	i
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	b662      	cpsie	i
 800e234:	627b      	str	r3, [r7, #36]	; 0x24
 800e236:	e7fe      	b.n	800e236 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d103      	bne.n	800e246 <xQueueGenericSend+0x72>
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e242:	2b01      	cmp	r3, #1
 800e244:	d101      	bne.n	800e24a <xQueueGenericSend+0x76>
 800e246:	2301      	movs	r3, #1
 800e248:	e000      	b.n	800e24c <xQueueGenericSend+0x78>
 800e24a:	2300      	movs	r3, #0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10b      	bne.n	800e268 <xQueueGenericSend+0x94>
 800e250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e254:	b672      	cpsid	i
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	b662      	cpsie	i
 800e264:	623b      	str	r3, [r7, #32]
 800e266:	e7fe      	b.n	800e266 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e268:	f001 fb78 	bl	800f95c <xTaskGetSchedulerState>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d102      	bne.n	800e278 <xQueueGenericSend+0xa4>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d101      	bne.n	800e27c <xQueueGenericSend+0xa8>
 800e278:	2301      	movs	r3, #1
 800e27a:	e000      	b.n	800e27e <xQueueGenericSend+0xaa>
 800e27c:	2300      	movs	r3, #0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10b      	bne.n	800e29a <xQueueGenericSend+0xc6>
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	b672      	cpsid	i
 800e288:	f383 8811 	msr	BASEPRI, r3
 800e28c:	f3bf 8f6f 	isb	sy
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	b662      	cpsie	i
 800e296:	61fb      	str	r3, [r7, #28]
 800e298:	e7fe      	b.n	800e298 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e29a:	f001 fea5 	bl	800ffe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d302      	bcc.n	800e2b0 <xQueueGenericSend+0xdc>
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d129      	bne.n	800e304 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2b0:	683a      	ldr	r2, [r7, #0]
 800e2b2:	68b9      	ldr	r1, [r7, #8]
 800e2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2b6:	f000 fc4a 	bl	800eb4e <prvCopyDataToQueue>
 800e2ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d010      	beq.n	800e2e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	3324      	adds	r3, #36	; 0x24
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f001 f989 	bl	800f5e0 <xTaskRemoveFromEventList>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d013      	beq.n	800e2fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e2d4:	4b3f      	ldr	r3, [pc, #252]	; (800e3d4 <xQueueGenericSend+0x200>)
 800e2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	e00a      	b.n	800e2fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d007      	beq.n	800e2fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e2ec:	4b39      	ldr	r3, [pc, #228]	; (800e3d4 <xQueueGenericSend+0x200>)
 800e2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2f2:	601a      	str	r2, [r3, #0]
 800e2f4:	f3bf 8f4f 	dsb	sy
 800e2f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e2fc:	f001 fea6 	bl	801004c <vPortExitCritical>
				return pdPASS;
 800e300:	2301      	movs	r3, #1
 800e302:	e063      	b.n	800e3cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d103      	bne.n	800e312 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e30a:	f001 fe9f 	bl	801004c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e30e:	2300      	movs	r3, #0
 800e310:	e05c      	b.n	800e3cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e314:	2b00      	cmp	r3, #0
 800e316:	d106      	bne.n	800e326 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e318:	f107 0314 	add.w	r3, r7, #20
 800e31c:	4618      	mov	r0, r3
 800e31e:	f001 f9c3 	bl	800f6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e322:	2301      	movs	r3, #1
 800e324:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e326:	f001 fe91 	bl	801004c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e32a:	f000 ff4f 	bl	800f1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e32e:	f001 fe5b 	bl	800ffe8 <vPortEnterCritical>
 800e332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e338:	b25b      	sxtb	r3, r3
 800e33a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e33e:	d103      	bne.n	800e348 <xQueueGenericSend+0x174>
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	2200      	movs	r2, #0
 800e344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e34e:	b25b      	sxtb	r3, r3
 800e350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e354:	d103      	bne.n	800e35e <xQueueGenericSend+0x18a>
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	2200      	movs	r2, #0
 800e35a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e35e:	f001 fe75 	bl	801004c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e362:	1d3a      	adds	r2, r7, #4
 800e364:	f107 0314 	add.w	r3, r7, #20
 800e368:	4611      	mov	r1, r2
 800e36a:	4618      	mov	r0, r3
 800e36c:	f001 f9b2 	bl	800f6d4 <xTaskCheckForTimeOut>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d124      	bne.n	800e3c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e376:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e378:	f000 fce1 	bl	800ed3e <prvIsQueueFull>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d018      	beq.n	800e3b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e384:	3310      	adds	r3, #16
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	4611      	mov	r1, r2
 800e38a:	4618      	mov	r0, r3
 800e38c:	f001 f902 	bl	800f594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e392:	f000 fc6c 	bl	800ec6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e396:	f000 ff27 	bl	800f1e8 <xTaskResumeAll>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f47f af7c 	bne.w	800e29a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e3a2:	4b0c      	ldr	r3, [pc, #48]	; (800e3d4 <xQueueGenericSend+0x200>)
 800e3a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a8:	601a      	str	r2, [r3, #0]
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	e772      	b.n	800e29a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e3b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3b6:	f000 fc5a 	bl	800ec6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3ba:	f000 ff15 	bl	800f1e8 <xTaskResumeAll>
 800e3be:	e76c      	b.n	800e29a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e3c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3c2:	f000 fc54 	bl	800ec6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3c6:	f000 ff0f 	bl	800f1e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e3ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3738      	adds	r7, #56	; 0x38
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	e000ed04 	.word	0xe000ed04

0800e3d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08e      	sub	sp, #56	; 0x38
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
 800e3e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10b      	bne.n	800e408 <xQueueGenericSendFromISR+0x30>
 800e3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f4:	b672      	cpsid	i
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	b662      	cpsie	i
 800e404:	627b      	str	r3, [r7, #36]	; 0x24
 800e406:	e7fe      	b.n	800e406 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d103      	bne.n	800e416 <xQueueGenericSendFromISR+0x3e>
 800e40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <xQueueGenericSendFromISR+0x42>
 800e416:	2301      	movs	r3, #1
 800e418:	e000      	b.n	800e41c <xQueueGenericSendFromISR+0x44>
 800e41a:	2300      	movs	r3, #0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10b      	bne.n	800e438 <xQueueGenericSendFromISR+0x60>
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	b672      	cpsid	i
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	b662      	cpsie	i
 800e434:	623b      	str	r3, [r7, #32]
 800e436:	e7fe      	b.n	800e436 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d103      	bne.n	800e446 <xQueueGenericSendFromISR+0x6e>
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e442:	2b01      	cmp	r3, #1
 800e444:	d101      	bne.n	800e44a <xQueueGenericSendFromISR+0x72>
 800e446:	2301      	movs	r3, #1
 800e448:	e000      	b.n	800e44c <xQueueGenericSendFromISR+0x74>
 800e44a:	2300      	movs	r3, #0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10b      	bne.n	800e468 <xQueueGenericSendFromISR+0x90>
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	b672      	cpsid	i
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	b662      	cpsie	i
 800e464:	61fb      	str	r3, [r7, #28]
 800e466:	e7fe      	b.n	800e466 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e468:	f001 fe9e 	bl	80101a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e46c:	f3ef 8211 	mrs	r2, BASEPRI
 800e470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e474:	b672      	cpsid	i
 800e476:	f383 8811 	msr	BASEPRI, r3
 800e47a:	f3bf 8f6f 	isb	sy
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	b662      	cpsie	i
 800e484:	61ba      	str	r2, [r7, #24]
 800e486:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e488:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e48a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e494:	429a      	cmp	r2, r3
 800e496:	d302      	bcc.n	800e49e <xQueueGenericSendFromISR+0xc6>
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d12c      	bne.n	800e4f8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	68b9      	ldr	r1, [r7, #8]
 800e4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ae:	f000 fb4e 	bl	800eb4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e4b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e4b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4ba:	d112      	bne.n	800e4e2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d016      	beq.n	800e4f2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c6:	3324      	adds	r3, #36	; 0x24
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f001 f889 	bl	800f5e0 <xTaskRemoveFromEventList>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00e      	beq.n	800e4f2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00b      	beq.n	800e4f2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2201      	movs	r2, #1
 800e4de:	601a      	str	r2, [r3, #0]
 800e4e0:	e007      	b.n	800e4f2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e4e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	b25a      	sxtb	r2, r3
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e4f6:	e001      	b.n	800e4fc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	637b      	str	r3, [r7, #52]	; 0x34
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3738      	adds	r7, #56	; 0x38
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08e      	sub	sp, #56	; 0x38
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10b      	bne.n	800e53c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800e524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e528:	b672      	cpsid	i
 800e52a:	f383 8811 	msr	BASEPRI, r3
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f3bf 8f4f 	dsb	sy
 800e536:	b662      	cpsie	i
 800e538:	623b      	str	r3, [r7, #32]
 800e53a:	e7fe      	b.n	800e53a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00b      	beq.n	800e55c <xQueueGiveFromISR+0x4c>
 800e544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e548:	b672      	cpsid	i
 800e54a:	f383 8811 	msr	BASEPRI, r3
 800e54e:	f3bf 8f6f 	isb	sy
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	b662      	cpsie	i
 800e558:	61fb      	str	r3, [r7, #28]
 800e55a:	e7fe      	b.n	800e55a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d103      	bne.n	800e56c <xQueueGiveFromISR+0x5c>
 800e564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d101      	bne.n	800e570 <xQueueGiveFromISR+0x60>
 800e56c:	2301      	movs	r3, #1
 800e56e:	e000      	b.n	800e572 <xQueueGiveFromISR+0x62>
 800e570:	2300      	movs	r3, #0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10b      	bne.n	800e58e <xQueueGiveFromISR+0x7e>
 800e576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57a:	b672      	cpsid	i
 800e57c:	f383 8811 	msr	BASEPRI, r3
 800e580:	f3bf 8f6f 	isb	sy
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	b662      	cpsie	i
 800e58a:	61bb      	str	r3, [r7, #24]
 800e58c:	e7fe      	b.n	800e58c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e58e:	f001 fe0b 	bl	80101a8 <vPortValidateInterruptPriority>
	__asm volatile
 800e592:	f3ef 8211 	mrs	r2, BASEPRI
 800e596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59a:	b672      	cpsid	i
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	b662      	cpsie	i
 800e5aa:	617a      	str	r2, [r7, #20]
 800e5ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e5ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d22b      	bcs.n	800e61a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ce:	1c5a      	adds	r2, r3, #1
 800e5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e5d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5dc:	d112      	bne.n	800e604 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d016      	beq.n	800e614 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e8:	3324      	adds	r3, #36	; 0x24
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 fff8 	bl	800f5e0 <xTaskRemoveFromEventList>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00e      	beq.n	800e614 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00b      	beq.n	800e614 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2201      	movs	r2, #1
 800e600:	601a      	str	r2, [r3, #0]
 800e602:	e007      	b.n	800e614 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e608:	3301      	adds	r3, #1
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	b25a      	sxtb	r2, r3
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e614:	2301      	movs	r3, #1
 800e616:	637b      	str	r3, [r7, #52]	; 0x34
 800e618:	e001      	b.n	800e61e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e61a:	2300      	movs	r3, #0
 800e61c:	637b      	str	r3, [r7, #52]	; 0x34
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3738      	adds	r7, #56	; 0x38
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
	...

0800e634 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b08c      	sub	sp, #48	; 0x30
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e640:	2300      	movs	r3, #0
 800e642:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d10b      	bne.n	800e666 <xQueueReceive+0x32>
	__asm volatile
 800e64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e652:	b672      	cpsid	i
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	b662      	cpsie	i
 800e662:	623b      	str	r3, [r7, #32]
 800e664:	e7fe      	b.n	800e664 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d103      	bne.n	800e674 <xQueueReceive+0x40>
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <xQueueReceive+0x44>
 800e674:	2301      	movs	r3, #1
 800e676:	e000      	b.n	800e67a <xQueueReceive+0x46>
 800e678:	2300      	movs	r3, #0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d10b      	bne.n	800e696 <xQueueReceive+0x62>
 800e67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e682:	b672      	cpsid	i
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	b662      	cpsie	i
 800e692:	61fb      	str	r3, [r7, #28]
 800e694:	e7fe      	b.n	800e694 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e696:	f001 f961 	bl	800f95c <xTaskGetSchedulerState>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d102      	bne.n	800e6a6 <xQueueReceive+0x72>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d101      	bne.n	800e6aa <xQueueReceive+0x76>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e000      	b.n	800e6ac <xQueueReceive+0x78>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10b      	bne.n	800e6c8 <xQueueReceive+0x94>
 800e6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b4:	b672      	cpsid	i
 800e6b6:	f383 8811 	msr	BASEPRI, r3
 800e6ba:	f3bf 8f6f 	isb	sy
 800e6be:	f3bf 8f4f 	dsb	sy
 800e6c2:	b662      	cpsie	i
 800e6c4:	61bb      	str	r3, [r7, #24]
 800e6c6:	e7fe      	b.n	800e6c6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6c8:	f001 fc8e 	bl	800ffe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d01f      	beq.n	800e718 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6d8:	68b9      	ldr	r1, [r7, #8]
 800e6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6dc:	f000 faa1 	bl	800ec22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	1e5a      	subs	r2, r3, #1
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ea:	691b      	ldr	r3, [r3, #16]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d00f      	beq.n	800e710 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f2:	3310      	adds	r3, #16
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 ff73 	bl	800f5e0 <xTaskRemoveFromEventList>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d007      	beq.n	800e710 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e700:	4b3c      	ldr	r3, [pc, #240]	; (800e7f4 <xQueueReceive+0x1c0>)
 800e702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e710:	f001 fc9c 	bl	801004c <vPortExitCritical>
				return pdPASS;
 800e714:	2301      	movs	r3, #1
 800e716:	e069      	b.n	800e7ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d103      	bne.n	800e726 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e71e:	f001 fc95 	bl	801004c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e722:	2300      	movs	r3, #0
 800e724:	e062      	b.n	800e7ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d106      	bne.n	800e73a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e72c:	f107 0310 	add.w	r3, r7, #16
 800e730:	4618      	mov	r0, r3
 800e732:	f000 ffb9 	bl	800f6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e736:	2301      	movs	r3, #1
 800e738:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e73a:	f001 fc87 	bl	801004c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e73e:	f000 fd45 	bl	800f1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e742:	f001 fc51 	bl	800ffe8 <vPortEnterCritical>
 800e746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e74c:	b25b      	sxtb	r3, r3
 800e74e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e752:	d103      	bne.n	800e75c <xQueueReceive+0x128>
 800e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e762:	b25b      	sxtb	r3, r3
 800e764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e768:	d103      	bne.n	800e772 <xQueueReceive+0x13e>
 800e76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e772:	f001 fc6b 	bl	801004c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e776:	1d3a      	adds	r2, r7, #4
 800e778:	f107 0310 	add.w	r3, r7, #16
 800e77c:	4611      	mov	r1, r2
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 ffa8 	bl	800f6d4 <xTaskCheckForTimeOut>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d123      	bne.n	800e7d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e78c:	f000 fac1 	bl	800ed12 <prvIsQueueEmpty>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d017      	beq.n	800e7c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e798:	3324      	adds	r3, #36	; 0x24
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	4611      	mov	r1, r2
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 fef8 	bl	800f594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a6:	f000 fa62 	bl	800ec6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e7aa:	f000 fd1d 	bl	800f1e8 <xTaskResumeAll>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d189      	bne.n	800e6c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e7b4:	4b0f      	ldr	r3, [pc, #60]	; (800e7f4 <xQueueReceive+0x1c0>)
 800e7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ba:	601a      	str	r2, [r3, #0]
 800e7bc:	f3bf 8f4f 	dsb	sy
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	e780      	b.n	800e6c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7c8:	f000 fa51 	bl	800ec6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7cc:	f000 fd0c 	bl	800f1e8 <xTaskResumeAll>
 800e7d0:	e77a      	b.n	800e6c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7d4:	f000 fa4b 	bl	800ec6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7d8:	f000 fd06 	bl	800f1e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7de:	f000 fa98 	bl	800ed12 <prvIsQueueEmpty>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f43f af6f 	beq.w	800e6c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e7ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3730      	adds	r7, #48	; 0x30
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	e000ed04 	.word	0xe000ed04

0800e7f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b08e      	sub	sp, #56	; 0x38
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e802:	2300      	movs	r3, #0
 800e804:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e80a:	2300      	movs	r3, #0
 800e80c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10b      	bne.n	800e82c <xQueueSemaphoreTake+0x34>
 800e814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e818:	b672      	cpsid	i
 800e81a:	f383 8811 	msr	BASEPRI, r3
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f3bf 8f4f 	dsb	sy
 800e826:	b662      	cpsie	i
 800e828:	623b      	str	r3, [r7, #32]
 800e82a:	e7fe      	b.n	800e82a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00b      	beq.n	800e84c <xQueueSemaphoreTake+0x54>
 800e834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e838:	b672      	cpsid	i
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	b662      	cpsie	i
 800e848:	61fb      	str	r3, [r7, #28]
 800e84a:	e7fe      	b.n	800e84a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e84c:	f001 f886 	bl	800f95c <xTaskGetSchedulerState>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d102      	bne.n	800e85c <xQueueSemaphoreTake+0x64>
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d101      	bne.n	800e860 <xQueueSemaphoreTake+0x68>
 800e85c:	2301      	movs	r3, #1
 800e85e:	e000      	b.n	800e862 <xQueueSemaphoreTake+0x6a>
 800e860:	2300      	movs	r3, #0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10b      	bne.n	800e87e <xQueueSemaphoreTake+0x86>
 800e866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86a:	b672      	cpsid	i
 800e86c:	f383 8811 	msr	BASEPRI, r3
 800e870:	f3bf 8f6f 	isb	sy
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	b662      	cpsie	i
 800e87a:	61bb      	str	r3, [r7, #24]
 800e87c:	e7fe      	b.n	800e87c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e87e:	f001 fbb3 	bl	800ffe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e886:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d024      	beq.n	800e8d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e890:	1e5a      	subs	r2, r3, #1
 800e892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e894:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d104      	bne.n	800e8a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e89e:	f001 fa1f 	bl	800fce0 <pvTaskIncrementMutexHeldCount>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00f      	beq.n	800e8d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	3310      	adds	r3, #16
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f000 fe93 	bl	800f5e0 <xTaskRemoveFromEventList>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d007      	beq.n	800e8d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8c0:	4b54      	ldr	r3, [pc, #336]	; (800ea14 <xQueueSemaphoreTake+0x21c>)
 800e8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8d0:	f001 fbbc 	bl	801004c <vPortExitCritical>
				return pdPASS;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e098      	b.n	800ea0a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d112      	bne.n	800e904 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d00b      	beq.n	800e8fc <xQueueSemaphoreTake+0x104>
 800e8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e8:	b672      	cpsid	i
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	b662      	cpsie	i
 800e8f8:	617b      	str	r3, [r7, #20]
 800e8fa:	e7fe      	b.n	800e8fa <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e8fc:	f001 fba6 	bl	801004c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e900:	2300      	movs	r3, #0
 800e902:	e082      	b.n	800ea0a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e906:	2b00      	cmp	r3, #0
 800e908:	d106      	bne.n	800e918 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e90a:	f107 030c 	add.w	r3, r7, #12
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 feca 	bl	800f6a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e914:	2301      	movs	r3, #1
 800e916:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e918:	f001 fb98 	bl	801004c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e91c:	f000 fc56 	bl	800f1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e920:	f001 fb62 	bl	800ffe8 <vPortEnterCritical>
 800e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e92a:	b25b      	sxtb	r3, r3
 800e92c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e930:	d103      	bne.n	800e93a <xQueueSemaphoreTake+0x142>
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	2200      	movs	r2, #0
 800e936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e940:	b25b      	sxtb	r3, r3
 800e942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e946:	d103      	bne.n	800e950 <xQueueSemaphoreTake+0x158>
 800e948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e950:	f001 fb7c 	bl	801004c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e954:	463a      	mov	r2, r7
 800e956:	f107 030c 	add.w	r3, r7, #12
 800e95a:	4611      	mov	r1, r2
 800e95c:	4618      	mov	r0, r3
 800e95e:	f000 feb9 	bl	800f6d4 <xTaskCheckForTimeOut>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d132      	bne.n	800e9ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e96a:	f000 f9d2 	bl	800ed12 <prvIsQueueEmpty>
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d026      	beq.n	800e9c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d109      	bne.n	800e990 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e97c:	f001 fb34 	bl	800ffe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	4618      	mov	r0, r3
 800e986:	f001 f807 	bl	800f998 <xTaskPriorityInherit>
 800e98a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e98c:	f001 fb5e 	bl	801004c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e992:	3324      	adds	r3, #36	; 0x24
 800e994:	683a      	ldr	r2, [r7, #0]
 800e996:	4611      	mov	r1, r2
 800e998:	4618      	mov	r0, r3
 800e99a:	f000 fdfb 	bl	800f594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e99e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9a0:	f000 f965 	bl	800ec6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9a4:	f000 fc20 	bl	800f1e8 <xTaskResumeAll>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f47f af67 	bne.w	800e87e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e9b0:	4b18      	ldr	r3, [pc, #96]	; (800ea14 <xQueueSemaphoreTake+0x21c>)
 800e9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9b6:	601a      	str	r2, [r3, #0]
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	e75d      	b.n	800e87e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e9c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9c4:	f000 f953 	bl	800ec6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9c8:	f000 fc0e 	bl	800f1e8 <xTaskResumeAll>
 800e9cc:	e757      	b.n	800e87e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e9ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9d0:	f000 f94d 	bl	800ec6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9d4:	f000 fc08 	bl	800f1e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9da:	f000 f99a 	bl	800ed12 <prvIsQueueEmpty>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f43f af4c 	beq.w	800e87e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00d      	beq.n	800ea08 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e9ec:	f001 fafc 	bl	800ffe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e9f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9f2:	f000 f894 	bl	800eb1e <prvGetDisinheritPriorityAfterTimeout>
 800e9f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f001 f8d2 	bl	800fba8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ea04:	f001 fb22 	bl	801004c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3738      	adds	r7, #56	; 0x38
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	e000ed04 	.word	0xe000ed04

0800ea18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08e      	sub	sp, #56	; 0x38
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10b      	bne.n	800ea46 <xQueueReceiveFromISR+0x2e>
 800ea2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea32:	b672      	cpsid	i
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	b662      	cpsie	i
 800ea42:	623b      	str	r3, [r7, #32]
 800ea44:	e7fe      	b.n	800ea44 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d103      	bne.n	800ea54 <xQueueReceiveFromISR+0x3c>
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d101      	bne.n	800ea58 <xQueueReceiveFromISR+0x40>
 800ea54:	2301      	movs	r3, #1
 800ea56:	e000      	b.n	800ea5a <xQueueReceiveFromISR+0x42>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d10b      	bne.n	800ea76 <xQueueReceiveFromISR+0x5e>
 800ea5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea62:	b672      	cpsid	i
 800ea64:	f383 8811 	msr	BASEPRI, r3
 800ea68:	f3bf 8f6f 	isb	sy
 800ea6c:	f3bf 8f4f 	dsb	sy
 800ea70:	b662      	cpsie	i
 800ea72:	61fb      	str	r3, [r7, #28]
 800ea74:	e7fe      	b.n	800ea74 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea76:	f001 fb97 	bl	80101a8 <vPortValidateInterruptPriority>
	__asm volatile
 800ea7a:	f3ef 8211 	mrs	r2, BASEPRI
 800ea7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea82:	b672      	cpsid	i
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	b662      	cpsie	i
 800ea92:	61ba      	str	r2, [r7, #24]
 800ea94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ea96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d02f      	beq.n	800eb06 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eaac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eab0:	68b9      	ldr	r1, [r7, #8]
 800eab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eab4:	f000 f8b5 	bl	800ec22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaba:	1e5a      	subs	r2, r3, #1
 800eabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eac8:	d112      	bne.n	800eaf0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eacc:	691b      	ldr	r3, [r3, #16]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d016      	beq.n	800eb00 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	3310      	adds	r3, #16
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 fd82 	bl	800f5e0 <xTaskRemoveFromEventList>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00e      	beq.n	800eb00 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00b      	beq.n	800eb00 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	e007      	b.n	800eb00 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eaf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	b25a      	sxtb	r2, r3
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eb00:	2301      	movs	r3, #1
 800eb02:	637b      	str	r3, [r7, #52]	; 0x34
 800eb04:	e001      	b.n	800eb0a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800eb06:	2300      	movs	r3, #0
 800eb08:	637b      	str	r3, [r7, #52]	; 0x34
 800eb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3738      	adds	r7, #56	; 0x38
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eb1e:	b480      	push	{r7}
 800eb20:	b085      	sub	sp, #20
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d006      	beq.n	800eb3c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f1c3 0307 	rsb	r3, r3, #7
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	e001      	b.n	800eb40 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eb40:	68fb      	ldr	r3, [r7, #12]
	}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3714      	adds	r7, #20
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr

0800eb4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b086      	sub	sp, #24
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	60f8      	str	r0, [r7, #12]
 800eb56:	60b9      	str	r1, [r7, #8]
 800eb58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10d      	bne.n	800eb88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d14d      	bne.n	800ec10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 ff8d 	bl	800fa98 <xTaskPriorityDisinherit>
 800eb7e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2200      	movs	r2, #0
 800eb84:	609a      	str	r2, [r3, #8]
 800eb86:	e043      	b.n	800ec10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d119      	bne.n	800ebc2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6858      	ldr	r0, [r3, #4]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb96:	461a      	mov	r2, r3
 800eb98:	68b9      	ldr	r1, [r7, #8]
 800eb9a:	f00d fae8 	bl	801c16e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	685a      	ldr	r2, [r3, #4]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eba6:	441a      	add	r2, r3
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	685a      	ldr	r2, [r3, #4]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d32b      	bcc.n	800ec10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	605a      	str	r2, [r3, #4]
 800ebc0:	e026      	b.n	800ec10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	68d8      	ldr	r0, [r3, #12]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebca:	461a      	mov	r2, r3
 800ebcc:	68b9      	ldr	r1, [r7, #8]
 800ebce:	f00d face 	bl	801c16e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	68da      	ldr	r2, [r3, #12]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebda:	425b      	negs	r3, r3
 800ebdc:	441a      	add	r2, r3
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	68da      	ldr	r2, [r3, #12]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d207      	bcs.n	800ebfe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	689a      	ldr	r2, [r3, #8]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebf6:	425b      	negs	r3, r3
 800ebf8:	441a      	add	r2, r3
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d105      	bne.n	800ec10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d002      	beq.n	800ec10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	1c5a      	adds	r2, r3, #1
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ec18:	697b      	ldr	r3, [r7, #20]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3718      	adds	r7, #24
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d018      	beq.n	800ec66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec3c:	441a      	add	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	68da      	ldr	r2, [r3, #12]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d303      	bcc.n	800ec56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	68d9      	ldr	r1, [r3, #12]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5e:	461a      	mov	r2, r3
 800ec60:	6838      	ldr	r0, [r7, #0]
 800ec62:	f00d fa84 	bl	801c16e <memcpy>
	}
}
 800ec66:	bf00      	nop
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b084      	sub	sp, #16
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ec76:	f001 f9b7 	bl	800ffe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec82:	e011      	b.n	800eca8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d012      	beq.n	800ecb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	3324      	adds	r3, #36	; 0x24
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 fca5 	bl	800f5e0 <xTaskRemoveFromEventList>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d001      	beq.n	800eca0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ec9c:	f000 fd7e 	bl	800f79c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eca0:	7bfb      	ldrb	r3, [r7, #15]
 800eca2:	3b01      	subs	r3, #1
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	dce9      	bgt.n	800ec84 <prvUnlockQueue+0x16>
 800ecb0:	e000      	b.n	800ecb4 <prvUnlockQueue+0x46>
					break;
 800ecb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	22ff      	movs	r2, #255	; 0xff
 800ecb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ecbc:	f001 f9c6 	bl	801004c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ecc0:	f001 f992 	bl	800ffe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eccc:	e011      	b.n	800ecf2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	691b      	ldr	r3, [r3, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d012      	beq.n	800ecfc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	3310      	adds	r3, #16
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f000 fc80 	bl	800f5e0 <xTaskRemoveFromEventList>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ece6:	f000 fd59 	bl	800f79c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ecea:	7bbb      	ldrb	r3, [r7, #14]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ecf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	dce9      	bgt.n	800ecce <prvUnlockQueue+0x60>
 800ecfa:	e000      	b.n	800ecfe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ecfc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	22ff      	movs	r2, #255	; 0xff
 800ed02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ed06:	f001 f9a1 	bl	801004c <vPortExitCritical>
}
 800ed0a:	bf00      	nop
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b084      	sub	sp, #16
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed1a:	f001 f965 	bl	800ffe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d102      	bne.n	800ed2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ed26:	2301      	movs	r3, #1
 800ed28:	60fb      	str	r3, [r7, #12]
 800ed2a:	e001      	b.n	800ed30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed30:	f001 f98c 	bl	801004c <vPortExitCritical>

	return xReturn;
 800ed34:	68fb      	ldr	r3, [r7, #12]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3710      	adds	r7, #16
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b084      	sub	sp, #16
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed46:	f001 f94f 	bl	800ffe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d102      	bne.n	800ed5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ed56:	2301      	movs	r3, #1
 800ed58:	60fb      	str	r3, [r7, #12]
 800ed5a:	e001      	b.n	800ed60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed60:	f001 f974 	bl	801004c <vPortExitCritical>

	return xReturn;
 800ed64:	68fb      	ldr	r3, [r7, #12]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b08e      	sub	sp, #56	; 0x38
 800ed72:	af04      	add	r7, sp, #16
 800ed74:	60f8      	str	r0, [r7, #12]
 800ed76:	60b9      	str	r1, [r7, #8]
 800ed78:	607a      	str	r2, [r7, #4]
 800ed7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ed7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d10b      	bne.n	800ed9a <xTaskCreateStatic+0x2c>
	__asm volatile
 800ed82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed86:	b672      	cpsid	i
 800ed88:	f383 8811 	msr	BASEPRI, r3
 800ed8c:	f3bf 8f6f 	isb	sy
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	b662      	cpsie	i
 800ed96:	623b      	str	r3, [r7, #32]
 800ed98:	e7fe      	b.n	800ed98 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800ed9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d10b      	bne.n	800edb8 <xTaskCreateStatic+0x4a>
 800eda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda4:	b672      	cpsid	i
 800eda6:	f383 8811 	msr	BASEPRI, r3
 800edaa:	f3bf 8f6f 	isb	sy
 800edae:	f3bf 8f4f 	dsb	sy
 800edb2:	b662      	cpsie	i
 800edb4:	61fb      	str	r3, [r7, #28]
 800edb6:	e7fe      	b.n	800edb6 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800edb8:	2354      	movs	r3, #84	; 0x54
 800edba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	2b54      	cmp	r3, #84	; 0x54
 800edc0:	d00b      	beq.n	800edda <xTaskCreateStatic+0x6c>
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	b672      	cpsid	i
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	b662      	cpsie	i
 800edd6:	61bb      	str	r3, [r7, #24]
 800edd8:	e7fe      	b.n	800edd8 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800edda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d01e      	beq.n	800ee20 <xTaskCreateStatic+0xb2>
 800ede2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d01b      	beq.n	800ee20 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ede8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	2202      	movs	r2, #2
 800edf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800edfa:	2300      	movs	r3, #0
 800edfc:	9303      	str	r3, [sp, #12]
 800edfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee00:	9302      	str	r3, [sp, #8]
 800ee02:	f107 0314 	add.w	r3, r7, #20
 800ee06:	9301      	str	r3, [sp, #4]
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	68b9      	ldr	r1, [r7, #8]
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f000 f850 	bl	800eeb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee1a:	f000 f8d5 	bl	800efc8 <prvAddNewTaskToReadyList>
 800ee1e:	e001      	b.n	800ee24 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ee20:	2300      	movs	r3, #0
 800ee22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ee24:	697b      	ldr	r3, [r7, #20]
	}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3728      	adds	r7, #40	; 0x28
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b08c      	sub	sp, #48	; 0x30
 800ee32:	af04      	add	r7, sp, #16
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	60b9      	str	r1, [r7, #8]
 800ee38:	603b      	str	r3, [r7, #0]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ee3e:	88fb      	ldrh	r3, [r7, #6]
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4618      	mov	r0, r3
 800ee44:	f001 f9f2 	bl	801022c <pvPortMalloc>
 800ee48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00e      	beq.n	800ee6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ee50:	2054      	movs	r0, #84	; 0x54
 800ee52:	f001 f9eb 	bl	801022c <pvPortMalloc>
 800ee56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d003      	beq.n	800ee66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	697a      	ldr	r2, [r7, #20]
 800ee62:	631a      	str	r2, [r3, #48]	; 0x30
 800ee64:	e005      	b.n	800ee72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ee66:	6978      	ldr	r0, [r7, #20]
 800ee68:	f001 faa8 	bl	80103bc <vPortFree>
 800ee6c:	e001      	b.n	800ee72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d017      	beq.n	800eea8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ee80:	88fa      	ldrh	r2, [r7, #6]
 800ee82:	2300      	movs	r3, #0
 800ee84:	9303      	str	r3, [sp, #12]
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	9302      	str	r3, [sp, #8]
 800ee8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8c:	9301      	str	r3, [sp, #4]
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	68b9      	ldr	r1, [r7, #8]
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f000 f80e 	bl	800eeb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee9c:	69f8      	ldr	r0, [r7, #28]
 800ee9e:	f000 f893 	bl	800efc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eea2:	2301      	movs	r3, #1
 800eea4:	61bb      	str	r3, [r7, #24]
 800eea6:	e002      	b.n	800eeae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eeae:	69bb      	ldr	r3, [r7, #24]
	}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3720      	adds	r7, #32
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b088      	sub	sp, #32
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
 800eec4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eeca:	6879      	ldr	r1, [r7, #4]
 800eecc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800eed0:	440b      	add	r3, r1
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4413      	add	r3, r2
 800eed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	f023 0307 	bic.w	r3, r3, #7
 800eede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	f003 0307 	and.w	r3, r3, #7
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00b      	beq.n	800ef02 <prvInitialiseNewTask+0x4a>
 800eeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeee:	b672      	cpsid	i
 800eef0:	f383 8811 	msr	BASEPRI, r3
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	b662      	cpsie	i
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	e7fe      	b.n	800ef00 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d01f      	beq.n	800ef48 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef08:	2300      	movs	r3, #0
 800ef0a:	61fb      	str	r3, [r7, #28]
 800ef0c:	e012      	b.n	800ef34 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	4413      	add	r3, r2
 800ef14:	7819      	ldrb	r1, [r3, #0]
 800ef16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	3334      	adds	r3, #52	; 0x34
 800ef1e:	460a      	mov	r2, r1
 800ef20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ef22:	68ba      	ldr	r2, [r7, #8]
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	4413      	add	r3, r2
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d006      	beq.n	800ef3c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	3301      	adds	r3, #1
 800ef32:	61fb      	str	r3, [r7, #28]
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	2b0f      	cmp	r3, #15
 800ef38:	d9e9      	bls.n	800ef0e <prvInitialiseNewTask+0x56>
 800ef3a:	e000      	b.n	800ef3e <prvInitialiseNewTask+0x86>
			{
				break;
 800ef3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef40:	2200      	movs	r2, #0
 800ef42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef46:	e003      	b.n	800ef50 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ef48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef52:	2b06      	cmp	r3, #6
 800ef54:	d901      	bls.n	800ef5a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef56:	2306      	movs	r3, #6
 800ef58:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef5e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ef60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef64:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ef66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef68:	2200      	movs	r2, #0
 800ef6a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6e:	3304      	adds	r3, #4
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fe ff07 	bl	800dd84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef78:	3318      	adds	r3, #24
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fe ff02 	bl	800dd84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef88:	f1c3 0207 	rsb	r2, r3, #7
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef94:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef98:	2200      	movs	r2, #0
 800ef9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	68f9      	ldr	r1, [r7, #12]
 800efa8:	69b8      	ldr	r0, [r7, #24]
 800efaa:	f000 ff13 	bl	800fdd4 <pxPortInitialiseStack>
 800efae:	4602      	mov	r2, r0
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d002      	beq.n	800efc0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800efc0:	bf00      	nop
 800efc2:	3720      	adds	r7, #32
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800efd0:	f001 f80a 	bl	800ffe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800efd4:	4b2a      	ldr	r3, [pc, #168]	; (800f080 <prvAddNewTaskToReadyList+0xb8>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3301      	adds	r3, #1
 800efda:	4a29      	ldr	r2, [pc, #164]	; (800f080 <prvAddNewTaskToReadyList+0xb8>)
 800efdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800efde:	4b29      	ldr	r3, [pc, #164]	; (800f084 <prvAddNewTaskToReadyList+0xbc>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d109      	bne.n	800effa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800efe6:	4a27      	ldr	r2, [pc, #156]	; (800f084 <prvAddNewTaskToReadyList+0xbc>)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800efec:	4b24      	ldr	r3, [pc, #144]	; (800f080 <prvAddNewTaskToReadyList+0xb8>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d110      	bne.n	800f016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eff4:	f000 fbf6 	bl	800f7e4 <prvInitialiseTaskLists>
 800eff8:	e00d      	b.n	800f016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800effa:	4b23      	ldr	r3, [pc, #140]	; (800f088 <prvAddNewTaskToReadyList+0xc0>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d109      	bne.n	800f016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f002:	4b20      	ldr	r3, [pc, #128]	; (800f084 <prvAddNewTaskToReadyList+0xbc>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d802      	bhi.n	800f016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f010:	4a1c      	ldr	r2, [pc, #112]	; (800f084 <prvAddNewTaskToReadyList+0xbc>)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f016:	4b1d      	ldr	r3, [pc, #116]	; (800f08c <prvAddNewTaskToReadyList+0xc4>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3301      	adds	r3, #1
 800f01c:	4a1b      	ldr	r2, [pc, #108]	; (800f08c <prvAddNewTaskToReadyList+0xc4>)
 800f01e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f024:	2201      	movs	r2, #1
 800f026:	409a      	lsls	r2, r3
 800f028:	4b19      	ldr	r3, [pc, #100]	; (800f090 <prvAddNewTaskToReadyList+0xc8>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	4a18      	ldr	r2, [pc, #96]	; (800f090 <prvAddNewTaskToReadyList+0xc8>)
 800f030:	6013      	str	r3, [r2, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f036:	4613      	mov	r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	4413      	add	r3, r2
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	4a15      	ldr	r2, [pc, #84]	; (800f094 <prvAddNewTaskToReadyList+0xcc>)
 800f040:	441a      	add	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	3304      	adds	r3, #4
 800f046:	4619      	mov	r1, r3
 800f048:	4610      	mov	r0, r2
 800f04a:	f7fe fea8 	bl	800dd9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f04e:	f000 fffd 	bl	801004c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f052:	4b0d      	ldr	r3, [pc, #52]	; (800f088 <prvAddNewTaskToReadyList+0xc0>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00e      	beq.n	800f078 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f05a:	4b0a      	ldr	r3, [pc, #40]	; (800f084 <prvAddNewTaskToReadyList+0xbc>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f064:	429a      	cmp	r2, r3
 800f066:	d207      	bcs.n	800f078 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f068:	4b0b      	ldr	r3, [pc, #44]	; (800f098 <prvAddNewTaskToReadyList+0xd0>)
 800f06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f06e:	601a      	str	r2, [r3, #0]
 800f070:	f3bf 8f4f 	dsb	sy
 800f074:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	2000043c 	.word	0x2000043c
 800f084:	2000033c 	.word	0x2000033c
 800f088:	20000448 	.word	0x20000448
 800f08c:	20000458 	.word	0x20000458
 800f090:	20000444 	.word	0x20000444
 800f094:	20000340 	.word	0x20000340
 800f098:	e000ed04 	.word	0xe000ed04

0800f09c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d018      	beq.n	800f0e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f0ae:	4b14      	ldr	r3, [pc, #80]	; (800f100 <vTaskDelay+0x64>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00b      	beq.n	800f0ce <vTaskDelay+0x32>
 800f0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ba:	b672      	cpsid	i
 800f0bc:	f383 8811 	msr	BASEPRI, r3
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	b662      	cpsie	i
 800f0ca:	60bb      	str	r3, [r7, #8]
 800f0cc:	e7fe      	b.n	800f0cc <vTaskDelay+0x30>
			vTaskSuspendAll();
 800f0ce:	f000 f87d 	bl	800f1cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 fe17 	bl	800fd08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f0da:	f000 f885 	bl	800f1e8 <xTaskResumeAll>
 800f0de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d107      	bne.n	800f0f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f0e6:	4b07      	ldr	r3, [pc, #28]	; (800f104 <vTaskDelay+0x68>)
 800f0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0ec:	601a      	str	r2, [r3, #0]
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f0f6:	bf00      	nop
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
 800f0fe:	bf00      	nop
 800f100:	20000464 	.word	0x20000464
 800f104:	e000ed04 	.word	0xe000ed04

0800f108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b08a      	sub	sp, #40	; 0x28
 800f10c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f10e:	2300      	movs	r3, #0
 800f110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f112:	2300      	movs	r3, #0
 800f114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f116:	463a      	mov	r2, r7
 800f118:	1d39      	adds	r1, r7, #4
 800f11a:	f107 0308 	add.w	r3, r7, #8
 800f11e:	4618      	mov	r0, r3
 800f120:	f7f9 fa8e 	bl	8008640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f124:	6839      	ldr	r1, [r7, #0]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	9202      	str	r2, [sp, #8]
 800f12c:	9301      	str	r3, [sp, #4]
 800f12e:	2300      	movs	r3, #0
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	2300      	movs	r3, #0
 800f134:	460a      	mov	r2, r1
 800f136:	491f      	ldr	r1, [pc, #124]	; (800f1b4 <vTaskStartScheduler+0xac>)
 800f138:	481f      	ldr	r0, [pc, #124]	; (800f1b8 <vTaskStartScheduler+0xb0>)
 800f13a:	f7ff fe18 	bl	800ed6e <xTaskCreateStatic>
 800f13e:	4602      	mov	r2, r0
 800f140:	4b1e      	ldr	r3, [pc, #120]	; (800f1bc <vTaskStartScheduler+0xb4>)
 800f142:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f144:	4b1d      	ldr	r3, [pc, #116]	; (800f1bc <vTaskStartScheduler+0xb4>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f14c:	2301      	movs	r3, #1
 800f14e:	617b      	str	r3, [r7, #20]
 800f150:	e001      	b.n	800f156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f152:	2300      	movs	r3, #0
 800f154:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d117      	bne.n	800f18c <vTaskStartScheduler+0x84>
 800f15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f160:	b672      	cpsid	i
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	b662      	cpsie	i
 800f170:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f172:	4b13      	ldr	r3, [pc, #76]	; (800f1c0 <vTaskStartScheduler+0xb8>)
 800f174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f178:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f17a:	4b12      	ldr	r3, [pc, #72]	; (800f1c4 <vTaskStartScheduler+0xbc>)
 800f17c:	2201      	movs	r2, #1
 800f17e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f180:	4b11      	ldr	r3, [pc, #68]	; (800f1c8 <vTaskStartScheduler+0xc0>)
 800f182:	2200      	movs	r2, #0
 800f184:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f186:	f000 feb3 	bl	800fef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f18a:	e00f      	b.n	800f1ac <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f192:	d10b      	bne.n	800f1ac <vTaskStartScheduler+0xa4>
 800f194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f198:	b672      	cpsid	i
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	b662      	cpsie	i
 800f1a8:	60fb      	str	r3, [r7, #12]
 800f1aa:	e7fe      	b.n	800f1aa <vTaskStartScheduler+0xa2>
}
 800f1ac:	bf00      	nop
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	0801d0f0 	.word	0x0801d0f0
 800f1b8:	0800f7b5 	.word	0x0800f7b5
 800f1bc:	20000460 	.word	0x20000460
 800f1c0:	2000045c 	.word	0x2000045c
 800f1c4:	20000448 	.word	0x20000448
 800f1c8:	20000440 	.word	0x20000440

0800f1cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f1d0:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <vTaskSuspendAll+0x18>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	4a03      	ldr	r2, [pc, #12]	; (800f1e4 <vTaskSuspendAll+0x18>)
 800f1d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f1da:	bf00      	nop
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	20000464 	.word	0x20000464

0800f1e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1f6:	4b42      	ldr	r3, [pc, #264]	; (800f300 <xTaskResumeAll+0x118>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10b      	bne.n	800f216 <xTaskResumeAll+0x2e>
 800f1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f202:	b672      	cpsid	i
 800f204:	f383 8811 	msr	BASEPRI, r3
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	b662      	cpsie	i
 800f212:	603b      	str	r3, [r7, #0]
 800f214:	e7fe      	b.n	800f214 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f216:	f000 fee7 	bl	800ffe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f21a:	4b39      	ldr	r3, [pc, #228]	; (800f300 <xTaskResumeAll+0x118>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	3b01      	subs	r3, #1
 800f220:	4a37      	ldr	r2, [pc, #220]	; (800f300 <xTaskResumeAll+0x118>)
 800f222:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f224:	4b36      	ldr	r3, [pc, #216]	; (800f300 <xTaskResumeAll+0x118>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d161      	bne.n	800f2f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f22c:	4b35      	ldr	r3, [pc, #212]	; (800f304 <xTaskResumeAll+0x11c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d05d      	beq.n	800f2f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f234:	e02e      	b.n	800f294 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f236:	4b34      	ldr	r3, [pc, #208]	; (800f308 <xTaskResumeAll+0x120>)
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	68db      	ldr	r3, [r3, #12]
 800f23c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	3318      	adds	r3, #24
 800f242:	4618      	mov	r0, r3
 800f244:	f7fe fe08 	bl	800de58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	3304      	adds	r3, #4
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe fe03 	bl	800de58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f256:	2201      	movs	r2, #1
 800f258:	409a      	lsls	r2, r3
 800f25a:	4b2c      	ldr	r3, [pc, #176]	; (800f30c <xTaskResumeAll+0x124>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	4313      	orrs	r3, r2
 800f260:	4a2a      	ldr	r2, [pc, #168]	; (800f30c <xTaskResumeAll+0x124>)
 800f262:	6013      	str	r3, [r2, #0]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f268:	4613      	mov	r3, r2
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	4413      	add	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	4a27      	ldr	r2, [pc, #156]	; (800f310 <xTaskResumeAll+0x128>)
 800f272:	441a      	add	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	3304      	adds	r3, #4
 800f278:	4619      	mov	r1, r3
 800f27a:	4610      	mov	r0, r2
 800f27c:	f7fe fd8f 	bl	800dd9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f284:	4b23      	ldr	r3, [pc, #140]	; (800f314 <xTaskResumeAll+0x12c>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d302      	bcc.n	800f294 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f28e:	4b22      	ldr	r3, [pc, #136]	; (800f318 <xTaskResumeAll+0x130>)
 800f290:	2201      	movs	r2, #1
 800f292:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f294:	4b1c      	ldr	r3, [pc, #112]	; (800f308 <xTaskResumeAll+0x120>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d1cc      	bne.n	800f236 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d001      	beq.n	800f2a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f2a2:	f000 fb3b 	bl	800f91c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f2a6:	4b1d      	ldr	r3, [pc, #116]	; (800f31c <xTaskResumeAll+0x134>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d010      	beq.n	800f2d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f2b2:	f000 f859 	bl	800f368 <xTaskIncrementTick>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d002      	beq.n	800f2c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f2bc:	4b16      	ldr	r3, [pc, #88]	; (800f318 <xTaskResumeAll+0x130>)
 800f2be:	2201      	movs	r2, #1
 800f2c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d1f1      	bne.n	800f2b2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800f2ce:	4b13      	ldr	r3, [pc, #76]	; (800f31c <xTaskResumeAll+0x134>)
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f2d4:	4b10      	ldr	r3, [pc, #64]	; (800f318 <xTaskResumeAll+0x130>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d009      	beq.n	800f2f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f2e0:	4b0f      	ldr	r3, [pc, #60]	; (800f320 <xTaskResumeAll+0x138>)
 800f2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2e6:	601a      	str	r2, [r3, #0]
 800f2e8:	f3bf 8f4f 	dsb	sy
 800f2ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2f0:	f000 feac 	bl	801004c <vPortExitCritical>

	return xAlreadyYielded;
 800f2f4:	68bb      	ldr	r3, [r7, #8]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	20000464 	.word	0x20000464
 800f304:	2000043c 	.word	0x2000043c
 800f308:	200003fc 	.word	0x200003fc
 800f30c:	20000444 	.word	0x20000444
 800f310:	20000340 	.word	0x20000340
 800f314:	2000033c 	.word	0x2000033c
 800f318:	20000450 	.word	0x20000450
 800f31c:	2000044c 	.word	0x2000044c
 800f320:	e000ed04 	.word	0xe000ed04

0800f324 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f32a:	4b05      	ldr	r3, [pc, #20]	; (800f340 <xTaskGetTickCount+0x1c>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f330:	687b      	ldr	r3, [r7, #4]
}
 800f332:	4618      	mov	r0, r3
 800f334:	370c      	adds	r7, #12
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	20000440 	.word	0x20000440

0800f344 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f34a:	f000 ff2d 	bl	80101a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f34e:	2300      	movs	r3, #0
 800f350:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f352:	4b04      	ldr	r3, [pc, #16]	; (800f364 <xTaskGetTickCountFromISR+0x20>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f358:	683b      	ldr	r3, [r7, #0]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3708      	adds	r7, #8
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	20000440 	.word	0x20000440

0800f368 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b086      	sub	sp, #24
 800f36c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f36e:	2300      	movs	r3, #0
 800f370:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f372:	4b4f      	ldr	r3, [pc, #316]	; (800f4b0 <xTaskIncrementTick+0x148>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	f040 8089 	bne.w	800f48e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f37c:	4b4d      	ldr	r3, [pc, #308]	; (800f4b4 <xTaskIncrementTick+0x14c>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	3301      	adds	r3, #1
 800f382:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f384:	4a4b      	ldr	r2, [pc, #300]	; (800f4b4 <xTaskIncrementTick+0x14c>)
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d121      	bne.n	800f3d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f390:	4b49      	ldr	r3, [pc, #292]	; (800f4b8 <xTaskIncrementTick+0x150>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d00b      	beq.n	800f3b2 <xTaskIncrementTick+0x4a>
 800f39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39e:	b672      	cpsid	i
 800f3a0:	f383 8811 	msr	BASEPRI, r3
 800f3a4:	f3bf 8f6f 	isb	sy
 800f3a8:	f3bf 8f4f 	dsb	sy
 800f3ac:	b662      	cpsie	i
 800f3ae:	603b      	str	r3, [r7, #0]
 800f3b0:	e7fe      	b.n	800f3b0 <xTaskIncrementTick+0x48>
 800f3b2:	4b41      	ldr	r3, [pc, #260]	; (800f4b8 <xTaskIncrementTick+0x150>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	60fb      	str	r3, [r7, #12]
 800f3b8:	4b40      	ldr	r3, [pc, #256]	; (800f4bc <xTaskIncrementTick+0x154>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a3e      	ldr	r2, [pc, #248]	; (800f4b8 <xTaskIncrementTick+0x150>)
 800f3be:	6013      	str	r3, [r2, #0]
 800f3c0:	4a3e      	ldr	r2, [pc, #248]	; (800f4bc <xTaskIncrementTick+0x154>)
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	4b3e      	ldr	r3, [pc, #248]	; (800f4c0 <xTaskIncrementTick+0x158>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	4a3c      	ldr	r2, [pc, #240]	; (800f4c0 <xTaskIncrementTick+0x158>)
 800f3ce:	6013      	str	r3, [r2, #0]
 800f3d0:	f000 faa4 	bl	800f91c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3d4:	4b3b      	ldr	r3, [pc, #236]	; (800f4c4 <xTaskIncrementTick+0x15c>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	693a      	ldr	r2, [r7, #16]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d348      	bcc.n	800f470 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3de:	4b36      	ldr	r3, [pc, #216]	; (800f4b8 <xTaskIncrementTick+0x150>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d104      	bne.n	800f3f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3e8:	4b36      	ldr	r3, [pc, #216]	; (800f4c4 <xTaskIncrementTick+0x15c>)
 800f3ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3ee:	601a      	str	r2, [r3, #0]
					break;
 800f3f0:	e03e      	b.n	800f470 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3f2:	4b31      	ldr	r3, [pc, #196]	; (800f4b8 <xTaskIncrementTick+0x150>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f402:	693a      	ldr	r2, [r7, #16]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	429a      	cmp	r2, r3
 800f408:	d203      	bcs.n	800f412 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f40a:	4a2e      	ldr	r2, [pc, #184]	; (800f4c4 <xTaskIncrementTick+0x15c>)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f410:	e02e      	b.n	800f470 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	3304      	adds	r3, #4
 800f416:	4618      	mov	r0, r3
 800f418:	f7fe fd1e 	bl	800de58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f420:	2b00      	cmp	r3, #0
 800f422:	d004      	beq.n	800f42e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	3318      	adds	r3, #24
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fe fd15 	bl	800de58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f432:	2201      	movs	r2, #1
 800f434:	409a      	lsls	r2, r3
 800f436:	4b24      	ldr	r3, [pc, #144]	; (800f4c8 <xTaskIncrementTick+0x160>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	4a22      	ldr	r2, [pc, #136]	; (800f4c8 <xTaskIncrementTick+0x160>)
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f444:	4613      	mov	r3, r2
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	4413      	add	r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4a1f      	ldr	r2, [pc, #124]	; (800f4cc <xTaskIncrementTick+0x164>)
 800f44e:	441a      	add	r2, r3
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	3304      	adds	r3, #4
 800f454:	4619      	mov	r1, r3
 800f456:	4610      	mov	r0, r2
 800f458:	f7fe fca1 	bl	800dd9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f460:	4b1b      	ldr	r3, [pc, #108]	; (800f4d0 <xTaskIncrementTick+0x168>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f466:	429a      	cmp	r2, r3
 800f468:	d3b9      	bcc.n	800f3de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f46a:	2301      	movs	r3, #1
 800f46c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f46e:	e7b6      	b.n	800f3de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f470:	4b17      	ldr	r3, [pc, #92]	; (800f4d0 <xTaskIncrementTick+0x168>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f476:	4915      	ldr	r1, [pc, #84]	; (800f4cc <xTaskIncrementTick+0x164>)
 800f478:	4613      	mov	r3, r2
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	4413      	add	r3, r2
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	440b      	add	r3, r1
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b01      	cmp	r3, #1
 800f486:	d907      	bls.n	800f498 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800f488:	2301      	movs	r3, #1
 800f48a:	617b      	str	r3, [r7, #20]
 800f48c:	e004      	b.n	800f498 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f48e:	4b11      	ldr	r3, [pc, #68]	; (800f4d4 <xTaskIncrementTick+0x16c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3301      	adds	r3, #1
 800f494:	4a0f      	ldr	r2, [pc, #60]	; (800f4d4 <xTaskIncrementTick+0x16c>)
 800f496:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f498:	4b0f      	ldr	r3, [pc, #60]	; (800f4d8 <xTaskIncrementTick+0x170>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d001      	beq.n	800f4a4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f4a4:	697b      	ldr	r3, [r7, #20]
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3718      	adds	r7, #24
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	20000464 	.word	0x20000464
 800f4b4:	20000440 	.word	0x20000440
 800f4b8:	200003f4 	.word	0x200003f4
 800f4bc:	200003f8 	.word	0x200003f8
 800f4c0:	20000454 	.word	0x20000454
 800f4c4:	2000045c 	.word	0x2000045c
 800f4c8:	20000444 	.word	0x20000444
 800f4cc:	20000340 	.word	0x20000340
 800f4d0:	2000033c 	.word	0x2000033c
 800f4d4:	2000044c 	.word	0x2000044c
 800f4d8:	20000450 	.word	0x20000450

0800f4dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b087      	sub	sp, #28
 800f4e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4e2:	4b27      	ldr	r3, [pc, #156]	; (800f580 <vTaskSwitchContext+0xa4>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d003      	beq.n	800f4f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f4ea:	4b26      	ldr	r3, [pc, #152]	; (800f584 <vTaskSwitchContext+0xa8>)
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4f0:	e040      	b.n	800f574 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f4f2:	4b24      	ldr	r3, [pc, #144]	; (800f584 <vTaskSwitchContext+0xa8>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4f8:	4b23      	ldr	r3, [pc, #140]	; (800f588 <vTaskSwitchContext+0xac>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	fab3 f383 	clz	r3, r3
 800f504:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f506:	7afb      	ldrb	r3, [r7, #11]
 800f508:	f1c3 031f 	rsb	r3, r3, #31
 800f50c:	617b      	str	r3, [r7, #20]
 800f50e:	491f      	ldr	r1, [pc, #124]	; (800f58c <vTaskSwitchContext+0xb0>)
 800f510:	697a      	ldr	r2, [r7, #20]
 800f512:	4613      	mov	r3, r2
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4413      	add	r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	440b      	add	r3, r1
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d10b      	bne.n	800f53a <vTaskSwitchContext+0x5e>
	__asm volatile
 800f522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f526:	b672      	cpsid	i
 800f528:	f383 8811 	msr	BASEPRI, r3
 800f52c:	f3bf 8f6f 	isb	sy
 800f530:	f3bf 8f4f 	dsb	sy
 800f534:	b662      	cpsie	i
 800f536:	607b      	str	r3, [r7, #4]
 800f538:	e7fe      	b.n	800f538 <vTaskSwitchContext+0x5c>
 800f53a:	697a      	ldr	r2, [r7, #20]
 800f53c:	4613      	mov	r3, r2
 800f53e:	009b      	lsls	r3, r3, #2
 800f540:	4413      	add	r3, r2
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	4a11      	ldr	r2, [pc, #68]	; (800f58c <vTaskSwitchContext+0xb0>)
 800f546:	4413      	add	r3, r2
 800f548:	613b      	str	r3, [r7, #16]
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	685a      	ldr	r2, [r3, #4]
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	605a      	str	r2, [r3, #4]
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	685a      	ldr	r2, [r3, #4]
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	3308      	adds	r3, #8
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d104      	bne.n	800f56a <vTaskSwitchContext+0x8e>
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	685a      	ldr	r2, [r3, #4]
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	605a      	str	r2, [r3, #4]
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	4a07      	ldr	r2, [pc, #28]	; (800f590 <vTaskSwitchContext+0xb4>)
 800f572:	6013      	str	r3, [r2, #0]
}
 800f574:	bf00      	nop
 800f576:	371c      	adds	r7, #28
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	20000464 	.word	0x20000464
 800f584:	20000450 	.word	0x20000450
 800f588:	20000444 	.word	0x20000444
 800f58c:	20000340 	.word	0x20000340
 800f590:	2000033c 	.word	0x2000033c

0800f594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d10b      	bne.n	800f5bc <vTaskPlaceOnEventList+0x28>
 800f5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a8:	b672      	cpsid	i
 800f5aa:	f383 8811 	msr	BASEPRI, r3
 800f5ae:	f3bf 8f6f 	isb	sy
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	b662      	cpsie	i
 800f5b8:	60fb      	str	r3, [r7, #12]
 800f5ba:	e7fe      	b.n	800f5ba <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5bc:	4b07      	ldr	r3, [pc, #28]	; (800f5dc <vTaskPlaceOnEventList+0x48>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	3318      	adds	r3, #24
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7fe fc0e 	bl	800dde6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f5ca:	2101      	movs	r1, #1
 800f5cc:	6838      	ldr	r0, [r7, #0]
 800f5ce:	f000 fb9b 	bl	800fd08 <prvAddCurrentTaskToDelayedList>
}
 800f5d2:	bf00      	nop
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	2000033c 	.word	0x2000033c

0800f5e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d10b      	bne.n	800f60e <xTaskRemoveFromEventList+0x2e>
 800f5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fa:	b672      	cpsid	i
 800f5fc:	f383 8811 	msr	BASEPRI, r3
 800f600:	f3bf 8f6f 	isb	sy
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	b662      	cpsie	i
 800f60a:	60fb      	str	r3, [r7, #12]
 800f60c:	e7fe      	b.n	800f60c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	3318      	adds	r3, #24
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe fc20 	bl	800de58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f618:	4b1d      	ldr	r3, [pc, #116]	; (800f690 <xTaskRemoveFromEventList+0xb0>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d11c      	bne.n	800f65a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	3304      	adds	r3, #4
 800f624:	4618      	mov	r0, r3
 800f626:	f7fe fc17 	bl	800de58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62e:	2201      	movs	r2, #1
 800f630:	409a      	lsls	r2, r3
 800f632:	4b18      	ldr	r3, [pc, #96]	; (800f694 <xTaskRemoveFromEventList+0xb4>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	4313      	orrs	r3, r2
 800f638:	4a16      	ldr	r2, [pc, #88]	; (800f694 <xTaskRemoveFromEventList+0xb4>)
 800f63a:	6013      	str	r3, [r2, #0]
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f640:	4613      	mov	r3, r2
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	4413      	add	r3, r2
 800f646:	009b      	lsls	r3, r3, #2
 800f648:	4a13      	ldr	r2, [pc, #76]	; (800f698 <xTaskRemoveFromEventList+0xb8>)
 800f64a:	441a      	add	r2, r3
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	3304      	adds	r3, #4
 800f650:	4619      	mov	r1, r3
 800f652:	4610      	mov	r0, r2
 800f654:	f7fe fba3 	bl	800dd9e <vListInsertEnd>
 800f658:	e005      	b.n	800f666 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	3318      	adds	r3, #24
 800f65e:	4619      	mov	r1, r3
 800f660:	480e      	ldr	r0, [pc, #56]	; (800f69c <xTaskRemoveFromEventList+0xbc>)
 800f662:	f7fe fb9c 	bl	800dd9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f66a:	4b0d      	ldr	r3, [pc, #52]	; (800f6a0 <xTaskRemoveFromEventList+0xc0>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f670:	429a      	cmp	r2, r3
 800f672:	d905      	bls.n	800f680 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f674:	2301      	movs	r3, #1
 800f676:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f678:	4b0a      	ldr	r3, [pc, #40]	; (800f6a4 <xTaskRemoveFromEventList+0xc4>)
 800f67a:	2201      	movs	r2, #1
 800f67c:	601a      	str	r2, [r3, #0]
 800f67e:	e001      	b.n	800f684 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f680:	2300      	movs	r3, #0
 800f682:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f684:	697b      	ldr	r3, [r7, #20]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3718      	adds	r7, #24
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	20000464 	.word	0x20000464
 800f694:	20000444 	.word	0x20000444
 800f698:	20000340 	.word	0x20000340
 800f69c:	200003fc 	.word	0x200003fc
 800f6a0:	2000033c 	.word	0x2000033c
 800f6a4:	20000450 	.word	0x20000450

0800f6a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f6b0:	4b06      	ldr	r3, [pc, #24]	; (800f6cc <vTaskInternalSetTimeOutState+0x24>)
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f6b8:	4b05      	ldr	r3, [pc, #20]	; (800f6d0 <vTaskInternalSetTimeOutState+0x28>)
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	605a      	str	r2, [r3, #4]
}
 800f6c0:	bf00      	nop
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr
 800f6cc:	20000454 	.word	0x20000454
 800f6d0:	20000440 	.word	0x20000440

0800f6d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b088      	sub	sp, #32
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d10b      	bne.n	800f6fc <xTaskCheckForTimeOut+0x28>
 800f6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e8:	b672      	cpsid	i
 800f6ea:	f383 8811 	msr	BASEPRI, r3
 800f6ee:	f3bf 8f6f 	isb	sy
 800f6f2:	f3bf 8f4f 	dsb	sy
 800f6f6:	b662      	cpsie	i
 800f6f8:	613b      	str	r3, [r7, #16]
 800f6fa:	e7fe      	b.n	800f6fa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10b      	bne.n	800f71a <xTaskCheckForTimeOut+0x46>
 800f702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f706:	b672      	cpsid	i
 800f708:	f383 8811 	msr	BASEPRI, r3
 800f70c:	f3bf 8f6f 	isb	sy
 800f710:	f3bf 8f4f 	dsb	sy
 800f714:	b662      	cpsie	i
 800f716:	60fb      	str	r3, [r7, #12]
 800f718:	e7fe      	b.n	800f718 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800f71a:	f000 fc65 	bl	800ffe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f71e:	4b1d      	ldr	r3, [pc, #116]	; (800f794 <xTaskCheckForTimeOut+0xc0>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	69ba      	ldr	r2, [r7, #24]
 800f72a:	1ad3      	subs	r3, r2, r3
 800f72c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f736:	d102      	bne.n	800f73e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f738:	2300      	movs	r3, #0
 800f73a:	61fb      	str	r3, [r7, #28]
 800f73c:	e023      	b.n	800f786 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	4b15      	ldr	r3, [pc, #84]	; (800f798 <xTaskCheckForTimeOut+0xc4>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	429a      	cmp	r2, r3
 800f748:	d007      	beq.n	800f75a <xTaskCheckForTimeOut+0x86>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	69ba      	ldr	r2, [r7, #24]
 800f750:	429a      	cmp	r2, r3
 800f752:	d302      	bcc.n	800f75a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f754:	2301      	movs	r3, #1
 800f756:	61fb      	str	r3, [r7, #28]
 800f758:	e015      	b.n	800f786 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	697a      	ldr	r2, [r7, #20]
 800f760:	429a      	cmp	r2, r3
 800f762:	d20b      	bcs.n	800f77c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	1ad2      	subs	r2, r2, r3
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7ff ff99 	bl	800f6a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f776:	2300      	movs	r3, #0
 800f778:	61fb      	str	r3, [r7, #28]
 800f77a:	e004      	b.n	800f786 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	2200      	movs	r2, #0
 800f780:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f782:	2301      	movs	r3, #1
 800f784:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f786:	f000 fc61 	bl	801004c <vPortExitCritical>

	return xReturn;
 800f78a:	69fb      	ldr	r3, [r7, #28]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3720      	adds	r7, #32
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	20000440 	.word	0x20000440
 800f798:	20000454 	.word	0x20000454

0800f79c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f79c:	b480      	push	{r7}
 800f79e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f7a0:	4b03      	ldr	r3, [pc, #12]	; (800f7b0 <vTaskMissedYield+0x14>)
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	601a      	str	r2, [r3, #0]
}
 800f7a6:	bf00      	nop
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr
 800f7b0:	20000450 	.word	0x20000450

0800f7b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f7bc:	f000 f852 	bl	800f864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f7c0:	4b06      	ldr	r3, [pc, #24]	; (800f7dc <prvIdleTask+0x28>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d9f9      	bls.n	800f7bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f7c8:	4b05      	ldr	r3, [pc, #20]	; (800f7e0 <prvIdleTask+0x2c>)
 800f7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7ce:	601a      	str	r2, [r3, #0]
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f7d8:	e7f0      	b.n	800f7bc <prvIdleTask+0x8>
 800f7da:	bf00      	nop
 800f7dc:	20000340 	.word	0x20000340
 800f7e0:	e000ed04 	.word	0xe000ed04

0800f7e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	607b      	str	r3, [r7, #4]
 800f7ee:	e00c      	b.n	800f80a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	4413      	add	r3, r2
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4a12      	ldr	r2, [pc, #72]	; (800f844 <prvInitialiseTaskLists+0x60>)
 800f7fc:	4413      	add	r3, r2
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7fe faa0 	bl	800dd44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	3301      	adds	r3, #1
 800f808:	607b      	str	r3, [r7, #4]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2b06      	cmp	r3, #6
 800f80e:	d9ef      	bls.n	800f7f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f810:	480d      	ldr	r0, [pc, #52]	; (800f848 <prvInitialiseTaskLists+0x64>)
 800f812:	f7fe fa97 	bl	800dd44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f816:	480d      	ldr	r0, [pc, #52]	; (800f84c <prvInitialiseTaskLists+0x68>)
 800f818:	f7fe fa94 	bl	800dd44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f81c:	480c      	ldr	r0, [pc, #48]	; (800f850 <prvInitialiseTaskLists+0x6c>)
 800f81e:	f7fe fa91 	bl	800dd44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f822:	480c      	ldr	r0, [pc, #48]	; (800f854 <prvInitialiseTaskLists+0x70>)
 800f824:	f7fe fa8e 	bl	800dd44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f828:	480b      	ldr	r0, [pc, #44]	; (800f858 <prvInitialiseTaskLists+0x74>)
 800f82a:	f7fe fa8b 	bl	800dd44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f82e:	4b0b      	ldr	r3, [pc, #44]	; (800f85c <prvInitialiseTaskLists+0x78>)
 800f830:	4a05      	ldr	r2, [pc, #20]	; (800f848 <prvInitialiseTaskLists+0x64>)
 800f832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f834:	4b0a      	ldr	r3, [pc, #40]	; (800f860 <prvInitialiseTaskLists+0x7c>)
 800f836:	4a05      	ldr	r2, [pc, #20]	; (800f84c <prvInitialiseTaskLists+0x68>)
 800f838:	601a      	str	r2, [r3, #0]
}
 800f83a:	bf00      	nop
 800f83c:	3708      	adds	r7, #8
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	20000340 	.word	0x20000340
 800f848:	200003cc 	.word	0x200003cc
 800f84c:	200003e0 	.word	0x200003e0
 800f850:	200003fc 	.word	0x200003fc
 800f854:	20000410 	.word	0x20000410
 800f858:	20000428 	.word	0x20000428
 800f85c:	200003f4 	.word	0x200003f4
 800f860:	200003f8 	.word	0x200003f8

0800f864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f86a:	e019      	b.n	800f8a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f86c:	f000 fbbc 	bl	800ffe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f870:	4b0f      	ldr	r3, [pc, #60]	; (800f8b0 <prvCheckTasksWaitingTermination+0x4c>)
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3304      	adds	r3, #4
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fe faeb 	bl	800de58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f882:	4b0c      	ldr	r3, [pc, #48]	; (800f8b4 <prvCheckTasksWaitingTermination+0x50>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	3b01      	subs	r3, #1
 800f888:	4a0a      	ldr	r2, [pc, #40]	; (800f8b4 <prvCheckTasksWaitingTermination+0x50>)
 800f88a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f88c:	4b0a      	ldr	r3, [pc, #40]	; (800f8b8 <prvCheckTasksWaitingTermination+0x54>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	3b01      	subs	r3, #1
 800f892:	4a09      	ldr	r2, [pc, #36]	; (800f8b8 <prvCheckTasksWaitingTermination+0x54>)
 800f894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f896:	f000 fbd9 	bl	801004c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 f80e 	bl	800f8bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8a0:	4b05      	ldr	r3, [pc, #20]	; (800f8b8 <prvCheckTasksWaitingTermination+0x54>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1e1      	bne.n	800f86c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f8a8:	bf00      	nop
 800f8aa:	3708      	adds	r7, #8
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	20000410 	.word	0x20000410
 800f8b4:	2000043c 	.word	0x2000043c
 800f8b8:	20000424 	.word	0x20000424

0800f8bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d108      	bne.n	800f8e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 fd72 	bl	80103bc <vPortFree>
				vPortFree( pxTCB );
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 fd6f 	bl	80103bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f8de:	e019      	b.n	800f914 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	d103      	bne.n	800f8f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fd66 	bl	80103bc <vPortFree>
	}
 800f8f0:	e010      	b.n	800f914 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f8f8:	2b02      	cmp	r3, #2
 800f8fa:	d00b      	beq.n	800f914 <prvDeleteTCB+0x58>
 800f8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f900:	b672      	cpsid	i
 800f902:	f383 8811 	msr	BASEPRI, r3
 800f906:	f3bf 8f6f 	isb	sy
 800f90a:	f3bf 8f4f 	dsb	sy
 800f90e:	b662      	cpsie	i
 800f910:	60fb      	str	r3, [r7, #12]
 800f912:	e7fe      	b.n	800f912 <prvDeleteTCB+0x56>
	}
 800f914:	bf00      	nop
 800f916:	3710      	adds	r7, #16
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f922:	4b0c      	ldr	r3, [pc, #48]	; (800f954 <prvResetNextTaskUnblockTime+0x38>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d104      	bne.n	800f936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f92c:	4b0a      	ldr	r3, [pc, #40]	; (800f958 <prvResetNextTaskUnblockTime+0x3c>)
 800f92e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f934:	e008      	b.n	800f948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f936:	4b07      	ldr	r3, [pc, #28]	; (800f954 <prvResetNextTaskUnblockTime+0x38>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	4a04      	ldr	r2, [pc, #16]	; (800f958 <prvResetNextTaskUnblockTime+0x3c>)
 800f946:	6013      	str	r3, [r2, #0]
}
 800f948:	bf00      	nop
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr
 800f954:	200003f4 	.word	0x200003f4
 800f958:	2000045c 	.word	0x2000045c

0800f95c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f962:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <xTaskGetSchedulerState+0x34>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d102      	bne.n	800f970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f96a:	2301      	movs	r3, #1
 800f96c:	607b      	str	r3, [r7, #4]
 800f96e:	e008      	b.n	800f982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f970:	4b08      	ldr	r3, [pc, #32]	; (800f994 <xTaskGetSchedulerState+0x38>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d102      	bne.n	800f97e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f978:	2302      	movs	r3, #2
 800f97a:	607b      	str	r3, [r7, #4]
 800f97c:	e001      	b.n	800f982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f97e:	2300      	movs	r3, #0
 800f980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f982:	687b      	ldr	r3, [r7, #4]
	}
 800f984:	4618      	mov	r0, r3
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr
 800f990:	20000448 	.word	0x20000448
 800f994:	20000464 	.word	0x20000464

0800f998 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d069      	beq.n	800fa82 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9b2:	4b36      	ldr	r3, [pc, #216]	; (800fa8c <xTaskPriorityInherit+0xf4>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d259      	bcs.n	800fa70 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	699b      	ldr	r3, [r3, #24]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	db06      	blt.n	800f9d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9c4:	4b31      	ldr	r3, [pc, #196]	; (800fa8c <xTaskPriorityInherit+0xf4>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ca:	f1c3 0207 	rsb	r2, r3, #7
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	6959      	ldr	r1, [r3, #20]
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9da:	4613      	mov	r3, r2
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4413      	add	r3, r2
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	4a2b      	ldr	r2, [pc, #172]	; (800fa90 <xTaskPriorityInherit+0xf8>)
 800f9e4:	4413      	add	r3, r2
 800f9e6:	4299      	cmp	r1, r3
 800f9e8:	d13a      	bne.n	800fa60 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	3304      	adds	r3, #4
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fe fa32 	bl	800de58 <uxListRemove>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d115      	bne.n	800fa26 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9fe:	4924      	ldr	r1, [pc, #144]	; (800fa90 <xTaskPriorityInherit+0xf8>)
 800fa00:	4613      	mov	r3, r2
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	4413      	add	r3, r2
 800fa06:	009b      	lsls	r3, r3, #2
 800fa08:	440b      	add	r3, r1
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10a      	bne.n	800fa26 <xTaskPriorityInherit+0x8e>
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa14:	2201      	movs	r2, #1
 800fa16:	fa02 f303 	lsl.w	r3, r2, r3
 800fa1a:	43da      	mvns	r2, r3
 800fa1c:	4b1d      	ldr	r3, [pc, #116]	; (800fa94 <xTaskPriorityInherit+0xfc>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4013      	ands	r3, r2
 800fa22:	4a1c      	ldr	r2, [pc, #112]	; (800fa94 <xTaskPriorityInherit+0xfc>)
 800fa24:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa26:	4b19      	ldr	r3, [pc, #100]	; (800fa8c <xTaskPriorityInherit+0xf4>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa34:	2201      	movs	r2, #1
 800fa36:	409a      	lsls	r2, r3
 800fa38:	4b16      	ldr	r3, [pc, #88]	; (800fa94 <xTaskPriorityInherit+0xfc>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	4a15      	ldr	r2, [pc, #84]	; (800fa94 <xTaskPriorityInherit+0xfc>)
 800fa40:	6013      	str	r3, [r2, #0]
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa46:	4613      	mov	r3, r2
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	4413      	add	r3, r2
 800fa4c:	009b      	lsls	r3, r3, #2
 800fa4e:	4a10      	ldr	r2, [pc, #64]	; (800fa90 <xTaskPriorityInherit+0xf8>)
 800fa50:	441a      	add	r2, r3
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	3304      	adds	r3, #4
 800fa56:	4619      	mov	r1, r3
 800fa58:	4610      	mov	r0, r2
 800fa5a:	f7fe f9a0 	bl	800dd9e <vListInsertEnd>
 800fa5e:	e004      	b.n	800fa6a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa60:	4b0a      	ldr	r3, [pc, #40]	; (800fa8c <xTaskPriorityInherit+0xf4>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	60fb      	str	r3, [r7, #12]
 800fa6e:	e008      	b.n	800fa82 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa74:	4b05      	ldr	r3, [pc, #20]	; (800fa8c <xTaskPriorityInherit+0xf4>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d201      	bcs.n	800fa82 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa82:	68fb      	ldr	r3, [r7, #12]
	}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3710      	adds	r7, #16
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	2000033c 	.word	0x2000033c
 800fa90:	20000340 	.word	0x20000340
 800fa94:	20000444 	.word	0x20000444

0800fa98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b086      	sub	sp, #24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800faa4:	2300      	movs	r3, #0
 800faa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d070      	beq.n	800fb90 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800faae:	4b3b      	ldr	r3, [pc, #236]	; (800fb9c <xTaskPriorityDisinherit+0x104>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	693a      	ldr	r2, [r7, #16]
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d00b      	beq.n	800fad0 <xTaskPriorityDisinherit+0x38>
 800fab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fabc:	b672      	cpsid	i
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	b662      	cpsie	i
 800facc:	60fb      	str	r3, [r7, #12]
 800face:	e7fe      	b.n	800face <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d10b      	bne.n	800faf0 <xTaskPriorityDisinherit+0x58>
 800fad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fadc:	b672      	cpsid	i
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	b662      	cpsie	i
 800faec:	60bb      	str	r3, [r7, #8]
 800faee:	e7fe      	b.n	800faee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faf4:	1e5a      	subs	r2, r3, #1
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d044      	beq.n	800fb90 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d140      	bne.n	800fb90 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	3304      	adds	r3, #4
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fe f9a0 	bl	800de58 <uxListRemove>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d115      	bne.n	800fb4a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb22:	491f      	ldr	r1, [pc, #124]	; (800fba0 <xTaskPriorityDisinherit+0x108>)
 800fb24:	4613      	mov	r3, r2
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	4413      	add	r3, r2
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	440b      	add	r3, r1
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d10a      	bne.n	800fb4a <xTaskPriorityDisinherit+0xb2>
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb38:	2201      	movs	r2, #1
 800fb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb3e:	43da      	mvns	r2, r3
 800fb40:	4b18      	ldr	r3, [pc, #96]	; (800fba4 <xTaskPriorityDisinherit+0x10c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4013      	ands	r3, r2
 800fb46:	4a17      	ldr	r2, [pc, #92]	; (800fba4 <xTaskPriorityDisinherit+0x10c>)
 800fb48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb56:	f1c3 0207 	rsb	r2, r3, #7
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb62:	2201      	movs	r2, #1
 800fb64:	409a      	lsls	r2, r3
 800fb66:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <xTaskPriorityDisinherit+0x10c>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	4a0d      	ldr	r2, [pc, #52]	; (800fba4 <xTaskPriorityDisinherit+0x10c>)
 800fb6e:	6013      	str	r3, [r2, #0]
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb74:	4613      	mov	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4413      	add	r3, r2
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	4a08      	ldr	r2, [pc, #32]	; (800fba0 <xTaskPriorityDisinherit+0x108>)
 800fb7e:	441a      	add	r2, r3
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	3304      	adds	r3, #4
 800fb84:	4619      	mov	r1, r3
 800fb86:	4610      	mov	r0, r2
 800fb88:	f7fe f909 	bl	800dd9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb90:	697b      	ldr	r3, [r7, #20]
	}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3718      	adds	r7, #24
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	2000033c 	.word	0x2000033c
 800fba0:	20000340 	.word	0x20000340
 800fba4:	20000444 	.word	0x20000444

0800fba8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b088      	sub	sp, #32
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	f000 8085 	beq.w	800fccc <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d10b      	bne.n	800fbe2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800fbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbce:	b672      	cpsid	i
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	b662      	cpsie	i
 800fbde:	60fb      	str	r3, [r7, #12]
 800fbe0:	e7fe      	b.n	800fbe0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbe6:	683a      	ldr	r2, [r7, #0]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d902      	bls.n	800fbf2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	61fb      	str	r3, [r7, #28]
 800fbf0:	e002      	b.n	800fbf8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbf6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbfc:	69fa      	ldr	r2, [r7, #28]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d064      	beq.n	800fccc <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d15f      	bne.n	800fccc <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc0c:	4b31      	ldr	r3, [pc, #196]	; (800fcd4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	69ba      	ldr	r2, [r7, #24]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d10b      	bne.n	800fc2e <vTaskPriorityDisinheritAfterTimeout+0x86>
 800fc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc1a:	b672      	cpsid	i
 800fc1c:	f383 8811 	msr	BASEPRI, r3
 800fc20:	f3bf 8f6f 	isb	sy
 800fc24:	f3bf 8f4f 	dsb	sy
 800fc28:	b662      	cpsie	i
 800fc2a:	60bb      	str	r3, [r7, #8]
 800fc2c:	e7fe      	b.n	800fc2c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc2e:	69bb      	ldr	r3, [r7, #24]
 800fc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc32:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	69fa      	ldr	r2, [r7, #28]
 800fc38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc3a:	69bb      	ldr	r3, [r7, #24]
 800fc3c:	699b      	ldr	r3, [r3, #24]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	db04      	blt.n	800fc4c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	f1c3 0207 	rsb	r2, r3, #7
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	6959      	ldr	r1, [r3, #20]
 800fc50:	693a      	ldr	r2, [r7, #16]
 800fc52:	4613      	mov	r3, r2
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	4413      	add	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	4a1f      	ldr	r2, [pc, #124]	; (800fcd8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800fc5c:	4413      	add	r3, r2
 800fc5e:	4299      	cmp	r1, r3
 800fc60:	d134      	bne.n	800fccc <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	3304      	adds	r3, #4
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fe f8f6 	bl	800de58 <uxListRemove>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d115      	bne.n	800fc9e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc76:	4918      	ldr	r1, [pc, #96]	; (800fcd8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800fc78:	4613      	mov	r3, r2
 800fc7a:	009b      	lsls	r3, r3, #2
 800fc7c:	4413      	add	r3, r2
 800fc7e:	009b      	lsls	r3, r3, #2
 800fc80:	440b      	add	r3, r1
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10a      	bne.n	800fc9e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc92:	43da      	mvns	r2, r3
 800fc94:	4b11      	ldr	r3, [pc, #68]	; (800fcdc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4013      	ands	r3, r2
 800fc9a:	4a10      	ldr	r2, [pc, #64]	; (800fcdc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fc9c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca2:	2201      	movs	r2, #1
 800fca4:	409a      	lsls	r2, r3
 800fca6:	4b0d      	ldr	r3, [pc, #52]	; (800fcdc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	4a0b      	ldr	r2, [pc, #44]	; (800fcdc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fcae:	6013      	str	r3, [r2, #0]
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4413      	add	r3, r2
 800fcba:	009b      	lsls	r3, r3, #2
 800fcbc:	4a06      	ldr	r2, [pc, #24]	; (800fcd8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800fcbe:	441a      	add	r2, r3
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	3304      	adds	r3, #4
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	4610      	mov	r0, r2
 800fcc8:	f7fe f869 	bl	800dd9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fccc:	bf00      	nop
 800fcce:	3720      	adds	r7, #32
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	2000033c 	.word	0x2000033c
 800fcd8:	20000340 	.word	0x20000340
 800fcdc:	20000444 	.word	0x20000444

0800fce0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fce0:	b480      	push	{r7}
 800fce2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fce4:	4b07      	ldr	r3, [pc, #28]	; (800fd04 <pvTaskIncrementMutexHeldCount+0x24>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d004      	beq.n	800fcf6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fcec:	4b05      	ldr	r3, [pc, #20]	; (800fd04 <pvTaskIncrementMutexHeldCount+0x24>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fcf2:	3201      	adds	r2, #1
 800fcf4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800fcf6:	4b03      	ldr	r3, [pc, #12]	; (800fd04 <pvTaskIncrementMutexHeldCount+0x24>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
	}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr
 800fd04:	2000033c 	.word	0x2000033c

0800fd08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fd12:	4b29      	ldr	r3, [pc, #164]	; (800fdb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd18:	4b28      	ldr	r3, [pc, #160]	; (800fdbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fe f89a 	bl	800de58 <uxListRemove>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d10b      	bne.n	800fd42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fd2a:	4b24      	ldr	r3, [pc, #144]	; (800fdbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd30:	2201      	movs	r2, #1
 800fd32:	fa02 f303 	lsl.w	r3, r2, r3
 800fd36:	43da      	mvns	r2, r3
 800fd38:	4b21      	ldr	r3, [pc, #132]	; (800fdc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4013      	ands	r3, r2
 800fd3e:	4a20      	ldr	r2, [pc, #128]	; (800fdc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fd40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd48:	d10a      	bne.n	800fd60 <prvAddCurrentTaskToDelayedList+0x58>
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d007      	beq.n	800fd60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd50:	4b1a      	ldr	r3, [pc, #104]	; (800fdbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	3304      	adds	r3, #4
 800fd56:	4619      	mov	r1, r3
 800fd58:	481a      	ldr	r0, [pc, #104]	; (800fdc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fd5a:	f7fe f820 	bl	800dd9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fd5e:	e026      	b.n	800fdae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fd60:	68fa      	ldr	r2, [r7, #12]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4413      	add	r3, r2
 800fd66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fd68:	4b14      	ldr	r3, [pc, #80]	; (800fdbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d209      	bcs.n	800fd8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd78:	4b13      	ldr	r3, [pc, #76]	; (800fdc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	4b0f      	ldr	r3, [pc, #60]	; (800fdbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	3304      	adds	r3, #4
 800fd82:	4619      	mov	r1, r3
 800fd84:	4610      	mov	r0, r2
 800fd86:	f7fe f82e 	bl	800dde6 <vListInsert>
}
 800fd8a:	e010      	b.n	800fdae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fd8c:	4b0f      	ldr	r3, [pc, #60]	; (800fdcc <prvAddCurrentTaskToDelayedList+0xc4>)
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	3304      	adds	r3, #4
 800fd96:	4619      	mov	r1, r3
 800fd98:	4610      	mov	r0, r2
 800fd9a:	f7fe f824 	bl	800dde6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fd9e:	4b0c      	ldr	r3, [pc, #48]	; (800fdd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d202      	bcs.n	800fdae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fda8:	4a09      	ldr	r2, [pc, #36]	; (800fdd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	6013      	str	r3, [r2, #0]
}
 800fdae:	bf00      	nop
 800fdb0:	3710      	adds	r7, #16
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20000440 	.word	0x20000440
 800fdbc:	2000033c 	.word	0x2000033c
 800fdc0:	20000444 	.word	0x20000444
 800fdc4:	20000428 	.word	0x20000428
 800fdc8:	200003f8 	.word	0x200003f8
 800fdcc:	200003f4 	.word	0x200003f4
 800fdd0:	2000045c 	.word	0x2000045c

0800fdd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	3b04      	subs	r3, #4
 800fde4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fdec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	3b04      	subs	r3, #4
 800fdf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	f023 0201 	bic.w	r2, r3, #1
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	3b04      	subs	r3, #4
 800fe02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fe04:	4a0c      	ldr	r2, [pc, #48]	; (800fe38 <pxPortInitialiseStack+0x64>)
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	3b14      	subs	r3, #20
 800fe0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	3b04      	subs	r3, #4
 800fe1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f06f 0202 	mvn.w	r2, #2
 800fe22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	3b20      	subs	r3, #32
 800fe28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3714      	adds	r7, #20
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr
 800fe38:	0800fe3d 	.word	0x0800fe3d

0800fe3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b085      	sub	sp, #20
 800fe40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fe46:	4b13      	ldr	r3, [pc, #76]	; (800fe94 <prvTaskExitError+0x58>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe4e:	d00b      	beq.n	800fe68 <prvTaskExitError+0x2c>
 800fe50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe54:	b672      	cpsid	i
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	b662      	cpsie	i
 800fe64:	60fb      	str	r3, [r7, #12]
 800fe66:	e7fe      	b.n	800fe66 <prvTaskExitError+0x2a>
 800fe68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6c:	b672      	cpsid	i
 800fe6e:	f383 8811 	msr	BASEPRI, r3
 800fe72:	f3bf 8f6f 	isb	sy
 800fe76:	f3bf 8f4f 	dsb	sy
 800fe7a:	b662      	cpsie	i
 800fe7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fe7e:	bf00      	nop
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d0fc      	beq.n	800fe80 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fe86:	bf00      	nop
 800fe88:	3714      	adds	r7, #20
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	2000004c 	.word	0x2000004c
	...

0800fea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fea0:	4b07      	ldr	r3, [pc, #28]	; (800fec0 <pxCurrentTCBConst2>)
 800fea2:	6819      	ldr	r1, [r3, #0]
 800fea4:	6808      	ldr	r0, [r1, #0]
 800fea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feaa:	f380 8809 	msr	PSP, r0
 800feae:	f3bf 8f6f 	isb	sy
 800feb2:	f04f 0000 	mov.w	r0, #0
 800feb6:	f380 8811 	msr	BASEPRI, r0
 800feba:	4770      	bx	lr
 800febc:	f3af 8000 	nop.w

0800fec0 <pxCurrentTCBConst2>:
 800fec0:	2000033c 	.word	0x2000033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fec4:	bf00      	nop
 800fec6:	bf00      	nop

0800fec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fec8:	4808      	ldr	r0, [pc, #32]	; (800feec <prvPortStartFirstTask+0x24>)
 800feca:	6800      	ldr	r0, [r0, #0]
 800fecc:	6800      	ldr	r0, [r0, #0]
 800fece:	f380 8808 	msr	MSP, r0
 800fed2:	f04f 0000 	mov.w	r0, #0
 800fed6:	f380 8814 	msr	CONTROL, r0
 800feda:	b662      	cpsie	i
 800fedc:	b661      	cpsie	f
 800fede:	f3bf 8f4f 	dsb	sy
 800fee2:	f3bf 8f6f 	isb	sy
 800fee6:	df00      	svc	0
 800fee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800feea:	bf00      	nop
 800feec:	e000ed08 	.word	0xe000ed08

0800fef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fef6:	4b36      	ldr	r3, [pc, #216]	; (800ffd0 <xPortStartScheduler+0xe0>)
 800fef8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	22ff      	movs	r2, #255	; 0xff
 800ff06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ff10:	78fb      	ldrb	r3, [r7, #3]
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ff18:	b2da      	uxtb	r2, r3
 800ff1a:	4b2e      	ldr	r3, [pc, #184]	; (800ffd4 <xPortStartScheduler+0xe4>)
 800ff1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ff1e:	4b2e      	ldr	r3, [pc, #184]	; (800ffd8 <xPortStartScheduler+0xe8>)
 800ff20:	2207      	movs	r2, #7
 800ff22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff24:	e009      	b.n	800ff3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ff26:	4b2c      	ldr	r3, [pc, #176]	; (800ffd8 <xPortStartScheduler+0xe8>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	3b01      	subs	r3, #1
 800ff2c:	4a2a      	ldr	r2, [pc, #168]	; (800ffd8 <xPortStartScheduler+0xe8>)
 800ff2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ff30:	78fb      	ldrb	r3, [r7, #3]
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ff3a:	78fb      	ldrb	r3, [r7, #3]
 800ff3c:	b2db      	uxtb	r3, r3
 800ff3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff42:	2b80      	cmp	r3, #128	; 0x80
 800ff44:	d0ef      	beq.n	800ff26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ff46:	4b24      	ldr	r3, [pc, #144]	; (800ffd8 <xPortStartScheduler+0xe8>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f1c3 0307 	rsb	r3, r3, #7
 800ff4e:	2b04      	cmp	r3, #4
 800ff50:	d00b      	beq.n	800ff6a <xPortStartScheduler+0x7a>
 800ff52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff56:	b672      	cpsid	i
 800ff58:	f383 8811 	msr	BASEPRI, r3
 800ff5c:	f3bf 8f6f 	isb	sy
 800ff60:	f3bf 8f4f 	dsb	sy
 800ff64:	b662      	cpsie	i
 800ff66:	60bb      	str	r3, [r7, #8]
 800ff68:	e7fe      	b.n	800ff68 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ff6a:	4b1b      	ldr	r3, [pc, #108]	; (800ffd8 <xPortStartScheduler+0xe8>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	021b      	lsls	r3, r3, #8
 800ff70:	4a19      	ldr	r2, [pc, #100]	; (800ffd8 <xPortStartScheduler+0xe8>)
 800ff72:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ff74:	4b18      	ldr	r3, [pc, #96]	; (800ffd8 <xPortStartScheduler+0xe8>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ff7c:	4a16      	ldr	r2, [pc, #88]	; (800ffd8 <xPortStartScheduler+0xe8>)
 800ff7e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ff88:	4b14      	ldr	r3, [pc, #80]	; (800ffdc <xPortStartScheduler+0xec>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4a13      	ldr	r2, [pc, #76]	; (800ffdc <xPortStartScheduler+0xec>)
 800ff8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ff92:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ff94:	4b11      	ldr	r3, [pc, #68]	; (800ffdc <xPortStartScheduler+0xec>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4a10      	ldr	r2, [pc, #64]	; (800ffdc <xPortStartScheduler+0xec>)
 800ff9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ff9e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ffa0:	f000 f8d4 	bl	801014c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ffa4:	4b0e      	ldr	r3, [pc, #56]	; (800ffe0 <xPortStartScheduler+0xf0>)
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ffaa:	f000 f8f3 	bl	8010194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ffae:	4b0d      	ldr	r3, [pc, #52]	; (800ffe4 <xPortStartScheduler+0xf4>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a0c      	ldr	r2, [pc, #48]	; (800ffe4 <xPortStartScheduler+0xf4>)
 800ffb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ffb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ffba:	f7ff ff85 	bl	800fec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ffbe:	f7ff fa8d 	bl	800f4dc <vTaskSwitchContext>
	prvTaskExitError();
 800ffc2:	f7ff ff3b 	bl	800fe3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ffc6:	2300      	movs	r3, #0
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	e000e400 	.word	0xe000e400
 800ffd4:	20000468 	.word	0x20000468
 800ffd8:	2000046c 	.word	0x2000046c
 800ffdc:	e000ed20 	.word	0xe000ed20
 800ffe0:	2000004c 	.word	0x2000004c
 800ffe4:	e000ef34 	.word	0xe000ef34

0800ffe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff2:	b672      	cpsid	i
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	b662      	cpsie	i
 8010002:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010004:	4b0f      	ldr	r3, [pc, #60]	; (8010044 <vPortEnterCritical+0x5c>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	3301      	adds	r3, #1
 801000a:	4a0e      	ldr	r2, [pc, #56]	; (8010044 <vPortEnterCritical+0x5c>)
 801000c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801000e:	4b0d      	ldr	r3, [pc, #52]	; (8010044 <vPortEnterCritical+0x5c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b01      	cmp	r3, #1
 8010014:	d110      	bne.n	8010038 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010016:	4b0c      	ldr	r3, [pc, #48]	; (8010048 <vPortEnterCritical+0x60>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	b2db      	uxtb	r3, r3
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00b      	beq.n	8010038 <vPortEnterCritical+0x50>
 8010020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010024:	b672      	cpsid	i
 8010026:	f383 8811 	msr	BASEPRI, r3
 801002a:	f3bf 8f6f 	isb	sy
 801002e:	f3bf 8f4f 	dsb	sy
 8010032:	b662      	cpsie	i
 8010034:	603b      	str	r3, [r7, #0]
 8010036:	e7fe      	b.n	8010036 <vPortEnterCritical+0x4e>
	}
}
 8010038:	bf00      	nop
 801003a:	370c      	adds	r7, #12
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	2000004c 	.word	0x2000004c
 8010048:	e000ed04 	.word	0xe000ed04

0801004c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010052:	4b12      	ldr	r3, [pc, #72]	; (801009c <vPortExitCritical+0x50>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10b      	bne.n	8010072 <vPortExitCritical+0x26>
 801005a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005e:	b672      	cpsid	i
 8010060:	f383 8811 	msr	BASEPRI, r3
 8010064:	f3bf 8f6f 	isb	sy
 8010068:	f3bf 8f4f 	dsb	sy
 801006c:	b662      	cpsie	i
 801006e:	607b      	str	r3, [r7, #4]
 8010070:	e7fe      	b.n	8010070 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8010072:	4b0a      	ldr	r3, [pc, #40]	; (801009c <vPortExitCritical+0x50>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3b01      	subs	r3, #1
 8010078:	4a08      	ldr	r2, [pc, #32]	; (801009c <vPortExitCritical+0x50>)
 801007a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801007c:	4b07      	ldr	r3, [pc, #28]	; (801009c <vPortExitCritical+0x50>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d104      	bne.n	801008e <vPortExitCritical+0x42>
 8010084:	2300      	movs	r3, #0
 8010086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801008e:	bf00      	nop
 8010090:	370c      	adds	r7, #12
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop
 801009c:	2000004c 	.word	0x2000004c

080100a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80100a0:	f3ef 8009 	mrs	r0, PSP
 80100a4:	f3bf 8f6f 	isb	sy
 80100a8:	4b15      	ldr	r3, [pc, #84]	; (8010100 <pxCurrentTCBConst>)
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	f01e 0f10 	tst.w	lr, #16
 80100b0:	bf08      	it	eq
 80100b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80100b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ba:	6010      	str	r0, [r2, #0]
 80100bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80100c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80100c4:	b672      	cpsid	i
 80100c6:	f380 8811 	msr	BASEPRI, r0
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	f3bf 8f6f 	isb	sy
 80100d2:	b662      	cpsie	i
 80100d4:	f7ff fa02 	bl	800f4dc <vTaskSwitchContext>
 80100d8:	f04f 0000 	mov.w	r0, #0
 80100dc:	f380 8811 	msr	BASEPRI, r0
 80100e0:	bc09      	pop	{r0, r3}
 80100e2:	6819      	ldr	r1, [r3, #0]
 80100e4:	6808      	ldr	r0, [r1, #0]
 80100e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ea:	f01e 0f10 	tst.w	lr, #16
 80100ee:	bf08      	it	eq
 80100f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80100f4:	f380 8809 	msr	PSP, r0
 80100f8:	f3bf 8f6f 	isb	sy
 80100fc:	4770      	bx	lr
 80100fe:	bf00      	nop

08010100 <pxCurrentTCBConst>:
 8010100:	2000033c 	.word	0x2000033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010104:	bf00      	nop
 8010106:	bf00      	nop

08010108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
	__asm volatile
 801010e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010112:	b672      	cpsid	i
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	b662      	cpsie	i
 8010122:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010124:	f7ff f920 	bl	800f368 <xTaskIncrementTick>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d003      	beq.n	8010136 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801012e:	4b06      	ldr	r3, [pc, #24]	; (8010148 <xPortSysTickHandler+0x40>)
 8010130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	2300      	movs	r3, #0
 8010138:	603b      	str	r3, [r7, #0]
	__asm volatile
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8010140:	bf00      	nop
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	e000ed04 	.word	0xe000ed04

0801014c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801014c:	b480      	push	{r7}
 801014e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010150:	4b0b      	ldr	r3, [pc, #44]	; (8010180 <vPortSetupTimerInterrupt+0x34>)
 8010152:	2200      	movs	r2, #0
 8010154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010156:	4b0b      	ldr	r3, [pc, #44]	; (8010184 <vPortSetupTimerInterrupt+0x38>)
 8010158:	2200      	movs	r2, #0
 801015a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801015c:	4b0a      	ldr	r3, [pc, #40]	; (8010188 <vPortSetupTimerInterrupt+0x3c>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a0a      	ldr	r2, [pc, #40]	; (801018c <vPortSetupTimerInterrupt+0x40>)
 8010162:	fba2 2303 	umull	r2, r3, r2, r3
 8010166:	099b      	lsrs	r3, r3, #6
 8010168:	4a09      	ldr	r2, [pc, #36]	; (8010190 <vPortSetupTimerInterrupt+0x44>)
 801016a:	3b01      	subs	r3, #1
 801016c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801016e:	4b04      	ldr	r3, [pc, #16]	; (8010180 <vPortSetupTimerInterrupt+0x34>)
 8010170:	2207      	movs	r2, #7
 8010172:	601a      	str	r2, [r3, #0]
}
 8010174:	bf00      	nop
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	e000e010 	.word	0xe000e010
 8010184:	e000e018 	.word	0xe000e018
 8010188:	20000040 	.word	0x20000040
 801018c:	10624dd3 	.word	0x10624dd3
 8010190:	e000e014 	.word	0xe000e014

08010194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80101a4 <vPortEnableVFP+0x10>
 8010198:	6801      	ldr	r1, [r0, #0]
 801019a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801019e:	6001      	str	r1, [r0, #0]
 80101a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80101a2:	bf00      	nop
 80101a4:	e000ed88 	.word	0xe000ed88

080101a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80101ae:	f3ef 8305 	mrs	r3, IPSR
 80101b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2b0f      	cmp	r3, #15
 80101b8:	d915      	bls.n	80101e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80101ba:	4a18      	ldr	r2, [pc, #96]	; (801021c <vPortValidateInterruptPriority+0x74>)
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	4413      	add	r3, r2
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80101c4:	4b16      	ldr	r3, [pc, #88]	; (8010220 <vPortValidateInterruptPriority+0x78>)
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	7afa      	ldrb	r2, [r7, #11]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d20b      	bcs.n	80101e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	b672      	cpsid	i
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	b662      	cpsie	i
 80101e2:	607b      	str	r3, [r7, #4]
 80101e4:	e7fe      	b.n	80101e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80101e6:	4b0f      	ldr	r3, [pc, #60]	; (8010224 <vPortValidateInterruptPriority+0x7c>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80101ee:	4b0e      	ldr	r3, [pc, #56]	; (8010228 <vPortValidateInterruptPriority+0x80>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d90b      	bls.n	801020e <vPortValidateInterruptPriority+0x66>
 80101f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101fa:	b672      	cpsid	i
 80101fc:	f383 8811 	msr	BASEPRI, r3
 8010200:	f3bf 8f6f 	isb	sy
 8010204:	f3bf 8f4f 	dsb	sy
 8010208:	b662      	cpsie	i
 801020a:	603b      	str	r3, [r7, #0]
 801020c:	e7fe      	b.n	801020c <vPortValidateInterruptPriority+0x64>
	}
 801020e:	bf00      	nop
 8010210:	3714      	adds	r7, #20
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop
 801021c:	e000e3f0 	.word	0xe000e3f0
 8010220:	20000468 	.word	0x20000468
 8010224:	e000ed0c 	.word	0xe000ed0c
 8010228:	2000046c 	.word	0x2000046c

0801022c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b08a      	sub	sp, #40	; 0x28
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010234:	2300      	movs	r3, #0
 8010236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010238:	f7fe ffc8 	bl	800f1cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801023c:	4b5a      	ldr	r3, [pc, #360]	; (80103a8 <pvPortMalloc+0x17c>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010244:	f000 f916 	bl	8010474 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010248:	4b58      	ldr	r3, [pc, #352]	; (80103ac <pvPortMalloc+0x180>)
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	4013      	ands	r3, r2
 8010250:	2b00      	cmp	r3, #0
 8010252:	f040 8090 	bne.w	8010376 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d01e      	beq.n	801029a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801025c:	2208      	movs	r2, #8
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4413      	add	r3, r2
 8010262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f003 0307 	and.w	r3, r3, #7
 801026a:	2b00      	cmp	r3, #0
 801026c:	d015      	beq.n	801029a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f023 0307 	bic.w	r3, r3, #7
 8010274:	3308      	adds	r3, #8
 8010276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f003 0307 	and.w	r3, r3, #7
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00b      	beq.n	801029a <pvPortMalloc+0x6e>
 8010282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010286:	b672      	cpsid	i
 8010288:	f383 8811 	msr	BASEPRI, r3
 801028c:	f3bf 8f6f 	isb	sy
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	b662      	cpsie	i
 8010296:	617b      	str	r3, [r7, #20]
 8010298:	e7fe      	b.n	8010298 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d06a      	beq.n	8010376 <pvPortMalloc+0x14a>
 80102a0:	4b43      	ldr	r3, [pc, #268]	; (80103b0 <pvPortMalloc+0x184>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d865      	bhi.n	8010376 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80102aa:	4b42      	ldr	r3, [pc, #264]	; (80103b4 <pvPortMalloc+0x188>)
 80102ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80102ae:	4b41      	ldr	r3, [pc, #260]	; (80103b4 <pvPortMalloc+0x188>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102b4:	e004      	b.n	80102c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80102b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80102ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80102c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d903      	bls.n	80102d2 <pvPortMalloc+0xa6>
 80102ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d1f1      	bne.n	80102b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80102d2:	4b35      	ldr	r3, [pc, #212]	; (80103a8 <pvPortMalloc+0x17c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102d8:	429a      	cmp	r2, r3
 80102da:	d04c      	beq.n	8010376 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80102dc:	6a3b      	ldr	r3, [r7, #32]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2208      	movs	r2, #8
 80102e2:	4413      	add	r3, r2
 80102e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80102e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	6a3b      	ldr	r3, [r7, #32]
 80102ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80102ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f0:	685a      	ldr	r2, [r3, #4]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	1ad2      	subs	r2, r2, r3
 80102f6:	2308      	movs	r3, #8
 80102f8:	005b      	lsls	r3, r3, #1
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d920      	bls.n	8010340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80102fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	4413      	add	r3, r2
 8010304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	f003 0307 	and.w	r3, r3, #7
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00b      	beq.n	8010328 <pvPortMalloc+0xfc>
 8010310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010314:	b672      	cpsid	i
 8010316:	f383 8811 	msr	BASEPRI, r3
 801031a:	f3bf 8f6f 	isb	sy
 801031e:	f3bf 8f4f 	dsb	sy
 8010322:	b662      	cpsie	i
 8010324:	613b      	str	r3, [r7, #16]
 8010326:	e7fe      	b.n	8010326 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032a:	685a      	ldr	r2, [r3, #4]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	1ad2      	subs	r2, r2, r3
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801033a:	69b8      	ldr	r0, [r7, #24]
 801033c:	f000 f8fc 	bl	8010538 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010340:	4b1b      	ldr	r3, [pc, #108]	; (80103b0 <pvPortMalloc+0x184>)
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	1ad3      	subs	r3, r2, r3
 801034a:	4a19      	ldr	r2, [pc, #100]	; (80103b0 <pvPortMalloc+0x184>)
 801034c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801034e:	4b18      	ldr	r3, [pc, #96]	; (80103b0 <pvPortMalloc+0x184>)
 8010350:	681a      	ldr	r2, [r3, #0]
 8010352:	4b19      	ldr	r3, [pc, #100]	; (80103b8 <pvPortMalloc+0x18c>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	429a      	cmp	r2, r3
 8010358:	d203      	bcs.n	8010362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801035a:	4b15      	ldr	r3, [pc, #84]	; (80103b0 <pvPortMalloc+0x184>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4a16      	ldr	r2, [pc, #88]	; (80103b8 <pvPortMalloc+0x18c>)
 8010360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	685a      	ldr	r2, [r3, #4]
 8010366:	4b11      	ldr	r3, [pc, #68]	; (80103ac <pvPortMalloc+0x180>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	431a      	orrs	r2, r3
 801036c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010372:	2200      	movs	r2, #0
 8010374:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010376:	f7fe ff37 	bl	800f1e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	f003 0307 	and.w	r3, r3, #7
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00b      	beq.n	801039c <pvPortMalloc+0x170>
 8010384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010388:	b672      	cpsid	i
 801038a:	f383 8811 	msr	BASEPRI, r3
 801038e:	f3bf 8f6f 	isb	sy
 8010392:	f3bf 8f4f 	dsb	sy
 8010396:	b662      	cpsie	i
 8010398:	60fb      	str	r3, [r7, #12]
 801039a:	e7fe      	b.n	801039a <pvPortMalloc+0x16e>
	return pvReturn;
 801039c:	69fb      	ldr	r3, [r7, #28]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3728      	adds	r7, #40	; 0x28
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	20004078 	.word	0x20004078
 80103ac:	20004084 	.word	0x20004084
 80103b0:	2000407c 	.word	0x2000407c
 80103b4:	20004070 	.word	0x20004070
 80103b8:	20004080 	.word	0x20004080

080103bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b086      	sub	sp, #24
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d04a      	beq.n	8010464 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80103ce:	2308      	movs	r3, #8
 80103d0:	425b      	negs	r3, r3
 80103d2:	697a      	ldr	r2, [r7, #20]
 80103d4:	4413      	add	r3, r2
 80103d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	685a      	ldr	r2, [r3, #4]
 80103e0:	4b22      	ldr	r3, [pc, #136]	; (801046c <vPortFree+0xb0>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4013      	ands	r3, r2
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d10b      	bne.n	8010402 <vPortFree+0x46>
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	b672      	cpsid	i
 80103f0:	f383 8811 	msr	BASEPRI, r3
 80103f4:	f3bf 8f6f 	isb	sy
 80103f8:	f3bf 8f4f 	dsb	sy
 80103fc:	b662      	cpsie	i
 80103fe:	60fb      	str	r3, [r7, #12]
 8010400:	e7fe      	b.n	8010400 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00b      	beq.n	8010422 <vPortFree+0x66>
 801040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040e:	b672      	cpsid	i
 8010410:	f383 8811 	msr	BASEPRI, r3
 8010414:	f3bf 8f6f 	isb	sy
 8010418:	f3bf 8f4f 	dsb	sy
 801041c:	b662      	cpsie	i
 801041e:	60bb      	str	r3, [r7, #8]
 8010420:	e7fe      	b.n	8010420 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	685a      	ldr	r2, [r3, #4]
 8010426:	4b11      	ldr	r3, [pc, #68]	; (801046c <vPortFree+0xb0>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4013      	ands	r3, r2
 801042c:	2b00      	cmp	r3, #0
 801042e:	d019      	beq.n	8010464 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d115      	bne.n	8010464 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	685a      	ldr	r2, [r3, #4]
 801043c:	4b0b      	ldr	r3, [pc, #44]	; (801046c <vPortFree+0xb0>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	43db      	mvns	r3, r3
 8010442:	401a      	ands	r2, r3
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010448:	f7fe fec0 	bl	800f1cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	685a      	ldr	r2, [r3, #4]
 8010450:	4b07      	ldr	r3, [pc, #28]	; (8010470 <vPortFree+0xb4>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4413      	add	r3, r2
 8010456:	4a06      	ldr	r2, [pc, #24]	; (8010470 <vPortFree+0xb4>)
 8010458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801045a:	6938      	ldr	r0, [r7, #16]
 801045c:	f000 f86c 	bl	8010538 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010460:	f7fe fec2 	bl	800f1e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010464:	bf00      	nop
 8010466:	3718      	adds	r7, #24
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	20004084 	.word	0x20004084
 8010470:	2000407c 	.word	0x2000407c

08010474 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801047a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801047e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010480:	4b27      	ldr	r3, [pc, #156]	; (8010520 <prvHeapInit+0xac>)
 8010482:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f003 0307 	and.w	r3, r3, #7
 801048a:	2b00      	cmp	r3, #0
 801048c:	d00c      	beq.n	80104a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	3307      	adds	r3, #7
 8010492:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f023 0307 	bic.w	r3, r3, #7
 801049a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	1ad3      	subs	r3, r2, r3
 80104a2:	4a1f      	ldr	r2, [pc, #124]	; (8010520 <prvHeapInit+0xac>)
 80104a4:	4413      	add	r3, r2
 80104a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80104ac:	4a1d      	ldr	r2, [pc, #116]	; (8010524 <prvHeapInit+0xb0>)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80104b2:	4b1c      	ldr	r3, [pc, #112]	; (8010524 <prvHeapInit+0xb0>)
 80104b4:	2200      	movs	r2, #0
 80104b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	68ba      	ldr	r2, [r7, #8]
 80104bc:	4413      	add	r3, r2
 80104be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80104c0:	2208      	movs	r2, #8
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	1a9b      	subs	r3, r3, r2
 80104c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f023 0307 	bic.w	r3, r3, #7
 80104ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	4a15      	ldr	r2, [pc, #84]	; (8010528 <prvHeapInit+0xb4>)
 80104d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80104d6:	4b14      	ldr	r3, [pc, #80]	; (8010528 <prvHeapInit+0xb4>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2200      	movs	r2, #0
 80104dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80104de:	4b12      	ldr	r3, [pc, #72]	; (8010528 <prvHeapInit+0xb4>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2200      	movs	r2, #0
 80104e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	68fa      	ldr	r2, [r7, #12]
 80104ee:	1ad2      	subs	r2, r2, r3
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80104f4:	4b0c      	ldr	r3, [pc, #48]	; (8010528 <prvHeapInit+0xb4>)
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	4a0a      	ldr	r2, [pc, #40]	; (801052c <prvHeapInit+0xb8>)
 8010502:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	4a09      	ldr	r2, [pc, #36]	; (8010530 <prvHeapInit+0xbc>)
 801050a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801050c:	4b09      	ldr	r3, [pc, #36]	; (8010534 <prvHeapInit+0xc0>)
 801050e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010512:	601a      	str	r2, [r3, #0]
}
 8010514:	bf00      	nop
 8010516:	3714      	adds	r7, #20
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	20000470 	.word	0x20000470
 8010524:	20004070 	.word	0x20004070
 8010528:	20004078 	.word	0x20004078
 801052c:	20004080 	.word	0x20004080
 8010530:	2000407c 	.word	0x2000407c
 8010534:	20004084 	.word	0x20004084

08010538 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010540:	4b28      	ldr	r3, [pc, #160]	; (80105e4 <prvInsertBlockIntoFreeList+0xac>)
 8010542:	60fb      	str	r3, [r7, #12]
 8010544:	e002      	b.n	801054c <prvInsertBlockIntoFreeList+0x14>
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	60fb      	str	r3, [r7, #12]
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	429a      	cmp	r2, r3
 8010554:	d8f7      	bhi.n	8010546 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	4413      	add	r3, r2
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	429a      	cmp	r2, r3
 8010566:	d108      	bne.n	801057a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	685a      	ldr	r2, [r3, #4]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	441a      	add	r2, r3
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	68ba      	ldr	r2, [r7, #8]
 8010584:	441a      	add	r2, r3
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	429a      	cmp	r2, r3
 801058c:	d118      	bne.n	80105c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	4b15      	ldr	r3, [pc, #84]	; (80105e8 <prvInsertBlockIntoFreeList+0xb0>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	429a      	cmp	r2, r3
 8010598:	d00d      	beq.n	80105b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	685a      	ldr	r2, [r3, #4]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	441a      	add	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	601a      	str	r2, [r3, #0]
 80105b4:	e008      	b.n	80105c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80105b6:	4b0c      	ldr	r3, [pc, #48]	; (80105e8 <prvInsertBlockIntoFreeList+0xb0>)
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	601a      	str	r2, [r3, #0]
 80105be:	e003      	b.n	80105c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681a      	ldr	r2, [r3, #0]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d002      	beq.n	80105d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105d6:	bf00      	nop
 80105d8:	3714      	adds	r7, #20
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	20004070 	.word	0x20004070
 80105e8:	20004078 	.word	0x20004078

080105ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80105f6:	f008 ffc5 	bl	8019584 <sys_timeouts_sleeptime>
 80105fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010602:	d10b      	bne.n	801061c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010604:	4813      	ldr	r0, [pc, #76]	; (8010654 <tcpip_timeouts_mbox_fetch+0x68>)
 8010606:	f00b fd2e 	bl	801c066 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801060a:	2200      	movs	r2, #0
 801060c:	6839      	ldr	r1, [r7, #0]
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f00b fca0 	bl	801bf54 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010614:	480f      	ldr	r0, [pc, #60]	; (8010654 <tcpip_timeouts_mbox_fetch+0x68>)
 8010616:	f00b fd17 	bl	801c048 <sys_mutex_lock>
    return;
 801061a:	e018      	b.n	801064e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d102      	bne.n	8010628 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010622:	f008 ff75 	bl	8019510 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010626:	e7e6      	b.n	80105f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010628:	480a      	ldr	r0, [pc, #40]	; (8010654 <tcpip_timeouts_mbox_fetch+0x68>)
 801062a:	f00b fd1c 	bl	801c066 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801062e:	68fa      	ldr	r2, [r7, #12]
 8010630:	6839      	ldr	r1, [r7, #0]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f00b fc8e 	bl	801bf54 <sys_arch_mbox_fetch>
 8010638:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801063a:	4806      	ldr	r0, [pc, #24]	; (8010654 <tcpip_timeouts_mbox_fetch+0x68>)
 801063c:	f00b fd04 	bl	801c048 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010646:	d102      	bne.n	801064e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010648:	f008 ff62 	bl	8019510 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801064c:	e7d3      	b.n	80105f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801064e:	3710      	adds	r7, #16
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	20007c28 	.word	0x20007c28

08010658 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010660:	4810      	ldr	r0, [pc, #64]	; (80106a4 <tcpip_thread+0x4c>)
 8010662:	f00b fcf1 	bl	801c048 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010666:	4b10      	ldr	r3, [pc, #64]	; (80106a8 <tcpip_thread+0x50>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d005      	beq.n	801067a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801066e:	4b0e      	ldr	r3, [pc, #56]	; (80106a8 <tcpip_thread+0x50>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4a0e      	ldr	r2, [pc, #56]	; (80106ac <tcpip_thread+0x54>)
 8010674:	6812      	ldr	r2, [r2, #0]
 8010676:	4610      	mov	r0, r2
 8010678:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801067a:	f107 030c 	add.w	r3, r7, #12
 801067e:	4619      	mov	r1, r3
 8010680:	480b      	ldr	r0, [pc, #44]	; (80106b0 <tcpip_thread+0x58>)
 8010682:	f7ff ffb3 	bl	80105ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d106      	bne.n	801069a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801068c:	4b09      	ldr	r3, [pc, #36]	; (80106b4 <tcpip_thread+0x5c>)
 801068e:	2291      	movs	r2, #145	; 0x91
 8010690:	4909      	ldr	r1, [pc, #36]	; (80106b8 <tcpip_thread+0x60>)
 8010692:	480a      	ldr	r0, [pc, #40]	; (80106bc <tcpip_thread+0x64>)
 8010694:	f00b fd7e 	bl	801c194 <iprintf>
      continue;
 8010698:	e003      	b.n	80106a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	4618      	mov	r0, r3
 801069e:	f000 f80f 	bl	80106c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80106a2:	e7ea      	b.n	801067a <tcpip_thread+0x22>
 80106a4:	20007c28 	.word	0x20007c28
 80106a8:	20004088 	.word	0x20004088
 80106ac:	2000408c 	.word	0x2000408c
 80106b0:	20004090 	.word	0x20004090
 80106b4:	0801d0f8 	.word	0x0801d0f8
 80106b8:	0801d128 	.word	0x0801d128
 80106bc:	0801d148 	.word	0x0801d148

080106c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	d018      	beq.n	8010702 <tcpip_thread_handle_msg+0x42>
 80106d0:	2b02      	cmp	r3, #2
 80106d2:	d021      	beq.n	8010718 <tcpip_thread_handle_msg+0x58>
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d126      	bne.n	8010726 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	687a      	ldr	r2, [r7, #4]
 80106de:	6850      	ldr	r0, [r2, #4]
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	6892      	ldr	r2, [r2, #8]
 80106e4:	4611      	mov	r1, r2
 80106e6:	4798      	blx	r3
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d004      	beq.n	80106f8 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f002 fb10 	bl	8012d18 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80106f8:	6879      	ldr	r1, [r7, #4]
 80106fa:	2009      	movs	r0, #9
 80106fc:	f001 fc6c 	bl	8011fd8 <memp_free>
      break;
 8010700:	e018      	b.n	8010734 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	6892      	ldr	r2, [r2, #8]
 801070a:	4610      	mov	r0, r2
 801070c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801070e:	6879      	ldr	r1, [r7, #4]
 8010710:	2008      	movs	r0, #8
 8010712:	f001 fc61 	bl	8011fd8 <memp_free>
      break;
 8010716:	e00d      	b.n	8010734 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	6892      	ldr	r2, [r2, #8]
 8010720:	4610      	mov	r0, r2
 8010722:	4798      	blx	r3
      break;
 8010724:	e006      	b.n	8010734 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010726:	4b05      	ldr	r3, [pc, #20]	; (801073c <tcpip_thread_handle_msg+0x7c>)
 8010728:	22cf      	movs	r2, #207	; 0xcf
 801072a:	4905      	ldr	r1, [pc, #20]	; (8010740 <tcpip_thread_handle_msg+0x80>)
 801072c:	4805      	ldr	r0, [pc, #20]	; (8010744 <tcpip_thread_handle_msg+0x84>)
 801072e:	f00b fd31 	bl	801c194 <iprintf>
      break;
 8010732:	bf00      	nop
  }
}
 8010734:	bf00      	nop
 8010736:	3708      	adds	r7, #8
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	0801d0f8 	.word	0x0801d0f8
 8010740:	0801d128 	.word	0x0801d128
 8010744:	0801d148 	.word	0x0801d148

08010748 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010754:	481a      	ldr	r0, [pc, #104]	; (80107c0 <tcpip_inpkt+0x78>)
 8010756:	f00b fc3c 	bl	801bfd2 <sys_mbox_valid>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d105      	bne.n	801076c <tcpip_inpkt+0x24>
 8010760:	4b18      	ldr	r3, [pc, #96]	; (80107c4 <tcpip_inpkt+0x7c>)
 8010762:	22fc      	movs	r2, #252	; 0xfc
 8010764:	4918      	ldr	r1, [pc, #96]	; (80107c8 <tcpip_inpkt+0x80>)
 8010766:	4819      	ldr	r0, [pc, #100]	; (80107cc <tcpip_inpkt+0x84>)
 8010768:	f00b fd14 	bl	801c194 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801076c:	2009      	movs	r0, #9
 801076e:	f001 fbe1 	bl	8011f34 <memp_malloc>
 8010772:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d102      	bne.n	8010780 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801077e:	e01a      	b.n	80107b6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	2200      	movs	r2, #0
 8010784:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	68fa      	ldr	r2, [r7, #12]
 801078a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	68ba      	ldr	r2, [r7, #8]
 8010790:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010798:	6979      	ldr	r1, [r7, #20]
 801079a:	4809      	ldr	r0, [pc, #36]	; (80107c0 <tcpip_inpkt+0x78>)
 801079c:	f00b fbc0 	bl	801bf20 <sys_mbox_trypost>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d006      	beq.n	80107b4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80107a6:	6979      	ldr	r1, [r7, #20]
 80107a8:	2009      	movs	r0, #9
 80107aa:	f001 fc15 	bl	8011fd8 <memp_free>
    return ERR_MEM;
 80107ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107b2:	e000      	b.n	80107b6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80107b4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3718      	adds	r7, #24
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	20004090 	.word	0x20004090
 80107c4:	0801d0f8 	.word	0x0801d0f8
 80107c8:	0801d170 	.word	0x0801d170
 80107cc:	0801d148 	.word	0x0801d148

080107d0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80107e0:	f003 0318 	and.w	r3, r3, #24
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d006      	beq.n	80107f6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80107e8:	4a08      	ldr	r2, [pc, #32]	; (801080c <tcpip_input+0x3c>)
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7ff ffab 	bl	8010748 <tcpip_inpkt>
 80107f2:	4603      	mov	r3, r0
 80107f4:	e005      	b.n	8010802 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80107f6:	4a06      	ldr	r2, [pc, #24]	; (8010810 <tcpip_input+0x40>)
 80107f8:	6839      	ldr	r1, [r7, #0]
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7ff ffa4 	bl	8010748 <tcpip_inpkt>
 8010800:	4603      	mov	r3, r0
}
 8010802:	4618      	mov	r0, r3
 8010804:	3708      	adds	r7, #8
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	0801bd31 	.word	0x0801bd31
 8010810:	0801ac51 	.word	0x0801ac51

08010814 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b084      	sub	sp, #16
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801081e:	4819      	ldr	r0, [pc, #100]	; (8010884 <tcpip_try_callback+0x70>)
 8010820:	f00b fbd7 	bl	801bfd2 <sys_mbox_valid>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d106      	bne.n	8010838 <tcpip_try_callback+0x24>
 801082a:	4b17      	ldr	r3, [pc, #92]	; (8010888 <tcpip_try_callback+0x74>)
 801082c:	f240 125d 	movw	r2, #349	; 0x15d
 8010830:	4916      	ldr	r1, [pc, #88]	; (801088c <tcpip_try_callback+0x78>)
 8010832:	4817      	ldr	r0, [pc, #92]	; (8010890 <tcpip_try_callback+0x7c>)
 8010834:	f00b fcae 	bl	801c194 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010838:	2008      	movs	r0, #8
 801083a:	f001 fb7b 	bl	8011f34 <memp_malloc>
 801083e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d102      	bne.n	801084c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801084a:	e017      	b.n	801087c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2201      	movs	r2, #1
 8010850:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	683a      	ldr	r2, [r7, #0]
 801085c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801085e:	68f9      	ldr	r1, [r7, #12]
 8010860:	4808      	ldr	r0, [pc, #32]	; (8010884 <tcpip_try_callback+0x70>)
 8010862:	f00b fb5d 	bl	801bf20 <sys_mbox_trypost>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d006      	beq.n	801087a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801086c:	68f9      	ldr	r1, [r7, #12]
 801086e:	2008      	movs	r0, #8
 8010870:	f001 fbb2 	bl	8011fd8 <memp_free>
    return ERR_MEM;
 8010874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010878:	e000      	b.n	801087c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	20004090 	.word	0x20004090
 8010888:	0801d0f8 	.word	0x0801d0f8
 801088c:	0801d170 	.word	0x0801d170
 8010890:	0801d148 	.word	0x0801d148

08010894 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af02      	add	r7, sp, #8
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801089e:	f000 fec1 	bl	8011624 <lwip_init>

  tcpip_init_done = initfunc;
 80108a2:	4a17      	ldr	r2, [pc, #92]	; (8010900 <tcpip_init+0x6c>)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80108a8:	4a16      	ldr	r2, [pc, #88]	; (8010904 <tcpip_init+0x70>)
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80108ae:	2106      	movs	r1, #6
 80108b0:	4815      	ldr	r0, [pc, #84]	; (8010908 <tcpip_init+0x74>)
 80108b2:	f00b fb13 	bl	801bedc <sys_mbox_new>
 80108b6:	4603      	mov	r3, r0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d006      	beq.n	80108ca <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80108bc:	4b13      	ldr	r3, [pc, #76]	; (801090c <tcpip_init+0x78>)
 80108be:	f240 2261 	movw	r2, #609	; 0x261
 80108c2:	4913      	ldr	r1, [pc, #76]	; (8010910 <tcpip_init+0x7c>)
 80108c4:	4813      	ldr	r0, [pc, #76]	; (8010914 <tcpip_init+0x80>)
 80108c6:	f00b fc65 	bl	801c194 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80108ca:	4813      	ldr	r0, [pc, #76]	; (8010918 <tcpip_init+0x84>)
 80108cc:	f00b fba0 	bl	801c010 <sys_mutex_new>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d006      	beq.n	80108e4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80108d6:	4b0d      	ldr	r3, [pc, #52]	; (801090c <tcpip_init+0x78>)
 80108d8:	f240 2265 	movw	r2, #613	; 0x265
 80108dc:	490f      	ldr	r1, [pc, #60]	; (801091c <tcpip_init+0x88>)
 80108de:	480d      	ldr	r0, [pc, #52]	; (8010914 <tcpip_init+0x80>)
 80108e0:	f00b fc58 	bl	801c194 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80108e4:	2300      	movs	r3, #0
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108ec:	2200      	movs	r2, #0
 80108ee:	490c      	ldr	r1, [pc, #48]	; (8010920 <tcpip_init+0x8c>)
 80108f0:	480c      	ldr	r0, [pc, #48]	; (8010924 <tcpip_init+0x90>)
 80108f2:	f00b fbc5 	bl	801c080 <sys_thread_new>
}
 80108f6:	bf00      	nop
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	20004088 	.word	0x20004088
 8010904:	2000408c 	.word	0x2000408c
 8010908:	20004090 	.word	0x20004090
 801090c:	0801d0f8 	.word	0x0801d0f8
 8010910:	0801d180 	.word	0x0801d180
 8010914:	0801d148 	.word	0x0801d148
 8010918:	20007c28 	.word	0x20007c28
 801091c:	0801d1a4 	.word	0x0801d1a4
 8010920:	08010659 	.word	0x08010659
 8010924:	0801d1c8 	.word	0x0801d1c8

08010928 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b084      	sub	sp, #16
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d002      	beq.n	801093e <fs_open+0x16>
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d102      	bne.n	8010944 <fs_open+0x1c>
    return ERR_ARG;
 801093e:	f06f 030f 	mvn.w	r3, #15
 8010942:	e028      	b.n	8010996 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8010944:	4b16      	ldr	r3, [pc, #88]	; (80109a0 <fs_open+0x78>)
 8010946:	60fb      	str	r3, [r7, #12]
 8010948:	e020      	b.n	801098c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	4619      	mov	r1, r3
 8010950:	6838      	ldr	r0, [r7, #0]
 8010952:	f7f7 fc75 	bl	8008240 <strcmp>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d114      	bne.n	8010986 <fs_open+0x5e>
      file->data = (const char *)f->data;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	689a      	ldr	r2, [r3, #8]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	68da      	ldr	r2, [r3, #12]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	68da      	ldr	r2, [r3, #12]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	7c1a      	ldrb	r2, [r3, #16]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	e007      	b.n	8010996 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	60fb      	str	r3, [r7, #12]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1db      	bne.n	801094a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8010992:	f06f 0305 	mvn.w	r3, #5
}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	080308bc 	.word	0x080308bc

080109a4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80109ac:	bf00      	nop
 80109ae:	370c      	adds	r7, #12
 80109b0:	46bd      	mov	sp, r7
 80109b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b6:	4770      	bx	lr

080109b8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	685a      	ldr	r2, [r3, #4]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	1ad3      	subs	r3, r2, r3
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	370c      	adds	r7, #12
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr

080109d6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b082      	sub	sp, #8
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80109de:	222c      	movs	r2, #44	; 0x2c
 80109e0:	2100      	movs	r1, #0
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f00b fbce 	bl	801c184 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80109e8:	bf00      	nop
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80109f6:	202c      	movs	r0, #44	; 0x2c
 80109f8:	f001 f91a 	bl	8011c30 <mem_malloc>
 80109fc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d002      	beq.n	8010a0a <http_state_alloc+0x1a>
    http_state_init(ret);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7ff ffe6 	bl	80109d6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8010a0a:	687b      	ldr	r3, [r7, #4]
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	695b      	ldr	r3, [r3, #20]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d007      	beq.n	8010a34 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	695b      	ldr	r3, [r3, #20]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7ff ffbb 	bl	80109a4 <fs_close>
    hs->handle = NULL;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2200      	movs	r2, #0
 8010a32:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6a1b      	ldr	r3, [r3, #32]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d007      	beq.n	8010a4c <http_state_eof+0x38>
    pbuf_free(hs->req);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a1b      	ldr	r3, [r3, #32]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f002 f969 	bl	8012d18 <pbuf_free>
    hs->req = NULL;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8010a4c:	bf00      	nop
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d005      	beq.n	8010a6e <http_state_free+0x1a>
    http_state_eof(hs);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff ffd6 	bl	8010a14 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f000 ff47 	bl	80118fc <mem_free>
  }
}
 8010a6e:	bf00      	nop
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
	...

08010a78 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b086      	sub	sp, #24
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
 8010a84:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d106      	bne.n	8010a9a <http_write+0x22>
 8010a8c:	4b2c      	ldr	r3, [pc, #176]	; (8010b40 <http_write+0xc8>)
 8010a8e:	f240 2219 	movw	r2, #537	; 0x219
 8010a92:	492c      	ldr	r1, [pc, #176]	; (8010b44 <http_write+0xcc>)
 8010a94:	482c      	ldr	r0, [pc, #176]	; (8010b48 <http_write+0xd0>)
 8010a96:	f00b fb7d 	bl	801c194 <iprintf>
  len = *length;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8010aa0:	8afb      	ldrh	r3, [r7, #22]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d101      	bne.n	8010aaa <http_write+0x32>
    return ERR_OK;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	e045      	b.n	8010b36 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010ab0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8010ab2:	8aba      	ldrh	r2, [r7, #20]
 8010ab4:	8afb      	ldrh	r3, [r7, #22]
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d201      	bcs.n	8010abe <http_write+0x46>
    len = max_len;
 8010aba:	8abb      	ldrh	r3, [r7, #20]
 8010abc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ac2:	005b      	lsls	r3, r3, #1
 8010ac4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8010ac6:	8afa      	ldrh	r2, [r7, #22]
 8010ac8:	8abb      	ldrh	r3, [r7, #20]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d901      	bls.n	8010ad2 <http_write+0x5a>
    len = max_len;
 8010ace:	8abb      	ldrh	r3, [r7, #20]
 8010ad0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8010ad2:	78fb      	ldrb	r3, [r7, #3]
 8010ad4:	8afa      	ldrh	r2, [r7, #22]
 8010ad6:	68b9      	ldr	r1, [r7, #8]
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	f006 fe9f 	bl	801781c <tcp_write>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8010ae2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010aea:	d10f      	bne.n	8010b0c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d004      	beq.n	8010b00 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8010afc:	2b08      	cmp	r3, #8
 8010afe:	d902      	bls.n	8010b06 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8010b00:	2301      	movs	r3, #1
 8010b02:	82fb      	strh	r3, [r7, #22]
 8010b04:	e002      	b.n	8010b0c <http_write+0x94>
      } else {
        len /= 2;
 8010b06:	8afb      	ldrh	r3, [r7, #22]
 8010b08:	085b      	lsrs	r3, r3, #1
 8010b0a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8010b0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b14:	d102      	bne.n	8010b1c <http_write+0xa4>
 8010b16:	8afb      	ldrh	r3, [r7, #22]
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d8da      	bhi.n	8010ad2 <http_write+0x5a>

  if (err == ERR_OK) {
 8010b1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d103      	bne.n	8010b2c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	8afa      	ldrh	r2, [r7, #22]
 8010b28:	801a      	strh	r2, [r3, #0]
 8010b2a:	e002      	b.n	8010b32 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8010b32:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3718      	adds	r7, #24
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	0801d218 	.word	0x0801d218
 8010b44:	0801d250 	.word	0x0801d250
 8010b48:	0801d260 	.word	0x0801d260

08010b4c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	4613      	mov	r3, r2
 8010b58:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	f003 ff21 	bl	80149a4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8010b62:	2100      	movs	r1, #0
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f003 ff2f 	bl	80149c8 <tcp_recv>
  altcp_err(pcb, NULL);
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f003 ff6f 	bl	8014a50 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8010b72:	2200      	movs	r2, #0
 8010b74:	2100      	movs	r1, #0
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	f003 ffa4 	bl	8014ac4 <tcp_poll>
  altcp_sent(pcb, NULL);
 8010b7c:	2100      	movs	r1, #0
 8010b7e:	68f8      	ldr	r0, [r7, #12]
 8010b80:	f003 ff44 	bl	8014a0c <tcp_sent>
  if (hs != NULL) {
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d002      	beq.n	8010b90 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8010b8a:	68b8      	ldr	r0, [r7, #8]
 8010b8c:	f7ff ff62 	bl	8010a54 <http_state_free>
  }

  if (abort_conn) {
 8010b90:	79fb      	ldrb	r3, [r7, #7]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d004      	beq.n	8010ba0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f002 fe4a 	bl	8013830 <tcp_abort>
    return ERR_OK;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	e00f      	b.n	8010bc0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8010ba0:	68f8      	ldr	r0, [r7, #12]
 8010ba2:	f002 fd5b 	bl	801365c <tcp_close>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8010baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d004      	beq.n	8010bbc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8010bb2:	2204      	movs	r2, #4
 8010bb4:	4904      	ldr	r1, [pc, #16]	; (8010bc8 <http_close_or_abort_conn+0x7c>)
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f003 ff84 	bl	8014ac4 <tcp_poll>
  }
  return err;
 8010bbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	3718      	adds	r7, #24
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	0801128f 	.word	0x0801128f

08010bcc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	6839      	ldr	r1, [r7, #0]
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f7ff ffb6 	bl	8010b4c <http_close_or_abort_conn>
 8010be0:	4603      	mov	r3, r0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b082      	sub	sp, #8
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8010bf4:	6839      	ldr	r1, [r7, #0]
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7ff ffe8 	bl	8010bcc <http_close_conn>
  }
}
 8010bfc:	bf00      	nop
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	695b      	ldr	r3, [r3, #20]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d105      	bne.n	8010c22 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8010c16:	6839      	ldr	r1, [r7, #0]
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff ffe6 	bl	8010bea <http_eof>
    return 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e016      	b.n	8010c50 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	695b      	ldr	r3, [r3, #20]
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7ff fec6 	bl	80109b8 <fs_bytes_left>
 8010c2c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dc05      	bgt.n	8010c40 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7ff ffd7 	bl	8010bea <http_eof>
    return 0;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	e007      	b.n	8010c50 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8010c40:	4b05      	ldr	r3, [pc, #20]	; (8010c58 <http_check_eof+0x54>)
 8010c42:	f240 429d 	movw	r2, #1181	; 0x49d
 8010c46:	4905      	ldr	r1, [pc, #20]	; (8010c5c <http_check_eof+0x58>)
 8010c48:	4805      	ldr	r0, [pc, #20]	; (8010c60 <http_check_eof+0x5c>)
 8010c4a:	f00b faa3 	bl	801c194 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8010c4e:	2301      	movs	r3, #1
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	0801d218 	.word	0x0801d218
 8010c5c:	0801d288 	.word	0x0801d288
 8010c60:	0801d260 	.word	0x0801d260

08010c64 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d803      	bhi.n	8010c86 <http_send_data_nonssi+0x22>
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	e001      	b.n	8010c8a <http_send_data_nonssi+0x26>
 8010c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c8a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	6999      	ldr	r1, [r3, #24]
 8010c90:	f107 020c 	add.w	r2, r7, #12
 8010c94:	2300      	movs	r3, #0
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f7ff feee 	bl	8010a78 <http_write>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8010ca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d10d      	bne.n	8010cc4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	699b      	ldr	r3, [r3, #24]
 8010cb0:	89ba      	ldrh	r2, [r7, #12]
 8010cb2:	441a      	add	r2, r3
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cbc:	89ba      	ldrh	r2, [r7, #12]
 8010cbe:	1a9a      	subs	r2, r3, r2
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8010cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b084      	sub	sp, #16
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
 8010cd6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8010cdc:	683b      	ldr	r3, [r7, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d101      	bne.n	8010ce6 <http_send+0x18>
    return 0;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	e025      	b.n	8010d32 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d108      	bne.n	8010d00 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f7ff ff87 	bl	8010c04 <http_check_eof>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d101      	bne.n	8010d00 <http_send+0x32>
      return 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	e018      	b.n	8010d32 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8010d00:	6839      	ldr	r1, [r7, #0]
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f7ff ffae 	bl	8010c64 <http_send_data_nonssi>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10d      	bne.n	8010d30 <http_send+0x62>
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	695b      	ldr	r3, [r3, #20]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff fe4d 	bl	80109b8 <fs_bytes_left>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	dc05      	bgt.n	8010d30 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8010d24:	6839      	ldr	r1, [r7, #0]
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f7ff ff5f 	bl	8010bea <http_eof>
    return 0;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	e000      	b.n	8010d32 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8010d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3710      	adds	r7, #16
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
	...

08010d3c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	4a1c      	ldr	r2, [pc, #112]	; (8010dbc <http_get_404_file+0x80>)
 8010d4a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	4619      	mov	r1, r3
 8010d54:	4610      	mov	r0, r2
 8010d56:	f7ff fde7 	bl	8010928 <fs_open>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d024      	beq.n	8010db0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	4a15      	ldr	r2, [pc, #84]	; (8010dc0 <http_get_404_file+0x84>)
 8010d6a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	4619      	mov	r1, r3
 8010d74:	4610      	mov	r0, r2
 8010d76:	f7ff fdd7 	bl	8010928 <fs_open>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d014      	beq.n	8010db0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	4a0e      	ldr	r2, [pc, #56]	; (8010dc4 <http_get_404_file+0x88>)
 8010d8a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4619      	mov	r1, r3
 8010d94:	4610      	mov	r0, r2
 8010d96:	f7ff fdc7 	bl	8010928 <fs_open>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8010d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d004      	beq.n	8010db0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	2200      	movs	r2, #0
 8010daa:	601a      	str	r2, [r3, #0]
        return NULL;
 8010dac:	2300      	movs	r3, #0
 8010dae:	e000      	b.n	8010db2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8010db0:	687b      	ldr	r3, [r7, #4]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3710      	adds	r7, #16
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	0801d2c0 	.word	0x0801d2c0
 8010dc0:	0801d2cc 	.word	0x0801d2cc
 8010dc4:	0801d2d8 	.word	0x0801d2d8

08010dc8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b08e      	sub	sp, #56	; 0x38
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d106      	bne.n	8010dec <http_parse_request+0x24>
 8010dde:	4b65      	ldr	r3, [pc, #404]	; (8010f74 <http_parse_request+0x1ac>)
 8010de0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8010de4:	4964      	ldr	r1, [pc, #400]	; (8010f78 <http_parse_request+0x1b0>)
 8010de6:	4865      	ldr	r0, [pc, #404]	; (8010f7c <http_parse_request+0x1b4>)
 8010de8:	f00b f9d4 	bl	801c194 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d106      	bne.n	8010e00 <http_parse_request+0x38>
 8010df2:	4b60      	ldr	r3, [pc, #384]	; (8010f74 <http_parse_request+0x1ac>)
 8010df4:	f240 72af 	movw	r2, #1967	; 0x7af
 8010df8:	4961      	ldr	r1, [pc, #388]	; (8010f80 <http_parse_request+0x1b8>)
 8010dfa:	4860      	ldr	r0, [pc, #384]	; (8010f7c <http_parse_request+0x1b4>)
 8010dfc:	f00b f9ca 	bl	801c194 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	695b      	ldr	r3, [r3, #20]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d103      	bne.n	8010e10 <http_parse_request+0x48>
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	699b      	ldr	r3, [r3, #24]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8010e10:	f06f 0307 	mvn.w	r3, #7
 8010e14:	e0aa      	b.n	8010f6c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	6a1b      	ldr	r3, [r3, #32]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d103      	bne.n	8010e26 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e22:	621a      	str	r2, [r3, #32]
 8010e24:	e005      	b.n	8010e32 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	6a1b      	ldr	r3, [r3, #32]
 8010e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f002 f841 	bl	8012eb4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8010e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e34:	f002 f816 	bl	8012e64 <pbuf_ref>

  if (hs->req->next != NULL) {
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	6a1b      	ldr	r3, [r3, #32]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d012      	beq.n	8010e68 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	6a1b      	ldr	r3, [r3, #32]
 8010e46:	891b      	ldrh	r3, [r3, #8]
 8010e48:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	bf28      	it	cs
 8010e50:	4613      	movcs	r3, r2
 8010e52:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	6a18      	ldr	r0, [r3, #32]
 8010e58:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	4949      	ldr	r1, [pc, #292]	; (8010f84 <http_parse_request+0x1bc>)
 8010e5e:	f002 f951 	bl	8013104 <pbuf_copy_partial>
    data = httpd_req_buf;
 8010e62:	4b48      	ldr	r3, [pc, #288]	; (8010f84 <http_parse_request+0x1bc>)
 8010e64:	637b      	str	r3, [r7, #52]	; 0x34
 8010e66:	e005      	b.n	8010e74 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8010e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	895b      	ldrh	r3, [r3, #10]
 8010e72:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8010e74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010e76:	2b06      	cmp	r3, #6
 8010e78:	d963      	bls.n	8010f42 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8010e7a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	4942      	ldr	r1, [pc, #264]	; (8010f88 <http_parse_request+0x1c0>)
 8010e80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e82:	f000 fb99 	bl	80115b8 <lwip_strnstr>
 8010e86:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8010e88:	6a3b      	ldr	r3, [r7, #32]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d059      	beq.n	8010f42 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8010e92:	2204      	movs	r2, #4
 8010e94:	493d      	ldr	r1, [pc, #244]	; (8010f8c <http_parse_request+0x1c4>)
 8010e96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e98:	f00b f9d5 	bl	801c246 <strncmp>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d117      	bne.n	8010ed2 <http_parse_request+0x10a>
        sp1 = data + 3;
 8010ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea4:	3303      	adds	r3, #3
 8010ea6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	461a      	mov	r2, r3
 8010eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eb0:	1ad3      	subs	r3, r2, r3
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	8b7a      	ldrh	r2, [r7, #26]
 8010ec0:	4933      	ldr	r1, [pc, #204]	; (8010f90 <http_parse_request+0x1c8>)
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f000 fb78 	bl	80115b8 <lwip_strnstr>
 8010ec8:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8010eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d111      	bne.n	8010ef4 <http_parse_request+0x12c>
 8010ed0:	e006      	b.n	8010ee0 <http_parse_request+0x118>
        data[4] = 0;
 8010ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ed4:	3304      	adds	r3, #4
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8010eda:	f06f 030f 	mvn.w	r3, #15
 8010ede:	e045      	b.n	8010f6c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	8b7a      	ldrh	r2, [r7, #26]
 8010ee6:	4928      	ldr	r1, [pc, #160]	; (8010f88 <http_parse_request+0x1c0>)
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f000 fb65 	bl	80115b8 <lwip_strnstr>
 8010eee:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef6:	69fa      	ldr	r2, [r7, #28]
 8010ef8:	3201      	adds	r2, #1
 8010efa:	1a9b      	subs	r3, r3, r2
 8010efc:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8010efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d01e      	beq.n	8010f42 <http_parse_request+0x17a>
 8010f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d91a      	bls.n	8010f42 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8010f0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010f0e:	461a      	mov	r2, r3
 8010f10:	4920      	ldr	r1, [pc, #128]	; (8010f94 <http_parse_request+0x1cc>)
 8010f12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f14:	f000 fb50 	bl	80115b8 <lwip_strnstr>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d011      	beq.n	8010f42 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	3301      	adds	r3, #1
 8010f22:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	2200      	movs	r2, #0
 8010f28:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8010f2a:	8b3b      	ldrh	r3, [r7, #24]
 8010f2c:	697a      	ldr	r2, [r7, #20]
 8010f2e:	4413      	add	r3, r2
 8010f30:	2200      	movs	r2, #0
 8010f32:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8010f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f36:	6979      	ldr	r1, [r7, #20]
 8010f38:	68b8      	ldr	r0, [r7, #8]
 8010f3a:	f000 f82d 	bl	8010f98 <http_find_file>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	e014      	b.n	8010f6c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	6a1b      	ldr	r3, [r3, #32]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f001 ff74 	bl	8012e34 <pbuf_clen>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	6a1b      	ldr	r3, [r3, #32]
 8010f54:	891b      	ldrh	r3, [r3, #8]
 8010f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f5a:	d205      	bcs.n	8010f68 <http_parse_request+0x1a0>
 8010f5c:	8a7b      	ldrh	r3, [r7, #18]
 8010f5e:	2b05      	cmp	r3, #5
 8010f60:	d802      	bhi.n	8010f68 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8010f62:	f06f 0304 	mvn.w	r3, #4
 8010f66:	e001      	b.n	8010f6c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8010f68:	f06f 030f 	mvn.w	r3, #15
  }
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3738      	adds	r7, #56	; 0x38
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	0801d218 	.word	0x0801d218
 8010f78:	0801d2e4 	.word	0x0801d2e4
 8010f7c:	0801d260 	.word	0x0801d260
 8010f80:	0801d2f0 	.word	0x0801d2f0
 8010f84:	20004094 	.word	0x20004094
 8010f88:	0801d2fc 	.word	0x0801d2fc
 8010f8c:	0801d300 	.word	0x0801d300
 8010f90:	0801d308 	.word	0x0801d308
 8010f94:	0801d30c 	.word	0x0801d30c

08010f98 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b092      	sub	sp, #72	; 0x48
 8010f9c:	af02      	add	r7, sp, #8
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8010fac:	2300      	movs	r3, #0
 8010fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7f7 f94d 	bl	8008254 <strlen>
 8010fba:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8010fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d06b      	beq.n	801109a <http_find_file+0x102>
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc6:	3b01      	subs	r3, #1
 8010fc8:	4413      	add	r3, r2
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	2b2f      	cmp	r3, #47	; 0x2f
 8010fce:	d164      	bne.n	801109a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8010fd0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8010fd2:	4a53      	ldr	r2, [pc, #332]	; (8011120 <http_find_file+0x188>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d102      	bne.n	8010fde <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8010fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fda:	2b01      	cmp	r3, #1
 8010fdc:	d15d      	bne.n	801109a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8010fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe0:	3b01      	subs	r3, #1
 8010fe2:	2b3f      	cmp	r3, #63	; 0x3f
 8010fe4:	bf28      	it	cs
 8010fe6:	233f      	movcs	r3, #63	; 0x3f
 8010fe8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8010fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00a      	beq.n	8011006 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	484a      	ldr	r0, [pc, #296]	; (8011120 <http_find_file+0x188>)
 8010ff8:	f00b f8b9 	bl	801c16e <memcpy>
      http_uri_buf[copy_len] = 0;
 8010ffc:	4a48      	ldr	r2, [pc, #288]	; (8011120 <http_find_file+0x188>)
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011000:	4413      	add	r3, r2
 8011002:	2200      	movs	r2, #0
 8011004:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8011006:	2300      	movs	r3, #0
 8011008:	63fb      	str	r3, [r7, #60]	; 0x3c
 801100a:	e043      	b.n	8011094 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100e:	2b00      	cmp	r3, #0
 8011010:	d028      	beq.n	8011064 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8011018:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 801101a:	6a3b      	ldr	r3, [r7, #32]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d01e      	beq.n	801105e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8011020:	4a40      	ldr	r2, [pc, #256]	; (8011124 <http_find_file+0x18c>)
 8011022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011028:	4618      	mov	r0, r3
 801102a:	f7f7 f913 	bl	8008254 <strlen>
 801102e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8011030:	69fa      	ldr	r2, [r7, #28]
 8011032:	6a3b      	ldr	r3, [r7, #32]
 8011034:	4293      	cmp	r3, r2
 8011036:	bf28      	it	cs
 8011038:	4613      	movcs	r3, r2
 801103a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 801103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103e:	4a38      	ldr	r2, [pc, #224]	; (8011120 <http_find_file+0x188>)
 8011040:	1898      	adds	r0, r3, r2
 8011042:	4a38      	ldr	r2, [pc, #224]	; (8011124 <http_find_file+0x18c>)
 8011044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011046:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801104a:	69ba      	ldr	r2, [r7, #24]
 801104c:	4619      	mov	r1, r3
 801104e:	f00b f88e 	bl	801c16e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8011052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	4413      	add	r3, r2
 8011058:	4a31      	ldr	r2, [pc, #196]	; (8011120 <http_find_file+0x188>)
 801105a:	2100      	movs	r1, #0
 801105c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 801105e:	4b30      	ldr	r3, [pc, #192]	; (8011120 <http_find_file+0x188>)
 8011060:	633b      	str	r3, [r7, #48]	; 0x30
 8011062:	e004      	b.n	801106e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8011064:	4a2f      	ldr	r2, [pc, #188]	; (8011124 <http_find_file+0x18c>)
 8011066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011068:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801106c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011072:	4618      	mov	r0, r3
 8011074:	f7ff fc58 	bl	8010928 <fs_open>
 8011078:	4603      	mov	r3, r0
 801107a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 801107c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d104      	bne.n	801108e <http_find_file+0xf6>
        uri = file_name;
 8011084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011086:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 801108c:	e005      	b.n	801109a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 801108e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011090:	3301      	adds	r3, #1
 8011092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011096:	2b04      	cmp	r3, #4
 8011098:	d9b8      	bls.n	801100c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 801109a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109c:	2b00      	cmp	r3, #0
 801109e:	d124      	bne.n	80110ea <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	213f      	movs	r1, #63	; 0x3f
 80110a4:	4618      	mov	r0, r3
 80110a6:	f00b f8c1 	bl	801c22c <strchr>
 80110aa:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80110ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d005      	beq.n	80110be <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80110b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b4:	2200      	movs	r2, #0
 80110b6:	701a      	strb	r2, [r3, #0]
      params++;
 80110b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ba:	3301      	adds	r3, #1
 80110bc:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	68ba      	ldr	r2, [r7, #8]
 80110c2:	4611      	mov	r1, r2
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7ff fc2f 	bl	8010928 <fs_open>
 80110ca:	4603      	mov	r3, r0
 80110cc:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80110ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d102      	bne.n	80110dc <http_find_file+0x144>
      file = &hs->file_handle;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80110da:	e006      	b.n	80110ea <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 80110dc:	f107 0308 	add.w	r3, r7, #8
 80110e0:	4619      	mov	r1, r3
 80110e2:	68f8      	ldr	r0, [r7, #12]
 80110e4:	f7ff fe2a 	bl	8010d3c <http_get_404_file>
 80110e8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80110ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d106      	bne.n	80110fe <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80110f0:	f107 0308 	add.w	r3, r7, #8
 80110f4:	4619      	mov	r1, r3
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f7ff fe20 	bl	8010d3c <http_get_404_file>
 80110fc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80110fe:	68ba      	ldr	r2, [r7, #8]
 8011100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011102:	9301      	str	r3, [sp, #4]
 8011104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011108:	9300      	str	r3, [sp, #0]
 801110a:	4613      	mov	r3, r2
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	f000 f809 	bl	8011128 <http_init_file>
 8011116:	4603      	mov	r3, r0
}
 8011118:	4618      	mov	r0, r3
 801111a:	3740      	adds	r7, #64	; 0x40
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	20004494 	.word	0x20004494
 8011124:	080308d0 	.word	0x080308d0

08011128 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b086      	sub	sp, #24
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
 8011134:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d05d      	beq.n	80111f8 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d106      	bne.n	8011152 <http_init_file+0x2a>
 8011144:	4b35      	ldr	r3, [pc, #212]	; (801121c <http_init_file+0xf4>)
 8011146:	f640 120b 	movw	r2, #2315	; 0x90b
 801114a:	4935      	ldr	r1, [pc, #212]	; (8011220 <http_init_file+0xf8>)
 801114c:	4835      	ldr	r0, [pc, #212]	; (8011224 <http_init_file+0xfc>)
 801114e:	f00b f821 	bl	801c194 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	68ba      	ldr	r2, [r7, #8]
 8011156:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	2b00      	cmp	r3, #0
 8011166:	da06      	bge.n	8011176 <http_init_file+0x4e>
 8011168:	4b2c      	ldr	r3, [pc, #176]	; (801121c <http_init_file+0xf4>)
 801116a:	f640 1234 	movw	r2, #2356	; 0x934
 801116e:	492e      	ldr	r1, [pc, #184]	; (8011228 <http_init_file+0x100>)
 8011170:	482c      	ldr	r0, [pc, #176]	; (8011224 <http_init_file+0xfc>)
 8011172:	f00b f80f 	bl	801c194 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	461a      	mov	r2, r3
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2200      	movs	r2, #0
 8011184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	695b      	ldr	r3, [r3, #20]
 801118c:	7c1b      	ldrb	r3, [r3, #16]
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	2b00      	cmp	r3, #0
 8011194:	d106      	bne.n	80111a4 <http_init_file+0x7c>
 8011196:	4b21      	ldr	r3, [pc, #132]	; (801121c <http_init_file+0xf4>)
 8011198:	f640 1244 	movw	r2, #2372	; 0x944
 801119c:	4923      	ldr	r1, [pc, #140]	; (801122c <http_init_file+0x104>)
 801119e:	4821      	ldr	r0, [pc, #132]	; (8011224 <http_init_file+0xfc>)
 80111a0:	f00a fff8 	bl	801c194 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d033      	beq.n	8011212 <http_init_file+0xea>
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	695b      	ldr	r3, [r3, #20]
 80111ae:	7c1b      	ldrb	r3, [r3, #16]
 80111b0:	f003 0301 	and.w	r3, r3, #1
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d02c      	beq.n	8011212 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	6998      	ldr	r0, [r3, #24]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c0:	461a      	mov	r2, r3
 80111c2:	491b      	ldr	r1, [pc, #108]	; (8011230 <http_init_file+0x108>)
 80111c4:	f000 f9f8 	bl	80115b8 <lwip_strnstr>
 80111c8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d020      	beq.n	8011212 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	3304      	adds	r3, #4
 80111d4:	461a      	mov	r2, r3
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	699b      	ldr	r3, [r3, #24]
 80111da:	1ad3      	subs	r3, r2, r3
 80111dc:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	699a      	ldr	r2, [r3, #24]
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	441a      	add	r2, r3
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111ee:	693b      	ldr	r3, [r7, #16]
 80111f0:	1ad2      	subs	r2, r2, r3
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	625a      	str	r2, [r3, #36]	; 0x24
 80111f6:	e00c      	b.n	8011212 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2200      	movs	r2, #0
 80111fc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2200      	movs	r2, #0
 8011202:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2200      	movs	r2, #0
 801120e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3718      	adds	r7, #24
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	0801d218 	.word	0x0801d218
 8011220:	0801d314 	.word	0x0801d314
 8011224:	0801d260 	.word	0x0801d260
 8011228:	0801d328 	.word	0x0801d328
 801122c:	0801d348 	.word	0x0801d348
 8011230:	0801d30c 	.word	0x0801d30c

08011234 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	460b      	mov	r3, r1
 801123e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d002      	beq.n	8011250 <http_err+0x1c>
    http_state_free(hs);
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f7ff fc02 	bl	8010a54 <http_state_free>
  }
}
 8011250:	bf00      	nop
 8011252:	3710      	adds	r7, #16
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b086      	sub	sp, #24
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	4613      	mov	r3, r2
 8011264:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d101      	bne.n	8011274 <http_sent+0x1c>
    return ERR_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	e008      	b.n	8011286 <http_sent+0x2e>
  }

  hs->retries = 0;
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	2200      	movs	r2, #0
 8011278:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 801127c:	6979      	ldr	r1, [r7, #20]
 801127e:	68b8      	ldr	r0, [r7, #8]
 8011280:	f7ff fd25 	bl	8010cce <http_send>

  return ERR_OK;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3718      	adds	r7, #24
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 801128e:	b580      	push	{r7, lr}
 8011290:	b084      	sub	sp, #16
 8011292:	af00      	add	r7, sp, #0
 8011294:	6078      	str	r0, [r7, #4]
 8011296:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d107      	bne.n	80112b2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80112a2:	2100      	movs	r1, #0
 80112a4:	6838      	ldr	r0, [r7, #0]
 80112a6:	f7ff fc91 	bl	8010bcc <http_close_conn>
 80112aa:	4603      	mov	r3, r0
 80112ac:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80112ae:	2300      	movs	r3, #0
 80112b0:	e021      	b.n	80112f6 <http_poll+0x68>
  } else {
    hs->retries++;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112b8:	3301      	adds	r3, #1
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80112c8:	2b04      	cmp	r3, #4
 80112ca:	d105      	bne.n	80112d8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80112cc:	68f9      	ldr	r1, [r7, #12]
 80112ce:	6838      	ldr	r0, [r7, #0]
 80112d0:	f7ff fc7c 	bl	8010bcc <http_close_conn>
      return ERR_OK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	e00e      	b.n	80112f6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	695b      	ldr	r3, [r3, #20]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d009      	beq.n	80112f4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80112e0:	68f9      	ldr	r1, [r7, #12]
 80112e2:	6838      	ldr	r0, [r7, #0]
 80112e4:	f7ff fcf3 	bl	8010cce <http_send>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d002      	beq.n	80112f4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80112ee:	6838      	ldr	r0, [r7, #0]
 80112f0:	f007 f880 	bl	80183f4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80112f4:	2300      	movs	r3, #0
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3710      	adds	r7, #16
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
	...

08011300 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b086      	sub	sp, #24
 8011304:	af00      	add	r7, sp, #0
 8011306:	60f8      	str	r0, [r7, #12]
 8011308:	60b9      	str	r1, [r7, #8]
 801130a:	607a      	str	r2, [r7, #4]
 801130c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8011312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d105      	bne.n	8011326 <http_recv+0x26>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <http_recv+0x26>
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d111      	bne.n	801134a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d008      	beq.n	801133e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	891b      	ldrh	r3, [r3, #8]
 8011330:	4619      	mov	r1, r3
 8011332:	68b8      	ldr	r0, [r7, #8]
 8011334:	f002 fc56 	bl	8013be4 <tcp_recved>
      pbuf_free(p);
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f001 fced 	bl	8012d18 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 801133e:	6979      	ldr	r1, [r7, #20]
 8011340:	68b8      	ldr	r0, [r7, #8]
 8011342:	f7ff fc43 	bl	8010bcc <http_close_conn>
    return ERR_OK;
 8011346:	2300      	movs	r3, #0
 8011348:	e055      	b.n	80113f6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	891b      	ldrh	r3, [r3, #8]
 801134e:	4619      	mov	r1, r3
 8011350:	68b8      	ldr	r0, [r7, #8]
 8011352:	f002 fc47 	bl	8013be4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	695b      	ldr	r3, [r3, #20]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d147      	bne.n	80113ee <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 801135e:	68ba      	ldr	r2, [r7, #8]
 8011360:	6979      	ldr	r1, [r7, #20]
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f7ff fd30 	bl	8010dc8 <http_parse_request>
 8011368:	4603      	mov	r3, r0
 801136a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801136c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d015      	beq.n	80113a0 <http_recv+0xa0>
 8011374:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011378:	f113 0f05 	cmn.w	r3, #5
 801137c:	d010      	beq.n	80113a0 <http_recv+0xa0>
 801137e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011382:	f113 0f10 	cmn.w	r3, #16
 8011386:	d00b      	beq.n	80113a0 <http_recv+0xa0>
 8011388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801138c:	f113 0f08 	cmn.w	r3, #8
 8011390:	d006      	beq.n	80113a0 <http_recv+0xa0>
 8011392:	4b1b      	ldr	r3, [pc, #108]	; (8011400 <http_recv+0x100>)
 8011394:	f640 2205 	movw	r2, #2565	; 0xa05
 8011398:	491a      	ldr	r1, [pc, #104]	; (8011404 <http_recv+0x104>)
 801139a:	481b      	ldr	r0, [pc, #108]	; (8011408 <http_recv+0x108>)
 801139c:	f00a fefa 	bl	801c194 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80113a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113a4:	f113 0f05 	cmn.w	r3, #5
 80113a8:	d00b      	beq.n	80113c2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	6a1b      	ldr	r3, [r3, #32]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d007      	beq.n	80113c2 <http_recv+0xc2>
          pbuf_free(hs->req);
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	6a1b      	ldr	r3, [r3, #32]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f001 fcae 	bl	8012d18 <pbuf_free>
          hs->req = NULL;
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	2200      	movs	r2, #0
 80113c0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f001 fca8 	bl	8012d18 <pbuf_free>
      if (parsed == ERR_OK) {
 80113c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d104      	bne.n	80113da <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80113d0:	6979      	ldr	r1, [r7, #20]
 80113d2:	68b8      	ldr	r0, [r7, #8]
 80113d4:	f7ff fc7b 	bl	8010cce <http_send>
 80113d8:	e00c      	b.n	80113f4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80113da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113de:	f113 0f10 	cmn.w	r3, #16
 80113e2:	d107      	bne.n	80113f4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80113e4:	6979      	ldr	r1, [r7, #20]
 80113e6:	68b8      	ldr	r0, [r7, #8]
 80113e8:	f7ff fbf0 	bl	8010bcc <http_close_conn>
 80113ec:	e002      	b.n	80113f4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f001 fc92 	bl	8012d18 <pbuf_free>
    }
  }
  return ERR_OK;
 80113f4:	2300      	movs	r3, #0
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3718      	adds	r7, #24
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	0801d218 	.word	0x0801d218
 8011404:	0801d374 	.word	0x0801d374
 8011408:	0801d260 	.word	0x0801d260

0801140c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b086      	sub	sp, #24
 8011410:	af00      	add	r7, sp, #0
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	4613      	mov	r3, r2
 8011418:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 801141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d102      	bne.n	8011428 <http_accept+0x1c>
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d102      	bne.n	801142e <http_accept+0x22>
    return ERR_VAL;
 8011428:	f06f 0305 	mvn.w	r3, #5
 801142c:	e025      	b.n	801147a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801142e:	2101      	movs	r1, #1
 8011430:	68b8      	ldr	r0, [r7, #8]
 8011432:	f003 f8b7 	bl	80145a4 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8011436:	f7ff fadb 	bl	80109f0 <http_state_alloc>
 801143a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d102      	bne.n	8011448 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8011442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011446:	e018      	b.n	801147a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	68ba      	ldr	r2, [r7, #8]
 801144c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801144e:	6979      	ldr	r1, [r7, #20]
 8011450:	68b8      	ldr	r0, [r7, #8]
 8011452:	f003 faa7 	bl	80149a4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8011456:	490b      	ldr	r1, [pc, #44]	; (8011484 <http_accept+0x78>)
 8011458:	68b8      	ldr	r0, [r7, #8]
 801145a:	f003 fab5 	bl	80149c8 <tcp_recv>
  altcp_err(pcb, http_err);
 801145e:	490a      	ldr	r1, [pc, #40]	; (8011488 <http_accept+0x7c>)
 8011460:	68b8      	ldr	r0, [r7, #8]
 8011462:	f003 faf5 	bl	8014a50 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8011466:	2204      	movs	r2, #4
 8011468:	4908      	ldr	r1, [pc, #32]	; (801148c <http_accept+0x80>)
 801146a:	68b8      	ldr	r0, [r7, #8]
 801146c:	f003 fb2a 	bl	8014ac4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8011470:	4907      	ldr	r1, [pc, #28]	; (8011490 <http_accept+0x84>)
 8011472:	68b8      	ldr	r0, [r7, #8]
 8011474:	f003 faca 	bl	8014a0c <tcp_sent>

  return ERR_OK;
 8011478:	2300      	movs	r3, #0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3718      	adds	r7, #24
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	08011301 	.word	0x08011301
 8011488:	08011235 	.word	0x08011235
 801148c:	0801128f 	.word	0x0801128f
 8011490:	08011259 	.word	0x08011259

08011494 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b084      	sub	sp, #16
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	460b      	mov	r3, r1
 801149e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d029      	beq.n	80114fa <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80114a6:	2101      	movs	r1, #1
 80114a8:	6878      	ldr	r0, [r7, #4]
 80114aa:	f003 f87b 	bl	80145a4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80114ae:	887b      	ldrh	r3, [r7, #2]
 80114b0:	461a      	mov	r2, r3
 80114b2:	4914      	ldr	r1, [pc, #80]	; (8011504 <httpd_init_pcb+0x70>)
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f002 f9c7 	bl	8013848 <tcp_bind>
 80114ba:	4603      	mov	r3, r0
 80114bc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80114be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d006      	beq.n	80114d4 <httpd_init_pcb+0x40>
 80114c6:	4b10      	ldr	r3, [pc, #64]	; (8011508 <httpd_init_pcb+0x74>)
 80114c8:	f640 2257 	movw	r2, #2647	; 0xa57
 80114cc:	490f      	ldr	r1, [pc, #60]	; (801150c <httpd_init_pcb+0x78>)
 80114ce:	4810      	ldr	r0, [pc, #64]	; (8011510 <httpd_init_pcb+0x7c>)
 80114d0:	f00a fe60 	bl	801c194 <iprintf>
    pcb = altcp_listen(pcb);
 80114d4:	21ff      	movs	r1, #255	; 0xff
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f002 fa6e 	bl	80139b8 <tcp_listen_with_backlog>
 80114dc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d106      	bne.n	80114f2 <httpd_init_pcb+0x5e>
 80114e4:	4b08      	ldr	r3, [pc, #32]	; (8011508 <httpd_init_pcb+0x74>)
 80114e6:	f640 2259 	movw	r2, #2649	; 0xa59
 80114ea:	490a      	ldr	r1, [pc, #40]	; (8011514 <httpd_init_pcb+0x80>)
 80114ec:	4808      	ldr	r0, [pc, #32]	; (8011510 <httpd_init_pcb+0x7c>)
 80114ee:	f00a fe51 	bl	801c194 <iprintf>
    altcp_accept(pcb, http_accept);
 80114f2:	4909      	ldr	r1, [pc, #36]	; (8011518 <httpd_init_pcb+0x84>)
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f003 facd 	bl	8014a94 <tcp_accept>
  }
}
 80114fa:	bf00      	nop
 80114fc:	3710      	adds	r7, #16
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	08030a08 	.word	0x08030a08
 8011508:	0801d218 	.word	0x0801d218
 801150c:	0801d3a0 	.word	0x0801d3a0
 8011510:	0801d260 	.word	0x0801d260
 8011514:	0801d3bc 	.word	0x0801d3bc
 8011518:	0801140d 	.word	0x0801140d

0801151c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8011522:	202e      	movs	r0, #46	; 0x2e
 8011524:	f003 fa30 	bl	8014988 <tcp_new_ip_type>
 8011528:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d106      	bne.n	801153e <httpd_init+0x22>
 8011530:	4b07      	ldr	r3, [pc, #28]	; (8011550 <httpd_init+0x34>)
 8011532:	f640 2272 	movw	r2, #2674	; 0xa72
 8011536:	4907      	ldr	r1, [pc, #28]	; (8011554 <httpd_init+0x38>)
 8011538:	4807      	ldr	r0, [pc, #28]	; (8011558 <httpd_init+0x3c>)
 801153a:	f00a fe2b 	bl	801c194 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801153e:	2150      	movs	r1, #80	; 0x50
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7ff ffa7 	bl	8011494 <httpd_init_pcb>
}
 8011546:	bf00      	nop
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	0801d218 	.word	0x0801d218
 8011554:	0801d3dc 	.word	0x0801d3dc
 8011558:	0801d260 	.word	0x0801d260

0801155c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011566:	88fb      	ldrh	r3, [r7, #6]
 8011568:	021b      	lsls	r3, r3, #8
 801156a:	b21a      	sxth	r2, r3
 801156c:	88fb      	ldrh	r3, [r7, #6]
 801156e:	0a1b      	lsrs	r3, r3, #8
 8011570:	b29b      	uxth	r3, r3
 8011572:	b21b      	sxth	r3, r3
 8011574:	4313      	orrs	r3, r2
 8011576:	b21b      	sxth	r3, r3
 8011578:	b29b      	uxth	r3, r3
}
 801157a:	4618      	mov	r0, r3
 801157c:	370c      	adds	r7, #12
 801157e:	46bd      	mov	sp, r7
 8011580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011584:	4770      	bx	lr

08011586 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011586:	b480      	push	{r7}
 8011588:	b083      	sub	sp, #12
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	061a      	lsls	r2, r3, #24
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	021b      	lsls	r3, r3, #8
 8011596:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801159a:	431a      	orrs	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	0a1b      	lsrs	r3, r3, #8
 80115a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80115a4:	431a      	orrs	r2, r3
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	0e1b      	lsrs	r3, r3, #24
 80115aa:	4313      	orrs	r3, r2
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	370c      	adds	r7, #12
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b086      	sub	sp, #24
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80115c4:	68b8      	ldr	r0, [r7, #8]
 80115c6:	f7f6 fe45 	bl	8008254 <strlen>
 80115ca:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d101      	bne.n	80115d6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	e022      	b.n	801161c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	617b      	str	r3, [r7, #20]
 80115da:	e012      	b.n	8011602 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	781a      	ldrb	r2, [r3, #0]
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d109      	bne.n	80115fc <lwip_strnstr+0x44>
 80115e8:	693a      	ldr	r2, [r7, #16]
 80115ea:	68b9      	ldr	r1, [r7, #8]
 80115ec:	6978      	ldr	r0, [r7, #20]
 80115ee:	f00a fe2a 	bl	801c246 <strncmp>
 80115f2:	4603      	mov	r3, r0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d101      	bne.n	80115fc <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	e00f      	b.n	801161c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	3301      	adds	r3, #1
 8011600:	617b      	str	r3, [r7, #20]
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d007      	beq.n	801161a <lwip_strnstr+0x62>
 801160a:	697a      	ldr	r2, [r7, #20]
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	441a      	add	r2, r3
 8011610:	68f9      	ldr	r1, [r7, #12]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	440b      	add	r3, r1
 8011616:	429a      	cmp	r2, r3
 8011618:	d9e0      	bls.n	80115dc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 801161a:	2300      	movs	r3, #0
}
 801161c:	4618      	mov	r0, r3
 801161e:	3718      	adds	r7, #24
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801162a:	2300      	movs	r3, #0
 801162c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801162e:	f00a fce1 	bl	801bff4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011632:	f000 f8d5 	bl	80117e0 <mem_init>
  memp_init();
 8011636:	f000 fc31 	bl	8011e9c <memp_init>
  pbuf_init();
  netif_init();
 801163a:	f000 fcf7 	bl	801202c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801163e:	f007 ffd9 	bl	80195f4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011642:	f001 fe03 	bl	801324c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011646:	f007 ff1d 	bl	8019484 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801164a:	bf00      	nop
 801164c:	3708      	adds	r7, #8
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
	...

08011654 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	4603      	mov	r3, r0
 801165c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801165e:	4b05      	ldr	r3, [pc, #20]	; (8011674 <ptr_to_mem+0x20>)
 8011660:	681a      	ldr	r2, [r3, #0]
 8011662:	88fb      	ldrh	r3, [r7, #6]
 8011664:	4413      	add	r3, r2
}
 8011666:	4618      	mov	r0, r3
 8011668:	370c      	adds	r7, #12
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr
 8011672:	bf00      	nop
 8011674:	200044d4 	.word	0x200044d4

08011678 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011678:	b480      	push	{r7}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	4a05      	ldr	r2, [pc, #20]	; (8011698 <mem_to_ptr+0x20>)
 8011684:	6812      	ldr	r2, [r2, #0]
 8011686:	1a9b      	subs	r3, r3, r2
 8011688:	b29b      	uxth	r3, r3
}
 801168a:	4618      	mov	r0, r3
 801168c:	370c      	adds	r7, #12
 801168e:	46bd      	mov	sp, r7
 8011690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011694:	4770      	bx	lr
 8011696:	bf00      	nop
 8011698:	200044d4 	.word	0x200044d4

0801169c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801169c:	b590      	push	{r4, r7, lr}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80116a4:	4b45      	ldr	r3, [pc, #276]	; (80117bc <plug_holes+0x120>)
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	687a      	ldr	r2, [r7, #4]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d206      	bcs.n	80116bc <plug_holes+0x20>
 80116ae:	4b44      	ldr	r3, [pc, #272]	; (80117c0 <plug_holes+0x124>)
 80116b0:	f240 12df 	movw	r2, #479	; 0x1df
 80116b4:	4943      	ldr	r1, [pc, #268]	; (80117c4 <plug_holes+0x128>)
 80116b6:	4844      	ldr	r0, [pc, #272]	; (80117c8 <plug_holes+0x12c>)
 80116b8:	f00a fd6c 	bl	801c194 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80116bc:	4b43      	ldr	r3, [pc, #268]	; (80117cc <plug_holes+0x130>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d306      	bcc.n	80116d4 <plug_holes+0x38>
 80116c6:	4b3e      	ldr	r3, [pc, #248]	; (80117c0 <plug_holes+0x124>)
 80116c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80116cc:	4940      	ldr	r1, [pc, #256]	; (80117d0 <plug_holes+0x134>)
 80116ce:	483e      	ldr	r0, [pc, #248]	; (80117c8 <plug_holes+0x12c>)
 80116d0:	f00a fd60 	bl	801c194 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	791b      	ldrb	r3, [r3, #4]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d006      	beq.n	80116ea <plug_holes+0x4e>
 80116dc:	4b38      	ldr	r3, [pc, #224]	; (80117c0 <plug_holes+0x124>)
 80116de:	f240 12e1 	movw	r2, #481	; 0x1e1
 80116e2:	493c      	ldr	r1, [pc, #240]	; (80117d4 <plug_holes+0x138>)
 80116e4:	4838      	ldr	r0, [pc, #224]	; (80117c8 <plug_holes+0x12c>)
 80116e6:	f00a fd55 	bl	801c194 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	881b      	ldrh	r3, [r3, #0]
 80116ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80116f2:	d906      	bls.n	8011702 <plug_holes+0x66>
 80116f4:	4b32      	ldr	r3, [pc, #200]	; (80117c0 <plug_holes+0x124>)
 80116f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80116fa:	4937      	ldr	r1, [pc, #220]	; (80117d8 <plug_holes+0x13c>)
 80116fc:	4832      	ldr	r0, [pc, #200]	; (80117c8 <plug_holes+0x12c>)
 80116fe:	f00a fd49 	bl	801c194 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	881b      	ldrh	r3, [r3, #0]
 8011706:	4618      	mov	r0, r3
 8011708:	f7ff ffa4 	bl	8011654 <ptr_to_mem>
 801170c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	429a      	cmp	r2, r3
 8011714:	d024      	beq.n	8011760 <plug_holes+0xc4>
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	791b      	ldrb	r3, [r3, #4]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d120      	bne.n	8011760 <plug_holes+0xc4>
 801171e:	4b2b      	ldr	r3, [pc, #172]	; (80117cc <plug_holes+0x130>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	68fa      	ldr	r2, [r7, #12]
 8011724:	429a      	cmp	r2, r3
 8011726:	d01b      	beq.n	8011760 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011728:	4b2c      	ldr	r3, [pc, #176]	; (80117dc <plug_holes+0x140>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	429a      	cmp	r2, r3
 8011730:	d102      	bne.n	8011738 <plug_holes+0x9c>
      lfree = mem;
 8011732:	4a2a      	ldr	r2, [pc, #168]	; (80117dc <plug_holes+0x140>)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	881a      	ldrh	r2, [r3, #0]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	881b      	ldrh	r3, [r3, #0]
 8011744:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011748:	d00a      	beq.n	8011760 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	4618      	mov	r0, r3
 8011750:	f7ff ff80 	bl	8011654 <ptr_to_mem>
 8011754:	4604      	mov	r4, r0
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7ff ff8e 	bl	8011678 <mem_to_ptr>
 801175c:	4603      	mov	r3, r0
 801175e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	885b      	ldrh	r3, [r3, #2]
 8011764:	4618      	mov	r0, r3
 8011766:	f7ff ff75 	bl	8011654 <ptr_to_mem>
 801176a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801176c:	68ba      	ldr	r2, [r7, #8]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	429a      	cmp	r2, r3
 8011772:	d01f      	beq.n	80117b4 <plug_holes+0x118>
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	791b      	ldrb	r3, [r3, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d11b      	bne.n	80117b4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801177c:	4b17      	ldr	r3, [pc, #92]	; (80117dc <plug_holes+0x140>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	429a      	cmp	r2, r3
 8011784:	d102      	bne.n	801178c <plug_holes+0xf0>
      lfree = pmem;
 8011786:	4a15      	ldr	r2, [pc, #84]	; (80117dc <plug_holes+0x140>)
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	881a      	ldrh	r2, [r3, #0]
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	881b      	ldrh	r3, [r3, #0]
 8011798:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801179c:	d00a      	beq.n	80117b4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	881b      	ldrh	r3, [r3, #0]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7ff ff56 	bl	8011654 <ptr_to_mem>
 80117a8:	4604      	mov	r4, r0
 80117aa:	68b8      	ldr	r0, [r7, #8]
 80117ac:	f7ff ff64 	bl	8011678 <mem_to_ptr>
 80117b0:	4603      	mov	r3, r0
 80117b2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80117b4:	bf00      	nop
 80117b6:	3714      	adds	r7, #20
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd90      	pop	{r4, r7, pc}
 80117bc:	200044d4 	.word	0x200044d4
 80117c0:	0801d3f8 	.word	0x0801d3f8
 80117c4:	0801d428 	.word	0x0801d428
 80117c8:	0801d440 	.word	0x0801d440
 80117cc:	200044d8 	.word	0x200044d8
 80117d0:	0801d468 	.word	0x0801d468
 80117d4:	0801d484 	.word	0x0801d484
 80117d8:	0801d4a0 	.word	0x0801d4a0
 80117dc:	200044e0 	.word	0x200044e0

080117e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80117e6:	4b1f      	ldr	r3, [pc, #124]	; (8011864 <mem_init+0x84>)
 80117e8:	3303      	adds	r3, #3
 80117ea:	f023 0303 	bic.w	r3, r3, #3
 80117ee:	461a      	mov	r2, r3
 80117f0:	4b1d      	ldr	r3, [pc, #116]	; (8011868 <mem_init+0x88>)
 80117f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80117f4:	4b1c      	ldr	r3, [pc, #112]	; (8011868 <mem_init+0x88>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011800:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2200      	movs	r2, #0
 801180c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801180e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8011812:	f7ff ff1f 	bl	8011654 <ptr_to_mem>
 8011816:	4602      	mov	r2, r0
 8011818:	4b14      	ldr	r3, [pc, #80]	; (801186c <mem_init+0x8c>)
 801181a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 801181c:	4b13      	ldr	r3, [pc, #76]	; (801186c <mem_init+0x8c>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2201      	movs	r2, #1
 8011822:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011824:	4b11      	ldr	r3, [pc, #68]	; (801186c <mem_init+0x8c>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801182c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801182e:	4b0f      	ldr	r3, [pc, #60]	; (801186c <mem_init+0x8c>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011836:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011838:	4b0b      	ldr	r3, [pc, #44]	; (8011868 <mem_init+0x88>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4a0c      	ldr	r2, [pc, #48]	; (8011870 <mem_init+0x90>)
 801183e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011840:	480c      	ldr	r0, [pc, #48]	; (8011874 <mem_init+0x94>)
 8011842:	f00a fbe5 	bl	801c010 <sys_mutex_new>
 8011846:	4603      	mov	r3, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	d006      	beq.n	801185a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801184c:	4b0a      	ldr	r3, [pc, #40]	; (8011878 <mem_init+0x98>)
 801184e:	f240 221f 	movw	r2, #543	; 0x21f
 8011852:	490a      	ldr	r1, [pc, #40]	; (801187c <mem_init+0x9c>)
 8011854:	480a      	ldr	r0, [pc, #40]	; (8011880 <mem_init+0xa0>)
 8011856:	f00a fc9d 	bl	801c194 <iprintf>
  }
}
 801185a:	bf00      	nop
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	20007c44 	.word	0x20007c44
 8011868:	200044d4 	.word	0x200044d4
 801186c:	200044d8 	.word	0x200044d8
 8011870:	200044e0 	.word	0x200044e0
 8011874:	200044dc 	.word	0x200044dc
 8011878:	0801d3f8 	.word	0x0801d3f8
 801187c:	0801d4cc 	.word	0x0801d4cc
 8011880:	0801d440 	.word	0x0801d440

08011884 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b086      	sub	sp, #24
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7ff fef3 	bl	8011678 <mem_to_ptr>
 8011892:	4603      	mov	r3, r0
 8011894:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	881b      	ldrh	r3, [r3, #0]
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff feda 	bl	8011654 <ptr_to_mem>
 80118a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	885b      	ldrh	r3, [r3, #2]
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7ff fed4 	bl	8011654 <ptr_to_mem>
 80118ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	881b      	ldrh	r3, [r3, #0]
 80118b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80118b6:	d818      	bhi.n	80118ea <mem_link_valid+0x66>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	885b      	ldrh	r3, [r3, #2]
 80118bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80118c0:	d813      	bhi.n	80118ea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80118c6:	8afa      	ldrh	r2, [r7, #22]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d004      	beq.n	80118d6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	881b      	ldrh	r3, [r3, #0]
 80118d0:	8afa      	ldrh	r2, [r7, #22]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d109      	bne.n	80118ea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80118d6:	4b08      	ldr	r3, [pc, #32]	; (80118f8 <mem_link_valid+0x74>)
 80118d8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80118da:	693a      	ldr	r2, [r7, #16]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d006      	beq.n	80118ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	885b      	ldrh	r3, [r3, #2]
 80118e4:	8afa      	ldrh	r2, [r7, #22]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d001      	beq.n	80118ee <mem_link_valid+0x6a>
    return 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	e000      	b.n	80118f0 <mem_link_valid+0x6c>
  }
  return 1;
 80118ee:	2301      	movs	r3, #1
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3718      	adds	r7, #24
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}
 80118f8:	200044d8 	.word	0x200044d8

080118fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b088      	sub	sp, #32
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d070      	beq.n	80119ec <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f003 0303 	and.w	r3, r3, #3
 8011910:	2b00      	cmp	r3, #0
 8011912:	d00d      	beq.n	8011930 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011914:	4b37      	ldr	r3, [pc, #220]	; (80119f4 <mem_free+0xf8>)
 8011916:	f240 2273 	movw	r2, #627	; 0x273
 801191a:	4937      	ldr	r1, [pc, #220]	; (80119f8 <mem_free+0xfc>)
 801191c:	4837      	ldr	r0, [pc, #220]	; (80119fc <mem_free+0x100>)
 801191e:	f00a fc39 	bl	801c194 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011922:	f00a fbd3 	bl	801c0cc <sys_arch_protect>
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f00a fbdd 	bl	801c0e8 <sys_arch_unprotect>
    return;
 801192e:	e05e      	b.n	80119ee <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	3b08      	subs	r3, #8
 8011934:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011936:	4b32      	ldr	r3, [pc, #200]	; (8011a00 <mem_free+0x104>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	69fa      	ldr	r2, [r7, #28]
 801193c:	429a      	cmp	r2, r3
 801193e:	d306      	bcc.n	801194e <mem_free+0x52>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f103 020c 	add.w	r2, r3, #12
 8011946:	4b2f      	ldr	r3, [pc, #188]	; (8011a04 <mem_free+0x108>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	429a      	cmp	r2, r3
 801194c:	d90d      	bls.n	801196a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801194e:	4b29      	ldr	r3, [pc, #164]	; (80119f4 <mem_free+0xf8>)
 8011950:	f240 227f 	movw	r2, #639	; 0x27f
 8011954:	492c      	ldr	r1, [pc, #176]	; (8011a08 <mem_free+0x10c>)
 8011956:	4829      	ldr	r0, [pc, #164]	; (80119fc <mem_free+0x100>)
 8011958:	f00a fc1c 	bl	801c194 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801195c:	f00a fbb6 	bl	801c0cc <sys_arch_protect>
 8011960:	6138      	str	r0, [r7, #16]
 8011962:	6938      	ldr	r0, [r7, #16]
 8011964:	f00a fbc0 	bl	801c0e8 <sys_arch_unprotect>
    return;
 8011968:	e041      	b.n	80119ee <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801196a:	4828      	ldr	r0, [pc, #160]	; (8011a0c <mem_free+0x110>)
 801196c:	f00a fb6c 	bl	801c048 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	791b      	ldrb	r3, [r3, #4]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d110      	bne.n	801199a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011978:	4b1e      	ldr	r3, [pc, #120]	; (80119f4 <mem_free+0xf8>)
 801197a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801197e:	4924      	ldr	r1, [pc, #144]	; (8011a10 <mem_free+0x114>)
 8011980:	481e      	ldr	r0, [pc, #120]	; (80119fc <mem_free+0x100>)
 8011982:	f00a fc07 	bl	801c194 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011986:	4821      	ldr	r0, [pc, #132]	; (8011a0c <mem_free+0x110>)
 8011988:	f00a fb6d 	bl	801c066 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801198c:	f00a fb9e 	bl	801c0cc <sys_arch_protect>
 8011990:	6178      	str	r0, [r7, #20]
 8011992:	6978      	ldr	r0, [r7, #20]
 8011994:	f00a fba8 	bl	801c0e8 <sys_arch_unprotect>
    return;
 8011998:	e029      	b.n	80119ee <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801199a:	69f8      	ldr	r0, [r7, #28]
 801199c:	f7ff ff72 	bl	8011884 <mem_link_valid>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d110      	bne.n	80119c8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80119a6:	4b13      	ldr	r3, [pc, #76]	; (80119f4 <mem_free+0xf8>)
 80119a8:	f240 2295 	movw	r2, #661	; 0x295
 80119ac:	4919      	ldr	r1, [pc, #100]	; (8011a14 <mem_free+0x118>)
 80119ae:	4813      	ldr	r0, [pc, #76]	; (80119fc <mem_free+0x100>)
 80119b0:	f00a fbf0 	bl	801c194 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80119b4:	4815      	ldr	r0, [pc, #84]	; (8011a0c <mem_free+0x110>)
 80119b6:	f00a fb56 	bl	801c066 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80119ba:	f00a fb87 	bl	801c0cc <sys_arch_protect>
 80119be:	61b8      	str	r0, [r7, #24]
 80119c0:	69b8      	ldr	r0, [r7, #24]
 80119c2:	f00a fb91 	bl	801c0e8 <sys_arch_unprotect>
    return;
 80119c6:	e012      	b.n	80119ee <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80119c8:	69fb      	ldr	r3, [r7, #28]
 80119ca:	2200      	movs	r2, #0
 80119cc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80119ce:	4b12      	ldr	r3, [pc, #72]	; (8011a18 <mem_free+0x11c>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	69fa      	ldr	r2, [r7, #28]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d202      	bcs.n	80119de <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80119d8:	4a0f      	ldr	r2, [pc, #60]	; (8011a18 <mem_free+0x11c>)
 80119da:	69fb      	ldr	r3, [r7, #28]
 80119dc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80119de:	69f8      	ldr	r0, [r7, #28]
 80119e0:	f7ff fe5c 	bl	801169c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80119e4:	4809      	ldr	r0, [pc, #36]	; (8011a0c <mem_free+0x110>)
 80119e6:	f00a fb3e 	bl	801c066 <sys_mutex_unlock>
 80119ea:	e000      	b.n	80119ee <mem_free+0xf2>
    return;
 80119ec:	bf00      	nop
}
 80119ee:	3720      	adds	r7, #32
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	0801d3f8 	.word	0x0801d3f8
 80119f8:	0801d4e8 	.word	0x0801d4e8
 80119fc:	0801d440 	.word	0x0801d440
 8011a00:	200044d4 	.word	0x200044d4
 8011a04:	200044d8 	.word	0x200044d8
 8011a08:	0801d50c 	.word	0x0801d50c
 8011a0c:	200044dc 	.word	0x200044dc
 8011a10:	0801d528 	.word	0x0801d528
 8011a14:	0801d550 	.word	0x0801d550
 8011a18:	200044e0 	.word	0x200044e0

08011a1c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b088      	sub	sp, #32
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	460b      	mov	r3, r1
 8011a26:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011a28:	887b      	ldrh	r3, [r7, #2]
 8011a2a:	3303      	adds	r3, #3
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	f023 0303 	bic.w	r3, r3, #3
 8011a32:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011a34:	8bfb      	ldrh	r3, [r7, #30]
 8011a36:	2b0b      	cmp	r3, #11
 8011a38:	d801      	bhi.n	8011a3e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011a3a:	230c      	movs	r3, #12
 8011a3c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011a3e:	8bfb      	ldrh	r3, [r7, #30]
 8011a40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a44:	d803      	bhi.n	8011a4e <mem_trim+0x32>
 8011a46:	8bfa      	ldrh	r2, [r7, #30]
 8011a48:	887b      	ldrh	r3, [r7, #2]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d201      	bcs.n	8011a52 <mem_trim+0x36>
    return NULL;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	e0d8      	b.n	8011c04 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011a52:	4b6e      	ldr	r3, [pc, #440]	; (8011c0c <mem_trim+0x1f0>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d304      	bcc.n	8011a66 <mem_trim+0x4a>
 8011a5c:	4b6c      	ldr	r3, [pc, #432]	; (8011c10 <mem_trim+0x1f4>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d306      	bcc.n	8011a74 <mem_trim+0x58>
 8011a66:	4b6b      	ldr	r3, [pc, #428]	; (8011c14 <mem_trim+0x1f8>)
 8011a68:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011a6c:	496a      	ldr	r1, [pc, #424]	; (8011c18 <mem_trim+0x1fc>)
 8011a6e:	486b      	ldr	r0, [pc, #428]	; (8011c1c <mem_trim+0x200>)
 8011a70:	f00a fb90 	bl	801c194 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011a74:	4b65      	ldr	r3, [pc, #404]	; (8011c0c <mem_trim+0x1f0>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d304      	bcc.n	8011a88 <mem_trim+0x6c>
 8011a7e:	4b64      	ldr	r3, [pc, #400]	; (8011c10 <mem_trim+0x1f4>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d307      	bcc.n	8011a98 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011a88:	f00a fb20 	bl	801c0cc <sys_arch_protect>
 8011a8c:	60b8      	str	r0, [r7, #8]
 8011a8e:	68b8      	ldr	r0, [r7, #8]
 8011a90:	f00a fb2a 	bl	801c0e8 <sys_arch_unprotect>
    return rmem;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	e0b5      	b.n	8011c04 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	3b08      	subs	r3, #8
 8011a9c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011a9e:	69b8      	ldr	r0, [r7, #24]
 8011aa0:	f7ff fdea 	bl	8011678 <mem_to_ptr>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011aa8:	69bb      	ldr	r3, [r7, #24]
 8011aaa:	881a      	ldrh	r2, [r3, #0]
 8011aac:	8afb      	ldrh	r3, [r7, #22]
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	3b08      	subs	r3, #8
 8011ab4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011ab6:	8bfa      	ldrh	r2, [r7, #30]
 8011ab8:	8abb      	ldrh	r3, [r7, #20]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d906      	bls.n	8011acc <mem_trim+0xb0>
 8011abe:	4b55      	ldr	r3, [pc, #340]	; (8011c14 <mem_trim+0x1f8>)
 8011ac0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011ac4:	4956      	ldr	r1, [pc, #344]	; (8011c20 <mem_trim+0x204>)
 8011ac6:	4855      	ldr	r0, [pc, #340]	; (8011c1c <mem_trim+0x200>)
 8011ac8:	f00a fb64 	bl	801c194 <iprintf>
  if (newsize > size) {
 8011acc:	8bfa      	ldrh	r2, [r7, #30]
 8011ace:	8abb      	ldrh	r3, [r7, #20]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d901      	bls.n	8011ad8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	e095      	b.n	8011c04 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011ad8:	8bfa      	ldrh	r2, [r7, #30]
 8011ada:	8abb      	ldrh	r3, [r7, #20]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d101      	bne.n	8011ae4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	e08f      	b.n	8011c04 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011ae4:	484f      	ldr	r0, [pc, #316]	; (8011c24 <mem_trim+0x208>)
 8011ae6:	f00a faaf 	bl	801c048 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011aea:	69bb      	ldr	r3, [r7, #24]
 8011aec:	881b      	ldrh	r3, [r3, #0]
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7ff fdb0 	bl	8011654 <ptr_to_mem>
 8011af4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	791b      	ldrb	r3, [r3, #4]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d13f      	bne.n	8011b7e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	881b      	ldrh	r3, [r3, #0]
 8011b02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b06:	d106      	bne.n	8011b16 <mem_trim+0xfa>
 8011b08:	4b42      	ldr	r3, [pc, #264]	; (8011c14 <mem_trim+0x1f8>)
 8011b0a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011b0e:	4946      	ldr	r1, [pc, #280]	; (8011c28 <mem_trim+0x20c>)
 8011b10:	4842      	ldr	r0, [pc, #264]	; (8011c1c <mem_trim+0x200>)
 8011b12:	f00a fb3f 	bl	801c194 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	881b      	ldrh	r3, [r3, #0]
 8011b1a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011b1c:	8afa      	ldrh	r2, [r7, #22]
 8011b1e:	8bfb      	ldrh	r3, [r7, #30]
 8011b20:	4413      	add	r3, r2
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	3308      	adds	r3, #8
 8011b26:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011b28:	4b40      	ldr	r3, [pc, #256]	; (8011c2c <mem_trim+0x210>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	693a      	ldr	r2, [r7, #16]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d106      	bne.n	8011b40 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011b32:	89fb      	ldrh	r3, [r7, #14]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7ff fd8d 	bl	8011654 <ptr_to_mem>
 8011b3a:	4602      	mov	r2, r0
 8011b3c:	4b3b      	ldr	r3, [pc, #236]	; (8011c2c <mem_trim+0x210>)
 8011b3e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011b40:	89fb      	ldrh	r3, [r7, #14]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7ff fd86 	bl	8011654 <ptr_to_mem>
 8011b48:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	89ba      	ldrh	r2, [r7, #12]
 8011b54:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	8afa      	ldrh	r2, [r7, #22]
 8011b5a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	89fa      	ldrh	r2, [r7, #14]
 8011b60:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b6a:	d047      	beq.n	8011bfc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	881b      	ldrh	r3, [r3, #0]
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7ff fd6f 	bl	8011654 <ptr_to_mem>
 8011b76:	4602      	mov	r2, r0
 8011b78:	89fb      	ldrh	r3, [r7, #14]
 8011b7a:	8053      	strh	r3, [r2, #2]
 8011b7c:	e03e      	b.n	8011bfc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011b7e:	8bfb      	ldrh	r3, [r7, #30]
 8011b80:	f103 0214 	add.w	r2, r3, #20
 8011b84:	8abb      	ldrh	r3, [r7, #20]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d838      	bhi.n	8011bfc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011b8a:	8afa      	ldrh	r2, [r7, #22]
 8011b8c:	8bfb      	ldrh	r3, [r7, #30]
 8011b8e:	4413      	add	r3, r2
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	3308      	adds	r3, #8
 8011b94:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	881b      	ldrh	r3, [r3, #0]
 8011b9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011b9e:	d106      	bne.n	8011bae <mem_trim+0x192>
 8011ba0:	4b1c      	ldr	r3, [pc, #112]	; (8011c14 <mem_trim+0x1f8>)
 8011ba2:	f240 3216 	movw	r2, #790	; 0x316
 8011ba6:	4920      	ldr	r1, [pc, #128]	; (8011c28 <mem_trim+0x20c>)
 8011ba8:	481c      	ldr	r0, [pc, #112]	; (8011c1c <mem_trim+0x200>)
 8011baa:	f00a faf3 	bl	801c194 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011bae:	89fb      	ldrh	r3, [r7, #14]
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7ff fd4f 	bl	8011654 <ptr_to_mem>
 8011bb6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011bb8:	4b1c      	ldr	r3, [pc, #112]	; (8011c2c <mem_trim+0x210>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	693a      	ldr	r2, [r7, #16]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d202      	bcs.n	8011bc8 <mem_trim+0x1ac>
      lfree = mem2;
 8011bc2:	4a1a      	ldr	r2, [pc, #104]	; (8011c2c <mem_trim+0x210>)
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011bce:	69bb      	ldr	r3, [r7, #24]
 8011bd0:	881a      	ldrh	r2, [r3, #0]
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	8afa      	ldrh	r2, [r7, #22]
 8011bda:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	89fa      	ldrh	r2, [r7, #14]
 8011be0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	881b      	ldrh	r3, [r3, #0]
 8011be6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bea:	d007      	beq.n	8011bfc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	881b      	ldrh	r3, [r3, #0]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7ff fd2f 	bl	8011654 <ptr_to_mem>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	89fb      	ldrh	r3, [r7, #14]
 8011bfa:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011bfc:	4809      	ldr	r0, [pc, #36]	; (8011c24 <mem_trim+0x208>)
 8011bfe:	f00a fa32 	bl	801c066 <sys_mutex_unlock>
  return rmem;
 8011c02:	687b      	ldr	r3, [r7, #4]
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3720      	adds	r7, #32
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	200044d4 	.word	0x200044d4
 8011c10:	200044d8 	.word	0x200044d8
 8011c14:	0801d3f8 	.word	0x0801d3f8
 8011c18:	0801d584 	.word	0x0801d584
 8011c1c:	0801d440 	.word	0x0801d440
 8011c20:	0801d59c 	.word	0x0801d59c
 8011c24:	200044dc 	.word	0x200044dc
 8011c28:	0801d5bc 	.word	0x0801d5bc
 8011c2c:	200044e0 	.word	0x200044e0

08011c30 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b088      	sub	sp, #32
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	4603      	mov	r3, r0
 8011c38:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011c3a:	88fb      	ldrh	r3, [r7, #6]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d101      	bne.n	8011c44 <mem_malloc+0x14>
    return NULL;
 8011c40:	2300      	movs	r3, #0
 8011c42:	e0e2      	b.n	8011e0a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011c44:	88fb      	ldrh	r3, [r7, #6]
 8011c46:	3303      	adds	r3, #3
 8011c48:	b29b      	uxth	r3, r3
 8011c4a:	f023 0303 	bic.w	r3, r3, #3
 8011c4e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011c50:	8bbb      	ldrh	r3, [r7, #28]
 8011c52:	2b0b      	cmp	r3, #11
 8011c54:	d801      	bhi.n	8011c5a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011c56:	230c      	movs	r3, #12
 8011c58:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011c5a:	8bbb      	ldrh	r3, [r7, #28]
 8011c5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c60:	d803      	bhi.n	8011c6a <mem_malloc+0x3a>
 8011c62:	8bba      	ldrh	r2, [r7, #28]
 8011c64:	88fb      	ldrh	r3, [r7, #6]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d201      	bcs.n	8011c6e <mem_malloc+0x3e>
    return NULL;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	e0cd      	b.n	8011e0a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011c6e:	4869      	ldr	r0, [pc, #420]	; (8011e14 <mem_malloc+0x1e4>)
 8011c70:	f00a f9ea 	bl	801c048 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011c74:	4b68      	ldr	r3, [pc, #416]	; (8011e18 <mem_malloc+0x1e8>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7ff fcfd 	bl	8011678 <mem_to_ptr>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	83fb      	strh	r3, [r7, #30]
 8011c82:	e0b7      	b.n	8011df4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011c84:	8bfb      	ldrh	r3, [r7, #30]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7ff fce4 	bl	8011654 <ptr_to_mem>
 8011c8c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	791b      	ldrb	r3, [r3, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f040 80a7 	bne.w	8011de6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	881b      	ldrh	r3, [r3, #0]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	8bfb      	ldrh	r3, [r7, #30]
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	f1a3 0208 	sub.w	r2, r3, #8
 8011ca6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	f0c0 809c 	bcc.w	8011de6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	881b      	ldrh	r3, [r3, #0]
 8011cb2:	461a      	mov	r2, r3
 8011cb4:	8bfb      	ldrh	r3, [r7, #30]
 8011cb6:	1ad3      	subs	r3, r2, r3
 8011cb8:	f1a3 0208 	sub.w	r2, r3, #8
 8011cbc:	8bbb      	ldrh	r3, [r7, #28]
 8011cbe:	3314      	adds	r3, #20
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d333      	bcc.n	8011d2c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011cc4:	8bfa      	ldrh	r2, [r7, #30]
 8011cc6:	8bbb      	ldrh	r3, [r7, #28]
 8011cc8:	4413      	add	r3, r2
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	3308      	adds	r3, #8
 8011cce:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011cd0:	8a7b      	ldrh	r3, [r7, #18]
 8011cd2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011cd6:	d106      	bne.n	8011ce6 <mem_malloc+0xb6>
 8011cd8:	4b50      	ldr	r3, [pc, #320]	; (8011e1c <mem_malloc+0x1ec>)
 8011cda:	f240 3287 	movw	r2, #903	; 0x387
 8011cde:	4950      	ldr	r1, [pc, #320]	; (8011e20 <mem_malloc+0x1f0>)
 8011ce0:	4850      	ldr	r0, [pc, #320]	; (8011e24 <mem_malloc+0x1f4>)
 8011ce2:	f00a fa57 	bl	801c194 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011ce6:	8a7b      	ldrh	r3, [r7, #18]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7ff fcb3 	bl	8011654 <ptr_to_mem>
 8011cee:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	881a      	ldrh	r2, [r3, #0]
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	8bfa      	ldrh	r2, [r7, #30]
 8011d02:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	8a7a      	ldrh	r2, [r7, #18]
 8011d08:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	881b      	ldrh	r3, [r3, #0]
 8011d14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011d18:	d00b      	beq.n	8011d32 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	881b      	ldrh	r3, [r3, #0]
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff fc98 	bl	8011654 <ptr_to_mem>
 8011d24:	4602      	mov	r2, r0
 8011d26:	8a7b      	ldrh	r3, [r7, #18]
 8011d28:	8053      	strh	r3, [r2, #2]
 8011d2a:	e002      	b.n	8011d32 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011d32:	4b39      	ldr	r3, [pc, #228]	; (8011e18 <mem_malloc+0x1e8>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	697a      	ldr	r2, [r7, #20]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d127      	bne.n	8011d8c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011d3c:	4b36      	ldr	r3, [pc, #216]	; (8011e18 <mem_malloc+0x1e8>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011d42:	e005      	b.n	8011d50 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	881b      	ldrh	r3, [r3, #0]
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7ff fc83 	bl	8011654 <ptr_to_mem>
 8011d4e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	791b      	ldrb	r3, [r3, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d004      	beq.n	8011d62 <mem_malloc+0x132>
 8011d58:	4b33      	ldr	r3, [pc, #204]	; (8011e28 <mem_malloc+0x1f8>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	69ba      	ldr	r2, [r7, #24]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d1f0      	bne.n	8011d44 <mem_malloc+0x114>
          }
          lfree = cur;
 8011d62:	4a2d      	ldr	r2, [pc, #180]	; (8011e18 <mem_malloc+0x1e8>)
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011d68:	4b2b      	ldr	r3, [pc, #172]	; (8011e18 <mem_malloc+0x1e8>)
 8011d6a:	681a      	ldr	r2, [r3, #0]
 8011d6c:	4b2e      	ldr	r3, [pc, #184]	; (8011e28 <mem_malloc+0x1f8>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d00b      	beq.n	8011d8c <mem_malloc+0x15c>
 8011d74:	4b28      	ldr	r3, [pc, #160]	; (8011e18 <mem_malloc+0x1e8>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	791b      	ldrb	r3, [r3, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d006      	beq.n	8011d8c <mem_malloc+0x15c>
 8011d7e:	4b27      	ldr	r3, [pc, #156]	; (8011e1c <mem_malloc+0x1ec>)
 8011d80:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011d84:	4929      	ldr	r1, [pc, #164]	; (8011e2c <mem_malloc+0x1fc>)
 8011d86:	4827      	ldr	r0, [pc, #156]	; (8011e24 <mem_malloc+0x1f4>)
 8011d88:	f00a fa04 	bl	801c194 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011d8c:	4821      	ldr	r0, [pc, #132]	; (8011e14 <mem_malloc+0x1e4>)
 8011d8e:	f00a f96a 	bl	801c066 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011d92:	8bba      	ldrh	r2, [r7, #28]
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	4413      	add	r3, r2
 8011d98:	3308      	adds	r3, #8
 8011d9a:	4a23      	ldr	r2, [pc, #140]	; (8011e28 <mem_malloc+0x1f8>)
 8011d9c:	6812      	ldr	r2, [r2, #0]
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d906      	bls.n	8011db0 <mem_malloc+0x180>
 8011da2:	4b1e      	ldr	r3, [pc, #120]	; (8011e1c <mem_malloc+0x1ec>)
 8011da4:	f240 32ba 	movw	r2, #954	; 0x3ba
 8011da8:	4921      	ldr	r1, [pc, #132]	; (8011e30 <mem_malloc+0x200>)
 8011daa:	481e      	ldr	r0, [pc, #120]	; (8011e24 <mem_malloc+0x1f4>)
 8011dac:	f00a f9f2 	bl	801c194 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	f003 0303 	and.w	r3, r3, #3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d006      	beq.n	8011dc8 <mem_malloc+0x198>
 8011dba:	4b18      	ldr	r3, [pc, #96]	; (8011e1c <mem_malloc+0x1ec>)
 8011dbc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8011dc0:	491c      	ldr	r1, [pc, #112]	; (8011e34 <mem_malloc+0x204>)
 8011dc2:	4818      	ldr	r0, [pc, #96]	; (8011e24 <mem_malloc+0x1f4>)
 8011dc4:	f00a f9e6 	bl	801c194 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	f003 0303 	and.w	r3, r3, #3
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d006      	beq.n	8011de0 <mem_malloc+0x1b0>
 8011dd2:	4b12      	ldr	r3, [pc, #72]	; (8011e1c <mem_malloc+0x1ec>)
 8011dd4:	f240 32be 	movw	r2, #958	; 0x3be
 8011dd8:	4917      	ldr	r1, [pc, #92]	; (8011e38 <mem_malloc+0x208>)
 8011dda:	4812      	ldr	r0, [pc, #72]	; (8011e24 <mem_malloc+0x1f4>)
 8011ddc:	f00a f9da 	bl	801c194 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	3308      	adds	r3, #8
 8011de4:	e011      	b.n	8011e0a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011de6:	8bfb      	ldrh	r3, [r7, #30]
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7ff fc33 	bl	8011654 <ptr_to_mem>
 8011dee:	4603      	mov	r3, r0
 8011df0:	881b      	ldrh	r3, [r3, #0]
 8011df2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011df4:	8bfa      	ldrh	r2, [r7, #30]
 8011df6:	8bbb      	ldrh	r3, [r7, #28]
 8011df8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	f4ff af41 	bcc.w	8011c84 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011e02:	4804      	ldr	r0, [pc, #16]	; (8011e14 <mem_malloc+0x1e4>)
 8011e04:	f00a f92f 	bl	801c066 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011e08:	2300      	movs	r3, #0
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3720      	adds	r7, #32
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	200044dc 	.word	0x200044dc
 8011e18:	200044e0 	.word	0x200044e0
 8011e1c:	0801d3f8 	.word	0x0801d3f8
 8011e20:	0801d5bc 	.word	0x0801d5bc
 8011e24:	0801d440 	.word	0x0801d440
 8011e28:	200044d8 	.word	0x200044d8
 8011e2c:	0801d5d0 	.word	0x0801d5d0
 8011e30:	0801d5ec 	.word	0x0801d5ec
 8011e34:	0801d61c 	.word	0x0801d61c
 8011e38:	0801d64c 	.word	0x0801d64c

08011e3c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	689b      	ldr	r3, [r3, #8]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	3303      	adds	r3, #3
 8011e52:	f023 0303 	bic.w	r3, r3, #3
 8011e56:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011e58:	2300      	movs	r3, #0
 8011e5a:	60fb      	str	r3, [r7, #12]
 8011e5c:	e011      	b.n	8011e82 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	689b      	ldr	r3, [r3, #8]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	689b      	ldr	r3, [r3, #8]
 8011e6c:	68ba      	ldr	r2, [r7, #8]
 8011e6e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	881b      	ldrh	r3, [r3, #0]
 8011e74:	461a      	mov	r2, r3
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	4413      	add	r3, r2
 8011e7a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	3301      	adds	r3, #1
 8011e80:	60fb      	str	r3, [r7, #12]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	885b      	ldrh	r3, [r3, #2]
 8011e86:	461a      	mov	r2, r3
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	dbe7      	blt.n	8011e5e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011e8e:	bf00      	nop
 8011e90:	3714      	adds	r7, #20
 8011e92:	46bd      	mov	sp, r7
 8011e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e98:	4770      	bx	lr
	...

08011e9c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	80fb      	strh	r3, [r7, #6]
 8011ea6:	e009      	b.n	8011ebc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011ea8:	88fb      	ldrh	r3, [r7, #6]
 8011eaa:	4a08      	ldr	r2, [pc, #32]	; (8011ecc <memp_init+0x30>)
 8011eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff ffc3 	bl	8011e3c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011eb6:	88fb      	ldrh	r3, [r7, #6]
 8011eb8:	3301      	adds	r3, #1
 8011eba:	80fb      	strh	r3, [r7, #6]
 8011ebc:	88fb      	ldrh	r3, [r7, #6]
 8011ebe:	2b0c      	cmp	r3, #12
 8011ec0:	d9f2      	bls.n	8011ea8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011ec2:	bf00      	nop
 8011ec4:	3708      	adds	r7, #8
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	08030994 	.word	0x08030994

08011ed0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011ed8:	f00a f8f8 	bl	801c0cc <sys_arch_protect>
 8011edc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d015      	beq.n	8011f18 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	68ba      	ldr	r2, [r7, #8]
 8011ef2:	6812      	ldr	r2, [r2, #0]
 8011ef4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	f003 0303 	and.w	r3, r3, #3
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d006      	beq.n	8011f0e <do_memp_malloc_pool+0x3e>
 8011f00:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <do_memp_malloc_pool+0x58>)
 8011f02:	f240 1219 	movw	r2, #281	; 0x119
 8011f06:	4909      	ldr	r1, [pc, #36]	; (8011f2c <do_memp_malloc_pool+0x5c>)
 8011f08:	4809      	ldr	r0, [pc, #36]	; (8011f30 <do_memp_malloc_pool+0x60>)
 8011f0a:	f00a f943 	bl	801c194 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f00a f8ea 	bl	801c0e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	e003      	b.n	8011f20 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011f18:	68f8      	ldr	r0, [r7, #12]
 8011f1a:	f00a f8e5 	bl	801c0e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011f1e:	2300      	movs	r3, #0
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3710      	adds	r7, #16
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}
 8011f28:	0801d670 	.word	0x0801d670
 8011f2c:	0801d6a0 	.word	0x0801d6a0
 8011f30:	0801d6c4 	.word	0x0801d6c4

08011f34 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b084      	sub	sp, #16
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	2b0c      	cmp	r3, #12
 8011f42:	d908      	bls.n	8011f56 <memp_malloc+0x22>
 8011f44:	4b0a      	ldr	r3, [pc, #40]	; (8011f70 <memp_malloc+0x3c>)
 8011f46:	f240 1257 	movw	r2, #343	; 0x157
 8011f4a:	490a      	ldr	r1, [pc, #40]	; (8011f74 <memp_malloc+0x40>)
 8011f4c:	480a      	ldr	r0, [pc, #40]	; (8011f78 <memp_malloc+0x44>)
 8011f4e:	f00a f921 	bl	801c194 <iprintf>
 8011f52:	2300      	movs	r3, #0
 8011f54:	e008      	b.n	8011f68 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011f56:	79fb      	ldrb	r3, [r7, #7]
 8011f58:	4a08      	ldr	r2, [pc, #32]	; (8011f7c <memp_malloc+0x48>)
 8011f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7ff ffb6 	bl	8011ed0 <do_memp_malloc_pool>
 8011f64:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011f66:	68fb      	ldr	r3, [r7, #12]
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	3710      	adds	r7, #16
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	0801d670 	.word	0x0801d670
 8011f74:	0801d700 	.word	0x0801d700
 8011f78:	0801d6c4 	.word	0x0801d6c4
 8011f7c:	08030994 	.word	0x08030994

08011f80 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b084      	sub	sp, #16
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	f003 0303 	and.w	r3, r3, #3
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d006      	beq.n	8011fa2 <do_memp_free_pool+0x22>
 8011f94:	4b0d      	ldr	r3, [pc, #52]	; (8011fcc <do_memp_free_pool+0x4c>)
 8011f96:	f240 126d 	movw	r2, #365	; 0x16d
 8011f9a:	490d      	ldr	r1, [pc, #52]	; (8011fd0 <do_memp_free_pool+0x50>)
 8011f9c:	480d      	ldr	r0, [pc, #52]	; (8011fd4 <do_memp_free_pool+0x54>)
 8011f9e:	f00a f8f9 	bl	801c194 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011fa6:	f00a f891 	bl	801c0cc <sys_arch_protect>
 8011faa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	689b      	ldr	r3, [r3, #8]
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	68fa      	ldr	r2, [r7, #12]
 8011fbc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011fbe:	68b8      	ldr	r0, [r7, #8]
 8011fc0:	f00a f892 	bl	801c0e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011fc4:	bf00      	nop
 8011fc6:	3710      	adds	r7, #16
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}
 8011fcc:	0801d670 	.word	0x0801d670
 8011fd0:	0801d720 	.word	0x0801d720
 8011fd4:	0801d6c4 	.word	0x0801d6c4

08011fd8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	4603      	mov	r3, r0
 8011fe0:	6039      	str	r1, [r7, #0]
 8011fe2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011fe4:	79fb      	ldrb	r3, [r7, #7]
 8011fe6:	2b0c      	cmp	r3, #12
 8011fe8:	d907      	bls.n	8011ffa <memp_free+0x22>
 8011fea:	4b0c      	ldr	r3, [pc, #48]	; (801201c <memp_free+0x44>)
 8011fec:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011ff0:	490b      	ldr	r1, [pc, #44]	; (8012020 <memp_free+0x48>)
 8011ff2:	480c      	ldr	r0, [pc, #48]	; (8012024 <memp_free+0x4c>)
 8011ff4:	f00a f8ce 	bl	801c194 <iprintf>
 8011ff8:	e00c      	b.n	8012014 <memp_free+0x3c>

  if (mem == NULL) {
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d008      	beq.n	8012012 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012000:	79fb      	ldrb	r3, [r7, #7]
 8012002:	4a09      	ldr	r2, [pc, #36]	; (8012028 <memp_free+0x50>)
 8012004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012008:	6839      	ldr	r1, [r7, #0]
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff ffb8 	bl	8011f80 <do_memp_free_pool>
 8012010:	e000      	b.n	8012014 <memp_free+0x3c>
    return;
 8012012:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	0801d670 	.word	0x0801d670
 8012020:	0801d740 	.word	0x0801d740
 8012024:	0801d6c4 	.word	0x0801d6c4
 8012028:	08030994 	.word	0x08030994

0801202c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801202c:	b480      	push	{r7}
 801202e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012030:	bf00      	nop
 8012032:	46bd      	mov	sp, r7
 8012034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012038:	4770      	bx	lr
	...

0801203c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af00      	add	r7, sp, #0
 8012042:	60f8      	str	r0, [r7, #12]
 8012044:	60b9      	str	r1, [r7, #8]
 8012046:	607a      	str	r2, [r7, #4]
 8012048:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d108      	bne.n	8012062 <netif_add+0x26>
 8012050:	4b57      	ldr	r3, [pc, #348]	; (80121b0 <netif_add+0x174>)
 8012052:	f240 1227 	movw	r2, #295	; 0x127
 8012056:	4957      	ldr	r1, [pc, #348]	; (80121b4 <netif_add+0x178>)
 8012058:	4857      	ldr	r0, [pc, #348]	; (80121b8 <netif_add+0x17c>)
 801205a:	f00a f89b 	bl	801c194 <iprintf>
 801205e:	2300      	movs	r3, #0
 8012060:	e0a2      	b.n	80121a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012064:	2b00      	cmp	r3, #0
 8012066:	d108      	bne.n	801207a <netif_add+0x3e>
 8012068:	4b51      	ldr	r3, [pc, #324]	; (80121b0 <netif_add+0x174>)
 801206a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801206e:	4953      	ldr	r1, [pc, #332]	; (80121bc <netif_add+0x180>)
 8012070:	4851      	ldr	r0, [pc, #324]	; (80121b8 <netif_add+0x17c>)
 8012072:	f00a f88f 	bl	801c194 <iprintf>
 8012076:	2300      	movs	r3, #0
 8012078:	e096      	b.n	80121a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d101      	bne.n	8012084 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012080:	4b4f      	ldr	r3, [pc, #316]	; (80121c0 <netif_add+0x184>)
 8012082:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d101      	bne.n	801208e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801208a:	4b4d      	ldr	r3, [pc, #308]	; (80121c0 <netif_add+0x184>)
 801208c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d101      	bne.n	8012098 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012094:	4b4a      	ldr	r3, [pc, #296]	; (80121c0 <netif_add+0x184>)
 8012096:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2200      	movs	r2, #0
 801209c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2200      	movs	r2, #0
 80120a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2200      	movs	r2, #0
 80120a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	4a45      	ldr	r2, [pc, #276]	; (80121c4 <netif_add+0x188>)
 80120ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	2200      	movs	r2, #0
 80120b4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	2200      	movs	r2, #0
 80120c2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	6a3a      	ldr	r2, [r7, #32]
 80120c8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80120ca:	4b3f      	ldr	r3, [pc, #252]	; (80121c8 <netif_add+0x18c>)
 80120cc:	781a      	ldrb	r2, [r3, #0]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80120da:	683b      	ldr	r3, [r7, #0]
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	68b9      	ldr	r1, [r7, #8]
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f000 f913 	bl	801230c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80120e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e8:	68f8      	ldr	r0, [r7, #12]
 80120ea:	4798      	blx	r3
 80120ec:	4603      	mov	r3, r0
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d001      	beq.n	80120f6 <netif_add+0xba>
    return NULL;
 80120f2:	2300      	movs	r3, #0
 80120f4:	e058      	b.n	80121a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80120fc:	2bff      	cmp	r3, #255	; 0xff
 80120fe:	d103      	bne.n	8012108 <netif_add+0xcc>
        netif->num = 0;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	2200      	movs	r2, #0
 8012104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8012108:	2300      	movs	r3, #0
 801210a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801210c:	4b2f      	ldr	r3, [pc, #188]	; (80121cc <netif_add+0x190>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	617b      	str	r3, [r7, #20]
 8012112:	e02b      	b.n	801216c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012114:	697a      	ldr	r2, [r7, #20]
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	429a      	cmp	r2, r3
 801211a:	d106      	bne.n	801212a <netif_add+0xee>
 801211c:	4b24      	ldr	r3, [pc, #144]	; (80121b0 <netif_add+0x174>)
 801211e:	f240 128b 	movw	r2, #395	; 0x18b
 8012122:	492b      	ldr	r1, [pc, #172]	; (80121d0 <netif_add+0x194>)
 8012124:	4824      	ldr	r0, [pc, #144]	; (80121b8 <netif_add+0x17c>)
 8012126:	f00a f835 	bl	801c194 <iprintf>
        num_netifs++;
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	3301      	adds	r3, #1
 801212e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	2bff      	cmp	r3, #255	; 0xff
 8012134:	dd06      	ble.n	8012144 <netif_add+0x108>
 8012136:	4b1e      	ldr	r3, [pc, #120]	; (80121b0 <netif_add+0x174>)
 8012138:	f240 128d 	movw	r2, #397	; 0x18d
 801213c:	4925      	ldr	r1, [pc, #148]	; (80121d4 <netif_add+0x198>)
 801213e:	481e      	ldr	r0, [pc, #120]	; (80121b8 <netif_add+0x17c>)
 8012140:	f00a f828 	bl	801c194 <iprintf>
        if (netif2->num == netif->num) {
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012150:	429a      	cmp	r2, r3
 8012152:	d108      	bne.n	8012166 <netif_add+0x12a>
          netif->num++;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801215a:	3301      	adds	r3, #1
 801215c:	b2da      	uxtb	r2, r3
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8012164:	e005      	b.n	8012172 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	617b      	str	r3, [r7, #20]
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d1d0      	bne.n	8012114 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1be      	bne.n	80120f6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801217e:	2bfe      	cmp	r3, #254	; 0xfe
 8012180:	d103      	bne.n	801218a <netif_add+0x14e>
    netif_num = 0;
 8012182:	4b11      	ldr	r3, [pc, #68]	; (80121c8 <netif_add+0x18c>)
 8012184:	2200      	movs	r2, #0
 8012186:	701a      	strb	r2, [r3, #0]
 8012188:	e006      	b.n	8012198 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012190:	3301      	adds	r3, #1
 8012192:	b2da      	uxtb	r2, r3
 8012194:	4b0c      	ldr	r3, [pc, #48]	; (80121c8 <netif_add+0x18c>)
 8012196:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012198:	4b0c      	ldr	r3, [pc, #48]	; (80121cc <netif_add+0x190>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80121a0:	4a0a      	ldr	r2, [pc, #40]	; (80121cc <netif_add+0x190>)
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80121a6:	68fb      	ldr	r3, [r7, #12]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3718      	adds	r7, #24
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	0801d75c 	.word	0x0801d75c
 80121b4:	0801d7f0 	.word	0x0801d7f0
 80121b8:	0801d7ac 	.word	0x0801d7ac
 80121bc:	0801d80c 	.word	0x0801d80c
 80121c0:	08030a08 	.word	0x08030a08
 80121c4:	080125e7 	.word	0x080125e7
 80121c8:	20004518 	.word	0x20004518
 80121cc:	2000b330 	.word	0x2000b330
 80121d0:	0801d830 	.word	0x0801d830
 80121d4:	0801d844 	.word	0x0801d844

080121d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
 80121e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80121e2:	6839      	ldr	r1, [r7, #0]
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f002 fe13 	bl	8014e10 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80121ea:	6839      	ldr	r1, [r7, #0]
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f007 fb8b 	bl	8019908 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80121f2:	bf00      	nop
 80121f4:	3708      	adds	r7, #8
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
	...

080121fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b086      	sub	sp, #24
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d106      	bne.n	801221c <netif_do_set_ipaddr+0x20>
 801220e:	4b1d      	ldr	r3, [pc, #116]	; (8012284 <netif_do_set_ipaddr+0x88>)
 8012210:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012214:	491c      	ldr	r1, [pc, #112]	; (8012288 <netif_do_set_ipaddr+0x8c>)
 8012216:	481d      	ldr	r0, [pc, #116]	; (801228c <netif_do_set_ipaddr+0x90>)
 8012218:	f009 ffbc 	bl	801c194 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d106      	bne.n	8012230 <netif_do_set_ipaddr+0x34>
 8012222:	4b18      	ldr	r3, [pc, #96]	; (8012284 <netif_do_set_ipaddr+0x88>)
 8012224:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012228:	4917      	ldr	r1, [pc, #92]	; (8012288 <netif_do_set_ipaddr+0x8c>)
 801222a:	4818      	ldr	r0, [pc, #96]	; (801228c <netif_do_set_ipaddr+0x90>)
 801222c:	f009 ffb2 	bl	801c194 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	3304      	adds	r3, #4
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	429a      	cmp	r2, r3
 801223c:	d01c      	beq.n	8012278 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	3304      	adds	r3, #4
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801224e:	f107 0314 	add.w	r3, r7, #20
 8012252:	4619      	mov	r1, r3
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7ff ffbf 	bl	80121d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d002      	beq.n	8012266 <netif_do_set_ipaddr+0x6a>
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	e000      	b.n	8012268 <netif_do_set_ipaddr+0x6c>
 8012266:	2300      	movs	r3, #0
 8012268:	68fa      	ldr	r2, [r7, #12]
 801226a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801226c:	2101      	movs	r1, #1
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	f000 f8d2 	bl	8012418 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012274:	2301      	movs	r3, #1
 8012276:	e000      	b.n	801227a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012278:	2300      	movs	r3, #0
}
 801227a:	4618      	mov	r0, r3
 801227c:	3718      	adds	r7, #24
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	0801d75c 	.word	0x0801d75c
 8012288:	0801d874 	.word	0x0801d874
 801228c:	0801d7ac 	.word	0x0801d7ac

08012290 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012290:	b480      	push	{r7}
 8012292:	b085      	sub	sp, #20
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	3308      	adds	r3, #8
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d00a      	beq.n	80122c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d002      	beq.n	80122b6 <netif_do_set_netmask+0x26>
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	e000      	b.n	80122b8 <netif_do_set_netmask+0x28>
 80122b6:	2300      	movs	r3, #0
 80122b8:	68fa      	ldr	r2, [r7, #12]
 80122ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80122bc:	2301      	movs	r3, #1
 80122be:	e000      	b.n	80122c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80122c0:	2300      	movs	r3, #0
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3714      	adds	r7, #20
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr

080122ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80122ce:	b480      	push	{r7}
 80122d0:	b085      	sub	sp, #20
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	60f8      	str	r0, [r7, #12]
 80122d6:	60b9      	str	r1, [r7, #8]
 80122d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	330c      	adds	r3, #12
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d00a      	beq.n	80122fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d002      	beq.n	80122f4 <netif_do_set_gw+0x26>
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	e000      	b.n	80122f6 <netif_do_set_gw+0x28>
 80122f4:	2300      	movs	r3, #0
 80122f6:	68fa      	ldr	r2, [r7, #12]
 80122f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80122fa:	2301      	movs	r3, #1
 80122fc:	e000      	b.n	8012300 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80122fe:	2300      	movs	r3, #0
}
 8012300:	4618      	mov	r0, r3
 8012302:	3714      	adds	r7, #20
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr

0801230c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b088      	sub	sp, #32
 8012310:	af00      	add	r7, sp, #0
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	60b9      	str	r1, [r7, #8]
 8012316:	607a      	str	r2, [r7, #4]
 8012318:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801231a:	2300      	movs	r3, #0
 801231c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801231e:	2300      	movs	r3, #0
 8012320:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d101      	bne.n	801232c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012328:	4b1c      	ldr	r3, [pc, #112]	; (801239c <netif_set_addr+0x90>)
 801232a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d101      	bne.n	8012336 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012332:	4b1a      	ldr	r3, [pc, #104]	; (801239c <netif_set_addr+0x90>)
 8012334:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d101      	bne.n	8012340 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801233c:	4b17      	ldr	r3, [pc, #92]	; (801239c <netif_set_addr+0x90>)
 801233e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d003      	beq.n	801234e <netif_set_addr+0x42>
 8012346:	68bb      	ldr	r3, [r7, #8]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d101      	bne.n	8012352 <netif_set_addr+0x46>
 801234e:	2301      	movs	r3, #1
 8012350:	e000      	b.n	8012354 <netif_set_addr+0x48>
 8012352:	2300      	movs	r3, #0
 8012354:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d006      	beq.n	801236a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801235c:	f107 0310 	add.w	r3, r7, #16
 8012360:	461a      	mov	r2, r3
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	68f8      	ldr	r0, [r7, #12]
 8012366:	f7ff ff49 	bl	80121fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801236a:	69fa      	ldr	r2, [r7, #28]
 801236c:	6879      	ldr	r1, [r7, #4]
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f7ff ff8e 	bl	8012290 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012374:	69ba      	ldr	r2, [r7, #24]
 8012376:	6839      	ldr	r1, [r7, #0]
 8012378:	68f8      	ldr	r0, [r7, #12]
 801237a:	f7ff ffa8 	bl	80122ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d106      	bne.n	8012392 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012384:	f107 0310 	add.w	r3, r7, #16
 8012388:	461a      	mov	r2, r3
 801238a:	68b9      	ldr	r1, [r7, #8]
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f7ff ff35 	bl	80121fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012392:	bf00      	nop
 8012394:	3720      	adds	r7, #32
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	08030a08 	.word	0x08030a08

080123a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80123a8:	4a04      	ldr	r2, [pc, #16]	; (80123bc <netif_set_default+0x1c>)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80123ae:	bf00      	nop
 80123b0:	370c      	adds	r7, #12
 80123b2:	46bd      	mov	sp, r7
 80123b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop
 80123bc:	2000b334 	.word	0x2000b334

080123c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d107      	bne.n	80123de <netif_set_up+0x1e>
 80123ce:	4b0f      	ldr	r3, [pc, #60]	; (801240c <netif_set_up+0x4c>)
 80123d0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80123d4:	490e      	ldr	r1, [pc, #56]	; (8012410 <netif_set_up+0x50>)
 80123d6:	480f      	ldr	r0, [pc, #60]	; (8012414 <netif_set_up+0x54>)
 80123d8:	f009 fedc 	bl	801c194 <iprintf>
 80123dc:	e013      	b.n	8012406 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123e4:	f003 0301 	and.w	r3, r3, #1
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d10c      	bne.n	8012406 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123f2:	f043 0301 	orr.w	r3, r3, #1
 80123f6:	b2da      	uxtb	r2, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80123fe:	2103      	movs	r1, #3
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 f809 	bl	8012418 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012406:	3708      	adds	r7, #8
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}
 801240c:	0801d75c 	.word	0x0801d75c
 8012410:	0801d8e4 	.word	0x0801d8e4
 8012414:	0801d7ac 	.word	0x0801d7ac

08012418 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	460b      	mov	r3, r1
 8012422:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d106      	bne.n	8012438 <netif_issue_reports+0x20>
 801242a:	4b18      	ldr	r3, [pc, #96]	; (801248c <netif_issue_reports+0x74>)
 801242c:	f240 326d 	movw	r2, #877	; 0x36d
 8012430:	4917      	ldr	r1, [pc, #92]	; (8012490 <netif_issue_reports+0x78>)
 8012432:	4818      	ldr	r0, [pc, #96]	; (8012494 <netif_issue_reports+0x7c>)
 8012434:	f009 feae 	bl	801c194 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801243e:	f003 0304 	and.w	r3, r3, #4
 8012442:	2b00      	cmp	r3, #0
 8012444:	d01e      	beq.n	8012484 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801244c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012450:	2b00      	cmp	r3, #0
 8012452:	d017      	beq.n	8012484 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012454:	78fb      	ldrb	r3, [r7, #3]
 8012456:	f003 0301 	and.w	r3, r3, #1
 801245a:	2b00      	cmp	r3, #0
 801245c:	d013      	beq.n	8012486 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	3304      	adds	r3, #4
 8012462:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012464:	2b00      	cmp	r3, #0
 8012466:	d00e      	beq.n	8012486 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801246e:	f003 0308 	and.w	r3, r3, #8
 8012472:	2b00      	cmp	r3, #0
 8012474:	d007      	beq.n	8012486 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3304      	adds	r3, #4
 801247a:	4619      	mov	r1, r3
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f008 f9ad 	bl	801a7dc <etharp_request>
 8012482:	e000      	b.n	8012486 <netif_issue_reports+0x6e>
    return;
 8012484:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}
 801248c:	0801d75c 	.word	0x0801d75c
 8012490:	0801d900 	.word	0x0801d900
 8012494:	0801d7ac 	.word	0x0801d7ac

08012498 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d107      	bne.n	80124b6 <netif_set_down+0x1e>
 80124a6:	4b12      	ldr	r3, [pc, #72]	; (80124f0 <netif_set_down+0x58>)
 80124a8:	f240 329b 	movw	r2, #923	; 0x39b
 80124ac:	4911      	ldr	r1, [pc, #68]	; (80124f4 <netif_set_down+0x5c>)
 80124ae:	4812      	ldr	r0, [pc, #72]	; (80124f8 <netif_set_down+0x60>)
 80124b0:	f009 fe70 	bl	801c194 <iprintf>
 80124b4:	e019      	b.n	80124ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124bc:	f003 0301 	and.w	r3, r3, #1
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d012      	beq.n	80124ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124ca:	f023 0301 	bic.w	r3, r3, #1
 80124ce:	b2da      	uxtb	r2, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124dc:	f003 0308 	and.w	r3, r3, #8
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d002      	beq.n	80124ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f007 fd37 	bl	8019f58 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80124ea:	3708      	adds	r7, #8
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}
 80124f0:	0801d75c 	.word	0x0801d75c
 80124f4:	0801d924 	.word	0x0801d924
 80124f8:	0801d7ac 	.word	0x0801d7ac

080124fc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d107      	bne.n	801251a <netif_set_link_up+0x1e>
 801250a:	4b13      	ldr	r3, [pc, #76]	; (8012558 <netif_set_link_up+0x5c>)
 801250c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012510:	4912      	ldr	r1, [pc, #72]	; (801255c <netif_set_link_up+0x60>)
 8012512:	4813      	ldr	r0, [pc, #76]	; (8012560 <netif_set_link_up+0x64>)
 8012514:	f009 fe3e 	bl	801c194 <iprintf>
 8012518:	e01b      	b.n	8012552 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012520:	f003 0304 	and.w	r3, r3, #4
 8012524:	2b00      	cmp	r3, #0
 8012526:	d114      	bne.n	8012552 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801252e:	f043 0304 	orr.w	r3, r3, #4
 8012532:	b2da      	uxtb	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801253a:	2103      	movs	r1, #3
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f7ff ff6b 	bl	8012418 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	69db      	ldr	r3, [r3, #28]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d003      	beq.n	8012552 <netif_set_link_up+0x56>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	69db      	ldr	r3, [r3, #28]
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012552:	3708      	adds	r7, #8
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	0801d75c 	.word	0x0801d75c
 801255c:	0801d944 	.word	0x0801d944
 8012560:	0801d7ac 	.word	0x0801d7ac

08012564 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d107      	bne.n	8012582 <netif_set_link_down+0x1e>
 8012572:	4b11      	ldr	r3, [pc, #68]	; (80125b8 <netif_set_link_down+0x54>)
 8012574:	f240 4206 	movw	r2, #1030	; 0x406
 8012578:	4910      	ldr	r1, [pc, #64]	; (80125bc <netif_set_link_down+0x58>)
 801257a:	4811      	ldr	r0, [pc, #68]	; (80125c0 <netif_set_link_down+0x5c>)
 801257c:	f009 fe0a 	bl	801c194 <iprintf>
 8012580:	e017      	b.n	80125b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012588:	f003 0304 	and.w	r3, r3, #4
 801258c:	2b00      	cmp	r3, #0
 801258e:	d010      	beq.n	80125b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012596:	f023 0304 	bic.w	r3, r3, #4
 801259a:	b2da      	uxtb	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	69db      	ldr	r3, [r3, #28]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d003      	beq.n	80125b2 <netif_set_link_down+0x4e>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	69db      	ldr	r3, [r3, #28]
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80125b2:	3708      	adds	r7, #8
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}
 80125b8:	0801d75c 	.word	0x0801d75c
 80125bc:	0801d968 	.word	0x0801d968
 80125c0:	0801d7ac 	.word	0x0801d7ac

080125c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80125c4:	b480      	push	{r7}
 80125c6:	b083      	sub	sp, #12
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d002      	beq.n	80125da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	61da      	str	r2, [r3, #28]
  }
}
 80125da:	bf00      	nop
 80125dc:	370c      	adds	r7, #12
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr

080125e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80125e6:	b480      	push	{r7}
 80125e8:	b085      	sub	sp, #20
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	60f8      	str	r0, [r7, #12]
 80125ee:	60b9      	str	r1, [r7, #8]
 80125f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80125f2:	f06f 030b 	mvn.w	r3, #11
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3714      	adds	r7, #20
 80125fa:	46bd      	mov	sp, r7
 80125fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012600:	4770      	bx	lr
	...

08012604 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012604:	b480      	push	{r7}
 8012606:	b085      	sub	sp, #20
 8012608:	af00      	add	r7, sp, #0
 801260a:	4603      	mov	r3, r0
 801260c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801260e:	79fb      	ldrb	r3, [r7, #7]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d013      	beq.n	801263c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012614:	4b0d      	ldr	r3, [pc, #52]	; (801264c <netif_get_by_index+0x48>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	60fb      	str	r3, [r7, #12]
 801261a:	e00c      	b.n	8012636 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012622:	3301      	adds	r3, #1
 8012624:	b2db      	uxtb	r3, r3
 8012626:	79fa      	ldrb	r2, [r7, #7]
 8012628:	429a      	cmp	r2, r3
 801262a:	d101      	bne.n	8012630 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	e006      	b.n	801263e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	60fb      	str	r3, [r7, #12]
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d1ef      	bne.n	801261c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801263c:	2300      	movs	r3, #0
}
 801263e:	4618      	mov	r0, r3
 8012640:	3714      	adds	r7, #20
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	2000b330 	.word	0x2000b330

08012650 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012656:	f009 fd39 	bl	801c0cc <sys_arch_protect>
 801265a:	6038      	str	r0, [r7, #0]
 801265c:	4b0d      	ldr	r3, [pc, #52]	; (8012694 <pbuf_free_ooseq+0x44>)
 801265e:	2200      	movs	r2, #0
 8012660:	701a      	strb	r2, [r3, #0]
 8012662:	6838      	ldr	r0, [r7, #0]
 8012664:	f009 fd40 	bl	801c0e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012668:	4b0b      	ldr	r3, [pc, #44]	; (8012698 <pbuf_free_ooseq+0x48>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	607b      	str	r3, [r7, #4]
 801266e:	e00a      	b.n	8012686 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012674:	2b00      	cmp	r3, #0
 8012676:	d003      	beq.n	8012680 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f002 fc07 	bl	8014e8c <tcp_free_ooseq>
      return;
 801267e:	e005      	b.n	801268c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	68db      	ldr	r3, [r3, #12]
 8012684:	607b      	str	r3, [r7, #4]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d1f1      	bne.n	8012670 <pbuf_free_ooseq+0x20>
    }
  }
}
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	2000b338 	.word	0x2000b338
 8012698:	2000b340 	.word	0x2000b340

0801269c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80126a4:	f7ff ffd4 	bl	8012650 <pbuf_free_ooseq>
}
 80126a8:	bf00      	nop
 80126aa:	3708      	adds	r7, #8
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80126b6:	f009 fd09 	bl	801c0cc <sys_arch_protect>
 80126ba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80126bc:	4b0f      	ldr	r3, [pc, #60]	; (80126fc <pbuf_pool_is_empty+0x4c>)
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80126c2:	4b0e      	ldr	r3, [pc, #56]	; (80126fc <pbuf_pool_is_empty+0x4c>)
 80126c4:	2201      	movs	r2, #1
 80126c6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f009 fd0d 	bl	801c0e8 <sys_arch_unprotect>

  if (!queued) {
 80126ce:	78fb      	ldrb	r3, [r7, #3]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d10f      	bne.n	80126f4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80126d4:	2100      	movs	r1, #0
 80126d6:	480a      	ldr	r0, [pc, #40]	; (8012700 <pbuf_pool_is_empty+0x50>)
 80126d8:	f7fe f89c 	bl	8010814 <tcpip_try_callback>
 80126dc:	4603      	mov	r3, r0
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d008      	beq.n	80126f4 <pbuf_pool_is_empty+0x44>
 80126e2:	f009 fcf3 	bl	801c0cc <sys_arch_protect>
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	4b04      	ldr	r3, [pc, #16]	; (80126fc <pbuf_pool_is_empty+0x4c>)
 80126ea:	2200      	movs	r2, #0
 80126ec:	701a      	strb	r2, [r3, #0]
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f009 fcfa 	bl	801c0e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80126f4:	bf00      	nop
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	2000b338 	.word	0x2000b338
 8012700:	0801269d 	.word	0x0801269d

08012704 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012704:	b480      	push	{r7}
 8012706:	b085      	sub	sp, #20
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	4611      	mov	r1, r2
 8012710:	461a      	mov	r2, r3
 8012712:	460b      	mov	r3, r1
 8012714:	80fb      	strh	r3, [r7, #6]
 8012716:	4613      	mov	r3, r2
 8012718:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2200      	movs	r2, #0
 801271e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	68ba      	ldr	r2, [r7, #8]
 8012724:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	88fa      	ldrh	r2, [r7, #6]
 801272a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	88ba      	ldrh	r2, [r7, #4]
 8012730:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012732:	8b3b      	ldrh	r3, [r7, #24]
 8012734:	b2da      	uxtb	r2, r3
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	7f3a      	ldrb	r2, [r7, #28]
 801273e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2201      	movs	r2, #1
 8012744:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2200      	movs	r2, #0
 801274a:	73da      	strb	r2, [r3, #15]
}
 801274c:	bf00      	nop
 801274e:	3714      	adds	r7, #20
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b08c      	sub	sp, #48	; 0x30
 801275c:	af02      	add	r7, sp, #8
 801275e:	4603      	mov	r3, r0
 8012760:	71fb      	strb	r3, [r7, #7]
 8012762:	460b      	mov	r3, r1
 8012764:	80bb      	strh	r3, [r7, #4]
 8012766:	4613      	mov	r3, r2
 8012768:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801276a:	79fb      	ldrb	r3, [r7, #7]
 801276c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801276e:	887b      	ldrh	r3, [r7, #2]
 8012770:	2b41      	cmp	r3, #65	; 0x41
 8012772:	d00b      	beq.n	801278c <pbuf_alloc+0x34>
 8012774:	2b41      	cmp	r3, #65	; 0x41
 8012776:	dc02      	bgt.n	801277e <pbuf_alloc+0x26>
 8012778:	2b01      	cmp	r3, #1
 801277a:	d007      	beq.n	801278c <pbuf_alloc+0x34>
 801277c:	e0c2      	b.n	8012904 <pbuf_alloc+0x1ac>
 801277e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012782:	d00b      	beq.n	801279c <pbuf_alloc+0x44>
 8012784:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012788:	d070      	beq.n	801286c <pbuf_alloc+0x114>
 801278a:	e0bb      	b.n	8012904 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801278c:	887a      	ldrh	r2, [r7, #2]
 801278e:	88bb      	ldrh	r3, [r7, #4]
 8012790:	4619      	mov	r1, r3
 8012792:	2000      	movs	r0, #0
 8012794:	f000 f8d2 	bl	801293c <pbuf_alloc_reference>
 8012798:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801279a:	e0bd      	b.n	8012918 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801279c:	2300      	movs	r3, #0
 801279e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80127a0:	2300      	movs	r3, #0
 80127a2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80127a4:	88bb      	ldrh	r3, [r7, #4]
 80127a6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80127a8:	200c      	movs	r0, #12
 80127aa:	f7ff fbc3 	bl	8011f34 <memp_malloc>
 80127ae:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d109      	bne.n	80127ca <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80127b6:	f7ff ff7b 	bl	80126b0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d002      	beq.n	80127c6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80127c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127c2:	f000 faa9 	bl	8012d18 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80127c6:	2300      	movs	r3, #0
 80127c8:	e0a7      	b.n	801291a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80127ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127cc:	3303      	adds	r3, #3
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	f023 0303 	bic.w	r3, r3, #3
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80127da:	b29b      	uxth	r3, r3
 80127dc:	8b7a      	ldrh	r2, [r7, #26]
 80127de:	4293      	cmp	r3, r2
 80127e0:	bf28      	it	cs
 80127e2:	4613      	movcs	r3, r2
 80127e4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80127e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127e8:	3310      	adds	r3, #16
 80127ea:	693a      	ldr	r2, [r7, #16]
 80127ec:	4413      	add	r3, r2
 80127ee:	3303      	adds	r3, #3
 80127f0:	f023 0303 	bic.w	r3, r3, #3
 80127f4:	4618      	mov	r0, r3
 80127f6:	89f9      	ldrh	r1, [r7, #14]
 80127f8:	8b7a      	ldrh	r2, [r7, #26]
 80127fa:	2300      	movs	r3, #0
 80127fc:	9301      	str	r3, [sp, #4]
 80127fe:	887b      	ldrh	r3, [r7, #2]
 8012800:	9300      	str	r3, [sp, #0]
 8012802:	460b      	mov	r3, r1
 8012804:	4601      	mov	r1, r0
 8012806:	6938      	ldr	r0, [r7, #16]
 8012808:	f7ff ff7c 	bl	8012704 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	685b      	ldr	r3, [r3, #4]
 8012810:	f003 0303 	and.w	r3, r3, #3
 8012814:	2b00      	cmp	r3, #0
 8012816:	d006      	beq.n	8012826 <pbuf_alloc+0xce>
 8012818:	4b42      	ldr	r3, [pc, #264]	; (8012924 <pbuf_alloc+0x1cc>)
 801281a:	f240 1201 	movw	r2, #257	; 0x101
 801281e:	4942      	ldr	r1, [pc, #264]	; (8012928 <pbuf_alloc+0x1d0>)
 8012820:	4842      	ldr	r0, [pc, #264]	; (801292c <pbuf_alloc+0x1d4>)
 8012822:	f009 fcb7 	bl	801c194 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012828:	3303      	adds	r3, #3
 801282a:	f023 0303 	bic.w	r3, r3, #3
 801282e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012832:	d106      	bne.n	8012842 <pbuf_alloc+0xea>
 8012834:	4b3b      	ldr	r3, [pc, #236]	; (8012924 <pbuf_alloc+0x1cc>)
 8012836:	f240 1203 	movw	r2, #259	; 0x103
 801283a:	493d      	ldr	r1, [pc, #244]	; (8012930 <pbuf_alloc+0x1d8>)
 801283c:	483b      	ldr	r0, [pc, #236]	; (801292c <pbuf_alloc+0x1d4>)
 801283e:	f009 fca9 	bl	801c194 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012844:	2b00      	cmp	r3, #0
 8012846:	d102      	bne.n	801284e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	627b      	str	r3, [r7, #36]	; 0x24
 801284c:	e002      	b.n	8012854 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	693a      	ldr	r2, [r7, #16]
 8012852:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012858:	8b7a      	ldrh	r2, [r7, #26]
 801285a:	89fb      	ldrh	r3, [r7, #14]
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012860:	2300      	movs	r3, #0
 8012862:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8012864:	8b7b      	ldrh	r3, [r7, #26]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d19e      	bne.n	80127a8 <pbuf_alloc+0x50>
      break;
 801286a:	e055      	b.n	8012918 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801286c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801286e:	3303      	adds	r3, #3
 8012870:	b29b      	uxth	r3, r3
 8012872:	f023 0303 	bic.w	r3, r3, #3
 8012876:	b29a      	uxth	r2, r3
 8012878:	88bb      	ldrh	r3, [r7, #4]
 801287a:	3303      	adds	r3, #3
 801287c:	b29b      	uxth	r3, r3
 801287e:	f023 0303 	bic.w	r3, r3, #3
 8012882:	b29b      	uxth	r3, r3
 8012884:	4413      	add	r3, r2
 8012886:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012888:	8b3b      	ldrh	r3, [r7, #24]
 801288a:	3310      	adds	r3, #16
 801288c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801288e:	8b3a      	ldrh	r2, [r7, #24]
 8012890:	88bb      	ldrh	r3, [r7, #4]
 8012892:	3303      	adds	r3, #3
 8012894:	f023 0303 	bic.w	r3, r3, #3
 8012898:	429a      	cmp	r2, r3
 801289a:	d306      	bcc.n	80128aa <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801289c:	8afa      	ldrh	r2, [r7, #22]
 801289e:	88bb      	ldrh	r3, [r7, #4]
 80128a0:	3303      	adds	r3, #3
 80128a2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80128a6:	429a      	cmp	r2, r3
 80128a8:	d201      	bcs.n	80128ae <pbuf_alloc+0x156>
        return NULL;
 80128aa:	2300      	movs	r3, #0
 80128ac:	e035      	b.n	801291a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80128ae:	8afb      	ldrh	r3, [r7, #22]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7ff f9bd 	bl	8011c30 <mem_malloc>
 80128b6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80128b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d101      	bne.n	80128c2 <pbuf_alloc+0x16a>
        return NULL;
 80128be:	2300      	movs	r3, #0
 80128c0:	e02b      	b.n	801291a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80128c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128c4:	3310      	adds	r3, #16
 80128c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128c8:	4413      	add	r3, r2
 80128ca:	3303      	adds	r3, #3
 80128cc:	f023 0303 	bic.w	r3, r3, #3
 80128d0:	4618      	mov	r0, r3
 80128d2:	88b9      	ldrh	r1, [r7, #4]
 80128d4:	88ba      	ldrh	r2, [r7, #4]
 80128d6:	2300      	movs	r3, #0
 80128d8:	9301      	str	r3, [sp, #4]
 80128da:	887b      	ldrh	r3, [r7, #2]
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	460b      	mov	r3, r1
 80128e0:	4601      	mov	r1, r0
 80128e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128e4:	f7ff ff0e 	bl	8012704 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80128e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	f003 0303 	and.w	r3, r3, #3
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d010      	beq.n	8012916 <pbuf_alloc+0x1be>
 80128f4:	4b0b      	ldr	r3, [pc, #44]	; (8012924 <pbuf_alloc+0x1cc>)
 80128f6:	f240 1223 	movw	r2, #291	; 0x123
 80128fa:	490e      	ldr	r1, [pc, #56]	; (8012934 <pbuf_alloc+0x1dc>)
 80128fc:	480b      	ldr	r0, [pc, #44]	; (801292c <pbuf_alloc+0x1d4>)
 80128fe:	f009 fc49 	bl	801c194 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012902:	e008      	b.n	8012916 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012904:	4b07      	ldr	r3, [pc, #28]	; (8012924 <pbuf_alloc+0x1cc>)
 8012906:	f240 1227 	movw	r2, #295	; 0x127
 801290a:	490b      	ldr	r1, [pc, #44]	; (8012938 <pbuf_alloc+0x1e0>)
 801290c:	4807      	ldr	r0, [pc, #28]	; (801292c <pbuf_alloc+0x1d4>)
 801290e:	f009 fc41 	bl	801c194 <iprintf>
      return NULL;
 8012912:	2300      	movs	r3, #0
 8012914:	e001      	b.n	801291a <pbuf_alloc+0x1c2>
      break;
 8012916:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801291a:	4618      	mov	r0, r3
 801291c:	3728      	adds	r7, #40	; 0x28
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	0801d98c 	.word	0x0801d98c
 8012928:	0801d9bc 	.word	0x0801d9bc
 801292c:	0801d9ec 	.word	0x0801d9ec
 8012930:	0801da14 	.word	0x0801da14
 8012934:	0801da48 	.word	0x0801da48
 8012938:	0801da74 	.word	0x0801da74

0801293c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b086      	sub	sp, #24
 8012940:	af02      	add	r7, sp, #8
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	460b      	mov	r3, r1
 8012946:	807b      	strh	r3, [r7, #2]
 8012948:	4613      	mov	r3, r2
 801294a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801294c:	883b      	ldrh	r3, [r7, #0]
 801294e:	2b41      	cmp	r3, #65	; 0x41
 8012950:	d009      	beq.n	8012966 <pbuf_alloc_reference+0x2a>
 8012952:	883b      	ldrh	r3, [r7, #0]
 8012954:	2b01      	cmp	r3, #1
 8012956:	d006      	beq.n	8012966 <pbuf_alloc_reference+0x2a>
 8012958:	4b0f      	ldr	r3, [pc, #60]	; (8012998 <pbuf_alloc_reference+0x5c>)
 801295a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801295e:	490f      	ldr	r1, [pc, #60]	; (801299c <pbuf_alloc_reference+0x60>)
 8012960:	480f      	ldr	r0, [pc, #60]	; (80129a0 <pbuf_alloc_reference+0x64>)
 8012962:	f009 fc17 	bl	801c194 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012966:	200b      	movs	r0, #11
 8012968:	f7ff fae4 	bl	8011f34 <memp_malloc>
 801296c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d101      	bne.n	8012978 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012974:	2300      	movs	r3, #0
 8012976:	e00b      	b.n	8012990 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012978:	8879      	ldrh	r1, [r7, #2]
 801297a:	887a      	ldrh	r2, [r7, #2]
 801297c:	2300      	movs	r3, #0
 801297e:	9301      	str	r3, [sp, #4]
 8012980:	883b      	ldrh	r3, [r7, #0]
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	460b      	mov	r3, r1
 8012986:	6879      	ldr	r1, [r7, #4]
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	f7ff febb 	bl	8012704 <pbuf_init_alloced_pbuf>
  return p;
 801298e:	68fb      	ldr	r3, [r7, #12]
}
 8012990:	4618      	mov	r0, r3
 8012992:	3710      	adds	r7, #16
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}
 8012998:	0801d98c 	.word	0x0801d98c
 801299c:	0801da90 	.word	0x0801da90
 80129a0:	0801d9ec 	.word	0x0801d9ec

080129a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b088      	sub	sp, #32
 80129a8:	af02      	add	r7, sp, #8
 80129aa:	607b      	str	r3, [r7, #4]
 80129ac:	4603      	mov	r3, r0
 80129ae:	73fb      	strb	r3, [r7, #15]
 80129b0:	460b      	mov	r3, r1
 80129b2:	81bb      	strh	r3, [r7, #12]
 80129b4:	4613      	mov	r3, r2
 80129b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80129b8:	7bfb      	ldrb	r3, [r7, #15]
 80129ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80129bc:	8a7b      	ldrh	r3, [r7, #18]
 80129be:	3303      	adds	r3, #3
 80129c0:	f023 0203 	bic.w	r2, r3, #3
 80129c4:	89bb      	ldrh	r3, [r7, #12]
 80129c6:	441a      	add	r2, r3
 80129c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d901      	bls.n	80129d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80129ce:	2300      	movs	r3, #0
 80129d0:	e018      	b.n	8012a04 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80129d2:	6a3b      	ldr	r3, [r7, #32]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d007      	beq.n	80129e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80129d8:	8a7b      	ldrh	r3, [r7, #18]
 80129da:	3303      	adds	r3, #3
 80129dc:	f023 0303 	bic.w	r3, r3, #3
 80129e0:	6a3a      	ldr	r2, [r7, #32]
 80129e2:	4413      	add	r3, r2
 80129e4:	617b      	str	r3, [r7, #20]
 80129e6:	e001      	b.n	80129ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80129e8:	2300      	movs	r3, #0
 80129ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	89b9      	ldrh	r1, [r7, #12]
 80129f0:	89ba      	ldrh	r2, [r7, #12]
 80129f2:	2302      	movs	r3, #2
 80129f4:	9301      	str	r3, [sp, #4]
 80129f6:	897b      	ldrh	r3, [r7, #10]
 80129f8:	9300      	str	r3, [sp, #0]
 80129fa:	460b      	mov	r3, r1
 80129fc:	6979      	ldr	r1, [r7, #20]
 80129fe:	f7ff fe81 	bl	8012704 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012a02:	687b      	ldr	r3, [r7, #4]
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3718      	adds	r7, #24
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	460b      	mov	r3, r1
 8012a16:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d106      	bne.n	8012a2c <pbuf_realloc+0x20>
 8012a1e:	4b3a      	ldr	r3, [pc, #232]	; (8012b08 <pbuf_realloc+0xfc>)
 8012a20:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012a24:	4939      	ldr	r1, [pc, #228]	; (8012b0c <pbuf_realloc+0x100>)
 8012a26:	483a      	ldr	r0, [pc, #232]	; (8012b10 <pbuf_realloc+0x104>)
 8012a28:	f009 fbb4 	bl	801c194 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	891b      	ldrh	r3, [r3, #8]
 8012a30:	887a      	ldrh	r2, [r7, #2]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d264      	bcs.n	8012b00 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	891a      	ldrh	r2, [r3, #8]
 8012a3a:	887b      	ldrh	r3, [r7, #2]
 8012a3c:	1ad3      	subs	r3, r2, r3
 8012a3e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012a40:	887b      	ldrh	r3, [r7, #2]
 8012a42:	817b      	strh	r3, [r7, #10]
  q = p;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012a48:	e018      	b.n	8012a7c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	895b      	ldrh	r3, [r3, #10]
 8012a4e:	897a      	ldrh	r2, [r7, #10]
 8012a50:	1ad3      	subs	r3, r2, r3
 8012a52:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	891a      	ldrh	r2, [r3, #8]
 8012a58:	893b      	ldrh	r3, [r7, #8]
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <pbuf_realloc+0x70>
 8012a6e:	4b26      	ldr	r3, [pc, #152]	; (8012b08 <pbuf_realloc+0xfc>)
 8012a70:	f240 12af 	movw	r2, #431	; 0x1af
 8012a74:	4927      	ldr	r1, [pc, #156]	; (8012b14 <pbuf_realloc+0x108>)
 8012a76:	4826      	ldr	r0, [pc, #152]	; (8012b10 <pbuf_realloc+0x104>)
 8012a78:	f009 fb8c 	bl	801c194 <iprintf>
  while (rem_len > q->len) {
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	895b      	ldrh	r3, [r3, #10]
 8012a80:	897a      	ldrh	r2, [r7, #10]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d8e1      	bhi.n	8012a4a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	7b1b      	ldrb	r3, [r3, #12]
 8012a8a:	f003 030f 	and.w	r3, r3, #15
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d122      	bne.n	8012ad8 <pbuf_realloc+0xcc>
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	895b      	ldrh	r3, [r3, #10]
 8012a96:	897a      	ldrh	r2, [r7, #10]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d01d      	beq.n	8012ad8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	7b5b      	ldrb	r3, [r3, #13]
 8012aa0:	f003 0302 	and.w	r3, r3, #2
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d117      	bne.n	8012ad8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	461a      	mov	r2, r3
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	1ad3      	subs	r3, r2, r3
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	897b      	ldrh	r3, [r7, #10]
 8012ab6:	4413      	add	r3, r2
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	4619      	mov	r1, r3
 8012abc:	68f8      	ldr	r0, [r7, #12]
 8012abe:	f7fe ffad 	bl	8011a1c <mem_trim>
 8012ac2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d106      	bne.n	8012ad8 <pbuf_realloc+0xcc>
 8012aca:	4b0f      	ldr	r3, [pc, #60]	; (8012b08 <pbuf_realloc+0xfc>)
 8012acc:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012ad0:	4911      	ldr	r1, [pc, #68]	; (8012b18 <pbuf_realloc+0x10c>)
 8012ad2:	480f      	ldr	r0, [pc, #60]	; (8012b10 <pbuf_realloc+0x104>)
 8012ad4:	f009 fb5e 	bl	801c194 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	897a      	ldrh	r2, [r7, #10]
 8012adc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	895a      	ldrh	r2, [r3, #10]
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d004      	beq.n	8012af8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4618      	mov	r0, r3
 8012af4:	f000 f910 	bl	8012d18 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	2200      	movs	r2, #0
 8012afc:	601a      	str	r2, [r3, #0]
 8012afe:	e000      	b.n	8012b02 <pbuf_realloc+0xf6>
    return;
 8012b00:	bf00      	nop

}
 8012b02:	3710      	adds	r7, #16
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	0801d98c 	.word	0x0801d98c
 8012b0c:	0801daa4 	.word	0x0801daa4
 8012b10:	0801d9ec 	.word	0x0801d9ec
 8012b14:	0801dabc 	.word	0x0801dabc
 8012b18:	0801dad4 	.word	0x0801dad4

08012b1c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b086      	sub	sp, #24
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	4613      	mov	r3, r2
 8012b28:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d106      	bne.n	8012b3e <pbuf_add_header_impl+0x22>
 8012b30:	4b2b      	ldr	r3, [pc, #172]	; (8012be0 <pbuf_add_header_impl+0xc4>)
 8012b32:	f240 12df 	movw	r2, #479	; 0x1df
 8012b36:	492b      	ldr	r1, [pc, #172]	; (8012be4 <pbuf_add_header_impl+0xc8>)
 8012b38:	482b      	ldr	r0, [pc, #172]	; (8012be8 <pbuf_add_header_impl+0xcc>)
 8012b3a:	f009 fb2b 	bl	801c194 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d003      	beq.n	8012b4c <pbuf_add_header_impl+0x30>
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b4a:	d301      	bcc.n	8012b50 <pbuf_add_header_impl+0x34>
    return 1;
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e043      	b.n	8012bd8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d101      	bne.n	8012b5a <pbuf_add_header_impl+0x3e>
    return 0;
 8012b56:	2300      	movs	r3, #0
 8012b58:	e03e      	b.n	8012bd8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	891a      	ldrh	r2, [r3, #8]
 8012b62:	8a7b      	ldrh	r3, [r7, #18]
 8012b64:	4413      	add	r3, r2
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	8a7a      	ldrh	r2, [r7, #18]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d901      	bls.n	8012b72 <pbuf_add_header_impl+0x56>
    return 1;
 8012b6e:	2301      	movs	r3, #1
 8012b70:	e032      	b.n	8012bd8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	7b1b      	ldrb	r3, [r3, #12]
 8012b76:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012b78:	8a3b      	ldrh	r3, [r7, #16]
 8012b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d00c      	beq.n	8012b9c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	685a      	ldr	r2, [r3, #4]
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	425b      	negs	r3, r3
 8012b8a:	4413      	add	r3, r2
 8012b8c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	3310      	adds	r3, #16
 8012b92:	697a      	ldr	r2, [r7, #20]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d20d      	bcs.n	8012bb4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012b98:	2301      	movs	r3, #1
 8012b9a:	e01d      	b.n	8012bd8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012b9c:	79fb      	ldrb	r3, [r7, #7]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d006      	beq.n	8012bb0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	685a      	ldr	r2, [r3, #4]
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	425b      	negs	r3, r3
 8012baa:	4413      	add	r3, r2
 8012bac:	617b      	str	r3, [r7, #20]
 8012bae:	e001      	b.n	8012bb4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	e011      	b.n	8012bd8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	697a      	ldr	r2, [r7, #20]
 8012bb8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	895a      	ldrh	r2, [r3, #10]
 8012bbe:	8a7b      	ldrh	r3, [r7, #18]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	891a      	ldrh	r2, [r3, #8]
 8012bcc:	8a7b      	ldrh	r3, [r7, #18]
 8012bce:	4413      	add	r3, r2
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	811a      	strh	r2, [r3, #8]


  return 0;
 8012bd6:	2300      	movs	r3, #0
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3718      	adds	r7, #24
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	0801d98c 	.word	0x0801d98c
 8012be4:	0801daf0 	.word	0x0801daf0
 8012be8:	0801d9ec 	.word	0x0801d9ec

08012bec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	6839      	ldr	r1, [r7, #0]
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff ff8e 	bl	8012b1c <pbuf_add_header_impl>
 8012c00:	4603      	mov	r3, r0
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3708      	adds	r7, #8
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
	...

08012c0c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b084      	sub	sp, #16
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d106      	bne.n	8012c2a <pbuf_remove_header+0x1e>
 8012c1c:	4b20      	ldr	r3, [pc, #128]	; (8012ca0 <pbuf_remove_header+0x94>)
 8012c1e:	f240 224b 	movw	r2, #587	; 0x24b
 8012c22:	4920      	ldr	r1, [pc, #128]	; (8012ca4 <pbuf_remove_header+0x98>)
 8012c24:	4820      	ldr	r0, [pc, #128]	; (8012ca8 <pbuf_remove_header+0x9c>)
 8012c26:	f009 fab5 	bl	801c194 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d003      	beq.n	8012c38 <pbuf_remove_header+0x2c>
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c36:	d301      	bcc.n	8012c3c <pbuf_remove_header+0x30>
    return 1;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e02c      	b.n	8012c96 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d101      	bne.n	8012c46 <pbuf_remove_header+0x3a>
    return 0;
 8012c42:	2300      	movs	r3, #0
 8012c44:	e027      	b.n	8012c96 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	895b      	ldrh	r3, [r3, #10]
 8012c4e:	89fa      	ldrh	r2, [r7, #14]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d908      	bls.n	8012c66 <pbuf_remove_header+0x5a>
 8012c54:	4b12      	ldr	r3, [pc, #72]	; (8012ca0 <pbuf_remove_header+0x94>)
 8012c56:	f240 2255 	movw	r2, #597	; 0x255
 8012c5a:	4914      	ldr	r1, [pc, #80]	; (8012cac <pbuf_remove_header+0xa0>)
 8012c5c:	4812      	ldr	r0, [pc, #72]	; (8012ca8 <pbuf_remove_header+0x9c>)
 8012c5e:	f009 fa99 	bl	801c194 <iprintf>
 8012c62:	2301      	movs	r3, #1
 8012c64:	e017      	b.n	8012c96 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	685a      	ldr	r2, [r3, #4]
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	441a      	add	r2, r3
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	895a      	ldrh	r2, [r3, #10]
 8012c7c:	89fb      	ldrh	r3, [r7, #14]
 8012c7e:	1ad3      	subs	r3, r2, r3
 8012c80:	b29a      	uxth	r2, r3
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	891a      	ldrh	r2, [r3, #8]
 8012c8a:	89fb      	ldrh	r3, [r7, #14]
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	b29a      	uxth	r2, r3
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012c94:	2300      	movs	r3, #0
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3710      	adds	r7, #16
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	0801d98c 	.word	0x0801d98c
 8012ca4:	0801daf0 	.word	0x0801daf0
 8012ca8:	0801d9ec 	.word	0x0801d9ec
 8012cac:	0801dafc 	.word	0x0801dafc

08012cb0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
 8012cb8:	460b      	mov	r3, r1
 8012cba:	807b      	strh	r3, [r7, #2]
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	da08      	bge.n	8012cda <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ccc:	425b      	negs	r3, r3
 8012cce:	4619      	mov	r1, r3
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff ff9b 	bl	8012c0c <pbuf_remove_header>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	e007      	b.n	8012cea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012cda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012cde:	787a      	ldrb	r2, [r7, #1]
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f7ff ff1a 	bl	8012b1c <pbuf_add_header_impl>
 8012ce8:	4603      	mov	r3, r0
  }
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012cf2:	b580      	push	{r7, lr}
 8012cf4:	b082      	sub	sp, #8
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
 8012cfa:	460b      	mov	r3, r1
 8012cfc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012cfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d02:	2201      	movs	r2, #1
 8012d04:	4619      	mov	r1, r3
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f7ff ffd2 	bl	8012cb0 <pbuf_header_impl>
 8012d0c:	4603      	mov	r3, r0
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3708      	adds	r7, #8
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
	...

08012d18 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b088      	sub	sp, #32
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d10b      	bne.n	8012d3e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d106      	bne.n	8012d3a <pbuf_free+0x22>
 8012d2c:	4b3b      	ldr	r3, [pc, #236]	; (8012e1c <pbuf_free+0x104>)
 8012d2e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012d32:	493b      	ldr	r1, [pc, #236]	; (8012e20 <pbuf_free+0x108>)
 8012d34:	483b      	ldr	r0, [pc, #236]	; (8012e24 <pbuf_free+0x10c>)
 8012d36:	f009 fa2d 	bl	801c194 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	e069      	b.n	8012e12 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012d42:	e062      	b.n	8012e0a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012d44:	f009 f9c2 	bl	801c0cc <sys_arch_protect>
 8012d48:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	7b9b      	ldrb	r3, [r3, #14]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d106      	bne.n	8012d60 <pbuf_free+0x48>
 8012d52:	4b32      	ldr	r3, [pc, #200]	; (8012e1c <pbuf_free+0x104>)
 8012d54:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012d58:	4933      	ldr	r1, [pc, #204]	; (8012e28 <pbuf_free+0x110>)
 8012d5a:	4832      	ldr	r0, [pc, #200]	; (8012e24 <pbuf_free+0x10c>)
 8012d5c:	f009 fa1a 	bl	801c194 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	7b9b      	ldrb	r3, [r3, #14]
 8012d64:	3b01      	subs	r3, #1
 8012d66:	b2da      	uxtb	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	739a      	strb	r2, [r3, #14]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	7b9b      	ldrb	r3, [r3, #14]
 8012d70:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012d72:	69b8      	ldr	r0, [r7, #24]
 8012d74:	f009 f9b8 	bl	801c0e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012d78:	7dfb      	ldrb	r3, [r7, #23]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d143      	bne.n	8012e06 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	7b1b      	ldrb	r3, [r3, #12]
 8012d88:	f003 030f 	and.w	r3, r3, #15
 8012d8c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	7b5b      	ldrb	r3, [r3, #13]
 8012d92:	f003 0302 	and.w	r3, r3, #2
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d011      	beq.n	8012dbe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	691b      	ldr	r3, [r3, #16]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <pbuf_free+0x9c>
 8012da6:	4b1d      	ldr	r3, [pc, #116]	; (8012e1c <pbuf_free+0x104>)
 8012da8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012dac:	491f      	ldr	r1, [pc, #124]	; (8012e2c <pbuf_free+0x114>)
 8012dae:	481d      	ldr	r0, [pc, #116]	; (8012e24 <pbuf_free+0x10c>)
 8012db0:	f009 f9f0 	bl	801c194 <iprintf>
        pc->custom_free_function(p);
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	691b      	ldr	r3, [r3, #16]
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	4798      	blx	r3
 8012dbc:	e01d      	b.n	8012dfa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012dbe:	7bfb      	ldrb	r3, [r7, #15]
 8012dc0:	2b02      	cmp	r3, #2
 8012dc2:	d104      	bne.n	8012dce <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012dc4:	6879      	ldr	r1, [r7, #4]
 8012dc6:	200c      	movs	r0, #12
 8012dc8:	f7ff f906 	bl	8011fd8 <memp_free>
 8012dcc:	e015      	b.n	8012dfa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012dce:	7bfb      	ldrb	r3, [r7, #15]
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d104      	bne.n	8012dde <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012dd4:	6879      	ldr	r1, [r7, #4]
 8012dd6:	200b      	movs	r0, #11
 8012dd8:	f7ff f8fe 	bl	8011fd8 <memp_free>
 8012ddc:	e00d      	b.n	8012dfa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012dde:	7bfb      	ldrb	r3, [r7, #15]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d103      	bne.n	8012dec <pbuf_free+0xd4>
          mem_free(p);
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7fe fd89 	bl	80118fc <mem_free>
 8012dea:	e006      	b.n	8012dfa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012dec:	4b0b      	ldr	r3, [pc, #44]	; (8012e1c <pbuf_free+0x104>)
 8012dee:	f240 320f 	movw	r2, #783	; 0x30f
 8012df2:	490f      	ldr	r1, [pc, #60]	; (8012e30 <pbuf_free+0x118>)
 8012df4:	480b      	ldr	r0, [pc, #44]	; (8012e24 <pbuf_free+0x10c>)
 8012df6:	f009 f9cd 	bl	801c194 <iprintf>
        }
      }
      count++;
 8012dfa:	7ffb      	ldrb	r3, [r7, #31]
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	607b      	str	r3, [r7, #4]
 8012e04:	e001      	b.n	8012e0a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012e06:	2300      	movs	r3, #0
 8012e08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d199      	bne.n	8012d44 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012e10:	7ffb      	ldrb	r3, [r7, #31]
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3720      	adds	r7, #32
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	bf00      	nop
 8012e1c:	0801d98c 	.word	0x0801d98c
 8012e20:	0801daf0 	.word	0x0801daf0
 8012e24:	0801d9ec 	.word	0x0801d9ec
 8012e28:	0801db1c 	.word	0x0801db1c
 8012e2c:	0801db34 	.word	0x0801db34
 8012e30:	0801db58 	.word	0x0801db58

08012e34 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b085      	sub	sp, #20
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012e40:	e005      	b.n	8012e4e <pbuf_clen+0x1a>
    ++len;
 8012e42:	89fb      	ldrh	r3, [r7, #14]
 8012e44:	3301      	adds	r3, #1
 8012e46:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d1f6      	bne.n	8012e42 <pbuf_clen+0xe>
  }
  return len;
 8012e54:	89fb      	ldrh	r3, [r7, #14]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3714      	adds	r7, #20
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr
	...

08012e64 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d016      	beq.n	8012ea0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012e72:	f009 f92b 	bl	801c0cc <sys_arch_protect>
 8012e76:	60f8      	str	r0, [r7, #12]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	7b9b      	ldrb	r3, [r3, #14]
 8012e7c:	3301      	adds	r3, #1
 8012e7e:	b2da      	uxtb	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	739a      	strb	r2, [r3, #14]
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f009 f92f 	bl	801c0e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	7b9b      	ldrb	r3, [r3, #14]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d106      	bne.n	8012ea0 <pbuf_ref+0x3c>
 8012e92:	4b05      	ldr	r3, [pc, #20]	; (8012ea8 <pbuf_ref+0x44>)
 8012e94:	f240 3242 	movw	r2, #834	; 0x342
 8012e98:	4904      	ldr	r1, [pc, #16]	; (8012eac <pbuf_ref+0x48>)
 8012e9a:	4805      	ldr	r0, [pc, #20]	; (8012eb0 <pbuf_ref+0x4c>)
 8012e9c:	f009 f97a 	bl	801c194 <iprintf>
  }
}
 8012ea0:	bf00      	nop
 8012ea2:	3710      	adds	r7, #16
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	0801d98c 	.word	0x0801d98c
 8012eac:	0801db6c 	.word	0x0801db6c
 8012eb0:	0801d9ec 	.word	0x0801d9ec

08012eb4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d002      	beq.n	8012eca <pbuf_cat+0x16>
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d107      	bne.n	8012eda <pbuf_cat+0x26>
 8012eca:	4b20      	ldr	r3, [pc, #128]	; (8012f4c <pbuf_cat+0x98>)
 8012ecc:	f240 325a 	movw	r2, #858	; 0x35a
 8012ed0:	491f      	ldr	r1, [pc, #124]	; (8012f50 <pbuf_cat+0x9c>)
 8012ed2:	4820      	ldr	r0, [pc, #128]	; (8012f54 <pbuf_cat+0xa0>)
 8012ed4:	f009 f95e 	bl	801c194 <iprintf>
 8012ed8:	e034      	b.n	8012f44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	60fb      	str	r3, [r7, #12]
 8012ede:	e00a      	b.n	8012ef6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	891a      	ldrh	r2, [r3, #8]
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	891b      	ldrh	r3, [r3, #8]
 8012ee8:	4413      	add	r3, r2
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	60fb      	str	r3, [r7, #12]
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d1f0      	bne.n	8012ee0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	891a      	ldrh	r2, [r3, #8]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	895b      	ldrh	r3, [r3, #10]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d006      	beq.n	8012f18 <pbuf_cat+0x64>
 8012f0a:	4b10      	ldr	r3, [pc, #64]	; (8012f4c <pbuf_cat+0x98>)
 8012f0c:	f240 3262 	movw	r2, #866	; 0x362
 8012f10:	4911      	ldr	r1, [pc, #68]	; (8012f58 <pbuf_cat+0xa4>)
 8012f12:	4810      	ldr	r0, [pc, #64]	; (8012f54 <pbuf_cat+0xa0>)
 8012f14:	f009 f93e 	bl	801c194 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d006      	beq.n	8012f2e <pbuf_cat+0x7a>
 8012f20:	4b0a      	ldr	r3, [pc, #40]	; (8012f4c <pbuf_cat+0x98>)
 8012f22:	f240 3263 	movw	r2, #867	; 0x363
 8012f26:	490d      	ldr	r1, [pc, #52]	; (8012f5c <pbuf_cat+0xa8>)
 8012f28:	480a      	ldr	r0, [pc, #40]	; (8012f54 <pbuf_cat+0xa0>)
 8012f2a:	f009 f933 	bl	801c194 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	891a      	ldrh	r2, [r3, #8]
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	891b      	ldrh	r3, [r3, #8]
 8012f36:	4413      	add	r3, r2
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	683a      	ldr	r2, [r7, #0]
 8012f42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	0801d98c 	.word	0x0801d98c
 8012f50:	0801db80 	.word	0x0801db80
 8012f54:	0801d9ec 	.word	0x0801d9ec
 8012f58:	0801dbb8 	.word	0x0801dbb8
 8012f5c:	0801dbe8 	.word	0x0801dbe8

08012f60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b086      	sub	sp, #24
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	617b      	str	r3, [r7, #20]
 8012f6e:	2300      	movs	r3, #0
 8012f70:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d008      	beq.n	8012f8a <pbuf_copy+0x2a>
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d005      	beq.n	8012f8a <pbuf_copy+0x2a>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	891a      	ldrh	r2, [r3, #8]
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	891b      	ldrh	r3, [r3, #8]
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d209      	bcs.n	8012f9e <pbuf_copy+0x3e>
 8012f8a:	4b57      	ldr	r3, [pc, #348]	; (80130e8 <pbuf_copy+0x188>)
 8012f8c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8012f90:	4956      	ldr	r1, [pc, #344]	; (80130ec <pbuf_copy+0x18c>)
 8012f92:	4857      	ldr	r0, [pc, #348]	; (80130f0 <pbuf_copy+0x190>)
 8012f94:	f009 f8fe 	bl	801c194 <iprintf>
 8012f98:	f06f 030f 	mvn.w	r3, #15
 8012f9c:	e09f      	b.n	80130de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	895b      	ldrh	r3, [r3, #10]
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	1ad2      	subs	r2, r2, r3
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	895b      	ldrh	r3, [r3, #10]
 8012fac:	4619      	mov	r1, r3
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	1acb      	subs	r3, r1, r3
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d306      	bcc.n	8012fc4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	895b      	ldrh	r3, [r3, #10]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	1ad3      	subs	r3, r2, r3
 8012fc0:	60fb      	str	r3, [r7, #12]
 8012fc2:	e005      	b.n	8012fd0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	895b      	ldrh	r3, [r3, #10]
 8012fc8:	461a      	mov	r2, r3
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	1ad3      	subs	r3, r2, r3
 8012fce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	685a      	ldr	r2, [r3, #4]
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	18d0      	adds	r0, r2, r3
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	685a      	ldr	r2, [r3, #4]
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	4413      	add	r3, r2
 8012fe0:	68fa      	ldr	r2, [r7, #12]
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	f009 f8c3 	bl	801c16e <memcpy>
    offset_to += len;
 8012fe8:	697a      	ldr	r2, [r7, #20]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	4413      	add	r3, r2
 8012fee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012ff0:	693a      	ldr	r2, [r7, #16]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	895b      	ldrh	r3, [r3, #10]
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	697b      	ldr	r3, [r7, #20]
 8013000:	4293      	cmp	r3, r2
 8013002:	d906      	bls.n	8013012 <pbuf_copy+0xb2>
 8013004:	4b38      	ldr	r3, [pc, #224]	; (80130e8 <pbuf_copy+0x188>)
 8013006:	f240 32d9 	movw	r2, #985	; 0x3d9
 801300a:	493a      	ldr	r1, [pc, #232]	; (80130f4 <pbuf_copy+0x194>)
 801300c:	4838      	ldr	r0, [pc, #224]	; (80130f0 <pbuf_copy+0x190>)
 801300e:	f009 f8c1 	bl	801c194 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	895b      	ldrh	r3, [r3, #10]
 8013016:	461a      	mov	r2, r3
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	4293      	cmp	r3, r2
 801301c:	d906      	bls.n	801302c <pbuf_copy+0xcc>
 801301e:	4b32      	ldr	r3, [pc, #200]	; (80130e8 <pbuf_copy+0x188>)
 8013020:	f240 32da 	movw	r2, #986	; 0x3da
 8013024:	4934      	ldr	r1, [pc, #208]	; (80130f8 <pbuf_copy+0x198>)
 8013026:	4832      	ldr	r0, [pc, #200]	; (80130f0 <pbuf_copy+0x190>)
 8013028:	f009 f8b4 	bl	801c194 <iprintf>
    if (offset_from >= p_from->len) {
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	895b      	ldrh	r3, [r3, #10]
 8013030:	461a      	mov	r2, r3
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	4293      	cmp	r3, r2
 8013036:	d304      	bcc.n	8013042 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013038:	2300      	movs	r3, #0
 801303a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	895b      	ldrh	r3, [r3, #10]
 8013046:	461a      	mov	r2, r3
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	4293      	cmp	r3, r2
 801304c:	d114      	bne.n	8013078 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801304e:	2300      	movs	r3, #0
 8013050:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d10c      	bne.n	8013078 <pbuf_copy+0x118>
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d009      	beq.n	8013078 <pbuf_copy+0x118>
 8013064:	4b20      	ldr	r3, [pc, #128]	; (80130e8 <pbuf_copy+0x188>)
 8013066:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801306a:	4924      	ldr	r1, [pc, #144]	; (80130fc <pbuf_copy+0x19c>)
 801306c:	4820      	ldr	r0, [pc, #128]	; (80130f0 <pbuf_copy+0x190>)
 801306e:	f009 f891 	bl	801c194 <iprintf>
 8013072:	f06f 030f 	mvn.w	r3, #15
 8013076:	e032      	b.n	80130de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d013      	beq.n	80130a6 <pbuf_copy+0x146>
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	895a      	ldrh	r2, [r3, #10]
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	891b      	ldrh	r3, [r3, #8]
 8013086:	429a      	cmp	r2, r3
 8013088:	d10d      	bne.n	80130a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d009      	beq.n	80130a6 <pbuf_copy+0x146>
 8013092:	4b15      	ldr	r3, [pc, #84]	; (80130e8 <pbuf_copy+0x188>)
 8013094:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8013098:	4919      	ldr	r1, [pc, #100]	; (8013100 <pbuf_copy+0x1a0>)
 801309a:	4815      	ldr	r0, [pc, #84]	; (80130f0 <pbuf_copy+0x190>)
 801309c:	f009 f87a 	bl	801c194 <iprintf>
 80130a0:	f06f 0305 	mvn.w	r3, #5
 80130a4:	e01b      	b.n	80130de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d013      	beq.n	80130d4 <pbuf_copy+0x174>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	895a      	ldrh	r2, [r3, #10]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	891b      	ldrh	r3, [r3, #8]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d10d      	bne.n	80130d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d009      	beq.n	80130d4 <pbuf_copy+0x174>
 80130c0:	4b09      	ldr	r3, [pc, #36]	; (80130e8 <pbuf_copy+0x188>)
 80130c2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80130c6:	490e      	ldr	r1, [pc, #56]	; (8013100 <pbuf_copy+0x1a0>)
 80130c8:	4809      	ldr	r0, [pc, #36]	; (80130f0 <pbuf_copy+0x190>)
 80130ca:	f009 f863 	bl	801c194 <iprintf>
 80130ce:	f06f 0305 	mvn.w	r3, #5
 80130d2:	e004      	b.n	80130de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	f47f af61 	bne.w	8012f9e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80130dc:	2300      	movs	r3, #0
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3718      	adds	r7, #24
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
 80130e6:	bf00      	nop
 80130e8:	0801d98c 	.word	0x0801d98c
 80130ec:	0801dc34 	.word	0x0801dc34
 80130f0:	0801d9ec 	.word	0x0801d9ec
 80130f4:	0801dc64 	.word	0x0801dc64
 80130f8:	0801dc7c 	.word	0x0801dc7c
 80130fc:	0801dc98 	.word	0x0801dc98
 8013100:	0801dca8 	.word	0x0801dca8

08013104 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b088      	sub	sp, #32
 8013108:	af00      	add	r7, sp, #0
 801310a:	60f8      	str	r0, [r7, #12]
 801310c:	60b9      	str	r1, [r7, #8]
 801310e:	4611      	mov	r1, r2
 8013110:	461a      	mov	r2, r3
 8013112:	460b      	mov	r3, r1
 8013114:	80fb      	strh	r3, [r7, #6]
 8013116:	4613      	mov	r3, r2
 8013118:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801311a:	2300      	movs	r3, #0
 801311c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801311e:	2300      	movs	r3, #0
 8013120:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d108      	bne.n	801313a <pbuf_copy_partial+0x36>
 8013128:	4b2b      	ldr	r3, [pc, #172]	; (80131d8 <pbuf_copy_partial+0xd4>)
 801312a:	f240 420a 	movw	r2, #1034	; 0x40a
 801312e:	492b      	ldr	r1, [pc, #172]	; (80131dc <pbuf_copy_partial+0xd8>)
 8013130:	482b      	ldr	r0, [pc, #172]	; (80131e0 <pbuf_copy_partial+0xdc>)
 8013132:	f009 f82f 	bl	801c194 <iprintf>
 8013136:	2300      	movs	r3, #0
 8013138:	e04a      	b.n	80131d0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d108      	bne.n	8013152 <pbuf_copy_partial+0x4e>
 8013140:	4b25      	ldr	r3, [pc, #148]	; (80131d8 <pbuf_copy_partial+0xd4>)
 8013142:	f240 420b 	movw	r2, #1035	; 0x40b
 8013146:	4927      	ldr	r1, [pc, #156]	; (80131e4 <pbuf_copy_partial+0xe0>)
 8013148:	4825      	ldr	r0, [pc, #148]	; (80131e0 <pbuf_copy_partial+0xdc>)
 801314a:	f009 f823 	bl	801c194 <iprintf>
 801314e:	2300      	movs	r3, #0
 8013150:	e03e      	b.n	80131d0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	61fb      	str	r3, [r7, #28]
 8013156:	e034      	b.n	80131c2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013158:	88bb      	ldrh	r3, [r7, #4]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d00a      	beq.n	8013174 <pbuf_copy_partial+0x70>
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	895b      	ldrh	r3, [r3, #10]
 8013162:	88ba      	ldrh	r2, [r7, #4]
 8013164:	429a      	cmp	r2, r3
 8013166:	d305      	bcc.n	8013174 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013168:	69fb      	ldr	r3, [r7, #28]
 801316a:	895b      	ldrh	r3, [r3, #10]
 801316c:	88ba      	ldrh	r2, [r7, #4]
 801316e:	1ad3      	subs	r3, r2, r3
 8013170:	80bb      	strh	r3, [r7, #4]
 8013172:	e023      	b.n	80131bc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013174:	69fb      	ldr	r3, [r7, #28]
 8013176:	895a      	ldrh	r2, [r3, #10]
 8013178:	88bb      	ldrh	r3, [r7, #4]
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801317e:	8b3a      	ldrh	r2, [r7, #24]
 8013180:	88fb      	ldrh	r3, [r7, #6]
 8013182:	429a      	cmp	r2, r3
 8013184:	d901      	bls.n	801318a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013186:	88fb      	ldrh	r3, [r7, #6]
 8013188:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801318a:	8b7b      	ldrh	r3, [r7, #26]
 801318c:	68ba      	ldr	r2, [r7, #8]
 801318e:	18d0      	adds	r0, r2, r3
 8013190:	69fb      	ldr	r3, [r7, #28]
 8013192:	685a      	ldr	r2, [r3, #4]
 8013194:	88bb      	ldrh	r3, [r7, #4]
 8013196:	4413      	add	r3, r2
 8013198:	8b3a      	ldrh	r2, [r7, #24]
 801319a:	4619      	mov	r1, r3
 801319c:	f008 ffe7 	bl	801c16e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80131a0:	8afa      	ldrh	r2, [r7, #22]
 80131a2:	8b3b      	ldrh	r3, [r7, #24]
 80131a4:	4413      	add	r3, r2
 80131a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80131a8:	8b7a      	ldrh	r2, [r7, #26]
 80131aa:	8b3b      	ldrh	r3, [r7, #24]
 80131ac:	4413      	add	r3, r2
 80131ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80131b0:	88fa      	ldrh	r2, [r7, #6]
 80131b2:	8b3b      	ldrh	r3, [r7, #24]
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80131b8:	2300      	movs	r3, #0
 80131ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	61fb      	str	r3, [r7, #28]
 80131c2:	88fb      	ldrh	r3, [r7, #6]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d002      	beq.n	80131ce <pbuf_copy_partial+0xca>
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d1c4      	bne.n	8013158 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80131ce:	8afb      	ldrh	r3, [r7, #22]
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3720      	adds	r7, #32
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	0801d98c 	.word	0x0801d98c
 80131dc:	0801dcd4 	.word	0x0801dcd4
 80131e0:	0801d9ec 	.word	0x0801d9ec
 80131e4:	0801dcf4 	.word	0x0801dcf4

080131e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b084      	sub	sp, #16
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	4603      	mov	r3, r0
 80131f0:	603a      	str	r2, [r7, #0]
 80131f2:	71fb      	strb	r3, [r7, #7]
 80131f4:	460b      	mov	r3, r1
 80131f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	8919      	ldrh	r1, [r3, #8]
 80131fc:	88ba      	ldrh	r2, [r7, #4]
 80131fe:	79fb      	ldrb	r3, [r7, #7]
 8013200:	4618      	mov	r0, r3
 8013202:	f7ff faa9 	bl	8012758 <pbuf_alloc>
 8013206:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d101      	bne.n	8013212 <pbuf_clone+0x2a>
    return NULL;
 801320e:	2300      	movs	r3, #0
 8013210:	e011      	b.n	8013236 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013212:	6839      	ldr	r1, [r7, #0]
 8013214:	68f8      	ldr	r0, [r7, #12]
 8013216:	f7ff fea3 	bl	8012f60 <pbuf_copy>
 801321a:	4603      	mov	r3, r0
 801321c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801321e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d006      	beq.n	8013234 <pbuf_clone+0x4c>
 8013226:	4b06      	ldr	r3, [pc, #24]	; (8013240 <pbuf_clone+0x58>)
 8013228:	f240 5224 	movw	r2, #1316	; 0x524
 801322c:	4905      	ldr	r1, [pc, #20]	; (8013244 <pbuf_clone+0x5c>)
 801322e:	4806      	ldr	r0, [pc, #24]	; (8013248 <pbuf_clone+0x60>)
 8013230:	f008 ffb0 	bl	801c194 <iprintf>
  return q;
 8013234:	68fb      	ldr	r3, [r7, #12]
}
 8013236:	4618      	mov	r0, r3
 8013238:	3710      	adds	r7, #16
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	0801d98c 	.word	0x0801d98c
 8013244:	0801de00 	.word	0x0801de00
 8013248:	0801d9ec 	.word	0x0801d9ec

0801324c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013250:	f008 ffb8 	bl	801c1c4 <rand>
 8013254:	4603      	mov	r3, r0
 8013256:	b29b      	uxth	r3, r3
 8013258:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801325c:	b29b      	uxth	r3, r3
 801325e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013262:	b29a      	uxth	r2, r3
 8013264:	4b01      	ldr	r3, [pc, #4]	; (801326c <tcp_init+0x20>)
 8013266:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013268:	bf00      	nop
 801326a:	bd80      	pop	{r7, pc}
 801326c:	20000050 	.word	0x20000050

08013270 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	7d1b      	ldrb	r3, [r3, #20]
 801327c:	2b01      	cmp	r3, #1
 801327e:	d105      	bne.n	801328c <tcp_free+0x1c>
 8013280:	4b06      	ldr	r3, [pc, #24]	; (801329c <tcp_free+0x2c>)
 8013282:	22d4      	movs	r2, #212	; 0xd4
 8013284:	4906      	ldr	r1, [pc, #24]	; (80132a0 <tcp_free+0x30>)
 8013286:	4807      	ldr	r0, [pc, #28]	; (80132a4 <tcp_free+0x34>)
 8013288:	f008 ff84 	bl	801c194 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801328c:	6879      	ldr	r1, [r7, #4]
 801328e:	2001      	movs	r0, #1
 8013290:	f7fe fea2 	bl	8011fd8 <memp_free>
}
 8013294:	bf00      	nop
 8013296:	3708      	adds	r7, #8
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	0801de8c 	.word	0x0801de8c
 80132a0:	0801debc 	.word	0x0801debc
 80132a4:	0801ded0 	.word	0x0801ded0

080132a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b082      	sub	sp, #8
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	7d1b      	ldrb	r3, [r3, #20]
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d105      	bne.n	80132c4 <tcp_free_listen+0x1c>
 80132b8:	4b06      	ldr	r3, [pc, #24]	; (80132d4 <tcp_free_listen+0x2c>)
 80132ba:	22df      	movs	r2, #223	; 0xdf
 80132bc:	4906      	ldr	r1, [pc, #24]	; (80132d8 <tcp_free_listen+0x30>)
 80132be:	4807      	ldr	r0, [pc, #28]	; (80132dc <tcp_free_listen+0x34>)
 80132c0:	f008 ff68 	bl	801c194 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80132c4:	6879      	ldr	r1, [r7, #4]
 80132c6:	2002      	movs	r0, #2
 80132c8:	f7fe fe86 	bl	8011fd8 <memp_free>
}
 80132cc:	bf00      	nop
 80132ce:	3708      	adds	r7, #8
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	0801de8c 	.word	0x0801de8c
 80132d8:	0801def8 	.word	0x0801def8
 80132dc:	0801ded0 	.word	0x0801ded0

080132e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80132e4:	f001 f852 	bl	801438c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80132e8:	4b07      	ldr	r3, [pc, #28]	; (8013308 <tcp_tmr+0x28>)
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	3301      	adds	r3, #1
 80132ee:	b2da      	uxtb	r2, r3
 80132f0:	4b05      	ldr	r3, [pc, #20]	; (8013308 <tcp_tmr+0x28>)
 80132f2:	701a      	strb	r2, [r3, #0]
 80132f4:	4b04      	ldr	r3, [pc, #16]	; (8013308 <tcp_tmr+0x28>)
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	f003 0301 	and.w	r3, r3, #1
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d001      	beq.n	8013304 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013300:	f000 fd06 	bl	8013d10 <tcp_slowtmr>
  }
}
 8013304:	bf00      	nop
 8013306:	bd80      	pop	{r7, pc}
 8013308:	20004519 	.word	0x20004519

0801330c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b084      	sub	sp, #16
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d105      	bne.n	8013328 <tcp_remove_listener+0x1c>
 801331c:	4b0d      	ldr	r3, [pc, #52]	; (8013354 <tcp_remove_listener+0x48>)
 801331e:	22ff      	movs	r2, #255	; 0xff
 8013320:	490d      	ldr	r1, [pc, #52]	; (8013358 <tcp_remove_listener+0x4c>)
 8013322:	480e      	ldr	r0, [pc, #56]	; (801335c <tcp_remove_listener+0x50>)
 8013324:	f008 ff36 	bl	801c194 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	60fb      	str	r3, [r7, #12]
 801332c:	e00a      	b.n	8013344 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013332:	683a      	ldr	r2, [r7, #0]
 8013334:	429a      	cmp	r2, r3
 8013336:	d102      	bne.n	801333e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	2200      	movs	r2, #0
 801333c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	68db      	ldr	r3, [r3, #12]
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d1f1      	bne.n	801332e <tcp_remove_listener+0x22>
    }
  }
}
 801334a:	bf00      	nop
 801334c:	3710      	adds	r7, #16
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	0801de8c 	.word	0x0801de8c
 8013358:	0801df14 	.word	0x0801df14
 801335c:	0801ded0 	.word	0x0801ded0

08013360 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d106      	bne.n	801337c <tcp_listen_closed+0x1c>
 801336e:	4b14      	ldr	r3, [pc, #80]	; (80133c0 <tcp_listen_closed+0x60>)
 8013370:	f240 1211 	movw	r2, #273	; 0x111
 8013374:	4913      	ldr	r1, [pc, #76]	; (80133c4 <tcp_listen_closed+0x64>)
 8013376:	4814      	ldr	r0, [pc, #80]	; (80133c8 <tcp_listen_closed+0x68>)
 8013378:	f008 ff0c 	bl	801c194 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	7d1b      	ldrb	r3, [r3, #20]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d006      	beq.n	8013392 <tcp_listen_closed+0x32>
 8013384:	4b0e      	ldr	r3, [pc, #56]	; (80133c0 <tcp_listen_closed+0x60>)
 8013386:	f44f 7289 	mov.w	r2, #274	; 0x112
 801338a:	4910      	ldr	r1, [pc, #64]	; (80133cc <tcp_listen_closed+0x6c>)
 801338c:	480e      	ldr	r0, [pc, #56]	; (80133c8 <tcp_listen_closed+0x68>)
 801338e:	f008 ff01 	bl	801c194 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013392:	2301      	movs	r3, #1
 8013394:	60fb      	str	r3, [r7, #12]
 8013396:	e00b      	b.n	80133b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013398:	4a0d      	ldr	r2, [pc, #52]	; (80133d0 <tcp_listen_closed+0x70>)
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	6879      	ldr	r1, [r7, #4]
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ff ffb1 	bl	801330c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	3301      	adds	r3, #1
 80133ae:	60fb      	str	r3, [r7, #12]
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2b03      	cmp	r3, #3
 80133b4:	d9f0      	bls.n	8013398 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80133b6:	bf00      	nop
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	0801de8c 	.word	0x0801de8c
 80133c4:	0801df3c 	.word	0x0801df3c
 80133c8:	0801ded0 	.word	0x0801ded0
 80133cc:	0801df48 	.word	0x0801df48
 80133d0:	080309e0 	.word	0x080309e0

080133d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80133d4:	b5b0      	push	{r4, r5, r7, lr}
 80133d6:	b088      	sub	sp, #32
 80133d8:	af04      	add	r7, sp, #16
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	460b      	mov	r3, r1
 80133de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d106      	bne.n	80133f4 <tcp_close_shutdown+0x20>
 80133e6:	4b61      	ldr	r3, [pc, #388]	; (801356c <tcp_close_shutdown+0x198>)
 80133e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80133ec:	4960      	ldr	r1, [pc, #384]	; (8013570 <tcp_close_shutdown+0x19c>)
 80133ee:	4861      	ldr	r0, [pc, #388]	; (8013574 <tcp_close_shutdown+0x1a0>)
 80133f0:	f008 fed0 	bl	801c194 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80133f4:	78fb      	ldrb	r3, [r7, #3]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d066      	beq.n	80134c8 <tcp_close_shutdown+0xf4>
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	7d1b      	ldrb	r3, [r3, #20]
 80133fe:	2b04      	cmp	r3, #4
 8013400:	d003      	beq.n	801340a <tcp_close_shutdown+0x36>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	7d1b      	ldrb	r3, [r3, #20]
 8013406:	2b07      	cmp	r3, #7
 8013408:	d15e      	bne.n	80134c8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801340e:	2b00      	cmp	r3, #0
 8013410:	d104      	bne.n	801341c <tcp_close_shutdown+0x48>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013416:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801341a:	d055      	beq.n	80134c8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	8b5b      	ldrh	r3, [r3, #26]
 8013420:	f003 0310 	and.w	r3, r3, #16
 8013424:	2b00      	cmp	r3, #0
 8013426:	d106      	bne.n	8013436 <tcp_close_shutdown+0x62>
 8013428:	4b50      	ldr	r3, [pc, #320]	; (801356c <tcp_close_shutdown+0x198>)
 801342a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801342e:	4952      	ldr	r1, [pc, #328]	; (8013578 <tcp_close_shutdown+0x1a4>)
 8013430:	4850      	ldr	r0, [pc, #320]	; (8013574 <tcp_close_shutdown+0x1a0>)
 8013432:	f008 feaf 	bl	801c194 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801343e:	687d      	ldr	r5, [r7, #4]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	3304      	adds	r3, #4
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	8ad2      	ldrh	r2, [r2, #22]
 8013448:	6879      	ldr	r1, [r7, #4]
 801344a:	8b09      	ldrh	r1, [r1, #24]
 801344c:	9102      	str	r1, [sp, #8]
 801344e:	9201      	str	r2, [sp, #4]
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	462b      	mov	r3, r5
 8013454:	4622      	mov	r2, r4
 8013456:	4601      	mov	r1, r0
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f005 fd91 	bl	8018f80 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f001 fb60 	bl	8014b24 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013464:	4b45      	ldr	r3, [pc, #276]	; (801357c <tcp_close_shutdown+0x1a8>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	429a      	cmp	r2, r3
 801346c:	d105      	bne.n	801347a <tcp_close_shutdown+0xa6>
 801346e:	4b43      	ldr	r3, [pc, #268]	; (801357c <tcp_close_shutdown+0x1a8>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	68db      	ldr	r3, [r3, #12]
 8013474:	4a41      	ldr	r2, [pc, #260]	; (801357c <tcp_close_shutdown+0x1a8>)
 8013476:	6013      	str	r3, [r2, #0]
 8013478:	e013      	b.n	80134a2 <tcp_close_shutdown+0xce>
 801347a:	4b40      	ldr	r3, [pc, #256]	; (801357c <tcp_close_shutdown+0x1a8>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	e00c      	b.n	801349c <tcp_close_shutdown+0xc8>
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	429a      	cmp	r2, r3
 801348a:	d104      	bne.n	8013496 <tcp_close_shutdown+0xc2>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	68da      	ldr	r2, [r3, #12]
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	60da      	str	r2, [r3, #12]
 8013494:	e005      	b.n	80134a2 <tcp_close_shutdown+0xce>
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	68db      	ldr	r3, [r3, #12]
 801349a:	60fb      	str	r3, [r7, #12]
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d1ef      	bne.n	8013482 <tcp_close_shutdown+0xae>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2200      	movs	r2, #0
 80134a6:	60da      	str	r2, [r3, #12]
 80134a8:	4b35      	ldr	r3, [pc, #212]	; (8013580 <tcp_close_shutdown+0x1ac>)
 80134aa:	2201      	movs	r2, #1
 80134ac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80134ae:	4b35      	ldr	r3, [pc, #212]	; (8013584 <tcp_close_shutdown+0x1b0>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d102      	bne.n	80134be <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80134b8:	f003 fff2 	bl	80174a0 <tcp_trigger_input_pcb_close>
 80134bc:	e002      	b.n	80134c4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f7ff fed6 	bl	8013270 <tcp_free>
      }
      return ERR_OK;
 80134c4:	2300      	movs	r3, #0
 80134c6:	e04d      	b.n	8013564 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	7d1b      	ldrb	r3, [r3, #20]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d02d      	beq.n	801352c <tcp_close_shutdown+0x158>
 80134d0:	2b02      	cmp	r3, #2
 80134d2:	d036      	beq.n	8013542 <tcp_close_shutdown+0x16e>
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d13f      	bne.n	8013558 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	8adb      	ldrh	r3, [r3, #22]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d021      	beq.n	8013524 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80134e0:	4b29      	ldr	r3, [pc, #164]	; (8013588 <tcp_close_shutdown+0x1b4>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	687a      	ldr	r2, [r7, #4]
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d105      	bne.n	80134f6 <tcp_close_shutdown+0x122>
 80134ea:	4b27      	ldr	r3, [pc, #156]	; (8013588 <tcp_close_shutdown+0x1b4>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	68db      	ldr	r3, [r3, #12]
 80134f0:	4a25      	ldr	r2, [pc, #148]	; (8013588 <tcp_close_shutdown+0x1b4>)
 80134f2:	6013      	str	r3, [r2, #0]
 80134f4:	e013      	b.n	801351e <tcp_close_shutdown+0x14a>
 80134f6:	4b24      	ldr	r3, [pc, #144]	; (8013588 <tcp_close_shutdown+0x1b4>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	60bb      	str	r3, [r7, #8]
 80134fc:	e00c      	b.n	8013518 <tcp_close_shutdown+0x144>
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	429a      	cmp	r2, r3
 8013506:	d104      	bne.n	8013512 <tcp_close_shutdown+0x13e>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	68da      	ldr	r2, [r3, #12]
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	60da      	str	r2, [r3, #12]
 8013510:	e005      	b.n	801351e <tcp_close_shutdown+0x14a>
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	68db      	ldr	r3, [r3, #12]
 8013516:	60bb      	str	r3, [r7, #8]
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d1ef      	bne.n	80134fe <tcp_close_shutdown+0x12a>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2200      	movs	r2, #0
 8013522:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7ff fea3 	bl	8013270 <tcp_free>
      break;
 801352a:	e01a      	b.n	8013562 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7ff ff17 	bl	8013360 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013532:	6879      	ldr	r1, [r7, #4]
 8013534:	4815      	ldr	r0, [pc, #84]	; (801358c <tcp_close_shutdown+0x1b8>)
 8013536:	f001 fb45 	bl	8014bc4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f7ff feb4 	bl	80132a8 <tcp_free_listen>
      break;
 8013540:	e00f      	b.n	8013562 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013542:	6879      	ldr	r1, [r7, #4]
 8013544:	480d      	ldr	r0, [pc, #52]	; (801357c <tcp_close_shutdown+0x1a8>)
 8013546:	f001 fb3d 	bl	8014bc4 <tcp_pcb_remove>
 801354a:	4b0d      	ldr	r3, [pc, #52]	; (8013580 <tcp_close_shutdown+0x1ac>)
 801354c:	2201      	movs	r2, #1
 801354e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ff fe8d 	bl	8013270 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013556:	e004      	b.n	8013562 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f000 f819 	bl	8013590 <tcp_close_shutdown_fin>
 801355e:	4603      	mov	r3, r0
 8013560:	e000      	b.n	8013564 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8013562:	2300      	movs	r3, #0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3710      	adds	r7, #16
 8013568:	46bd      	mov	sp, r7
 801356a:	bdb0      	pop	{r4, r5, r7, pc}
 801356c:	0801de8c 	.word	0x0801de8c
 8013570:	0801df60 	.word	0x0801df60
 8013574:	0801ded0 	.word	0x0801ded0
 8013578:	0801df80 	.word	0x0801df80
 801357c:	2000b340 	.word	0x2000b340
 8013580:	2000b33c 	.word	0x2000b33c
 8013584:	2000b354 	.word	0x2000b354
 8013588:	2000b34c 	.word	0x2000b34c
 801358c:	2000b348 	.word	0x2000b348

08013590 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b084      	sub	sp, #16
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d106      	bne.n	80135ac <tcp_close_shutdown_fin+0x1c>
 801359e:	4b2c      	ldr	r3, [pc, #176]	; (8013650 <tcp_close_shutdown_fin+0xc0>)
 80135a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80135a4:	492b      	ldr	r1, [pc, #172]	; (8013654 <tcp_close_shutdown_fin+0xc4>)
 80135a6:	482c      	ldr	r0, [pc, #176]	; (8013658 <tcp_close_shutdown_fin+0xc8>)
 80135a8:	f008 fdf4 	bl	801c194 <iprintf>

  switch (pcb->state) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	7d1b      	ldrb	r3, [r3, #20]
 80135b0:	2b04      	cmp	r3, #4
 80135b2:	d010      	beq.n	80135d6 <tcp_close_shutdown_fin+0x46>
 80135b4:	2b07      	cmp	r3, #7
 80135b6:	d01b      	beq.n	80135f0 <tcp_close_shutdown_fin+0x60>
 80135b8:	2b03      	cmp	r3, #3
 80135ba:	d126      	bne.n	801360a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f004 fddb 	bl	8018178 <tcp_send_fin>
 80135c2:	4603      	mov	r3, r0
 80135c4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80135c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d11f      	bne.n	801360e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2205      	movs	r2, #5
 80135d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80135d4:	e01b      	b.n	801360e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f004 fdce 	bl	8018178 <tcp_send_fin>
 80135dc:	4603      	mov	r3, r0
 80135de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80135e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d114      	bne.n	8013612 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2205      	movs	r2, #5
 80135ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80135ee:	e010      	b.n	8013612 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f004 fdc1 	bl	8018178 <tcp_send_fin>
 80135f6:	4603      	mov	r3, r0
 80135f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80135fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d109      	bne.n	8013616 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2209      	movs	r2, #9
 8013606:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013608:	e005      	b.n	8013616 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801360a:	2300      	movs	r3, #0
 801360c:	e01c      	b.n	8013648 <tcp_close_shutdown_fin+0xb8>
      break;
 801360e:	bf00      	nop
 8013610:	e002      	b.n	8013618 <tcp_close_shutdown_fin+0x88>
      break;
 8013612:	bf00      	nop
 8013614:	e000      	b.n	8013618 <tcp_close_shutdown_fin+0x88>
      break;
 8013616:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d103      	bne.n	8013628 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f004 fee7 	bl	80183f4 <tcp_output>
 8013626:	e00d      	b.n	8013644 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8013628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801362c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013630:	d108      	bne.n	8013644 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	8b5b      	ldrh	r3, [r3, #26]
 8013636:	f043 0308 	orr.w	r3, r3, #8
 801363a:	b29a      	uxth	r2, r3
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013640:	2300      	movs	r3, #0
 8013642:	e001      	b.n	8013648 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8013644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013648:	4618      	mov	r0, r3
 801364a:	3710      	adds	r7, #16
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}
 8013650:	0801de8c 	.word	0x0801de8c
 8013654:	0801df3c 	.word	0x0801df3c
 8013658:	0801ded0 	.word	0x0801ded0

0801365c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d109      	bne.n	801367e <tcp_close+0x22>
 801366a:	4b0f      	ldr	r3, [pc, #60]	; (80136a8 <tcp_close+0x4c>)
 801366c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013670:	490e      	ldr	r1, [pc, #56]	; (80136ac <tcp_close+0x50>)
 8013672:	480f      	ldr	r0, [pc, #60]	; (80136b0 <tcp_close+0x54>)
 8013674:	f008 fd8e 	bl	801c194 <iprintf>
 8013678:	f06f 030f 	mvn.w	r3, #15
 801367c:	e00f      	b.n	801369e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	7d1b      	ldrb	r3, [r3, #20]
 8013682:	2b01      	cmp	r3, #1
 8013684:	d006      	beq.n	8013694 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	8b5b      	ldrh	r3, [r3, #26]
 801368a:	f043 0310 	orr.w	r3, r3, #16
 801368e:	b29a      	uxth	r2, r3
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013694:	2101      	movs	r1, #1
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f7ff fe9c 	bl	80133d4 <tcp_close_shutdown>
 801369c:	4603      	mov	r3, r0
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3708      	adds	r7, #8
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	bf00      	nop
 80136a8:	0801de8c 	.word	0x0801de8c
 80136ac:	0801df9c 	.word	0x0801df9c
 80136b0:	0801ded0 	.word	0x0801ded0

080136b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b08e      	sub	sp, #56	; 0x38
 80136b8:	af04      	add	r7, sp, #16
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d107      	bne.n	80136d4 <tcp_abandon+0x20>
 80136c4:	4b52      	ldr	r3, [pc, #328]	; (8013810 <tcp_abandon+0x15c>)
 80136c6:	f240 223d 	movw	r2, #573	; 0x23d
 80136ca:	4952      	ldr	r1, [pc, #328]	; (8013814 <tcp_abandon+0x160>)
 80136cc:	4852      	ldr	r0, [pc, #328]	; (8013818 <tcp_abandon+0x164>)
 80136ce:	f008 fd61 	bl	801c194 <iprintf>
 80136d2:	e099      	b.n	8013808 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	7d1b      	ldrb	r3, [r3, #20]
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d106      	bne.n	80136ea <tcp_abandon+0x36>
 80136dc:	4b4c      	ldr	r3, [pc, #304]	; (8013810 <tcp_abandon+0x15c>)
 80136de:	f240 2241 	movw	r2, #577	; 0x241
 80136e2:	494e      	ldr	r1, [pc, #312]	; (801381c <tcp_abandon+0x168>)
 80136e4:	484c      	ldr	r0, [pc, #304]	; (8013818 <tcp_abandon+0x164>)
 80136e6:	f008 fd55 	bl	801c194 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	7d1b      	ldrb	r3, [r3, #20]
 80136ee:	2b0a      	cmp	r3, #10
 80136f0:	d107      	bne.n	8013702 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80136f2:	6879      	ldr	r1, [r7, #4]
 80136f4:	484a      	ldr	r0, [pc, #296]	; (8013820 <tcp_abandon+0x16c>)
 80136f6:	f001 fa65 	bl	8014bc4 <tcp_pcb_remove>
    tcp_free(pcb);
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f7ff fdb8 	bl	8013270 <tcp_free>
 8013700:	e082      	b.n	8013808 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013702:	2300      	movs	r3, #0
 8013704:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013706:	2300      	movs	r3, #0
 8013708:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801370e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013714:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801371c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	691b      	ldr	r3, [r3, #16]
 8013722:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	7d1b      	ldrb	r3, [r3, #20]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d126      	bne.n	801377a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	8adb      	ldrh	r3, [r3, #22]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d02e      	beq.n	8013792 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013734:	4b3b      	ldr	r3, [pc, #236]	; (8013824 <tcp_abandon+0x170>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	429a      	cmp	r2, r3
 801373c:	d105      	bne.n	801374a <tcp_abandon+0x96>
 801373e:	4b39      	ldr	r3, [pc, #228]	; (8013824 <tcp_abandon+0x170>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	68db      	ldr	r3, [r3, #12]
 8013744:	4a37      	ldr	r2, [pc, #220]	; (8013824 <tcp_abandon+0x170>)
 8013746:	6013      	str	r3, [r2, #0]
 8013748:	e013      	b.n	8013772 <tcp_abandon+0xbe>
 801374a:	4b36      	ldr	r3, [pc, #216]	; (8013824 <tcp_abandon+0x170>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	61fb      	str	r3, [r7, #28]
 8013750:	e00c      	b.n	801376c <tcp_abandon+0xb8>
 8013752:	69fb      	ldr	r3, [r7, #28]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	429a      	cmp	r2, r3
 801375a:	d104      	bne.n	8013766 <tcp_abandon+0xb2>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	68da      	ldr	r2, [r3, #12]
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	60da      	str	r2, [r3, #12]
 8013764:	e005      	b.n	8013772 <tcp_abandon+0xbe>
 8013766:	69fb      	ldr	r3, [r7, #28]
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	61fb      	str	r3, [r7, #28]
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d1ef      	bne.n	8013752 <tcp_abandon+0x9e>
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2200      	movs	r2, #0
 8013776:	60da      	str	r2, [r3, #12]
 8013778:	e00b      	b.n	8013792 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	8adb      	ldrh	r3, [r3, #22]
 8013782:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013784:	6879      	ldr	r1, [r7, #4]
 8013786:	4828      	ldr	r0, [pc, #160]	; (8013828 <tcp_abandon+0x174>)
 8013788:	f001 fa1c 	bl	8014bc4 <tcp_pcb_remove>
 801378c:	4b27      	ldr	r3, [pc, #156]	; (801382c <tcp_abandon+0x178>)
 801378e:	2201      	movs	r2, #1
 8013790:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013796:	2b00      	cmp	r3, #0
 8013798:	d004      	beq.n	80137a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801379e:	4618      	mov	r0, r3
 80137a0:	f000 fed4 	bl	801454c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d004      	beq.n	80137b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137b0:	4618      	mov	r0, r3
 80137b2:	f000 fecb 	bl	801454c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d004      	beq.n	80137c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137c2:	4618      	mov	r0, r3
 80137c4:	f000 fec2 	bl	801454c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d00e      	beq.n	80137ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80137ce:	6879      	ldr	r1, [r7, #4]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	3304      	adds	r3, #4
 80137d4:	687a      	ldr	r2, [r7, #4]
 80137d6:	8b12      	ldrh	r2, [r2, #24]
 80137d8:	9202      	str	r2, [sp, #8]
 80137da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80137dc:	9201      	str	r2, [sp, #4]
 80137de:	9300      	str	r3, [sp, #0]
 80137e0:	460b      	mov	r3, r1
 80137e2:	697a      	ldr	r2, [r7, #20]
 80137e4:	69b9      	ldr	r1, [r7, #24]
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f005 fbca 	bl	8018f80 <tcp_rst>
    }
    last_state = pcb->state;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	7d1b      	ldrb	r3, [r3, #20]
 80137f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f7ff fd3c 	bl	8013270 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d004      	beq.n	8013808 <tcp_abandon+0x154>
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	f06f 010c 	mvn.w	r1, #12
 8013804:	68f8      	ldr	r0, [r7, #12]
 8013806:	4798      	blx	r3
  }
}
 8013808:	3728      	adds	r7, #40	; 0x28
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	0801de8c 	.word	0x0801de8c
 8013814:	0801dfd0 	.word	0x0801dfd0
 8013818:	0801ded0 	.word	0x0801ded0
 801381c:	0801dfec 	.word	0x0801dfec
 8013820:	2000b350 	.word	0x2000b350
 8013824:	2000b34c 	.word	0x2000b34c
 8013828:	2000b340 	.word	0x2000b340
 801382c:	2000b33c 	.word	0x2000b33c

08013830 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013838:	2101      	movs	r1, #1
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f7ff ff3a 	bl	80136b4 <tcp_abandon>
}
 8013840:	bf00      	nop
 8013842:	3708      	adds	r7, #8
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}

08013848 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b088      	sub	sp, #32
 801384c:	af00      	add	r7, sp, #0
 801384e:	60f8      	str	r0, [r7, #12]
 8013850:	60b9      	str	r1, [r7, #8]
 8013852:	4613      	mov	r3, r2
 8013854:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013856:	2304      	movs	r3, #4
 8013858:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d101      	bne.n	8013864 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013860:	4b3e      	ldr	r3, [pc, #248]	; (801395c <tcp_bind+0x114>)
 8013862:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d109      	bne.n	801387e <tcp_bind+0x36>
 801386a:	4b3d      	ldr	r3, [pc, #244]	; (8013960 <tcp_bind+0x118>)
 801386c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013870:	493c      	ldr	r1, [pc, #240]	; (8013964 <tcp_bind+0x11c>)
 8013872:	483d      	ldr	r0, [pc, #244]	; (8013968 <tcp_bind+0x120>)
 8013874:	f008 fc8e 	bl	801c194 <iprintf>
 8013878:	f06f 030f 	mvn.w	r3, #15
 801387c:	e06a      	b.n	8013954 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	7d1b      	ldrb	r3, [r3, #20]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d009      	beq.n	801389a <tcp_bind+0x52>
 8013886:	4b36      	ldr	r3, [pc, #216]	; (8013960 <tcp_bind+0x118>)
 8013888:	f240 22ab 	movw	r2, #683	; 0x2ab
 801388c:	4937      	ldr	r1, [pc, #220]	; (801396c <tcp_bind+0x124>)
 801388e:	4836      	ldr	r0, [pc, #216]	; (8013968 <tcp_bind+0x120>)
 8013890:	f008 fc80 	bl	801c194 <iprintf>
 8013894:	f06f 0305 	mvn.w	r3, #5
 8013898:	e05c      	b.n	8013954 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801389a:	88fb      	ldrh	r3, [r7, #6]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d109      	bne.n	80138b4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80138a0:	f000 f9f0 	bl	8013c84 <tcp_new_port>
 80138a4:	4603      	mov	r3, r0
 80138a6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80138a8:	88fb      	ldrh	r3, [r7, #6]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d135      	bne.n	801391a <tcp_bind+0xd2>
      return ERR_BUF;
 80138ae:	f06f 0301 	mvn.w	r3, #1
 80138b2:	e04f      	b.n	8013954 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80138b4:	2300      	movs	r3, #0
 80138b6:	61fb      	str	r3, [r7, #28]
 80138b8:	e02b      	b.n	8013912 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80138ba:	4a2d      	ldr	r2, [pc, #180]	; (8013970 <tcp_bind+0x128>)
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	61bb      	str	r3, [r7, #24]
 80138c6:	e01e      	b.n	8013906 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	8adb      	ldrh	r3, [r3, #22]
 80138cc:	88fa      	ldrh	r2, [r7, #6]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d116      	bne.n	8013900 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80138d2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d010      	beq.n	80138fa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d00c      	beq.n	80138fa <tcp_bind+0xb2>
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d009      	beq.n	80138fa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d005      	beq.n	80138fa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	681a      	ldr	r2, [r3, #0]
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d102      	bne.n	8013900 <tcp_bind+0xb8>
              return ERR_USE;
 80138fa:	f06f 0307 	mvn.w	r3, #7
 80138fe:	e029      	b.n	8013954 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013900:	69bb      	ldr	r3, [r7, #24]
 8013902:	68db      	ldr	r3, [r3, #12]
 8013904:	61bb      	str	r3, [r7, #24]
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d1dd      	bne.n	80138c8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	3301      	adds	r3, #1
 8013910:	61fb      	str	r3, [r7, #28]
 8013912:	69fa      	ldr	r2, [r7, #28]
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	429a      	cmp	r2, r3
 8013918:	dbcf      	blt.n	80138ba <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d00c      	beq.n	801393a <tcp_bind+0xf2>
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d008      	beq.n	801393a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d002      	beq.n	8013934 <tcp_bind+0xec>
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	e000      	b.n	8013936 <tcp_bind+0xee>
 8013934:	2300      	movs	r3, #0
 8013936:	68fa      	ldr	r2, [r7, #12]
 8013938:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	88fa      	ldrh	r2, [r7, #6]
 801393e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013940:	4b0c      	ldr	r3, [pc, #48]	; (8013974 <tcp_bind+0x12c>)
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	60da      	str	r2, [r3, #12]
 8013948:	4a0a      	ldr	r2, [pc, #40]	; (8013974 <tcp_bind+0x12c>)
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	6013      	str	r3, [r2, #0]
 801394e:	f005 fcd9 	bl	8019304 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013952:	2300      	movs	r3, #0
}
 8013954:	4618      	mov	r0, r3
 8013956:	3720      	adds	r7, #32
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}
 801395c:	08030a08 	.word	0x08030a08
 8013960:	0801de8c 	.word	0x0801de8c
 8013964:	0801e020 	.word	0x0801e020
 8013968:	0801ded0 	.word	0x0801ded0
 801396c:	0801e038 	.word	0x0801e038
 8013970:	080309e0 	.word	0x080309e0
 8013974:	2000b34c 	.word	0x2000b34c

08013978 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	60f8      	str	r0, [r7, #12]
 8013980:	60b9      	str	r1, [r7, #8]
 8013982:	4613      	mov	r3, r2
 8013984:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d106      	bne.n	801399a <tcp_accept_null+0x22>
 801398c:	4b07      	ldr	r3, [pc, #28]	; (80139ac <tcp_accept_null+0x34>)
 801398e:	f240 320f 	movw	r2, #783	; 0x30f
 8013992:	4907      	ldr	r1, [pc, #28]	; (80139b0 <tcp_accept_null+0x38>)
 8013994:	4807      	ldr	r0, [pc, #28]	; (80139b4 <tcp_accept_null+0x3c>)
 8013996:	f008 fbfd 	bl	801c194 <iprintf>

  tcp_abort(pcb);
 801399a:	68b8      	ldr	r0, [r7, #8]
 801399c:	f7ff ff48 	bl	8013830 <tcp_abort>

  return ERR_ABRT;
 80139a0:	f06f 030c 	mvn.w	r3, #12
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3710      	adds	r7, #16
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	0801de8c 	.word	0x0801de8c
 80139b0:	0801e060 	.word	0x0801e060
 80139b4:	0801ded0 	.word	0x0801ded0

080139b8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	460b      	mov	r3, r1
 80139c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80139c4:	78fb      	ldrb	r3, [r7, #3]
 80139c6:	2200      	movs	r2, #0
 80139c8:	4619      	mov	r1, r3
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f000 f806 	bl	80139dc <tcp_listen_with_backlog_and_err>
 80139d0:	4603      	mov	r3, r0
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3708      	adds	r7, #8
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
	...

080139dc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b088      	sub	sp, #32
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	460b      	mov	r3, r1
 80139e6:	607a      	str	r2, [r7, #4]
 80139e8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80139ea:	2300      	movs	r3, #0
 80139ec:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d109      	bne.n	8013a08 <tcp_listen_with_backlog_and_err+0x2c>
 80139f4:	4b47      	ldr	r3, [pc, #284]	; (8013b14 <tcp_listen_with_backlog_and_err+0x138>)
 80139f6:	f240 3259 	movw	r2, #857	; 0x359
 80139fa:	4947      	ldr	r1, [pc, #284]	; (8013b18 <tcp_listen_with_backlog_and_err+0x13c>)
 80139fc:	4847      	ldr	r0, [pc, #284]	; (8013b1c <tcp_listen_with_backlog_and_err+0x140>)
 80139fe:	f008 fbc9 	bl	801c194 <iprintf>
 8013a02:	23f0      	movs	r3, #240	; 0xf0
 8013a04:	76fb      	strb	r3, [r7, #27]
 8013a06:	e079      	b.n	8013afc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	7d1b      	ldrb	r3, [r3, #20]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d009      	beq.n	8013a24 <tcp_listen_with_backlog_and_err+0x48>
 8013a10:	4b40      	ldr	r3, [pc, #256]	; (8013b14 <tcp_listen_with_backlog_and_err+0x138>)
 8013a12:	f240 325a 	movw	r2, #858	; 0x35a
 8013a16:	4942      	ldr	r1, [pc, #264]	; (8013b20 <tcp_listen_with_backlog_and_err+0x144>)
 8013a18:	4840      	ldr	r0, [pc, #256]	; (8013b1c <tcp_listen_with_backlog_and_err+0x140>)
 8013a1a:	f008 fbbb 	bl	801c194 <iprintf>
 8013a1e:	23f1      	movs	r3, #241	; 0xf1
 8013a20:	76fb      	strb	r3, [r7, #27]
 8013a22:	e06b      	b.n	8013afc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	7d1b      	ldrb	r3, [r3, #20]
 8013a28:	2b01      	cmp	r3, #1
 8013a2a:	d104      	bne.n	8013a36 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013a30:	23f7      	movs	r3, #247	; 0xf7
 8013a32:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013a34:	e062      	b.n	8013afc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013a36:	2002      	movs	r0, #2
 8013a38:	f7fe fa7c 	bl	8011f34 <memp_malloc>
 8013a3c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d102      	bne.n	8013a4a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013a44:	23ff      	movs	r3, #255	; 0xff
 8013a46:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013a48:	e058      	b.n	8013afc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	691a      	ldr	r2, [r3, #16]
 8013a4e:	69fb      	ldr	r3, [r7, #28]
 8013a50:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	8ada      	ldrh	r2, [r3, #22]
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	7d5a      	ldrb	r2, [r3, #21]
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	7a5a      	ldrb	r2, [r3, #9]
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	2200      	movs	r2, #0
 8013a74:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	7ada      	ldrb	r2, [r3, #11]
 8013a7a:	69fb      	ldr	r3, [r7, #28]
 8013a7c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	7a9a      	ldrb	r2, [r3, #10]
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	69fb      	ldr	r3, [r7, #28]
 8013a8c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	8adb      	ldrh	r3, [r3, #22]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d021      	beq.n	8013ada <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013a96:	4b23      	ldr	r3, [pc, #140]	; (8013b24 <tcp_listen_with_backlog_and_err+0x148>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	68fa      	ldr	r2, [r7, #12]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d105      	bne.n	8013aac <tcp_listen_with_backlog_and_err+0xd0>
 8013aa0:	4b20      	ldr	r3, [pc, #128]	; (8013b24 <tcp_listen_with_backlog_and_err+0x148>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	68db      	ldr	r3, [r3, #12]
 8013aa6:	4a1f      	ldr	r2, [pc, #124]	; (8013b24 <tcp_listen_with_backlog_and_err+0x148>)
 8013aa8:	6013      	str	r3, [r2, #0]
 8013aaa:	e013      	b.n	8013ad4 <tcp_listen_with_backlog_and_err+0xf8>
 8013aac:	4b1d      	ldr	r3, [pc, #116]	; (8013b24 <tcp_listen_with_backlog_and_err+0x148>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	617b      	str	r3, [r7, #20]
 8013ab2:	e00c      	b.n	8013ace <tcp_listen_with_backlog_and_err+0xf2>
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	68fa      	ldr	r2, [r7, #12]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d104      	bne.n	8013ac8 <tcp_listen_with_backlog_and_err+0xec>
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	68da      	ldr	r2, [r3, #12]
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	60da      	str	r2, [r3, #12]
 8013ac6:	e005      	b.n	8013ad4 <tcp_listen_with_backlog_and_err+0xf8>
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	68db      	ldr	r3, [r3, #12]
 8013acc:	617b      	str	r3, [r7, #20]
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1ef      	bne.n	8013ab4 <tcp_listen_with_backlog_and_err+0xd8>
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013ada:	68f8      	ldr	r0, [r7, #12]
 8013adc:	f7ff fbc8 	bl	8013270 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013ae0:	69fb      	ldr	r3, [r7, #28]
 8013ae2:	4a11      	ldr	r2, [pc, #68]	; (8013b28 <tcp_listen_with_backlog_and_err+0x14c>)
 8013ae4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013ae6:	4b11      	ldr	r3, [pc, #68]	; (8013b2c <tcp_listen_with_backlog_and_err+0x150>)
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	69fb      	ldr	r3, [r7, #28]
 8013aec:	60da      	str	r2, [r3, #12]
 8013aee:	4a0f      	ldr	r2, [pc, #60]	; (8013b2c <tcp_listen_with_backlog_and_err+0x150>)
 8013af0:	69fb      	ldr	r3, [r7, #28]
 8013af2:	6013      	str	r3, [r2, #0]
 8013af4:	f005 fc06 	bl	8019304 <tcp_timer_needed>
  res = ERR_OK;
 8013af8:	2300      	movs	r3, #0
 8013afa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d002      	beq.n	8013b08 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	7efa      	ldrb	r2, [r7, #27]
 8013b06:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013b08:	69fb      	ldr	r3, [r7, #28]
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3720      	adds	r7, #32
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	0801de8c 	.word	0x0801de8c
 8013b18:	0801e080 	.word	0x0801e080
 8013b1c:	0801ded0 	.word	0x0801ded0
 8013b20:	0801e0b0 	.word	0x0801e0b0
 8013b24:	2000b34c 	.word	0x2000b34c
 8013b28:	08013979 	.word	0x08013979
 8013b2c:	2000b348 	.word	0x2000b348

08013b30 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d106      	bne.n	8013b4c <tcp_update_rcv_ann_wnd+0x1c>
 8013b3e:	4b25      	ldr	r3, [pc, #148]	; (8013bd4 <tcp_update_rcv_ann_wnd+0xa4>)
 8013b40:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013b44:	4924      	ldr	r1, [pc, #144]	; (8013bd8 <tcp_update_rcv_ann_wnd+0xa8>)
 8013b46:	4825      	ldr	r0, [pc, #148]	; (8013bdc <tcp_update_rcv_ann_wnd+0xac>)
 8013b48:	f008 fb24 	bl	801c194 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b50:	687a      	ldr	r2, [r7, #4]
 8013b52:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013b54:	4413      	add	r3, r2
 8013b56:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013b60:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013b64:	bf28      	it	cs
 8013b66:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013b6a:	b292      	uxth	r2, r2
 8013b6c:	4413      	add	r3, r2
 8013b6e:	68fa      	ldr	r2, [r7, #12]
 8013b70:	1ad3      	subs	r3, r2, r3
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	db08      	blt.n	8013b88 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b82:	68fa      	ldr	r2, [r7, #12]
 8013b84:	1ad3      	subs	r3, r2, r3
 8013b86:	e020      	b.n	8013bca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b90:	1ad3      	subs	r3, r2, r3
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	dd03      	ble.n	8013b9e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013b9c:	e014      	b.n	8013bc8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba6:	1ad3      	subs	r3, r2, r3
 8013ba8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013bb0:	d306      	bcc.n	8013bc0 <tcp_update_rcv_ann_wnd+0x90>
 8013bb2:	4b08      	ldr	r3, [pc, #32]	; (8013bd4 <tcp_update_rcv_ann_wnd+0xa4>)
 8013bb4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013bb8:	4909      	ldr	r1, [pc, #36]	; (8013be0 <tcp_update_rcv_ann_wnd+0xb0>)
 8013bba:	4808      	ldr	r0, [pc, #32]	; (8013bdc <tcp_update_rcv_ann_wnd+0xac>)
 8013bbc:	f008 faea 	bl	801c194 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	b29a      	uxth	r2, r3
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013bc8:	2300      	movs	r3, #0
  }
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3710      	adds	r7, #16
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	0801de8c 	.word	0x0801de8c
 8013bd8:	0801e0e8 	.word	0x0801e0e8
 8013bdc:	0801ded0 	.word	0x0801ded0
 8013be0:	0801e10c 	.word	0x0801e10c

08013be4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b084      	sub	sp, #16
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	460b      	mov	r3, r1
 8013bee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d107      	bne.n	8013c06 <tcp_recved+0x22>
 8013bf6:	4b1f      	ldr	r3, [pc, #124]	; (8013c74 <tcp_recved+0x90>)
 8013bf8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013bfc:	491e      	ldr	r1, [pc, #120]	; (8013c78 <tcp_recved+0x94>)
 8013bfe:	481f      	ldr	r0, [pc, #124]	; (8013c7c <tcp_recved+0x98>)
 8013c00:	f008 fac8 	bl	801c194 <iprintf>
 8013c04:	e032      	b.n	8013c6c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	7d1b      	ldrb	r3, [r3, #20]
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	d106      	bne.n	8013c1c <tcp_recved+0x38>
 8013c0e:	4b19      	ldr	r3, [pc, #100]	; (8013c74 <tcp_recved+0x90>)
 8013c10:	f240 32d3 	movw	r2, #979	; 0x3d3
 8013c14:	491a      	ldr	r1, [pc, #104]	; (8013c80 <tcp_recved+0x9c>)
 8013c16:	4819      	ldr	r0, [pc, #100]	; (8013c7c <tcp_recved+0x98>)
 8013c18:	f008 fabc 	bl	801c194 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013c20:	887b      	ldrh	r3, [r7, #2]
 8013c22:	4413      	add	r3, r2
 8013c24:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013c26:	89fb      	ldrh	r3, [r7, #14]
 8013c28:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013c2c:	d804      	bhi.n	8013c38 <tcp_recved+0x54>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c32:	89fa      	ldrh	r2, [r7, #14]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d204      	bcs.n	8013c42 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013c3e:	851a      	strh	r2, [r3, #40]	; 0x28
 8013c40:	e002      	b.n	8013c48 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	89fa      	ldrh	r2, [r7, #14]
 8013c46:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f7ff ff71 	bl	8013b30 <tcp_update_rcv_ann_wnd>
 8013c4e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013c56:	d309      	bcc.n	8013c6c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	8b5b      	ldrh	r3, [r3, #26]
 8013c5c:	f043 0302 	orr.w	r3, r3, #2
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f004 fbc4 	bl	80183f4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013c6c:	3710      	adds	r7, #16
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	0801de8c 	.word	0x0801de8c
 8013c78:	0801e128 	.word	0x0801e128
 8013c7c:	0801ded0 	.word	0x0801ded0
 8013c80:	0801e140 	.word	0x0801e140

08013c84 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013c84:	b480      	push	{r7}
 8013c86:	b083      	sub	sp, #12
 8013c88:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013c8e:	4b1e      	ldr	r3, [pc, #120]	; (8013d08 <tcp_new_port+0x84>)
 8013c90:	881b      	ldrh	r3, [r3, #0]
 8013c92:	3301      	adds	r3, #1
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	4b1c      	ldr	r3, [pc, #112]	; (8013d08 <tcp_new_port+0x84>)
 8013c98:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013c9a:	4b1b      	ldr	r3, [pc, #108]	; (8013d08 <tcp_new_port+0x84>)
 8013c9c:	881b      	ldrh	r3, [r3, #0]
 8013c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ca2:	4293      	cmp	r3, r2
 8013ca4:	d103      	bne.n	8013cae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013ca6:	4b18      	ldr	r3, [pc, #96]	; (8013d08 <tcp_new_port+0x84>)
 8013ca8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013cac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013cae:	2300      	movs	r3, #0
 8013cb0:	71fb      	strb	r3, [r7, #7]
 8013cb2:	e01e      	b.n	8013cf2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013cb4:	79fb      	ldrb	r3, [r7, #7]
 8013cb6:	4a15      	ldr	r2, [pc, #84]	; (8013d0c <tcp_new_port+0x88>)
 8013cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	603b      	str	r3, [r7, #0]
 8013cc0:	e011      	b.n	8013ce6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	8ada      	ldrh	r2, [r3, #22]
 8013cc6:	4b10      	ldr	r3, [pc, #64]	; (8013d08 <tcp_new_port+0x84>)
 8013cc8:	881b      	ldrh	r3, [r3, #0]
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d108      	bne.n	8013ce0 <tcp_new_port+0x5c>
        n++;
 8013cce:	88bb      	ldrh	r3, [r7, #4]
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013cd4:	88bb      	ldrh	r3, [r7, #4]
 8013cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013cda:	d3d8      	bcc.n	8013c8e <tcp_new_port+0xa>
          return 0;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	e00d      	b.n	8013cfc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	603b      	str	r3, [r7, #0]
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d1ea      	bne.n	8013cc2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013cec:	79fb      	ldrb	r3, [r7, #7]
 8013cee:	3301      	adds	r3, #1
 8013cf0:	71fb      	strb	r3, [r7, #7]
 8013cf2:	79fb      	ldrb	r3, [r7, #7]
 8013cf4:	2b03      	cmp	r3, #3
 8013cf6:	d9dd      	bls.n	8013cb4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013cf8:	4b03      	ldr	r3, [pc, #12]	; (8013d08 <tcp_new_port+0x84>)
 8013cfa:	881b      	ldrh	r3, [r3, #0]
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	370c      	adds	r7, #12
 8013d00:	46bd      	mov	sp, r7
 8013d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d06:	4770      	bx	lr
 8013d08:	20000050 	.word	0x20000050
 8013d0c:	080309e0 	.word	0x080309e0

08013d10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013d10:	b5b0      	push	{r4, r5, r7, lr}
 8013d12:	b090      	sub	sp, #64	; 0x40
 8013d14:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013d16:	2300      	movs	r3, #0
 8013d18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013d1c:	4b94      	ldr	r3, [pc, #592]	; (8013f70 <tcp_slowtmr+0x260>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	3301      	adds	r3, #1
 8013d22:	4a93      	ldr	r2, [pc, #588]	; (8013f70 <tcp_slowtmr+0x260>)
 8013d24:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013d26:	4b93      	ldr	r3, [pc, #588]	; (8013f74 <tcp_slowtmr+0x264>)
 8013d28:	781b      	ldrb	r3, [r3, #0]
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	b2da      	uxtb	r2, r3
 8013d2e:	4b91      	ldr	r3, [pc, #580]	; (8013f74 <tcp_slowtmr+0x264>)
 8013d30:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013d32:	2300      	movs	r3, #0
 8013d34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013d36:	4b90      	ldr	r3, [pc, #576]	; (8013f78 <tcp_slowtmr+0x268>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013d3c:	e29d      	b.n	801427a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d40:	7d1b      	ldrb	r3, [r3, #20]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d106      	bne.n	8013d54 <tcp_slowtmr+0x44>
 8013d46:	4b8d      	ldr	r3, [pc, #564]	; (8013f7c <tcp_slowtmr+0x26c>)
 8013d48:	f240 42be 	movw	r2, #1214	; 0x4be
 8013d4c:	498c      	ldr	r1, [pc, #560]	; (8013f80 <tcp_slowtmr+0x270>)
 8013d4e:	488d      	ldr	r0, [pc, #564]	; (8013f84 <tcp_slowtmr+0x274>)
 8013d50:	f008 fa20 	bl	801c194 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d56:	7d1b      	ldrb	r3, [r3, #20]
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d106      	bne.n	8013d6a <tcp_slowtmr+0x5a>
 8013d5c:	4b87      	ldr	r3, [pc, #540]	; (8013f7c <tcp_slowtmr+0x26c>)
 8013d5e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013d62:	4989      	ldr	r1, [pc, #548]	; (8013f88 <tcp_slowtmr+0x278>)
 8013d64:	4887      	ldr	r0, [pc, #540]	; (8013f84 <tcp_slowtmr+0x274>)
 8013d66:	f008 fa15 	bl	801c194 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6c:	7d1b      	ldrb	r3, [r3, #20]
 8013d6e:	2b0a      	cmp	r3, #10
 8013d70:	d106      	bne.n	8013d80 <tcp_slowtmr+0x70>
 8013d72:	4b82      	ldr	r3, [pc, #520]	; (8013f7c <tcp_slowtmr+0x26c>)
 8013d74:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013d78:	4984      	ldr	r1, [pc, #528]	; (8013f8c <tcp_slowtmr+0x27c>)
 8013d7a:	4882      	ldr	r0, [pc, #520]	; (8013f84 <tcp_slowtmr+0x274>)
 8013d7c:	f008 fa0a 	bl	801c194 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d82:	7f9a      	ldrb	r2, [r3, #30]
 8013d84:	4b7b      	ldr	r3, [pc, #492]	; (8013f74 <tcp_slowtmr+0x264>)
 8013d86:	781b      	ldrb	r3, [r3, #0]
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d105      	bne.n	8013d98 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d92:	68db      	ldr	r3, [r3, #12]
 8013d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013d96:	e270      	b.n	801427a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013d98:	4b76      	ldr	r3, [pc, #472]	; (8013f74 <tcp_slowtmr+0x264>)
 8013d9a:	781a      	ldrb	r2, [r3, #0]
 8013d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013da0:	2300      	movs	r3, #0
 8013da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dae:	7d1b      	ldrb	r3, [r3, #20]
 8013db0:	2b02      	cmp	r3, #2
 8013db2:	d10a      	bne.n	8013dca <tcp_slowtmr+0xba>
 8013db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dba:	2b05      	cmp	r3, #5
 8013dbc:	d905      	bls.n	8013dca <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013dc8:	e11e      	b.n	8014008 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dd0:	2b0b      	cmp	r3, #11
 8013dd2:	d905      	bls.n	8013de0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dd8:	3301      	adds	r3, #1
 8013dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013dde:	e113      	b.n	8014008 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d075      	beq.n	8013ed6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d006      	beq.n	8013e00 <tcp_slowtmr+0xf0>
 8013df2:	4b62      	ldr	r3, [pc, #392]	; (8013f7c <tcp_slowtmr+0x26c>)
 8013df4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013df8:	4965      	ldr	r1, [pc, #404]	; (8013f90 <tcp_slowtmr+0x280>)
 8013dfa:	4862      	ldr	r0, [pc, #392]	; (8013f84 <tcp_slowtmr+0x274>)
 8013dfc:	f008 f9ca 	bl	801c194 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d106      	bne.n	8013e16 <tcp_slowtmr+0x106>
 8013e08:	4b5c      	ldr	r3, [pc, #368]	; (8013f7c <tcp_slowtmr+0x26c>)
 8013e0a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013e0e:	4961      	ldr	r1, [pc, #388]	; (8013f94 <tcp_slowtmr+0x284>)
 8013e10:	485c      	ldr	r0, [pc, #368]	; (8013f84 <tcp_slowtmr+0x274>)
 8013e12:	f008 f9bf 	bl	801c194 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013e1c:	2b0b      	cmp	r3, #11
 8013e1e:	d905      	bls.n	8013e2c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e24:	3301      	adds	r3, #1
 8013e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013e2a:	e0ed      	b.n	8014008 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013e32:	3b01      	subs	r3, #1
 8013e34:	4a58      	ldr	r2, [pc, #352]	; (8013f98 <tcp_slowtmr+0x288>)
 8013e36:	5cd3      	ldrb	r3, [r2, r3]
 8013e38:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013e40:	7c7a      	ldrb	r2, [r7, #17]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d907      	bls.n	8013e56 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	b2da      	uxtb	r2, r3
 8013e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013e5c:	7c7a      	ldrb	r2, [r7, #17]
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	f200 80d2 	bhi.w	8014008 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013e64:	2301      	movs	r3, #1
 8013e66:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d108      	bne.n	8013e84 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e74:	f005 f978 	bl	8019168 <tcp_zero_window_probe>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d014      	beq.n	8013ea8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013e7e:	2300      	movs	r3, #0
 8013e80:	623b      	str	r3, [r7, #32]
 8013e82:	e011      	b.n	8013ea8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e8a:	4619      	mov	r1, r3
 8013e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e8e:	f004 f82b 	bl	8017ee8 <tcp_split_unsent_seg>
 8013e92:	4603      	mov	r3, r0
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d107      	bne.n	8013ea8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e9a:	f004 faab 	bl	80183f4 <tcp_output>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d101      	bne.n	8013ea8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013ea8:	6a3b      	ldr	r3, [r7, #32]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f000 80ac 	beq.w	8014008 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013ebe:	2b06      	cmp	r3, #6
 8013ec0:	f200 80a2 	bhi.w	8014008 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013eca:	3301      	adds	r3, #1
 8013ecc:	b2da      	uxtb	r2, r3
 8013ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013ed4:	e098      	b.n	8014008 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	db0f      	blt.n	8013f00 <tcp_slowtmr+0x1f0>
 8013ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ee6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013eea:	4293      	cmp	r3, r2
 8013eec:	d008      	beq.n	8013f00 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	b21a      	sxth	r2, r3
 8013efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f02:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f08:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	db7b      	blt.n	8014008 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013f10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f12:	f004 fd67 	bl	80189e4 <tcp_rexmit_rto_prepare>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d007      	beq.n	8013f2c <tcp_slowtmr+0x21c>
 8013f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d171      	bne.n	8014008 <tcp_slowtmr+0x2f8>
 8013f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d06d      	beq.n	8014008 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2e:	7d1b      	ldrb	r3, [r3, #20]
 8013f30:	2b02      	cmp	r3, #2
 8013f32:	d03a      	beq.n	8013faa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013f3a:	2b0c      	cmp	r3, #12
 8013f3c:	bf28      	it	cs
 8013f3e:	230c      	movcs	r3, #12
 8013f40:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f48:	10db      	asrs	r3, r3, #3
 8013f4a:	b21b      	sxth	r3, r3
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013f54:	4413      	add	r3, r2
 8013f56:	7efa      	ldrb	r2, [r7, #27]
 8013f58:	4910      	ldr	r1, [pc, #64]	; (8013f9c <tcp_slowtmr+0x28c>)
 8013f5a:	5c8a      	ldrb	r2, [r1, r2]
 8013f5c:	4093      	lsls	r3, r2
 8013f5e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013f66:	4293      	cmp	r3, r2
 8013f68:	dc1a      	bgt.n	8013fa0 <tcp_slowtmr+0x290>
 8013f6a:	697b      	ldr	r3, [r7, #20]
 8013f6c:	b21a      	sxth	r2, r3
 8013f6e:	e019      	b.n	8013fa4 <tcp_slowtmr+0x294>
 8013f70:	2000b344 	.word	0x2000b344
 8013f74:	2000451a 	.word	0x2000451a
 8013f78:	2000b340 	.word	0x2000b340
 8013f7c:	0801de8c 	.word	0x0801de8c
 8013f80:	0801e1d0 	.word	0x0801e1d0
 8013f84:	0801ded0 	.word	0x0801ded0
 8013f88:	0801e1fc 	.word	0x0801e1fc
 8013f8c:	0801e228 	.word	0x0801e228
 8013f90:	0801e258 	.word	0x0801e258
 8013f94:	0801e28c 	.word	0x0801e28c
 8013f98:	080309d8 	.word	0x080309d8
 8013f9c:	080309c8 	.word	0x080309c8
 8013fa0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fac:	2200      	movs	r2, #0
 8013fae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013fbc:	4293      	cmp	r3, r2
 8013fbe:	bf28      	it	cs
 8013fc0:	4613      	movcs	r3, r2
 8013fc2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013fc4:	8a7b      	ldrh	r3, [r7, #18]
 8013fc6:	085b      	lsrs	r3, r3, #1
 8013fc8:	b29a      	uxth	r2, r3
 8013fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	429a      	cmp	r2, r3
 8013fe0:	d206      	bcs.n	8013ff0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	b29a      	uxth	r2, r3
 8013fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8014002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014004:	f004 fd5e 	bl	8018ac4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8014008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801400a:	7d1b      	ldrb	r3, [r3, #20]
 801400c:	2b06      	cmp	r3, #6
 801400e:	d111      	bne.n	8014034 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8014010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014012:	8b5b      	ldrh	r3, [r3, #26]
 8014014:	f003 0310 	and.w	r3, r3, #16
 8014018:	2b00      	cmp	r3, #0
 801401a:	d00b      	beq.n	8014034 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801401c:	4b9c      	ldr	r3, [pc, #624]	; (8014290 <tcp_slowtmr+0x580>)
 801401e:	681a      	ldr	r2, [r3, #0]
 8014020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014022:	6a1b      	ldr	r3, [r3, #32]
 8014024:	1ad3      	subs	r3, r2, r3
 8014026:	2b28      	cmp	r3, #40	; 0x28
 8014028:	d904      	bls.n	8014034 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801402a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801402e:	3301      	adds	r3, #1
 8014030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014036:	7a5b      	ldrb	r3, [r3, #9]
 8014038:	f003 0308 	and.w	r3, r3, #8
 801403c:	2b00      	cmp	r3, #0
 801403e:	d04a      	beq.n	80140d6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014044:	2b04      	cmp	r3, #4
 8014046:	d003      	beq.n	8014050 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8014048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801404a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801404c:	2b07      	cmp	r3, #7
 801404e:	d142      	bne.n	80140d6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014050:	4b8f      	ldr	r3, [pc, #572]	; (8014290 <tcp_slowtmr+0x580>)
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014056:	6a1b      	ldr	r3, [r3, #32]
 8014058:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014060:	4b8c      	ldr	r3, [pc, #560]	; (8014294 <tcp_slowtmr+0x584>)
 8014062:	440b      	add	r3, r1
 8014064:	498c      	ldr	r1, [pc, #560]	; (8014298 <tcp_slowtmr+0x588>)
 8014066:	fba1 1303 	umull	r1, r3, r1, r3
 801406a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801406c:	429a      	cmp	r2, r3
 801406e:	d90a      	bls.n	8014086 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014074:	3301      	adds	r3, #1
 8014076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801407a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801407e:	3301      	adds	r3, #1
 8014080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014084:	e027      	b.n	80140d6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014086:	4b82      	ldr	r3, [pc, #520]	; (8014290 <tcp_slowtmr+0x580>)
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801408c:	6a1b      	ldr	r3, [r3, #32]
 801408e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014092:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014098:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801409c:	4618      	mov	r0, r3
 801409e:	4b7f      	ldr	r3, [pc, #508]	; (801429c <tcp_slowtmr+0x58c>)
 80140a0:	fb03 f300 	mul.w	r3, r3, r0
 80140a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80140a6:	497c      	ldr	r1, [pc, #496]	; (8014298 <tcp_slowtmr+0x588>)
 80140a8:	fba1 1303 	umull	r1, r3, r1, r3
 80140ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d911      	bls.n	80140d6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80140b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140b4:	f005 f818 	bl	80190e8 <tcp_keepalive>
 80140b8:	4603      	mov	r3, r0
 80140ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80140be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d107      	bne.n	80140d6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80140c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80140cc:	3301      	adds	r3, #1
 80140ce:	b2da      	uxtb	r2, r3
 80140d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80140d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d011      	beq.n	8014102 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80140de:	4b6c      	ldr	r3, [pc, #432]	; (8014290 <tcp_slowtmr+0x580>)
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e4:	6a1b      	ldr	r3, [r3, #32]
 80140e6:	1ad2      	subs	r2, r2, r3
 80140e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80140ee:	4619      	mov	r1, r3
 80140f0:	460b      	mov	r3, r1
 80140f2:	005b      	lsls	r3, r3, #1
 80140f4:	440b      	add	r3, r1
 80140f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d302      	bcc.n	8014102 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80140fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140fe:	f000 fec5 	bl	8014e8c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8014102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014104:	7d1b      	ldrb	r3, [r3, #20]
 8014106:	2b03      	cmp	r3, #3
 8014108:	d10b      	bne.n	8014122 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801410a:	4b61      	ldr	r3, [pc, #388]	; (8014290 <tcp_slowtmr+0x580>)
 801410c:	681a      	ldr	r2, [r3, #0]
 801410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014110:	6a1b      	ldr	r3, [r3, #32]
 8014112:	1ad3      	subs	r3, r2, r3
 8014114:	2b28      	cmp	r3, #40	; 0x28
 8014116:	d904      	bls.n	8014122 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801411c:	3301      	adds	r3, #1
 801411e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8014122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014124:	7d1b      	ldrb	r3, [r3, #20]
 8014126:	2b09      	cmp	r3, #9
 8014128:	d10b      	bne.n	8014142 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801412a:	4b59      	ldr	r3, [pc, #356]	; (8014290 <tcp_slowtmr+0x580>)
 801412c:	681a      	ldr	r2, [r3, #0]
 801412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014130:	6a1b      	ldr	r3, [r3, #32]
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	2bf0      	cmp	r3, #240	; 0xf0
 8014136:	d904      	bls.n	8014142 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8014138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801413c:	3301      	adds	r3, #1
 801413e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014146:	2b00      	cmp	r3, #0
 8014148:	d060      	beq.n	801420c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014150:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8014152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014154:	f000 fce6 	bl	8014b24 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801415a:	2b00      	cmp	r3, #0
 801415c:	d010      	beq.n	8014180 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801415e:	4b50      	ldr	r3, [pc, #320]	; (80142a0 <tcp_slowtmr+0x590>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014164:	429a      	cmp	r2, r3
 8014166:	d106      	bne.n	8014176 <tcp_slowtmr+0x466>
 8014168:	4b4e      	ldr	r3, [pc, #312]	; (80142a4 <tcp_slowtmr+0x594>)
 801416a:	f240 526d 	movw	r2, #1389	; 0x56d
 801416e:	494e      	ldr	r1, [pc, #312]	; (80142a8 <tcp_slowtmr+0x598>)
 8014170:	484e      	ldr	r0, [pc, #312]	; (80142ac <tcp_slowtmr+0x59c>)
 8014172:	f008 f80f 	bl	801c194 <iprintf>
        prev->next = pcb->next;
 8014176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014178:	68da      	ldr	r2, [r3, #12]
 801417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801417c:	60da      	str	r2, [r3, #12]
 801417e:	e00f      	b.n	80141a0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014180:	4b47      	ldr	r3, [pc, #284]	; (80142a0 <tcp_slowtmr+0x590>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014186:	429a      	cmp	r2, r3
 8014188:	d006      	beq.n	8014198 <tcp_slowtmr+0x488>
 801418a:	4b46      	ldr	r3, [pc, #280]	; (80142a4 <tcp_slowtmr+0x594>)
 801418c:	f240 5271 	movw	r2, #1393	; 0x571
 8014190:	4947      	ldr	r1, [pc, #284]	; (80142b0 <tcp_slowtmr+0x5a0>)
 8014192:	4846      	ldr	r0, [pc, #280]	; (80142ac <tcp_slowtmr+0x59c>)
 8014194:	f007 fffe 	bl	801c194 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	4a40      	ldr	r2, [pc, #256]	; (80142a0 <tcp_slowtmr+0x590>)
 801419e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80141a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d013      	beq.n	80141d0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80141a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80141ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80141b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80141b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b4:	3304      	adds	r3, #4
 80141b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141b8:	8ad2      	ldrh	r2, [r2, #22]
 80141ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80141bc:	8b09      	ldrh	r1, [r1, #24]
 80141be:	9102      	str	r1, [sp, #8]
 80141c0:	9201      	str	r2, [sp, #4]
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	462b      	mov	r3, r5
 80141c6:	4622      	mov	r2, r4
 80141c8:	4601      	mov	r1, r0
 80141ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141cc:	f004 fed8 	bl	8018f80 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80141d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d2:	691b      	ldr	r3, [r3, #16]
 80141d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80141d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d8:	7d1b      	ldrb	r3, [r3, #20]
 80141da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80141dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80141e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e2:	68db      	ldr	r3, [r3, #12]
 80141e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80141e6:	6838      	ldr	r0, [r7, #0]
 80141e8:	f7ff f842 	bl	8013270 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80141ec:	4b31      	ldr	r3, [pc, #196]	; (80142b4 <tcp_slowtmr+0x5a4>)
 80141ee:	2200      	movs	r2, #0
 80141f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d004      	beq.n	8014202 <tcp_slowtmr+0x4f2>
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	f06f 010c 	mvn.w	r1, #12
 80141fe:	68b8      	ldr	r0, [r7, #8]
 8014200:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014202:	4b2c      	ldr	r3, [pc, #176]	; (80142b4 <tcp_slowtmr+0x5a4>)
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d037      	beq.n	801427a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801420a:	e592      	b.n	8013d32 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801420e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014212:	68db      	ldr	r3, [r3, #12]
 8014214:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014218:	7f1b      	ldrb	r3, [r3, #28]
 801421a:	3301      	adds	r3, #1
 801421c:	b2da      	uxtb	r2, r3
 801421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014220:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014224:	7f1a      	ldrb	r2, [r3, #28]
 8014226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014228:	7f5b      	ldrb	r3, [r3, #29]
 801422a:	429a      	cmp	r2, r3
 801422c:	d325      	bcc.n	801427a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014230:	2200      	movs	r2, #0
 8014232:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014234:	4b1f      	ldr	r3, [pc, #124]	; (80142b4 <tcp_slowtmr+0x5a4>)
 8014236:	2200      	movs	r2, #0
 8014238:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801423c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014240:	2b00      	cmp	r3, #0
 8014242:	d00b      	beq.n	801425c <tcp_slowtmr+0x54c>
 8014244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801424a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801424c:	6912      	ldr	r2, [r2, #16]
 801424e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014250:	4610      	mov	r0, r2
 8014252:	4798      	blx	r3
 8014254:	4603      	mov	r3, r0
 8014256:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801425a:	e002      	b.n	8014262 <tcp_slowtmr+0x552>
 801425c:	2300      	movs	r3, #0
 801425e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014262:	4b14      	ldr	r3, [pc, #80]	; (80142b4 <tcp_slowtmr+0x5a4>)
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d000      	beq.n	801426c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801426a:	e562      	b.n	8013d32 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801426c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014270:	2b00      	cmp	r3, #0
 8014272:	d102      	bne.n	801427a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8014274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014276:	f004 f8bd 	bl	80183f4 <tcp_output>
  while (pcb != NULL) {
 801427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801427c:	2b00      	cmp	r3, #0
 801427e:	f47f ad5e 	bne.w	8013d3e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014282:	2300      	movs	r3, #0
 8014284:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014286:	4b0c      	ldr	r3, [pc, #48]	; (80142b8 <tcp_slowtmr+0x5a8>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801428c:	e069      	b.n	8014362 <tcp_slowtmr+0x652>
 801428e:	bf00      	nop
 8014290:	2000b344 	.word	0x2000b344
 8014294:	000a4cb8 	.word	0x000a4cb8
 8014298:	10624dd3 	.word	0x10624dd3
 801429c:	000124f8 	.word	0x000124f8
 80142a0:	2000b340 	.word	0x2000b340
 80142a4:	0801de8c 	.word	0x0801de8c
 80142a8:	0801e2c4 	.word	0x0801e2c4
 80142ac:	0801ded0 	.word	0x0801ded0
 80142b0:	0801e2f0 	.word	0x0801e2f0
 80142b4:	2000b33c 	.word	0x2000b33c
 80142b8:	2000b350 	.word	0x2000b350
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80142bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142be:	7d1b      	ldrb	r3, [r3, #20]
 80142c0:	2b0a      	cmp	r3, #10
 80142c2:	d006      	beq.n	80142d2 <tcp_slowtmr+0x5c2>
 80142c4:	4b2a      	ldr	r3, [pc, #168]	; (8014370 <tcp_slowtmr+0x660>)
 80142c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80142ca:	492a      	ldr	r1, [pc, #168]	; (8014374 <tcp_slowtmr+0x664>)
 80142cc:	482a      	ldr	r0, [pc, #168]	; (8014378 <tcp_slowtmr+0x668>)
 80142ce:	f007 ff61 	bl	801c194 <iprintf>
    pcb_remove = 0;
 80142d2:	2300      	movs	r3, #0
 80142d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80142d8:	4b28      	ldr	r3, [pc, #160]	; (801437c <tcp_slowtmr+0x66c>)
 80142da:	681a      	ldr	r2, [r3, #0]
 80142dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142de:	6a1b      	ldr	r3, [r3, #32]
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	2bf0      	cmp	r3, #240	; 0xf0
 80142e4:	d904      	bls.n	80142f0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80142e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142ea:	3301      	adds	r3, #1
 80142ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80142f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d02f      	beq.n	8014358 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80142f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142fa:	f000 fc13 	bl	8014b24 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80142fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014300:	2b00      	cmp	r3, #0
 8014302:	d010      	beq.n	8014326 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014304:	4b1e      	ldr	r3, [pc, #120]	; (8014380 <tcp_slowtmr+0x670>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801430a:	429a      	cmp	r2, r3
 801430c:	d106      	bne.n	801431c <tcp_slowtmr+0x60c>
 801430e:	4b18      	ldr	r3, [pc, #96]	; (8014370 <tcp_slowtmr+0x660>)
 8014310:	f240 52af 	movw	r2, #1455	; 0x5af
 8014314:	491b      	ldr	r1, [pc, #108]	; (8014384 <tcp_slowtmr+0x674>)
 8014316:	4818      	ldr	r0, [pc, #96]	; (8014378 <tcp_slowtmr+0x668>)
 8014318:	f007 ff3c 	bl	801c194 <iprintf>
        prev->next = pcb->next;
 801431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431e:	68da      	ldr	r2, [r3, #12]
 8014320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014322:	60da      	str	r2, [r3, #12]
 8014324:	e00f      	b.n	8014346 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014326:	4b16      	ldr	r3, [pc, #88]	; (8014380 <tcp_slowtmr+0x670>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801432c:	429a      	cmp	r2, r3
 801432e:	d006      	beq.n	801433e <tcp_slowtmr+0x62e>
 8014330:	4b0f      	ldr	r3, [pc, #60]	; (8014370 <tcp_slowtmr+0x660>)
 8014332:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8014336:	4914      	ldr	r1, [pc, #80]	; (8014388 <tcp_slowtmr+0x678>)
 8014338:	480f      	ldr	r0, [pc, #60]	; (8014378 <tcp_slowtmr+0x668>)
 801433a:	f007 ff2b 	bl	801c194 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	4a0f      	ldr	r2, [pc, #60]	; (8014380 <tcp_slowtmr+0x670>)
 8014344:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014348:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014350:	69f8      	ldr	r0, [r7, #28]
 8014352:	f7fe ff8d 	bl	8013270 <tcp_free>
 8014356:	e004      	b.n	8014362 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014364:	2b00      	cmp	r3, #0
 8014366:	d1a9      	bne.n	80142bc <tcp_slowtmr+0x5ac>
    }
  }
}
 8014368:	bf00      	nop
 801436a:	3730      	adds	r7, #48	; 0x30
 801436c:	46bd      	mov	sp, r7
 801436e:	bdb0      	pop	{r4, r5, r7, pc}
 8014370:	0801de8c 	.word	0x0801de8c
 8014374:	0801e31c 	.word	0x0801e31c
 8014378:	0801ded0 	.word	0x0801ded0
 801437c:	2000b344 	.word	0x2000b344
 8014380:	2000b350 	.word	0x2000b350
 8014384:	0801e34c 	.word	0x0801e34c
 8014388:	0801e374 	.word	0x0801e374

0801438c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014392:	4b2d      	ldr	r3, [pc, #180]	; (8014448 <tcp_fasttmr+0xbc>)
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	3301      	adds	r3, #1
 8014398:	b2da      	uxtb	r2, r3
 801439a:	4b2b      	ldr	r3, [pc, #172]	; (8014448 <tcp_fasttmr+0xbc>)
 801439c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801439e:	4b2b      	ldr	r3, [pc, #172]	; (801444c <tcp_fasttmr+0xc0>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80143a4:	e048      	b.n	8014438 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	7f9a      	ldrb	r2, [r3, #30]
 80143aa:	4b27      	ldr	r3, [pc, #156]	; (8014448 <tcp_fasttmr+0xbc>)
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	429a      	cmp	r2, r3
 80143b0:	d03f      	beq.n	8014432 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80143b2:	4b25      	ldr	r3, [pc, #148]	; (8014448 <tcp_fasttmr+0xbc>)
 80143b4:	781a      	ldrb	r2, [r3, #0]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	8b5b      	ldrh	r3, [r3, #26]
 80143be:	f003 0301 	and.w	r3, r3, #1
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d010      	beq.n	80143e8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	8b5b      	ldrh	r3, [r3, #26]
 80143ca:	f043 0302 	orr.w	r3, r3, #2
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f004 f80d 	bl	80183f4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	8b5b      	ldrh	r3, [r3, #26]
 80143de:	f023 0303 	bic.w	r3, r3, #3
 80143e2:	b29a      	uxth	r2, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	8b5b      	ldrh	r3, [r3, #26]
 80143ec:	f003 0308 	and.w	r3, r3, #8
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d009      	beq.n	8014408 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	8b5b      	ldrh	r3, [r3, #26]
 80143f8:	f023 0308 	bic.w	r3, r3, #8
 80143fc:	b29a      	uxth	r2, r3
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f7ff f8c4 	bl	8013590 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	68db      	ldr	r3, [r3, #12]
 801440c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014412:	2b00      	cmp	r3, #0
 8014414:	d00a      	beq.n	801442c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014416:	4b0e      	ldr	r3, [pc, #56]	; (8014450 <tcp_fasttmr+0xc4>)
 8014418:	2200      	movs	r2, #0
 801441a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 f819 	bl	8014454 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014422:	4b0b      	ldr	r3, [pc, #44]	; (8014450 <tcp_fasttmr+0xc4>)
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d000      	beq.n	801442c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801442a:	e7b8      	b.n	801439e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	607b      	str	r3, [r7, #4]
 8014430:	e002      	b.n	8014438 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	68db      	ldr	r3, [r3, #12]
 8014436:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d1b3      	bne.n	80143a6 <tcp_fasttmr+0x1a>
    }
  }
}
 801443e:	bf00      	nop
 8014440:	3708      	adds	r7, #8
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}
 8014446:	bf00      	nop
 8014448:	2000451a 	.word	0x2000451a
 801444c:	2000b340 	.word	0x2000b340
 8014450:	2000b33c 	.word	0x2000b33c

08014454 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014454:	b590      	push	{r4, r7, lr}
 8014456:	b085      	sub	sp, #20
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d109      	bne.n	8014476 <tcp_process_refused_data+0x22>
 8014462:	4b37      	ldr	r3, [pc, #220]	; (8014540 <tcp_process_refused_data+0xec>)
 8014464:	f240 6209 	movw	r2, #1545	; 0x609
 8014468:	4936      	ldr	r1, [pc, #216]	; (8014544 <tcp_process_refused_data+0xf0>)
 801446a:	4837      	ldr	r0, [pc, #220]	; (8014548 <tcp_process_refused_data+0xf4>)
 801446c:	f007 fe92 	bl	801c194 <iprintf>
 8014470:	f06f 030f 	mvn.w	r3, #15
 8014474:	e060      	b.n	8014538 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801447a:	7b5b      	ldrb	r3, [r3, #13]
 801447c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014482:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2200      	movs	r2, #0
 8014488:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014490:	2b00      	cmp	r3, #0
 8014492:	d00b      	beq.n	80144ac <tcp_process_refused_data+0x58>
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6918      	ldr	r0, [r3, #16]
 801449e:	2300      	movs	r3, #0
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	6879      	ldr	r1, [r7, #4]
 80144a4:	47a0      	blx	r4
 80144a6:	4603      	mov	r3, r0
 80144a8:	73fb      	strb	r3, [r7, #15]
 80144aa:	e007      	b.n	80144bc <tcp_process_refused_data+0x68>
 80144ac:	2300      	movs	r3, #0
 80144ae:	68ba      	ldr	r2, [r7, #8]
 80144b0:	6879      	ldr	r1, [r7, #4]
 80144b2:	2000      	movs	r0, #0
 80144b4:	f000 f8c0 	bl	8014638 <tcp_recv_null>
 80144b8:	4603      	mov	r3, r0
 80144ba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80144bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d12a      	bne.n	801451a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80144c4:	7bbb      	ldrb	r3, [r7, #14]
 80144c6:	f003 0320 	and.w	r3, r3, #32
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d033      	beq.n	8014536 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80144d6:	d005      	beq.n	80144e4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144dc:	3301      	adds	r3, #1
 80144de:	b29a      	uxth	r2, r3
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d00b      	beq.n	8014506 <tcp_process_refused_data+0xb2>
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	6918      	ldr	r0, [r3, #16]
 80144f8:	2300      	movs	r3, #0
 80144fa:	2200      	movs	r2, #0
 80144fc:	6879      	ldr	r1, [r7, #4]
 80144fe:	47a0      	blx	r4
 8014500:	4603      	mov	r3, r0
 8014502:	73fb      	strb	r3, [r7, #15]
 8014504:	e001      	b.n	801450a <tcp_process_refused_data+0xb6>
 8014506:	2300      	movs	r3, #0
 8014508:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801450a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801450e:	f113 0f0d 	cmn.w	r3, #13
 8014512:	d110      	bne.n	8014536 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014514:	f06f 030c 	mvn.w	r3, #12
 8014518:	e00e      	b.n	8014538 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801451a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801451e:	f113 0f0d 	cmn.w	r3, #13
 8014522:	d102      	bne.n	801452a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014524:	f06f 030c 	mvn.w	r3, #12
 8014528:	e006      	b.n	8014538 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	68ba      	ldr	r2, [r7, #8]
 801452e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014530:	f06f 0304 	mvn.w	r3, #4
 8014534:	e000      	b.n	8014538 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014536:	2300      	movs	r3, #0
}
 8014538:	4618      	mov	r0, r3
 801453a:	3714      	adds	r7, #20
 801453c:	46bd      	mov	sp, r7
 801453e:	bd90      	pop	{r4, r7, pc}
 8014540:	0801de8c 	.word	0x0801de8c
 8014544:	0801e39c 	.word	0x0801e39c
 8014548:	0801ded0 	.word	0x0801ded0

0801454c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014554:	e007      	b.n	8014566 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f000 f809 	bl	8014574 <tcp_seg_free>
    seg = next;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d1f4      	bne.n	8014556 <tcp_segs_free+0xa>
  }
}
 801456c:	bf00      	nop
 801456e:	3710      	adds	r7, #16
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d00c      	beq.n	801459c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	685b      	ldr	r3, [r3, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d004      	beq.n	8014594 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	4618      	mov	r0, r3
 8014590:	f7fe fbc2 	bl	8012d18 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014594:	6879      	ldr	r1, [r7, #4]
 8014596:	2003      	movs	r0, #3
 8014598:	f7fd fd1e 	bl	8011fd8 <memp_free>
  }
}
 801459c:	bf00      	nop
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	460b      	mov	r3, r1
 80145ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d107      	bne.n	80145c6 <tcp_setprio+0x22>
 80145b6:	4b07      	ldr	r3, [pc, #28]	; (80145d4 <tcp_setprio+0x30>)
 80145b8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80145bc:	4906      	ldr	r1, [pc, #24]	; (80145d8 <tcp_setprio+0x34>)
 80145be:	4807      	ldr	r0, [pc, #28]	; (80145dc <tcp_setprio+0x38>)
 80145c0:	f007 fde8 	bl	801c194 <iprintf>
 80145c4:	e002      	b.n	80145cc <tcp_setprio+0x28>

  pcb->prio = prio;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	78fa      	ldrb	r2, [r7, #3]
 80145ca:	755a      	strb	r2, [r3, #21]
}
 80145cc:	3708      	adds	r7, #8
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	0801de8c 	.word	0x0801de8c
 80145d8:	0801e3c4 	.word	0x0801e3c4
 80145dc:	0801ded0 	.word	0x0801ded0

080145e0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d106      	bne.n	80145fc <tcp_seg_copy+0x1c>
 80145ee:	4b0f      	ldr	r3, [pc, #60]	; (801462c <tcp_seg_copy+0x4c>)
 80145f0:	f240 6282 	movw	r2, #1666	; 0x682
 80145f4:	490e      	ldr	r1, [pc, #56]	; (8014630 <tcp_seg_copy+0x50>)
 80145f6:	480f      	ldr	r0, [pc, #60]	; (8014634 <tcp_seg_copy+0x54>)
 80145f8:	f007 fdcc 	bl	801c194 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80145fc:	2003      	movs	r0, #3
 80145fe:	f7fd fc99 	bl	8011f34 <memp_malloc>
 8014602:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d101      	bne.n	801460e <tcp_seg_copy+0x2e>
    return NULL;
 801460a:	2300      	movs	r3, #0
 801460c:	e00a      	b.n	8014624 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801460e:	2210      	movs	r2, #16
 8014610:	6879      	ldr	r1, [r7, #4]
 8014612:	68f8      	ldr	r0, [r7, #12]
 8014614:	f007 fdab 	bl	801c16e <memcpy>
  pbuf_ref(cseg->p);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	685b      	ldr	r3, [r3, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	f7fe fc21 	bl	8012e64 <pbuf_ref>
  return cseg;
 8014622:	68fb      	ldr	r3, [r7, #12]
}
 8014624:	4618      	mov	r0, r3
 8014626:	3710      	adds	r7, #16
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}
 801462c:	0801de8c 	.word	0x0801de8c
 8014630:	0801e3e0 	.word	0x0801e3e0
 8014634:	0801ded0 	.word	0x0801ded0

08014638 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af00      	add	r7, sp, #0
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]
 8014644:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d109      	bne.n	8014660 <tcp_recv_null+0x28>
 801464c:	4b12      	ldr	r3, [pc, #72]	; (8014698 <tcp_recv_null+0x60>)
 801464e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014652:	4912      	ldr	r1, [pc, #72]	; (801469c <tcp_recv_null+0x64>)
 8014654:	4812      	ldr	r0, [pc, #72]	; (80146a0 <tcp_recv_null+0x68>)
 8014656:	f007 fd9d 	bl	801c194 <iprintf>
 801465a:	f06f 030f 	mvn.w	r3, #15
 801465e:	e016      	b.n	801468e <tcp_recv_null+0x56>

  if (p != NULL) {
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d009      	beq.n	801467a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	891b      	ldrh	r3, [r3, #8]
 801466a:	4619      	mov	r1, r3
 801466c:	68b8      	ldr	r0, [r7, #8]
 801466e:	f7ff fab9 	bl	8013be4 <tcp_recved>
    pbuf_free(p);
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f7fe fb50 	bl	8012d18 <pbuf_free>
 8014678:	e008      	b.n	801468c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801467a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d104      	bne.n	801468c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014682:	68b8      	ldr	r0, [r7, #8]
 8014684:	f7fe ffea 	bl	801365c <tcp_close>
 8014688:	4603      	mov	r3, r0
 801468a:	e000      	b.n	801468e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801468c:	2300      	movs	r3, #0
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	0801de8c 	.word	0x0801de8c
 801469c:	0801e3fc 	.word	0x0801e3fc
 80146a0:	0801ded0 	.word	0x0801ded0

080146a4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b086      	sub	sp, #24
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	4603      	mov	r3, r0
 80146ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80146ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	db01      	blt.n	80146ba <tcp_kill_prio+0x16>
 80146b6:	79fb      	ldrb	r3, [r7, #7]
 80146b8:	e000      	b.n	80146bc <tcp_kill_prio+0x18>
 80146ba:	237f      	movs	r3, #127	; 0x7f
 80146bc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80146be:	7afb      	ldrb	r3, [r7, #11]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d034      	beq.n	801472e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80146c4:	7afb      	ldrb	r3, [r7, #11]
 80146c6:	3b01      	subs	r3, #1
 80146c8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80146ce:	2300      	movs	r3, #0
 80146d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80146d2:	4b19      	ldr	r3, [pc, #100]	; (8014738 <tcp_kill_prio+0x94>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	617b      	str	r3, [r7, #20]
 80146d8:	e01f      	b.n	801471a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	7d5b      	ldrb	r3, [r3, #21]
 80146de:	7afa      	ldrb	r2, [r7, #11]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d80c      	bhi.n	80146fe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80146e8:	7afa      	ldrb	r2, [r7, #11]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d112      	bne.n	8014714 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80146ee:	4b13      	ldr	r3, [pc, #76]	; (801473c <tcp_kill_prio+0x98>)
 80146f0:	681a      	ldr	r2, [r3, #0]
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	6a1b      	ldr	r3, [r3, #32]
 80146f6:	1ad3      	subs	r3, r2, r3
 80146f8:	68fa      	ldr	r2, [r7, #12]
 80146fa:	429a      	cmp	r2, r3
 80146fc:	d80a      	bhi.n	8014714 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80146fe:	4b0f      	ldr	r3, [pc, #60]	; (801473c <tcp_kill_prio+0x98>)
 8014700:	681a      	ldr	r2, [r3, #0]
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	6a1b      	ldr	r3, [r3, #32]
 8014706:	1ad3      	subs	r3, r2, r3
 8014708:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801470e:	697b      	ldr	r3, [r7, #20]
 8014710:	7d5b      	ldrb	r3, [r3, #21]
 8014712:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	68db      	ldr	r3, [r3, #12]
 8014718:	617b      	str	r3, [r7, #20]
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d1dc      	bne.n	80146da <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d004      	beq.n	8014730 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014726:	6938      	ldr	r0, [r7, #16]
 8014728:	f7ff f882 	bl	8013830 <tcp_abort>
 801472c:	e000      	b.n	8014730 <tcp_kill_prio+0x8c>
    return;
 801472e:	bf00      	nop
  }
}
 8014730:	3718      	adds	r7, #24
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
 8014736:	bf00      	nop
 8014738:	2000b340 	.word	0x2000b340
 801473c:	2000b344 	.word	0x2000b344

08014740 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b086      	sub	sp, #24
 8014744:	af00      	add	r7, sp, #0
 8014746:	4603      	mov	r3, r0
 8014748:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801474a:	79fb      	ldrb	r3, [r7, #7]
 801474c:	2b08      	cmp	r3, #8
 801474e:	d009      	beq.n	8014764 <tcp_kill_state+0x24>
 8014750:	79fb      	ldrb	r3, [r7, #7]
 8014752:	2b09      	cmp	r3, #9
 8014754:	d006      	beq.n	8014764 <tcp_kill_state+0x24>
 8014756:	4b1a      	ldr	r3, [pc, #104]	; (80147c0 <tcp_kill_state+0x80>)
 8014758:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801475c:	4919      	ldr	r1, [pc, #100]	; (80147c4 <tcp_kill_state+0x84>)
 801475e:	481a      	ldr	r0, [pc, #104]	; (80147c8 <tcp_kill_state+0x88>)
 8014760:	f007 fd18 	bl	801c194 <iprintf>

  inactivity = 0;
 8014764:	2300      	movs	r3, #0
 8014766:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014768:	2300      	movs	r3, #0
 801476a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801476c:	4b17      	ldr	r3, [pc, #92]	; (80147cc <tcp_kill_state+0x8c>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	617b      	str	r3, [r7, #20]
 8014772:	e017      	b.n	80147a4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	7d1b      	ldrb	r3, [r3, #20]
 8014778:	79fa      	ldrb	r2, [r7, #7]
 801477a:	429a      	cmp	r2, r3
 801477c:	d10f      	bne.n	801479e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801477e:	4b14      	ldr	r3, [pc, #80]	; (80147d0 <tcp_kill_state+0x90>)
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	6a1b      	ldr	r3, [r3, #32]
 8014786:	1ad3      	subs	r3, r2, r3
 8014788:	68fa      	ldr	r2, [r7, #12]
 801478a:	429a      	cmp	r2, r3
 801478c:	d807      	bhi.n	801479e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801478e:	4b10      	ldr	r3, [pc, #64]	; (80147d0 <tcp_kill_state+0x90>)
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	697b      	ldr	r3, [r7, #20]
 8014794:	6a1b      	ldr	r3, [r3, #32]
 8014796:	1ad3      	subs	r3, r2, r3
 8014798:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	617b      	str	r3, [r7, #20]
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d1e4      	bne.n	8014774 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80147aa:	693b      	ldr	r3, [r7, #16]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d003      	beq.n	80147b8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80147b0:	2100      	movs	r1, #0
 80147b2:	6938      	ldr	r0, [r7, #16]
 80147b4:	f7fe ff7e 	bl	80136b4 <tcp_abandon>
  }
}
 80147b8:	bf00      	nop
 80147ba:	3718      	adds	r7, #24
 80147bc:	46bd      	mov	sp, r7
 80147be:	bd80      	pop	{r7, pc}
 80147c0:	0801de8c 	.word	0x0801de8c
 80147c4:	0801e418 	.word	0x0801e418
 80147c8:	0801ded0 	.word	0x0801ded0
 80147cc:	2000b340 	.word	0x2000b340
 80147d0:	2000b344 	.word	0x2000b344

080147d4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80147da:	2300      	movs	r3, #0
 80147dc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80147de:	2300      	movs	r3, #0
 80147e0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80147e2:	4b12      	ldr	r3, [pc, #72]	; (801482c <tcp_kill_timewait+0x58>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	60fb      	str	r3, [r7, #12]
 80147e8:	e012      	b.n	8014810 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80147ea:	4b11      	ldr	r3, [pc, #68]	; (8014830 <tcp_kill_timewait+0x5c>)
 80147ec:	681a      	ldr	r2, [r3, #0]
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	6a1b      	ldr	r3, [r3, #32]
 80147f2:	1ad3      	subs	r3, r2, r3
 80147f4:	687a      	ldr	r2, [r7, #4]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d807      	bhi.n	801480a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80147fa:	4b0d      	ldr	r3, [pc, #52]	; (8014830 <tcp_kill_timewait+0x5c>)
 80147fc:	681a      	ldr	r2, [r3, #0]
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	6a1b      	ldr	r3, [r3, #32]
 8014802:	1ad3      	subs	r3, r2, r3
 8014804:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	68db      	ldr	r3, [r3, #12]
 801480e:	60fb      	str	r3, [r7, #12]
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d1e9      	bne.n	80147ea <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d002      	beq.n	8014822 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801481c:	68b8      	ldr	r0, [r7, #8]
 801481e:	f7ff f807 	bl	8013830 <tcp_abort>
  }
}
 8014822:	bf00      	nop
 8014824:	3710      	adds	r7, #16
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	2000b350 	.word	0x2000b350
 8014830:	2000b344 	.word	0x2000b344

08014834 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801483a:	4b10      	ldr	r3, [pc, #64]	; (801487c <tcp_handle_closepend+0x48>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014840:	e014      	b.n	801486c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	68db      	ldr	r3, [r3, #12]
 8014846:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	8b5b      	ldrh	r3, [r3, #26]
 801484c:	f003 0308 	and.w	r3, r3, #8
 8014850:	2b00      	cmp	r3, #0
 8014852:	d009      	beq.n	8014868 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	8b5b      	ldrh	r3, [r3, #26]
 8014858:	f023 0308 	bic.w	r3, r3, #8
 801485c:	b29a      	uxth	r2, r3
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f7fe fe94 	bl	8013590 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d1e7      	bne.n	8014842 <tcp_handle_closepend+0xe>
  }
}
 8014872:	bf00      	nop
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	2000b340 	.word	0x2000b340

08014880 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b084      	sub	sp, #16
 8014884:	af00      	add	r7, sp, #0
 8014886:	4603      	mov	r3, r0
 8014888:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801488a:	2001      	movs	r0, #1
 801488c:	f7fd fb52 	bl	8011f34 <memp_malloc>
 8014890:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d126      	bne.n	80148e6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014898:	f7ff ffcc 	bl	8014834 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801489c:	f7ff ff9a 	bl	80147d4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80148a0:	2001      	movs	r0, #1
 80148a2:	f7fd fb47 	bl	8011f34 <memp_malloc>
 80148a6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d11b      	bne.n	80148e6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80148ae:	2009      	movs	r0, #9
 80148b0:	f7ff ff46 	bl	8014740 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80148b4:	2001      	movs	r0, #1
 80148b6:	f7fd fb3d 	bl	8011f34 <memp_malloc>
 80148ba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d111      	bne.n	80148e6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80148c2:	2008      	movs	r0, #8
 80148c4:	f7ff ff3c 	bl	8014740 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80148c8:	2001      	movs	r0, #1
 80148ca:	f7fd fb33 	bl	8011f34 <memp_malloc>
 80148ce:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d107      	bne.n	80148e6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80148d6:	79fb      	ldrb	r3, [r7, #7]
 80148d8:	4618      	mov	r0, r3
 80148da:	f7ff fee3 	bl	80146a4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80148de:	2001      	movs	r0, #1
 80148e0:	f7fd fb28 	bl	8011f34 <memp_malloc>
 80148e4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d03f      	beq.n	801496c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80148ec:	229c      	movs	r2, #156	; 0x9c
 80148ee:	2100      	movs	r1, #0
 80148f0:	68f8      	ldr	r0, [r7, #12]
 80148f2:	f007 fc47 	bl	801c184 <memset>
    pcb->prio = prio;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	79fa      	ldrb	r2, [r7, #7]
 80148fa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014902:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801490c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	22ff      	movs	r2, #255	; 0xff
 801491a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014922:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	2206      	movs	r2, #6
 8014928:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2206      	movs	r2, #6
 8014930:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014938:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2201      	movs	r2, #1
 801493e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014942:	4b0d      	ldr	r3, [pc, #52]	; (8014978 <tcp_alloc+0xf8>)
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801494a:	4b0c      	ldr	r3, [pc, #48]	; (801497c <tcp_alloc+0xfc>)
 801494c:	781a      	ldrb	r2, [r3, #0]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014958:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	4a08      	ldr	r2, [pc, #32]	; (8014980 <tcp_alloc+0x100>)
 8014960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	4a07      	ldr	r2, [pc, #28]	; (8014984 <tcp_alloc+0x104>)
 8014968:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801496c:	68fb      	ldr	r3, [r7, #12]
}
 801496e:	4618      	mov	r0, r3
 8014970:	3710      	adds	r7, #16
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
 8014976:	bf00      	nop
 8014978:	2000b344 	.word	0x2000b344
 801497c:	2000451a 	.word	0x2000451a
 8014980:	08014639 	.word	0x08014639
 8014984:	006ddd00 	.word	0x006ddd00

08014988 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014992:	2040      	movs	r0, #64	; 0x40
 8014994:	f7ff ff74 	bl	8014880 <tcp_alloc>
 8014998:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801499a:	68fb      	ldr	r3, [r7, #12]
}
 801499c:	4618      	mov	r0, r3
 801499e:	3710      	adds	r7, #16
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	683a      	ldr	r2, [r7, #0]
 80149b8:	611a      	str	r2, [r3, #16]
  }
}
 80149ba:	bf00      	nop
 80149bc:	370c      	adds	r7, #12
 80149be:	46bd      	mov	sp, r7
 80149c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c4:	4770      	bx	lr
	...

080149c8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b082      	sub	sp, #8
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d00e      	beq.n	80149f6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	7d1b      	ldrb	r3, [r3, #20]
 80149dc:	2b01      	cmp	r3, #1
 80149de:	d106      	bne.n	80149ee <tcp_recv+0x26>
 80149e0:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <tcp_recv+0x38>)
 80149e2:	f240 72df 	movw	r2, #2015	; 0x7df
 80149e6:	4907      	ldr	r1, [pc, #28]	; (8014a04 <tcp_recv+0x3c>)
 80149e8:	4807      	ldr	r0, [pc, #28]	; (8014a08 <tcp_recv+0x40>)
 80149ea:	f007 fbd3 	bl	801c194 <iprintf>
    pcb->recv = recv;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	683a      	ldr	r2, [r7, #0]
 80149f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80149f6:	bf00      	nop
 80149f8:	3708      	adds	r7, #8
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	bf00      	nop
 8014a00:	0801de8c 	.word	0x0801de8c
 8014a04:	0801e428 	.word	0x0801e428
 8014a08:	0801ded0 	.word	0x0801ded0

08014a0c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d00e      	beq.n	8014a3a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	7d1b      	ldrb	r3, [r3, #20]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d106      	bne.n	8014a32 <tcp_sent+0x26>
 8014a24:	4b07      	ldr	r3, [pc, #28]	; (8014a44 <tcp_sent+0x38>)
 8014a26:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014a2a:	4907      	ldr	r1, [pc, #28]	; (8014a48 <tcp_sent+0x3c>)
 8014a2c:	4807      	ldr	r0, [pc, #28]	; (8014a4c <tcp_sent+0x40>)
 8014a2e:	f007 fbb1 	bl	801c194 <iprintf>
    pcb->sent = sent;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	683a      	ldr	r2, [r7, #0]
 8014a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014a3a:	bf00      	nop
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}
 8014a42:	bf00      	nop
 8014a44:	0801de8c 	.word	0x0801de8c
 8014a48:	0801e450 	.word	0x0801e450
 8014a4c:	0801ded0 	.word	0x0801ded0

08014a50 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b082      	sub	sp, #8
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00e      	beq.n	8014a7e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	7d1b      	ldrb	r3, [r3, #20]
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d106      	bne.n	8014a76 <tcp_err+0x26>
 8014a68:	4b07      	ldr	r3, [pc, #28]	; (8014a88 <tcp_err+0x38>)
 8014a6a:	f640 020d 	movw	r2, #2061	; 0x80d
 8014a6e:	4907      	ldr	r1, [pc, #28]	; (8014a8c <tcp_err+0x3c>)
 8014a70:	4807      	ldr	r0, [pc, #28]	; (8014a90 <tcp_err+0x40>)
 8014a72:	f007 fb8f 	bl	801c194 <iprintf>
    pcb->errf = err;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	683a      	ldr	r2, [r7, #0]
 8014a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014a7e:	bf00      	nop
 8014a80:	3708      	adds	r7, #8
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop
 8014a88:	0801de8c 	.word	0x0801de8c
 8014a8c:	0801e478 	.word	0x0801e478
 8014a90:	0801ded0 	.word	0x0801ded0

08014a94 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014a94:	b480      	push	{r7}
 8014a96:	b085      	sub	sp, #20
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
 8014a9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d008      	beq.n	8014ab6 <tcp_accept+0x22>
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	7d1b      	ldrb	r3, [r3, #20]
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d104      	bne.n	8014ab6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	619a      	str	r2, [r3, #24]
  }
}
 8014ab6:	bf00      	nop
 8014ab8:	3714      	adds	r7, #20
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr
	...

08014ac4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	60b9      	str	r1, [r7, #8]
 8014ace:	4613      	mov	r3, r2
 8014ad0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d107      	bne.n	8014ae8 <tcp_poll+0x24>
 8014ad8:	4b0e      	ldr	r3, [pc, #56]	; (8014b14 <tcp_poll+0x50>)
 8014ada:	f640 023d 	movw	r2, #2109	; 0x83d
 8014ade:	490e      	ldr	r1, [pc, #56]	; (8014b18 <tcp_poll+0x54>)
 8014ae0:	480e      	ldr	r0, [pc, #56]	; (8014b1c <tcp_poll+0x58>)
 8014ae2:	f007 fb57 	bl	801c194 <iprintf>
 8014ae6:	e011      	b.n	8014b0c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	7d1b      	ldrb	r3, [r3, #20]
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	d106      	bne.n	8014afe <tcp_poll+0x3a>
 8014af0:	4b08      	ldr	r3, [pc, #32]	; (8014b14 <tcp_poll+0x50>)
 8014af2:	f640 023e 	movw	r2, #2110	; 0x83e
 8014af6:	490a      	ldr	r1, [pc, #40]	; (8014b20 <tcp_poll+0x5c>)
 8014af8:	4808      	ldr	r0, [pc, #32]	; (8014b1c <tcp_poll+0x58>)
 8014afa:	f007 fb4b 	bl	801c194 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	68ba      	ldr	r2, [r7, #8]
 8014b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	79fa      	ldrb	r2, [r7, #7]
 8014b0a:	775a      	strb	r2, [r3, #29]
}
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	0801de8c 	.word	0x0801de8c
 8014b18:	0801e4a0 	.word	0x0801e4a0
 8014b1c:	0801ded0 	.word	0x0801ded0
 8014b20:	0801e4b8 	.word	0x0801e4b8

08014b24 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d107      	bne.n	8014b42 <tcp_pcb_purge+0x1e>
 8014b32:	4b21      	ldr	r3, [pc, #132]	; (8014bb8 <tcp_pcb_purge+0x94>)
 8014b34:	f640 0251 	movw	r2, #2129	; 0x851
 8014b38:	4920      	ldr	r1, [pc, #128]	; (8014bbc <tcp_pcb_purge+0x98>)
 8014b3a:	4821      	ldr	r0, [pc, #132]	; (8014bc0 <tcp_pcb_purge+0x9c>)
 8014b3c:	f007 fb2a 	bl	801c194 <iprintf>
 8014b40:	e037      	b.n	8014bb2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	7d1b      	ldrb	r3, [r3, #20]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d033      	beq.n	8014bb2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014b4e:	2b0a      	cmp	r3, #10
 8014b50:	d02f      	beq.n	8014bb2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d02b      	beq.n	8014bb2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d007      	beq.n	8014b72 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fe f8d6 	bl	8012d18 <pbuf_free>
      pcb->refused_data = NULL;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d002      	beq.n	8014b80 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014b7a:	6878      	ldr	r0, [r7, #4]
 8014b7c:	f000 f986 	bl	8014e8c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b86:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7ff fcdd 	bl	801454c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7ff fcd8 	bl	801454c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	66da      	str	r2, [r3, #108]	; 0x6c
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2200      	movs	r2, #0
 8014bae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014bb2:	3708      	adds	r7, #8
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	0801de8c 	.word	0x0801de8c
 8014bbc:	0801e4d8 	.word	0x0801e4d8
 8014bc0:	0801ded0 	.word	0x0801ded0

08014bc4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d106      	bne.n	8014be2 <tcp_pcb_remove+0x1e>
 8014bd4:	4b3e      	ldr	r3, [pc, #248]	; (8014cd0 <tcp_pcb_remove+0x10c>)
 8014bd6:	f640 0283 	movw	r2, #2179	; 0x883
 8014bda:	493e      	ldr	r1, [pc, #248]	; (8014cd4 <tcp_pcb_remove+0x110>)
 8014bdc:	483e      	ldr	r0, [pc, #248]	; (8014cd8 <tcp_pcb_remove+0x114>)
 8014bde:	f007 fad9 	bl	801c194 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d106      	bne.n	8014bf6 <tcp_pcb_remove+0x32>
 8014be8:	4b39      	ldr	r3, [pc, #228]	; (8014cd0 <tcp_pcb_remove+0x10c>)
 8014bea:	f640 0284 	movw	r2, #2180	; 0x884
 8014bee:	493b      	ldr	r1, [pc, #236]	; (8014cdc <tcp_pcb_remove+0x118>)
 8014bf0:	4839      	ldr	r0, [pc, #228]	; (8014cd8 <tcp_pcb_remove+0x114>)
 8014bf2:	f007 facf 	bl	801c194 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	683a      	ldr	r2, [r7, #0]
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d105      	bne.n	8014c0c <tcp_pcb_remove+0x48>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	68da      	ldr	r2, [r3, #12]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	601a      	str	r2, [r3, #0]
 8014c0a:	e013      	b.n	8014c34 <tcp_pcb_remove+0x70>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	60fb      	str	r3, [r7, #12]
 8014c12:	e00c      	b.n	8014c2e <tcp_pcb_remove+0x6a>
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	68db      	ldr	r3, [r3, #12]
 8014c18:	683a      	ldr	r2, [r7, #0]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d104      	bne.n	8014c28 <tcp_pcb_remove+0x64>
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	68da      	ldr	r2, [r3, #12]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	60da      	str	r2, [r3, #12]
 8014c26:	e005      	b.n	8014c34 <tcp_pcb_remove+0x70>
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	60fb      	str	r3, [r7, #12]
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d1ef      	bne.n	8014c14 <tcp_pcb_remove+0x50>
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	2200      	movs	r2, #0
 8014c38:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014c3a:	6838      	ldr	r0, [r7, #0]
 8014c3c:	f7ff ff72 	bl	8014b24 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	7d1b      	ldrb	r3, [r3, #20]
 8014c44:	2b0a      	cmp	r3, #10
 8014c46:	d013      	beq.n	8014c70 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014c4c:	2b01      	cmp	r3, #1
 8014c4e:	d00f      	beq.n	8014c70 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	8b5b      	ldrh	r3, [r3, #26]
 8014c54:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d009      	beq.n	8014c70 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	8b5b      	ldrh	r3, [r3, #26]
 8014c60:	f043 0302 	orr.w	r3, r3, #2
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014c6a:	6838      	ldr	r0, [r7, #0]
 8014c6c:	f003 fbc2 	bl	80183f4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	7d1b      	ldrb	r3, [r3, #20]
 8014c74:	2b01      	cmp	r3, #1
 8014c76:	d020      	beq.n	8014cba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d006      	beq.n	8014c8e <tcp_pcb_remove+0xca>
 8014c80:	4b13      	ldr	r3, [pc, #76]	; (8014cd0 <tcp_pcb_remove+0x10c>)
 8014c82:	f640 0293 	movw	r2, #2195	; 0x893
 8014c86:	4916      	ldr	r1, [pc, #88]	; (8014ce0 <tcp_pcb_remove+0x11c>)
 8014c88:	4813      	ldr	r0, [pc, #76]	; (8014cd8 <tcp_pcb_remove+0x114>)
 8014c8a:	f007 fa83 	bl	801c194 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d006      	beq.n	8014ca4 <tcp_pcb_remove+0xe0>
 8014c96:	4b0e      	ldr	r3, [pc, #56]	; (8014cd0 <tcp_pcb_remove+0x10c>)
 8014c98:	f640 0294 	movw	r2, #2196	; 0x894
 8014c9c:	4911      	ldr	r1, [pc, #68]	; (8014ce4 <tcp_pcb_remove+0x120>)
 8014c9e:	480e      	ldr	r0, [pc, #56]	; (8014cd8 <tcp_pcb_remove+0x114>)
 8014ca0:	f007 fa78 	bl	801c194 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d006      	beq.n	8014cba <tcp_pcb_remove+0xf6>
 8014cac:	4b08      	ldr	r3, [pc, #32]	; (8014cd0 <tcp_pcb_remove+0x10c>)
 8014cae:	f640 0296 	movw	r2, #2198	; 0x896
 8014cb2:	490d      	ldr	r1, [pc, #52]	; (8014ce8 <tcp_pcb_remove+0x124>)
 8014cb4:	4808      	ldr	r0, [pc, #32]	; (8014cd8 <tcp_pcb_remove+0x114>)
 8014cb6:	f007 fa6d 	bl	801c194 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014cc6:	bf00      	nop
 8014cc8:	3710      	adds	r7, #16
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	0801de8c 	.word	0x0801de8c
 8014cd4:	0801e4f4 	.word	0x0801e4f4
 8014cd8:	0801ded0 	.word	0x0801ded0
 8014cdc:	0801e510 	.word	0x0801e510
 8014ce0:	0801e530 	.word	0x0801e530
 8014ce4:	0801e548 	.word	0x0801e548
 8014ce8:	0801e564 	.word	0x0801e564

08014cec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d106      	bne.n	8014d08 <tcp_next_iss+0x1c>
 8014cfa:	4b0a      	ldr	r3, [pc, #40]	; (8014d24 <tcp_next_iss+0x38>)
 8014cfc:	f640 02af 	movw	r2, #2223	; 0x8af
 8014d00:	4909      	ldr	r1, [pc, #36]	; (8014d28 <tcp_next_iss+0x3c>)
 8014d02:	480a      	ldr	r0, [pc, #40]	; (8014d2c <tcp_next_iss+0x40>)
 8014d04:	f007 fa46 	bl	801c194 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014d08:	4b09      	ldr	r3, [pc, #36]	; (8014d30 <tcp_next_iss+0x44>)
 8014d0a:	681a      	ldr	r2, [r3, #0]
 8014d0c:	4b09      	ldr	r3, [pc, #36]	; (8014d34 <tcp_next_iss+0x48>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	4413      	add	r3, r2
 8014d12:	4a07      	ldr	r2, [pc, #28]	; (8014d30 <tcp_next_iss+0x44>)
 8014d14:	6013      	str	r3, [r2, #0]
  return iss;
 8014d16:	4b06      	ldr	r3, [pc, #24]	; (8014d30 <tcp_next_iss+0x44>)
 8014d18:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3708      	adds	r7, #8
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	bf00      	nop
 8014d24:	0801de8c 	.word	0x0801de8c
 8014d28:	0801e57c 	.word	0x0801e57c
 8014d2c:	0801ded0 	.word	0x0801ded0
 8014d30:	20000054 	.word	0x20000054
 8014d34:	2000b344 	.word	0x2000b344

08014d38 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b086      	sub	sp, #24
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	4603      	mov	r3, r0
 8014d40:	60b9      	str	r1, [r7, #8]
 8014d42:	607a      	str	r2, [r7, #4]
 8014d44:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d106      	bne.n	8014d5a <tcp_eff_send_mss_netif+0x22>
 8014d4c:	4b14      	ldr	r3, [pc, #80]	; (8014da0 <tcp_eff_send_mss_netif+0x68>)
 8014d4e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014d52:	4914      	ldr	r1, [pc, #80]	; (8014da4 <tcp_eff_send_mss_netif+0x6c>)
 8014d54:	4814      	ldr	r0, [pc, #80]	; (8014da8 <tcp_eff_send_mss_netif+0x70>)
 8014d56:	f007 fa1d 	bl	801c194 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d101      	bne.n	8014d64 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014d60:	89fb      	ldrh	r3, [r7, #14]
 8014d62:	e019      	b.n	8014d98 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014d68:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014d6a:	8afb      	ldrh	r3, [r7, #22]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d012      	beq.n	8014d96 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014d70:	2328      	movs	r3, #40	; 0x28
 8014d72:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014d74:	8afa      	ldrh	r2, [r7, #22]
 8014d76:	8abb      	ldrh	r3, [r7, #20]
 8014d78:	429a      	cmp	r2, r3
 8014d7a:	d904      	bls.n	8014d86 <tcp_eff_send_mss_netif+0x4e>
 8014d7c:	8afa      	ldrh	r2, [r7, #22]
 8014d7e:	8abb      	ldrh	r3, [r7, #20]
 8014d80:	1ad3      	subs	r3, r2, r3
 8014d82:	b29b      	uxth	r3, r3
 8014d84:	e000      	b.n	8014d88 <tcp_eff_send_mss_netif+0x50>
 8014d86:	2300      	movs	r3, #0
 8014d88:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014d8a:	8a7a      	ldrh	r2, [r7, #18]
 8014d8c:	89fb      	ldrh	r3, [r7, #14]
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	bf28      	it	cs
 8014d92:	4613      	movcs	r3, r2
 8014d94:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014d96:	89fb      	ldrh	r3, [r7, #14]
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3718      	adds	r7, #24
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bd80      	pop	{r7, pc}
 8014da0:	0801de8c 	.word	0x0801de8c
 8014da4:	0801e598 	.word	0x0801e598
 8014da8:	0801ded0 	.word	0x0801ded0

08014dac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d119      	bne.n	8014df4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014dc0:	4b10      	ldr	r3, [pc, #64]	; (8014e04 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014dc2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014dc6:	4910      	ldr	r1, [pc, #64]	; (8014e08 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014dc8:	4810      	ldr	r0, [pc, #64]	; (8014e0c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014dca:	f007 f9e3 	bl	801c194 <iprintf>

  while (pcb != NULL) {
 8014dce:	e011      	b.n	8014df4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	681a      	ldr	r2, [r3, #0]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	d108      	bne.n	8014dee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	68db      	ldr	r3, [r3, #12]
 8014de0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	f7fe fd24 	bl	8013830 <tcp_abort>
      pcb = next;
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	60fb      	str	r3, [r7, #12]
 8014dec:	e002      	b.n	8014df4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	68db      	ldr	r3, [r3, #12]
 8014df2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d1ea      	bne.n	8014dd0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014dfa:	bf00      	nop
 8014dfc:	3710      	adds	r7, #16
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}
 8014e02:	bf00      	nop
 8014e04:	0801de8c 	.word	0x0801de8c
 8014e08:	0801e5c0 	.word	0x0801e5c0
 8014e0c:	0801ded0 	.word	0x0801ded0

08014e10 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b084      	sub	sp, #16
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
 8014e18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d02a      	beq.n	8014e76 <tcp_netif_ip_addr_changed+0x66>
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d026      	beq.n	8014e76 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014e28:	4b15      	ldr	r3, [pc, #84]	; (8014e80 <tcp_netif_ip_addr_changed+0x70>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f7ff ffbc 	bl	8014dac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014e34:	4b13      	ldr	r3, [pc, #76]	; (8014e84 <tcp_netif_ip_addr_changed+0x74>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f7ff ffb6 	bl	8014dac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d017      	beq.n	8014e76 <tcp_netif_ip_addr_changed+0x66>
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d013      	beq.n	8014e76 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014e4e:	4b0e      	ldr	r3, [pc, #56]	; (8014e88 <tcp_netif_ip_addr_changed+0x78>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	60fb      	str	r3, [r7, #12]
 8014e54:	e00c      	b.n	8014e70 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d103      	bne.n	8014e6a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	681a      	ldr	r2, [r3, #0]
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	68db      	ldr	r3, [r3, #12]
 8014e6e:	60fb      	str	r3, [r7, #12]
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d1ef      	bne.n	8014e56 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014e76:	bf00      	nop
 8014e78:	3710      	adds	r7, #16
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	2000b340 	.word	0x2000b340
 8014e84:	2000b34c 	.word	0x2000b34c
 8014e88:	2000b348 	.word	0x2000b348

08014e8c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d007      	beq.n	8014eac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7ff fb53 	bl	801454c <tcp_segs_free>
    pcb->ooseq = NULL;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014eac:	bf00      	nop
 8014eae:	3708      	adds	r7, #8
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014eb4:	b590      	push	{r4, r7, lr}
 8014eb6:	b08d      	sub	sp, #52	; 0x34
 8014eb8:	af04      	add	r7, sp, #16
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d105      	bne.n	8014ed0 <tcp_input+0x1c>
 8014ec4:	4b9b      	ldr	r3, [pc, #620]	; (8015134 <tcp_input+0x280>)
 8014ec6:	2283      	movs	r2, #131	; 0x83
 8014ec8:	499b      	ldr	r1, [pc, #620]	; (8015138 <tcp_input+0x284>)
 8014eca:	489c      	ldr	r0, [pc, #624]	; (801513c <tcp_input+0x288>)
 8014ecc:	f007 f962 	bl	801c194 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	4a9a      	ldr	r2, [pc, #616]	; (8015140 <tcp_input+0x28c>)
 8014ed6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	895b      	ldrh	r3, [r3, #10]
 8014edc:	2b13      	cmp	r3, #19
 8014ede:	f240 83c4 	bls.w	801566a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014ee2:	4b98      	ldr	r3, [pc, #608]	; (8015144 <tcp_input+0x290>)
 8014ee4:	695a      	ldr	r2, [r3, #20]
 8014ee6:	4b97      	ldr	r3, [pc, #604]	; (8015144 <tcp_input+0x290>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	4619      	mov	r1, r3
 8014eec:	4610      	mov	r0, r2
 8014eee:	f006 f8a9 	bl	801b044 <ip4_addr_isbroadcast_u32>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	f040 83ba 	bne.w	801566e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014efa:	4b92      	ldr	r3, [pc, #584]	; (8015144 <tcp_input+0x290>)
 8014efc:	695b      	ldr	r3, [r3, #20]
 8014efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014f02:	2be0      	cmp	r3, #224	; 0xe0
 8014f04:	f000 83b3 	beq.w	801566e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014f08:	4b8d      	ldr	r3, [pc, #564]	; (8015140 <tcp_input+0x28c>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	899b      	ldrh	r3, [r3, #12]
 8014f0e:	b29b      	uxth	r3, r3
 8014f10:	4618      	mov	r0, r3
 8014f12:	f7fc fb23 	bl	801155c <lwip_htons>
 8014f16:	4603      	mov	r3, r0
 8014f18:	0b1b      	lsrs	r3, r3, #12
 8014f1a:	b29b      	uxth	r3, r3
 8014f1c:	b2db      	uxtb	r3, r3
 8014f1e:	009b      	lsls	r3, r3, #2
 8014f20:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014f22:	7cbb      	ldrb	r3, [r7, #18]
 8014f24:	2b13      	cmp	r3, #19
 8014f26:	f240 83a2 	bls.w	801566e <tcp_input+0x7ba>
 8014f2a:	7cbb      	ldrb	r3, [r7, #18]
 8014f2c:	b29a      	uxth	r2, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	891b      	ldrh	r3, [r3, #8]
 8014f32:	429a      	cmp	r2, r3
 8014f34:	f200 839b 	bhi.w	801566e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014f38:	7cbb      	ldrb	r3, [r7, #18]
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	3b14      	subs	r3, #20
 8014f3e:	b29a      	uxth	r2, r3
 8014f40:	4b81      	ldr	r3, [pc, #516]	; (8015148 <tcp_input+0x294>)
 8014f42:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014f44:	4b81      	ldr	r3, [pc, #516]	; (801514c <tcp_input+0x298>)
 8014f46:	2200      	movs	r2, #0
 8014f48:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	895a      	ldrh	r2, [r3, #10]
 8014f4e:	7cbb      	ldrb	r3, [r7, #18]
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	429a      	cmp	r2, r3
 8014f54:	d309      	bcc.n	8014f6a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014f56:	4b7c      	ldr	r3, [pc, #496]	; (8015148 <tcp_input+0x294>)
 8014f58:	881a      	ldrh	r2, [r3, #0]
 8014f5a:	4b7d      	ldr	r3, [pc, #500]	; (8015150 <tcp_input+0x29c>)
 8014f5c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014f5e:	7cbb      	ldrb	r3, [r7, #18]
 8014f60:	4619      	mov	r1, r3
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f7fd fe52 	bl	8012c0c <pbuf_remove_header>
 8014f68:	e04e      	b.n	8015008 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d105      	bne.n	8014f7e <tcp_input+0xca>
 8014f72:	4b70      	ldr	r3, [pc, #448]	; (8015134 <tcp_input+0x280>)
 8014f74:	22c2      	movs	r2, #194	; 0xc2
 8014f76:	4977      	ldr	r1, [pc, #476]	; (8015154 <tcp_input+0x2a0>)
 8014f78:	4870      	ldr	r0, [pc, #448]	; (801513c <tcp_input+0x288>)
 8014f7a:	f007 f90b 	bl	801c194 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014f7e:	2114      	movs	r1, #20
 8014f80:	6878      	ldr	r0, [r7, #4]
 8014f82:	f7fd fe43 	bl	8012c0c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	895a      	ldrh	r2, [r3, #10]
 8014f8a:	4b71      	ldr	r3, [pc, #452]	; (8015150 <tcp_input+0x29c>)
 8014f8c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014f8e:	4b6e      	ldr	r3, [pc, #440]	; (8015148 <tcp_input+0x294>)
 8014f90:	881a      	ldrh	r2, [r3, #0]
 8014f92:	4b6f      	ldr	r3, [pc, #444]	; (8015150 <tcp_input+0x29c>)
 8014f94:	881b      	ldrh	r3, [r3, #0]
 8014f96:	1ad3      	subs	r3, r2, r3
 8014f98:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014f9a:	4b6d      	ldr	r3, [pc, #436]	; (8015150 <tcp_input+0x29c>)
 8014f9c:	881b      	ldrh	r3, [r3, #0]
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f7fd fe33 	bl	8012c0c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	895b      	ldrh	r3, [r3, #10]
 8014fac:	8a3a      	ldrh	r2, [r7, #16]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	f200 835f 	bhi.w	8015672 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	4a64      	ldr	r2, [pc, #400]	; (801514c <tcp_input+0x298>)
 8014fbc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	8a3a      	ldrh	r2, [r7, #16]
 8014fc4:	4611      	mov	r1, r2
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7fd fe20 	bl	8012c0c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	891a      	ldrh	r2, [r3, #8]
 8014fd0:	8a3b      	ldrh	r3, [r7, #16]
 8014fd2:	1ad3      	subs	r3, r2, r3
 8014fd4:	b29a      	uxth	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	895b      	ldrh	r3, [r3, #10]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d005      	beq.n	8014fee <tcp_input+0x13a>
 8014fe2:	4b54      	ldr	r3, [pc, #336]	; (8015134 <tcp_input+0x280>)
 8014fe4:	22df      	movs	r2, #223	; 0xdf
 8014fe6:	495c      	ldr	r1, [pc, #368]	; (8015158 <tcp_input+0x2a4>)
 8014fe8:	4854      	ldr	r0, [pc, #336]	; (801513c <tcp_input+0x288>)
 8014fea:	f007 f8d3 	bl	801c194 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	891a      	ldrh	r2, [r3, #8]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	891b      	ldrh	r3, [r3, #8]
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d005      	beq.n	8015008 <tcp_input+0x154>
 8014ffc:	4b4d      	ldr	r3, [pc, #308]	; (8015134 <tcp_input+0x280>)
 8014ffe:	22e0      	movs	r2, #224	; 0xe0
 8015000:	4956      	ldr	r1, [pc, #344]	; (801515c <tcp_input+0x2a8>)
 8015002:	484e      	ldr	r0, [pc, #312]	; (801513c <tcp_input+0x288>)
 8015004:	f007 f8c6 	bl	801c194 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015008:	4b4d      	ldr	r3, [pc, #308]	; (8015140 <tcp_input+0x28c>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	881b      	ldrh	r3, [r3, #0]
 801500e:	b29a      	uxth	r2, r3
 8015010:	4b4b      	ldr	r3, [pc, #300]	; (8015140 <tcp_input+0x28c>)
 8015012:	681c      	ldr	r4, [r3, #0]
 8015014:	4610      	mov	r0, r2
 8015016:	f7fc faa1 	bl	801155c <lwip_htons>
 801501a:	4603      	mov	r3, r0
 801501c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801501e:	4b48      	ldr	r3, [pc, #288]	; (8015140 <tcp_input+0x28c>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	885b      	ldrh	r3, [r3, #2]
 8015024:	b29a      	uxth	r2, r3
 8015026:	4b46      	ldr	r3, [pc, #280]	; (8015140 <tcp_input+0x28c>)
 8015028:	681c      	ldr	r4, [r3, #0]
 801502a:	4610      	mov	r0, r2
 801502c:	f7fc fa96 	bl	801155c <lwip_htons>
 8015030:	4603      	mov	r3, r0
 8015032:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015034:	4b42      	ldr	r3, [pc, #264]	; (8015140 <tcp_input+0x28c>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	685a      	ldr	r2, [r3, #4]
 801503a:	4b41      	ldr	r3, [pc, #260]	; (8015140 <tcp_input+0x28c>)
 801503c:	681c      	ldr	r4, [r3, #0]
 801503e:	4610      	mov	r0, r2
 8015040:	f7fc faa1 	bl	8011586 <lwip_htonl>
 8015044:	4603      	mov	r3, r0
 8015046:	6063      	str	r3, [r4, #4]
 8015048:	6863      	ldr	r3, [r4, #4]
 801504a:	4a45      	ldr	r2, [pc, #276]	; (8015160 <tcp_input+0x2ac>)
 801504c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801504e:	4b3c      	ldr	r3, [pc, #240]	; (8015140 <tcp_input+0x28c>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	689a      	ldr	r2, [r3, #8]
 8015054:	4b3a      	ldr	r3, [pc, #232]	; (8015140 <tcp_input+0x28c>)
 8015056:	681c      	ldr	r4, [r3, #0]
 8015058:	4610      	mov	r0, r2
 801505a:	f7fc fa94 	bl	8011586 <lwip_htonl>
 801505e:	4603      	mov	r3, r0
 8015060:	60a3      	str	r3, [r4, #8]
 8015062:	68a3      	ldr	r3, [r4, #8]
 8015064:	4a3f      	ldr	r2, [pc, #252]	; (8015164 <tcp_input+0x2b0>)
 8015066:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015068:	4b35      	ldr	r3, [pc, #212]	; (8015140 <tcp_input+0x28c>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	89db      	ldrh	r3, [r3, #14]
 801506e:	b29a      	uxth	r2, r3
 8015070:	4b33      	ldr	r3, [pc, #204]	; (8015140 <tcp_input+0x28c>)
 8015072:	681c      	ldr	r4, [r3, #0]
 8015074:	4610      	mov	r0, r2
 8015076:	f7fc fa71 	bl	801155c <lwip_htons>
 801507a:	4603      	mov	r3, r0
 801507c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801507e:	4b30      	ldr	r3, [pc, #192]	; (8015140 <tcp_input+0x28c>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	899b      	ldrh	r3, [r3, #12]
 8015084:	b29b      	uxth	r3, r3
 8015086:	4618      	mov	r0, r3
 8015088:	f7fc fa68 	bl	801155c <lwip_htons>
 801508c:	4603      	mov	r3, r0
 801508e:	b2db      	uxtb	r3, r3
 8015090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015094:	b2da      	uxtb	r2, r3
 8015096:	4b34      	ldr	r3, [pc, #208]	; (8015168 <tcp_input+0x2b4>)
 8015098:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	891a      	ldrh	r2, [r3, #8]
 801509e:	4b33      	ldr	r3, [pc, #204]	; (801516c <tcp_input+0x2b8>)
 80150a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80150a2:	4b31      	ldr	r3, [pc, #196]	; (8015168 <tcp_input+0x2b4>)
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	f003 0303 	and.w	r3, r3, #3
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d00c      	beq.n	80150c8 <tcp_input+0x214>
    tcplen++;
 80150ae:	4b2f      	ldr	r3, [pc, #188]	; (801516c <tcp_input+0x2b8>)
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	3301      	adds	r3, #1
 80150b4:	b29a      	uxth	r2, r3
 80150b6:	4b2d      	ldr	r3, [pc, #180]	; (801516c <tcp_input+0x2b8>)
 80150b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	891a      	ldrh	r2, [r3, #8]
 80150be:	4b2b      	ldr	r3, [pc, #172]	; (801516c <tcp_input+0x2b8>)
 80150c0:	881b      	ldrh	r3, [r3, #0]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	f200 82d7 	bhi.w	8015676 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80150c8:	2300      	movs	r3, #0
 80150ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80150cc:	4b28      	ldr	r3, [pc, #160]	; (8015170 <tcp_input+0x2bc>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	61fb      	str	r3, [r7, #28]
 80150d2:	e09d      	b.n	8015210 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	7d1b      	ldrb	r3, [r3, #20]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d105      	bne.n	80150e8 <tcp_input+0x234>
 80150dc:	4b15      	ldr	r3, [pc, #84]	; (8015134 <tcp_input+0x280>)
 80150de:	22fb      	movs	r2, #251	; 0xfb
 80150e0:	4924      	ldr	r1, [pc, #144]	; (8015174 <tcp_input+0x2c0>)
 80150e2:	4816      	ldr	r0, [pc, #88]	; (801513c <tcp_input+0x288>)
 80150e4:	f007 f856 	bl	801c194 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80150e8:	69fb      	ldr	r3, [r7, #28]
 80150ea:	7d1b      	ldrb	r3, [r3, #20]
 80150ec:	2b0a      	cmp	r3, #10
 80150ee:	d105      	bne.n	80150fc <tcp_input+0x248>
 80150f0:	4b10      	ldr	r3, [pc, #64]	; (8015134 <tcp_input+0x280>)
 80150f2:	22fc      	movs	r2, #252	; 0xfc
 80150f4:	4920      	ldr	r1, [pc, #128]	; (8015178 <tcp_input+0x2c4>)
 80150f6:	4811      	ldr	r0, [pc, #68]	; (801513c <tcp_input+0x288>)
 80150f8:	f007 f84c 	bl	801c194 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	7d1b      	ldrb	r3, [r3, #20]
 8015100:	2b01      	cmp	r3, #1
 8015102:	d105      	bne.n	8015110 <tcp_input+0x25c>
 8015104:	4b0b      	ldr	r3, [pc, #44]	; (8015134 <tcp_input+0x280>)
 8015106:	22fd      	movs	r2, #253	; 0xfd
 8015108:	491c      	ldr	r1, [pc, #112]	; (801517c <tcp_input+0x2c8>)
 801510a:	480c      	ldr	r0, [pc, #48]	; (801513c <tcp_input+0x288>)
 801510c:	f007 f842 	bl	801c194 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015110:	69fb      	ldr	r3, [r7, #28]
 8015112:	7a1b      	ldrb	r3, [r3, #8]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d033      	beq.n	8015180 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	7a1a      	ldrb	r2, [r3, #8]
 801511c:	4b09      	ldr	r3, [pc, #36]	; (8015144 <tcp_input+0x290>)
 801511e:	685b      	ldr	r3, [r3, #4]
 8015120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015124:	3301      	adds	r3, #1
 8015126:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015128:	429a      	cmp	r2, r3
 801512a:	d029      	beq.n	8015180 <tcp_input+0x2cc>
      prev = pcb;
 801512c:	69fb      	ldr	r3, [r7, #28]
 801512e:	61bb      	str	r3, [r7, #24]
      continue;
 8015130:	e06b      	b.n	801520a <tcp_input+0x356>
 8015132:	bf00      	nop
 8015134:	0801e5f4 	.word	0x0801e5f4
 8015138:	0801e628 	.word	0x0801e628
 801513c:	0801e640 	.word	0x0801e640
 8015140:	2000452c 	.word	0x2000452c
 8015144:	20007c2c 	.word	0x20007c2c
 8015148:	20004530 	.word	0x20004530
 801514c:	20004534 	.word	0x20004534
 8015150:	20004532 	.word	0x20004532
 8015154:	0801e668 	.word	0x0801e668
 8015158:	0801e678 	.word	0x0801e678
 801515c:	0801e684 	.word	0x0801e684
 8015160:	2000453c 	.word	0x2000453c
 8015164:	20004540 	.word	0x20004540
 8015168:	20004548 	.word	0x20004548
 801516c:	20004546 	.word	0x20004546
 8015170:	2000b340 	.word	0x2000b340
 8015174:	0801e6a4 	.word	0x0801e6a4
 8015178:	0801e6cc 	.word	0x0801e6cc
 801517c:	0801e6f8 	.word	0x0801e6f8
    }

    if (pcb->remote_port == tcphdr->src &&
 8015180:	69fb      	ldr	r3, [r7, #28]
 8015182:	8b1a      	ldrh	r2, [r3, #24]
 8015184:	4b94      	ldr	r3, [pc, #592]	; (80153d8 <tcp_input+0x524>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	881b      	ldrh	r3, [r3, #0]
 801518a:	b29b      	uxth	r3, r3
 801518c:	429a      	cmp	r2, r3
 801518e:	d13a      	bne.n	8015206 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015190:	69fb      	ldr	r3, [r7, #28]
 8015192:	8ada      	ldrh	r2, [r3, #22]
 8015194:	4b90      	ldr	r3, [pc, #576]	; (80153d8 <tcp_input+0x524>)
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	885b      	ldrh	r3, [r3, #2]
 801519a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801519c:	429a      	cmp	r2, r3
 801519e:	d132      	bne.n	8015206 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80151a0:	69fb      	ldr	r3, [r7, #28]
 80151a2:	685a      	ldr	r2, [r3, #4]
 80151a4:	4b8d      	ldr	r3, [pc, #564]	; (80153dc <tcp_input+0x528>)
 80151a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d12c      	bne.n	8015206 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80151ac:	69fb      	ldr	r3, [r7, #28]
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	4b8a      	ldr	r3, [pc, #552]	; (80153dc <tcp_input+0x528>)
 80151b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d126      	bne.n	8015206 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80151b8:	69fb      	ldr	r3, [r7, #28]
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	69fa      	ldr	r2, [r7, #28]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d106      	bne.n	80151d0 <tcp_input+0x31c>
 80151c2:	4b87      	ldr	r3, [pc, #540]	; (80153e0 <tcp_input+0x52c>)
 80151c4:	f240 120d 	movw	r2, #269	; 0x10d
 80151c8:	4986      	ldr	r1, [pc, #536]	; (80153e4 <tcp_input+0x530>)
 80151ca:	4887      	ldr	r0, [pc, #540]	; (80153e8 <tcp_input+0x534>)
 80151cc:	f006 ffe2 	bl	801c194 <iprintf>
      if (prev != NULL) {
 80151d0:	69bb      	ldr	r3, [r7, #24]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d00a      	beq.n	80151ec <tcp_input+0x338>
        prev->next = pcb->next;
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	68da      	ldr	r2, [r3, #12]
 80151da:	69bb      	ldr	r3, [r7, #24]
 80151dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80151de:	4b83      	ldr	r3, [pc, #524]	; (80153ec <tcp_input+0x538>)
 80151e0:	681a      	ldr	r2, [r3, #0]
 80151e2:	69fb      	ldr	r3, [r7, #28]
 80151e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80151e6:	4a81      	ldr	r2, [pc, #516]	; (80153ec <tcp_input+0x538>)
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80151ec:	69fb      	ldr	r3, [r7, #28]
 80151ee:	68db      	ldr	r3, [r3, #12]
 80151f0:	69fa      	ldr	r2, [r7, #28]
 80151f2:	429a      	cmp	r2, r3
 80151f4:	d111      	bne.n	801521a <tcp_input+0x366>
 80151f6:	4b7a      	ldr	r3, [pc, #488]	; (80153e0 <tcp_input+0x52c>)
 80151f8:	f240 1215 	movw	r2, #277	; 0x115
 80151fc:	497c      	ldr	r1, [pc, #496]	; (80153f0 <tcp_input+0x53c>)
 80151fe:	487a      	ldr	r0, [pc, #488]	; (80153e8 <tcp_input+0x534>)
 8015200:	f006 ffc8 	bl	801c194 <iprintf>
      break;
 8015204:	e009      	b.n	801521a <tcp_input+0x366>
    }
    prev = pcb;
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801520a:	69fb      	ldr	r3, [r7, #28]
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	61fb      	str	r3, [r7, #28]
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	2b00      	cmp	r3, #0
 8015214:	f47f af5e 	bne.w	80150d4 <tcp_input+0x220>
 8015218:	e000      	b.n	801521c <tcp_input+0x368>
      break;
 801521a:	bf00      	nop
  }

  if (pcb == NULL) {
 801521c:	69fb      	ldr	r3, [r7, #28]
 801521e:	2b00      	cmp	r3, #0
 8015220:	f040 8095 	bne.w	801534e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015224:	4b73      	ldr	r3, [pc, #460]	; (80153f4 <tcp_input+0x540>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	61fb      	str	r3, [r7, #28]
 801522a:	e03f      	b.n	80152ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801522c:	69fb      	ldr	r3, [r7, #28]
 801522e:	7d1b      	ldrb	r3, [r3, #20]
 8015230:	2b0a      	cmp	r3, #10
 8015232:	d006      	beq.n	8015242 <tcp_input+0x38e>
 8015234:	4b6a      	ldr	r3, [pc, #424]	; (80153e0 <tcp_input+0x52c>)
 8015236:	f240 121f 	movw	r2, #287	; 0x11f
 801523a:	496f      	ldr	r1, [pc, #444]	; (80153f8 <tcp_input+0x544>)
 801523c:	486a      	ldr	r0, [pc, #424]	; (80153e8 <tcp_input+0x534>)
 801523e:	f006 ffa9 	bl	801c194 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015242:	69fb      	ldr	r3, [r7, #28]
 8015244:	7a1b      	ldrb	r3, [r3, #8]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d009      	beq.n	801525e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	7a1a      	ldrb	r2, [r3, #8]
 801524e:	4b63      	ldr	r3, [pc, #396]	; (80153dc <tcp_input+0x528>)
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015256:	3301      	adds	r3, #1
 8015258:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801525a:	429a      	cmp	r2, r3
 801525c:	d122      	bne.n	80152a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801525e:	69fb      	ldr	r3, [r7, #28]
 8015260:	8b1a      	ldrh	r2, [r3, #24]
 8015262:	4b5d      	ldr	r3, [pc, #372]	; (80153d8 <tcp_input+0x524>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	881b      	ldrh	r3, [r3, #0]
 8015268:	b29b      	uxth	r3, r3
 801526a:	429a      	cmp	r2, r3
 801526c:	d11b      	bne.n	80152a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801526e:	69fb      	ldr	r3, [r7, #28]
 8015270:	8ada      	ldrh	r2, [r3, #22]
 8015272:	4b59      	ldr	r3, [pc, #356]	; (80153d8 <tcp_input+0x524>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	885b      	ldrh	r3, [r3, #2]
 8015278:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801527a:	429a      	cmp	r2, r3
 801527c:	d113      	bne.n	80152a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801527e:	69fb      	ldr	r3, [r7, #28]
 8015280:	685a      	ldr	r2, [r3, #4]
 8015282:	4b56      	ldr	r3, [pc, #344]	; (80153dc <tcp_input+0x528>)
 8015284:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015286:	429a      	cmp	r2, r3
 8015288:	d10d      	bne.n	80152a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801528a:	69fb      	ldr	r3, [r7, #28]
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	4b53      	ldr	r3, [pc, #332]	; (80153dc <tcp_input+0x528>)
 8015290:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015292:	429a      	cmp	r2, r3
 8015294:	d107      	bne.n	80152a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015296:	69f8      	ldr	r0, [r7, #28]
 8015298:	f000 fb52 	bl	8015940 <tcp_timewait_input>
        }
        pbuf_free(p);
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7fd fd3b 	bl	8012d18 <pbuf_free>
        return;
 80152a2:	e1ee      	b.n	8015682 <tcp_input+0x7ce>
        continue;
 80152a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80152a6:	69fb      	ldr	r3, [r7, #28]
 80152a8:	68db      	ldr	r3, [r3, #12]
 80152aa:	61fb      	str	r3, [r7, #28]
 80152ac:	69fb      	ldr	r3, [r7, #28]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d1bc      	bne.n	801522c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80152b2:	2300      	movs	r3, #0
 80152b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152b6:	4b51      	ldr	r3, [pc, #324]	; (80153fc <tcp_input+0x548>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	617b      	str	r3, [r7, #20]
 80152bc:	e02a      	b.n	8015314 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80152be:	697b      	ldr	r3, [r7, #20]
 80152c0:	7a1b      	ldrb	r3, [r3, #8]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d00c      	beq.n	80152e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80152c6:	697b      	ldr	r3, [r7, #20]
 80152c8:	7a1a      	ldrb	r2, [r3, #8]
 80152ca:	4b44      	ldr	r3, [pc, #272]	; (80153dc <tcp_input+0x528>)
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152d2:	3301      	adds	r3, #1
 80152d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d002      	beq.n	80152e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	61bb      	str	r3, [r7, #24]
        continue;
 80152de:	e016      	b.n	801530e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	8ada      	ldrh	r2, [r3, #22]
 80152e4:	4b3c      	ldr	r3, [pc, #240]	; (80153d8 <tcp_input+0x524>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	885b      	ldrh	r3, [r3, #2]
 80152ea:	b29b      	uxth	r3, r3
 80152ec:	429a      	cmp	r2, r3
 80152ee:	d10c      	bne.n	801530a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	4b39      	ldr	r3, [pc, #228]	; (80153dc <tcp_input+0x528>)
 80152f6:	695b      	ldr	r3, [r3, #20]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d00f      	beq.n	801531c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d00d      	beq.n	801531e <tcp_input+0x46a>
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d009      	beq.n	801531e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801530a:	697b      	ldr	r3, [r7, #20]
 801530c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	68db      	ldr	r3, [r3, #12]
 8015312:	617b      	str	r3, [r7, #20]
 8015314:	697b      	ldr	r3, [r7, #20]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d1d1      	bne.n	80152be <tcp_input+0x40a>
 801531a:	e000      	b.n	801531e <tcp_input+0x46a>
            break;
 801531c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d014      	beq.n	801534e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015324:	69bb      	ldr	r3, [r7, #24]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d00a      	beq.n	8015340 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	68da      	ldr	r2, [r3, #12]
 801532e:	69bb      	ldr	r3, [r7, #24]
 8015330:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015332:	4b32      	ldr	r3, [pc, #200]	; (80153fc <tcp_input+0x548>)
 8015334:	681a      	ldr	r2, [r3, #0]
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801533a:	4a30      	ldr	r2, [pc, #192]	; (80153fc <tcp_input+0x548>)
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015340:	6978      	ldr	r0, [r7, #20]
 8015342:	f000 f9ff 	bl	8015744 <tcp_listen_input>
      }
      pbuf_free(p);
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7fd fce6 	bl	8012d18 <pbuf_free>
      return;
 801534c:	e199      	b.n	8015682 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	2b00      	cmp	r3, #0
 8015352:	f000 8160 	beq.w	8015616 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015356:	4b2a      	ldr	r3, [pc, #168]	; (8015400 <tcp_input+0x54c>)
 8015358:	2200      	movs	r2, #0
 801535a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	891a      	ldrh	r2, [r3, #8]
 8015360:	4b27      	ldr	r3, [pc, #156]	; (8015400 <tcp_input+0x54c>)
 8015362:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015364:	4a26      	ldr	r2, [pc, #152]	; (8015400 <tcp_input+0x54c>)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801536a:	4b1b      	ldr	r3, [pc, #108]	; (80153d8 <tcp_input+0x524>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	4a24      	ldr	r2, [pc, #144]	; (8015400 <tcp_input+0x54c>)
 8015370:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015372:	4b24      	ldr	r3, [pc, #144]	; (8015404 <tcp_input+0x550>)
 8015374:	2200      	movs	r2, #0
 8015376:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015378:	4b23      	ldr	r3, [pc, #140]	; (8015408 <tcp_input+0x554>)
 801537a:	2200      	movs	r2, #0
 801537c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801537e:	4b23      	ldr	r3, [pc, #140]	; (801540c <tcp_input+0x558>)
 8015380:	2200      	movs	r2, #0
 8015382:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015384:	4b22      	ldr	r3, [pc, #136]	; (8015410 <tcp_input+0x55c>)
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	f003 0308 	and.w	r3, r3, #8
 801538c:	2b00      	cmp	r3, #0
 801538e:	d006      	beq.n	801539e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	7b5b      	ldrb	r3, [r3, #13]
 8015394:	f043 0301 	orr.w	r3, r3, #1
 8015398:	b2da      	uxtb	r2, r3
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801539e:	69fb      	ldr	r3, [r7, #28]
 80153a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d038      	beq.n	8015418 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80153a6:	69f8      	ldr	r0, [r7, #28]
 80153a8:	f7ff f854 	bl	8014454 <tcp_process_refused_data>
 80153ac:	4603      	mov	r3, r0
 80153ae:	f113 0f0d 	cmn.w	r3, #13
 80153b2:	d007      	beq.n	80153c4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d02d      	beq.n	8015418 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80153bc:	4b15      	ldr	r3, [pc, #84]	; (8015414 <tcp_input+0x560>)
 80153be:	881b      	ldrh	r3, [r3, #0]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d029      	beq.n	8015418 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f040 8104 	bne.w	80155d6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80153ce:	69f8      	ldr	r0, [r7, #28]
 80153d0:	f003 fe28 	bl	8019024 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80153d4:	e0ff      	b.n	80155d6 <tcp_input+0x722>
 80153d6:	bf00      	nop
 80153d8:	2000452c 	.word	0x2000452c
 80153dc:	20007c2c 	.word	0x20007c2c
 80153e0:	0801e5f4 	.word	0x0801e5f4
 80153e4:	0801e720 	.word	0x0801e720
 80153e8:	0801e640 	.word	0x0801e640
 80153ec:	2000b340 	.word	0x2000b340
 80153f0:	0801e74c 	.word	0x0801e74c
 80153f4:	2000b350 	.word	0x2000b350
 80153f8:	0801e778 	.word	0x0801e778
 80153fc:	2000b348 	.word	0x2000b348
 8015400:	2000451c 	.word	0x2000451c
 8015404:	2000454c 	.word	0x2000454c
 8015408:	20004549 	.word	0x20004549
 801540c:	20004544 	.word	0x20004544
 8015410:	20004548 	.word	0x20004548
 8015414:	20004546 	.word	0x20004546
      }
    }
    tcp_input_pcb = pcb;
 8015418:	4a9b      	ldr	r2, [pc, #620]	; (8015688 <tcp_input+0x7d4>)
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801541e:	69f8      	ldr	r0, [r7, #28]
 8015420:	f000 fb0a 	bl	8015a38 <tcp_process>
 8015424:	4603      	mov	r3, r0
 8015426:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015428:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801542c:	f113 0f0d 	cmn.w	r3, #13
 8015430:	f000 80d3 	beq.w	80155da <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8015434:	4b95      	ldr	r3, [pc, #596]	; (801568c <tcp_input+0x7d8>)
 8015436:	781b      	ldrb	r3, [r3, #0]
 8015438:	f003 0308 	and.w	r3, r3, #8
 801543c:	2b00      	cmp	r3, #0
 801543e:	d015      	beq.n	801546c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015440:	69fb      	ldr	r3, [r7, #28]
 8015442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015446:	2b00      	cmp	r3, #0
 8015448:	d008      	beq.n	801545c <tcp_input+0x5a8>
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015450:	69fa      	ldr	r2, [r7, #28]
 8015452:	6912      	ldr	r2, [r2, #16]
 8015454:	f06f 010d 	mvn.w	r1, #13
 8015458:	4610      	mov	r0, r2
 801545a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801545c:	69f9      	ldr	r1, [r7, #28]
 801545e:	488c      	ldr	r0, [pc, #560]	; (8015690 <tcp_input+0x7dc>)
 8015460:	f7ff fbb0 	bl	8014bc4 <tcp_pcb_remove>
        tcp_free(pcb);
 8015464:	69f8      	ldr	r0, [r7, #28]
 8015466:	f7fd ff03 	bl	8013270 <tcp_free>
 801546a:	e0c1      	b.n	80155f0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801546c:	2300      	movs	r3, #0
 801546e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015470:	4b88      	ldr	r3, [pc, #544]	; (8015694 <tcp_input+0x7e0>)
 8015472:	881b      	ldrh	r3, [r3, #0]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d01d      	beq.n	80154b4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015478:	4b86      	ldr	r3, [pc, #536]	; (8015694 <tcp_input+0x7e0>)
 801547a:	881b      	ldrh	r3, [r3, #0]
 801547c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801547e:	69fb      	ldr	r3, [r7, #28]
 8015480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015484:	2b00      	cmp	r3, #0
 8015486:	d00a      	beq.n	801549e <tcp_input+0x5ea>
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801548e:	69fa      	ldr	r2, [r7, #28]
 8015490:	6910      	ldr	r0, [r2, #16]
 8015492:	89fa      	ldrh	r2, [r7, #14]
 8015494:	69f9      	ldr	r1, [r7, #28]
 8015496:	4798      	blx	r3
 8015498:	4603      	mov	r3, r0
 801549a:	74fb      	strb	r3, [r7, #19]
 801549c:	e001      	b.n	80154a2 <tcp_input+0x5ee>
 801549e:	2300      	movs	r3, #0
 80154a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80154a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80154a6:	f113 0f0d 	cmn.w	r3, #13
 80154aa:	f000 8098 	beq.w	80155de <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80154ae:	4b79      	ldr	r3, [pc, #484]	; (8015694 <tcp_input+0x7e0>)
 80154b0:	2200      	movs	r2, #0
 80154b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80154b4:	69f8      	ldr	r0, [r7, #28]
 80154b6:	f000 f905 	bl	80156c4 <tcp_input_delayed_close>
 80154ba:	4603      	mov	r3, r0
 80154bc:	2b00      	cmp	r3, #0
 80154be:	f040 8090 	bne.w	80155e2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80154c2:	4b75      	ldr	r3, [pc, #468]	; (8015698 <tcp_input+0x7e4>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d041      	beq.n	801554e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d006      	beq.n	80154e0 <tcp_input+0x62c>
 80154d2:	4b72      	ldr	r3, [pc, #456]	; (801569c <tcp_input+0x7e8>)
 80154d4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80154d8:	4971      	ldr	r1, [pc, #452]	; (80156a0 <tcp_input+0x7ec>)
 80154da:	4872      	ldr	r0, [pc, #456]	; (80156a4 <tcp_input+0x7f0>)
 80154dc:	f006 fe5a 	bl	801c194 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	8b5b      	ldrh	r3, [r3, #26]
 80154e4:	f003 0310 	and.w	r3, r3, #16
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d008      	beq.n	80154fe <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80154ec:	4b6a      	ldr	r3, [pc, #424]	; (8015698 <tcp_input+0x7e4>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7fd fc11 	bl	8012d18 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80154f6:	69f8      	ldr	r0, [r7, #28]
 80154f8:	f7fe f99a 	bl	8013830 <tcp_abort>
            goto aborted;
 80154fc:	e078      	b.n	80155f0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80154fe:	69fb      	ldr	r3, [r7, #28]
 8015500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015504:	2b00      	cmp	r3, #0
 8015506:	d00c      	beq.n	8015522 <tcp_input+0x66e>
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801550e:	69fb      	ldr	r3, [r7, #28]
 8015510:	6918      	ldr	r0, [r3, #16]
 8015512:	4b61      	ldr	r3, [pc, #388]	; (8015698 <tcp_input+0x7e4>)
 8015514:	681a      	ldr	r2, [r3, #0]
 8015516:	2300      	movs	r3, #0
 8015518:	69f9      	ldr	r1, [r7, #28]
 801551a:	47a0      	blx	r4
 801551c:	4603      	mov	r3, r0
 801551e:	74fb      	strb	r3, [r7, #19]
 8015520:	e008      	b.n	8015534 <tcp_input+0x680>
 8015522:	4b5d      	ldr	r3, [pc, #372]	; (8015698 <tcp_input+0x7e4>)
 8015524:	681a      	ldr	r2, [r3, #0]
 8015526:	2300      	movs	r3, #0
 8015528:	69f9      	ldr	r1, [r7, #28]
 801552a:	2000      	movs	r0, #0
 801552c:	f7ff f884 	bl	8014638 <tcp_recv_null>
 8015530:	4603      	mov	r3, r0
 8015532:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015534:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015538:	f113 0f0d 	cmn.w	r3, #13
 801553c:	d053      	beq.n	80155e6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801553e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d003      	beq.n	801554e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015546:	4b54      	ldr	r3, [pc, #336]	; (8015698 <tcp_input+0x7e4>)
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	69fb      	ldr	r3, [r7, #28]
 801554c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801554e:	4b4f      	ldr	r3, [pc, #316]	; (801568c <tcp_input+0x7d8>)
 8015550:	781b      	ldrb	r3, [r3, #0]
 8015552:	f003 0320 	and.w	r3, r3, #32
 8015556:	2b00      	cmp	r3, #0
 8015558:	d030      	beq.n	80155bc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801555e:	2b00      	cmp	r3, #0
 8015560:	d009      	beq.n	8015576 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015566:	7b5a      	ldrb	r2, [r3, #13]
 8015568:	69fb      	ldr	r3, [r7, #28]
 801556a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801556c:	f042 0220 	orr.w	r2, r2, #32
 8015570:	b2d2      	uxtb	r2, r2
 8015572:	735a      	strb	r2, [r3, #13]
 8015574:	e022      	b.n	80155bc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015576:	69fb      	ldr	r3, [r7, #28]
 8015578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801557a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801557e:	d005      	beq.n	801558c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015584:	3301      	adds	r3, #1
 8015586:	b29a      	uxth	r2, r3
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015592:	2b00      	cmp	r3, #0
 8015594:	d00b      	beq.n	80155ae <tcp_input+0x6fa>
 8015596:	69fb      	ldr	r3, [r7, #28]
 8015598:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801559c:	69fb      	ldr	r3, [r7, #28]
 801559e:	6918      	ldr	r0, [r3, #16]
 80155a0:	2300      	movs	r3, #0
 80155a2:	2200      	movs	r2, #0
 80155a4:	69f9      	ldr	r1, [r7, #28]
 80155a6:	47a0      	blx	r4
 80155a8:	4603      	mov	r3, r0
 80155aa:	74fb      	strb	r3, [r7, #19]
 80155ac:	e001      	b.n	80155b2 <tcp_input+0x6fe>
 80155ae:	2300      	movs	r3, #0
 80155b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80155b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80155b6:	f113 0f0d 	cmn.w	r3, #13
 80155ba:	d016      	beq.n	80155ea <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80155bc:	4b32      	ldr	r3, [pc, #200]	; (8015688 <tcp_input+0x7d4>)
 80155be:	2200      	movs	r2, #0
 80155c0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80155c2:	69f8      	ldr	r0, [r7, #28]
 80155c4:	f000 f87e 	bl	80156c4 <tcp_input_delayed_close>
 80155c8:	4603      	mov	r3, r0
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d10f      	bne.n	80155ee <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80155ce:	69f8      	ldr	r0, [r7, #28]
 80155d0:	f002 ff10 	bl	80183f4 <tcp_output>
 80155d4:	e00c      	b.n	80155f0 <tcp_input+0x73c>
        goto aborted;
 80155d6:	bf00      	nop
 80155d8:	e00a      	b.n	80155f0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80155da:	bf00      	nop
 80155dc:	e008      	b.n	80155f0 <tcp_input+0x73c>
              goto aborted;
 80155de:	bf00      	nop
 80155e0:	e006      	b.n	80155f0 <tcp_input+0x73c>
          goto aborted;
 80155e2:	bf00      	nop
 80155e4:	e004      	b.n	80155f0 <tcp_input+0x73c>
            goto aborted;
 80155e6:	bf00      	nop
 80155e8:	e002      	b.n	80155f0 <tcp_input+0x73c>
              goto aborted;
 80155ea:	bf00      	nop
 80155ec:	e000      	b.n	80155f0 <tcp_input+0x73c>
          goto aborted;
 80155ee:	bf00      	nop
    tcp_input_pcb = NULL;
 80155f0:	4b25      	ldr	r3, [pc, #148]	; (8015688 <tcp_input+0x7d4>)
 80155f2:	2200      	movs	r2, #0
 80155f4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80155f6:	4b28      	ldr	r3, [pc, #160]	; (8015698 <tcp_input+0x7e4>)
 80155f8:	2200      	movs	r2, #0
 80155fa:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80155fc:	4b2a      	ldr	r3, [pc, #168]	; (80156a8 <tcp_input+0x7f4>)
 80155fe:	685b      	ldr	r3, [r3, #4]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d03d      	beq.n	8015680 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8015604:	4b28      	ldr	r3, [pc, #160]	; (80156a8 <tcp_input+0x7f4>)
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	4618      	mov	r0, r3
 801560a:	f7fd fb85 	bl	8012d18 <pbuf_free>
      inseg.p = NULL;
 801560e:	4b26      	ldr	r3, [pc, #152]	; (80156a8 <tcp_input+0x7f4>)
 8015610:	2200      	movs	r2, #0
 8015612:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015614:	e034      	b.n	8015680 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015616:	4b25      	ldr	r3, [pc, #148]	; (80156ac <tcp_input+0x7f8>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	899b      	ldrh	r3, [r3, #12]
 801561c:	b29b      	uxth	r3, r3
 801561e:	4618      	mov	r0, r3
 8015620:	f7fb ff9c 	bl	801155c <lwip_htons>
 8015624:	4603      	mov	r3, r0
 8015626:	b2db      	uxtb	r3, r3
 8015628:	f003 0304 	and.w	r3, r3, #4
 801562c:	2b00      	cmp	r3, #0
 801562e:	d118      	bne.n	8015662 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015630:	4b1f      	ldr	r3, [pc, #124]	; (80156b0 <tcp_input+0x7fc>)
 8015632:	6819      	ldr	r1, [r3, #0]
 8015634:	4b1f      	ldr	r3, [pc, #124]	; (80156b4 <tcp_input+0x800>)
 8015636:	881b      	ldrh	r3, [r3, #0]
 8015638:	461a      	mov	r2, r3
 801563a:	4b1f      	ldr	r3, [pc, #124]	; (80156b8 <tcp_input+0x804>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015640:	4b1a      	ldr	r3, [pc, #104]	; (80156ac <tcp_input+0x7f8>)
 8015642:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015644:	885b      	ldrh	r3, [r3, #2]
 8015646:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015648:	4a18      	ldr	r2, [pc, #96]	; (80156ac <tcp_input+0x7f8>)
 801564a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801564c:	8812      	ldrh	r2, [r2, #0]
 801564e:	b292      	uxth	r2, r2
 8015650:	9202      	str	r2, [sp, #8]
 8015652:	9301      	str	r3, [sp, #4]
 8015654:	4b19      	ldr	r3, [pc, #100]	; (80156bc <tcp_input+0x808>)
 8015656:	9300      	str	r3, [sp, #0]
 8015658:	4b19      	ldr	r3, [pc, #100]	; (80156c0 <tcp_input+0x80c>)
 801565a:	4602      	mov	r2, r0
 801565c:	2000      	movs	r0, #0
 801565e:	f003 fc8f 	bl	8018f80 <tcp_rst>
    pbuf_free(p);
 8015662:	6878      	ldr	r0, [r7, #4]
 8015664:	f7fd fb58 	bl	8012d18 <pbuf_free>
  return;
 8015668:	e00a      	b.n	8015680 <tcp_input+0x7cc>
    goto dropped;
 801566a:	bf00      	nop
 801566c:	e004      	b.n	8015678 <tcp_input+0x7c4>
dropped:
 801566e:	bf00      	nop
 8015670:	e002      	b.n	8015678 <tcp_input+0x7c4>
      goto dropped;
 8015672:	bf00      	nop
 8015674:	e000      	b.n	8015678 <tcp_input+0x7c4>
      goto dropped;
 8015676:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f7fd fb4d 	bl	8012d18 <pbuf_free>
 801567e:	e000      	b.n	8015682 <tcp_input+0x7ce>
  return;
 8015680:	bf00      	nop
}
 8015682:	3724      	adds	r7, #36	; 0x24
 8015684:	46bd      	mov	sp, r7
 8015686:	bd90      	pop	{r4, r7, pc}
 8015688:	2000b354 	.word	0x2000b354
 801568c:	20004549 	.word	0x20004549
 8015690:	2000b340 	.word	0x2000b340
 8015694:	20004544 	.word	0x20004544
 8015698:	2000454c 	.word	0x2000454c
 801569c:	0801e5f4 	.word	0x0801e5f4
 80156a0:	0801e7a8 	.word	0x0801e7a8
 80156a4:	0801e640 	.word	0x0801e640
 80156a8:	2000451c 	.word	0x2000451c
 80156ac:	2000452c 	.word	0x2000452c
 80156b0:	20004540 	.word	0x20004540
 80156b4:	20004546 	.word	0x20004546
 80156b8:	2000453c 	.word	0x2000453c
 80156bc:	20007c3c 	.word	0x20007c3c
 80156c0:	20007c40 	.word	0x20007c40

080156c4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b082      	sub	sp, #8
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d106      	bne.n	80156e0 <tcp_input_delayed_close+0x1c>
 80156d2:	4b17      	ldr	r3, [pc, #92]	; (8015730 <tcp_input_delayed_close+0x6c>)
 80156d4:	f240 225a 	movw	r2, #602	; 0x25a
 80156d8:	4916      	ldr	r1, [pc, #88]	; (8015734 <tcp_input_delayed_close+0x70>)
 80156da:	4817      	ldr	r0, [pc, #92]	; (8015738 <tcp_input_delayed_close+0x74>)
 80156dc:	f006 fd5a 	bl	801c194 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80156e0:	4b16      	ldr	r3, [pc, #88]	; (801573c <tcp_input_delayed_close+0x78>)
 80156e2:	781b      	ldrb	r3, [r3, #0]
 80156e4:	f003 0310 	and.w	r3, r3, #16
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d01c      	beq.n	8015726 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	8b5b      	ldrh	r3, [r3, #26]
 80156f0:	f003 0310 	and.w	r3, r3, #16
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d10d      	bne.n	8015714 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d008      	beq.n	8015714 <tcp_input_delayed_close+0x50>
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015708:	687a      	ldr	r2, [r7, #4]
 801570a:	6912      	ldr	r2, [r2, #16]
 801570c:	f06f 010e 	mvn.w	r1, #14
 8015710:	4610      	mov	r0, r2
 8015712:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015714:	6879      	ldr	r1, [r7, #4]
 8015716:	480a      	ldr	r0, [pc, #40]	; (8015740 <tcp_input_delayed_close+0x7c>)
 8015718:	f7ff fa54 	bl	8014bc4 <tcp_pcb_remove>
    tcp_free(pcb);
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f7fd fda7 	bl	8013270 <tcp_free>
    return 1;
 8015722:	2301      	movs	r3, #1
 8015724:	e000      	b.n	8015728 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015726:	2300      	movs	r3, #0
}
 8015728:	4618      	mov	r0, r3
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	0801e5f4 	.word	0x0801e5f4
 8015734:	0801e7c4 	.word	0x0801e7c4
 8015738:	0801e640 	.word	0x0801e640
 801573c:	20004549 	.word	0x20004549
 8015740:	2000b340 	.word	0x2000b340

08015744 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015744:	b590      	push	{r4, r7, lr}
 8015746:	b08b      	sub	sp, #44	; 0x2c
 8015748:	af04      	add	r7, sp, #16
 801574a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801574c:	4b6f      	ldr	r3, [pc, #444]	; (801590c <tcp_listen_input+0x1c8>)
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	f003 0304 	and.w	r3, r3, #4
 8015754:	2b00      	cmp	r3, #0
 8015756:	f040 80d3 	bne.w	8015900 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d106      	bne.n	801576e <tcp_listen_input+0x2a>
 8015760:	4b6b      	ldr	r3, [pc, #428]	; (8015910 <tcp_listen_input+0x1cc>)
 8015762:	f240 2281 	movw	r2, #641	; 0x281
 8015766:	496b      	ldr	r1, [pc, #428]	; (8015914 <tcp_listen_input+0x1d0>)
 8015768:	486b      	ldr	r0, [pc, #428]	; (8015918 <tcp_listen_input+0x1d4>)
 801576a:	f006 fd13 	bl	801c194 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801576e:	4b67      	ldr	r3, [pc, #412]	; (801590c <tcp_listen_input+0x1c8>)
 8015770:	781b      	ldrb	r3, [r3, #0]
 8015772:	f003 0310 	and.w	r3, r3, #16
 8015776:	2b00      	cmp	r3, #0
 8015778:	d019      	beq.n	80157ae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801577a:	4b68      	ldr	r3, [pc, #416]	; (801591c <tcp_listen_input+0x1d8>)
 801577c:	6819      	ldr	r1, [r3, #0]
 801577e:	4b68      	ldr	r3, [pc, #416]	; (8015920 <tcp_listen_input+0x1dc>)
 8015780:	881b      	ldrh	r3, [r3, #0]
 8015782:	461a      	mov	r2, r3
 8015784:	4b67      	ldr	r3, [pc, #412]	; (8015924 <tcp_listen_input+0x1e0>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801578a:	4b67      	ldr	r3, [pc, #412]	; (8015928 <tcp_listen_input+0x1e4>)
 801578c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801578e:	885b      	ldrh	r3, [r3, #2]
 8015790:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015792:	4a65      	ldr	r2, [pc, #404]	; (8015928 <tcp_listen_input+0x1e4>)
 8015794:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015796:	8812      	ldrh	r2, [r2, #0]
 8015798:	b292      	uxth	r2, r2
 801579a:	9202      	str	r2, [sp, #8]
 801579c:	9301      	str	r3, [sp, #4]
 801579e:	4b63      	ldr	r3, [pc, #396]	; (801592c <tcp_listen_input+0x1e8>)
 80157a0:	9300      	str	r3, [sp, #0]
 80157a2:	4b63      	ldr	r3, [pc, #396]	; (8015930 <tcp_listen_input+0x1ec>)
 80157a4:	4602      	mov	r2, r0
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f003 fbea 	bl	8018f80 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80157ac:	e0aa      	b.n	8015904 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80157ae:	4b57      	ldr	r3, [pc, #348]	; (801590c <tcp_listen_input+0x1c8>)
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	f003 0302 	and.w	r3, r3, #2
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	f000 80a4 	beq.w	8015904 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	7d5b      	ldrb	r3, [r3, #21]
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7ff f85d 	bl	8014880 <tcp_alloc>
 80157c6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d111      	bne.n	80157f2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	699b      	ldr	r3, [r3, #24]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d00a      	beq.n	80157ec <tcp_listen_input+0xa8>
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	699b      	ldr	r3, [r3, #24]
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	6910      	ldr	r0, [r2, #16]
 80157de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80157e2:	2100      	movs	r1, #0
 80157e4:	4798      	blx	r3
 80157e6:	4603      	mov	r3, r0
 80157e8:	73bb      	strb	r3, [r7, #14]
      return;
 80157ea:	e08c      	b.n	8015906 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80157ec:	23f0      	movs	r3, #240	; 0xf0
 80157ee:	73bb      	strb	r3, [r7, #14]
      return;
 80157f0:	e089      	b.n	8015906 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80157f2:	4b50      	ldr	r3, [pc, #320]	; (8015934 <tcp_listen_input+0x1f0>)
 80157f4:	695a      	ldr	r2, [r3, #20]
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80157fa:	4b4e      	ldr	r3, [pc, #312]	; (8015934 <tcp_listen_input+0x1f0>)
 80157fc:	691a      	ldr	r2, [r3, #16]
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	8ada      	ldrh	r2, [r3, #22]
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801580a:	4b47      	ldr	r3, [pc, #284]	; (8015928 <tcp_listen_input+0x1e4>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	881b      	ldrh	r3, [r3, #0]
 8015810:	b29a      	uxth	r2, r3
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015816:	697b      	ldr	r3, [r7, #20]
 8015818:	2203      	movs	r2, #3
 801581a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801581c:	4b41      	ldr	r3, [pc, #260]	; (8015924 <tcp_listen_input+0x1e0>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	1c5a      	adds	r2, r3, #1
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801582e:	6978      	ldr	r0, [r7, #20]
 8015830:	f7ff fa5c 	bl	8014cec <tcp_next_iss>
 8015834:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	693a      	ldr	r2, [r7, #16]
 801583a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801583c:	697b      	ldr	r3, [r7, #20]
 801583e:	693a      	ldr	r2, [r7, #16]
 8015840:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	693a      	ldr	r2, [r7, #16]
 8015846:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	693a      	ldr	r2, [r7, #16]
 801584c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801584e:	4b35      	ldr	r3, [pc, #212]	; (8015924 <tcp_listen_input+0x1e0>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	1e5a      	subs	r2, r3, #1
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	691a      	ldr	r2, [r3, #16]
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	7a5b      	ldrb	r3, [r3, #9]
 801586a:	f003 030c 	and.w	r3, r3, #12
 801586e:	b2da      	uxtb	r2, r3
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	7a1a      	ldrb	r2, [r3, #8]
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801587c:	4b2e      	ldr	r3, [pc, #184]	; (8015938 <tcp_listen_input+0x1f4>)
 801587e:	681a      	ldr	r2, [r3, #0]
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	60da      	str	r2, [r3, #12]
 8015884:	4a2c      	ldr	r2, [pc, #176]	; (8015938 <tcp_listen_input+0x1f4>)
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	6013      	str	r3, [r2, #0]
 801588a:	f003 fd3b 	bl	8019304 <tcp_timer_needed>
 801588e:	4b2b      	ldr	r3, [pc, #172]	; (801593c <tcp_listen_input+0x1f8>)
 8015890:	2201      	movs	r2, #1
 8015892:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015894:	6978      	ldr	r0, [r7, #20]
 8015896:	f001 fd8f 	bl	80173b8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801589a:	4b23      	ldr	r3, [pc, #140]	; (8015928 <tcp_listen_input+0x1e4>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	89db      	ldrh	r3, [r3, #14]
 80158a0:	b29a      	uxth	r2, r3
 80158a2:	697b      	ldr	r3, [r7, #20]
 80158a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80158ae:	697b      	ldr	r3, [r7, #20]
 80158b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80158b8:	697b      	ldr	r3, [r7, #20]
 80158ba:	3304      	adds	r3, #4
 80158bc:	4618      	mov	r0, r3
 80158be:	f005 f92d 	bl	801ab1c <ip4_route>
 80158c2:	4601      	mov	r1, r0
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	3304      	adds	r3, #4
 80158c8:	461a      	mov	r2, r3
 80158ca:	4620      	mov	r0, r4
 80158cc:	f7ff fa34 	bl	8014d38 <tcp_eff_send_mss_netif>
 80158d0:	4603      	mov	r3, r0
 80158d2:	461a      	mov	r2, r3
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80158d8:	2112      	movs	r1, #18
 80158da:	6978      	ldr	r0, [r7, #20]
 80158dc:	f002 fc9c 	bl	8018218 <tcp_enqueue_flags>
 80158e0:	4603      	mov	r3, r0
 80158e2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80158e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d004      	beq.n	80158f6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80158ec:	2100      	movs	r1, #0
 80158ee:	6978      	ldr	r0, [r7, #20]
 80158f0:	f7fd fee0 	bl	80136b4 <tcp_abandon>
      return;
 80158f4:	e007      	b.n	8015906 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80158f6:	6978      	ldr	r0, [r7, #20]
 80158f8:	f002 fd7c 	bl	80183f4 <tcp_output>
  return;
 80158fc:	bf00      	nop
 80158fe:	e001      	b.n	8015904 <tcp_listen_input+0x1c0>
    return;
 8015900:	bf00      	nop
 8015902:	e000      	b.n	8015906 <tcp_listen_input+0x1c2>
  return;
 8015904:	bf00      	nop
}
 8015906:	371c      	adds	r7, #28
 8015908:	46bd      	mov	sp, r7
 801590a:	bd90      	pop	{r4, r7, pc}
 801590c:	20004548 	.word	0x20004548
 8015910:	0801e5f4 	.word	0x0801e5f4
 8015914:	0801e7ec 	.word	0x0801e7ec
 8015918:	0801e640 	.word	0x0801e640
 801591c:	20004540 	.word	0x20004540
 8015920:	20004546 	.word	0x20004546
 8015924:	2000453c 	.word	0x2000453c
 8015928:	2000452c 	.word	0x2000452c
 801592c:	20007c3c 	.word	0x20007c3c
 8015930:	20007c40 	.word	0x20007c40
 8015934:	20007c2c 	.word	0x20007c2c
 8015938:	2000b340 	.word	0x2000b340
 801593c:	2000b33c 	.word	0x2000b33c

08015940 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b086      	sub	sp, #24
 8015944:	af04      	add	r7, sp, #16
 8015946:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015948:	4b30      	ldr	r3, [pc, #192]	; (8015a0c <tcp_timewait_input+0xcc>)
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	f003 0304 	and.w	r3, r3, #4
 8015950:	2b00      	cmp	r3, #0
 8015952:	d154      	bne.n	80159fe <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d106      	bne.n	8015968 <tcp_timewait_input+0x28>
 801595a:	4b2d      	ldr	r3, [pc, #180]	; (8015a10 <tcp_timewait_input+0xd0>)
 801595c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015960:	492c      	ldr	r1, [pc, #176]	; (8015a14 <tcp_timewait_input+0xd4>)
 8015962:	482d      	ldr	r0, [pc, #180]	; (8015a18 <tcp_timewait_input+0xd8>)
 8015964:	f006 fc16 	bl	801c194 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015968:	4b28      	ldr	r3, [pc, #160]	; (8015a0c <tcp_timewait_input+0xcc>)
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	f003 0302 	and.w	r3, r3, #2
 8015970:	2b00      	cmp	r3, #0
 8015972:	d02a      	beq.n	80159ca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015974:	4b29      	ldr	r3, [pc, #164]	; (8015a1c <tcp_timewait_input+0xdc>)
 8015976:	681a      	ldr	r2, [r3, #0]
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801597c:	1ad3      	subs	r3, r2, r3
 801597e:	2b00      	cmp	r3, #0
 8015980:	db2d      	blt.n	80159de <tcp_timewait_input+0x9e>
 8015982:	4b26      	ldr	r3, [pc, #152]	; (8015a1c <tcp_timewait_input+0xdc>)
 8015984:	681a      	ldr	r2, [r3, #0]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801598a:	6879      	ldr	r1, [r7, #4]
 801598c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801598e:	440b      	add	r3, r1
 8015990:	1ad3      	subs	r3, r2, r3
 8015992:	2b00      	cmp	r3, #0
 8015994:	dc23      	bgt.n	80159de <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015996:	4b22      	ldr	r3, [pc, #136]	; (8015a20 <tcp_timewait_input+0xe0>)
 8015998:	6819      	ldr	r1, [r3, #0]
 801599a:	4b22      	ldr	r3, [pc, #136]	; (8015a24 <tcp_timewait_input+0xe4>)
 801599c:	881b      	ldrh	r3, [r3, #0]
 801599e:	461a      	mov	r2, r3
 80159a0:	4b1e      	ldr	r3, [pc, #120]	; (8015a1c <tcp_timewait_input+0xdc>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80159a6:	4b20      	ldr	r3, [pc, #128]	; (8015a28 <tcp_timewait_input+0xe8>)
 80159a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80159aa:	885b      	ldrh	r3, [r3, #2]
 80159ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80159ae:	4a1e      	ldr	r2, [pc, #120]	; (8015a28 <tcp_timewait_input+0xe8>)
 80159b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80159b2:	8812      	ldrh	r2, [r2, #0]
 80159b4:	b292      	uxth	r2, r2
 80159b6:	9202      	str	r2, [sp, #8]
 80159b8:	9301      	str	r3, [sp, #4]
 80159ba:	4b1c      	ldr	r3, [pc, #112]	; (8015a2c <tcp_timewait_input+0xec>)
 80159bc:	9300      	str	r3, [sp, #0]
 80159be:	4b1c      	ldr	r3, [pc, #112]	; (8015a30 <tcp_timewait_input+0xf0>)
 80159c0:	4602      	mov	r2, r0
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f003 fadc 	bl	8018f80 <tcp_rst>
      return;
 80159c8:	e01c      	b.n	8015a04 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80159ca:	4b10      	ldr	r3, [pc, #64]	; (8015a0c <tcp_timewait_input+0xcc>)
 80159cc:	781b      	ldrb	r3, [r3, #0]
 80159ce:	f003 0301 	and.w	r3, r3, #1
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d003      	beq.n	80159de <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80159d6:	4b17      	ldr	r3, [pc, #92]	; (8015a34 <tcp_timewait_input+0xf4>)
 80159d8:	681a      	ldr	r2, [r3, #0]
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80159de:	4b11      	ldr	r3, [pc, #68]	; (8015a24 <tcp_timewait_input+0xe4>)
 80159e0:	881b      	ldrh	r3, [r3, #0]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d00d      	beq.n	8015a02 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	8b5b      	ldrh	r3, [r3, #26]
 80159ea:	f043 0302 	orr.w	r3, r3, #2
 80159ee:	b29a      	uxth	r2, r3
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f002 fcfd 	bl	80183f4 <tcp_output>
  }
  return;
 80159fa:	bf00      	nop
 80159fc:	e001      	b.n	8015a02 <tcp_timewait_input+0xc2>
    return;
 80159fe:	bf00      	nop
 8015a00:	e000      	b.n	8015a04 <tcp_timewait_input+0xc4>
  return;
 8015a02:	bf00      	nop
}
 8015a04:	3708      	adds	r7, #8
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}
 8015a0a:	bf00      	nop
 8015a0c:	20004548 	.word	0x20004548
 8015a10:	0801e5f4 	.word	0x0801e5f4
 8015a14:	0801e80c 	.word	0x0801e80c
 8015a18:	0801e640 	.word	0x0801e640
 8015a1c:	2000453c 	.word	0x2000453c
 8015a20:	20004540 	.word	0x20004540
 8015a24:	20004546 	.word	0x20004546
 8015a28:	2000452c 	.word	0x2000452c
 8015a2c:	20007c3c 	.word	0x20007c3c
 8015a30:	20007c40 	.word	0x20007c40
 8015a34:	2000b344 	.word	0x2000b344

08015a38 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015a38:	b590      	push	{r4, r7, lr}
 8015a3a:	b08d      	sub	sp, #52	; 0x34
 8015a3c:	af04      	add	r7, sp, #16
 8015a3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015a40:	2300      	movs	r3, #0
 8015a42:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015a44:	2300      	movs	r3, #0
 8015a46:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d106      	bne.n	8015a5c <tcp_process+0x24>
 8015a4e:	4ba5      	ldr	r3, [pc, #660]	; (8015ce4 <tcp_process+0x2ac>)
 8015a50:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015a54:	49a4      	ldr	r1, [pc, #656]	; (8015ce8 <tcp_process+0x2b0>)
 8015a56:	48a5      	ldr	r0, [pc, #660]	; (8015cec <tcp_process+0x2b4>)
 8015a58:	f006 fb9c 	bl	801c194 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015a5c:	4ba4      	ldr	r3, [pc, #656]	; (8015cf0 <tcp_process+0x2b8>)
 8015a5e:	781b      	ldrb	r3, [r3, #0]
 8015a60:	f003 0304 	and.w	r3, r3, #4
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d04e      	beq.n	8015b06 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	7d1b      	ldrb	r3, [r3, #20]
 8015a6c:	2b02      	cmp	r3, #2
 8015a6e:	d108      	bne.n	8015a82 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a74:	4b9f      	ldr	r3, [pc, #636]	; (8015cf4 <tcp_process+0x2bc>)
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d123      	bne.n	8015ac4 <tcp_process+0x8c>
        acceptable = 1;
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	76fb      	strb	r3, [r7, #27]
 8015a80:	e020      	b.n	8015ac4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a86:	4b9c      	ldr	r3, [pc, #624]	; (8015cf8 <tcp_process+0x2c0>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	d102      	bne.n	8015a94 <tcp_process+0x5c>
        acceptable = 1;
 8015a8e:	2301      	movs	r3, #1
 8015a90:	76fb      	strb	r3, [r7, #27]
 8015a92:	e017      	b.n	8015ac4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015a94:	4b98      	ldr	r3, [pc, #608]	; (8015cf8 <tcp_process+0x2c0>)
 8015a96:	681a      	ldr	r2, [r3, #0]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a9c:	1ad3      	subs	r3, r2, r3
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	db10      	blt.n	8015ac4 <tcp_process+0x8c>
 8015aa2:	4b95      	ldr	r3, [pc, #596]	; (8015cf8 <tcp_process+0x2c0>)
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aaa:	6879      	ldr	r1, [r7, #4]
 8015aac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015aae:	440b      	add	r3, r1
 8015ab0:	1ad3      	subs	r3, r2, r3
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	dc06      	bgt.n	8015ac4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	8b5b      	ldrh	r3, [r3, #26]
 8015aba:	f043 0302 	orr.w	r3, r3, #2
 8015abe:	b29a      	uxth	r2, r3
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015ac4:	7efb      	ldrb	r3, [r7, #27]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d01b      	beq.n	8015b02 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	7d1b      	ldrb	r3, [r3, #20]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d106      	bne.n	8015ae0 <tcp_process+0xa8>
 8015ad2:	4b84      	ldr	r3, [pc, #528]	; (8015ce4 <tcp_process+0x2ac>)
 8015ad4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015ad8:	4988      	ldr	r1, [pc, #544]	; (8015cfc <tcp_process+0x2c4>)
 8015ada:	4884      	ldr	r0, [pc, #528]	; (8015cec <tcp_process+0x2b4>)
 8015adc:	f006 fb5a 	bl	801c194 <iprintf>
      recv_flags |= TF_RESET;
 8015ae0:	4b87      	ldr	r3, [pc, #540]	; (8015d00 <tcp_process+0x2c8>)
 8015ae2:	781b      	ldrb	r3, [r3, #0]
 8015ae4:	f043 0308 	orr.w	r3, r3, #8
 8015ae8:	b2da      	uxtb	r2, r3
 8015aea:	4b85      	ldr	r3, [pc, #532]	; (8015d00 <tcp_process+0x2c8>)
 8015aec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	8b5b      	ldrh	r3, [r3, #26]
 8015af2:	f023 0301 	bic.w	r3, r3, #1
 8015af6:	b29a      	uxth	r2, r3
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015afc:	f06f 030d 	mvn.w	r3, #13
 8015b00:	e37a      	b.n	80161f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015b02:	2300      	movs	r3, #0
 8015b04:	e378      	b.n	80161f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015b06:	4b7a      	ldr	r3, [pc, #488]	; (8015cf0 <tcp_process+0x2b8>)
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	f003 0302 	and.w	r3, r3, #2
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d010      	beq.n	8015b34 <tcp_process+0xfc>
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	7d1b      	ldrb	r3, [r3, #20]
 8015b16:	2b02      	cmp	r3, #2
 8015b18:	d00c      	beq.n	8015b34 <tcp_process+0xfc>
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	7d1b      	ldrb	r3, [r3, #20]
 8015b1e:	2b03      	cmp	r3, #3
 8015b20:	d008      	beq.n	8015b34 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	8b5b      	ldrh	r3, [r3, #26]
 8015b26:	f043 0302 	orr.w	r3, r3, #2
 8015b2a:	b29a      	uxth	r2, r3
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015b30:	2300      	movs	r3, #0
 8015b32:	e361      	b.n	80161f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	8b5b      	ldrh	r3, [r3, #26]
 8015b38:	f003 0310 	and.w	r3, r3, #16
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d103      	bne.n	8015b48 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015b40:	4b70      	ldr	r3, [pc, #448]	; (8015d04 <tcp_process+0x2cc>)
 8015b42:	681a      	ldr	r2, [r3, #0]
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2200      	movs	r2, #0
 8015b54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f001 fc2d 	bl	80173b8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	7d1b      	ldrb	r3, [r3, #20]
 8015b62:	3b02      	subs	r3, #2
 8015b64:	2b07      	cmp	r3, #7
 8015b66:	f200 8337 	bhi.w	80161d8 <tcp_process+0x7a0>
 8015b6a:	a201      	add	r2, pc, #4	; (adr r2, 8015b70 <tcp_process+0x138>)
 8015b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b70:	08015b91 	.word	0x08015b91
 8015b74:	08015dc1 	.word	0x08015dc1
 8015b78:	08015f39 	.word	0x08015f39
 8015b7c:	08015f63 	.word	0x08015f63
 8015b80:	08016087 	.word	0x08016087
 8015b84:	08015f39 	.word	0x08015f39
 8015b88:	08016113 	.word	0x08016113
 8015b8c:	080161a3 	.word	0x080161a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015b90:	4b57      	ldr	r3, [pc, #348]	; (8015cf0 <tcp_process+0x2b8>)
 8015b92:	781b      	ldrb	r3, [r3, #0]
 8015b94:	f003 0310 	and.w	r3, r3, #16
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	f000 80e4 	beq.w	8015d66 <tcp_process+0x32e>
 8015b9e:	4b54      	ldr	r3, [pc, #336]	; (8015cf0 <tcp_process+0x2b8>)
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	f003 0302 	and.w	r3, r3, #2
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	f000 80dd 	beq.w	8015d66 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015bb0:	1c5a      	adds	r2, r3, #1
 8015bb2:	4b50      	ldr	r3, [pc, #320]	; (8015cf4 <tcp_process+0x2bc>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	f040 80d5 	bne.w	8015d66 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015bbc:	4b4e      	ldr	r3, [pc, #312]	; (8015cf8 <tcp_process+0x2c0>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	1c5a      	adds	r2, r3, #1
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015bce:	4b49      	ldr	r3, [pc, #292]	; (8015cf4 <tcp_process+0x2bc>)
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015bd6:	4b4c      	ldr	r3, [pc, #304]	; (8015d08 <tcp_process+0x2d0>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	89db      	ldrh	r3, [r3, #14]
 8015bdc:	b29a      	uxth	r2, r3
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015bf0:	4b41      	ldr	r3, [pc, #260]	; (8015cf8 <tcp_process+0x2c0>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	1e5a      	subs	r2, r3, #1
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	2204      	movs	r2, #4
 8015bfe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	3304      	adds	r3, #4
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f004 ff87 	bl	801ab1c <ip4_route>
 8015c0e:	4601      	mov	r1, r0
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	3304      	adds	r3, #4
 8015c14:	461a      	mov	r2, r3
 8015c16:	4620      	mov	r0, r4
 8015c18:	f7ff f88e 	bl	8014d38 <tcp_eff_send_mss_netif>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	461a      	mov	r2, r3
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c28:	009a      	lsls	r2, r3, #2
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c2e:	005b      	lsls	r3, r3, #1
 8015c30:	f241 111c 	movw	r1, #4380	; 0x111c
 8015c34:	428b      	cmp	r3, r1
 8015c36:	bf38      	it	cc
 8015c38:	460b      	movcc	r3, r1
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d204      	bcs.n	8015c48 <tcp_process+0x210>
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c42:	009b      	lsls	r3, r3, #2
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	e00d      	b.n	8015c64 <tcp_process+0x22c>
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c4c:	005b      	lsls	r3, r3, #1
 8015c4e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015c52:	4293      	cmp	r3, r2
 8015c54:	d904      	bls.n	8015c60 <tcp_process+0x228>
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c5a:	005b      	lsls	r3, r3, #1
 8015c5c:	b29b      	uxth	r3, r3
 8015c5e:	e001      	b.n	8015c64 <tcp_process+0x22c>
 8015c60:	f241 131c 	movw	r3, #4380	; 0x111c
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d106      	bne.n	8015c82 <tcp_process+0x24a>
 8015c74:	4b1b      	ldr	r3, [pc, #108]	; (8015ce4 <tcp_process+0x2ac>)
 8015c76:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015c7a:	4924      	ldr	r1, [pc, #144]	; (8015d0c <tcp_process+0x2d4>)
 8015c7c:	481b      	ldr	r0, [pc, #108]	; (8015cec <tcp_process+0x2b4>)
 8015c7e:	f006 fa89 	bl	801c194 <iprintf>
        --pcb->snd_queuelen;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c88:	3b01      	subs	r3, #1
 8015c8a:	b29a      	uxth	r2, r3
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c96:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d111      	bne.n	8015cc2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ca2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d106      	bne.n	8015cb8 <tcp_process+0x280>
 8015caa:	4b0e      	ldr	r3, [pc, #56]	; (8015ce4 <tcp_process+0x2ac>)
 8015cac:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015cb0:	4917      	ldr	r1, [pc, #92]	; (8015d10 <tcp_process+0x2d8>)
 8015cb2:	480e      	ldr	r0, [pc, #56]	; (8015cec <tcp_process+0x2b4>)
 8015cb4:	f006 fa6e 	bl	801c194 <iprintf>
          pcb->unsent = rseg->next;
 8015cb8:	69fb      	ldr	r3, [r7, #28]
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	66da      	str	r2, [r3, #108]	; 0x6c
 8015cc0:	e003      	b.n	8015cca <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8015cc2:	69fb      	ldr	r3, [r7, #28]
 8015cc4:	681a      	ldr	r2, [r3, #0]
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015cca:	69f8      	ldr	r0, [r7, #28]
 8015ccc:	f7fe fc52 	bl	8014574 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d11d      	bne.n	8015d14 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015cde:	861a      	strh	r2, [r3, #48]	; 0x30
 8015ce0:	e01f      	b.n	8015d22 <tcp_process+0x2ea>
 8015ce2:	bf00      	nop
 8015ce4:	0801e5f4 	.word	0x0801e5f4
 8015ce8:	0801e82c 	.word	0x0801e82c
 8015cec:	0801e640 	.word	0x0801e640
 8015cf0:	20004548 	.word	0x20004548
 8015cf4:	20004540 	.word	0x20004540
 8015cf8:	2000453c 	.word	0x2000453c
 8015cfc:	0801e848 	.word	0x0801e848
 8015d00:	20004549 	.word	0x20004549
 8015d04:	2000b344 	.word	0x2000b344
 8015d08:	2000452c 	.word	0x2000452c
 8015d0c:	0801e868 	.word	0x0801e868
 8015d10:	0801e880 	.word	0x0801e880
        } else {
          pcb->rtime = 0;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	2200      	movs	r2, #0
 8015d18:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d00a      	beq.n	8015d42 <tcp_process+0x30a>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015d32:	687a      	ldr	r2, [r7, #4]
 8015d34:	6910      	ldr	r0, [r2, #16]
 8015d36:	2200      	movs	r2, #0
 8015d38:	6879      	ldr	r1, [r7, #4]
 8015d3a:	4798      	blx	r3
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	76bb      	strb	r3, [r7, #26]
 8015d40:	e001      	b.n	8015d46 <tcp_process+0x30e>
 8015d42:	2300      	movs	r3, #0
 8015d44:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015d46:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015d4a:	f113 0f0d 	cmn.w	r3, #13
 8015d4e:	d102      	bne.n	8015d56 <tcp_process+0x31e>
          return ERR_ABRT;
 8015d50:	f06f 030c 	mvn.w	r3, #12
 8015d54:	e250      	b.n	80161f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	8b5b      	ldrh	r3, [r3, #26]
 8015d5a:	f043 0302 	orr.w	r3, r3, #2
 8015d5e:	b29a      	uxth	r2, r3
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015d64:	e23a      	b.n	80161dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015d66:	4b9d      	ldr	r3, [pc, #628]	; (8015fdc <tcp_process+0x5a4>)
 8015d68:	781b      	ldrb	r3, [r3, #0]
 8015d6a:	f003 0310 	and.w	r3, r3, #16
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	f000 8234 	beq.w	80161dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d74:	4b9a      	ldr	r3, [pc, #616]	; (8015fe0 <tcp_process+0x5a8>)
 8015d76:	6819      	ldr	r1, [r3, #0]
 8015d78:	4b9a      	ldr	r3, [pc, #616]	; (8015fe4 <tcp_process+0x5ac>)
 8015d7a:	881b      	ldrh	r3, [r3, #0]
 8015d7c:	461a      	mov	r2, r3
 8015d7e:	4b9a      	ldr	r3, [pc, #616]	; (8015fe8 <tcp_process+0x5b0>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d84:	4b99      	ldr	r3, [pc, #612]	; (8015fec <tcp_process+0x5b4>)
 8015d86:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d88:	885b      	ldrh	r3, [r3, #2]
 8015d8a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d8c:	4a97      	ldr	r2, [pc, #604]	; (8015fec <tcp_process+0x5b4>)
 8015d8e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d90:	8812      	ldrh	r2, [r2, #0]
 8015d92:	b292      	uxth	r2, r2
 8015d94:	9202      	str	r2, [sp, #8]
 8015d96:	9301      	str	r3, [sp, #4]
 8015d98:	4b95      	ldr	r3, [pc, #596]	; (8015ff0 <tcp_process+0x5b8>)
 8015d9a:	9300      	str	r3, [sp, #0]
 8015d9c:	4b95      	ldr	r3, [pc, #596]	; (8015ff4 <tcp_process+0x5bc>)
 8015d9e:	4602      	mov	r2, r0
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f003 f8ed 	bl	8018f80 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015dac:	2b05      	cmp	r3, #5
 8015dae:	f200 8215 	bhi.w	80161dc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2200      	movs	r2, #0
 8015db6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015db8:	6878      	ldr	r0, [r7, #4]
 8015dba:	f002 feab 	bl	8018b14 <tcp_rexmit_rto>
      break;
 8015dbe:	e20d      	b.n	80161dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015dc0:	4b86      	ldr	r3, [pc, #536]	; (8015fdc <tcp_process+0x5a4>)
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	f003 0310 	and.w	r3, r3, #16
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	f000 80a1 	beq.w	8015f10 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015dce:	4b84      	ldr	r3, [pc, #528]	; (8015fe0 <tcp_process+0x5a8>)
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dd6:	1ad3      	subs	r3, r2, r3
 8015dd8:	3b01      	subs	r3, #1
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	db7e      	blt.n	8015edc <tcp_process+0x4a4>
 8015dde:	4b80      	ldr	r3, [pc, #512]	; (8015fe0 <tcp_process+0x5a8>)
 8015de0:	681a      	ldr	r2, [r3, #0]
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015de6:	1ad3      	subs	r3, r2, r3
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	dc77      	bgt.n	8015edc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2204      	movs	r2, #4
 8015df0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d102      	bne.n	8015e00 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015dfa:	23fa      	movs	r3, #250	; 0xfa
 8015dfc:	76bb      	strb	r3, [r7, #26]
 8015dfe:	e01d      	b.n	8015e3c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e04:	699b      	ldr	r3, [r3, #24]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d106      	bne.n	8015e18 <tcp_process+0x3e0>
 8015e0a:	4b7b      	ldr	r3, [pc, #492]	; (8015ff8 <tcp_process+0x5c0>)
 8015e0c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015e10:	497a      	ldr	r1, [pc, #488]	; (8015ffc <tcp_process+0x5c4>)
 8015e12:	487b      	ldr	r0, [pc, #492]	; (8016000 <tcp_process+0x5c8>)
 8015e14:	f006 f9be 	bl	801c194 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e1c:	699b      	ldr	r3, [r3, #24]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d00a      	beq.n	8015e38 <tcp_process+0x400>
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015e26:	699b      	ldr	r3, [r3, #24]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	6910      	ldr	r0, [r2, #16]
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	6879      	ldr	r1, [r7, #4]
 8015e30:	4798      	blx	r3
 8015e32:	4603      	mov	r3, r0
 8015e34:	76bb      	strb	r3, [r7, #26]
 8015e36:	e001      	b.n	8015e3c <tcp_process+0x404>
 8015e38:	23f0      	movs	r3, #240	; 0xf0
 8015e3a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015e3c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d00a      	beq.n	8015e5a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015e44:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015e48:	f113 0f0d 	cmn.w	r3, #13
 8015e4c:	d002      	beq.n	8015e54 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f7fd fcee 	bl	8013830 <tcp_abort>
            }
            return ERR_ABRT;
 8015e54:	f06f 030c 	mvn.w	r3, #12
 8015e58:	e1ce      	b.n	80161f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f000 fae0 	bl	8016420 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015e60:	4b68      	ldr	r3, [pc, #416]	; (8016004 <tcp_process+0x5cc>)
 8015e62:	881b      	ldrh	r3, [r3, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d005      	beq.n	8015e74 <tcp_process+0x43c>
            recv_acked--;
 8015e68:	4b66      	ldr	r3, [pc, #408]	; (8016004 <tcp_process+0x5cc>)
 8015e6a:	881b      	ldrh	r3, [r3, #0]
 8015e6c:	3b01      	subs	r3, #1
 8015e6e:	b29a      	uxth	r2, r3
 8015e70:	4b64      	ldr	r3, [pc, #400]	; (8016004 <tcp_process+0x5cc>)
 8015e72:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e78:	009a      	lsls	r2, r3, #2
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e7e:	005b      	lsls	r3, r3, #1
 8015e80:	f241 111c 	movw	r1, #4380	; 0x111c
 8015e84:	428b      	cmp	r3, r1
 8015e86:	bf38      	it	cc
 8015e88:	460b      	movcc	r3, r1
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d204      	bcs.n	8015e98 <tcp_process+0x460>
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	b29b      	uxth	r3, r3
 8015e96:	e00d      	b.n	8015eb4 <tcp_process+0x47c>
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e9c:	005b      	lsls	r3, r3, #1
 8015e9e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015ea2:	4293      	cmp	r3, r2
 8015ea4:	d904      	bls.n	8015eb0 <tcp_process+0x478>
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015eaa:	005b      	lsls	r3, r3, #1
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	e001      	b.n	8015eb4 <tcp_process+0x47c>
 8015eb0:	f241 131c 	movw	r3, #4380	; 0x111c
 8015eb4:	687a      	ldr	r2, [r7, #4]
 8015eb6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015eba:	4b53      	ldr	r3, [pc, #332]	; (8016008 <tcp_process+0x5d0>)
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	f003 0320 	and.w	r3, r3, #32
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d037      	beq.n	8015f36 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	8b5b      	ldrh	r3, [r3, #26]
 8015eca:	f043 0302 	orr.w	r3, r3, #2
 8015ece:	b29a      	uxth	r2, r3
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2207      	movs	r2, #7
 8015ed8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015eda:	e02c      	b.n	8015f36 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015edc:	4b40      	ldr	r3, [pc, #256]	; (8015fe0 <tcp_process+0x5a8>)
 8015ede:	6819      	ldr	r1, [r3, #0]
 8015ee0:	4b40      	ldr	r3, [pc, #256]	; (8015fe4 <tcp_process+0x5ac>)
 8015ee2:	881b      	ldrh	r3, [r3, #0]
 8015ee4:	461a      	mov	r2, r3
 8015ee6:	4b40      	ldr	r3, [pc, #256]	; (8015fe8 <tcp_process+0x5b0>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015eec:	4b3f      	ldr	r3, [pc, #252]	; (8015fec <tcp_process+0x5b4>)
 8015eee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ef0:	885b      	ldrh	r3, [r3, #2]
 8015ef2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ef4:	4a3d      	ldr	r2, [pc, #244]	; (8015fec <tcp_process+0x5b4>)
 8015ef6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ef8:	8812      	ldrh	r2, [r2, #0]
 8015efa:	b292      	uxth	r2, r2
 8015efc:	9202      	str	r2, [sp, #8]
 8015efe:	9301      	str	r3, [sp, #4]
 8015f00:	4b3b      	ldr	r3, [pc, #236]	; (8015ff0 <tcp_process+0x5b8>)
 8015f02:	9300      	str	r3, [sp, #0]
 8015f04:	4b3b      	ldr	r3, [pc, #236]	; (8015ff4 <tcp_process+0x5bc>)
 8015f06:	4602      	mov	r2, r0
 8015f08:	6878      	ldr	r0, [r7, #4]
 8015f0a:	f003 f839 	bl	8018f80 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015f0e:	e167      	b.n	80161e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015f10:	4b32      	ldr	r3, [pc, #200]	; (8015fdc <tcp_process+0x5a4>)
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	f003 0302 	and.w	r3, r3, #2
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	f000 8161 	beq.w	80161e0 <tcp_process+0x7a8>
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f22:	1e5a      	subs	r2, r3, #1
 8015f24:	4b30      	ldr	r3, [pc, #192]	; (8015fe8 <tcp_process+0x5b0>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	429a      	cmp	r2, r3
 8015f2a:	f040 8159 	bne.w	80161e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f002 fe12 	bl	8018b58 <tcp_rexmit>
      break;
 8015f34:	e154      	b.n	80161e0 <tcp_process+0x7a8>
 8015f36:	e153      	b.n	80161e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f000 fa71 	bl	8016420 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015f3e:	4b32      	ldr	r3, [pc, #200]	; (8016008 <tcp_process+0x5d0>)
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	f003 0320 	and.w	r3, r3, #32
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	f000 814c 	beq.w	80161e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	8b5b      	ldrh	r3, [r3, #26]
 8015f50:	f043 0302 	orr.w	r3, r3, #2
 8015f54:	b29a      	uxth	r2, r3
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	2207      	movs	r2, #7
 8015f5e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015f60:	e140      	b.n	80161e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f000 fa5c 	bl	8016420 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015f68:	4b27      	ldr	r3, [pc, #156]	; (8016008 <tcp_process+0x5d0>)
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	f003 0320 	and.w	r3, r3, #32
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d071      	beq.n	8016058 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f74:	4b19      	ldr	r3, [pc, #100]	; (8015fdc <tcp_process+0x5a4>)
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	f003 0310 	and.w	r3, r3, #16
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d060      	beq.n	8016042 <tcp_process+0x60a>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f84:	4b16      	ldr	r3, [pc, #88]	; (8015fe0 <tcp_process+0x5a8>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	d15a      	bne.n	8016042 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d156      	bne.n	8016042 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	8b5b      	ldrh	r3, [r3, #26]
 8015f98:	f043 0302 	orr.w	r3, r3, #2
 8015f9c:	b29a      	uxth	r2, r3
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f7fe fdbe 	bl	8014b24 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015fa8:	4b18      	ldr	r3, [pc, #96]	; (801600c <tcp_process+0x5d4>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	687a      	ldr	r2, [r7, #4]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d105      	bne.n	8015fbe <tcp_process+0x586>
 8015fb2:	4b16      	ldr	r3, [pc, #88]	; (801600c <tcp_process+0x5d4>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	68db      	ldr	r3, [r3, #12]
 8015fb8:	4a14      	ldr	r2, [pc, #80]	; (801600c <tcp_process+0x5d4>)
 8015fba:	6013      	str	r3, [r2, #0]
 8015fbc:	e02e      	b.n	801601c <tcp_process+0x5e4>
 8015fbe:	4b13      	ldr	r3, [pc, #76]	; (801600c <tcp_process+0x5d4>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	617b      	str	r3, [r7, #20]
 8015fc4:	e027      	b.n	8016016 <tcp_process+0x5de>
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	68db      	ldr	r3, [r3, #12]
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d11f      	bne.n	8016010 <tcp_process+0x5d8>
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	68da      	ldr	r2, [r3, #12]
 8015fd4:	697b      	ldr	r3, [r7, #20]
 8015fd6:	60da      	str	r2, [r3, #12]
 8015fd8:	e020      	b.n	801601c <tcp_process+0x5e4>
 8015fda:	bf00      	nop
 8015fdc:	20004548 	.word	0x20004548
 8015fe0:	20004540 	.word	0x20004540
 8015fe4:	20004546 	.word	0x20004546
 8015fe8:	2000453c 	.word	0x2000453c
 8015fec:	2000452c 	.word	0x2000452c
 8015ff0:	20007c3c 	.word	0x20007c3c
 8015ff4:	20007c40 	.word	0x20007c40
 8015ff8:	0801e5f4 	.word	0x0801e5f4
 8015ffc:	0801e894 	.word	0x0801e894
 8016000:	0801e640 	.word	0x0801e640
 8016004:	20004544 	.word	0x20004544
 8016008:	20004549 	.word	0x20004549
 801600c:	2000b340 	.word	0x2000b340
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	68db      	ldr	r3, [r3, #12]
 8016014:	617b      	str	r3, [r7, #20]
 8016016:	697b      	ldr	r3, [r7, #20]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d1d4      	bne.n	8015fc6 <tcp_process+0x58e>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	2200      	movs	r2, #0
 8016020:	60da      	str	r2, [r3, #12]
 8016022:	4b77      	ldr	r3, [pc, #476]	; (8016200 <tcp_process+0x7c8>)
 8016024:	2201      	movs	r2, #1
 8016026:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	220a      	movs	r2, #10
 801602c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801602e:	4b75      	ldr	r3, [pc, #468]	; (8016204 <tcp_process+0x7cc>)
 8016030:	681a      	ldr	r2, [r3, #0]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	60da      	str	r2, [r3, #12]
 8016036:	4a73      	ldr	r2, [pc, #460]	; (8016204 <tcp_process+0x7cc>)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6013      	str	r3, [r2, #0]
 801603c:	f003 f962 	bl	8019304 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016040:	e0d2      	b.n	80161e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	8b5b      	ldrh	r3, [r3, #26]
 8016046:	f043 0302 	orr.w	r3, r3, #2
 801604a:	b29a      	uxth	r2, r3
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2208      	movs	r2, #8
 8016054:	751a      	strb	r2, [r3, #20]
      break;
 8016056:	e0c7      	b.n	80161e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016058:	4b6b      	ldr	r3, [pc, #428]	; (8016208 <tcp_process+0x7d0>)
 801605a:	781b      	ldrb	r3, [r3, #0]
 801605c:	f003 0310 	and.w	r3, r3, #16
 8016060:	2b00      	cmp	r3, #0
 8016062:	f000 80c1 	beq.w	80161e8 <tcp_process+0x7b0>
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801606a:	4b68      	ldr	r3, [pc, #416]	; (801620c <tcp_process+0x7d4>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	429a      	cmp	r2, r3
 8016070:	f040 80ba 	bne.w	80161e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016078:	2b00      	cmp	r3, #0
 801607a:	f040 80b5 	bne.w	80161e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2206      	movs	r2, #6
 8016082:	751a      	strb	r2, [r3, #20]
      break;
 8016084:	e0b0      	b.n	80161e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f000 f9ca 	bl	8016420 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801608c:	4b60      	ldr	r3, [pc, #384]	; (8016210 <tcp_process+0x7d8>)
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	f003 0320 	and.w	r3, r3, #32
 8016094:	2b00      	cmp	r3, #0
 8016096:	f000 80a9 	beq.w	80161ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	8b5b      	ldrh	r3, [r3, #26]
 801609e:	f043 0302 	orr.w	r3, r3, #2
 80160a2:	b29a      	uxth	r2, r3
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7fe fd3b 	bl	8014b24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80160ae:	4b59      	ldr	r3, [pc, #356]	; (8016214 <tcp_process+0x7dc>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	687a      	ldr	r2, [r7, #4]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d105      	bne.n	80160c4 <tcp_process+0x68c>
 80160b8:	4b56      	ldr	r3, [pc, #344]	; (8016214 <tcp_process+0x7dc>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	68db      	ldr	r3, [r3, #12]
 80160be:	4a55      	ldr	r2, [pc, #340]	; (8016214 <tcp_process+0x7dc>)
 80160c0:	6013      	str	r3, [r2, #0]
 80160c2:	e013      	b.n	80160ec <tcp_process+0x6b4>
 80160c4:	4b53      	ldr	r3, [pc, #332]	; (8016214 <tcp_process+0x7dc>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	613b      	str	r3, [r7, #16]
 80160ca:	e00c      	b.n	80160e6 <tcp_process+0x6ae>
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	68db      	ldr	r3, [r3, #12]
 80160d0:	687a      	ldr	r2, [r7, #4]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d104      	bne.n	80160e0 <tcp_process+0x6a8>
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	68da      	ldr	r2, [r3, #12]
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	60da      	str	r2, [r3, #12]
 80160de:	e005      	b.n	80160ec <tcp_process+0x6b4>
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	613b      	str	r3, [r7, #16]
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d1ef      	bne.n	80160cc <tcp_process+0x694>
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	60da      	str	r2, [r3, #12]
 80160f2:	4b43      	ldr	r3, [pc, #268]	; (8016200 <tcp_process+0x7c8>)
 80160f4:	2201      	movs	r2, #1
 80160f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	220a      	movs	r2, #10
 80160fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80160fe:	4b41      	ldr	r3, [pc, #260]	; (8016204 <tcp_process+0x7cc>)
 8016100:	681a      	ldr	r2, [r3, #0]
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	60da      	str	r2, [r3, #12]
 8016106:	4a3f      	ldr	r2, [pc, #252]	; (8016204 <tcp_process+0x7cc>)
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	6013      	str	r3, [r2, #0]
 801610c:	f003 f8fa 	bl	8019304 <tcp_timer_needed>
      }
      break;
 8016110:	e06c      	b.n	80161ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f000 f984 	bl	8016420 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016118:	4b3b      	ldr	r3, [pc, #236]	; (8016208 <tcp_process+0x7d0>)
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	f003 0310 	and.w	r3, r3, #16
 8016120:	2b00      	cmp	r3, #0
 8016122:	d065      	beq.n	80161f0 <tcp_process+0x7b8>
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016128:	4b38      	ldr	r3, [pc, #224]	; (801620c <tcp_process+0x7d4>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	429a      	cmp	r2, r3
 801612e:	d15f      	bne.n	80161f0 <tcp_process+0x7b8>
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016134:	2b00      	cmp	r3, #0
 8016136:	d15b      	bne.n	80161f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f7fe fcf3 	bl	8014b24 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801613e:	4b35      	ldr	r3, [pc, #212]	; (8016214 <tcp_process+0x7dc>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	687a      	ldr	r2, [r7, #4]
 8016144:	429a      	cmp	r2, r3
 8016146:	d105      	bne.n	8016154 <tcp_process+0x71c>
 8016148:	4b32      	ldr	r3, [pc, #200]	; (8016214 <tcp_process+0x7dc>)
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	68db      	ldr	r3, [r3, #12]
 801614e:	4a31      	ldr	r2, [pc, #196]	; (8016214 <tcp_process+0x7dc>)
 8016150:	6013      	str	r3, [r2, #0]
 8016152:	e013      	b.n	801617c <tcp_process+0x744>
 8016154:	4b2f      	ldr	r3, [pc, #188]	; (8016214 <tcp_process+0x7dc>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	60fb      	str	r3, [r7, #12]
 801615a:	e00c      	b.n	8016176 <tcp_process+0x73e>
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	687a      	ldr	r2, [r7, #4]
 8016162:	429a      	cmp	r2, r3
 8016164:	d104      	bne.n	8016170 <tcp_process+0x738>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	68da      	ldr	r2, [r3, #12]
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	60da      	str	r2, [r3, #12]
 801616e:	e005      	b.n	801617c <tcp_process+0x744>
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	68db      	ldr	r3, [r3, #12]
 8016174:	60fb      	str	r3, [r7, #12]
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d1ef      	bne.n	801615c <tcp_process+0x724>
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2200      	movs	r2, #0
 8016180:	60da      	str	r2, [r3, #12]
 8016182:	4b1f      	ldr	r3, [pc, #124]	; (8016200 <tcp_process+0x7c8>)
 8016184:	2201      	movs	r2, #1
 8016186:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	220a      	movs	r2, #10
 801618c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801618e:	4b1d      	ldr	r3, [pc, #116]	; (8016204 <tcp_process+0x7cc>)
 8016190:	681a      	ldr	r2, [r3, #0]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	60da      	str	r2, [r3, #12]
 8016196:	4a1b      	ldr	r2, [pc, #108]	; (8016204 <tcp_process+0x7cc>)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	6013      	str	r3, [r2, #0]
 801619c:	f003 f8b2 	bl	8019304 <tcp_timer_needed>
      }
      break;
 80161a0:	e026      	b.n	80161f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f000 f93c 	bl	8016420 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80161a8:	4b17      	ldr	r3, [pc, #92]	; (8016208 <tcp_process+0x7d0>)
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	f003 0310 	and.w	r3, r3, #16
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d01f      	beq.n	80161f4 <tcp_process+0x7bc>
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80161b8:	4b14      	ldr	r3, [pc, #80]	; (801620c <tcp_process+0x7d4>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	429a      	cmp	r2, r3
 80161be:	d119      	bne.n	80161f4 <tcp_process+0x7bc>
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d115      	bne.n	80161f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80161c8:	4b11      	ldr	r3, [pc, #68]	; (8016210 <tcp_process+0x7d8>)
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	f043 0310 	orr.w	r3, r3, #16
 80161d0:	b2da      	uxtb	r2, r3
 80161d2:	4b0f      	ldr	r3, [pc, #60]	; (8016210 <tcp_process+0x7d8>)
 80161d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80161d6:	e00d      	b.n	80161f4 <tcp_process+0x7bc>
    default:
      break;
 80161d8:	bf00      	nop
 80161da:	e00c      	b.n	80161f6 <tcp_process+0x7be>
      break;
 80161dc:	bf00      	nop
 80161de:	e00a      	b.n	80161f6 <tcp_process+0x7be>
      break;
 80161e0:	bf00      	nop
 80161e2:	e008      	b.n	80161f6 <tcp_process+0x7be>
      break;
 80161e4:	bf00      	nop
 80161e6:	e006      	b.n	80161f6 <tcp_process+0x7be>
      break;
 80161e8:	bf00      	nop
 80161ea:	e004      	b.n	80161f6 <tcp_process+0x7be>
      break;
 80161ec:	bf00      	nop
 80161ee:	e002      	b.n	80161f6 <tcp_process+0x7be>
      break;
 80161f0:	bf00      	nop
 80161f2:	e000      	b.n	80161f6 <tcp_process+0x7be>
      break;
 80161f4:	bf00      	nop
  }
  return ERR_OK;
 80161f6:	2300      	movs	r3, #0
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	3724      	adds	r7, #36	; 0x24
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd90      	pop	{r4, r7, pc}
 8016200:	2000b33c 	.word	0x2000b33c
 8016204:	2000b350 	.word	0x2000b350
 8016208:	20004548 	.word	0x20004548
 801620c:	20004540 	.word	0x20004540
 8016210:	20004549 	.word	0x20004549
 8016214:	2000b340 	.word	0x2000b340

08016218 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016218:	b590      	push	{r4, r7, lr}
 801621a:	b085      	sub	sp, #20
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
 8016220:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d106      	bne.n	8016236 <tcp_oos_insert_segment+0x1e>
 8016228:	4b3b      	ldr	r3, [pc, #236]	; (8016318 <tcp_oos_insert_segment+0x100>)
 801622a:	f240 421f 	movw	r2, #1055	; 0x41f
 801622e:	493b      	ldr	r1, [pc, #236]	; (801631c <tcp_oos_insert_segment+0x104>)
 8016230:	483b      	ldr	r0, [pc, #236]	; (8016320 <tcp_oos_insert_segment+0x108>)
 8016232:	f005 ffaf 	bl	801c194 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	899b      	ldrh	r3, [r3, #12]
 801623c:	b29b      	uxth	r3, r3
 801623e:	4618      	mov	r0, r3
 8016240:	f7fb f98c 	bl	801155c <lwip_htons>
 8016244:	4603      	mov	r3, r0
 8016246:	b2db      	uxtb	r3, r3
 8016248:	f003 0301 	and.w	r3, r3, #1
 801624c:	2b00      	cmp	r3, #0
 801624e:	d028      	beq.n	80162a2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016250:	6838      	ldr	r0, [r7, #0]
 8016252:	f7fe f97b 	bl	801454c <tcp_segs_free>
    next = NULL;
 8016256:	2300      	movs	r3, #0
 8016258:	603b      	str	r3, [r7, #0]
 801625a:	e056      	b.n	801630a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	68db      	ldr	r3, [r3, #12]
 8016260:	899b      	ldrh	r3, [r3, #12]
 8016262:	b29b      	uxth	r3, r3
 8016264:	4618      	mov	r0, r3
 8016266:	f7fb f979 	bl	801155c <lwip_htons>
 801626a:	4603      	mov	r3, r0
 801626c:	b2db      	uxtb	r3, r3
 801626e:	f003 0301 	and.w	r3, r3, #1
 8016272:	2b00      	cmp	r3, #0
 8016274:	d00d      	beq.n	8016292 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	68db      	ldr	r3, [r3, #12]
 801627a:	899b      	ldrh	r3, [r3, #12]
 801627c:	b29c      	uxth	r4, r3
 801627e:	2001      	movs	r0, #1
 8016280:	f7fb f96c 	bl	801155c <lwip_htons>
 8016284:	4603      	mov	r3, r0
 8016286:	461a      	mov	r2, r3
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	68db      	ldr	r3, [r3, #12]
 801628c:	4322      	orrs	r2, r4
 801628e:	b292      	uxth	r2, r2
 8016290:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016296:	683b      	ldr	r3, [r7, #0]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801629c:	68f8      	ldr	r0, [r7, #12]
 801629e:	f7fe f969 	bl	8014574 <tcp_seg_free>
    while (next &&
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d00e      	beq.n	80162c6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	891b      	ldrh	r3, [r3, #8]
 80162ac:	461a      	mov	r2, r3
 80162ae:	4b1d      	ldr	r3, [pc, #116]	; (8016324 <tcp_oos_insert_segment+0x10c>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	441a      	add	r2, r3
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	68db      	ldr	r3, [r3, #12]
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	6839      	ldr	r1, [r7, #0]
 80162bc:	8909      	ldrh	r1, [r1, #8]
 80162be:	440b      	add	r3, r1
 80162c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	daca      	bge.n	801625c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d01e      	beq.n	801630a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	891b      	ldrh	r3, [r3, #8]
 80162d0:	461a      	mov	r2, r3
 80162d2:	4b14      	ldr	r3, [pc, #80]	; (8016324 <tcp_oos_insert_segment+0x10c>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	441a      	add	r2, r3
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	68db      	ldr	r3, [r3, #12]
 80162dc:	685b      	ldr	r3, [r3, #4]
 80162de:	1ad3      	subs	r3, r2, r3
    if (next &&
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	dd12      	ble.n	801630a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	685b      	ldr	r3, [r3, #4]
 80162ea:	b29a      	uxth	r2, r3
 80162ec:	4b0d      	ldr	r3, [pc, #52]	; (8016324 <tcp_oos_insert_segment+0x10c>)
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	b29b      	uxth	r3, r3
 80162f2:	1ad3      	subs	r3, r2, r3
 80162f4:	b29a      	uxth	r2, r3
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	685a      	ldr	r2, [r3, #4]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	891b      	ldrh	r3, [r3, #8]
 8016302:	4619      	mov	r1, r3
 8016304:	4610      	mov	r0, r2
 8016306:	f7fc fb81 	bl	8012a0c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	683a      	ldr	r2, [r7, #0]
 801630e:	601a      	str	r2, [r3, #0]
}
 8016310:	bf00      	nop
 8016312:	3714      	adds	r7, #20
 8016314:	46bd      	mov	sp, r7
 8016316:	bd90      	pop	{r4, r7, pc}
 8016318:	0801e5f4 	.word	0x0801e5f4
 801631c:	0801e8b4 	.word	0x0801e8b4
 8016320:	0801e640 	.word	0x0801e640
 8016324:	2000453c 	.word	0x2000453c

08016328 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016328:	b5b0      	push	{r4, r5, r7, lr}
 801632a:	b086      	sub	sp, #24
 801632c:	af00      	add	r7, sp, #0
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	607a      	str	r2, [r7, #4]
 8016334:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016336:	e03e      	b.n	80163b6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016342:	697b      	ldr	r3, [r7, #20]
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	4618      	mov	r0, r3
 8016348:	f7fc fd74 	bl	8012e34 <pbuf_clen>
 801634c:	4603      	mov	r3, r0
 801634e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016356:	8a7a      	ldrh	r2, [r7, #18]
 8016358:	429a      	cmp	r2, r3
 801635a:	d906      	bls.n	801636a <tcp_free_acked_segments+0x42>
 801635c:	4b2a      	ldr	r3, [pc, #168]	; (8016408 <tcp_free_acked_segments+0xe0>)
 801635e:	f240 4257 	movw	r2, #1111	; 0x457
 8016362:	492a      	ldr	r1, [pc, #168]	; (801640c <tcp_free_acked_segments+0xe4>)
 8016364:	482a      	ldr	r0, [pc, #168]	; (8016410 <tcp_free_acked_segments+0xe8>)
 8016366:	f005 ff15 	bl	801c194 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8016370:	8a7b      	ldrh	r3, [r7, #18]
 8016372:	1ad3      	subs	r3, r2, r3
 8016374:	b29a      	uxth	r2, r3
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	891a      	ldrh	r2, [r3, #8]
 8016380:	4b24      	ldr	r3, [pc, #144]	; (8016414 <tcp_free_acked_segments+0xec>)
 8016382:	881b      	ldrh	r3, [r3, #0]
 8016384:	4413      	add	r3, r2
 8016386:	b29a      	uxth	r2, r3
 8016388:	4b22      	ldr	r3, [pc, #136]	; (8016414 <tcp_free_acked_segments+0xec>)
 801638a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801638c:	6978      	ldr	r0, [r7, #20]
 801638e:	f7fe f8f1 	bl	8014574 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016398:	2b00      	cmp	r3, #0
 801639a:	d00c      	beq.n	80163b6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d109      	bne.n	80163b6 <tcp_free_acked_segments+0x8e>
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d106      	bne.n	80163b6 <tcp_free_acked_segments+0x8e>
 80163a8:	4b17      	ldr	r3, [pc, #92]	; (8016408 <tcp_free_acked_segments+0xe0>)
 80163aa:	f240 4262 	movw	r2, #1122	; 0x462
 80163ae:	491a      	ldr	r1, [pc, #104]	; (8016418 <tcp_free_acked_segments+0xf0>)
 80163b0:	4817      	ldr	r0, [pc, #92]	; (8016410 <tcp_free_acked_segments+0xe8>)
 80163b2:	f005 feef 	bl	801c194 <iprintf>
  while (seg_list != NULL &&
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d020      	beq.n	80163fe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80163bc:	68bb      	ldr	r3, [r7, #8]
 80163be:	68db      	ldr	r3, [r3, #12]
 80163c0:	685b      	ldr	r3, [r3, #4]
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7fb f8df 	bl	8011586 <lwip_htonl>
 80163c8:	4604      	mov	r4, r0
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	891b      	ldrh	r3, [r3, #8]
 80163ce:	461d      	mov	r5, r3
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	68db      	ldr	r3, [r3, #12]
 80163d4:	899b      	ldrh	r3, [r3, #12]
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	4618      	mov	r0, r3
 80163da:	f7fb f8bf 	bl	801155c <lwip_htons>
 80163de:	4603      	mov	r3, r0
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	f003 0303 	and.w	r3, r3, #3
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d001      	beq.n	80163ee <tcp_free_acked_segments+0xc6>
 80163ea:	2301      	movs	r3, #1
 80163ec:	e000      	b.n	80163f0 <tcp_free_acked_segments+0xc8>
 80163ee:	2300      	movs	r3, #0
 80163f0:	442b      	add	r3, r5
 80163f2:	18e2      	adds	r2, r4, r3
 80163f4:	4b09      	ldr	r3, [pc, #36]	; (801641c <tcp_free_acked_segments+0xf4>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	dd9c      	ble.n	8016338 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80163fe:	68bb      	ldr	r3, [r7, #8]
}
 8016400:	4618      	mov	r0, r3
 8016402:	3718      	adds	r7, #24
 8016404:	46bd      	mov	sp, r7
 8016406:	bdb0      	pop	{r4, r5, r7, pc}
 8016408:	0801e5f4 	.word	0x0801e5f4
 801640c:	0801e8dc 	.word	0x0801e8dc
 8016410:	0801e640 	.word	0x0801e640
 8016414:	20004544 	.word	0x20004544
 8016418:	0801e904 	.word	0x0801e904
 801641c:	20004540 	.word	0x20004540

08016420 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016420:	b5b0      	push	{r4, r5, r7, lr}
 8016422:	b094      	sub	sp, #80	; 0x50
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016428:	2300      	movs	r3, #0
 801642a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d106      	bne.n	8016440 <tcp_receive+0x20>
 8016432:	4ba6      	ldr	r3, [pc, #664]	; (80166cc <tcp_receive+0x2ac>)
 8016434:	f240 427b 	movw	r2, #1147	; 0x47b
 8016438:	49a5      	ldr	r1, [pc, #660]	; (80166d0 <tcp_receive+0x2b0>)
 801643a:	48a6      	ldr	r0, [pc, #664]	; (80166d4 <tcp_receive+0x2b4>)
 801643c:	f005 feaa 	bl	801c194 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	7d1b      	ldrb	r3, [r3, #20]
 8016444:	2b03      	cmp	r3, #3
 8016446:	d806      	bhi.n	8016456 <tcp_receive+0x36>
 8016448:	4ba0      	ldr	r3, [pc, #640]	; (80166cc <tcp_receive+0x2ac>)
 801644a:	f240 427c 	movw	r2, #1148	; 0x47c
 801644e:	49a2      	ldr	r1, [pc, #648]	; (80166d8 <tcp_receive+0x2b8>)
 8016450:	48a0      	ldr	r0, [pc, #640]	; (80166d4 <tcp_receive+0x2b4>)
 8016452:	f005 fe9f 	bl	801c194 <iprintf>

  if (flags & TCP_ACK) {
 8016456:	4ba1      	ldr	r3, [pc, #644]	; (80166dc <tcp_receive+0x2bc>)
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	f003 0310 	and.w	r3, r3, #16
 801645e:	2b00      	cmp	r3, #0
 8016460:	f000 8263 	beq.w	801692a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801646a:	461a      	mov	r2, r3
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016470:	4413      	add	r3, r2
 8016472:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016478:	4b99      	ldr	r3, [pc, #612]	; (80166e0 <tcp_receive+0x2c0>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	1ad3      	subs	r3, r2, r3
 801647e:	2b00      	cmp	r3, #0
 8016480:	db1b      	blt.n	80164ba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016486:	4b96      	ldr	r3, [pc, #600]	; (80166e0 <tcp_receive+0x2c0>)
 8016488:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801648a:	429a      	cmp	r2, r3
 801648c:	d106      	bne.n	801649c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016492:	4b94      	ldr	r3, [pc, #592]	; (80166e4 <tcp_receive+0x2c4>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	1ad3      	subs	r3, r2, r3
 8016498:	2b00      	cmp	r3, #0
 801649a:	db0e      	blt.n	80164ba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80164a0:	4b90      	ldr	r3, [pc, #576]	; (80166e4 <tcp_receive+0x2c4>)
 80164a2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d125      	bne.n	80164f4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80164a8:	4b8f      	ldr	r3, [pc, #572]	; (80166e8 <tcp_receive+0x2c8>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	89db      	ldrh	r3, [r3, #14]
 80164ae:	b29a      	uxth	r2, r3
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164b6:	429a      	cmp	r2, r3
 80164b8:	d91c      	bls.n	80164f4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80164ba:	4b8b      	ldr	r3, [pc, #556]	; (80166e8 <tcp_receive+0x2c8>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	89db      	ldrh	r3, [r3, #14]
 80164c0:	b29a      	uxth	r2, r3
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d205      	bcs.n	80164e4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80164e4:	4b7e      	ldr	r3, [pc, #504]	; (80166e0 <tcp_receive+0x2c0>)
 80164e6:	681a      	ldr	r2, [r3, #0]
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80164ec:	4b7d      	ldr	r3, [pc, #500]	; (80166e4 <tcp_receive+0x2c4>)
 80164ee:	681a      	ldr	r2, [r3, #0]
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80164f4:	4b7b      	ldr	r3, [pc, #492]	; (80166e4 <tcp_receive+0x2c4>)
 80164f6:	681a      	ldr	r2, [r3, #0]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80164fc:	1ad3      	subs	r3, r2, r3
 80164fe:	2b00      	cmp	r3, #0
 8016500:	dc58      	bgt.n	80165b4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016502:	4b7a      	ldr	r3, [pc, #488]	; (80166ec <tcp_receive+0x2cc>)
 8016504:	881b      	ldrh	r3, [r3, #0]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d14b      	bne.n	80165a2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016514:	4413      	add	r3, r2
 8016516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016518:	429a      	cmp	r2, r3
 801651a:	d142      	bne.n	80165a2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016522:	2b00      	cmp	r3, #0
 8016524:	db3d      	blt.n	80165a2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801652a:	4b6e      	ldr	r3, [pc, #440]	; (80166e4 <tcp_receive+0x2c4>)
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	429a      	cmp	r2, r3
 8016530:	d137      	bne.n	80165a2 <tcp_receive+0x182>
              found_dupack = 1;
 8016532:	2301      	movs	r3, #1
 8016534:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801653c:	2bff      	cmp	r3, #255	; 0xff
 801653e:	d007      	beq.n	8016550 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016546:	3301      	adds	r3, #1
 8016548:	b2da      	uxtb	r2, r3
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016556:	2b03      	cmp	r3, #3
 8016558:	d91b      	bls.n	8016592 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016564:	4413      	add	r3, r2
 8016566:	b29a      	uxth	r2, r3
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801656e:	429a      	cmp	r2, r3
 8016570:	d30a      	bcc.n	8016588 <tcp_receive+0x168>
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801657c:	4413      	add	r3, r2
 801657e:	b29a      	uxth	r2, r3
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016586:	e004      	b.n	8016592 <tcp_receive+0x172>
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801658e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016598:	2b02      	cmp	r3, #2
 801659a:	d902      	bls.n	80165a2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f002 fb47 	bl	8018c30 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80165a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	f040 8160 	bne.w	801686a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2200      	movs	r2, #0
 80165ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80165b2:	e15a      	b.n	801686a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80165b4:	4b4b      	ldr	r3, [pc, #300]	; (80166e4 <tcp_receive+0x2c4>)
 80165b6:	681a      	ldr	r2, [r3, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165bc:	1ad3      	subs	r3, r2, r3
 80165be:	3b01      	subs	r3, #1
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	f2c0 814d 	blt.w	8016860 <tcp_receive+0x440>
 80165c6:	4b47      	ldr	r3, [pc, #284]	; (80166e4 <tcp_receive+0x2c4>)
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80165ce:	1ad3      	subs	r3, r2, r3
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	f300 8145 	bgt.w	8016860 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	8b5b      	ldrh	r3, [r3, #26]
 80165da:	f003 0304 	and.w	r3, r3, #4
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d010      	beq.n	8016604 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	8b5b      	ldrh	r3, [r3, #26]
 80165e6:	f023 0304 	bic.w	r3, r3, #4
 80165ea:	b29a      	uxth	r2, r3
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	2200      	movs	r2, #0
 8016600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2200      	movs	r2, #0
 8016608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016612:	10db      	asrs	r3, r3, #3
 8016614:	b21b      	sxth	r3, r3
 8016616:	b29a      	uxth	r2, r3
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801661e:	b29b      	uxth	r3, r3
 8016620:	4413      	add	r3, r2
 8016622:	b29b      	uxth	r3, r3
 8016624:	b21a      	sxth	r2, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801662c:	4b2d      	ldr	r3, [pc, #180]	; (80166e4 <tcp_receive+0x2c4>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	b29a      	uxth	r2, r3
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016636:	b29b      	uxth	r3, r3
 8016638:	1ad3      	subs	r3, r2, r3
 801663a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2200      	movs	r2, #0
 8016640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016644:	4b27      	ldr	r3, [pc, #156]	; (80166e4 <tcp_receive+0x2c4>)
 8016646:	681a      	ldr	r2, [r3, #0]
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	7d1b      	ldrb	r3, [r3, #20]
 8016650:	2b03      	cmp	r3, #3
 8016652:	f240 8096 	bls.w	8016782 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016662:	429a      	cmp	r2, r3
 8016664:	d244      	bcs.n	80166f0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	8b5b      	ldrh	r3, [r3, #26]
 801666a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801666e:	2b00      	cmp	r3, #0
 8016670:	d001      	beq.n	8016676 <tcp_receive+0x256>
 8016672:	2301      	movs	r3, #1
 8016674:	e000      	b.n	8016678 <tcp_receive+0x258>
 8016676:	2302      	movs	r3, #2
 8016678:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801667c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016680:	b29a      	uxth	r2, r3
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016686:	fb12 f303 	smulbb	r3, r2, r3
 801668a:	b29b      	uxth	r3, r3
 801668c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801668e:	4293      	cmp	r3, r2
 8016690:	bf28      	it	cs
 8016692:	4613      	movcs	r3, r2
 8016694:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801669c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801669e:	4413      	add	r3, r2
 80166a0:	b29a      	uxth	r2, r3
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d309      	bcc.n	80166c0 <tcp_receive+0x2a0>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80166b4:	4413      	add	r3, r2
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80166be:	e060      	b.n	8016782 <tcp_receive+0x362>
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80166c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80166ca:	e05a      	b.n	8016782 <tcp_receive+0x362>
 80166cc:	0801e5f4 	.word	0x0801e5f4
 80166d0:	0801e924 	.word	0x0801e924
 80166d4:	0801e640 	.word	0x0801e640
 80166d8:	0801e940 	.word	0x0801e940
 80166dc:	20004548 	.word	0x20004548
 80166e0:	2000453c 	.word	0x2000453c
 80166e4:	20004540 	.word	0x20004540
 80166e8:	2000452c 	.word	0x2000452c
 80166ec:	20004546 	.word	0x20004546
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80166f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80166f8:	4413      	add	r3, r2
 80166fa:	b29a      	uxth	r2, r3
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016702:	429a      	cmp	r2, r3
 8016704:	d309      	bcc.n	801671a <tcp_receive+0x2fa>
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801670c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801670e:	4413      	add	r3, r2
 8016710:	b29a      	uxth	r2, r3
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016718:	e004      	b.n	8016724 <tcp_receive+0x304>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016730:	429a      	cmp	r2, r3
 8016732:	d326      	bcc.n	8016782 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016740:	1ad3      	subs	r3, r2, r3
 8016742:	b29a      	uxth	r2, r3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016754:	4413      	add	r3, r2
 8016756:	b29a      	uxth	r2, r3
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801675e:	429a      	cmp	r2, r3
 8016760:	d30a      	bcc.n	8016778 <tcp_receive+0x358>
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801676c:	4413      	add	r3, r2
 801676e:	b29a      	uxth	r2, r3
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016776:	e004      	b.n	8016782 <tcp_receive+0x362>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801677e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801678a:	4a98      	ldr	r2, [pc, #608]	; (80169ec <tcp_receive+0x5cc>)
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f7ff fdcb 	bl	8016328 <tcp_free_acked_segments>
 8016792:	4602      	mov	r2, r0
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167a0:	4a93      	ldr	r2, [pc, #588]	; (80169f0 <tcp_receive+0x5d0>)
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	f7ff fdc0 	bl	8016328 <tcp_free_acked_segments>
 80167a8:	4602      	mov	r2, r0
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d104      	bne.n	80167c0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167bc:	861a      	strh	r2, [r3, #48]	; 0x30
 80167be:	e002      	b.n	80167c6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2200      	movs	r2, #0
 80167c4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	2200      	movs	r2, #0
 80167ca:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d103      	bne.n	80167dc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2200      	movs	r2, #0
 80167d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80167e2:	4b84      	ldr	r3, [pc, #528]	; (80169f4 <tcp_receive+0x5d4>)
 80167e4:	881b      	ldrh	r3, [r3, #0]
 80167e6:	4413      	add	r3, r2
 80167e8:	b29a      	uxth	r2, r3
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	8b5b      	ldrh	r3, [r3, #26]
 80167f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d035      	beq.n	8016868 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016800:	2b00      	cmp	r3, #0
 8016802:	d118      	bne.n	8016836 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016808:	2b00      	cmp	r3, #0
 801680a:	d00c      	beq.n	8016826 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016814:	68db      	ldr	r3, [r3, #12]
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	4618      	mov	r0, r3
 801681a:	f7fa feb4 	bl	8011586 <lwip_htonl>
 801681e:	4603      	mov	r3, r0
 8016820:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016822:	2b00      	cmp	r3, #0
 8016824:	dc20      	bgt.n	8016868 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	8b5b      	ldrh	r3, [r3, #26]
 801682a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801682e:	b29a      	uxth	r2, r3
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016834:	e018      	b.n	8016868 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801683e:	68db      	ldr	r3, [r3, #12]
 8016840:	685b      	ldr	r3, [r3, #4]
 8016842:	4618      	mov	r0, r3
 8016844:	f7fa fe9f 	bl	8011586 <lwip_htonl>
 8016848:	4603      	mov	r3, r0
 801684a:	1ae3      	subs	r3, r4, r3
 801684c:	2b00      	cmp	r3, #0
 801684e:	dc0b      	bgt.n	8016868 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	8b5b      	ldrh	r3, [r3, #26]
 8016854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016858:	b29a      	uxth	r2, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801685e:	e003      	b.n	8016868 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f002 fbdf 	bl	8019024 <tcp_send_empty_ack>
 8016866:	e000      	b.n	801686a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016868:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801686e:	2b00      	cmp	r3, #0
 8016870:	d05b      	beq.n	801692a <tcp_receive+0x50a>
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016876:	4b60      	ldr	r3, [pc, #384]	; (80169f8 <tcp_receive+0x5d8>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	1ad3      	subs	r3, r2, r3
 801687c:	2b00      	cmp	r3, #0
 801687e:	da54      	bge.n	801692a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016880:	4b5e      	ldr	r3, [pc, #376]	; (80169fc <tcp_receive+0x5dc>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	b29a      	uxth	r2, r3
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801688a:	b29b      	uxth	r3, r3
 801688c:	1ad3      	subs	r3, r2, r3
 801688e:	b29b      	uxth	r3, r3
 8016890:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016894:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801689e:	10db      	asrs	r3, r3, #3
 80168a0:	b21b      	sxth	r3, r3
 80168a2:	b29b      	uxth	r3, r3
 80168a4:	1ad3      	subs	r3, r2, r3
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80168b2:	b29a      	uxth	r2, r3
 80168b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80168b8:	4413      	add	r3, r2
 80168ba:	b29b      	uxth	r3, r3
 80168bc:	b21a      	sxth	r2, r3
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80168c2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	da05      	bge.n	80168d6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80168ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80168ce:	425b      	negs	r3, r3
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80168d6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80168e0:	109b      	asrs	r3, r3, #2
 80168e2:	b21b      	sxth	r3, r3
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	1ad3      	subs	r3, r2, r3
 80168e8:	b29b      	uxth	r3, r3
 80168ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80168f4:	b29a      	uxth	r2, r3
 80168f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80168fa:	4413      	add	r3, r2
 80168fc:	b29b      	uxth	r3, r3
 80168fe:	b21a      	sxth	r2, r3
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801690a:	10db      	asrs	r3, r3, #3
 801690c:	b21b      	sxth	r3, r3
 801690e:	b29a      	uxth	r2, r3
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016916:	b29b      	uxth	r3, r3
 8016918:	4413      	add	r3, r2
 801691a:	b29b      	uxth	r3, r3
 801691c:	b21a      	sxth	r2, r3
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2200      	movs	r2, #0
 8016928:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801692a:	4b35      	ldr	r3, [pc, #212]	; (8016a00 <tcp_receive+0x5e0>)
 801692c:	881b      	ldrh	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	f000 84e1 	beq.w	80172f6 <tcp_receive+0xed6>
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	7d1b      	ldrb	r3, [r3, #20]
 8016938:	2b06      	cmp	r3, #6
 801693a:	f200 84dc 	bhi.w	80172f6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016942:	4b30      	ldr	r3, [pc, #192]	; (8016a04 <tcp_receive+0x5e4>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	1ad3      	subs	r3, r2, r3
 8016948:	3b01      	subs	r3, #1
 801694a:	2b00      	cmp	r3, #0
 801694c:	f2c0 808e 	blt.w	8016a6c <tcp_receive+0x64c>
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016954:	4b2a      	ldr	r3, [pc, #168]	; (8016a00 <tcp_receive+0x5e0>)
 8016956:	881b      	ldrh	r3, [r3, #0]
 8016958:	4619      	mov	r1, r3
 801695a:	4b2a      	ldr	r3, [pc, #168]	; (8016a04 <tcp_receive+0x5e4>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	440b      	add	r3, r1
 8016960:	1ad3      	subs	r3, r2, r3
 8016962:	3301      	adds	r3, #1
 8016964:	2b00      	cmp	r3, #0
 8016966:	f300 8081 	bgt.w	8016a6c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801696a:	4b27      	ldr	r3, [pc, #156]	; (8016a08 <tcp_receive+0x5e8>)
 801696c:	685b      	ldr	r3, [r3, #4]
 801696e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016974:	4b23      	ldr	r3, [pc, #140]	; (8016a04 <tcp_receive+0x5e4>)
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	1ad3      	subs	r3, r2, r3
 801697a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801697c:	4b22      	ldr	r3, [pc, #136]	; (8016a08 <tcp_receive+0x5e8>)
 801697e:	685b      	ldr	r3, [r3, #4]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d106      	bne.n	8016992 <tcp_receive+0x572>
 8016984:	4b21      	ldr	r3, [pc, #132]	; (8016a0c <tcp_receive+0x5ec>)
 8016986:	f240 5294 	movw	r2, #1428	; 0x594
 801698a:	4921      	ldr	r1, [pc, #132]	; (8016a10 <tcp_receive+0x5f0>)
 801698c:	4821      	ldr	r0, [pc, #132]	; (8016a14 <tcp_receive+0x5f4>)
 801698e:	f005 fc01 	bl	801c194 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016994:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016998:	4293      	cmp	r3, r2
 801699a:	d906      	bls.n	80169aa <tcp_receive+0x58a>
 801699c:	4b1b      	ldr	r3, [pc, #108]	; (8016a0c <tcp_receive+0x5ec>)
 801699e:	f240 5295 	movw	r2, #1429	; 0x595
 80169a2:	491d      	ldr	r1, [pc, #116]	; (8016a18 <tcp_receive+0x5f8>)
 80169a4:	481b      	ldr	r0, [pc, #108]	; (8016a14 <tcp_receive+0x5f4>)
 80169a6:	f005 fbf5 	bl	801c194 <iprintf>
      off = (u16_t)off32;
 80169aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80169b0:	4b15      	ldr	r3, [pc, #84]	; (8016a08 <tcp_receive+0x5e8>)
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	891b      	ldrh	r3, [r3, #8]
 80169b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d906      	bls.n	80169cc <tcp_receive+0x5ac>
 80169be:	4b13      	ldr	r3, [pc, #76]	; (8016a0c <tcp_receive+0x5ec>)
 80169c0:	f240 5297 	movw	r2, #1431	; 0x597
 80169c4:	4915      	ldr	r1, [pc, #84]	; (8016a1c <tcp_receive+0x5fc>)
 80169c6:	4813      	ldr	r0, [pc, #76]	; (8016a14 <tcp_receive+0x5f4>)
 80169c8:	f005 fbe4 	bl	801c194 <iprintf>
      inseg.len -= off;
 80169cc:	4b0e      	ldr	r3, [pc, #56]	; (8016a08 <tcp_receive+0x5e8>)
 80169ce:	891a      	ldrh	r2, [r3, #8]
 80169d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80169d4:	1ad3      	subs	r3, r2, r3
 80169d6:	b29a      	uxth	r2, r3
 80169d8:	4b0b      	ldr	r3, [pc, #44]	; (8016a08 <tcp_receive+0x5e8>)
 80169da:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80169dc:	4b0a      	ldr	r3, [pc, #40]	; (8016a08 <tcp_receive+0x5e8>)
 80169de:	685b      	ldr	r3, [r3, #4]
 80169e0:	891a      	ldrh	r2, [r3, #8]
 80169e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80169e6:	1ad3      	subs	r3, r2, r3
 80169e8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80169ea:	e029      	b.n	8016a40 <tcp_receive+0x620>
 80169ec:	0801e95c 	.word	0x0801e95c
 80169f0:	0801e964 	.word	0x0801e964
 80169f4:	20004544 	.word	0x20004544
 80169f8:	20004540 	.word	0x20004540
 80169fc:	2000b344 	.word	0x2000b344
 8016a00:	20004546 	.word	0x20004546
 8016a04:	2000453c 	.word	0x2000453c
 8016a08:	2000451c 	.word	0x2000451c
 8016a0c:	0801e5f4 	.word	0x0801e5f4
 8016a10:	0801e96c 	.word	0x0801e96c
 8016a14:	0801e640 	.word	0x0801e640
 8016a18:	0801e97c 	.word	0x0801e97c
 8016a1c:	0801e98c 	.word	0x0801e98c
        off -= p->len;
 8016a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a22:	895b      	ldrh	r3, [r3, #10]
 8016a24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016a28:	1ad3      	subs	r3, r2, r3
 8016a2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a30:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016a32:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a36:	2200      	movs	r2, #0
 8016a38:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a42:	895b      	ldrh	r3, [r3, #10]
 8016a44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d8e9      	bhi.n	8016a20 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016a4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016a50:	4619      	mov	r1, r3
 8016a52:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016a54:	f7fc f8da 	bl	8012c0c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a5c:	4a91      	ldr	r2, [pc, #580]	; (8016ca4 <tcp_receive+0x884>)
 8016a5e:	6013      	str	r3, [r2, #0]
 8016a60:	4b91      	ldr	r3, [pc, #580]	; (8016ca8 <tcp_receive+0x888>)
 8016a62:	68db      	ldr	r3, [r3, #12]
 8016a64:	4a8f      	ldr	r2, [pc, #572]	; (8016ca4 <tcp_receive+0x884>)
 8016a66:	6812      	ldr	r2, [r2, #0]
 8016a68:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016a6a:	e00d      	b.n	8016a88 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016a6c:	4b8d      	ldr	r3, [pc, #564]	; (8016ca4 <tcp_receive+0x884>)
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a74:	1ad3      	subs	r3, r2, r3
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	da06      	bge.n	8016a88 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	8b5b      	ldrh	r3, [r3, #26]
 8016a7e:	f043 0302 	orr.w	r3, r3, #2
 8016a82:	b29a      	uxth	r2, r3
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016a88:	4b86      	ldr	r3, [pc, #536]	; (8016ca4 <tcp_receive+0x884>)
 8016a8a:	681a      	ldr	r2, [r3, #0]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a90:	1ad3      	subs	r3, r2, r3
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	f2c0 842a 	blt.w	80172ec <tcp_receive+0xecc>
 8016a98:	4b82      	ldr	r3, [pc, #520]	; (8016ca4 <tcp_receive+0x884>)
 8016a9a:	681a      	ldr	r2, [r3, #0]
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aa0:	6879      	ldr	r1, [r7, #4]
 8016aa2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016aa4:	440b      	add	r3, r1
 8016aa6:	1ad3      	subs	r3, r2, r3
 8016aa8:	3301      	adds	r3, #1
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	f300 841e 	bgt.w	80172ec <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016ab4:	4b7b      	ldr	r3, [pc, #492]	; (8016ca4 <tcp_receive+0x884>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	f040 829a 	bne.w	8016ff2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016abe:	4b7a      	ldr	r3, [pc, #488]	; (8016ca8 <tcp_receive+0x888>)
 8016ac0:	891c      	ldrh	r4, [r3, #8]
 8016ac2:	4b79      	ldr	r3, [pc, #484]	; (8016ca8 <tcp_receive+0x888>)
 8016ac4:	68db      	ldr	r3, [r3, #12]
 8016ac6:	899b      	ldrh	r3, [r3, #12]
 8016ac8:	b29b      	uxth	r3, r3
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7fa fd46 	bl	801155c <lwip_htons>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	b2db      	uxtb	r3, r3
 8016ad4:	f003 0303 	and.w	r3, r3, #3
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d001      	beq.n	8016ae0 <tcp_receive+0x6c0>
 8016adc:	2301      	movs	r3, #1
 8016ade:	e000      	b.n	8016ae2 <tcp_receive+0x6c2>
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	4423      	add	r3, r4
 8016ae4:	b29a      	uxth	r2, r3
 8016ae6:	4b71      	ldr	r3, [pc, #452]	; (8016cac <tcp_receive+0x88c>)
 8016ae8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016aee:	4b6f      	ldr	r3, [pc, #444]	; (8016cac <tcp_receive+0x88c>)
 8016af0:	881b      	ldrh	r3, [r3, #0]
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d275      	bcs.n	8016be2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016af6:	4b6c      	ldr	r3, [pc, #432]	; (8016ca8 <tcp_receive+0x888>)
 8016af8:	68db      	ldr	r3, [r3, #12]
 8016afa:	899b      	ldrh	r3, [r3, #12]
 8016afc:	b29b      	uxth	r3, r3
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7fa fd2c 	bl	801155c <lwip_htons>
 8016b04:	4603      	mov	r3, r0
 8016b06:	b2db      	uxtb	r3, r3
 8016b08:	f003 0301 	and.w	r3, r3, #1
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d01f      	beq.n	8016b50 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016b10:	4b65      	ldr	r3, [pc, #404]	; (8016ca8 <tcp_receive+0x888>)
 8016b12:	68db      	ldr	r3, [r3, #12]
 8016b14:	899b      	ldrh	r3, [r3, #12]
 8016b16:	b29b      	uxth	r3, r3
 8016b18:	b21b      	sxth	r3, r3
 8016b1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016b1e:	b21c      	sxth	r4, r3
 8016b20:	4b61      	ldr	r3, [pc, #388]	; (8016ca8 <tcp_receive+0x888>)
 8016b22:	68db      	ldr	r3, [r3, #12]
 8016b24:	899b      	ldrh	r3, [r3, #12]
 8016b26:	b29b      	uxth	r3, r3
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7fa fd17 	bl	801155c <lwip_htons>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7fa fd0e 	bl	801155c <lwip_htons>
 8016b40:	4603      	mov	r3, r0
 8016b42:	b21b      	sxth	r3, r3
 8016b44:	4323      	orrs	r3, r4
 8016b46:	b21a      	sxth	r2, r3
 8016b48:	4b57      	ldr	r3, [pc, #348]	; (8016ca8 <tcp_receive+0x888>)
 8016b4a:	68db      	ldr	r3, [r3, #12]
 8016b4c:	b292      	uxth	r2, r2
 8016b4e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016b54:	4b54      	ldr	r3, [pc, #336]	; (8016ca8 <tcp_receive+0x888>)
 8016b56:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016b58:	4b53      	ldr	r3, [pc, #332]	; (8016ca8 <tcp_receive+0x888>)
 8016b5a:	68db      	ldr	r3, [r3, #12]
 8016b5c:	899b      	ldrh	r3, [r3, #12]
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	4618      	mov	r0, r3
 8016b62:	f7fa fcfb 	bl	801155c <lwip_htons>
 8016b66:	4603      	mov	r3, r0
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	f003 0302 	and.w	r3, r3, #2
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d005      	beq.n	8016b7e <tcp_receive+0x75e>
            inseg.len -= 1;
 8016b72:	4b4d      	ldr	r3, [pc, #308]	; (8016ca8 <tcp_receive+0x888>)
 8016b74:	891b      	ldrh	r3, [r3, #8]
 8016b76:	3b01      	subs	r3, #1
 8016b78:	b29a      	uxth	r2, r3
 8016b7a:	4b4b      	ldr	r3, [pc, #300]	; (8016ca8 <tcp_receive+0x888>)
 8016b7c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016b7e:	4b4a      	ldr	r3, [pc, #296]	; (8016ca8 <tcp_receive+0x888>)
 8016b80:	685a      	ldr	r2, [r3, #4]
 8016b82:	4b49      	ldr	r3, [pc, #292]	; (8016ca8 <tcp_receive+0x888>)
 8016b84:	891b      	ldrh	r3, [r3, #8]
 8016b86:	4619      	mov	r1, r3
 8016b88:	4610      	mov	r0, r2
 8016b8a:	f7fb ff3f 	bl	8012a0c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016b8e:	4b46      	ldr	r3, [pc, #280]	; (8016ca8 <tcp_receive+0x888>)
 8016b90:	891c      	ldrh	r4, [r3, #8]
 8016b92:	4b45      	ldr	r3, [pc, #276]	; (8016ca8 <tcp_receive+0x888>)
 8016b94:	68db      	ldr	r3, [r3, #12]
 8016b96:	899b      	ldrh	r3, [r3, #12]
 8016b98:	b29b      	uxth	r3, r3
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f7fa fcde 	bl	801155c <lwip_htons>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	b2db      	uxtb	r3, r3
 8016ba4:	f003 0303 	and.w	r3, r3, #3
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d001      	beq.n	8016bb0 <tcp_receive+0x790>
 8016bac:	2301      	movs	r3, #1
 8016bae:	e000      	b.n	8016bb2 <tcp_receive+0x792>
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	4423      	add	r3, r4
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	4b3d      	ldr	r3, [pc, #244]	; (8016cac <tcp_receive+0x88c>)
 8016bb8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016bba:	4b3c      	ldr	r3, [pc, #240]	; (8016cac <tcp_receive+0x88c>)
 8016bbc:	881b      	ldrh	r3, [r3, #0]
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	4b38      	ldr	r3, [pc, #224]	; (8016ca4 <tcp_receive+0x884>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	441a      	add	r2, r3
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bca:	6879      	ldr	r1, [r7, #4]
 8016bcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016bce:	440b      	add	r3, r1
 8016bd0:	429a      	cmp	r2, r3
 8016bd2:	d006      	beq.n	8016be2 <tcp_receive+0x7c2>
 8016bd4:	4b36      	ldr	r3, [pc, #216]	; (8016cb0 <tcp_receive+0x890>)
 8016bd6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8016bda:	4936      	ldr	r1, [pc, #216]	; (8016cb4 <tcp_receive+0x894>)
 8016bdc:	4836      	ldr	r0, [pc, #216]	; (8016cb8 <tcp_receive+0x898>)
 8016bde:	f005 fad9 	bl	801c194 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	f000 80e7 	beq.w	8016dba <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016bec:	4b2e      	ldr	r3, [pc, #184]	; (8016ca8 <tcp_receive+0x888>)
 8016bee:	68db      	ldr	r3, [r3, #12]
 8016bf0:	899b      	ldrh	r3, [r3, #12]
 8016bf2:	b29b      	uxth	r3, r3
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f7fa fcb1 	bl	801155c <lwip_htons>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	b2db      	uxtb	r3, r3
 8016bfe:	f003 0301 	and.w	r3, r3, #1
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d010      	beq.n	8016c28 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016c06:	e00a      	b.n	8016c1e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c0c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016c18:	68f8      	ldr	r0, [r7, #12]
 8016c1a:	f7fd fcab 	bl	8014574 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d1f0      	bne.n	8016c08 <tcp_receive+0x7e8>
 8016c26:	e0c8      	b.n	8016dba <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016c2e:	e052      	b.n	8016cd6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c32:	68db      	ldr	r3, [r3, #12]
 8016c34:	899b      	ldrh	r3, [r3, #12]
 8016c36:	b29b      	uxth	r3, r3
 8016c38:	4618      	mov	r0, r3
 8016c3a:	f7fa fc8f 	bl	801155c <lwip_htons>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	b2db      	uxtb	r3, r3
 8016c42:	f003 0301 	and.w	r3, r3, #1
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d03d      	beq.n	8016cc6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016c4a:	4b17      	ldr	r3, [pc, #92]	; (8016ca8 <tcp_receive+0x888>)
 8016c4c:	68db      	ldr	r3, [r3, #12]
 8016c4e:	899b      	ldrh	r3, [r3, #12]
 8016c50:	b29b      	uxth	r3, r3
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7fa fc82 	bl	801155c <lwip_htons>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	b2db      	uxtb	r3, r3
 8016c5c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d130      	bne.n	8016cc6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016c64:	4b10      	ldr	r3, [pc, #64]	; (8016ca8 <tcp_receive+0x888>)
 8016c66:	68db      	ldr	r3, [r3, #12]
 8016c68:	899b      	ldrh	r3, [r3, #12]
 8016c6a:	b29c      	uxth	r4, r3
 8016c6c:	2001      	movs	r0, #1
 8016c6e:	f7fa fc75 	bl	801155c <lwip_htons>
 8016c72:	4603      	mov	r3, r0
 8016c74:	461a      	mov	r2, r3
 8016c76:	4b0c      	ldr	r3, [pc, #48]	; (8016ca8 <tcp_receive+0x888>)
 8016c78:	68db      	ldr	r3, [r3, #12]
 8016c7a:	4322      	orrs	r2, r4
 8016c7c:	b292      	uxth	r2, r2
 8016c7e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016c80:	4b09      	ldr	r3, [pc, #36]	; (8016ca8 <tcp_receive+0x888>)
 8016c82:	891c      	ldrh	r4, [r3, #8]
 8016c84:	4b08      	ldr	r3, [pc, #32]	; (8016ca8 <tcp_receive+0x888>)
 8016c86:	68db      	ldr	r3, [r3, #12]
 8016c88:	899b      	ldrh	r3, [r3, #12]
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f7fa fc65 	bl	801155c <lwip_htons>
 8016c92:	4603      	mov	r3, r0
 8016c94:	b2db      	uxtb	r3, r3
 8016c96:	f003 0303 	and.w	r3, r3, #3
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d00e      	beq.n	8016cbc <tcp_receive+0x89c>
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	e00d      	b.n	8016cbe <tcp_receive+0x89e>
 8016ca2:	bf00      	nop
 8016ca4:	2000453c 	.word	0x2000453c
 8016ca8:	2000451c 	.word	0x2000451c
 8016cac:	20004546 	.word	0x20004546
 8016cb0:	0801e5f4 	.word	0x0801e5f4
 8016cb4:	0801e99c 	.word	0x0801e99c
 8016cb8:	0801e640 	.word	0x0801e640
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	4423      	add	r3, r4
 8016cc0:	b29a      	uxth	r2, r3
 8016cc2:	4b98      	ldr	r3, [pc, #608]	; (8016f24 <tcp_receive+0xb04>)
 8016cc4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cc8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016cd0:	6938      	ldr	r0, [r7, #16]
 8016cd2:	f7fd fc4f 	bl	8014574 <tcp_seg_free>
            while (next &&
 8016cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d00e      	beq.n	8016cfa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016cdc:	4b91      	ldr	r3, [pc, #580]	; (8016f24 <tcp_receive+0xb04>)
 8016cde:	881b      	ldrh	r3, [r3, #0]
 8016ce0:	461a      	mov	r2, r3
 8016ce2:	4b91      	ldr	r3, [pc, #580]	; (8016f28 <tcp_receive+0xb08>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	441a      	add	r2, r3
 8016ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cea:	68db      	ldr	r3, [r3, #12]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016cf0:	8909      	ldrh	r1, [r1, #8]
 8016cf2:	440b      	add	r3, r1
 8016cf4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	da9a      	bge.n	8016c30 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d059      	beq.n	8016db4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016d00:	4b88      	ldr	r3, [pc, #544]	; (8016f24 <tcp_receive+0xb04>)
 8016d02:	881b      	ldrh	r3, [r3, #0]
 8016d04:	461a      	mov	r2, r3
 8016d06:	4b88      	ldr	r3, [pc, #544]	; (8016f28 <tcp_receive+0xb08>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	441a      	add	r2, r3
 8016d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	685b      	ldr	r3, [r3, #4]
 8016d12:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	dd4d      	ble.n	8016db4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d1a:	68db      	ldr	r3, [r3, #12]
 8016d1c:	685b      	ldr	r3, [r3, #4]
 8016d1e:	b29a      	uxth	r2, r3
 8016d20:	4b81      	ldr	r3, [pc, #516]	; (8016f28 <tcp_receive+0xb08>)
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	b29b      	uxth	r3, r3
 8016d26:	1ad3      	subs	r3, r2, r3
 8016d28:	b29a      	uxth	r2, r3
 8016d2a:	4b80      	ldr	r3, [pc, #512]	; (8016f2c <tcp_receive+0xb0c>)
 8016d2c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016d2e:	4b7f      	ldr	r3, [pc, #508]	; (8016f2c <tcp_receive+0xb0c>)
 8016d30:	68db      	ldr	r3, [r3, #12]
 8016d32:	899b      	ldrh	r3, [r3, #12]
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7fa fc10 	bl	801155c <lwip_htons>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	b2db      	uxtb	r3, r3
 8016d40:	f003 0302 	and.w	r3, r3, #2
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d005      	beq.n	8016d54 <tcp_receive+0x934>
                inseg.len -= 1;
 8016d48:	4b78      	ldr	r3, [pc, #480]	; (8016f2c <tcp_receive+0xb0c>)
 8016d4a:	891b      	ldrh	r3, [r3, #8]
 8016d4c:	3b01      	subs	r3, #1
 8016d4e:	b29a      	uxth	r2, r3
 8016d50:	4b76      	ldr	r3, [pc, #472]	; (8016f2c <tcp_receive+0xb0c>)
 8016d52:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016d54:	4b75      	ldr	r3, [pc, #468]	; (8016f2c <tcp_receive+0xb0c>)
 8016d56:	685a      	ldr	r2, [r3, #4]
 8016d58:	4b74      	ldr	r3, [pc, #464]	; (8016f2c <tcp_receive+0xb0c>)
 8016d5a:	891b      	ldrh	r3, [r3, #8]
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	4610      	mov	r0, r2
 8016d60:	f7fb fe54 	bl	8012a0c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016d64:	4b71      	ldr	r3, [pc, #452]	; (8016f2c <tcp_receive+0xb0c>)
 8016d66:	891c      	ldrh	r4, [r3, #8]
 8016d68:	4b70      	ldr	r3, [pc, #448]	; (8016f2c <tcp_receive+0xb0c>)
 8016d6a:	68db      	ldr	r3, [r3, #12]
 8016d6c:	899b      	ldrh	r3, [r3, #12]
 8016d6e:	b29b      	uxth	r3, r3
 8016d70:	4618      	mov	r0, r3
 8016d72:	f7fa fbf3 	bl	801155c <lwip_htons>
 8016d76:	4603      	mov	r3, r0
 8016d78:	b2db      	uxtb	r3, r3
 8016d7a:	f003 0303 	and.w	r3, r3, #3
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d001      	beq.n	8016d86 <tcp_receive+0x966>
 8016d82:	2301      	movs	r3, #1
 8016d84:	e000      	b.n	8016d88 <tcp_receive+0x968>
 8016d86:	2300      	movs	r3, #0
 8016d88:	4423      	add	r3, r4
 8016d8a:	b29a      	uxth	r2, r3
 8016d8c:	4b65      	ldr	r3, [pc, #404]	; (8016f24 <tcp_receive+0xb04>)
 8016d8e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016d90:	4b64      	ldr	r3, [pc, #400]	; (8016f24 <tcp_receive+0xb04>)
 8016d92:	881b      	ldrh	r3, [r3, #0]
 8016d94:	461a      	mov	r2, r3
 8016d96:	4b64      	ldr	r3, [pc, #400]	; (8016f28 <tcp_receive+0xb08>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	441a      	add	r2, r3
 8016d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d9e:	68db      	ldr	r3, [r3, #12]
 8016da0:	685b      	ldr	r3, [r3, #4]
 8016da2:	429a      	cmp	r2, r3
 8016da4:	d006      	beq.n	8016db4 <tcp_receive+0x994>
 8016da6:	4b62      	ldr	r3, [pc, #392]	; (8016f30 <tcp_receive+0xb10>)
 8016da8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8016dac:	4961      	ldr	r1, [pc, #388]	; (8016f34 <tcp_receive+0xb14>)
 8016dae:	4862      	ldr	r0, [pc, #392]	; (8016f38 <tcp_receive+0xb18>)
 8016db0:	f005 f9f0 	bl	801c194 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016db8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016dba:	4b5a      	ldr	r3, [pc, #360]	; (8016f24 <tcp_receive+0xb04>)
 8016dbc:	881b      	ldrh	r3, [r3, #0]
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	4b59      	ldr	r3, [pc, #356]	; (8016f28 <tcp_receive+0xb08>)
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	441a      	add	r2, r3
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016dce:	4b55      	ldr	r3, [pc, #340]	; (8016f24 <tcp_receive+0xb04>)
 8016dd0:	881b      	ldrh	r3, [r3, #0]
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d206      	bcs.n	8016de4 <tcp_receive+0x9c4>
 8016dd6:	4b56      	ldr	r3, [pc, #344]	; (8016f30 <tcp_receive+0xb10>)
 8016dd8:	f240 6207 	movw	r2, #1543	; 0x607
 8016ddc:	4957      	ldr	r1, [pc, #348]	; (8016f3c <tcp_receive+0xb1c>)
 8016dde:	4856      	ldr	r0, [pc, #344]	; (8016f38 <tcp_receive+0xb18>)
 8016de0:	f005 f9d8 	bl	801c194 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016de8:	4b4e      	ldr	r3, [pc, #312]	; (8016f24 <tcp_receive+0xb04>)
 8016dea:	881b      	ldrh	r3, [r3, #0]
 8016dec:	1ad3      	subs	r3, r2, r3
 8016dee:	b29a      	uxth	r2, r3
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016df4:	6878      	ldr	r0, [r7, #4]
 8016df6:	f7fc fe9b 	bl	8013b30 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016dfa:	4b4c      	ldr	r3, [pc, #304]	; (8016f2c <tcp_receive+0xb0c>)
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	891b      	ldrh	r3, [r3, #8]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d006      	beq.n	8016e12 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016e04:	4b49      	ldr	r3, [pc, #292]	; (8016f2c <tcp_receive+0xb0c>)
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	4a4d      	ldr	r2, [pc, #308]	; (8016f40 <tcp_receive+0xb20>)
 8016e0a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016e0c:	4b47      	ldr	r3, [pc, #284]	; (8016f2c <tcp_receive+0xb0c>)
 8016e0e:	2200      	movs	r2, #0
 8016e10:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016e12:	4b46      	ldr	r3, [pc, #280]	; (8016f2c <tcp_receive+0xb0c>)
 8016e14:	68db      	ldr	r3, [r3, #12]
 8016e16:	899b      	ldrh	r3, [r3, #12]
 8016e18:	b29b      	uxth	r3, r3
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	f7fa fb9e 	bl	801155c <lwip_htons>
 8016e20:	4603      	mov	r3, r0
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	f003 0301 	and.w	r3, r3, #1
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	f000 80b8 	beq.w	8016f9e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016e2e:	4b45      	ldr	r3, [pc, #276]	; (8016f44 <tcp_receive+0xb24>)
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	f043 0320 	orr.w	r3, r3, #32
 8016e36:	b2da      	uxtb	r2, r3
 8016e38:	4b42      	ldr	r3, [pc, #264]	; (8016f44 <tcp_receive+0xb24>)
 8016e3a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016e3c:	e0af      	b.n	8016f9e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e42:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e48:	68db      	ldr	r3, [r3, #12]
 8016e4a:	685b      	ldr	r3, [r3, #4]
 8016e4c:	4a36      	ldr	r2, [pc, #216]	; (8016f28 <tcp_receive+0xb08>)
 8016e4e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016e50:	68bb      	ldr	r3, [r7, #8]
 8016e52:	891b      	ldrh	r3, [r3, #8]
 8016e54:	461c      	mov	r4, r3
 8016e56:	68bb      	ldr	r3, [r7, #8]
 8016e58:	68db      	ldr	r3, [r3, #12]
 8016e5a:	899b      	ldrh	r3, [r3, #12]
 8016e5c:	b29b      	uxth	r3, r3
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7fa fb7c 	bl	801155c <lwip_htons>
 8016e64:	4603      	mov	r3, r0
 8016e66:	b2db      	uxtb	r3, r3
 8016e68:	f003 0303 	and.w	r3, r3, #3
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d001      	beq.n	8016e74 <tcp_receive+0xa54>
 8016e70:	2301      	movs	r3, #1
 8016e72:	e000      	b.n	8016e76 <tcp_receive+0xa56>
 8016e74:	2300      	movs	r3, #0
 8016e76:	191a      	adds	r2, r3, r4
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e7c:	441a      	add	r2, r3
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e86:	461c      	mov	r4, r3
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	891b      	ldrh	r3, [r3, #8]
 8016e8c:	461d      	mov	r5, r3
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	68db      	ldr	r3, [r3, #12]
 8016e92:	899b      	ldrh	r3, [r3, #12]
 8016e94:	b29b      	uxth	r3, r3
 8016e96:	4618      	mov	r0, r3
 8016e98:	f7fa fb60 	bl	801155c <lwip_htons>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	b2db      	uxtb	r3, r3
 8016ea0:	f003 0303 	and.w	r3, r3, #3
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d001      	beq.n	8016eac <tcp_receive+0xa8c>
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	e000      	b.n	8016eae <tcp_receive+0xa8e>
 8016eac:	2300      	movs	r3, #0
 8016eae:	442b      	add	r3, r5
 8016eb0:	429c      	cmp	r4, r3
 8016eb2:	d206      	bcs.n	8016ec2 <tcp_receive+0xaa2>
 8016eb4:	4b1e      	ldr	r3, [pc, #120]	; (8016f30 <tcp_receive+0xb10>)
 8016eb6:	f240 622c 	movw	r2, #1580	; 0x62c
 8016eba:	4923      	ldr	r1, [pc, #140]	; (8016f48 <tcp_receive+0xb28>)
 8016ebc:	481e      	ldr	r0, [pc, #120]	; (8016f38 <tcp_receive+0xb18>)
 8016ebe:	f005 f969 	bl	801c194 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	891b      	ldrh	r3, [r3, #8]
 8016ec6:	461c      	mov	r4, r3
 8016ec8:	68bb      	ldr	r3, [r7, #8]
 8016eca:	68db      	ldr	r3, [r3, #12]
 8016ecc:	899b      	ldrh	r3, [r3, #12]
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7fa fb43 	bl	801155c <lwip_htons>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	b2db      	uxtb	r3, r3
 8016eda:	f003 0303 	and.w	r3, r3, #3
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d001      	beq.n	8016ee6 <tcp_receive+0xac6>
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	e000      	b.n	8016ee8 <tcp_receive+0xac8>
 8016ee6:	2300      	movs	r3, #0
 8016ee8:	1919      	adds	r1, r3, r4
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016eee:	b28b      	uxth	r3, r1
 8016ef0:	1ad3      	subs	r3, r2, r3
 8016ef2:	b29a      	uxth	r2, r3
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016ef8:	6878      	ldr	r0, [r7, #4]
 8016efa:	f7fc fe19 	bl	8013b30 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016efe:	68bb      	ldr	r3, [r7, #8]
 8016f00:	685b      	ldr	r3, [r3, #4]
 8016f02:	891b      	ldrh	r3, [r3, #8]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d028      	beq.n	8016f5a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016f08:	4b0d      	ldr	r3, [pc, #52]	; (8016f40 <tcp_receive+0xb20>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d01d      	beq.n	8016f4c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016f10:	4b0b      	ldr	r3, [pc, #44]	; (8016f40 <tcp_receive+0xb20>)
 8016f12:	681a      	ldr	r2, [r3, #0]
 8016f14:	68bb      	ldr	r3, [r7, #8]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	4619      	mov	r1, r3
 8016f1a:	4610      	mov	r0, r2
 8016f1c:	f7fb ffca 	bl	8012eb4 <pbuf_cat>
 8016f20:	e018      	b.n	8016f54 <tcp_receive+0xb34>
 8016f22:	bf00      	nop
 8016f24:	20004546 	.word	0x20004546
 8016f28:	2000453c 	.word	0x2000453c
 8016f2c:	2000451c 	.word	0x2000451c
 8016f30:	0801e5f4 	.word	0x0801e5f4
 8016f34:	0801e9d4 	.word	0x0801e9d4
 8016f38:	0801e640 	.word	0x0801e640
 8016f3c:	0801ea10 	.word	0x0801ea10
 8016f40:	2000454c 	.word	0x2000454c
 8016f44:	20004549 	.word	0x20004549
 8016f48:	0801ea30 	.word	0x0801ea30
            } else {
              recv_data = cseg->p;
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	4a70      	ldr	r2, [pc, #448]	; (8017114 <tcp_receive+0xcf4>)
 8016f52:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	2200      	movs	r2, #0
 8016f58:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016f5a:	68bb      	ldr	r3, [r7, #8]
 8016f5c:	68db      	ldr	r3, [r3, #12]
 8016f5e:	899b      	ldrh	r3, [r3, #12]
 8016f60:	b29b      	uxth	r3, r3
 8016f62:	4618      	mov	r0, r3
 8016f64:	f7fa fafa 	bl	801155c <lwip_htons>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	b2db      	uxtb	r3, r3
 8016f6c:	f003 0301 	and.w	r3, r3, #1
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d00d      	beq.n	8016f90 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016f74:	4b68      	ldr	r3, [pc, #416]	; (8017118 <tcp_receive+0xcf8>)
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	f043 0320 	orr.w	r3, r3, #32
 8016f7c:	b2da      	uxtb	r2, r3
 8016f7e:	4b66      	ldr	r3, [pc, #408]	; (8017118 <tcp_receive+0xcf8>)
 8016f80:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	7d1b      	ldrb	r3, [r3, #20]
 8016f86:	2b04      	cmp	r3, #4
 8016f88:	d102      	bne.n	8016f90 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	2207      	movs	r2, #7
 8016f8e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016f98:	68b8      	ldr	r0, [r7, #8]
 8016f9a:	f7fd faeb 	bl	8014574 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d008      	beq.n	8016fb8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016faa:	68db      	ldr	r3, [r3, #12]
 8016fac:	685a      	ldr	r2, [r3, #4]
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	f43f af43 	beq.w	8016e3e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	8b5b      	ldrh	r3, [r3, #26]
 8016fbc:	f003 0301 	and.w	r3, r3, #1
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d00e      	beq.n	8016fe2 <tcp_receive+0xbc2>
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	8b5b      	ldrh	r3, [r3, #26]
 8016fc8:	f023 0301 	bic.w	r3, r3, #1
 8016fcc:	b29a      	uxth	r2, r3
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	835a      	strh	r2, [r3, #26]
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	8b5b      	ldrh	r3, [r3, #26]
 8016fd6:	f043 0302 	orr.w	r3, r3, #2
 8016fda:	b29a      	uxth	r2, r3
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016fe0:	e188      	b.n	80172f4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	8b5b      	ldrh	r3, [r3, #26]
 8016fe6:	f043 0301 	orr.w	r3, r3, #1
 8016fea:	b29a      	uxth	r2, r3
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016ff0:	e180      	b.n	80172f4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d106      	bne.n	8017008 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016ffa:	4848      	ldr	r0, [pc, #288]	; (801711c <tcp_receive+0xcfc>)
 8016ffc:	f7fd faf0 	bl	80145e0 <tcp_seg_copy>
 8017000:	4602      	mov	r2, r0
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	675a      	str	r2, [r3, #116]	; 0x74
 8017006:	e16d      	b.n	80172e4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017008:	2300      	movs	r3, #0
 801700a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017010:	63bb      	str	r3, [r7, #56]	; 0x38
 8017012:	e157      	b.n	80172c4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8017014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017016:	68db      	ldr	r3, [r3, #12]
 8017018:	685a      	ldr	r2, [r3, #4]
 801701a:	4b41      	ldr	r3, [pc, #260]	; (8017120 <tcp_receive+0xd00>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	429a      	cmp	r2, r3
 8017020:	d11d      	bne.n	801705e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017022:	4b3e      	ldr	r3, [pc, #248]	; (801711c <tcp_receive+0xcfc>)
 8017024:	891a      	ldrh	r2, [r3, #8]
 8017026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017028:	891b      	ldrh	r3, [r3, #8]
 801702a:	429a      	cmp	r2, r3
 801702c:	f240 814f 	bls.w	80172ce <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017030:	483a      	ldr	r0, [pc, #232]	; (801711c <tcp_receive+0xcfc>)
 8017032:	f7fd fad5 	bl	80145e0 <tcp_seg_copy>
 8017036:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	2b00      	cmp	r3, #0
 801703c:	f000 8149 	beq.w	80172d2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8017040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017042:	2b00      	cmp	r3, #0
 8017044:	d003      	beq.n	801704e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8017046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017048:	697a      	ldr	r2, [r7, #20]
 801704a:	601a      	str	r2, [r3, #0]
 801704c:	e002      	b.n	8017054 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	697a      	ldr	r2, [r7, #20]
 8017052:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017056:	6978      	ldr	r0, [r7, #20]
 8017058:	f7ff f8de 	bl	8016218 <tcp_oos_insert_segment>
                }
                break;
 801705c:	e139      	b.n	80172d2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017060:	2b00      	cmp	r3, #0
 8017062:	d117      	bne.n	8017094 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017064:	4b2e      	ldr	r3, [pc, #184]	; (8017120 <tcp_receive+0xd00>)
 8017066:	681a      	ldr	r2, [r3, #0]
 8017068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801706a:	68db      	ldr	r3, [r3, #12]
 801706c:	685b      	ldr	r3, [r3, #4]
 801706e:	1ad3      	subs	r3, r2, r3
 8017070:	2b00      	cmp	r3, #0
 8017072:	da57      	bge.n	8017124 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017074:	4829      	ldr	r0, [pc, #164]	; (801711c <tcp_receive+0xcfc>)
 8017076:	f7fd fab3 	bl	80145e0 <tcp_seg_copy>
 801707a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801707c:	69bb      	ldr	r3, [r7, #24]
 801707e:	2b00      	cmp	r3, #0
 8017080:	f000 8129 	beq.w	80172d6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	69ba      	ldr	r2, [r7, #24]
 8017088:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801708a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801708c:	69b8      	ldr	r0, [r7, #24]
 801708e:	f7ff f8c3 	bl	8016218 <tcp_oos_insert_segment>
                  }
                  break;
 8017092:	e120      	b.n	80172d6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017094:	4b22      	ldr	r3, [pc, #136]	; (8017120 <tcp_receive+0xd00>)
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801709a:	68db      	ldr	r3, [r3, #12]
 801709c:	685b      	ldr	r3, [r3, #4]
 801709e:	1ad3      	subs	r3, r2, r3
 80170a0:	3b01      	subs	r3, #1
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	db3e      	blt.n	8017124 <tcp_receive+0xd04>
 80170a6:	4b1e      	ldr	r3, [pc, #120]	; (8017120 <tcp_receive+0xd00>)
 80170a8:	681a      	ldr	r2, [r3, #0]
 80170aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ac:	68db      	ldr	r3, [r3, #12]
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	1ad3      	subs	r3, r2, r3
 80170b2:	3301      	adds	r3, #1
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	dc35      	bgt.n	8017124 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80170b8:	4818      	ldr	r0, [pc, #96]	; (801711c <tcp_receive+0xcfc>)
 80170ba:	f7fd fa91 	bl	80145e0 <tcp_seg_copy>
 80170be:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80170c0:	69fb      	ldr	r3, [r7, #28]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	f000 8109 	beq.w	80172da <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80170c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170ca:	68db      	ldr	r3, [r3, #12]
 80170cc:	685b      	ldr	r3, [r3, #4]
 80170ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80170d0:	8912      	ldrh	r2, [r2, #8]
 80170d2:	441a      	add	r2, r3
 80170d4:	4b12      	ldr	r3, [pc, #72]	; (8017120 <tcp_receive+0xd00>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	1ad3      	subs	r3, r2, r3
 80170da:	2b00      	cmp	r3, #0
 80170dc:	dd12      	ble.n	8017104 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80170de:	4b10      	ldr	r3, [pc, #64]	; (8017120 <tcp_receive+0xd00>)
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	b29a      	uxth	r2, r3
 80170e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170e6:	68db      	ldr	r3, [r3, #12]
 80170e8:	685b      	ldr	r3, [r3, #4]
 80170ea:	b29b      	uxth	r3, r3
 80170ec:	1ad3      	subs	r3, r2, r3
 80170ee:	b29a      	uxth	r2, r3
 80170f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80170f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170f6:	685a      	ldr	r2, [r3, #4]
 80170f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170fa:	891b      	ldrh	r3, [r3, #8]
 80170fc:	4619      	mov	r1, r3
 80170fe:	4610      	mov	r0, r2
 8017100:	f7fb fc84 	bl	8012a0c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017106:	69fa      	ldr	r2, [r7, #28]
 8017108:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801710a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801710c:	69f8      	ldr	r0, [r7, #28]
 801710e:	f7ff f883 	bl	8016218 <tcp_oos_insert_segment>
                  }
                  break;
 8017112:	e0e2      	b.n	80172da <tcp_receive+0xeba>
 8017114:	2000454c 	.word	0x2000454c
 8017118:	20004549 	.word	0x20004549
 801711c:	2000451c 	.word	0x2000451c
 8017120:	2000453c 	.word	0x2000453c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017126:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	2b00      	cmp	r3, #0
 801712e:	f040 80c6 	bne.w	80172be <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017132:	4b80      	ldr	r3, [pc, #512]	; (8017334 <tcp_receive+0xf14>)
 8017134:	681a      	ldr	r2, [r3, #0]
 8017136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	685b      	ldr	r3, [r3, #4]
 801713c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801713e:	2b00      	cmp	r3, #0
 8017140:	f340 80bd 	ble.w	80172be <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017146:	68db      	ldr	r3, [r3, #12]
 8017148:	899b      	ldrh	r3, [r3, #12]
 801714a:	b29b      	uxth	r3, r3
 801714c:	4618      	mov	r0, r3
 801714e:	f7fa fa05 	bl	801155c <lwip_htons>
 8017152:	4603      	mov	r3, r0
 8017154:	b2db      	uxtb	r3, r3
 8017156:	f003 0301 	and.w	r3, r3, #1
 801715a:	2b00      	cmp	r3, #0
 801715c:	f040 80bf 	bne.w	80172de <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017160:	4875      	ldr	r0, [pc, #468]	; (8017338 <tcp_receive+0xf18>)
 8017162:	f7fd fa3d 	bl	80145e0 <tcp_seg_copy>
 8017166:	4602      	mov	r2, r0
 8017168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801716a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	2b00      	cmp	r3, #0
 8017172:	f000 80b6 	beq.w	80172e2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017178:	68db      	ldr	r3, [r3, #12]
 801717a:	685b      	ldr	r3, [r3, #4]
 801717c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801717e:	8912      	ldrh	r2, [r2, #8]
 8017180:	441a      	add	r2, r3
 8017182:	4b6c      	ldr	r3, [pc, #432]	; (8017334 <tcp_receive+0xf14>)
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	1ad3      	subs	r3, r2, r3
 8017188:	2b00      	cmp	r3, #0
 801718a:	dd12      	ble.n	80171b2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801718c:	4b69      	ldr	r3, [pc, #420]	; (8017334 <tcp_receive+0xf14>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	b29a      	uxth	r2, r3
 8017192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017194:	68db      	ldr	r3, [r3, #12]
 8017196:	685b      	ldr	r3, [r3, #4]
 8017198:	b29b      	uxth	r3, r3
 801719a:	1ad3      	subs	r3, r2, r3
 801719c:	b29a      	uxth	r2, r3
 801719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80171a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a4:	685a      	ldr	r2, [r3, #4]
 80171a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a8:	891b      	ldrh	r3, [r3, #8]
 80171aa:	4619      	mov	r1, r3
 80171ac:	4610      	mov	r0, r2
 80171ae:	f7fb fc2d 	bl	8012a0c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80171b2:	4b62      	ldr	r3, [pc, #392]	; (801733c <tcp_receive+0xf1c>)
 80171b4:	881b      	ldrh	r3, [r3, #0]
 80171b6:	461a      	mov	r2, r3
 80171b8:	4b5e      	ldr	r3, [pc, #376]	; (8017334 <tcp_receive+0xf14>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	441a      	add	r2, r3
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171c2:	6879      	ldr	r1, [r7, #4]
 80171c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80171c6:	440b      	add	r3, r1
 80171c8:	1ad3      	subs	r3, r2, r3
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	f340 8089 	ble.w	80172e2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80171d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	68db      	ldr	r3, [r3, #12]
 80171d6:	899b      	ldrh	r3, [r3, #12]
 80171d8:	b29b      	uxth	r3, r3
 80171da:	4618      	mov	r0, r3
 80171dc:	f7fa f9be 	bl	801155c <lwip_htons>
 80171e0:	4603      	mov	r3, r0
 80171e2:	b2db      	uxtb	r3, r3
 80171e4:	f003 0301 	and.w	r3, r3, #1
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d022      	beq.n	8017232 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80171ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	68db      	ldr	r3, [r3, #12]
 80171f2:	899b      	ldrh	r3, [r3, #12]
 80171f4:	b29b      	uxth	r3, r3
 80171f6:	b21b      	sxth	r3, r3
 80171f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80171fc:	b21c      	sxth	r4, r3
 80171fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	68db      	ldr	r3, [r3, #12]
 8017204:	899b      	ldrh	r3, [r3, #12]
 8017206:	b29b      	uxth	r3, r3
 8017208:	4618      	mov	r0, r3
 801720a:	f7fa f9a7 	bl	801155c <lwip_htons>
 801720e:	4603      	mov	r3, r0
 8017210:	b2db      	uxtb	r3, r3
 8017212:	b29b      	uxth	r3, r3
 8017214:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017218:	b29b      	uxth	r3, r3
 801721a:	4618      	mov	r0, r3
 801721c:	f7fa f99e 	bl	801155c <lwip_htons>
 8017220:	4603      	mov	r3, r0
 8017222:	b21b      	sxth	r3, r3
 8017224:	4323      	orrs	r3, r4
 8017226:	b21a      	sxth	r2, r3
 8017228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	68db      	ldr	r3, [r3, #12]
 801722e:	b292      	uxth	r2, r2
 8017230:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017236:	b29a      	uxth	r2, r3
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801723c:	4413      	add	r3, r2
 801723e:	b299      	uxth	r1, r3
 8017240:	4b3c      	ldr	r3, [pc, #240]	; (8017334 <tcp_receive+0xf14>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	b29a      	uxth	r2, r3
 8017246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	1a8a      	subs	r2, r1, r2
 801724c:	b292      	uxth	r2, r2
 801724e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	685a      	ldr	r2, [r3, #4]
 8017256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	891b      	ldrh	r3, [r3, #8]
 801725c:	4619      	mov	r1, r3
 801725e:	4610      	mov	r0, r2
 8017260:	f7fb fbd4 	bl	8012a0c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	891c      	ldrh	r4, [r3, #8]
 801726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	68db      	ldr	r3, [r3, #12]
 8017270:	899b      	ldrh	r3, [r3, #12]
 8017272:	b29b      	uxth	r3, r3
 8017274:	4618      	mov	r0, r3
 8017276:	f7fa f971 	bl	801155c <lwip_htons>
 801727a:	4603      	mov	r3, r0
 801727c:	b2db      	uxtb	r3, r3
 801727e:	f003 0303 	and.w	r3, r3, #3
 8017282:	2b00      	cmp	r3, #0
 8017284:	d001      	beq.n	801728a <tcp_receive+0xe6a>
 8017286:	2301      	movs	r3, #1
 8017288:	e000      	b.n	801728c <tcp_receive+0xe6c>
 801728a:	2300      	movs	r3, #0
 801728c:	4423      	add	r3, r4
 801728e:	b29a      	uxth	r2, r3
 8017290:	4b2a      	ldr	r3, [pc, #168]	; (801733c <tcp_receive+0xf1c>)
 8017292:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017294:	4b29      	ldr	r3, [pc, #164]	; (801733c <tcp_receive+0xf1c>)
 8017296:	881b      	ldrh	r3, [r3, #0]
 8017298:	461a      	mov	r2, r3
 801729a:	4b26      	ldr	r3, [pc, #152]	; (8017334 <tcp_receive+0xf14>)
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	441a      	add	r2, r3
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172a4:	6879      	ldr	r1, [r7, #4]
 80172a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80172a8:	440b      	add	r3, r1
 80172aa:	429a      	cmp	r2, r3
 80172ac:	d019      	beq.n	80172e2 <tcp_receive+0xec2>
 80172ae:	4b24      	ldr	r3, [pc, #144]	; (8017340 <tcp_receive+0xf20>)
 80172b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80172b4:	4923      	ldr	r1, [pc, #140]	; (8017344 <tcp_receive+0xf24>)
 80172b6:	4824      	ldr	r0, [pc, #144]	; (8017348 <tcp_receive+0xf28>)
 80172b8:	f004 ff6c 	bl	801c194 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80172bc:	e011      	b.n	80172e2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80172be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80172c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	f47f aea4 	bne.w	8017014 <tcp_receive+0xbf4>
 80172cc:	e00a      	b.n	80172e4 <tcp_receive+0xec4>
                break;
 80172ce:	bf00      	nop
 80172d0:	e008      	b.n	80172e4 <tcp_receive+0xec4>
                break;
 80172d2:	bf00      	nop
 80172d4:	e006      	b.n	80172e4 <tcp_receive+0xec4>
                  break;
 80172d6:	bf00      	nop
 80172d8:	e004      	b.n	80172e4 <tcp_receive+0xec4>
                  break;
 80172da:	bf00      	nop
 80172dc:	e002      	b.n	80172e4 <tcp_receive+0xec4>
                  break;
 80172de:	bf00      	nop
 80172e0:	e000      	b.n	80172e4 <tcp_receive+0xec4>
                break;
 80172e2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f001 fe9d 	bl	8019024 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80172ea:	e003      	b.n	80172f4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f001 fe99 	bl	8019024 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80172f2:	e01a      	b.n	801732a <tcp_receive+0xf0a>
 80172f4:	e019      	b.n	801732a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80172f6:	4b0f      	ldr	r3, [pc, #60]	; (8017334 <tcp_receive+0xf14>)
 80172f8:	681a      	ldr	r2, [r3, #0]
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172fe:	1ad3      	subs	r3, r2, r3
 8017300:	2b00      	cmp	r3, #0
 8017302:	db0a      	blt.n	801731a <tcp_receive+0xefa>
 8017304:	4b0b      	ldr	r3, [pc, #44]	; (8017334 <tcp_receive+0xf14>)
 8017306:	681a      	ldr	r2, [r3, #0]
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801730c:	6879      	ldr	r1, [r7, #4]
 801730e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017310:	440b      	add	r3, r1
 8017312:	1ad3      	subs	r3, r2, r3
 8017314:	3301      	adds	r3, #1
 8017316:	2b00      	cmp	r3, #0
 8017318:	dd07      	ble.n	801732a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	8b5b      	ldrh	r3, [r3, #26]
 801731e:	f043 0302 	orr.w	r3, r3, #2
 8017322:	b29a      	uxth	r2, r3
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017328:	e7ff      	b.n	801732a <tcp_receive+0xf0a>
 801732a:	bf00      	nop
 801732c:	3750      	adds	r7, #80	; 0x50
 801732e:	46bd      	mov	sp, r7
 8017330:	bdb0      	pop	{r4, r5, r7, pc}
 8017332:	bf00      	nop
 8017334:	2000453c 	.word	0x2000453c
 8017338:	2000451c 	.word	0x2000451c
 801733c:	20004546 	.word	0x20004546
 8017340:	0801e5f4 	.word	0x0801e5f4
 8017344:	0801e99c 	.word	0x0801e99c
 8017348:	0801e640 	.word	0x0801e640

0801734c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017352:	4b15      	ldr	r3, [pc, #84]	; (80173a8 <tcp_get_next_optbyte+0x5c>)
 8017354:	881b      	ldrh	r3, [r3, #0]
 8017356:	1c5a      	adds	r2, r3, #1
 8017358:	b291      	uxth	r1, r2
 801735a:	4a13      	ldr	r2, [pc, #76]	; (80173a8 <tcp_get_next_optbyte+0x5c>)
 801735c:	8011      	strh	r1, [r2, #0]
 801735e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017360:	4b12      	ldr	r3, [pc, #72]	; (80173ac <tcp_get_next_optbyte+0x60>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d004      	beq.n	8017372 <tcp_get_next_optbyte+0x26>
 8017368:	4b11      	ldr	r3, [pc, #68]	; (80173b0 <tcp_get_next_optbyte+0x64>)
 801736a:	881b      	ldrh	r3, [r3, #0]
 801736c:	88fa      	ldrh	r2, [r7, #6]
 801736e:	429a      	cmp	r2, r3
 8017370:	d208      	bcs.n	8017384 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017372:	4b10      	ldr	r3, [pc, #64]	; (80173b4 <tcp_get_next_optbyte+0x68>)
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	3314      	adds	r3, #20
 8017378:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801737a:	88fb      	ldrh	r3, [r7, #6]
 801737c:	683a      	ldr	r2, [r7, #0]
 801737e:	4413      	add	r3, r2
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	e00b      	b.n	801739c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017384:	88fb      	ldrh	r3, [r7, #6]
 8017386:	b2da      	uxtb	r2, r3
 8017388:	4b09      	ldr	r3, [pc, #36]	; (80173b0 <tcp_get_next_optbyte+0x64>)
 801738a:	881b      	ldrh	r3, [r3, #0]
 801738c:	b2db      	uxtb	r3, r3
 801738e:	1ad3      	subs	r3, r2, r3
 8017390:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017392:	4b06      	ldr	r3, [pc, #24]	; (80173ac <tcp_get_next_optbyte+0x60>)
 8017394:	681a      	ldr	r2, [r3, #0]
 8017396:	797b      	ldrb	r3, [r7, #5]
 8017398:	4413      	add	r3, r2
 801739a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801739c:	4618      	mov	r0, r3
 801739e:	370c      	adds	r7, #12
 80173a0:	46bd      	mov	sp, r7
 80173a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a6:	4770      	bx	lr
 80173a8:	20004538 	.word	0x20004538
 80173ac:	20004534 	.word	0x20004534
 80173b0:	20004532 	.word	0x20004532
 80173b4:	2000452c 	.word	0x2000452c

080173b8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b084      	sub	sp, #16
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d106      	bne.n	80173d4 <tcp_parseopt+0x1c>
 80173c6:	4b31      	ldr	r3, [pc, #196]	; (801748c <tcp_parseopt+0xd4>)
 80173c8:	f240 727d 	movw	r2, #1917	; 0x77d
 80173cc:	4930      	ldr	r1, [pc, #192]	; (8017490 <tcp_parseopt+0xd8>)
 80173ce:	4831      	ldr	r0, [pc, #196]	; (8017494 <tcp_parseopt+0xdc>)
 80173d0:	f004 fee0 	bl	801c194 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80173d4:	4b30      	ldr	r3, [pc, #192]	; (8017498 <tcp_parseopt+0xe0>)
 80173d6:	881b      	ldrh	r3, [r3, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d053      	beq.n	8017484 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80173dc:	4b2f      	ldr	r3, [pc, #188]	; (801749c <tcp_parseopt+0xe4>)
 80173de:	2200      	movs	r2, #0
 80173e0:	801a      	strh	r2, [r3, #0]
 80173e2:	e043      	b.n	801746c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80173e4:	f7ff ffb2 	bl	801734c <tcp_get_next_optbyte>
 80173e8:	4603      	mov	r3, r0
 80173ea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80173ec:	7bfb      	ldrb	r3, [r7, #15]
 80173ee:	2b01      	cmp	r3, #1
 80173f0:	d03c      	beq.n	801746c <tcp_parseopt+0xb4>
 80173f2:	2b02      	cmp	r3, #2
 80173f4:	d002      	beq.n	80173fc <tcp_parseopt+0x44>
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d03f      	beq.n	801747a <tcp_parseopt+0xc2>
 80173fa:	e026      	b.n	801744a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80173fc:	f7ff ffa6 	bl	801734c <tcp_get_next_optbyte>
 8017400:	4603      	mov	r3, r0
 8017402:	2b04      	cmp	r3, #4
 8017404:	d13b      	bne.n	801747e <tcp_parseopt+0xc6>
 8017406:	4b25      	ldr	r3, [pc, #148]	; (801749c <tcp_parseopt+0xe4>)
 8017408:	881b      	ldrh	r3, [r3, #0]
 801740a:	3302      	adds	r3, #2
 801740c:	4a22      	ldr	r2, [pc, #136]	; (8017498 <tcp_parseopt+0xe0>)
 801740e:	8812      	ldrh	r2, [r2, #0]
 8017410:	4293      	cmp	r3, r2
 8017412:	dc34      	bgt.n	801747e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017414:	f7ff ff9a 	bl	801734c <tcp_get_next_optbyte>
 8017418:	4603      	mov	r3, r0
 801741a:	b29b      	uxth	r3, r3
 801741c:	021b      	lsls	r3, r3, #8
 801741e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017420:	f7ff ff94 	bl	801734c <tcp_get_next_optbyte>
 8017424:	4603      	mov	r3, r0
 8017426:	b29a      	uxth	r2, r3
 8017428:	89bb      	ldrh	r3, [r7, #12]
 801742a:	4313      	orrs	r3, r2
 801742c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801742e:	89bb      	ldrh	r3, [r7, #12]
 8017430:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017434:	d804      	bhi.n	8017440 <tcp_parseopt+0x88>
 8017436:	89bb      	ldrh	r3, [r7, #12]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d001      	beq.n	8017440 <tcp_parseopt+0x88>
 801743c:	89ba      	ldrh	r2, [r7, #12]
 801743e:	e001      	b.n	8017444 <tcp_parseopt+0x8c>
 8017440:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017448:	e010      	b.n	801746c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801744a:	f7ff ff7f 	bl	801734c <tcp_get_next_optbyte>
 801744e:	4603      	mov	r3, r0
 8017450:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017452:	7afb      	ldrb	r3, [r7, #11]
 8017454:	2b01      	cmp	r3, #1
 8017456:	d914      	bls.n	8017482 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017458:	7afb      	ldrb	r3, [r7, #11]
 801745a:	b29a      	uxth	r2, r3
 801745c:	4b0f      	ldr	r3, [pc, #60]	; (801749c <tcp_parseopt+0xe4>)
 801745e:	881b      	ldrh	r3, [r3, #0]
 8017460:	4413      	add	r3, r2
 8017462:	b29b      	uxth	r3, r3
 8017464:	3b02      	subs	r3, #2
 8017466:	b29a      	uxth	r2, r3
 8017468:	4b0c      	ldr	r3, [pc, #48]	; (801749c <tcp_parseopt+0xe4>)
 801746a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801746c:	4b0b      	ldr	r3, [pc, #44]	; (801749c <tcp_parseopt+0xe4>)
 801746e:	881a      	ldrh	r2, [r3, #0]
 8017470:	4b09      	ldr	r3, [pc, #36]	; (8017498 <tcp_parseopt+0xe0>)
 8017472:	881b      	ldrh	r3, [r3, #0]
 8017474:	429a      	cmp	r2, r3
 8017476:	d3b5      	bcc.n	80173e4 <tcp_parseopt+0x2c>
 8017478:	e004      	b.n	8017484 <tcp_parseopt+0xcc>
          return;
 801747a:	bf00      	nop
 801747c:	e002      	b.n	8017484 <tcp_parseopt+0xcc>
            return;
 801747e:	bf00      	nop
 8017480:	e000      	b.n	8017484 <tcp_parseopt+0xcc>
            return;
 8017482:	bf00      	nop
      }
    }
  }
}
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}
 801748a:	bf00      	nop
 801748c:	0801e5f4 	.word	0x0801e5f4
 8017490:	0801ea58 	.word	0x0801ea58
 8017494:	0801e640 	.word	0x0801e640
 8017498:	20004530 	.word	0x20004530
 801749c:	20004538 	.word	0x20004538

080174a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80174a0:	b480      	push	{r7}
 80174a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80174a4:	4b05      	ldr	r3, [pc, #20]	; (80174bc <tcp_trigger_input_pcb_close+0x1c>)
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	f043 0310 	orr.w	r3, r3, #16
 80174ac:	b2da      	uxtb	r2, r3
 80174ae:	4b03      	ldr	r3, [pc, #12]	; (80174bc <tcp_trigger_input_pcb_close+0x1c>)
 80174b0:	701a      	strb	r2, [r3, #0]
}
 80174b2:	bf00      	nop
 80174b4:	46bd      	mov	sp, r7
 80174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ba:	4770      	bx	lr
 80174bc:	20004549 	.word	0x20004549

080174c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b084      	sub	sp, #16
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	60f8      	str	r0, [r7, #12]
 80174c8:	60b9      	str	r1, [r7, #8]
 80174ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d00a      	beq.n	80174e8 <tcp_route+0x28>
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	7a1b      	ldrb	r3, [r3, #8]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d006      	beq.n	80174e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	7a1b      	ldrb	r3, [r3, #8]
 80174de:	4618      	mov	r0, r3
 80174e0:	f7fb f890 	bl	8012604 <netif_get_by_index>
 80174e4:	4603      	mov	r3, r0
 80174e6:	e003      	b.n	80174f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80174e8:	6878      	ldr	r0, [r7, #4]
 80174ea:	f003 fb17 	bl	801ab1c <ip4_route>
 80174ee:	4603      	mov	r3, r0
  }
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3710      	adds	r7, #16
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}

080174f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80174f8:	b590      	push	{r4, r7, lr}
 80174fa:	b087      	sub	sp, #28
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	60f8      	str	r0, [r7, #12]
 8017500:	60b9      	str	r1, [r7, #8]
 8017502:	603b      	str	r3, [r7, #0]
 8017504:	4613      	mov	r3, r2
 8017506:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d105      	bne.n	801751a <tcp_create_segment+0x22>
 801750e:	4b44      	ldr	r3, [pc, #272]	; (8017620 <tcp_create_segment+0x128>)
 8017510:	22a3      	movs	r2, #163	; 0xa3
 8017512:	4944      	ldr	r1, [pc, #272]	; (8017624 <tcp_create_segment+0x12c>)
 8017514:	4844      	ldr	r0, [pc, #272]	; (8017628 <tcp_create_segment+0x130>)
 8017516:	f004 fe3d 	bl	801c194 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d105      	bne.n	801752c <tcp_create_segment+0x34>
 8017520:	4b3f      	ldr	r3, [pc, #252]	; (8017620 <tcp_create_segment+0x128>)
 8017522:	22a4      	movs	r2, #164	; 0xa4
 8017524:	4941      	ldr	r1, [pc, #260]	; (801762c <tcp_create_segment+0x134>)
 8017526:	4840      	ldr	r0, [pc, #256]	; (8017628 <tcp_create_segment+0x130>)
 8017528:	f004 fe34 	bl	801c194 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801752c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017530:	009b      	lsls	r3, r3, #2
 8017532:	b2db      	uxtb	r3, r3
 8017534:	f003 0304 	and.w	r3, r3, #4
 8017538:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801753a:	2003      	movs	r0, #3
 801753c:	f7fa fcfa 	bl	8011f34 <memp_malloc>
 8017540:	6138      	str	r0, [r7, #16]
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d104      	bne.n	8017552 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017548:	68b8      	ldr	r0, [r7, #8]
 801754a:	f7fb fbe5 	bl	8012d18 <pbuf_free>
    return NULL;
 801754e:	2300      	movs	r3, #0
 8017550:	e061      	b.n	8017616 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8017552:	693b      	ldr	r3, [r7, #16]
 8017554:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017558:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801755a:	693b      	ldr	r3, [r7, #16]
 801755c:	2200      	movs	r2, #0
 801755e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017560:	693b      	ldr	r3, [r7, #16]
 8017562:	68ba      	ldr	r2, [r7, #8]
 8017564:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	891a      	ldrh	r2, [r3, #8]
 801756a:	7dfb      	ldrb	r3, [r7, #23]
 801756c:	b29b      	uxth	r3, r3
 801756e:	429a      	cmp	r2, r3
 8017570:	d205      	bcs.n	801757e <tcp_create_segment+0x86>
 8017572:	4b2b      	ldr	r3, [pc, #172]	; (8017620 <tcp_create_segment+0x128>)
 8017574:	22b0      	movs	r2, #176	; 0xb0
 8017576:	492e      	ldr	r1, [pc, #184]	; (8017630 <tcp_create_segment+0x138>)
 8017578:	482b      	ldr	r0, [pc, #172]	; (8017628 <tcp_create_segment+0x130>)
 801757a:	f004 fe0b 	bl	801c194 <iprintf>
  seg->len = p->tot_len - optlen;
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	891a      	ldrh	r2, [r3, #8]
 8017582:	7dfb      	ldrb	r3, [r7, #23]
 8017584:	b29b      	uxth	r3, r3
 8017586:	1ad3      	subs	r3, r2, r3
 8017588:	b29a      	uxth	r2, r3
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801758e:	2114      	movs	r1, #20
 8017590:	68b8      	ldr	r0, [r7, #8]
 8017592:	f7fb fb2b 	bl	8012bec <pbuf_add_header>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d004      	beq.n	80175a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801759c:	6938      	ldr	r0, [r7, #16]
 801759e:	f7fc ffe9 	bl	8014574 <tcp_seg_free>
    return NULL;
 80175a2:	2300      	movs	r3, #0
 80175a4:	e037      	b.n	8017616 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80175a6:	693b      	ldr	r3, [r7, #16]
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	685a      	ldr	r2, [r3, #4]
 80175ac:	693b      	ldr	r3, [r7, #16]
 80175ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	8ada      	ldrh	r2, [r3, #22]
 80175b4:	693b      	ldr	r3, [r7, #16]
 80175b6:	68dc      	ldr	r4, [r3, #12]
 80175b8:	4610      	mov	r0, r2
 80175ba:	f7f9 ffcf 	bl	801155c <lwip_htons>
 80175be:	4603      	mov	r3, r0
 80175c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	8b1a      	ldrh	r2, [r3, #24]
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	68dc      	ldr	r4, [r3, #12]
 80175ca:	4610      	mov	r0, r2
 80175cc:	f7f9 ffc6 	bl	801155c <lwip_htons>
 80175d0:	4603      	mov	r3, r0
 80175d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80175d4:	693b      	ldr	r3, [r7, #16]
 80175d6:	68dc      	ldr	r4, [r3, #12]
 80175d8:	6838      	ldr	r0, [r7, #0]
 80175da:	f7f9 ffd4 	bl	8011586 <lwip_htonl>
 80175de:	4603      	mov	r3, r0
 80175e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80175e2:	7dfb      	ldrb	r3, [r7, #23]
 80175e4:	089b      	lsrs	r3, r3, #2
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	b29b      	uxth	r3, r3
 80175ea:	3305      	adds	r3, #5
 80175ec:	b29b      	uxth	r3, r3
 80175ee:	031b      	lsls	r3, r3, #12
 80175f0:	b29a      	uxth	r2, r3
 80175f2:	79fb      	ldrb	r3, [r7, #7]
 80175f4:	b29b      	uxth	r3, r3
 80175f6:	4313      	orrs	r3, r2
 80175f8:	b29a      	uxth	r2, r3
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	68dc      	ldr	r4, [r3, #12]
 80175fe:	4610      	mov	r0, r2
 8017600:	f7f9 ffac 	bl	801155c <lwip_htons>
 8017604:	4603      	mov	r3, r0
 8017606:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017608:	693b      	ldr	r3, [r7, #16]
 801760a:	68db      	ldr	r3, [r3, #12]
 801760c:	2200      	movs	r2, #0
 801760e:	749a      	strb	r2, [r3, #18]
 8017610:	2200      	movs	r2, #0
 8017612:	74da      	strb	r2, [r3, #19]
  return seg;
 8017614:	693b      	ldr	r3, [r7, #16]
}
 8017616:	4618      	mov	r0, r3
 8017618:	371c      	adds	r7, #28
 801761a:	46bd      	mov	sp, r7
 801761c:	bd90      	pop	{r4, r7, pc}
 801761e:	bf00      	nop
 8017620:	0801ea74 	.word	0x0801ea74
 8017624:	0801eaa8 	.word	0x0801eaa8
 8017628:	0801eac8 	.word	0x0801eac8
 801762c:	0801eaf0 	.word	0x0801eaf0
 8017630:	0801eb14 	.word	0x0801eb14

08017634 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b086      	sub	sp, #24
 8017638:	af00      	add	r7, sp, #0
 801763a:	607b      	str	r3, [r7, #4]
 801763c:	4603      	mov	r3, r0
 801763e:	73fb      	strb	r3, [r7, #15]
 8017640:	460b      	mov	r3, r1
 8017642:	81bb      	strh	r3, [r7, #12]
 8017644:	4613      	mov	r3, r2
 8017646:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017648:	89bb      	ldrh	r3, [r7, #12]
 801764a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d105      	bne.n	801765e <tcp_pbuf_prealloc+0x2a>
 8017652:	4b30      	ldr	r3, [pc, #192]	; (8017714 <tcp_pbuf_prealloc+0xe0>)
 8017654:	22e8      	movs	r2, #232	; 0xe8
 8017656:	4930      	ldr	r1, [pc, #192]	; (8017718 <tcp_pbuf_prealloc+0xe4>)
 8017658:	4830      	ldr	r0, [pc, #192]	; (801771c <tcp_pbuf_prealloc+0xe8>)
 801765a:	f004 fd9b 	bl	801c194 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801765e:	6a3b      	ldr	r3, [r7, #32]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d105      	bne.n	8017670 <tcp_pbuf_prealloc+0x3c>
 8017664:	4b2b      	ldr	r3, [pc, #172]	; (8017714 <tcp_pbuf_prealloc+0xe0>)
 8017666:	22e9      	movs	r2, #233	; 0xe9
 8017668:	492d      	ldr	r1, [pc, #180]	; (8017720 <tcp_pbuf_prealloc+0xec>)
 801766a:	482c      	ldr	r0, [pc, #176]	; (801771c <tcp_pbuf_prealloc+0xe8>)
 801766c:	f004 fd92 	bl	801c194 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017670:	89ba      	ldrh	r2, [r7, #12]
 8017672:	897b      	ldrh	r3, [r7, #10]
 8017674:	429a      	cmp	r2, r3
 8017676:	d221      	bcs.n	80176bc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017678:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801767c:	f003 0302 	and.w	r3, r3, #2
 8017680:	2b00      	cmp	r3, #0
 8017682:	d111      	bne.n	80176a8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017684:	6a3b      	ldr	r3, [r7, #32]
 8017686:	8b5b      	ldrh	r3, [r3, #26]
 8017688:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801768c:	2b00      	cmp	r3, #0
 801768e:	d115      	bne.n	80176bc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017690:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017694:	2b00      	cmp	r3, #0
 8017696:	d007      	beq.n	80176a8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017698:	6a3b      	ldr	r3, [r7, #32]
 801769a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801769c:	2b00      	cmp	r3, #0
 801769e:	d103      	bne.n	80176a8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80176a0:	6a3b      	ldr	r3, [r7, #32]
 80176a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d009      	beq.n	80176bc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80176a8:	89bb      	ldrh	r3, [r7, #12]
 80176aa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80176ae:	f023 0203 	bic.w	r2, r3, #3
 80176b2:	897b      	ldrh	r3, [r7, #10]
 80176b4:	4293      	cmp	r3, r2
 80176b6:	bf28      	it	cs
 80176b8:	4613      	movcs	r3, r2
 80176ba:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80176bc:	8af9      	ldrh	r1, [r7, #22]
 80176be:	7bfb      	ldrb	r3, [r7, #15]
 80176c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80176c4:	4618      	mov	r0, r3
 80176c6:	f7fb f847 	bl	8012758 <pbuf_alloc>
 80176ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80176cc:	693b      	ldr	r3, [r7, #16]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d101      	bne.n	80176d6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80176d2:	2300      	movs	r3, #0
 80176d4:	e019      	b.n	801770a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d006      	beq.n	80176ec <tcp_pbuf_prealloc+0xb8>
 80176de:	4b0d      	ldr	r3, [pc, #52]	; (8017714 <tcp_pbuf_prealloc+0xe0>)
 80176e0:	f240 120b 	movw	r2, #267	; 0x10b
 80176e4:	490f      	ldr	r1, [pc, #60]	; (8017724 <tcp_pbuf_prealloc+0xf0>)
 80176e6:	480d      	ldr	r0, [pc, #52]	; (801771c <tcp_pbuf_prealloc+0xe8>)
 80176e8:	f004 fd54 	bl	801c194 <iprintf>
  *oversize = p->len - length;
 80176ec:	693b      	ldr	r3, [r7, #16]
 80176ee:	895a      	ldrh	r2, [r3, #10]
 80176f0:	89bb      	ldrh	r3, [r7, #12]
 80176f2:	1ad3      	subs	r3, r2, r3
 80176f4:	b29a      	uxth	r2, r3
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80176fa:	693b      	ldr	r3, [r7, #16]
 80176fc:	89ba      	ldrh	r2, [r7, #12]
 80176fe:	811a      	strh	r2, [r3, #8]
 8017700:	693b      	ldr	r3, [r7, #16]
 8017702:	891a      	ldrh	r2, [r3, #8]
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	815a      	strh	r2, [r3, #10]
  return p;
 8017708:	693b      	ldr	r3, [r7, #16]
}
 801770a:	4618      	mov	r0, r3
 801770c:	3718      	adds	r7, #24
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}
 8017712:	bf00      	nop
 8017714:	0801ea74 	.word	0x0801ea74
 8017718:	0801eb2c 	.word	0x0801eb2c
 801771c:	0801eac8 	.word	0x0801eac8
 8017720:	0801eb50 	.word	0x0801eb50
 8017724:	0801eb70 	.word	0x0801eb70

08017728 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
 8017730:	460b      	mov	r3, r1
 8017732:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d106      	bne.n	8017748 <tcp_write_checks+0x20>
 801773a:	4b33      	ldr	r3, [pc, #204]	; (8017808 <tcp_write_checks+0xe0>)
 801773c:	f240 1233 	movw	r2, #307	; 0x133
 8017740:	4932      	ldr	r1, [pc, #200]	; (801780c <tcp_write_checks+0xe4>)
 8017742:	4833      	ldr	r0, [pc, #204]	; (8017810 <tcp_write_checks+0xe8>)
 8017744:	f004 fd26 	bl	801c194 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	7d1b      	ldrb	r3, [r3, #20]
 801774c:	2b04      	cmp	r3, #4
 801774e:	d00e      	beq.n	801776e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017754:	2b07      	cmp	r3, #7
 8017756:	d00a      	beq.n	801776e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801775c:	2b02      	cmp	r3, #2
 801775e:	d006      	beq.n	801776e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017764:	2b03      	cmp	r3, #3
 8017766:	d002      	beq.n	801776e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017768:	f06f 030a 	mvn.w	r3, #10
 801776c:	e048      	b.n	8017800 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801776e:	887b      	ldrh	r3, [r7, #2]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d101      	bne.n	8017778 <tcp_write_checks+0x50>
    return ERR_OK;
 8017774:	2300      	movs	r3, #0
 8017776:	e043      	b.n	8017800 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801777e:	887a      	ldrh	r2, [r7, #2]
 8017780:	429a      	cmp	r2, r3
 8017782:	d909      	bls.n	8017798 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	8b5b      	ldrh	r3, [r3, #26]
 8017788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801778c:	b29a      	uxth	r2, r3
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017796:	e033      	b.n	8017800 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801779e:	2b08      	cmp	r3, #8
 80177a0:	d909      	bls.n	80177b6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	8b5b      	ldrh	r3, [r3, #26]
 80177a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80177aa:	b29a      	uxth	r2, r3
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80177b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177b4:	e024      	b.n	8017800 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d00f      	beq.n	80177e0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d11a      	bne.n	80177fe <tcp_write_checks+0xd6>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d116      	bne.n	80177fe <tcp_write_checks+0xd6>
 80177d0:	4b0d      	ldr	r3, [pc, #52]	; (8017808 <tcp_write_checks+0xe0>)
 80177d2:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80177d6:	490f      	ldr	r1, [pc, #60]	; (8017814 <tcp_write_checks+0xec>)
 80177d8:	480d      	ldr	r0, [pc, #52]	; (8017810 <tcp_write_checks+0xe8>)
 80177da:	f004 fcdb 	bl	801c194 <iprintf>
 80177de:	e00e      	b.n	80177fe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d103      	bne.n	80177f0 <tcp_write_checks+0xc8>
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d006      	beq.n	80177fe <tcp_write_checks+0xd6>
 80177f0:	4b05      	ldr	r3, [pc, #20]	; (8017808 <tcp_write_checks+0xe0>)
 80177f2:	f240 1259 	movw	r2, #345	; 0x159
 80177f6:	4908      	ldr	r1, [pc, #32]	; (8017818 <tcp_write_checks+0xf0>)
 80177f8:	4805      	ldr	r0, [pc, #20]	; (8017810 <tcp_write_checks+0xe8>)
 80177fa:	f004 fccb 	bl	801c194 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80177fe:	2300      	movs	r3, #0
}
 8017800:	4618      	mov	r0, r3
 8017802:	3708      	adds	r7, #8
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}
 8017808:	0801ea74 	.word	0x0801ea74
 801780c:	0801eb84 	.word	0x0801eb84
 8017810:	0801eac8 	.word	0x0801eac8
 8017814:	0801eba4 	.word	0x0801eba4
 8017818:	0801ebe0 	.word	0x0801ebe0

0801781c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801781c:	b590      	push	{r4, r7, lr}
 801781e:	b09b      	sub	sp, #108	; 0x6c
 8017820:	af04      	add	r7, sp, #16
 8017822:	60f8      	str	r0, [r7, #12]
 8017824:	60b9      	str	r1, [r7, #8]
 8017826:	4611      	mov	r1, r2
 8017828:	461a      	mov	r2, r3
 801782a:	460b      	mov	r3, r1
 801782c:	80fb      	strh	r3, [r7, #6]
 801782e:	4613      	mov	r3, r2
 8017830:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017832:	2300      	movs	r3, #0
 8017834:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017836:	2300      	movs	r3, #0
 8017838:	653b      	str	r3, [r7, #80]	; 0x50
 801783a:	2300      	movs	r3, #0
 801783c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801783e:	2300      	movs	r3, #0
 8017840:	64bb      	str	r3, [r7, #72]	; 0x48
 8017842:	2300      	movs	r3, #0
 8017844:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017846:	2300      	movs	r3, #0
 8017848:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801784c:	2300      	movs	r3, #0
 801784e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017852:	2300      	movs	r3, #0
 8017854:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017856:	2300      	movs	r3, #0
 8017858:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801785a:	2300      	movs	r3, #0
 801785c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d109      	bne.n	8017878 <tcp_write+0x5c>
 8017864:	4ba5      	ldr	r3, [pc, #660]	; (8017afc <tcp_write+0x2e0>)
 8017866:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801786a:	49a5      	ldr	r1, [pc, #660]	; (8017b00 <tcp_write+0x2e4>)
 801786c:	48a5      	ldr	r0, [pc, #660]	; (8017b04 <tcp_write+0x2e8>)
 801786e:	f004 fc91 	bl	801c194 <iprintf>
 8017872:	f06f 030f 	mvn.w	r3, #15
 8017876:	e32c      	b.n	8017ed2 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801787e:	085b      	lsrs	r3, r3, #1
 8017880:	b29a      	uxth	r2, r3
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017886:	4293      	cmp	r3, r2
 8017888:	bf28      	it	cs
 801788a:	4613      	movcs	r3, r2
 801788c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801788e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017890:	2b00      	cmp	r3, #0
 8017892:	d102      	bne.n	801789a <tcp_write+0x7e>
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017898:	e000      	b.n	801789c <tcp_write+0x80>
 801789a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801789c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801789e:	68bb      	ldr	r3, [r7, #8]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d109      	bne.n	80178b8 <tcp_write+0x9c>
 80178a4:	4b95      	ldr	r3, [pc, #596]	; (8017afc <tcp_write+0x2e0>)
 80178a6:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80178aa:	4997      	ldr	r1, [pc, #604]	; (8017b08 <tcp_write+0x2ec>)
 80178ac:	4895      	ldr	r0, [pc, #596]	; (8017b04 <tcp_write+0x2e8>)
 80178ae:	f004 fc71 	bl	801c194 <iprintf>
 80178b2:	f06f 030f 	mvn.w	r3, #15
 80178b6:	e30c      	b.n	8017ed2 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80178b8:	88fb      	ldrh	r3, [r7, #6]
 80178ba:	4619      	mov	r1, r3
 80178bc:	68f8      	ldr	r0, [r7, #12]
 80178be:	f7ff ff33 	bl	8017728 <tcp_write_checks>
 80178c2:	4603      	mov	r3, r0
 80178c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80178c8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d002      	beq.n	80178d6 <tcp_write+0xba>
    return err;
 80178d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80178d4:	e2fd      	b.n	8017ed2 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80178dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178e0:	2300      	movs	r3, #0
 80178e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	f000 80f7 	beq.w	8017ade <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178f4:	653b      	str	r3, [r7, #80]	; 0x50
 80178f6:	e002      	b.n	80178fe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80178f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80178fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d1f8      	bne.n	80178f8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017908:	7a9b      	ldrb	r3, [r3, #10]
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	b29b      	uxth	r3, r3
 801790e:	f003 0304 	and.w	r3, r3, #4
 8017912:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017914:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017918:	891b      	ldrh	r3, [r3, #8]
 801791a:	4619      	mov	r1, r3
 801791c:	8c3b      	ldrh	r3, [r7, #32]
 801791e:	440b      	add	r3, r1
 8017920:	429a      	cmp	r2, r3
 8017922:	da06      	bge.n	8017932 <tcp_write+0x116>
 8017924:	4b75      	ldr	r3, [pc, #468]	; (8017afc <tcp_write+0x2e0>)
 8017926:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801792a:	4978      	ldr	r1, [pc, #480]	; (8017b0c <tcp_write+0x2f0>)
 801792c:	4875      	ldr	r0, [pc, #468]	; (8017b04 <tcp_write+0x2e8>)
 801792e:	f004 fc31 	bl	801c194 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017934:	891a      	ldrh	r2, [r3, #8]
 8017936:	8c3b      	ldrh	r3, [r7, #32]
 8017938:	4413      	add	r3, r2
 801793a:	b29b      	uxth	r3, r3
 801793c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801793e:	1ad3      	subs	r3, r2, r3
 8017940:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017948:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801794a:	8a7b      	ldrh	r3, [r7, #18]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d027      	beq.n	80179a0 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017950:	8a7b      	ldrh	r3, [r7, #18]
 8017952:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017954:	429a      	cmp	r2, r3
 8017956:	d206      	bcs.n	8017966 <tcp_write+0x14a>
 8017958:	4b68      	ldr	r3, [pc, #416]	; (8017afc <tcp_write+0x2e0>)
 801795a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801795e:	496c      	ldr	r1, [pc, #432]	; (8017b10 <tcp_write+0x2f4>)
 8017960:	4868      	ldr	r0, [pc, #416]	; (8017b04 <tcp_write+0x2e8>)
 8017962:	f004 fc17 	bl	801c194 <iprintf>
      seg = last_unsent;
 8017966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017968:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801796a:	8a7b      	ldrh	r3, [r7, #18]
 801796c:	88fa      	ldrh	r2, [r7, #6]
 801796e:	429a      	cmp	r2, r3
 8017970:	d901      	bls.n	8017976 <tcp_write+0x15a>
 8017972:	8a7b      	ldrh	r3, [r7, #18]
 8017974:	e000      	b.n	8017978 <tcp_write+0x15c>
 8017976:	88fb      	ldrh	r3, [r7, #6]
 8017978:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801797a:	4293      	cmp	r3, r2
 801797c:	bfa8      	it	ge
 801797e:	4613      	movge	r3, r2
 8017980:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017982:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017986:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017988:	4413      	add	r3, r2
 801798a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801798e:	8a7a      	ldrh	r2, [r7, #18]
 8017990:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017992:	1ad3      	subs	r3, r2, r3
 8017994:	b29b      	uxth	r3, r3
 8017996:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017998:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801799a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801799c:	1ad3      	subs	r3, r2, r3
 801799e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80179a0:	8a7b      	ldrh	r3, [r7, #18]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d00b      	beq.n	80179be <tcp_write+0x1a2>
 80179a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80179aa:	88fb      	ldrh	r3, [r7, #6]
 80179ac:	429a      	cmp	r2, r3
 80179ae:	d006      	beq.n	80179be <tcp_write+0x1a2>
 80179b0:	4b52      	ldr	r3, [pc, #328]	; (8017afc <tcp_write+0x2e0>)
 80179b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80179b6:	4957      	ldr	r1, [pc, #348]	; (8017b14 <tcp_write+0x2f8>)
 80179b8:	4852      	ldr	r0, [pc, #328]	; (8017b04 <tcp_write+0x2e8>)
 80179ba:	f004 fbeb 	bl	801c194 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80179be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80179c2:	88fb      	ldrh	r3, [r7, #6]
 80179c4:	429a      	cmp	r2, r3
 80179c6:	f080 8168 	bcs.w	8017c9a <tcp_write+0x47e>
 80179ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	f000 8164 	beq.w	8017c9a <tcp_write+0x47e>
 80179d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179d4:	891b      	ldrh	r3, [r3, #8]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	f000 815f 	beq.w	8017c9a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80179dc:	88fa      	ldrh	r2, [r7, #6]
 80179de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80179e2:	1ad2      	subs	r2, r2, r3
 80179e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80179e6:	4293      	cmp	r3, r2
 80179e8:	bfa8      	it	ge
 80179ea:	4613      	movge	r3, r2
 80179ec:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80179ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179f0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80179f2:	797b      	ldrb	r3, [r7, #5]
 80179f4:	f003 0301 	and.w	r3, r3, #1
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d027      	beq.n	8017a4c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80179fc:	f107 0012 	add.w	r0, r7, #18
 8017a00:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017a02:	8bf9      	ldrh	r1, [r7, #30]
 8017a04:	2301      	movs	r3, #1
 8017a06:	9302      	str	r3, [sp, #8]
 8017a08:	797b      	ldrb	r3, [r7, #5]
 8017a0a:	9301      	str	r3, [sp, #4]
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	9300      	str	r3, [sp, #0]
 8017a10:	4603      	mov	r3, r0
 8017a12:	2000      	movs	r0, #0
 8017a14:	f7ff fe0e 	bl	8017634 <tcp_pbuf_prealloc>
 8017a18:	6578      	str	r0, [r7, #84]	; 0x54
 8017a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	f000 8226 	beq.w	8017e6e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a24:	6858      	ldr	r0, [r3, #4]
 8017a26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a2a:	68ba      	ldr	r2, [r7, #8]
 8017a2c:	4413      	add	r3, r2
 8017a2e:	8bfa      	ldrh	r2, [r7, #30]
 8017a30:	4619      	mov	r1, r3
 8017a32:	f004 fb9c 	bl	801c16e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017a36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017a38:	f7fb f9fc 	bl	8012e34 <pbuf_clen>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	461a      	mov	r2, r3
 8017a40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017a44:	4413      	add	r3, r2
 8017a46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017a4a:	e041      	b.n	8017ad0 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a4e:	685b      	ldr	r3, [r3, #4]
 8017a50:	637b      	str	r3, [r7, #52]	; 0x34
 8017a52:	e002      	b.n	8017a5a <tcp_write+0x23e>
 8017a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	637b      	str	r3, [r7, #52]	; 0x34
 8017a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d1f8      	bne.n	8017a54 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a64:	7b1b      	ldrb	r3, [r3, #12]
 8017a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d115      	bne.n	8017a9a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a70:	685b      	ldr	r3, [r3, #4]
 8017a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a74:	8952      	ldrh	r2, [r2, #10]
 8017a76:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017a78:	68ba      	ldr	r2, [r7, #8]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d10d      	bne.n	8017a9a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017a7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d006      	beq.n	8017a94 <tcp_write+0x278>
 8017a86:	4b1d      	ldr	r3, [pc, #116]	; (8017afc <tcp_write+0x2e0>)
 8017a88:	f240 2231 	movw	r2, #561	; 0x231
 8017a8c:	4922      	ldr	r1, [pc, #136]	; (8017b18 <tcp_write+0x2fc>)
 8017a8e:	481d      	ldr	r0, [pc, #116]	; (8017b04 <tcp_write+0x2e8>)
 8017a90:	f004 fb80 	bl	801c194 <iprintf>
          extendlen = seglen;
 8017a94:	8bfb      	ldrh	r3, [r7, #30]
 8017a96:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017a98:	e01a      	b.n	8017ad0 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017a9a:	8bfb      	ldrh	r3, [r7, #30]
 8017a9c:	2201      	movs	r2, #1
 8017a9e:	4619      	mov	r1, r3
 8017aa0:	2000      	movs	r0, #0
 8017aa2:	f7fa fe59 	bl	8012758 <pbuf_alloc>
 8017aa6:	6578      	str	r0, [r7, #84]	; 0x54
 8017aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	f000 81e1 	beq.w	8017e72 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017ab0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ab4:	68ba      	ldr	r2, [r7, #8]
 8017ab6:	441a      	add	r2, r3
 8017ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017aba:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017abc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017abe:	f7fb f9b9 	bl	8012e34 <pbuf_clen>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	461a      	mov	r2, r3
 8017ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017aca:	4413      	add	r3, r2
 8017acc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017ad0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ad4:	8bfb      	ldrh	r3, [r7, #30]
 8017ad6:	4413      	add	r3, r2
 8017ad8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017adc:	e0dd      	b.n	8017c9a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	f000 80d8 	beq.w	8017c9a <tcp_write+0x47e>
 8017aea:	4b04      	ldr	r3, [pc, #16]	; (8017afc <tcp_write+0x2e0>)
 8017aec:	f240 224b 	movw	r2, #587	; 0x24b
 8017af0:	490a      	ldr	r1, [pc, #40]	; (8017b1c <tcp_write+0x300>)
 8017af2:	4804      	ldr	r0, [pc, #16]	; (8017b04 <tcp_write+0x2e8>)
 8017af4:	f004 fb4e 	bl	801c194 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017af8:	e0cf      	b.n	8017c9a <tcp_write+0x47e>
 8017afa:	bf00      	nop
 8017afc:	0801ea74 	.word	0x0801ea74
 8017b00:	0801ec14 	.word	0x0801ec14
 8017b04:	0801eac8 	.word	0x0801eac8
 8017b08:	0801ec2c 	.word	0x0801ec2c
 8017b0c:	0801ec60 	.word	0x0801ec60
 8017b10:	0801ec78 	.word	0x0801ec78
 8017b14:	0801ec98 	.word	0x0801ec98
 8017b18:	0801ecb8 	.word	0x0801ecb8
 8017b1c:	0801ece4 	.word	0x0801ece4
    struct pbuf *p;
    u16_t left = len - pos;
 8017b20:	88fa      	ldrh	r2, [r7, #6]
 8017b22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b26:	1ad3      	subs	r3, r2, r3
 8017b28:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017b2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017b2e:	b29b      	uxth	r3, r3
 8017b30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017b32:	1ad3      	subs	r3, r2, r3
 8017b34:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017b36:	8b7a      	ldrh	r2, [r7, #26]
 8017b38:	8bbb      	ldrh	r3, [r7, #28]
 8017b3a:	4293      	cmp	r3, r2
 8017b3c:	bf28      	it	cs
 8017b3e:	4613      	movcs	r3, r2
 8017b40:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017b42:	797b      	ldrb	r3, [r7, #5]
 8017b44:	f003 0301 	and.w	r3, r3, #1
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d036      	beq.n	8017bba <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017b4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017b50:	b29a      	uxth	r2, r3
 8017b52:	8b3b      	ldrh	r3, [r7, #24]
 8017b54:	4413      	add	r3, r2
 8017b56:	b299      	uxth	r1, r3
 8017b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	bf0c      	ite	eq
 8017b5e:	2301      	moveq	r3, #1
 8017b60:	2300      	movne	r3, #0
 8017b62:	b2db      	uxtb	r3, r3
 8017b64:	f107 0012 	add.w	r0, r7, #18
 8017b68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017b6a:	9302      	str	r3, [sp, #8]
 8017b6c:	797b      	ldrb	r3, [r7, #5]
 8017b6e:	9301      	str	r3, [sp, #4]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	9300      	str	r3, [sp, #0]
 8017b74:	4603      	mov	r3, r0
 8017b76:	2036      	movs	r0, #54	; 0x36
 8017b78:	f7ff fd5c 	bl	8017634 <tcp_pbuf_prealloc>
 8017b7c:	6338      	str	r0, [r7, #48]	; 0x30
 8017b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	f000 8178 	beq.w	8017e76 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b88:	895b      	ldrh	r3, [r3, #10]
 8017b8a:	8b3a      	ldrh	r2, [r7, #24]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d906      	bls.n	8017b9e <tcp_write+0x382>
 8017b90:	4b8c      	ldr	r3, [pc, #560]	; (8017dc4 <tcp_write+0x5a8>)
 8017b92:	f240 2267 	movw	r2, #615	; 0x267
 8017b96:	498c      	ldr	r1, [pc, #560]	; (8017dc8 <tcp_write+0x5ac>)
 8017b98:	488c      	ldr	r0, [pc, #560]	; (8017dcc <tcp_write+0x5b0>)
 8017b9a:	f004 fafb 	bl	801c194 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ba0:	685a      	ldr	r2, [r3, #4]
 8017ba2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017ba6:	18d0      	adds	r0, r2, r3
 8017ba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bac:	68ba      	ldr	r2, [r7, #8]
 8017bae:	4413      	add	r3, r2
 8017bb0:	8b3a      	ldrh	r2, [r7, #24]
 8017bb2:	4619      	mov	r1, r3
 8017bb4:	f004 fadb 	bl	801c16e <memcpy>
 8017bb8:	e02f      	b.n	8017c1a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017bba:	8a7b      	ldrh	r3, [r7, #18]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d006      	beq.n	8017bce <tcp_write+0x3b2>
 8017bc0:	4b80      	ldr	r3, [pc, #512]	; (8017dc4 <tcp_write+0x5a8>)
 8017bc2:	f240 2271 	movw	r2, #625	; 0x271
 8017bc6:	4982      	ldr	r1, [pc, #520]	; (8017dd0 <tcp_write+0x5b4>)
 8017bc8:	4880      	ldr	r0, [pc, #512]	; (8017dcc <tcp_write+0x5b0>)
 8017bca:	f004 fae3 	bl	801c194 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017bce:	8b3b      	ldrh	r3, [r7, #24]
 8017bd0:	2201      	movs	r2, #1
 8017bd2:	4619      	mov	r1, r3
 8017bd4:	2036      	movs	r0, #54	; 0x36
 8017bd6:	f7fa fdbf 	bl	8012758 <pbuf_alloc>
 8017bda:	6178      	str	r0, [r7, #20]
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	f000 814b 	beq.w	8017e7a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017be4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017be8:	68ba      	ldr	r2, [r7, #8]
 8017bea:	441a      	add	r2, r3
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017bf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017bf4:	b29b      	uxth	r3, r3
 8017bf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	2036      	movs	r0, #54	; 0x36
 8017bfe:	f7fa fdab 	bl	8012758 <pbuf_alloc>
 8017c02:	6338      	str	r0, [r7, #48]	; 0x30
 8017c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d103      	bne.n	8017c12 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017c0a:	6978      	ldr	r0, [r7, #20]
 8017c0c:	f7fb f884 	bl	8012d18 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017c10:	e136      	b.n	8017e80 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017c12:	6979      	ldr	r1, [r7, #20]
 8017c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c16:	f7fb f94d 	bl	8012eb4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c1c:	f7fb f90a 	bl	8012e34 <pbuf_clen>
 8017c20:	4603      	mov	r3, r0
 8017c22:	461a      	mov	r2, r3
 8017c24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017c28:	4413      	add	r3, r2
 8017c2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017c2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017c32:	2b09      	cmp	r3, #9
 8017c34:	d903      	bls.n	8017c3e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c38:	f7fb f86e 	bl	8012d18 <pbuf_free>
      goto memerr;
 8017c3c:	e120      	b.n	8017e80 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017c42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017c46:	441a      	add	r2, r3
 8017c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c4c:	9300      	str	r3, [sp, #0]
 8017c4e:	4613      	mov	r3, r2
 8017c50:	2200      	movs	r2, #0
 8017c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017c54:	68f8      	ldr	r0, [r7, #12]
 8017c56:	f7ff fc4f 	bl	80174f8 <tcp_create_segment>
 8017c5a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	f000 810d 	beq.w	8017e7e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d102      	bne.n	8017c70 <tcp_write+0x454>
      queue = seg;
 8017c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8017c6e:	e00c      	b.n	8017c8a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d106      	bne.n	8017c84 <tcp_write+0x468>
 8017c76:	4b53      	ldr	r3, [pc, #332]	; (8017dc4 <tcp_write+0x5a8>)
 8017c78:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017c7c:	4955      	ldr	r1, [pc, #340]	; (8017dd4 <tcp_write+0x5b8>)
 8017c7e:	4853      	ldr	r0, [pc, #332]	; (8017dcc <tcp_write+0x5b0>)
 8017c80:	f004 fa88 	bl	801c194 <iprintf>
      prev_seg->next = seg;
 8017c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017c88:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c8c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017c8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c92:	8b3b      	ldrh	r3, [r7, #24]
 8017c94:	4413      	add	r3, r2
 8017c96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017c9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c9e:	88fb      	ldrh	r3, [r7, #6]
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	f4ff af3d 	bcc.w	8017b20 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017ca6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d02c      	beq.n	8017d06 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017cb2:	e01e      	b.n	8017cf2 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8017cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cb6:	891a      	ldrh	r2, [r3, #8]
 8017cb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017cba:	4413      	add	r3, r2
 8017cbc:	b29a      	uxth	r2, r3
 8017cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d110      	bne.n	8017cec <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cd0:	8952      	ldrh	r2, [r2, #10]
 8017cd2:	4413      	add	r3, r2
 8017cd4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017cd6:	68b9      	ldr	r1, [r7, #8]
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f004 fa48 	bl	801c16e <memcpy>
        p->len += oversize_used;
 8017cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce0:	895a      	ldrh	r2, [r3, #10]
 8017ce2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ce4:	4413      	add	r3, r2
 8017ce6:	b29a      	uxth	r2, r3
 8017ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cea:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d1dd      	bne.n	8017cb4 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8017cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cfa:	891a      	ldrh	r2, [r3, #8]
 8017cfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017cfe:	4413      	add	r3, r2
 8017d00:	b29a      	uxth	r2, r3
 8017d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d04:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017d06:	8a7a      	ldrh	r2, [r7, #18]
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d018      	beq.n	8017d46 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d106      	bne.n	8017d28 <tcp_write+0x50c>
 8017d1a:	4b2a      	ldr	r3, [pc, #168]	; (8017dc4 <tcp_write+0x5a8>)
 8017d1c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8017d20:	492d      	ldr	r1, [pc, #180]	; (8017dd8 <tcp_write+0x5bc>)
 8017d22:	482a      	ldr	r0, [pc, #168]	; (8017dcc <tcp_write+0x5b0>)
 8017d24:	f004 fa36 	bl	801c194 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d2a:	685b      	ldr	r3, [r3, #4]
 8017d2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f7fb f8c0 	bl	8012eb4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d36:	891a      	ldrh	r2, [r3, #8]
 8017d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d3a:	891b      	ldrh	r3, [r3, #8]
 8017d3c:	4413      	add	r3, r2
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d42:	811a      	strh	r2, [r3, #8]
 8017d44:	e037      	b.n	8017db6 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8017d46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d034      	beq.n	8017db6 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d003      	beq.n	8017d5a <tcp_write+0x53e>
 8017d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d54:	685b      	ldr	r3, [r3, #4]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d106      	bne.n	8017d68 <tcp_write+0x54c>
 8017d5a:	4b1a      	ldr	r3, [pc, #104]	; (8017dc4 <tcp_write+0x5a8>)
 8017d5c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8017d60:	491e      	ldr	r1, [pc, #120]	; (8017ddc <tcp_write+0x5c0>)
 8017d62:	481a      	ldr	r0, [pc, #104]	; (8017dcc <tcp_write+0x5b0>)
 8017d64:	f004 fa16 	bl	801c194 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d6a:	685b      	ldr	r3, [r3, #4]
 8017d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d6e:	e009      	b.n	8017d84 <tcp_write+0x568>
      p->tot_len += extendlen;
 8017d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d72:	891a      	ldrh	r2, [r3, #8]
 8017d74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d76:	4413      	add	r3, r2
 8017d78:	b29a      	uxth	r2, r3
 8017d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d1f1      	bne.n	8017d70 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8017d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d8e:	891a      	ldrh	r2, [r3, #8]
 8017d90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d92:	4413      	add	r3, r2
 8017d94:	b29a      	uxth	r2, r3
 8017d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d98:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d9c:	895a      	ldrh	r2, [r3, #10]
 8017d9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017da0:	4413      	add	r3, r2
 8017da2:	b29a      	uxth	r2, r3
 8017da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017daa:	891a      	ldrh	r2, [r3, #8]
 8017dac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017dae:	4413      	add	r3, r2
 8017db0:	b29a      	uxth	r2, r3
 8017db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017db4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d111      	bne.n	8017de0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017dc0:	66da      	str	r2, [r3, #108]	; 0x6c
 8017dc2:	e010      	b.n	8017de6 <tcp_write+0x5ca>
 8017dc4:	0801ea74 	.word	0x0801ea74
 8017dc8:	0801ed14 	.word	0x0801ed14
 8017dcc:	0801eac8 	.word	0x0801eac8
 8017dd0:	0801ed54 	.word	0x0801ed54
 8017dd4:	0801ed64 	.word	0x0801ed64
 8017dd8:	0801ed78 	.word	0x0801ed78
 8017ddc:	0801edb0 	.word	0x0801edb0
  } else {
    last_unsent->next = queue;
 8017de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017de4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017dea:	88fb      	ldrh	r3, [r7, #6]
 8017dec:	441a      	add	r2, r3
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017df8:	88fb      	ldrh	r3, [r7, #6]
 8017dfa:	1ad3      	subs	r3, r2, r3
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017e0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d00e      	beq.n	8017e36 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d10a      	bne.n	8017e36 <tcp_write+0x61a>
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d106      	bne.n	8017e36 <tcp_write+0x61a>
 8017e28:	4b2c      	ldr	r3, [pc, #176]	; (8017edc <tcp_write+0x6c0>)
 8017e2a:	f240 3213 	movw	r2, #787	; 0x313
 8017e2e:	492c      	ldr	r1, [pc, #176]	; (8017ee0 <tcp_write+0x6c4>)
 8017e30:	482c      	ldr	r0, [pc, #176]	; (8017ee4 <tcp_write+0x6c8>)
 8017e32:	f004 f9af 	bl	801c194 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d016      	beq.n	8017e6a <tcp_write+0x64e>
 8017e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e3e:	68db      	ldr	r3, [r3, #12]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d012      	beq.n	8017e6a <tcp_write+0x64e>
 8017e44:	797b      	ldrb	r3, [r7, #5]
 8017e46:	f003 0302 	and.w	r3, r3, #2
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d10d      	bne.n	8017e6a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e50:	68db      	ldr	r3, [r3, #12]
 8017e52:	899b      	ldrh	r3, [r3, #12]
 8017e54:	b29c      	uxth	r4, r3
 8017e56:	2008      	movs	r0, #8
 8017e58:	f7f9 fb80 	bl	801155c <lwip_htons>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	461a      	mov	r2, r3
 8017e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e62:	68db      	ldr	r3, [r3, #12]
 8017e64:	4322      	orrs	r2, r4
 8017e66:	b292      	uxth	r2, r2
 8017e68:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	e031      	b.n	8017ed2 <tcp_write+0x6b6>
          goto memerr;
 8017e6e:	bf00      	nop
 8017e70:	e006      	b.n	8017e80 <tcp_write+0x664>
            goto memerr;
 8017e72:	bf00      	nop
 8017e74:	e004      	b.n	8017e80 <tcp_write+0x664>
        goto memerr;
 8017e76:	bf00      	nop
 8017e78:	e002      	b.n	8017e80 <tcp_write+0x664>
        goto memerr;
 8017e7a:	bf00      	nop
 8017e7c:	e000      	b.n	8017e80 <tcp_write+0x664>
      goto memerr;
 8017e7e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	8b5b      	ldrh	r3, [r3, #26]
 8017e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e88:	b29a      	uxth	r2, r3
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d002      	beq.n	8017e9a <tcp_write+0x67e>
    pbuf_free(concat_p);
 8017e94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017e96:	f7fa ff3f 	bl	8012d18 <pbuf_free>
  }
  if (queue != NULL) {
 8017e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d002      	beq.n	8017ea6 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8017ea0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017ea2:	f7fc fb53 	bl	801454c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d00e      	beq.n	8017ece <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d10a      	bne.n	8017ece <tcp_write+0x6b2>
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d106      	bne.n	8017ece <tcp_write+0x6b2>
 8017ec0:	4b06      	ldr	r3, [pc, #24]	; (8017edc <tcp_write+0x6c0>)
 8017ec2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8017ec6:	4906      	ldr	r1, [pc, #24]	; (8017ee0 <tcp_write+0x6c4>)
 8017ec8:	4806      	ldr	r0, [pc, #24]	; (8017ee4 <tcp_write+0x6c8>)
 8017eca:	f004 f963 	bl	801c194 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	375c      	adds	r7, #92	; 0x5c
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd90      	pop	{r4, r7, pc}
 8017eda:	bf00      	nop
 8017edc:	0801ea74 	.word	0x0801ea74
 8017ee0:	0801ede8 	.word	0x0801ede8
 8017ee4:	0801eac8 	.word	0x0801eac8

08017ee8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017ee8:	b590      	push	{r4, r7, lr}
 8017eea:	b08b      	sub	sp, #44	; 0x2c
 8017eec:	af02      	add	r7, sp, #8
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	460b      	mov	r3, r1
 8017ef2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	61fb      	str	r3, [r7, #28]
 8017ef8:	2300      	movs	r3, #0
 8017efa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017efc:	2300      	movs	r3, #0
 8017efe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d106      	bne.n	8017f14 <tcp_split_unsent_seg+0x2c>
 8017f06:	4b95      	ldr	r3, [pc, #596]	; (801815c <tcp_split_unsent_seg+0x274>)
 8017f08:	f240 324b 	movw	r2, #843	; 0x34b
 8017f0c:	4994      	ldr	r1, [pc, #592]	; (8018160 <tcp_split_unsent_seg+0x278>)
 8017f0e:	4895      	ldr	r0, [pc, #596]	; (8018164 <tcp_split_unsent_seg+0x27c>)
 8017f10:	f004 f940 	bl	801c194 <iprintf>

  useg = pcb->unsent;
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f18:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017f1a:	697b      	ldr	r3, [r7, #20]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d102      	bne.n	8017f26 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f24:	e116      	b.n	8018154 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017f26:	887b      	ldrh	r3, [r7, #2]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d109      	bne.n	8017f40 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017f2c:	4b8b      	ldr	r3, [pc, #556]	; (801815c <tcp_split_unsent_seg+0x274>)
 8017f2e:	f240 3253 	movw	r2, #851	; 0x353
 8017f32:	498d      	ldr	r1, [pc, #564]	; (8018168 <tcp_split_unsent_seg+0x280>)
 8017f34:	488b      	ldr	r0, [pc, #556]	; (8018164 <tcp_split_unsent_seg+0x27c>)
 8017f36:	f004 f92d 	bl	801c194 <iprintf>
    return ERR_VAL;
 8017f3a:	f06f 0305 	mvn.w	r3, #5
 8017f3e:	e109      	b.n	8018154 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017f40:	697b      	ldr	r3, [r7, #20]
 8017f42:	891b      	ldrh	r3, [r3, #8]
 8017f44:	887a      	ldrh	r2, [r7, #2]
 8017f46:	429a      	cmp	r2, r3
 8017f48:	d301      	bcc.n	8017f4e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	e102      	b.n	8018154 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f52:	887a      	ldrh	r2, [r7, #2]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d906      	bls.n	8017f66 <tcp_split_unsent_seg+0x7e>
 8017f58:	4b80      	ldr	r3, [pc, #512]	; (801815c <tcp_split_unsent_seg+0x274>)
 8017f5a:	f240 325b 	movw	r2, #859	; 0x35b
 8017f5e:	4983      	ldr	r1, [pc, #524]	; (801816c <tcp_split_unsent_seg+0x284>)
 8017f60:	4880      	ldr	r0, [pc, #512]	; (8018164 <tcp_split_unsent_seg+0x27c>)
 8017f62:	f004 f917 	bl	801c194 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017f66:	697b      	ldr	r3, [r7, #20]
 8017f68:	891b      	ldrh	r3, [r3, #8]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d106      	bne.n	8017f7c <tcp_split_unsent_seg+0x94>
 8017f6e:	4b7b      	ldr	r3, [pc, #492]	; (801815c <tcp_split_unsent_seg+0x274>)
 8017f70:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017f74:	497e      	ldr	r1, [pc, #504]	; (8018170 <tcp_split_unsent_seg+0x288>)
 8017f76:	487b      	ldr	r0, [pc, #492]	; (8018164 <tcp_split_unsent_seg+0x27c>)
 8017f78:	f004 f90c 	bl	801c194 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017f7c:	697b      	ldr	r3, [r7, #20]
 8017f7e:	7a9b      	ldrb	r3, [r3, #10]
 8017f80:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017f82:	7bfb      	ldrb	r3, [r7, #15]
 8017f84:	009b      	lsls	r3, r3, #2
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	f003 0304 	and.w	r3, r3, #4
 8017f8c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017f8e:	697b      	ldr	r3, [r7, #20]
 8017f90:	891a      	ldrh	r2, [r3, #8]
 8017f92:	887b      	ldrh	r3, [r7, #2]
 8017f94:	1ad3      	subs	r3, r2, r3
 8017f96:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017f98:	7bbb      	ldrb	r3, [r7, #14]
 8017f9a:	b29a      	uxth	r2, r3
 8017f9c:	89bb      	ldrh	r3, [r7, #12]
 8017f9e:	4413      	add	r3, r2
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	2036      	movs	r0, #54	; 0x36
 8017faa:	f7fa fbd5 	bl	8012758 <pbuf_alloc>
 8017fae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017fb0:	693b      	ldr	r3, [r7, #16]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	f000 80b7 	beq.w	8018126 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	685b      	ldr	r3, [r3, #4]
 8017fbc:	891a      	ldrh	r2, [r3, #8]
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	891b      	ldrh	r3, [r3, #8]
 8017fc2:	1ad3      	subs	r3, r2, r3
 8017fc4:	b29a      	uxth	r2, r3
 8017fc6:	887b      	ldrh	r3, [r7, #2]
 8017fc8:	4413      	add	r3, r2
 8017fca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	6858      	ldr	r0, [r3, #4]
 8017fd0:	693b      	ldr	r3, [r7, #16]
 8017fd2:	685a      	ldr	r2, [r3, #4]
 8017fd4:	7bbb      	ldrb	r3, [r7, #14]
 8017fd6:	18d1      	adds	r1, r2, r3
 8017fd8:	897b      	ldrh	r3, [r7, #10]
 8017fda:	89ba      	ldrh	r2, [r7, #12]
 8017fdc:	f7fb f892 	bl	8013104 <pbuf_copy_partial>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	461a      	mov	r2, r3
 8017fe4:	89bb      	ldrh	r3, [r7, #12]
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	f040 809f 	bne.w	801812a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017fec:	697b      	ldr	r3, [r7, #20]
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	899b      	ldrh	r3, [r3, #12]
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7f9 fab1 	bl	801155c <lwip_htons>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	b2db      	uxtb	r3, r3
 8017ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018002:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018004:	2300      	movs	r3, #0
 8018006:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018008:	7efb      	ldrb	r3, [r7, #27]
 801800a:	f003 0308 	and.w	r3, r3, #8
 801800e:	2b00      	cmp	r3, #0
 8018010:	d007      	beq.n	8018022 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018012:	7efb      	ldrb	r3, [r7, #27]
 8018014:	f023 0308 	bic.w	r3, r3, #8
 8018018:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801801a:	7ebb      	ldrb	r3, [r7, #26]
 801801c:	f043 0308 	orr.w	r3, r3, #8
 8018020:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018022:	7efb      	ldrb	r3, [r7, #27]
 8018024:	f003 0301 	and.w	r3, r3, #1
 8018028:	2b00      	cmp	r3, #0
 801802a:	d007      	beq.n	801803c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801802c:	7efb      	ldrb	r3, [r7, #27]
 801802e:	f023 0301 	bic.w	r3, r3, #1
 8018032:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018034:	7ebb      	ldrb	r3, [r7, #26]
 8018036:	f043 0301 	orr.w	r3, r3, #1
 801803a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	68db      	ldr	r3, [r3, #12]
 8018040:	685b      	ldr	r3, [r3, #4]
 8018042:	4618      	mov	r0, r3
 8018044:	f7f9 fa9f 	bl	8011586 <lwip_htonl>
 8018048:	4602      	mov	r2, r0
 801804a:	887b      	ldrh	r3, [r7, #2]
 801804c:	18d1      	adds	r1, r2, r3
 801804e:	7eba      	ldrb	r2, [r7, #26]
 8018050:	7bfb      	ldrb	r3, [r7, #15]
 8018052:	9300      	str	r3, [sp, #0]
 8018054:	460b      	mov	r3, r1
 8018056:	6939      	ldr	r1, [r7, #16]
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f7ff fa4d 	bl	80174f8 <tcp_create_segment>
 801805e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018060:	69fb      	ldr	r3, [r7, #28]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d063      	beq.n	801812e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018066:	697b      	ldr	r3, [r7, #20]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	4618      	mov	r0, r3
 801806c:	f7fa fee2 	bl	8012e34 <pbuf_clen>
 8018070:	4603      	mov	r3, r0
 8018072:	461a      	mov	r2, r3
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801807a:	1a9b      	subs	r3, r3, r2
 801807c:	b29a      	uxth	r2, r3
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018084:	697b      	ldr	r3, [r7, #20]
 8018086:	6858      	ldr	r0, [r3, #4]
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	685b      	ldr	r3, [r3, #4]
 801808c:	891a      	ldrh	r2, [r3, #8]
 801808e:	89bb      	ldrh	r3, [r7, #12]
 8018090:	1ad3      	subs	r3, r2, r3
 8018092:	b29b      	uxth	r3, r3
 8018094:	4619      	mov	r1, r3
 8018096:	f7fa fcb9 	bl	8012a0c <pbuf_realloc>
  useg->len -= remainder;
 801809a:	697b      	ldr	r3, [r7, #20]
 801809c:	891a      	ldrh	r2, [r3, #8]
 801809e:	89bb      	ldrh	r3, [r7, #12]
 80180a0:	1ad3      	subs	r3, r2, r3
 80180a2:	b29a      	uxth	r2, r3
 80180a4:	697b      	ldr	r3, [r7, #20]
 80180a6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	68db      	ldr	r3, [r3, #12]
 80180ac:	899b      	ldrh	r3, [r3, #12]
 80180ae:	b29c      	uxth	r4, r3
 80180b0:	7efb      	ldrb	r3, [r7, #27]
 80180b2:	b29b      	uxth	r3, r3
 80180b4:	4618      	mov	r0, r3
 80180b6:	f7f9 fa51 	bl	801155c <lwip_htons>
 80180ba:	4603      	mov	r3, r0
 80180bc:	461a      	mov	r2, r3
 80180be:	697b      	ldr	r3, [r7, #20]
 80180c0:	68db      	ldr	r3, [r3, #12]
 80180c2:	4322      	orrs	r2, r4
 80180c4:	b292      	uxth	r2, r2
 80180c6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7fa feb1 	bl	8012e34 <pbuf_clen>
 80180d2:	4603      	mov	r3, r0
 80180d4:	461a      	mov	r2, r3
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80180dc:	4413      	add	r3, r2
 80180de:	b29a      	uxth	r2, r3
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80180e6:	69fb      	ldr	r3, [r7, #28]
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7fa fea2 	bl	8012e34 <pbuf_clen>
 80180f0:	4603      	mov	r3, r0
 80180f2:	461a      	mov	r2, r3
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80180fa:	4413      	add	r3, r2
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	681a      	ldr	r2, [r3, #0]
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	69fa      	ldr	r2, [r7, #28]
 8018110:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018112:	69fb      	ldr	r3, [r7, #28]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d103      	bne.n	8018122 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2200      	movs	r2, #0
 801811e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018122:	2300      	movs	r3, #0
 8018124:	e016      	b.n	8018154 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018126:	bf00      	nop
 8018128:	e002      	b.n	8018130 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801812a:	bf00      	nop
 801812c:	e000      	b.n	8018130 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801812e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018130:	69fb      	ldr	r3, [r7, #28]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d006      	beq.n	8018144 <tcp_split_unsent_seg+0x25c>
 8018136:	4b09      	ldr	r3, [pc, #36]	; (801815c <tcp_split_unsent_seg+0x274>)
 8018138:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801813c:	490d      	ldr	r1, [pc, #52]	; (8018174 <tcp_split_unsent_seg+0x28c>)
 801813e:	4809      	ldr	r0, [pc, #36]	; (8018164 <tcp_split_unsent_seg+0x27c>)
 8018140:	f004 f828 	bl	801c194 <iprintf>
  if (p != NULL) {
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	2b00      	cmp	r3, #0
 8018148:	d002      	beq.n	8018150 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801814a:	6938      	ldr	r0, [r7, #16]
 801814c:	f7fa fde4 	bl	8012d18 <pbuf_free>
  }

  return ERR_MEM;
 8018150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018154:	4618      	mov	r0, r3
 8018156:	3724      	adds	r7, #36	; 0x24
 8018158:	46bd      	mov	sp, r7
 801815a:	bd90      	pop	{r4, r7, pc}
 801815c:	0801ea74 	.word	0x0801ea74
 8018160:	0801ee08 	.word	0x0801ee08
 8018164:	0801eac8 	.word	0x0801eac8
 8018168:	0801ee2c 	.word	0x0801ee2c
 801816c:	0801ee50 	.word	0x0801ee50
 8018170:	0801ee60 	.word	0x0801ee60
 8018174:	0801ee70 	.word	0x0801ee70

08018178 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018178:	b590      	push	{r4, r7, lr}
 801817a:	b085      	sub	sp, #20
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d106      	bne.n	8018194 <tcp_send_fin+0x1c>
 8018186:	4b21      	ldr	r3, [pc, #132]	; (801820c <tcp_send_fin+0x94>)
 8018188:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801818c:	4920      	ldr	r1, [pc, #128]	; (8018210 <tcp_send_fin+0x98>)
 801818e:	4821      	ldr	r0, [pc, #132]	; (8018214 <tcp_send_fin+0x9c>)
 8018190:	f004 f800 	bl	801c194 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018198:	2b00      	cmp	r3, #0
 801819a:	d02e      	beq.n	80181fa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181a0:	60fb      	str	r3, [r7, #12]
 80181a2:	e002      	b.n	80181aa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d1f8      	bne.n	80181a4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	68db      	ldr	r3, [r3, #12]
 80181b6:	899b      	ldrh	r3, [r3, #12]
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	4618      	mov	r0, r3
 80181bc:	f7f9 f9ce 	bl	801155c <lwip_htons>
 80181c0:	4603      	mov	r3, r0
 80181c2:	b2db      	uxtb	r3, r3
 80181c4:	f003 0307 	and.w	r3, r3, #7
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d116      	bne.n	80181fa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	68db      	ldr	r3, [r3, #12]
 80181d0:	899b      	ldrh	r3, [r3, #12]
 80181d2:	b29c      	uxth	r4, r3
 80181d4:	2001      	movs	r0, #1
 80181d6:	f7f9 f9c1 	bl	801155c <lwip_htons>
 80181da:	4603      	mov	r3, r0
 80181dc:	461a      	mov	r2, r3
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	68db      	ldr	r3, [r3, #12]
 80181e2:	4322      	orrs	r2, r4
 80181e4:	b292      	uxth	r2, r2
 80181e6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	8b5b      	ldrh	r3, [r3, #26]
 80181ec:	f043 0320 	orr.w	r3, r3, #32
 80181f0:	b29a      	uxth	r2, r3
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80181f6:	2300      	movs	r3, #0
 80181f8:	e004      	b.n	8018204 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80181fa:	2101      	movs	r1, #1
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	f000 f80b 	bl	8018218 <tcp_enqueue_flags>
 8018202:	4603      	mov	r3, r0
}
 8018204:	4618      	mov	r0, r3
 8018206:	3714      	adds	r7, #20
 8018208:	46bd      	mov	sp, r7
 801820a:	bd90      	pop	{r4, r7, pc}
 801820c:	0801ea74 	.word	0x0801ea74
 8018210:	0801ee7c 	.word	0x0801ee7c
 8018214:	0801eac8 	.word	0x0801eac8

08018218 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b08a      	sub	sp, #40	; 0x28
 801821c:	af02      	add	r7, sp, #8
 801821e:	6078      	str	r0, [r7, #4]
 8018220:	460b      	mov	r3, r1
 8018222:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018224:	2300      	movs	r3, #0
 8018226:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018228:	2300      	movs	r3, #0
 801822a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801822c:	78fb      	ldrb	r3, [r7, #3]
 801822e:	f003 0303 	and.w	r3, r3, #3
 8018232:	2b00      	cmp	r3, #0
 8018234:	d106      	bne.n	8018244 <tcp_enqueue_flags+0x2c>
 8018236:	4b67      	ldr	r3, [pc, #412]	; (80183d4 <tcp_enqueue_flags+0x1bc>)
 8018238:	f240 4212 	movw	r2, #1042	; 0x412
 801823c:	4966      	ldr	r1, [pc, #408]	; (80183d8 <tcp_enqueue_flags+0x1c0>)
 801823e:	4867      	ldr	r0, [pc, #412]	; (80183dc <tcp_enqueue_flags+0x1c4>)
 8018240:	f003 ffa8 	bl	801c194 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d106      	bne.n	8018258 <tcp_enqueue_flags+0x40>
 801824a:	4b62      	ldr	r3, [pc, #392]	; (80183d4 <tcp_enqueue_flags+0x1bc>)
 801824c:	f240 4213 	movw	r2, #1043	; 0x413
 8018250:	4963      	ldr	r1, [pc, #396]	; (80183e0 <tcp_enqueue_flags+0x1c8>)
 8018252:	4862      	ldr	r0, [pc, #392]	; (80183dc <tcp_enqueue_flags+0x1c4>)
 8018254:	f003 ff9e 	bl	801c194 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018258:	78fb      	ldrb	r3, [r7, #3]
 801825a:	f003 0302 	and.w	r3, r3, #2
 801825e:	2b00      	cmp	r3, #0
 8018260:	d001      	beq.n	8018266 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018262:	2301      	movs	r3, #1
 8018264:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018266:	7ffb      	ldrb	r3, [r7, #31]
 8018268:	009b      	lsls	r3, r3, #2
 801826a:	b2db      	uxtb	r3, r3
 801826c:	f003 0304 	and.w	r3, r3, #4
 8018270:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018272:	7dfb      	ldrb	r3, [r7, #23]
 8018274:	b29b      	uxth	r3, r3
 8018276:	f44f 7220 	mov.w	r2, #640	; 0x280
 801827a:	4619      	mov	r1, r3
 801827c:	2036      	movs	r0, #54	; 0x36
 801827e:	f7fa fa6b 	bl	8012758 <pbuf_alloc>
 8018282:	6138      	str	r0, [r7, #16]
 8018284:	693b      	ldr	r3, [r7, #16]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d109      	bne.n	801829e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	8b5b      	ldrh	r3, [r3, #26]
 801828e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018292:	b29a      	uxth	r2, r3
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801829c:	e095      	b.n	80183ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801829e:	693b      	ldr	r3, [r7, #16]
 80182a0:	895a      	ldrh	r2, [r3, #10]
 80182a2:	7dfb      	ldrb	r3, [r7, #23]
 80182a4:	b29b      	uxth	r3, r3
 80182a6:	429a      	cmp	r2, r3
 80182a8:	d206      	bcs.n	80182b8 <tcp_enqueue_flags+0xa0>
 80182aa:	4b4a      	ldr	r3, [pc, #296]	; (80183d4 <tcp_enqueue_flags+0x1bc>)
 80182ac:	f240 423a 	movw	r2, #1082	; 0x43a
 80182b0:	494c      	ldr	r1, [pc, #304]	; (80183e4 <tcp_enqueue_flags+0x1cc>)
 80182b2:	484a      	ldr	r0, [pc, #296]	; (80183dc <tcp_enqueue_flags+0x1c4>)
 80182b4:	f003 ff6e 	bl	801c194 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80182bc:	78fa      	ldrb	r2, [r7, #3]
 80182be:	7ffb      	ldrb	r3, [r7, #31]
 80182c0:	9300      	str	r3, [sp, #0]
 80182c2:	460b      	mov	r3, r1
 80182c4:	6939      	ldr	r1, [r7, #16]
 80182c6:	6878      	ldr	r0, [r7, #4]
 80182c8:	f7ff f916 	bl	80174f8 <tcp_create_segment>
 80182cc:	60f8      	str	r0, [r7, #12]
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d109      	bne.n	80182e8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	8b5b      	ldrh	r3, [r3, #26]
 80182d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182dc:	b29a      	uxth	r2, r3
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80182e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182e6:	e070      	b.n	80183ca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	68db      	ldr	r3, [r3, #12]
 80182ec:	f003 0303 	and.w	r3, r3, #3
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d006      	beq.n	8018302 <tcp_enqueue_flags+0xea>
 80182f4:	4b37      	ldr	r3, [pc, #220]	; (80183d4 <tcp_enqueue_flags+0x1bc>)
 80182f6:	f240 4242 	movw	r2, #1090	; 0x442
 80182fa:	493b      	ldr	r1, [pc, #236]	; (80183e8 <tcp_enqueue_flags+0x1d0>)
 80182fc:	4837      	ldr	r0, [pc, #220]	; (80183dc <tcp_enqueue_flags+0x1c4>)
 80182fe:	f003 ff49 	bl	801c194 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	891b      	ldrh	r3, [r3, #8]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d006      	beq.n	8018318 <tcp_enqueue_flags+0x100>
 801830a:	4b32      	ldr	r3, [pc, #200]	; (80183d4 <tcp_enqueue_flags+0x1bc>)
 801830c:	f240 4243 	movw	r2, #1091	; 0x443
 8018310:	4936      	ldr	r1, [pc, #216]	; (80183ec <tcp_enqueue_flags+0x1d4>)
 8018312:	4832      	ldr	r0, [pc, #200]	; (80183dc <tcp_enqueue_flags+0x1c4>)
 8018314:	f003 ff3e 	bl	801c194 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801831c:	2b00      	cmp	r3, #0
 801831e:	d103      	bne.n	8018328 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	68fa      	ldr	r2, [r7, #12]
 8018324:	66da      	str	r2, [r3, #108]	; 0x6c
 8018326:	e00d      	b.n	8018344 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801832c:	61bb      	str	r3, [r7, #24]
 801832e:	e002      	b.n	8018336 <tcp_enqueue_flags+0x11e>
 8018330:	69bb      	ldr	r3, [r7, #24]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	61bb      	str	r3, [r7, #24]
 8018336:	69bb      	ldr	r3, [r7, #24]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d1f8      	bne.n	8018330 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801833e:	69bb      	ldr	r3, [r7, #24]
 8018340:	68fa      	ldr	r2, [r7, #12]
 8018342:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	2200      	movs	r2, #0
 8018348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801834c:	78fb      	ldrb	r3, [r7, #3]
 801834e:	f003 0302 	and.w	r3, r3, #2
 8018352:	2b00      	cmp	r3, #0
 8018354:	d104      	bne.n	8018360 <tcp_enqueue_flags+0x148>
 8018356:	78fb      	ldrb	r3, [r7, #3]
 8018358:	f003 0301 	and.w	r3, r3, #1
 801835c:	2b00      	cmp	r3, #0
 801835e:	d004      	beq.n	801836a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018364:	1c5a      	adds	r2, r3, #1
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801836a:	78fb      	ldrb	r3, [r7, #3]
 801836c:	f003 0301 	and.w	r3, r3, #1
 8018370:	2b00      	cmp	r3, #0
 8018372:	d006      	beq.n	8018382 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	8b5b      	ldrh	r3, [r3, #26]
 8018378:	f043 0320 	orr.w	r3, r3, #32
 801837c:	b29a      	uxth	r2, r3
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	4618      	mov	r0, r3
 8018388:	f7fa fd54 	bl	8012e34 <pbuf_clen>
 801838c:	4603      	mov	r3, r0
 801838e:	461a      	mov	r2, r3
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018396:	4413      	add	r3, r2
 8018398:	b29a      	uxth	r2, r3
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d00e      	beq.n	80183c8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d10a      	bne.n	80183c8 <tcp_enqueue_flags+0x1b0>
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d106      	bne.n	80183c8 <tcp_enqueue_flags+0x1b0>
 80183ba:	4b06      	ldr	r3, [pc, #24]	; (80183d4 <tcp_enqueue_flags+0x1bc>)
 80183bc:	f240 4266 	movw	r2, #1126	; 0x466
 80183c0:	490b      	ldr	r1, [pc, #44]	; (80183f0 <tcp_enqueue_flags+0x1d8>)
 80183c2:	4806      	ldr	r0, [pc, #24]	; (80183dc <tcp_enqueue_flags+0x1c4>)
 80183c4:	f003 fee6 	bl	801c194 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80183c8:	2300      	movs	r3, #0
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3720      	adds	r7, #32
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	0801ea74 	.word	0x0801ea74
 80183d8:	0801ee98 	.word	0x0801ee98
 80183dc:	0801eac8 	.word	0x0801eac8
 80183e0:	0801eef0 	.word	0x0801eef0
 80183e4:	0801ef10 	.word	0x0801ef10
 80183e8:	0801ef4c 	.word	0x0801ef4c
 80183ec:	0801ef64 	.word	0x0801ef64
 80183f0:	0801ef90 	.word	0x0801ef90

080183f4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80183f4:	b5b0      	push	{r4, r5, r7, lr}
 80183f6:	b08a      	sub	sp, #40	; 0x28
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d106      	bne.n	8018410 <tcp_output+0x1c>
 8018402:	4ba0      	ldr	r3, [pc, #640]	; (8018684 <tcp_output+0x290>)
 8018404:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018408:	499f      	ldr	r1, [pc, #636]	; (8018688 <tcp_output+0x294>)
 801840a:	48a0      	ldr	r0, [pc, #640]	; (801868c <tcp_output+0x298>)
 801840c:	f003 fec2 	bl	801c194 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	7d1b      	ldrb	r3, [r3, #20]
 8018414:	2b01      	cmp	r3, #1
 8018416:	d106      	bne.n	8018426 <tcp_output+0x32>
 8018418:	4b9a      	ldr	r3, [pc, #616]	; (8018684 <tcp_output+0x290>)
 801841a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801841e:	499c      	ldr	r1, [pc, #624]	; (8018690 <tcp_output+0x29c>)
 8018420:	489a      	ldr	r0, [pc, #616]	; (801868c <tcp_output+0x298>)
 8018422:	f003 feb7 	bl	801c194 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018426:	4b9b      	ldr	r3, [pc, #620]	; (8018694 <tcp_output+0x2a0>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	687a      	ldr	r2, [r7, #4]
 801842c:	429a      	cmp	r2, r3
 801842e:	d101      	bne.n	8018434 <tcp_output+0x40>
    return ERR_OK;
 8018430:	2300      	movs	r3, #0
 8018432:	e1d2      	b.n	80187da <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018440:	429a      	cmp	r2, r3
 8018442:	d203      	bcs.n	801844c <tcp_output+0x58>
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801844a:	e002      	b.n	8018452 <tcp_output+0x5e>
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018452:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018458:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801845c:	2b00      	cmp	r3, #0
 801845e:	d10b      	bne.n	8018478 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	8b5b      	ldrh	r3, [r3, #26]
 8018464:	f003 0302 	and.w	r3, r3, #2
 8018468:	2b00      	cmp	r3, #0
 801846a:	f000 81a9 	beq.w	80187c0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801846e:	6878      	ldr	r0, [r7, #4]
 8018470:	f000 fdd8 	bl	8019024 <tcp_send_empty_ack>
 8018474:	4603      	mov	r3, r0
 8018476:	e1b0      	b.n	80187da <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018478:	6879      	ldr	r1, [r7, #4]
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	3304      	adds	r3, #4
 801847e:	461a      	mov	r2, r3
 8018480:	6878      	ldr	r0, [r7, #4]
 8018482:	f7ff f81d 	bl	80174c0 <tcp_route>
 8018486:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d102      	bne.n	8018494 <tcp_output+0xa0>
    return ERR_RTE;
 801848e:	f06f 0303 	mvn.w	r3, #3
 8018492:	e1a2      	b.n	80187da <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d003      	beq.n	80184a2 <tcp_output+0xae>
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d111      	bne.n	80184c6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80184a2:	697b      	ldr	r3, [r7, #20]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d002      	beq.n	80184ae <tcp_output+0xba>
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	3304      	adds	r3, #4
 80184ac:	e000      	b.n	80184b0 <tcp_output+0xbc>
 80184ae:	2300      	movs	r3, #0
 80184b0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80184b2:	693b      	ldr	r3, [r7, #16]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d102      	bne.n	80184be <tcp_output+0xca>
      return ERR_RTE;
 80184b8:	f06f 0303 	mvn.w	r3, #3
 80184bc:	e18d      	b.n	80187da <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80184be:	693b      	ldr	r3, [r7, #16]
 80184c0:	681a      	ldr	r2, [r3, #0]
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80184c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c8:	68db      	ldr	r3, [r3, #12]
 80184ca:	685b      	ldr	r3, [r3, #4]
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7f9 f85a 	bl	8011586 <lwip_htonl>
 80184d2:	4602      	mov	r2, r0
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184d8:	1ad3      	subs	r3, r2, r3
 80184da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184dc:	8912      	ldrh	r2, [r2, #8]
 80184de:	4413      	add	r3, r2
 80184e0:	69ba      	ldr	r2, [r7, #24]
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d227      	bcs.n	8018536 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80184ec:	461a      	mov	r2, r3
 80184ee:	69bb      	ldr	r3, [r7, #24]
 80184f0:	4293      	cmp	r3, r2
 80184f2:	d114      	bne.n	801851e <tcp_output+0x12a>
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d110      	bne.n	801851e <tcp_output+0x12a>
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018502:	2b00      	cmp	r3, #0
 8018504:	d10b      	bne.n	801851e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2200      	movs	r2, #0
 801850a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	2201      	movs	r2, #1
 8018512:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	2200      	movs	r2, #0
 801851a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	8b5b      	ldrh	r3, [r3, #26]
 8018522:	f003 0302 	and.w	r3, r3, #2
 8018526:	2b00      	cmp	r3, #0
 8018528:	f000 814c 	beq.w	80187c4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801852c:	6878      	ldr	r0, [r7, #4]
 801852e:	f000 fd79 	bl	8019024 <tcp_send_empty_ack>
 8018532:	4603      	mov	r3, r0
 8018534:	e151      	b.n	80187da <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	2200      	movs	r2, #0
 801853a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018542:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018544:	6a3b      	ldr	r3, [r7, #32]
 8018546:	2b00      	cmp	r3, #0
 8018548:	f000 811b 	beq.w	8018782 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801854c:	e002      	b.n	8018554 <tcp_output+0x160>
 801854e:	6a3b      	ldr	r3, [r7, #32]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	623b      	str	r3, [r7, #32]
 8018554:	6a3b      	ldr	r3, [r7, #32]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	2b00      	cmp	r3, #0
 801855a:	d1f8      	bne.n	801854e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801855c:	e111      	b.n	8018782 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018560:	68db      	ldr	r3, [r3, #12]
 8018562:	899b      	ldrh	r3, [r3, #12]
 8018564:	b29b      	uxth	r3, r3
 8018566:	4618      	mov	r0, r3
 8018568:	f7f8 fff8 	bl	801155c <lwip_htons>
 801856c:	4603      	mov	r3, r0
 801856e:	b2db      	uxtb	r3, r3
 8018570:	f003 0304 	and.w	r3, r3, #4
 8018574:	2b00      	cmp	r3, #0
 8018576:	d006      	beq.n	8018586 <tcp_output+0x192>
 8018578:	4b42      	ldr	r3, [pc, #264]	; (8018684 <tcp_output+0x290>)
 801857a:	f240 5237 	movw	r2, #1335	; 0x537
 801857e:	4946      	ldr	r1, [pc, #280]	; (8018698 <tcp_output+0x2a4>)
 8018580:	4842      	ldr	r0, [pc, #264]	; (801868c <tcp_output+0x298>)
 8018582:	f003 fe07 	bl	801c194 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801858a:	2b00      	cmp	r3, #0
 801858c:	d01f      	beq.n	80185ce <tcp_output+0x1da>
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	8b5b      	ldrh	r3, [r3, #26]
 8018592:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018596:	2b00      	cmp	r3, #0
 8018598:	d119      	bne.n	80185ce <tcp_output+0x1da>
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d00b      	beq.n	80185ba <tcp_output+0x1c6>
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d110      	bne.n	80185ce <tcp_output+0x1da>
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185b0:	891a      	ldrh	r2, [r3, #8]
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80185b6:	429a      	cmp	r2, r3
 80185b8:	d209      	bcs.n	80185ce <tcp_output+0x1da>
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d004      	beq.n	80185ce <tcp_output+0x1da>
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80185ca:	2b08      	cmp	r3, #8
 80185cc:	d901      	bls.n	80185d2 <tcp_output+0x1de>
 80185ce:	2301      	movs	r3, #1
 80185d0:	e000      	b.n	80185d4 <tcp_output+0x1e0>
 80185d2:	2300      	movs	r3, #0
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d106      	bne.n	80185e6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	8b5b      	ldrh	r3, [r3, #26]
 80185dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	f000 80e3 	beq.w	80187ac <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	7d1b      	ldrb	r3, [r3, #20]
 80185ea:	2b02      	cmp	r3, #2
 80185ec:	d00d      	beq.n	801860a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80185ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f0:	68db      	ldr	r3, [r3, #12]
 80185f2:	899b      	ldrh	r3, [r3, #12]
 80185f4:	b29c      	uxth	r4, r3
 80185f6:	2010      	movs	r0, #16
 80185f8:	f7f8 ffb0 	bl	801155c <lwip_htons>
 80185fc:	4603      	mov	r3, r0
 80185fe:	461a      	mov	r2, r3
 8018600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018602:	68db      	ldr	r3, [r3, #12]
 8018604:	4322      	orrs	r2, r4
 8018606:	b292      	uxth	r2, r2
 8018608:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801860a:	697a      	ldr	r2, [r7, #20]
 801860c:	6879      	ldr	r1, [r7, #4]
 801860e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018610:	f000 f908 	bl	8018824 <tcp_output_segment>
 8018614:	4603      	mov	r3, r0
 8018616:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d009      	beq.n	8018634 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	8b5b      	ldrh	r3, [r3, #26]
 8018624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018628:	b29a      	uxth	r2, r3
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	835a      	strh	r2, [r3, #26]
      return err;
 801862e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018632:	e0d2      	b.n	80187da <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018636:	681a      	ldr	r2, [r3, #0]
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	7d1b      	ldrb	r3, [r3, #20]
 8018640:	2b02      	cmp	r3, #2
 8018642:	d006      	beq.n	8018652 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	8b5b      	ldrh	r3, [r3, #26]
 8018648:	f023 0303 	bic.w	r3, r3, #3
 801864c:	b29a      	uxth	r2, r3
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	4618      	mov	r0, r3
 801865a:	f7f8 ff94 	bl	8011586 <lwip_htonl>
 801865e:	4604      	mov	r4, r0
 8018660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018662:	891b      	ldrh	r3, [r3, #8]
 8018664:	461d      	mov	r5, r3
 8018666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018668:	68db      	ldr	r3, [r3, #12]
 801866a:	899b      	ldrh	r3, [r3, #12]
 801866c:	b29b      	uxth	r3, r3
 801866e:	4618      	mov	r0, r3
 8018670:	f7f8 ff74 	bl	801155c <lwip_htons>
 8018674:	4603      	mov	r3, r0
 8018676:	b2db      	uxtb	r3, r3
 8018678:	f003 0303 	and.w	r3, r3, #3
 801867c:	2b00      	cmp	r3, #0
 801867e:	d00d      	beq.n	801869c <tcp_output+0x2a8>
 8018680:	2301      	movs	r3, #1
 8018682:	e00c      	b.n	801869e <tcp_output+0x2aa>
 8018684:	0801ea74 	.word	0x0801ea74
 8018688:	0801efb8 	.word	0x0801efb8
 801868c:	0801eac8 	.word	0x0801eac8
 8018690:	0801efd0 	.word	0x0801efd0
 8018694:	2000b354 	.word	0x2000b354
 8018698:	0801eff8 	.word	0x0801eff8
 801869c:	2300      	movs	r3, #0
 801869e:	442b      	add	r3, r5
 80186a0:	4423      	add	r3, r4
 80186a2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80186a8:	68bb      	ldr	r3, [r7, #8]
 80186aa:	1ad3      	subs	r3, r2, r3
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	da02      	bge.n	80186b6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	68ba      	ldr	r2, [r7, #8]
 80186b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80186b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186b8:	891b      	ldrh	r3, [r3, #8]
 80186ba:	461c      	mov	r4, r3
 80186bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186be:	68db      	ldr	r3, [r3, #12]
 80186c0:	899b      	ldrh	r3, [r3, #12]
 80186c2:	b29b      	uxth	r3, r3
 80186c4:	4618      	mov	r0, r3
 80186c6:	f7f8 ff49 	bl	801155c <lwip_htons>
 80186ca:	4603      	mov	r3, r0
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	f003 0303 	and.w	r3, r3, #3
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d001      	beq.n	80186da <tcp_output+0x2e6>
 80186d6:	2301      	movs	r3, #1
 80186d8:	e000      	b.n	80186dc <tcp_output+0x2e8>
 80186da:	2300      	movs	r3, #0
 80186dc:	4423      	add	r3, r4
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d049      	beq.n	8018776 <tcp_output+0x382>
      seg->next = NULL;
 80186e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186e4:	2200      	movs	r2, #0
 80186e6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d105      	bne.n	80186fc <tcp_output+0x308>
        pcb->unacked = seg;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186f4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80186f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186f8:	623b      	str	r3, [r7, #32]
 80186fa:	e03f      	b.n	801877c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80186fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186fe:	68db      	ldr	r3, [r3, #12]
 8018700:	685b      	ldr	r3, [r3, #4]
 8018702:	4618      	mov	r0, r3
 8018704:	f7f8 ff3f 	bl	8011586 <lwip_htonl>
 8018708:	4604      	mov	r4, r0
 801870a:	6a3b      	ldr	r3, [r7, #32]
 801870c:	68db      	ldr	r3, [r3, #12]
 801870e:	685b      	ldr	r3, [r3, #4]
 8018710:	4618      	mov	r0, r3
 8018712:	f7f8 ff38 	bl	8011586 <lwip_htonl>
 8018716:	4603      	mov	r3, r0
 8018718:	1ae3      	subs	r3, r4, r3
 801871a:	2b00      	cmp	r3, #0
 801871c:	da24      	bge.n	8018768 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	3370      	adds	r3, #112	; 0x70
 8018722:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018724:	e002      	b.n	801872c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018726:	69fb      	ldr	r3, [r7, #28]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d011      	beq.n	8018758 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018734:	69fb      	ldr	r3, [r7, #28]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	68db      	ldr	r3, [r3, #12]
 801873a:	685b      	ldr	r3, [r3, #4]
 801873c:	4618      	mov	r0, r3
 801873e:	f7f8 ff22 	bl	8011586 <lwip_htonl>
 8018742:	4604      	mov	r4, r0
 8018744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018746:	68db      	ldr	r3, [r3, #12]
 8018748:	685b      	ldr	r3, [r3, #4]
 801874a:	4618      	mov	r0, r3
 801874c:	f7f8 ff1b 	bl	8011586 <lwip_htonl>
 8018750:	4603      	mov	r3, r0
 8018752:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018754:	2b00      	cmp	r3, #0
 8018756:	dbe6      	blt.n	8018726 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8018758:	69fb      	ldr	r3, [r7, #28]
 801875a:	681a      	ldr	r2, [r3, #0]
 801875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801875e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018760:	69fb      	ldr	r3, [r7, #28]
 8018762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018764:	601a      	str	r2, [r3, #0]
 8018766:	e009      	b.n	801877c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018768:	6a3b      	ldr	r3, [r7, #32]
 801876a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801876c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801876e:	6a3b      	ldr	r3, [r7, #32]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	623b      	str	r3, [r7, #32]
 8018774:	e002      	b.n	801877c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018776:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018778:	f7fb fefc 	bl	8014574 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018780:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8018782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018784:	2b00      	cmp	r3, #0
 8018786:	d012      	beq.n	80187ae <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878a:	68db      	ldr	r3, [r3, #12]
 801878c:	685b      	ldr	r3, [r3, #4]
 801878e:	4618      	mov	r0, r3
 8018790:	f7f8 fef9 	bl	8011586 <lwip_htonl>
 8018794:	4602      	mov	r2, r0
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801879a:	1ad3      	subs	r3, r2, r3
 801879c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801879e:	8912      	ldrh	r2, [r2, #8]
 80187a0:	4413      	add	r3, r2
  while (seg != NULL &&
 80187a2:	69ba      	ldr	r2, [r7, #24]
 80187a4:	429a      	cmp	r2, r3
 80187a6:	f4bf aeda 	bcs.w	801855e <tcp_output+0x16a>
 80187aa:	e000      	b.n	80187ae <tcp_output+0x3ba>
      break;
 80187ac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d108      	bne.n	80187c8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	2200      	movs	r2, #0
 80187ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80187be:	e004      	b.n	80187ca <tcp_output+0x3d6>
    goto output_done;
 80187c0:	bf00      	nop
 80187c2:	e002      	b.n	80187ca <tcp_output+0x3d6>
    goto output_done;
 80187c4:	bf00      	nop
 80187c6:	e000      	b.n	80187ca <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80187c8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	8b5b      	ldrh	r3, [r3, #26]
 80187ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80187d2:	b29a      	uxth	r2, r3
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80187d8:	2300      	movs	r3, #0
}
 80187da:	4618      	mov	r0, r3
 80187dc:	3728      	adds	r7, #40	; 0x28
 80187de:	46bd      	mov	sp, r7
 80187e0:	bdb0      	pop	{r4, r5, r7, pc}
 80187e2:	bf00      	nop

080187e4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d106      	bne.n	8018800 <tcp_output_segment_busy+0x1c>
 80187f2:	4b09      	ldr	r3, [pc, #36]	; (8018818 <tcp_output_segment_busy+0x34>)
 80187f4:	f240 529a 	movw	r2, #1434	; 0x59a
 80187f8:	4908      	ldr	r1, [pc, #32]	; (801881c <tcp_output_segment_busy+0x38>)
 80187fa:	4809      	ldr	r0, [pc, #36]	; (8018820 <tcp_output_segment_busy+0x3c>)
 80187fc:	f003 fcca 	bl	801c194 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	685b      	ldr	r3, [r3, #4]
 8018804:	7b9b      	ldrb	r3, [r3, #14]
 8018806:	2b01      	cmp	r3, #1
 8018808:	d001      	beq.n	801880e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801880a:	2301      	movs	r3, #1
 801880c:	e000      	b.n	8018810 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801880e:	2300      	movs	r3, #0
}
 8018810:	4618      	mov	r0, r3
 8018812:	3708      	adds	r7, #8
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}
 8018818:	0801ea74 	.word	0x0801ea74
 801881c:	0801f010 	.word	0x0801f010
 8018820:	0801eac8 	.word	0x0801eac8

08018824 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018824:	b5b0      	push	{r4, r5, r7, lr}
 8018826:	b08c      	sub	sp, #48	; 0x30
 8018828:	af04      	add	r7, sp, #16
 801882a:	60f8      	str	r0, [r7, #12]
 801882c:	60b9      	str	r1, [r7, #8]
 801882e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d106      	bne.n	8018844 <tcp_output_segment+0x20>
 8018836:	4b64      	ldr	r3, [pc, #400]	; (80189c8 <tcp_output_segment+0x1a4>)
 8018838:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801883c:	4963      	ldr	r1, [pc, #396]	; (80189cc <tcp_output_segment+0x1a8>)
 801883e:	4864      	ldr	r0, [pc, #400]	; (80189d0 <tcp_output_segment+0x1ac>)
 8018840:	f003 fca8 	bl	801c194 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d106      	bne.n	8018858 <tcp_output_segment+0x34>
 801884a:	4b5f      	ldr	r3, [pc, #380]	; (80189c8 <tcp_output_segment+0x1a4>)
 801884c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018850:	4960      	ldr	r1, [pc, #384]	; (80189d4 <tcp_output_segment+0x1b0>)
 8018852:	485f      	ldr	r0, [pc, #380]	; (80189d0 <tcp_output_segment+0x1ac>)
 8018854:	f003 fc9e 	bl	801c194 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d106      	bne.n	801886c <tcp_output_segment+0x48>
 801885e:	4b5a      	ldr	r3, [pc, #360]	; (80189c8 <tcp_output_segment+0x1a4>)
 8018860:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018864:	495c      	ldr	r1, [pc, #368]	; (80189d8 <tcp_output_segment+0x1b4>)
 8018866:	485a      	ldr	r0, [pc, #360]	; (80189d0 <tcp_output_segment+0x1ac>)
 8018868:	f003 fc94 	bl	801c194 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801886c:	68f8      	ldr	r0, [r7, #12]
 801886e:	f7ff ffb9 	bl	80187e4 <tcp_output_segment_busy>
 8018872:	4603      	mov	r3, r0
 8018874:	2b00      	cmp	r3, #0
 8018876:	d001      	beq.n	801887c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018878:	2300      	movs	r3, #0
 801887a:	e0a0      	b.n	80189be <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	68dc      	ldr	r4, [r3, #12]
 8018884:	4610      	mov	r0, r2
 8018886:	f7f8 fe7e 	bl	8011586 <lwip_htonl>
 801888a:	4603      	mov	r3, r0
 801888c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801888e:	68bb      	ldr	r3, [r7, #8]
 8018890:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	68dc      	ldr	r4, [r3, #12]
 8018896:	4610      	mov	r0, r2
 8018898:	f7f8 fe60 	bl	801155c <lwip_htons>
 801889c:	4603      	mov	r3, r0
 801889e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80188a0:	68bb      	ldr	r3, [r7, #8]
 80188a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188a4:	68ba      	ldr	r2, [r7, #8]
 80188a6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80188a8:	441a      	add	r2, r3
 80188aa:	68bb      	ldr	r3, [r7, #8]
 80188ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	68db      	ldr	r3, [r3, #12]
 80188b2:	3314      	adds	r3, #20
 80188b4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	7a9b      	ldrb	r3, [r3, #10]
 80188ba:	f003 0301 	and.w	r3, r3, #1
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d015      	beq.n	80188ee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80188c2:	68bb      	ldr	r3, [r7, #8]
 80188c4:	3304      	adds	r3, #4
 80188c6:	461a      	mov	r2, r3
 80188c8:	6879      	ldr	r1, [r7, #4]
 80188ca:	f44f 7006 	mov.w	r0, #536	; 0x218
 80188ce:	f7fc fa33 	bl	8014d38 <tcp_eff_send_mss_netif>
 80188d2:	4603      	mov	r3, r0
 80188d4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80188d6:	8b7b      	ldrh	r3, [r7, #26]
 80188d8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80188dc:	4618      	mov	r0, r3
 80188de:	f7f8 fe52 	bl	8011586 <lwip_htonl>
 80188e2:	4602      	mov	r2, r0
 80188e4:	69fb      	ldr	r3, [r7, #28]
 80188e6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80188e8:	69fb      	ldr	r3, [r7, #28]
 80188ea:	3304      	adds	r3, #4
 80188ec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80188ee:	68bb      	ldr	r3, [r7, #8]
 80188f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	da02      	bge.n	80188fe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	2200      	movs	r2, #0
 80188fc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018902:	2b00      	cmp	r3, #0
 8018904:	d10c      	bne.n	8018920 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018906:	4b35      	ldr	r3, [pc, #212]	; (80189dc <tcp_output_segment+0x1b8>)
 8018908:	681a      	ldr	r2, [r3, #0]
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	68db      	ldr	r3, [r3, #12]
 8018912:	685b      	ldr	r3, [r3, #4]
 8018914:	4618      	mov	r0, r3
 8018916:	f7f8 fe36 	bl	8011586 <lwip_htonl>
 801891a:	4602      	mov	r2, r0
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018920:	68fb      	ldr	r3, [r7, #12]
 8018922:	68db      	ldr	r3, [r3, #12]
 8018924:	461a      	mov	r2, r3
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	685b      	ldr	r3, [r3, #4]
 801892a:	685b      	ldr	r3, [r3, #4]
 801892c:	1ad3      	subs	r3, r2, r3
 801892e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	685b      	ldr	r3, [r3, #4]
 8018934:	8959      	ldrh	r1, [r3, #10]
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	685b      	ldr	r3, [r3, #4]
 801893a:	8b3a      	ldrh	r2, [r7, #24]
 801893c:	1a8a      	subs	r2, r1, r2
 801893e:	b292      	uxth	r2, r2
 8018940:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	685b      	ldr	r3, [r3, #4]
 8018946:	8919      	ldrh	r1, [r3, #8]
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	685b      	ldr	r3, [r3, #4]
 801894c:	8b3a      	ldrh	r2, [r7, #24]
 801894e:	1a8a      	subs	r2, r1, r2
 8018950:	b292      	uxth	r2, r2
 8018952:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	685b      	ldr	r3, [r3, #4]
 8018958:	68fa      	ldr	r2, [r7, #12]
 801895a:	68d2      	ldr	r2, [r2, #12]
 801895c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	68db      	ldr	r3, [r3, #12]
 8018962:	2200      	movs	r2, #0
 8018964:	741a      	strb	r2, [r3, #16]
 8018966:	2200      	movs	r2, #0
 8018968:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	68db      	ldr	r3, [r3, #12]
 801896e:	f103 0214 	add.w	r2, r3, #20
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	7a9b      	ldrb	r3, [r3, #10]
 8018976:	009b      	lsls	r3, r3, #2
 8018978:	f003 0304 	and.w	r3, r3, #4
 801897c:	4413      	add	r3, r2
 801897e:	69fa      	ldr	r2, [r7, #28]
 8018980:	429a      	cmp	r2, r3
 8018982:	d006      	beq.n	8018992 <tcp_output_segment+0x16e>
 8018984:	4b10      	ldr	r3, [pc, #64]	; (80189c8 <tcp_output_segment+0x1a4>)
 8018986:	f240 621c 	movw	r2, #1564	; 0x61c
 801898a:	4915      	ldr	r1, [pc, #84]	; (80189e0 <tcp_output_segment+0x1bc>)
 801898c:	4810      	ldr	r0, [pc, #64]	; (80189d0 <tcp_output_segment+0x1ac>)
 801898e:	f003 fc01 	bl	801c194 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	6858      	ldr	r0, [r3, #4]
 8018996:	68b9      	ldr	r1, [r7, #8]
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	1d1c      	adds	r4, r3, #4
 801899c:	68bb      	ldr	r3, [r7, #8]
 801899e:	7add      	ldrb	r5, [r3, #11]
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	7a9b      	ldrb	r3, [r3, #10]
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	9202      	str	r2, [sp, #8]
 80189a8:	2206      	movs	r2, #6
 80189aa:	9201      	str	r2, [sp, #4]
 80189ac:	9300      	str	r3, [sp, #0]
 80189ae:	462b      	mov	r3, r5
 80189b0:	4622      	mov	r2, r4
 80189b2:	f002 fa6f 	bl	801ae94 <ip4_output_if>
 80189b6:	4603      	mov	r3, r0
 80189b8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80189ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3720      	adds	r7, #32
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bdb0      	pop	{r4, r5, r7, pc}
 80189c6:	bf00      	nop
 80189c8:	0801ea74 	.word	0x0801ea74
 80189cc:	0801f038 	.word	0x0801f038
 80189d0:	0801eac8 	.word	0x0801eac8
 80189d4:	0801f058 	.word	0x0801f058
 80189d8:	0801f078 	.word	0x0801f078
 80189dc:	2000b344 	.word	0x2000b344
 80189e0:	0801f09c 	.word	0x0801f09c

080189e4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80189e4:	b5b0      	push	{r4, r5, r7, lr}
 80189e6:	b084      	sub	sp, #16
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d106      	bne.n	8018a00 <tcp_rexmit_rto_prepare+0x1c>
 80189f2:	4b31      	ldr	r3, [pc, #196]	; (8018ab8 <tcp_rexmit_rto_prepare+0xd4>)
 80189f4:	f240 6263 	movw	r2, #1635	; 0x663
 80189f8:	4930      	ldr	r1, [pc, #192]	; (8018abc <tcp_rexmit_rto_prepare+0xd8>)
 80189fa:	4831      	ldr	r0, [pc, #196]	; (8018ac0 <tcp_rexmit_rto_prepare+0xdc>)
 80189fc:	f003 fbca 	bl	801c194 <iprintf>

  if (pcb->unacked == NULL) {
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d102      	bne.n	8018a0e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018a08:	f06f 0305 	mvn.w	r3, #5
 8018a0c:	e050      	b.n	8018ab0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a12:	60fb      	str	r3, [r7, #12]
 8018a14:	e00b      	b.n	8018a2e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018a16:	68f8      	ldr	r0, [r7, #12]
 8018a18:	f7ff fee4 	bl	80187e4 <tcp_output_segment_busy>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d002      	beq.n	8018a28 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018a22:	f06f 0305 	mvn.w	r3, #5
 8018a26:	e043      	b.n	8018ab0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	60fb      	str	r3, [r7, #12]
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d1ef      	bne.n	8018a16 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018a36:	68f8      	ldr	r0, [r7, #12]
 8018a38:	f7ff fed4 	bl	80187e4 <tcp_output_segment_busy>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d002      	beq.n	8018a48 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018a42:	f06f 0305 	mvn.w	r3, #5
 8018a46:	e033      	b.n	8018ab0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	8b5b      	ldrh	r3, [r3, #26]
 8018a62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018a66:	b29a      	uxth	r2, r3
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	68db      	ldr	r3, [r3, #12]
 8018a70:	685b      	ldr	r3, [r3, #4]
 8018a72:	4618      	mov	r0, r3
 8018a74:	f7f8 fd87 	bl	8011586 <lwip_htonl>
 8018a78:	4604      	mov	r4, r0
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	891b      	ldrh	r3, [r3, #8]
 8018a7e:	461d      	mov	r5, r3
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	68db      	ldr	r3, [r3, #12]
 8018a84:	899b      	ldrh	r3, [r3, #12]
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f7f8 fd67 	bl	801155c <lwip_htons>
 8018a8e:	4603      	mov	r3, r0
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	f003 0303 	and.w	r3, r3, #3
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d001      	beq.n	8018a9e <tcp_rexmit_rto_prepare+0xba>
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	e000      	b.n	8018aa0 <tcp_rexmit_rto_prepare+0xbc>
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	442b      	add	r3, r5
 8018aa2:	18e2      	adds	r2, r4, r3
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	2200      	movs	r2, #0
 8018aac:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018aae:	2300      	movs	r3, #0
}
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	3710      	adds	r7, #16
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8018ab8:	0801ea74 	.word	0x0801ea74
 8018abc:	0801f0b0 	.word	0x0801f0b0
 8018ac0:	0801eac8 	.word	0x0801eac8

08018ac4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b082      	sub	sp, #8
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d106      	bne.n	8018ae0 <tcp_rexmit_rto_commit+0x1c>
 8018ad2:	4b0d      	ldr	r3, [pc, #52]	; (8018b08 <tcp_rexmit_rto_commit+0x44>)
 8018ad4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018ad8:	490c      	ldr	r1, [pc, #48]	; (8018b0c <tcp_rexmit_rto_commit+0x48>)
 8018ada:	480d      	ldr	r0, [pc, #52]	; (8018b10 <tcp_rexmit_rto_commit+0x4c>)
 8018adc:	f003 fb5a 	bl	801c194 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018ae6:	2bff      	cmp	r3, #255	; 0xff
 8018ae8:	d007      	beq.n	8018afa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018af0:	3301      	adds	r3, #1
 8018af2:	b2da      	uxtb	r2, r3
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018afa:	6878      	ldr	r0, [r7, #4]
 8018afc:	f7ff fc7a 	bl	80183f4 <tcp_output>
}
 8018b00:	bf00      	nop
 8018b02:	3708      	adds	r7, #8
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	0801ea74 	.word	0x0801ea74
 8018b0c:	0801f0d4 	.word	0x0801f0d4
 8018b10:	0801eac8 	.word	0x0801eac8

08018b14 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b082      	sub	sp, #8
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d106      	bne.n	8018b30 <tcp_rexmit_rto+0x1c>
 8018b22:	4b0a      	ldr	r3, [pc, #40]	; (8018b4c <tcp_rexmit_rto+0x38>)
 8018b24:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018b28:	4909      	ldr	r1, [pc, #36]	; (8018b50 <tcp_rexmit_rto+0x3c>)
 8018b2a:	480a      	ldr	r0, [pc, #40]	; (8018b54 <tcp_rexmit_rto+0x40>)
 8018b2c:	f003 fb32 	bl	801c194 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018b30:	6878      	ldr	r0, [r7, #4]
 8018b32:	f7ff ff57 	bl	80189e4 <tcp_rexmit_rto_prepare>
 8018b36:	4603      	mov	r3, r0
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d102      	bne.n	8018b42 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018b3c:	6878      	ldr	r0, [r7, #4]
 8018b3e:	f7ff ffc1 	bl	8018ac4 <tcp_rexmit_rto_commit>
  }
}
 8018b42:	bf00      	nop
 8018b44:	3708      	adds	r7, #8
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bd80      	pop	{r7, pc}
 8018b4a:	bf00      	nop
 8018b4c:	0801ea74 	.word	0x0801ea74
 8018b50:	0801f0f8 	.word	0x0801f0f8
 8018b54:	0801eac8 	.word	0x0801eac8

08018b58 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018b58:	b590      	push	{r4, r7, lr}
 8018b5a:	b085      	sub	sp, #20
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d106      	bne.n	8018b74 <tcp_rexmit+0x1c>
 8018b66:	4b2f      	ldr	r3, [pc, #188]	; (8018c24 <tcp_rexmit+0xcc>)
 8018b68:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018b6c:	492e      	ldr	r1, [pc, #184]	; (8018c28 <tcp_rexmit+0xd0>)
 8018b6e:	482f      	ldr	r0, [pc, #188]	; (8018c2c <tcp_rexmit+0xd4>)
 8018b70:	f003 fb10 	bl	801c194 <iprintf>

  if (pcb->unacked == NULL) {
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d102      	bne.n	8018b82 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018b7c:	f06f 0305 	mvn.w	r3, #5
 8018b80:	e04c      	b.n	8018c1c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b86:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018b88:	68b8      	ldr	r0, [r7, #8]
 8018b8a:	f7ff fe2b 	bl	80187e4 <tcp_output_segment_busy>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d002      	beq.n	8018b9a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018b94:	f06f 0305 	mvn.w	r3, #5
 8018b98:	e040      	b.n	8018c1c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018b9a:	68bb      	ldr	r3, [r7, #8]
 8018b9c:	681a      	ldr	r2, [r3, #0]
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	336c      	adds	r3, #108	; 0x6c
 8018ba6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018ba8:	e002      	b.n	8018bb0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d011      	beq.n	8018bdc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	68db      	ldr	r3, [r3, #12]
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f7f8 fce0 	bl	8011586 <lwip_htonl>
 8018bc6:	4604      	mov	r4, r0
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	68db      	ldr	r3, [r3, #12]
 8018bcc:	685b      	ldr	r3, [r3, #4]
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7f8 fcd9 	bl	8011586 <lwip_htonl>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	dbe6      	blt.n	8018baa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	681a      	ldr	r2, [r3, #0]
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	68ba      	ldr	r2, [r7, #8]
 8018be8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d103      	bne.n	8018bfa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c00:	2bff      	cmp	r3, #255	; 0xff
 8018c02:	d007      	beq.n	8018c14 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018c0a:	3301      	adds	r3, #1
 8018c0c:	b2da      	uxtb	r2, r3
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	2200      	movs	r2, #0
 8018c18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018c1a:	2300      	movs	r3, #0
}
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	3714      	adds	r7, #20
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd90      	pop	{r4, r7, pc}
 8018c24:	0801ea74 	.word	0x0801ea74
 8018c28:	0801f114 	.word	0x0801f114
 8018c2c:	0801eac8 	.word	0x0801eac8

08018c30 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b082      	sub	sp, #8
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d106      	bne.n	8018c4c <tcp_rexmit_fast+0x1c>
 8018c3e:	4b2f      	ldr	r3, [pc, #188]	; (8018cfc <tcp_rexmit_fast+0xcc>)
 8018c40:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018c44:	492e      	ldr	r1, [pc, #184]	; (8018d00 <tcp_rexmit_fast+0xd0>)
 8018c46:	482f      	ldr	r0, [pc, #188]	; (8018d04 <tcp_rexmit_fast+0xd4>)
 8018c48:	f003 faa4 	bl	801c194 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d04f      	beq.n	8018cf4 <tcp_rexmit_fast+0xc4>
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	8b5b      	ldrh	r3, [r3, #26]
 8018c58:	f003 0304 	and.w	r3, r3, #4
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d149      	bne.n	8018cf4 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018c60:	6878      	ldr	r0, [r7, #4]
 8018c62:	f7ff ff79 	bl	8018b58 <tcp_rexmit>
 8018c66:	4603      	mov	r3, r0
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d143      	bne.n	8018cf4 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018c78:	429a      	cmp	r2, r3
 8018c7a:	d208      	bcs.n	8018c8e <tcp_rexmit_fast+0x5e>
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	da00      	bge.n	8018c88 <tcp_rexmit_fast+0x58>
 8018c86:	3301      	adds	r3, #1
 8018c88:	105b      	asrs	r3, r3, #1
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	e007      	b.n	8018c9e <tcp_rexmit_fast+0x6e>
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	da00      	bge.n	8018c9a <tcp_rexmit_fast+0x6a>
 8018c98:	3301      	adds	r3, #1
 8018c9a:	105b      	asrs	r3, r3, #1
 8018c9c:	b29b      	uxth	r3, r3
 8018c9e:	687a      	ldr	r2, [r7, #4]
 8018ca0:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018caa:	461a      	mov	r2, r3
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018cb0:	005b      	lsls	r3, r3, #1
 8018cb2:	429a      	cmp	r2, r3
 8018cb4:	d206      	bcs.n	8018cc4 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018cba:	005b      	lsls	r3, r3, #1
 8018cbc:	b29a      	uxth	r2, r3
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018cce:	4619      	mov	r1, r3
 8018cd0:	0049      	lsls	r1, r1, #1
 8018cd2:	440b      	add	r3, r1
 8018cd4:	b29b      	uxth	r3, r3
 8018cd6:	4413      	add	r3, r2
 8018cd8:	b29a      	uxth	r2, r3
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	8b5b      	ldrh	r3, [r3, #26]
 8018ce4:	f043 0304 	orr.w	r3, r3, #4
 8018ce8:	b29a      	uxth	r2, r3
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018cf4:	bf00      	nop
 8018cf6:	3708      	adds	r7, #8
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd80      	pop	{r7, pc}
 8018cfc:	0801ea74 	.word	0x0801ea74
 8018d00:	0801f12c 	.word	0x0801f12c
 8018d04:	0801eac8 	.word	0x0801eac8

08018d08 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b086      	sub	sp, #24
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	60f8      	str	r0, [r7, #12]
 8018d10:	607b      	str	r3, [r7, #4]
 8018d12:	460b      	mov	r3, r1
 8018d14:	817b      	strh	r3, [r7, #10]
 8018d16:	4613      	mov	r3, r2
 8018d18:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018d1a:	897a      	ldrh	r2, [r7, #10]
 8018d1c:	893b      	ldrh	r3, [r7, #8]
 8018d1e:	4413      	add	r3, r2
 8018d20:	b29b      	uxth	r3, r3
 8018d22:	3314      	adds	r3, #20
 8018d24:	b29b      	uxth	r3, r3
 8018d26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d2a:	4619      	mov	r1, r3
 8018d2c:	2022      	movs	r0, #34	; 0x22
 8018d2e:	f7f9 fd13 	bl	8012758 <pbuf_alloc>
 8018d32:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018d34:	697b      	ldr	r3, [r7, #20]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d04e      	beq.n	8018dd8 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018d3a:	697b      	ldr	r3, [r7, #20]
 8018d3c:	895b      	ldrh	r3, [r3, #10]
 8018d3e:	461a      	mov	r2, r3
 8018d40:	897b      	ldrh	r3, [r7, #10]
 8018d42:	3314      	adds	r3, #20
 8018d44:	429a      	cmp	r2, r3
 8018d46:	da06      	bge.n	8018d56 <tcp_output_alloc_header_common+0x4e>
 8018d48:	4b26      	ldr	r3, [pc, #152]	; (8018de4 <tcp_output_alloc_header_common+0xdc>)
 8018d4a:	f240 7224 	movw	r2, #1828	; 0x724
 8018d4e:	4926      	ldr	r1, [pc, #152]	; (8018de8 <tcp_output_alloc_header_common+0xe0>)
 8018d50:	4826      	ldr	r0, [pc, #152]	; (8018dec <tcp_output_alloc_header_common+0xe4>)
 8018d52:	f003 fa1f 	bl	801c194 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018d56:	697b      	ldr	r3, [r7, #20]
 8018d58:	685b      	ldr	r3, [r3, #4]
 8018d5a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018d5c:	8c3b      	ldrh	r3, [r7, #32]
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f7f8 fbfc 	bl	801155c <lwip_htons>
 8018d64:	4603      	mov	r3, r0
 8018d66:	461a      	mov	r2, r3
 8018d68:	693b      	ldr	r3, [r7, #16]
 8018d6a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f7f8 fbf4 	bl	801155c <lwip_htons>
 8018d74:	4603      	mov	r3, r0
 8018d76:	461a      	mov	r2, r3
 8018d78:	693b      	ldr	r3, [r7, #16]
 8018d7a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018d7c:	693b      	ldr	r3, [r7, #16]
 8018d7e:	687a      	ldr	r2, [r7, #4]
 8018d80:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018d82:	68f8      	ldr	r0, [r7, #12]
 8018d84:	f7f8 fbff 	bl	8011586 <lwip_htonl>
 8018d88:	4602      	mov	r2, r0
 8018d8a:	693b      	ldr	r3, [r7, #16]
 8018d8c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018d8e:	897b      	ldrh	r3, [r7, #10]
 8018d90:	089b      	lsrs	r3, r3, #2
 8018d92:	b29b      	uxth	r3, r3
 8018d94:	3305      	adds	r3, #5
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	031b      	lsls	r3, r3, #12
 8018d9a:	b29a      	uxth	r2, r3
 8018d9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	4313      	orrs	r3, r2
 8018da4:	b29b      	uxth	r3, r3
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7f8 fbd8 	bl	801155c <lwip_htons>
 8018dac:	4603      	mov	r3, r0
 8018dae:	461a      	mov	r2, r3
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018db4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018db6:	4618      	mov	r0, r3
 8018db8:	f7f8 fbd0 	bl	801155c <lwip_htons>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	461a      	mov	r2, r3
 8018dc0:	693b      	ldr	r3, [r7, #16]
 8018dc2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018dc4:	693b      	ldr	r3, [r7, #16]
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	741a      	strb	r2, [r3, #16]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018dce:	693b      	ldr	r3, [r7, #16]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	749a      	strb	r2, [r3, #18]
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018dd8:	697b      	ldr	r3, [r7, #20]
}
 8018dda:	4618      	mov	r0, r3
 8018ddc:	3718      	adds	r7, #24
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd80      	pop	{r7, pc}
 8018de2:	bf00      	nop
 8018de4:	0801ea74 	.word	0x0801ea74
 8018de8:	0801f14c 	.word	0x0801f14c
 8018dec:	0801eac8 	.word	0x0801eac8

08018df0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018df0:	b5b0      	push	{r4, r5, r7, lr}
 8018df2:	b08a      	sub	sp, #40	; 0x28
 8018df4:	af04      	add	r7, sp, #16
 8018df6:	60f8      	str	r0, [r7, #12]
 8018df8:	607b      	str	r3, [r7, #4]
 8018dfa:	460b      	mov	r3, r1
 8018dfc:	817b      	strh	r3, [r7, #10]
 8018dfe:	4613      	mov	r3, r2
 8018e00:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d106      	bne.n	8018e16 <tcp_output_alloc_header+0x26>
 8018e08:	4b15      	ldr	r3, [pc, #84]	; (8018e60 <tcp_output_alloc_header+0x70>)
 8018e0a:	f240 7242 	movw	r2, #1858	; 0x742
 8018e0e:	4915      	ldr	r1, [pc, #84]	; (8018e64 <tcp_output_alloc_header+0x74>)
 8018e10:	4815      	ldr	r0, [pc, #84]	; (8018e68 <tcp_output_alloc_header+0x78>)
 8018e12:	f003 f9bf 	bl	801c194 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	8adb      	ldrh	r3, [r3, #22]
 8018e1e:	68fa      	ldr	r2, [r7, #12]
 8018e20:	8b12      	ldrh	r2, [r2, #24]
 8018e22:	68f9      	ldr	r1, [r7, #12]
 8018e24:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018e26:	893d      	ldrh	r5, [r7, #8]
 8018e28:	897c      	ldrh	r4, [r7, #10]
 8018e2a:	9103      	str	r1, [sp, #12]
 8018e2c:	2110      	movs	r1, #16
 8018e2e:	9102      	str	r1, [sp, #8]
 8018e30:	9201      	str	r2, [sp, #4]
 8018e32:	9300      	str	r3, [sp, #0]
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	462a      	mov	r2, r5
 8018e38:	4621      	mov	r1, r4
 8018e3a:	f7ff ff65 	bl	8018d08 <tcp_output_alloc_header_common>
 8018e3e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d006      	beq.n	8018e54 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e4a:	68fa      	ldr	r2, [r7, #12]
 8018e4c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018e4e:	441a      	add	r2, r3
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018e54:	697b      	ldr	r3, [r7, #20]
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	3718      	adds	r7, #24
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8018e5e:	bf00      	nop
 8018e60:	0801ea74 	.word	0x0801ea74
 8018e64:	0801f17c 	.word	0x0801f17c
 8018e68:	0801eac8 	.word	0x0801eac8

08018e6c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b088      	sub	sp, #32
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	60f8      	str	r0, [r7, #12]
 8018e74:	60b9      	str	r1, [r7, #8]
 8018e76:	4611      	mov	r1, r2
 8018e78:	461a      	mov	r2, r3
 8018e7a:	460b      	mov	r3, r1
 8018e7c:	71fb      	strb	r3, [r7, #7]
 8018e7e:	4613      	mov	r3, r2
 8018e80:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018e82:	2300      	movs	r3, #0
 8018e84:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018e86:	68bb      	ldr	r3, [r7, #8]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d106      	bne.n	8018e9a <tcp_output_fill_options+0x2e>
 8018e8c:	4b13      	ldr	r3, [pc, #76]	; (8018edc <tcp_output_fill_options+0x70>)
 8018e8e:	f240 7256 	movw	r2, #1878	; 0x756
 8018e92:	4913      	ldr	r1, [pc, #76]	; (8018ee0 <tcp_output_fill_options+0x74>)
 8018e94:	4813      	ldr	r0, [pc, #76]	; (8018ee4 <tcp_output_fill_options+0x78>)
 8018e96:	f003 f97d 	bl	801c194 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018e9a:	68bb      	ldr	r3, [r7, #8]
 8018e9c:	685b      	ldr	r3, [r3, #4]
 8018e9e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018ea0:	69bb      	ldr	r3, [r7, #24]
 8018ea2:	3314      	adds	r3, #20
 8018ea4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018ea6:	69bb      	ldr	r3, [r7, #24]
 8018ea8:	f103 0214 	add.w	r2, r3, #20
 8018eac:	8bfb      	ldrh	r3, [r7, #30]
 8018eae:	009b      	lsls	r3, r3, #2
 8018eb0:	4619      	mov	r1, r3
 8018eb2:	79fb      	ldrb	r3, [r7, #7]
 8018eb4:	009b      	lsls	r3, r3, #2
 8018eb6:	f003 0304 	and.w	r3, r3, #4
 8018eba:	440b      	add	r3, r1
 8018ebc:	4413      	add	r3, r2
 8018ebe:	697a      	ldr	r2, [r7, #20]
 8018ec0:	429a      	cmp	r2, r3
 8018ec2:	d006      	beq.n	8018ed2 <tcp_output_fill_options+0x66>
 8018ec4:	4b05      	ldr	r3, [pc, #20]	; (8018edc <tcp_output_fill_options+0x70>)
 8018ec6:	f240 7275 	movw	r2, #1909	; 0x775
 8018eca:	4907      	ldr	r1, [pc, #28]	; (8018ee8 <tcp_output_fill_options+0x7c>)
 8018ecc:	4805      	ldr	r0, [pc, #20]	; (8018ee4 <tcp_output_fill_options+0x78>)
 8018ece:	f003 f961 	bl	801c194 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018ed2:	bf00      	nop
 8018ed4:	3720      	adds	r7, #32
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}
 8018eda:	bf00      	nop
 8018edc:	0801ea74 	.word	0x0801ea74
 8018ee0:	0801f1a4 	.word	0x0801f1a4
 8018ee4:	0801eac8 	.word	0x0801eac8
 8018ee8:	0801f09c 	.word	0x0801f09c

08018eec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b08a      	sub	sp, #40	; 0x28
 8018ef0:	af04      	add	r7, sp, #16
 8018ef2:	60f8      	str	r0, [r7, #12]
 8018ef4:	60b9      	str	r1, [r7, #8]
 8018ef6:	607a      	str	r2, [r7, #4]
 8018ef8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018efa:	68bb      	ldr	r3, [r7, #8]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d106      	bne.n	8018f0e <tcp_output_control_segment+0x22>
 8018f00:	4b1c      	ldr	r3, [pc, #112]	; (8018f74 <tcp_output_control_segment+0x88>)
 8018f02:	f240 7287 	movw	r2, #1927	; 0x787
 8018f06:	491c      	ldr	r1, [pc, #112]	; (8018f78 <tcp_output_control_segment+0x8c>)
 8018f08:	481c      	ldr	r0, [pc, #112]	; (8018f7c <tcp_output_control_segment+0x90>)
 8018f0a:	f003 f943 	bl	801c194 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018f0e:	683a      	ldr	r2, [r7, #0]
 8018f10:	6879      	ldr	r1, [r7, #4]
 8018f12:	68f8      	ldr	r0, [r7, #12]
 8018f14:	f7fe fad4 	bl	80174c0 <tcp_route>
 8018f18:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018f1a:	693b      	ldr	r3, [r7, #16]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d102      	bne.n	8018f26 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018f20:	23fc      	movs	r3, #252	; 0xfc
 8018f22:	75fb      	strb	r3, [r7, #23]
 8018f24:	e01c      	b.n	8018f60 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d006      	beq.n	8018f3a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	7adb      	ldrb	r3, [r3, #11]
 8018f30:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	7a9b      	ldrb	r3, [r3, #10]
 8018f36:	757b      	strb	r3, [r7, #21]
 8018f38:	e003      	b.n	8018f42 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018f3a:	23ff      	movs	r3, #255	; 0xff
 8018f3c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018f3e:	2300      	movs	r3, #0
 8018f40:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018f42:	7dba      	ldrb	r2, [r7, #22]
 8018f44:	693b      	ldr	r3, [r7, #16]
 8018f46:	9302      	str	r3, [sp, #8]
 8018f48:	2306      	movs	r3, #6
 8018f4a:	9301      	str	r3, [sp, #4]
 8018f4c:	7d7b      	ldrb	r3, [r7, #21]
 8018f4e:	9300      	str	r3, [sp, #0]
 8018f50:	4613      	mov	r3, r2
 8018f52:	683a      	ldr	r2, [r7, #0]
 8018f54:	6879      	ldr	r1, [r7, #4]
 8018f56:	68b8      	ldr	r0, [r7, #8]
 8018f58:	f001 ff9c 	bl	801ae94 <ip4_output_if>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018f60:	68b8      	ldr	r0, [r7, #8]
 8018f62:	f7f9 fed9 	bl	8012d18 <pbuf_free>
  return err;
 8018f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	3718      	adds	r7, #24
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}
 8018f72:	bf00      	nop
 8018f74:	0801ea74 	.word	0x0801ea74
 8018f78:	0801f1cc 	.word	0x0801f1cc
 8018f7c:	0801eac8 	.word	0x0801eac8

08018f80 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018f80:	b590      	push	{r4, r7, lr}
 8018f82:	b08b      	sub	sp, #44	; 0x2c
 8018f84:	af04      	add	r7, sp, #16
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	607a      	str	r2, [r7, #4]
 8018f8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018f8e:	683b      	ldr	r3, [r7, #0]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d106      	bne.n	8018fa2 <tcp_rst+0x22>
 8018f94:	4b1f      	ldr	r3, [pc, #124]	; (8019014 <tcp_rst+0x94>)
 8018f96:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018f9a:	491f      	ldr	r1, [pc, #124]	; (8019018 <tcp_rst+0x98>)
 8018f9c:	481f      	ldr	r0, [pc, #124]	; (801901c <tcp_rst+0x9c>)
 8018f9e:	f003 f8f9 	bl	801c194 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d106      	bne.n	8018fb6 <tcp_rst+0x36>
 8018fa8:	4b1a      	ldr	r3, [pc, #104]	; (8019014 <tcp_rst+0x94>)
 8018faa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8018fae:	491c      	ldr	r1, [pc, #112]	; (8019020 <tcp_rst+0xa0>)
 8018fb0:	481a      	ldr	r0, [pc, #104]	; (801901c <tcp_rst+0x9c>)
 8018fb2:	f003 f8ef 	bl	801c194 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018fba:	f246 0308 	movw	r3, #24584	; 0x6008
 8018fbe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018fc0:	7dfb      	ldrb	r3, [r7, #23]
 8018fc2:	b29c      	uxth	r4, r3
 8018fc4:	68b8      	ldr	r0, [r7, #8]
 8018fc6:	f7f8 fade 	bl	8011586 <lwip_htonl>
 8018fca:	4602      	mov	r2, r0
 8018fcc:	8abb      	ldrh	r3, [r7, #20]
 8018fce:	9303      	str	r3, [sp, #12]
 8018fd0:	2314      	movs	r3, #20
 8018fd2:	9302      	str	r3, [sp, #8]
 8018fd4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018fd6:	9301      	str	r3, [sp, #4]
 8018fd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018fda:	9300      	str	r3, [sp, #0]
 8018fdc:	4613      	mov	r3, r2
 8018fde:	2200      	movs	r2, #0
 8018fe0:	4621      	mov	r1, r4
 8018fe2:	6878      	ldr	r0, [r7, #4]
 8018fe4:	f7ff fe90 	bl	8018d08 <tcp_output_alloc_header_common>
 8018fe8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018fea:	693b      	ldr	r3, [r7, #16]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d00c      	beq.n	801900a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018ff0:	7dfb      	ldrb	r3, [r7, #23]
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	6939      	ldr	r1, [r7, #16]
 8018ff6:	68f8      	ldr	r0, [r7, #12]
 8018ff8:	f7ff ff38 	bl	8018e6c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ffe:	683a      	ldr	r2, [r7, #0]
 8019000:	6939      	ldr	r1, [r7, #16]
 8019002:	68f8      	ldr	r0, [r7, #12]
 8019004:	f7ff ff72 	bl	8018eec <tcp_output_control_segment>
 8019008:	e000      	b.n	801900c <tcp_rst+0x8c>
    return;
 801900a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801900c:	371c      	adds	r7, #28
 801900e:	46bd      	mov	sp, r7
 8019010:	bd90      	pop	{r4, r7, pc}
 8019012:	bf00      	nop
 8019014:	0801ea74 	.word	0x0801ea74
 8019018:	0801f1f8 	.word	0x0801f1f8
 801901c:	0801eac8 	.word	0x0801eac8
 8019020:	0801f214 	.word	0x0801f214

08019024 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019024:	b590      	push	{r4, r7, lr}
 8019026:	b087      	sub	sp, #28
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801902c:	2300      	movs	r3, #0
 801902e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019030:	2300      	movs	r3, #0
 8019032:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d106      	bne.n	8019048 <tcp_send_empty_ack+0x24>
 801903a:	4b28      	ldr	r3, [pc, #160]	; (80190dc <tcp_send_empty_ack+0xb8>)
 801903c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019040:	4927      	ldr	r1, [pc, #156]	; (80190e0 <tcp_send_empty_ack+0xbc>)
 8019042:	4828      	ldr	r0, [pc, #160]	; (80190e4 <tcp_send_empty_ack+0xc0>)
 8019044:	f003 f8a6 	bl	801c194 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019048:	7dfb      	ldrb	r3, [r7, #23]
 801904a:	009b      	lsls	r3, r3, #2
 801904c:	b2db      	uxtb	r3, r3
 801904e:	f003 0304 	and.w	r3, r3, #4
 8019052:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019054:	7d7b      	ldrb	r3, [r7, #21]
 8019056:	b29c      	uxth	r4, r3
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801905c:	4618      	mov	r0, r3
 801905e:	f7f8 fa92 	bl	8011586 <lwip_htonl>
 8019062:	4603      	mov	r3, r0
 8019064:	2200      	movs	r2, #0
 8019066:	4621      	mov	r1, r4
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	f7ff fec1 	bl	8018df0 <tcp_output_alloc_header>
 801906e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019070:	693b      	ldr	r3, [r7, #16]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d109      	bne.n	801908a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	8b5b      	ldrh	r3, [r3, #26]
 801907a:	f043 0303 	orr.w	r3, r3, #3
 801907e:	b29a      	uxth	r2, r3
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019084:	f06f 0301 	mvn.w	r3, #1
 8019088:	e023      	b.n	80190d2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801908a:	7dbb      	ldrb	r3, [r7, #22]
 801908c:	7dfa      	ldrb	r2, [r7, #23]
 801908e:	6939      	ldr	r1, [r7, #16]
 8019090:	6878      	ldr	r0, [r7, #4]
 8019092:	f7ff feeb 	bl	8018e6c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019096:	687a      	ldr	r2, [r7, #4]
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	3304      	adds	r3, #4
 801909c:	6939      	ldr	r1, [r7, #16]
 801909e:	6878      	ldr	r0, [r7, #4]
 80190a0:	f7ff ff24 	bl	8018eec <tcp_output_control_segment>
 80190a4:	4603      	mov	r3, r0
 80190a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80190a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d007      	beq.n	80190c0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	8b5b      	ldrh	r3, [r3, #26]
 80190b4:	f043 0303 	orr.w	r3, r3, #3
 80190b8:	b29a      	uxth	r2, r3
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	835a      	strh	r2, [r3, #26]
 80190be:	e006      	b.n	80190ce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	8b5b      	ldrh	r3, [r3, #26]
 80190c4:	f023 0303 	bic.w	r3, r3, #3
 80190c8:	b29a      	uxth	r2, r3
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80190ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80190d2:	4618      	mov	r0, r3
 80190d4:	371c      	adds	r7, #28
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd90      	pop	{r4, r7, pc}
 80190da:	bf00      	nop
 80190dc:	0801ea74 	.word	0x0801ea74
 80190e0:	0801f230 	.word	0x0801f230
 80190e4:	0801eac8 	.word	0x0801eac8

080190e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80190e8:	b590      	push	{r4, r7, lr}
 80190ea:	b087      	sub	sp, #28
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80190f0:	2300      	movs	r3, #0
 80190f2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d106      	bne.n	8019108 <tcp_keepalive+0x20>
 80190fa:	4b18      	ldr	r3, [pc, #96]	; (801915c <tcp_keepalive+0x74>)
 80190fc:	f640 0224 	movw	r2, #2084	; 0x824
 8019100:	4917      	ldr	r1, [pc, #92]	; (8019160 <tcp_keepalive+0x78>)
 8019102:	4818      	ldr	r0, [pc, #96]	; (8019164 <tcp_keepalive+0x7c>)
 8019104:	f003 f846 	bl	801c194 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019108:	7dfb      	ldrb	r3, [r7, #23]
 801910a:	b29c      	uxth	r4, r3
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019110:	3b01      	subs	r3, #1
 8019112:	4618      	mov	r0, r3
 8019114:	f7f8 fa37 	bl	8011586 <lwip_htonl>
 8019118:	4603      	mov	r3, r0
 801911a:	2200      	movs	r2, #0
 801911c:	4621      	mov	r1, r4
 801911e:	6878      	ldr	r0, [r7, #4]
 8019120:	f7ff fe66 	bl	8018df0 <tcp_output_alloc_header>
 8019124:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019126:	693b      	ldr	r3, [r7, #16]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d102      	bne.n	8019132 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801912c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019130:	e010      	b.n	8019154 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019132:	7dfb      	ldrb	r3, [r7, #23]
 8019134:	2200      	movs	r2, #0
 8019136:	6939      	ldr	r1, [r7, #16]
 8019138:	6878      	ldr	r0, [r7, #4]
 801913a:	f7ff fe97 	bl	8018e6c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801913e:	687a      	ldr	r2, [r7, #4]
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	3304      	adds	r3, #4
 8019144:	6939      	ldr	r1, [r7, #16]
 8019146:	6878      	ldr	r0, [r7, #4]
 8019148:	f7ff fed0 	bl	8018eec <tcp_output_control_segment>
 801914c:	4603      	mov	r3, r0
 801914e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019154:	4618      	mov	r0, r3
 8019156:	371c      	adds	r7, #28
 8019158:	46bd      	mov	sp, r7
 801915a:	bd90      	pop	{r4, r7, pc}
 801915c:	0801ea74 	.word	0x0801ea74
 8019160:	0801f250 	.word	0x0801f250
 8019164:	0801eac8 	.word	0x0801eac8

08019168 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019168:	b590      	push	{r4, r7, lr}
 801916a:	b08b      	sub	sp, #44	; 0x2c
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019170:	2300      	movs	r3, #0
 8019172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d106      	bne.n	801918a <tcp_zero_window_probe+0x22>
 801917c:	4b4c      	ldr	r3, [pc, #304]	; (80192b0 <tcp_zero_window_probe+0x148>)
 801917e:	f640 024f 	movw	r2, #2127	; 0x84f
 8019182:	494c      	ldr	r1, [pc, #304]	; (80192b4 <tcp_zero_window_probe+0x14c>)
 8019184:	484c      	ldr	r0, [pc, #304]	; (80192b8 <tcp_zero_window_probe+0x150>)
 8019186:	f003 f805 	bl	801c194 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801918e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019190:	6a3b      	ldr	r3, [r7, #32]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d101      	bne.n	801919a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019196:	2300      	movs	r3, #0
 8019198:	e086      	b.n	80192a8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80191a0:	2bff      	cmp	r3, #255	; 0xff
 80191a2:	d007      	beq.n	80191b4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80191aa:	3301      	adds	r3, #1
 80191ac:	b2da      	uxtb	r2, r3
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80191b4:	6a3b      	ldr	r3, [r7, #32]
 80191b6:	68db      	ldr	r3, [r3, #12]
 80191b8:	899b      	ldrh	r3, [r3, #12]
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	4618      	mov	r0, r3
 80191be:	f7f8 f9cd 	bl	801155c <lwip_htons>
 80191c2:	4603      	mov	r3, r0
 80191c4:	b2db      	uxtb	r3, r3
 80191c6:	f003 0301 	and.w	r3, r3, #1
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d005      	beq.n	80191da <tcp_zero_window_probe+0x72>
 80191ce:	6a3b      	ldr	r3, [r7, #32]
 80191d0:	891b      	ldrh	r3, [r3, #8]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d101      	bne.n	80191da <tcp_zero_window_probe+0x72>
 80191d6:	2301      	movs	r3, #1
 80191d8:	e000      	b.n	80191dc <tcp_zero_window_probe+0x74>
 80191da:	2300      	movs	r3, #0
 80191dc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80191de:	7ffb      	ldrb	r3, [r7, #31]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	bf0c      	ite	eq
 80191e4:	2301      	moveq	r3, #1
 80191e6:	2300      	movne	r3, #0
 80191e8:	b2db      	uxtb	r3, r3
 80191ea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80191ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191f0:	b299      	uxth	r1, r3
 80191f2:	6a3b      	ldr	r3, [r7, #32]
 80191f4:	68db      	ldr	r3, [r3, #12]
 80191f6:	685b      	ldr	r3, [r3, #4]
 80191f8:	8bba      	ldrh	r2, [r7, #28]
 80191fa:	6878      	ldr	r0, [r7, #4]
 80191fc:	f7ff fdf8 	bl	8018df0 <tcp_output_alloc_header>
 8019200:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019202:	69bb      	ldr	r3, [r7, #24]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d102      	bne.n	801920e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801920c:	e04c      	b.n	80192a8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801920e:	69bb      	ldr	r3, [r7, #24]
 8019210:	685b      	ldr	r3, [r3, #4]
 8019212:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019214:	7ffb      	ldrb	r3, [r7, #31]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d011      	beq.n	801923e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	899b      	ldrh	r3, [r3, #12]
 801921e:	b29b      	uxth	r3, r3
 8019220:	b21b      	sxth	r3, r3
 8019222:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019226:	b21c      	sxth	r4, r3
 8019228:	2011      	movs	r0, #17
 801922a:	f7f8 f997 	bl	801155c <lwip_htons>
 801922e:	4603      	mov	r3, r0
 8019230:	b21b      	sxth	r3, r3
 8019232:	4323      	orrs	r3, r4
 8019234:	b21b      	sxth	r3, r3
 8019236:	b29a      	uxth	r2, r3
 8019238:	697b      	ldr	r3, [r7, #20]
 801923a:	819a      	strh	r2, [r3, #12]
 801923c:	e010      	b.n	8019260 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801923e:	69bb      	ldr	r3, [r7, #24]
 8019240:	685b      	ldr	r3, [r3, #4]
 8019242:	3314      	adds	r3, #20
 8019244:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019246:	6a3b      	ldr	r3, [r7, #32]
 8019248:	6858      	ldr	r0, [r3, #4]
 801924a:	6a3b      	ldr	r3, [r7, #32]
 801924c:	685b      	ldr	r3, [r3, #4]
 801924e:	891a      	ldrh	r2, [r3, #8]
 8019250:	6a3b      	ldr	r3, [r7, #32]
 8019252:	891b      	ldrh	r3, [r3, #8]
 8019254:	1ad3      	subs	r3, r2, r3
 8019256:	b29b      	uxth	r3, r3
 8019258:	2201      	movs	r2, #1
 801925a:	6939      	ldr	r1, [r7, #16]
 801925c:	f7f9 ff52 	bl	8013104 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019260:	6a3b      	ldr	r3, [r7, #32]
 8019262:	68db      	ldr	r3, [r3, #12]
 8019264:	685b      	ldr	r3, [r3, #4]
 8019266:	4618      	mov	r0, r3
 8019268:	f7f8 f98d 	bl	8011586 <lwip_htonl>
 801926c:	4603      	mov	r3, r0
 801926e:	3301      	adds	r3, #1
 8019270:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	1ad3      	subs	r3, r2, r3
 801927a:	2b00      	cmp	r3, #0
 801927c:	da02      	bge.n	8019284 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	68fa      	ldr	r2, [r7, #12]
 8019282:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019288:	2200      	movs	r2, #0
 801928a:	69b9      	ldr	r1, [r7, #24]
 801928c:	6878      	ldr	r0, [r7, #4]
 801928e:	f7ff fded 	bl	8018e6c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019292:	687a      	ldr	r2, [r7, #4]
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	3304      	adds	r3, #4
 8019298:	69b9      	ldr	r1, [r7, #24]
 801929a:	6878      	ldr	r0, [r7, #4]
 801929c:	f7ff fe26 	bl	8018eec <tcp_output_control_segment>
 80192a0:	4603      	mov	r3, r0
 80192a2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80192a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80192a8:	4618      	mov	r0, r3
 80192aa:	372c      	adds	r7, #44	; 0x2c
 80192ac:	46bd      	mov	sp, r7
 80192ae:	bd90      	pop	{r4, r7, pc}
 80192b0:	0801ea74 	.word	0x0801ea74
 80192b4:	0801f26c 	.word	0x0801f26c
 80192b8:	0801eac8 	.word	0x0801eac8

080192bc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b082      	sub	sp, #8
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80192c4:	f7fa f80c 	bl	80132e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80192c8:	4b0a      	ldr	r3, [pc, #40]	; (80192f4 <tcpip_tcp_timer+0x38>)
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d103      	bne.n	80192d8 <tcpip_tcp_timer+0x1c>
 80192d0:	4b09      	ldr	r3, [pc, #36]	; (80192f8 <tcpip_tcp_timer+0x3c>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d005      	beq.n	80192e4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80192d8:	2200      	movs	r2, #0
 80192da:	4908      	ldr	r1, [pc, #32]	; (80192fc <tcpip_tcp_timer+0x40>)
 80192dc:	20fa      	movs	r0, #250	; 0xfa
 80192de:	f000 f8f1 	bl	80194c4 <sys_timeout>
 80192e2:	e002      	b.n	80192ea <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80192e4:	4b06      	ldr	r3, [pc, #24]	; (8019300 <tcpip_tcp_timer+0x44>)
 80192e6:	2200      	movs	r2, #0
 80192e8:	601a      	str	r2, [r3, #0]
  }
}
 80192ea:	bf00      	nop
 80192ec:	3708      	adds	r7, #8
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
 80192f2:	bf00      	nop
 80192f4:	2000b340 	.word	0x2000b340
 80192f8:	2000b350 	.word	0x2000b350
 80192fc:	080192bd 	.word	0x080192bd
 8019300:	20004558 	.word	0x20004558

08019304 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019308:	4b0a      	ldr	r3, [pc, #40]	; (8019334 <tcp_timer_needed+0x30>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d10f      	bne.n	8019330 <tcp_timer_needed+0x2c>
 8019310:	4b09      	ldr	r3, [pc, #36]	; (8019338 <tcp_timer_needed+0x34>)
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d103      	bne.n	8019320 <tcp_timer_needed+0x1c>
 8019318:	4b08      	ldr	r3, [pc, #32]	; (801933c <tcp_timer_needed+0x38>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d007      	beq.n	8019330 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019320:	4b04      	ldr	r3, [pc, #16]	; (8019334 <tcp_timer_needed+0x30>)
 8019322:	2201      	movs	r2, #1
 8019324:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019326:	2200      	movs	r2, #0
 8019328:	4905      	ldr	r1, [pc, #20]	; (8019340 <tcp_timer_needed+0x3c>)
 801932a:	20fa      	movs	r0, #250	; 0xfa
 801932c:	f000 f8ca 	bl	80194c4 <sys_timeout>
  }
}
 8019330:	bf00      	nop
 8019332:	bd80      	pop	{r7, pc}
 8019334:	20004558 	.word	0x20004558
 8019338:	2000b340 	.word	0x2000b340
 801933c:	2000b350 	.word	0x2000b350
 8019340:	080192bd 	.word	0x080192bd

08019344 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b086      	sub	sp, #24
 8019348:	af00      	add	r7, sp, #0
 801934a:	60f8      	str	r0, [r7, #12]
 801934c:	60b9      	str	r1, [r7, #8]
 801934e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019350:	200a      	movs	r0, #10
 8019352:	f7f8 fdef 	bl	8011f34 <memp_malloc>
 8019356:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019358:	693b      	ldr	r3, [r7, #16]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d109      	bne.n	8019372 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d151      	bne.n	8019408 <sys_timeout_abs+0xc4>
 8019364:	4b2a      	ldr	r3, [pc, #168]	; (8019410 <sys_timeout_abs+0xcc>)
 8019366:	22be      	movs	r2, #190	; 0xbe
 8019368:	492a      	ldr	r1, [pc, #168]	; (8019414 <sys_timeout_abs+0xd0>)
 801936a:	482b      	ldr	r0, [pc, #172]	; (8019418 <sys_timeout_abs+0xd4>)
 801936c:	f002 ff12 	bl	801c194 <iprintf>
    return;
 8019370:	e04a      	b.n	8019408 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	2200      	movs	r2, #0
 8019376:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019378:	693b      	ldr	r3, [r7, #16]
 801937a:	68ba      	ldr	r2, [r7, #8]
 801937c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801937e:	693b      	ldr	r3, [r7, #16]
 8019380:	687a      	ldr	r2, [r7, #4]
 8019382:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019384:	693b      	ldr	r3, [r7, #16]
 8019386:	68fa      	ldr	r2, [r7, #12]
 8019388:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801938a:	4b24      	ldr	r3, [pc, #144]	; (801941c <sys_timeout_abs+0xd8>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d103      	bne.n	801939a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019392:	4a22      	ldr	r2, [pc, #136]	; (801941c <sys_timeout_abs+0xd8>)
 8019394:	693b      	ldr	r3, [r7, #16]
 8019396:	6013      	str	r3, [r2, #0]
    return;
 8019398:	e037      	b.n	801940a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801939a:	693b      	ldr	r3, [r7, #16]
 801939c:	685a      	ldr	r2, [r3, #4]
 801939e:	4b1f      	ldr	r3, [pc, #124]	; (801941c <sys_timeout_abs+0xd8>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	685b      	ldr	r3, [r3, #4]
 80193a4:	1ad3      	subs	r3, r2, r3
 80193a6:	0fdb      	lsrs	r3, r3, #31
 80193a8:	f003 0301 	and.w	r3, r3, #1
 80193ac:	b2db      	uxtb	r3, r3
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d007      	beq.n	80193c2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80193b2:	4b1a      	ldr	r3, [pc, #104]	; (801941c <sys_timeout_abs+0xd8>)
 80193b4:	681a      	ldr	r2, [r3, #0]
 80193b6:	693b      	ldr	r3, [r7, #16]
 80193b8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80193ba:	4a18      	ldr	r2, [pc, #96]	; (801941c <sys_timeout_abs+0xd8>)
 80193bc:	693b      	ldr	r3, [r7, #16]
 80193be:	6013      	str	r3, [r2, #0]
 80193c0:	e023      	b.n	801940a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80193c2:	4b16      	ldr	r3, [pc, #88]	; (801941c <sys_timeout_abs+0xd8>)
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	617b      	str	r3, [r7, #20]
 80193c8:	e01a      	b.n	8019400 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80193ca:	697b      	ldr	r3, [r7, #20]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d00b      	beq.n	80193ea <sys_timeout_abs+0xa6>
 80193d2:	693b      	ldr	r3, [r7, #16]
 80193d4:	685a      	ldr	r2, [r3, #4]
 80193d6:	697b      	ldr	r3, [r7, #20]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	685b      	ldr	r3, [r3, #4]
 80193dc:	1ad3      	subs	r3, r2, r3
 80193de:	0fdb      	lsrs	r3, r3, #31
 80193e0:	f003 0301 	and.w	r3, r3, #1
 80193e4:	b2db      	uxtb	r3, r3
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d007      	beq.n	80193fa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80193ea:	697b      	ldr	r3, [r7, #20]
 80193ec:	681a      	ldr	r2, [r3, #0]
 80193ee:	693b      	ldr	r3, [r7, #16]
 80193f0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	693a      	ldr	r2, [r7, #16]
 80193f6:	601a      	str	r2, [r3, #0]
        break;
 80193f8:	e007      	b.n	801940a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80193fa:	697b      	ldr	r3, [r7, #20]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	617b      	str	r3, [r7, #20]
 8019400:	697b      	ldr	r3, [r7, #20]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d1e1      	bne.n	80193ca <sys_timeout_abs+0x86>
 8019406:	e000      	b.n	801940a <sys_timeout_abs+0xc6>
    return;
 8019408:	bf00      	nop
      }
    }
  }
}
 801940a:	3718      	adds	r7, #24
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	0801f290 	.word	0x0801f290
 8019414:	0801f2c4 	.word	0x0801f2c4
 8019418:	0801f304 	.word	0x0801f304
 801941c:	20004550 	.word	0x20004550

08019420 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b086      	sub	sp, #24
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801942c:	697b      	ldr	r3, [r7, #20]
 801942e:	685b      	ldr	r3, [r3, #4]
 8019430:	4798      	blx	r3

  now = sys_now();
 8019432:	f7f4 f8e9 	bl	800d608 <sys_now>
 8019436:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019438:	697b      	ldr	r3, [r7, #20]
 801943a:	681a      	ldr	r2, [r3, #0]
 801943c:	4b0f      	ldr	r3, [pc, #60]	; (801947c <lwip_cyclic_timer+0x5c>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	4413      	add	r3, r2
 8019442:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019444:	68fa      	ldr	r2, [r7, #12]
 8019446:	693b      	ldr	r3, [r7, #16]
 8019448:	1ad3      	subs	r3, r2, r3
 801944a:	0fdb      	lsrs	r3, r3, #31
 801944c:	f003 0301 	and.w	r3, r3, #1
 8019450:	b2db      	uxtb	r3, r3
 8019452:	2b00      	cmp	r3, #0
 8019454:	d009      	beq.n	801946a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019456:	697b      	ldr	r3, [r7, #20]
 8019458:	681a      	ldr	r2, [r3, #0]
 801945a:	693b      	ldr	r3, [r7, #16]
 801945c:	4413      	add	r3, r2
 801945e:	687a      	ldr	r2, [r7, #4]
 8019460:	4907      	ldr	r1, [pc, #28]	; (8019480 <lwip_cyclic_timer+0x60>)
 8019462:	4618      	mov	r0, r3
 8019464:	f7ff ff6e 	bl	8019344 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019468:	e004      	b.n	8019474 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801946a:	687a      	ldr	r2, [r7, #4]
 801946c:	4904      	ldr	r1, [pc, #16]	; (8019480 <lwip_cyclic_timer+0x60>)
 801946e:	68f8      	ldr	r0, [r7, #12]
 8019470:	f7ff ff68 	bl	8019344 <sys_timeout_abs>
}
 8019474:	bf00      	nop
 8019476:	3718      	adds	r7, #24
 8019478:	46bd      	mov	sp, r7
 801947a:	bd80      	pop	{r7, pc}
 801947c:	20004554 	.word	0x20004554
 8019480:	08019421 	.word	0x08019421

08019484 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b082      	sub	sp, #8
 8019488:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801948a:	2301      	movs	r3, #1
 801948c:	607b      	str	r3, [r7, #4]
 801948e:	e00e      	b.n	80194ae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019490:	4a0a      	ldr	r2, [pc, #40]	; (80194bc <sys_timeouts_init+0x38>)
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	00db      	lsls	r3, r3, #3
 801949c:	4a07      	ldr	r2, [pc, #28]	; (80194bc <sys_timeouts_init+0x38>)
 801949e:	4413      	add	r3, r2
 80194a0:	461a      	mov	r2, r3
 80194a2:	4907      	ldr	r1, [pc, #28]	; (80194c0 <sys_timeouts_init+0x3c>)
 80194a4:	f000 f80e 	bl	80194c4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	3301      	adds	r3, #1
 80194ac:	607b      	str	r3, [r7, #4]
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	2b02      	cmp	r3, #2
 80194b2:	d9ed      	bls.n	8019490 <sys_timeouts_init+0xc>
  }
}
 80194b4:	bf00      	nop
 80194b6:	3708      	adds	r7, #8
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bd80      	pop	{r7, pc}
 80194bc:	080309f0 	.word	0x080309f0
 80194c0:	08019421 	.word	0x08019421

080194c4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	b086      	sub	sp, #24
 80194c8:	af00      	add	r7, sp, #0
 80194ca:	60f8      	str	r0, [r7, #12]
 80194cc:	60b9      	str	r1, [r7, #8]
 80194ce:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80194d6:	d306      	bcc.n	80194e6 <sys_timeout+0x22>
 80194d8:	4b0a      	ldr	r3, [pc, #40]	; (8019504 <sys_timeout+0x40>)
 80194da:	f240 1229 	movw	r2, #297	; 0x129
 80194de:	490a      	ldr	r1, [pc, #40]	; (8019508 <sys_timeout+0x44>)
 80194e0:	480a      	ldr	r0, [pc, #40]	; (801950c <sys_timeout+0x48>)
 80194e2:	f002 fe57 	bl	801c194 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80194e6:	f7f4 f88f 	bl	800d608 <sys_now>
 80194ea:	4602      	mov	r2, r0
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	4413      	add	r3, r2
 80194f0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80194f2:	687a      	ldr	r2, [r7, #4]
 80194f4:	68b9      	ldr	r1, [r7, #8]
 80194f6:	6978      	ldr	r0, [r7, #20]
 80194f8:	f7ff ff24 	bl	8019344 <sys_timeout_abs>
#endif
}
 80194fc:	bf00      	nop
 80194fe:	3718      	adds	r7, #24
 8019500:	46bd      	mov	sp, r7
 8019502:	bd80      	pop	{r7, pc}
 8019504:	0801f290 	.word	0x0801f290
 8019508:	0801f32c 	.word	0x0801f32c
 801950c:	0801f304 	.word	0x0801f304

08019510 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	b084      	sub	sp, #16
 8019514:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019516:	f7f4 f877 	bl	800d608 <sys_now>
 801951a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801951c:	4b17      	ldr	r3, [pc, #92]	; (801957c <sys_check_timeouts+0x6c>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019522:	68bb      	ldr	r3, [r7, #8]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d022      	beq.n	801956e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	685b      	ldr	r3, [r3, #4]
 801952c:	68fa      	ldr	r2, [r7, #12]
 801952e:	1ad3      	subs	r3, r2, r3
 8019530:	0fdb      	lsrs	r3, r3, #31
 8019532:	f003 0301 	and.w	r3, r3, #1
 8019536:	b2db      	uxtb	r3, r3
 8019538:	2b00      	cmp	r3, #0
 801953a:	d11a      	bne.n	8019572 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801953c:	68bb      	ldr	r3, [r7, #8]
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	4a0e      	ldr	r2, [pc, #56]	; (801957c <sys_check_timeouts+0x6c>)
 8019542:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019544:	68bb      	ldr	r3, [r7, #8]
 8019546:	689b      	ldr	r3, [r3, #8]
 8019548:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801954a:	68bb      	ldr	r3, [r7, #8]
 801954c:	68db      	ldr	r3, [r3, #12]
 801954e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019550:	68bb      	ldr	r3, [r7, #8]
 8019552:	685b      	ldr	r3, [r3, #4]
 8019554:	4a0a      	ldr	r2, [pc, #40]	; (8019580 <sys_check_timeouts+0x70>)
 8019556:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019558:	68b9      	ldr	r1, [r7, #8]
 801955a:	200a      	movs	r0, #10
 801955c:	f7f8 fd3c 	bl	8011fd8 <memp_free>
    if (handler != NULL) {
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d0da      	beq.n	801951c <sys_check_timeouts+0xc>
      handler(arg);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	6838      	ldr	r0, [r7, #0]
 801956a:	4798      	blx	r3
  do {
 801956c:	e7d6      	b.n	801951c <sys_check_timeouts+0xc>
      return;
 801956e:	bf00      	nop
 8019570:	e000      	b.n	8019574 <sys_check_timeouts+0x64>
      return;
 8019572:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019574:	3710      	adds	r7, #16
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}
 801957a:	bf00      	nop
 801957c:	20004550 	.word	0x20004550
 8019580:	20004554 	.word	0x20004554

08019584 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b082      	sub	sp, #8
 8019588:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801958a:	4b16      	ldr	r3, [pc, #88]	; (80195e4 <sys_timeouts_sleeptime+0x60>)
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d102      	bne.n	8019598 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019596:	e020      	b.n	80195da <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019598:	f7f4 f836 	bl	800d608 <sys_now>
 801959c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801959e:	4b11      	ldr	r3, [pc, #68]	; (80195e4 <sys_timeouts_sleeptime+0x60>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	685a      	ldr	r2, [r3, #4]
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	1ad3      	subs	r3, r2, r3
 80195a8:	0fdb      	lsrs	r3, r3, #31
 80195aa:	f003 0301 	and.w	r3, r3, #1
 80195ae:	b2db      	uxtb	r3, r3
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d001      	beq.n	80195b8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80195b4:	2300      	movs	r3, #0
 80195b6:	e010      	b.n	80195da <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80195b8:	4b0a      	ldr	r3, [pc, #40]	; (80195e4 <sys_timeouts_sleeptime+0x60>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	685a      	ldr	r2, [r3, #4]
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	1ad3      	subs	r3, r2, r3
 80195c2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80195c4:	683b      	ldr	r3, [r7, #0]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	da06      	bge.n	80195d8 <sys_timeouts_sleeptime+0x54>
 80195ca:	4b07      	ldr	r3, [pc, #28]	; (80195e8 <sys_timeouts_sleeptime+0x64>)
 80195cc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80195d0:	4906      	ldr	r1, [pc, #24]	; (80195ec <sys_timeouts_sleeptime+0x68>)
 80195d2:	4807      	ldr	r0, [pc, #28]	; (80195f0 <sys_timeouts_sleeptime+0x6c>)
 80195d4:	f002 fdde 	bl	801c194 <iprintf>
    return ret;
 80195d8:	683b      	ldr	r3, [r7, #0]
  }
}
 80195da:	4618      	mov	r0, r3
 80195dc:	3708      	adds	r7, #8
 80195de:	46bd      	mov	sp, r7
 80195e0:	bd80      	pop	{r7, pc}
 80195e2:	bf00      	nop
 80195e4:	20004550 	.word	0x20004550
 80195e8:	0801f290 	.word	0x0801f290
 80195ec:	0801f364 	.word	0x0801f364
 80195f0:	0801f304 	.word	0x0801f304

080195f4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80195f8:	f002 fde4 	bl	801c1c4 <rand>
 80195fc:	4603      	mov	r3, r0
 80195fe:	b29b      	uxth	r3, r3
 8019600:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019604:	b29b      	uxth	r3, r3
 8019606:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801960a:	b29a      	uxth	r2, r3
 801960c:	4b01      	ldr	r3, [pc, #4]	; (8019614 <udp_init+0x20>)
 801960e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019610:	bf00      	nop
 8019612:	bd80      	pop	{r7, pc}
 8019614:	20000058 	.word	0x20000058

08019618 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019618:	b580      	push	{r7, lr}
 801961a:	b084      	sub	sp, #16
 801961c:	af00      	add	r7, sp, #0
 801961e:	60f8      	str	r0, [r7, #12]
 8019620:	60b9      	str	r1, [r7, #8]
 8019622:	4613      	mov	r3, r2
 8019624:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d105      	bne.n	8019638 <udp_input_local_match+0x20>
 801962c:	4b27      	ldr	r3, [pc, #156]	; (80196cc <udp_input_local_match+0xb4>)
 801962e:	2287      	movs	r2, #135	; 0x87
 8019630:	4927      	ldr	r1, [pc, #156]	; (80196d0 <udp_input_local_match+0xb8>)
 8019632:	4828      	ldr	r0, [pc, #160]	; (80196d4 <udp_input_local_match+0xbc>)
 8019634:	f002 fdae 	bl	801c194 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	2b00      	cmp	r3, #0
 801963c:	d105      	bne.n	801964a <udp_input_local_match+0x32>
 801963e:	4b23      	ldr	r3, [pc, #140]	; (80196cc <udp_input_local_match+0xb4>)
 8019640:	2288      	movs	r2, #136	; 0x88
 8019642:	4925      	ldr	r1, [pc, #148]	; (80196d8 <udp_input_local_match+0xc0>)
 8019644:	4823      	ldr	r0, [pc, #140]	; (80196d4 <udp_input_local_match+0xbc>)
 8019646:	f002 fda5 	bl	801c194 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	7a1b      	ldrb	r3, [r3, #8]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d00b      	beq.n	801966a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	7a1a      	ldrb	r2, [r3, #8]
 8019656:	4b21      	ldr	r3, [pc, #132]	; (80196dc <udp_input_local_match+0xc4>)
 8019658:	685b      	ldr	r3, [r3, #4]
 801965a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801965e:	3301      	adds	r3, #1
 8019660:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019662:	429a      	cmp	r2, r3
 8019664:	d001      	beq.n	801966a <udp_input_local_match+0x52>
    return 0;
 8019666:	2300      	movs	r3, #0
 8019668:	e02b      	b.n	80196c2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801966a:	79fb      	ldrb	r3, [r7, #7]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d018      	beq.n	80196a2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d013      	beq.n	801969e <udp_input_local_match+0x86>
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d00f      	beq.n	801969e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801967e:	4b17      	ldr	r3, [pc, #92]	; (80196dc <udp_input_local_match+0xc4>)
 8019680:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019686:	d00a      	beq.n	801969e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	681a      	ldr	r2, [r3, #0]
 801968c:	4b13      	ldr	r3, [pc, #76]	; (80196dc <udp_input_local_match+0xc4>)
 801968e:	695b      	ldr	r3, [r3, #20]
 8019690:	405a      	eors	r2, r3
 8019692:	68bb      	ldr	r3, [r7, #8]
 8019694:	3308      	adds	r3, #8
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801969a:	2b00      	cmp	r3, #0
 801969c:	d110      	bne.n	80196c0 <udp_input_local_match+0xa8>
          return 1;
 801969e:	2301      	movs	r3, #1
 80196a0:	e00f      	b.n	80196c2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d009      	beq.n	80196bc <udp_input_local_match+0xa4>
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d005      	beq.n	80196bc <udp_input_local_match+0xa4>
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	681a      	ldr	r2, [r3, #0]
 80196b4:	4b09      	ldr	r3, [pc, #36]	; (80196dc <udp_input_local_match+0xc4>)
 80196b6:	695b      	ldr	r3, [r3, #20]
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d101      	bne.n	80196c0 <udp_input_local_match+0xa8>
        return 1;
 80196bc:	2301      	movs	r3, #1
 80196be:	e000      	b.n	80196c2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80196c0:	2300      	movs	r3, #0
}
 80196c2:	4618      	mov	r0, r3
 80196c4:	3710      	adds	r7, #16
 80196c6:	46bd      	mov	sp, r7
 80196c8:	bd80      	pop	{r7, pc}
 80196ca:	bf00      	nop
 80196cc:	0801f378 	.word	0x0801f378
 80196d0:	0801f3a8 	.word	0x0801f3a8
 80196d4:	0801f3cc 	.word	0x0801f3cc
 80196d8:	0801f3f4 	.word	0x0801f3f4
 80196dc:	20007c2c 	.word	0x20007c2c

080196e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80196e0:	b590      	push	{r4, r7, lr}
 80196e2:	b08d      	sub	sp, #52	; 0x34
 80196e4:	af02      	add	r7, sp, #8
 80196e6:	6078      	str	r0, [r7, #4]
 80196e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80196ea:	2300      	movs	r3, #0
 80196ec:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d105      	bne.n	8019700 <udp_input+0x20>
 80196f4:	4b7c      	ldr	r3, [pc, #496]	; (80198e8 <udp_input+0x208>)
 80196f6:	22cf      	movs	r2, #207	; 0xcf
 80196f8:	497c      	ldr	r1, [pc, #496]	; (80198ec <udp_input+0x20c>)
 80196fa:	487d      	ldr	r0, [pc, #500]	; (80198f0 <udp_input+0x210>)
 80196fc:	f002 fd4a 	bl	801c194 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019700:	683b      	ldr	r3, [r7, #0]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d105      	bne.n	8019712 <udp_input+0x32>
 8019706:	4b78      	ldr	r3, [pc, #480]	; (80198e8 <udp_input+0x208>)
 8019708:	22d0      	movs	r2, #208	; 0xd0
 801970a:	497a      	ldr	r1, [pc, #488]	; (80198f4 <udp_input+0x214>)
 801970c:	4878      	ldr	r0, [pc, #480]	; (80198f0 <udp_input+0x210>)
 801970e:	f002 fd41 	bl	801c194 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	895b      	ldrh	r3, [r3, #10]
 8019716:	2b07      	cmp	r3, #7
 8019718:	d803      	bhi.n	8019722 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801971a:	6878      	ldr	r0, [r7, #4]
 801971c:	f7f9 fafc 	bl	8012d18 <pbuf_free>
    goto end;
 8019720:	e0de      	b.n	80198e0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	685b      	ldr	r3, [r3, #4]
 8019726:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019728:	4b73      	ldr	r3, [pc, #460]	; (80198f8 <udp_input+0x218>)
 801972a:	695a      	ldr	r2, [r3, #20]
 801972c:	4b72      	ldr	r3, [pc, #456]	; (80198f8 <udp_input+0x218>)
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	4619      	mov	r1, r3
 8019732:	4610      	mov	r0, r2
 8019734:	f001 fc86 	bl	801b044 <ip4_addr_isbroadcast_u32>
 8019738:	4603      	mov	r3, r0
 801973a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	881b      	ldrh	r3, [r3, #0]
 8019740:	b29b      	uxth	r3, r3
 8019742:	4618      	mov	r0, r3
 8019744:	f7f7 ff0a 	bl	801155c <lwip_htons>
 8019748:	4603      	mov	r3, r0
 801974a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	885b      	ldrh	r3, [r3, #2]
 8019750:	b29b      	uxth	r3, r3
 8019752:	4618      	mov	r0, r3
 8019754:	f7f7 ff02 	bl	801155c <lwip_htons>
 8019758:	4603      	mov	r3, r0
 801975a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801975c:	2300      	movs	r3, #0
 801975e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019760:	2300      	movs	r3, #0
 8019762:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019764:	2300      	movs	r3, #0
 8019766:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019768:	4b64      	ldr	r3, [pc, #400]	; (80198fc <udp_input+0x21c>)
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	627b      	str	r3, [r7, #36]	; 0x24
 801976e:	e054      	b.n	801981a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019772:	8a5b      	ldrh	r3, [r3, #18]
 8019774:	89fa      	ldrh	r2, [r7, #14]
 8019776:	429a      	cmp	r2, r3
 8019778:	d14a      	bne.n	8019810 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801977a:	7cfb      	ldrb	r3, [r7, #19]
 801977c:	461a      	mov	r2, r3
 801977e:	6839      	ldr	r1, [r7, #0]
 8019780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019782:	f7ff ff49 	bl	8019618 <udp_input_local_match>
 8019786:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019788:	2b00      	cmp	r3, #0
 801978a:	d041      	beq.n	8019810 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801978e:	7c1b      	ldrb	r3, [r3, #16]
 8019790:	f003 0304 	and.w	r3, r3, #4
 8019794:	2b00      	cmp	r3, #0
 8019796:	d11d      	bne.n	80197d4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019798:	69fb      	ldr	r3, [r7, #28]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d102      	bne.n	80197a4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197a0:	61fb      	str	r3, [r7, #28]
 80197a2:	e017      	b.n	80197d4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80197a4:	7cfb      	ldrb	r3, [r7, #19]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d014      	beq.n	80197d4 <udp_input+0xf4>
 80197aa:	4b53      	ldr	r3, [pc, #332]	; (80198f8 <udp_input+0x218>)
 80197ac:	695b      	ldr	r3, [r3, #20]
 80197ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80197b2:	d10f      	bne.n	80197d4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80197b4:	69fb      	ldr	r3, [r7, #28]
 80197b6:	681a      	ldr	r2, [r3, #0]
 80197b8:	683b      	ldr	r3, [r7, #0]
 80197ba:	3304      	adds	r3, #4
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	429a      	cmp	r2, r3
 80197c0:	d008      	beq.n	80197d4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80197c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197c4:	681a      	ldr	r2, [r3, #0]
 80197c6:	683b      	ldr	r3, [r7, #0]
 80197c8:	3304      	adds	r3, #4
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	429a      	cmp	r2, r3
 80197ce:	d101      	bne.n	80197d4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80197d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197d2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80197d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197d6:	8a9b      	ldrh	r3, [r3, #20]
 80197d8:	8a3a      	ldrh	r2, [r7, #16]
 80197da:	429a      	cmp	r2, r3
 80197dc:	d118      	bne.n	8019810 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80197de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d005      	beq.n	80197f2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80197e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e8:	685a      	ldr	r2, [r3, #4]
 80197ea:	4b43      	ldr	r3, [pc, #268]	; (80198f8 <udp_input+0x218>)
 80197ec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80197ee:	429a      	cmp	r2, r3
 80197f0:	d10e      	bne.n	8019810 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80197f2:	6a3b      	ldr	r3, [r7, #32]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d014      	beq.n	8019822 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80197f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197fa:	68da      	ldr	r2, [r3, #12]
 80197fc:	6a3b      	ldr	r3, [r7, #32]
 80197fe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019800:	4b3e      	ldr	r3, [pc, #248]	; (80198fc <udp_input+0x21c>)
 8019802:	681a      	ldr	r2, [r3, #0]
 8019804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019806:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019808:	4a3c      	ldr	r2, [pc, #240]	; (80198fc <udp_input+0x21c>)
 801980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801980c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801980e:	e008      	b.n	8019822 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019812:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019816:	68db      	ldr	r3, [r3, #12]
 8019818:	627b      	str	r3, [r7, #36]	; 0x24
 801981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801981c:	2b00      	cmp	r3, #0
 801981e:	d1a7      	bne.n	8019770 <udp_input+0x90>
 8019820:	e000      	b.n	8019824 <udp_input+0x144>
        break;
 8019822:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019826:	2b00      	cmp	r3, #0
 8019828:	d101      	bne.n	801982e <udp_input+0x14e>
    pcb = uncon_pcb;
 801982a:	69fb      	ldr	r3, [r7, #28]
 801982c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019830:	2b00      	cmp	r3, #0
 8019832:	d002      	beq.n	801983a <udp_input+0x15a>
    for_us = 1;
 8019834:	2301      	movs	r3, #1
 8019836:	76fb      	strb	r3, [r7, #27]
 8019838:	e00a      	b.n	8019850 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801983a:	683b      	ldr	r3, [r7, #0]
 801983c:	3304      	adds	r3, #4
 801983e:	681a      	ldr	r2, [r3, #0]
 8019840:	4b2d      	ldr	r3, [pc, #180]	; (80198f8 <udp_input+0x218>)
 8019842:	695b      	ldr	r3, [r3, #20]
 8019844:	429a      	cmp	r2, r3
 8019846:	bf0c      	ite	eq
 8019848:	2301      	moveq	r3, #1
 801984a:	2300      	movne	r3, #0
 801984c:	b2db      	uxtb	r3, r3
 801984e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019850:	7efb      	ldrb	r3, [r7, #27]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d041      	beq.n	80198da <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019856:	2108      	movs	r1, #8
 8019858:	6878      	ldr	r0, [r7, #4]
 801985a:	f7f9 f9d7 	bl	8012c0c <pbuf_remove_header>
 801985e:	4603      	mov	r3, r0
 8019860:	2b00      	cmp	r3, #0
 8019862:	d00a      	beq.n	801987a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019864:	4b20      	ldr	r3, [pc, #128]	; (80198e8 <udp_input+0x208>)
 8019866:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801986a:	4925      	ldr	r1, [pc, #148]	; (8019900 <udp_input+0x220>)
 801986c:	4820      	ldr	r0, [pc, #128]	; (80198f0 <udp_input+0x210>)
 801986e:	f002 fc91 	bl	801c194 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019872:	6878      	ldr	r0, [r7, #4]
 8019874:	f7f9 fa50 	bl	8012d18 <pbuf_free>
      goto end;
 8019878:	e032      	b.n	80198e0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801987c:	2b00      	cmp	r3, #0
 801987e:	d012      	beq.n	80198a6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019882:	699b      	ldr	r3, [r3, #24]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d00a      	beq.n	801989e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801988a:	699c      	ldr	r4, [r3, #24]
 801988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801988e:	69d8      	ldr	r0, [r3, #28]
 8019890:	8a3b      	ldrh	r3, [r7, #16]
 8019892:	9300      	str	r3, [sp, #0]
 8019894:	4b1b      	ldr	r3, [pc, #108]	; (8019904 <udp_input+0x224>)
 8019896:	687a      	ldr	r2, [r7, #4]
 8019898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801989a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801989c:	e021      	b.n	80198e2 <udp_input+0x202>
        pbuf_free(p);
 801989e:	6878      	ldr	r0, [r7, #4]
 80198a0:	f7f9 fa3a 	bl	8012d18 <pbuf_free>
        goto end;
 80198a4:	e01c      	b.n	80198e0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80198a6:	7cfb      	ldrb	r3, [r7, #19]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d112      	bne.n	80198d2 <udp_input+0x1f2>
 80198ac:	4b12      	ldr	r3, [pc, #72]	; (80198f8 <udp_input+0x218>)
 80198ae:	695b      	ldr	r3, [r3, #20]
 80198b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80198b4:	2be0      	cmp	r3, #224	; 0xe0
 80198b6:	d00c      	beq.n	80198d2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80198b8:	4b0f      	ldr	r3, [pc, #60]	; (80198f8 <udp_input+0x218>)
 80198ba:	899b      	ldrh	r3, [r3, #12]
 80198bc:	3308      	adds	r3, #8
 80198be:	b29b      	uxth	r3, r3
 80198c0:	b21b      	sxth	r3, r3
 80198c2:	4619      	mov	r1, r3
 80198c4:	6878      	ldr	r0, [r7, #4]
 80198c6:	f7f9 fa14 	bl	8012cf2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80198ca:	2103      	movs	r1, #3
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f001 f89b 	bl	801aa08 <icmp_dest_unreach>
      pbuf_free(p);
 80198d2:	6878      	ldr	r0, [r7, #4]
 80198d4:	f7f9 fa20 	bl	8012d18 <pbuf_free>
  return;
 80198d8:	e003      	b.n	80198e2 <udp_input+0x202>
    pbuf_free(p);
 80198da:	6878      	ldr	r0, [r7, #4]
 80198dc:	f7f9 fa1c 	bl	8012d18 <pbuf_free>
  return;
 80198e0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80198e2:	372c      	adds	r7, #44	; 0x2c
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd90      	pop	{r4, r7, pc}
 80198e8:	0801f378 	.word	0x0801f378
 80198ec:	0801f41c 	.word	0x0801f41c
 80198f0:	0801f3cc 	.word	0x0801f3cc
 80198f4:	0801f434 	.word	0x0801f434
 80198f8:	20007c2c 	.word	0x20007c2c
 80198fc:	2000b358 	.word	0x2000b358
 8019900:	0801f450 	.word	0x0801f450
 8019904:	20007c3c 	.word	0x20007c3c

08019908 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019908:	b480      	push	{r7}
 801990a:	b085      	sub	sp, #20
 801990c:	af00      	add	r7, sp, #0
 801990e:	6078      	str	r0, [r7, #4]
 8019910:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d01e      	beq.n	8019956 <udp_netif_ip_addr_changed+0x4e>
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d01a      	beq.n	8019956 <udp_netif_ip_addr_changed+0x4e>
 8019920:	683b      	ldr	r3, [r7, #0]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d017      	beq.n	8019956 <udp_netif_ip_addr_changed+0x4e>
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d013      	beq.n	8019956 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801992e:	4b0d      	ldr	r3, [pc, #52]	; (8019964 <udp_netif_ip_addr_changed+0x5c>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	60fb      	str	r3, [r7, #12]
 8019934:	e00c      	b.n	8019950 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	681a      	ldr	r2, [r3, #0]
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	429a      	cmp	r2, r3
 8019940:	d103      	bne.n	801994a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	681a      	ldr	r2, [r3, #0]
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	68db      	ldr	r3, [r3, #12]
 801994e:	60fb      	str	r3, [r7, #12]
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d1ef      	bne.n	8019936 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019956:	bf00      	nop
 8019958:	3714      	adds	r7, #20
 801995a:	46bd      	mov	sp, r7
 801995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019960:	4770      	bx	lr
 8019962:	bf00      	nop
 8019964:	2000b358 	.word	0x2000b358

08019968 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b082      	sub	sp, #8
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019970:	4915      	ldr	r1, [pc, #84]	; (80199c8 <etharp_free_entry+0x60>)
 8019972:	687a      	ldr	r2, [r7, #4]
 8019974:	4613      	mov	r3, r2
 8019976:	005b      	lsls	r3, r3, #1
 8019978:	4413      	add	r3, r2
 801997a:	00db      	lsls	r3, r3, #3
 801997c:	440b      	add	r3, r1
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d013      	beq.n	80199ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019984:	4910      	ldr	r1, [pc, #64]	; (80199c8 <etharp_free_entry+0x60>)
 8019986:	687a      	ldr	r2, [r7, #4]
 8019988:	4613      	mov	r3, r2
 801998a:	005b      	lsls	r3, r3, #1
 801998c:	4413      	add	r3, r2
 801998e:	00db      	lsls	r3, r3, #3
 8019990:	440b      	add	r3, r1
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	4618      	mov	r0, r3
 8019996:	f7f9 f9bf 	bl	8012d18 <pbuf_free>
    arp_table[i].q = NULL;
 801999a:	490b      	ldr	r1, [pc, #44]	; (80199c8 <etharp_free_entry+0x60>)
 801999c:	687a      	ldr	r2, [r7, #4]
 801999e:	4613      	mov	r3, r2
 80199a0:	005b      	lsls	r3, r3, #1
 80199a2:	4413      	add	r3, r2
 80199a4:	00db      	lsls	r3, r3, #3
 80199a6:	440b      	add	r3, r1
 80199a8:	2200      	movs	r2, #0
 80199aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80199ac:	4906      	ldr	r1, [pc, #24]	; (80199c8 <etharp_free_entry+0x60>)
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	4613      	mov	r3, r2
 80199b2:	005b      	lsls	r3, r3, #1
 80199b4:	4413      	add	r3, r2
 80199b6:	00db      	lsls	r3, r3, #3
 80199b8:	440b      	add	r3, r1
 80199ba:	3314      	adds	r3, #20
 80199bc:	2200      	movs	r2, #0
 80199be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80199c0:	bf00      	nop
 80199c2:	3708      	adds	r7, #8
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}
 80199c8:	2000455c 	.word	0x2000455c

080199cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b082      	sub	sp, #8
 80199d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80199d2:	2300      	movs	r3, #0
 80199d4:	607b      	str	r3, [r7, #4]
 80199d6:	e096      	b.n	8019b06 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80199d8:	494f      	ldr	r1, [pc, #316]	; (8019b18 <etharp_tmr+0x14c>)
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	4613      	mov	r3, r2
 80199de:	005b      	lsls	r3, r3, #1
 80199e0:	4413      	add	r3, r2
 80199e2:	00db      	lsls	r3, r3, #3
 80199e4:	440b      	add	r3, r1
 80199e6:	3314      	adds	r3, #20
 80199e8:	781b      	ldrb	r3, [r3, #0]
 80199ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80199ec:	78fb      	ldrb	r3, [r7, #3]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	f000 8086 	beq.w	8019b00 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80199f4:	4948      	ldr	r1, [pc, #288]	; (8019b18 <etharp_tmr+0x14c>)
 80199f6:	687a      	ldr	r2, [r7, #4]
 80199f8:	4613      	mov	r3, r2
 80199fa:	005b      	lsls	r3, r3, #1
 80199fc:	4413      	add	r3, r2
 80199fe:	00db      	lsls	r3, r3, #3
 8019a00:	440b      	add	r3, r1
 8019a02:	3312      	adds	r3, #18
 8019a04:	881b      	ldrh	r3, [r3, #0]
 8019a06:	3301      	adds	r3, #1
 8019a08:	b298      	uxth	r0, r3
 8019a0a:	4943      	ldr	r1, [pc, #268]	; (8019b18 <etharp_tmr+0x14c>)
 8019a0c:	687a      	ldr	r2, [r7, #4]
 8019a0e:	4613      	mov	r3, r2
 8019a10:	005b      	lsls	r3, r3, #1
 8019a12:	4413      	add	r3, r2
 8019a14:	00db      	lsls	r3, r3, #3
 8019a16:	440b      	add	r3, r1
 8019a18:	3312      	adds	r3, #18
 8019a1a:	4602      	mov	r2, r0
 8019a1c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019a1e:	493e      	ldr	r1, [pc, #248]	; (8019b18 <etharp_tmr+0x14c>)
 8019a20:	687a      	ldr	r2, [r7, #4]
 8019a22:	4613      	mov	r3, r2
 8019a24:	005b      	lsls	r3, r3, #1
 8019a26:	4413      	add	r3, r2
 8019a28:	00db      	lsls	r3, r3, #3
 8019a2a:	440b      	add	r3, r1
 8019a2c:	3312      	adds	r3, #18
 8019a2e:	881b      	ldrh	r3, [r3, #0]
 8019a30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8019a34:	d215      	bcs.n	8019a62 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019a36:	4938      	ldr	r1, [pc, #224]	; (8019b18 <etharp_tmr+0x14c>)
 8019a38:	687a      	ldr	r2, [r7, #4]
 8019a3a:	4613      	mov	r3, r2
 8019a3c:	005b      	lsls	r3, r3, #1
 8019a3e:	4413      	add	r3, r2
 8019a40:	00db      	lsls	r3, r3, #3
 8019a42:	440b      	add	r3, r1
 8019a44:	3314      	adds	r3, #20
 8019a46:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8019a48:	2b01      	cmp	r3, #1
 8019a4a:	d10e      	bne.n	8019a6a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019a4c:	4932      	ldr	r1, [pc, #200]	; (8019b18 <etharp_tmr+0x14c>)
 8019a4e:	687a      	ldr	r2, [r7, #4]
 8019a50:	4613      	mov	r3, r2
 8019a52:	005b      	lsls	r3, r3, #1
 8019a54:	4413      	add	r3, r2
 8019a56:	00db      	lsls	r3, r3, #3
 8019a58:	440b      	add	r3, r1
 8019a5a:	3312      	adds	r3, #18
 8019a5c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019a5e:	2b04      	cmp	r3, #4
 8019a60:	d903      	bls.n	8019a6a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	f7ff ff80 	bl	8019968 <etharp_free_entry>
 8019a68:	e04a      	b.n	8019b00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019a6a:	492b      	ldr	r1, [pc, #172]	; (8019b18 <etharp_tmr+0x14c>)
 8019a6c:	687a      	ldr	r2, [r7, #4]
 8019a6e:	4613      	mov	r3, r2
 8019a70:	005b      	lsls	r3, r3, #1
 8019a72:	4413      	add	r3, r2
 8019a74:	00db      	lsls	r3, r3, #3
 8019a76:	440b      	add	r3, r1
 8019a78:	3314      	adds	r3, #20
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	2b03      	cmp	r3, #3
 8019a7e:	d10a      	bne.n	8019a96 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019a80:	4925      	ldr	r1, [pc, #148]	; (8019b18 <etharp_tmr+0x14c>)
 8019a82:	687a      	ldr	r2, [r7, #4]
 8019a84:	4613      	mov	r3, r2
 8019a86:	005b      	lsls	r3, r3, #1
 8019a88:	4413      	add	r3, r2
 8019a8a:	00db      	lsls	r3, r3, #3
 8019a8c:	440b      	add	r3, r1
 8019a8e:	3314      	adds	r3, #20
 8019a90:	2204      	movs	r2, #4
 8019a92:	701a      	strb	r2, [r3, #0]
 8019a94:	e034      	b.n	8019b00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019a96:	4920      	ldr	r1, [pc, #128]	; (8019b18 <etharp_tmr+0x14c>)
 8019a98:	687a      	ldr	r2, [r7, #4]
 8019a9a:	4613      	mov	r3, r2
 8019a9c:	005b      	lsls	r3, r3, #1
 8019a9e:	4413      	add	r3, r2
 8019aa0:	00db      	lsls	r3, r3, #3
 8019aa2:	440b      	add	r3, r1
 8019aa4:	3314      	adds	r3, #20
 8019aa6:	781b      	ldrb	r3, [r3, #0]
 8019aa8:	2b04      	cmp	r3, #4
 8019aaa:	d10a      	bne.n	8019ac2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019aac:	491a      	ldr	r1, [pc, #104]	; (8019b18 <etharp_tmr+0x14c>)
 8019aae:	687a      	ldr	r2, [r7, #4]
 8019ab0:	4613      	mov	r3, r2
 8019ab2:	005b      	lsls	r3, r3, #1
 8019ab4:	4413      	add	r3, r2
 8019ab6:	00db      	lsls	r3, r3, #3
 8019ab8:	440b      	add	r3, r1
 8019aba:	3314      	adds	r3, #20
 8019abc:	2202      	movs	r2, #2
 8019abe:	701a      	strb	r2, [r3, #0]
 8019ac0:	e01e      	b.n	8019b00 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019ac2:	4915      	ldr	r1, [pc, #84]	; (8019b18 <etharp_tmr+0x14c>)
 8019ac4:	687a      	ldr	r2, [r7, #4]
 8019ac6:	4613      	mov	r3, r2
 8019ac8:	005b      	lsls	r3, r3, #1
 8019aca:	4413      	add	r3, r2
 8019acc:	00db      	lsls	r3, r3, #3
 8019ace:	440b      	add	r3, r1
 8019ad0:	3314      	adds	r3, #20
 8019ad2:	781b      	ldrb	r3, [r3, #0]
 8019ad4:	2b01      	cmp	r3, #1
 8019ad6:	d113      	bne.n	8019b00 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019ad8:	490f      	ldr	r1, [pc, #60]	; (8019b18 <etharp_tmr+0x14c>)
 8019ada:	687a      	ldr	r2, [r7, #4]
 8019adc:	4613      	mov	r3, r2
 8019ade:	005b      	lsls	r3, r3, #1
 8019ae0:	4413      	add	r3, r2
 8019ae2:	00db      	lsls	r3, r3, #3
 8019ae4:	440b      	add	r3, r1
 8019ae6:	3308      	adds	r3, #8
 8019ae8:	6818      	ldr	r0, [r3, #0]
 8019aea:	687a      	ldr	r2, [r7, #4]
 8019aec:	4613      	mov	r3, r2
 8019aee:	005b      	lsls	r3, r3, #1
 8019af0:	4413      	add	r3, r2
 8019af2:	00db      	lsls	r3, r3, #3
 8019af4:	4a08      	ldr	r2, [pc, #32]	; (8019b18 <etharp_tmr+0x14c>)
 8019af6:	4413      	add	r3, r2
 8019af8:	3304      	adds	r3, #4
 8019afa:	4619      	mov	r1, r3
 8019afc:	f000 fe6e 	bl	801a7dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	3301      	adds	r3, #1
 8019b04:	607b      	str	r3, [r7, #4]
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	2b09      	cmp	r3, #9
 8019b0a:	f77f af65 	ble.w	80199d8 <etharp_tmr+0xc>
      }
    }
  }
}
 8019b0e:	bf00      	nop
 8019b10:	3708      	adds	r7, #8
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	2000455c 	.word	0x2000455c

08019b1c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b08a      	sub	sp, #40	; 0x28
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	60f8      	str	r0, [r7, #12]
 8019b24:	460b      	mov	r3, r1
 8019b26:	607a      	str	r2, [r7, #4]
 8019b28:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019b2a:	230a      	movs	r3, #10
 8019b2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019b2e:	230a      	movs	r3, #10
 8019b30:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019b32:	230a      	movs	r3, #10
 8019b34:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019b36:	2300      	movs	r3, #0
 8019b38:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019b3a:	230a      	movs	r3, #10
 8019b3c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019b3e:	2300      	movs	r3, #0
 8019b40:	83bb      	strh	r3, [r7, #28]
 8019b42:	2300      	movs	r3, #0
 8019b44:	837b      	strh	r3, [r7, #26]
 8019b46:	2300      	movs	r3, #0
 8019b48:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019b4a:	2300      	movs	r3, #0
 8019b4c:	843b      	strh	r3, [r7, #32]
 8019b4e:	e0ae      	b.n	8019cae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019b50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b54:	49a6      	ldr	r1, [pc, #664]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019b56:	4613      	mov	r3, r2
 8019b58:	005b      	lsls	r3, r3, #1
 8019b5a:	4413      	add	r3, r2
 8019b5c:	00db      	lsls	r3, r3, #3
 8019b5e:	440b      	add	r3, r1
 8019b60:	3314      	adds	r3, #20
 8019b62:	781b      	ldrb	r3, [r3, #0]
 8019b64:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019b66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019b6a:	2b0a      	cmp	r3, #10
 8019b6c:	d105      	bne.n	8019b7a <etharp_find_entry+0x5e>
 8019b6e:	7dfb      	ldrb	r3, [r7, #23]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d102      	bne.n	8019b7a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019b74:	8c3b      	ldrh	r3, [r7, #32]
 8019b76:	847b      	strh	r3, [r7, #34]	; 0x22
 8019b78:	e095      	b.n	8019ca6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019b7a:	7dfb      	ldrb	r3, [r7, #23]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	f000 8092 	beq.w	8019ca6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019b82:	7dfb      	ldrb	r3, [r7, #23]
 8019b84:	2b01      	cmp	r3, #1
 8019b86:	d009      	beq.n	8019b9c <etharp_find_entry+0x80>
 8019b88:	7dfb      	ldrb	r3, [r7, #23]
 8019b8a:	2b01      	cmp	r3, #1
 8019b8c:	d806      	bhi.n	8019b9c <etharp_find_entry+0x80>
 8019b8e:	4b99      	ldr	r3, [pc, #612]	; (8019df4 <etharp_find_entry+0x2d8>)
 8019b90:	f44f 7292 	mov.w	r2, #292	; 0x124
 8019b94:	4998      	ldr	r1, [pc, #608]	; (8019df8 <etharp_find_entry+0x2dc>)
 8019b96:	4899      	ldr	r0, [pc, #612]	; (8019dfc <etharp_find_entry+0x2e0>)
 8019b98:	f002 fafc 	bl	801c194 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019b9c:	68fb      	ldr	r3, [r7, #12]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d020      	beq.n	8019be4 <etharp_find_entry+0xc8>
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	6819      	ldr	r1, [r3, #0]
 8019ba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019baa:	4891      	ldr	r0, [pc, #580]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019bac:	4613      	mov	r3, r2
 8019bae:	005b      	lsls	r3, r3, #1
 8019bb0:	4413      	add	r3, r2
 8019bb2:	00db      	lsls	r3, r3, #3
 8019bb4:	4403      	add	r3, r0
 8019bb6:	3304      	adds	r3, #4
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	4299      	cmp	r1, r3
 8019bbc:	d112      	bne.n	8019be4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d00c      	beq.n	8019bde <etharp_find_entry+0xc2>
 8019bc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019bc8:	4989      	ldr	r1, [pc, #548]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019bca:	4613      	mov	r3, r2
 8019bcc:	005b      	lsls	r3, r3, #1
 8019bce:	4413      	add	r3, r2
 8019bd0:	00db      	lsls	r3, r3, #3
 8019bd2:	440b      	add	r3, r1
 8019bd4:	3308      	adds	r3, #8
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	687a      	ldr	r2, [r7, #4]
 8019bda:	429a      	cmp	r2, r3
 8019bdc:	d102      	bne.n	8019be4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019bde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019be2:	e100      	b.n	8019de6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019be4:	7dfb      	ldrb	r3, [r7, #23]
 8019be6:	2b01      	cmp	r3, #1
 8019be8:	d140      	bne.n	8019c6c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019bea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019bee:	4980      	ldr	r1, [pc, #512]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019bf0:	4613      	mov	r3, r2
 8019bf2:	005b      	lsls	r3, r3, #1
 8019bf4:	4413      	add	r3, r2
 8019bf6:	00db      	lsls	r3, r3, #3
 8019bf8:	440b      	add	r3, r1
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d01a      	beq.n	8019c36 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c04:	497a      	ldr	r1, [pc, #488]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019c06:	4613      	mov	r3, r2
 8019c08:	005b      	lsls	r3, r3, #1
 8019c0a:	4413      	add	r3, r2
 8019c0c:	00db      	lsls	r3, r3, #3
 8019c0e:	440b      	add	r3, r1
 8019c10:	3312      	adds	r3, #18
 8019c12:	881b      	ldrh	r3, [r3, #0]
 8019c14:	8bba      	ldrh	r2, [r7, #28]
 8019c16:	429a      	cmp	r2, r3
 8019c18:	d845      	bhi.n	8019ca6 <etharp_find_entry+0x18a>
            old_queue = i;
 8019c1a:	8c3b      	ldrh	r3, [r7, #32]
 8019c1c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019c1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c22:	4973      	ldr	r1, [pc, #460]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019c24:	4613      	mov	r3, r2
 8019c26:	005b      	lsls	r3, r3, #1
 8019c28:	4413      	add	r3, r2
 8019c2a:	00db      	lsls	r3, r3, #3
 8019c2c:	440b      	add	r3, r1
 8019c2e:	3312      	adds	r3, #18
 8019c30:	881b      	ldrh	r3, [r3, #0]
 8019c32:	83bb      	strh	r3, [r7, #28]
 8019c34:	e037      	b.n	8019ca6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019c36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c3a:	496d      	ldr	r1, [pc, #436]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019c3c:	4613      	mov	r3, r2
 8019c3e:	005b      	lsls	r3, r3, #1
 8019c40:	4413      	add	r3, r2
 8019c42:	00db      	lsls	r3, r3, #3
 8019c44:	440b      	add	r3, r1
 8019c46:	3312      	adds	r3, #18
 8019c48:	881b      	ldrh	r3, [r3, #0]
 8019c4a:	8b7a      	ldrh	r2, [r7, #26]
 8019c4c:	429a      	cmp	r2, r3
 8019c4e:	d82a      	bhi.n	8019ca6 <etharp_find_entry+0x18a>
            old_pending = i;
 8019c50:	8c3b      	ldrh	r3, [r7, #32]
 8019c52:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c58:	4965      	ldr	r1, [pc, #404]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019c5a:	4613      	mov	r3, r2
 8019c5c:	005b      	lsls	r3, r3, #1
 8019c5e:	4413      	add	r3, r2
 8019c60:	00db      	lsls	r3, r3, #3
 8019c62:	440b      	add	r3, r1
 8019c64:	3312      	adds	r3, #18
 8019c66:	881b      	ldrh	r3, [r3, #0]
 8019c68:	837b      	strh	r3, [r7, #26]
 8019c6a:	e01c      	b.n	8019ca6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019c6c:	7dfb      	ldrb	r3, [r7, #23]
 8019c6e:	2b01      	cmp	r3, #1
 8019c70:	d919      	bls.n	8019ca6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019c72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c76:	495e      	ldr	r1, [pc, #376]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019c78:	4613      	mov	r3, r2
 8019c7a:	005b      	lsls	r3, r3, #1
 8019c7c:	4413      	add	r3, r2
 8019c7e:	00db      	lsls	r3, r3, #3
 8019c80:	440b      	add	r3, r1
 8019c82:	3312      	adds	r3, #18
 8019c84:	881b      	ldrh	r3, [r3, #0]
 8019c86:	8b3a      	ldrh	r2, [r7, #24]
 8019c88:	429a      	cmp	r2, r3
 8019c8a:	d80c      	bhi.n	8019ca6 <etharp_find_entry+0x18a>
            old_stable = i;
 8019c8c:	8c3b      	ldrh	r3, [r7, #32]
 8019c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c94:	4956      	ldr	r1, [pc, #344]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019c96:	4613      	mov	r3, r2
 8019c98:	005b      	lsls	r3, r3, #1
 8019c9a:	4413      	add	r3, r2
 8019c9c:	00db      	lsls	r3, r3, #3
 8019c9e:	440b      	add	r3, r1
 8019ca0:	3312      	adds	r3, #18
 8019ca2:	881b      	ldrh	r3, [r3, #0]
 8019ca4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019ca6:	8c3b      	ldrh	r3, [r7, #32]
 8019ca8:	3301      	adds	r3, #1
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	843b      	strh	r3, [r7, #32]
 8019cae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019cb2:	2b09      	cmp	r3, #9
 8019cb4:	f77f af4c 	ble.w	8019b50 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019cb8:	7afb      	ldrb	r3, [r7, #11]
 8019cba:	f003 0302 	and.w	r3, r3, #2
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d108      	bne.n	8019cd4 <etharp_find_entry+0x1b8>
 8019cc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019cc6:	2b0a      	cmp	r3, #10
 8019cc8:	d107      	bne.n	8019cda <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019cca:	7afb      	ldrb	r3, [r7, #11]
 8019ccc:	f003 0301 	and.w	r3, r3, #1
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d102      	bne.n	8019cda <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019cd8:	e085      	b.n	8019de6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019cda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019cde:	2b09      	cmp	r3, #9
 8019ce0:	dc02      	bgt.n	8019ce8 <etharp_find_entry+0x1cc>
    i = empty;
 8019ce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ce4:	843b      	strh	r3, [r7, #32]
 8019ce6:	e039      	b.n	8019d5c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019ce8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019cec:	2b09      	cmp	r3, #9
 8019cee:	dc14      	bgt.n	8019d1a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019cf2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019cf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cf8:	493d      	ldr	r1, [pc, #244]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019cfa:	4613      	mov	r3, r2
 8019cfc:	005b      	lsls	r3, r3, #1
 8019cfe:	4413      	add	r3, r2
 8019d00:	00db      	lsls	r3, r3, #3
 8019d02:	440b      	add	r3, r1
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d018      	beq.n	8019d3c <etharp_find_entry+0x220>
 8019d0a:	4b3a      	ldr	r3, [pc, #232]	; (8019df4 <etharp_find_entry+0x2d8>)
 8019d0c:	f240 126d 	movw	r2, #365	; 0x16d
 8019d10:	493b      	ldr	r1, [pc, #236]	; (8019e00 <etharp_find_entry+0x2e4>)
 8019d12:	483a      	ldr	r0, [pc, #232]	; (8019dfc <etharp_find_entry+0x2e0>)
 8019d14:	f002 fa3e 	bl	801c194 <iprintf>
 8019d18:	e010      	b.n	8019d3c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019d1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019d1e:	2b09      	cmp	r3, #9
 8019d20:	dc02      	bgt.n	8019d28 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019d22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019d24:	843b      	strh	r3, [r7, #32]
 8019d26:	e009      	b.n	8019d3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019d28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019d2c:	2b09      	cmp	r3, #9
 8019d2e:	dc02      	bgt.n	8019d36 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019d30:	8bfb      	ldrh	r3, [r7, #30]
 8019d32:	843b      	strh	r3, [r7, #32]
 8019d34:	e002      	b.n	8019d3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d3a:	e054      	b.n	8019de6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019d3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d40:	2b09      	cmp	r3, #9
 8019d42:	dd06      	ble.n	8019d52 <etharp_find_entry+0x236>
 8019d44:	4b2b      	ldr	r3, [pc, #172]	; (8019df4 <etharp_find_entry+0x2d8>)
 8019d46:	f240 127f 	movw	r2, #383	; 0x17f
 8019d4a:	492e      	ldr	r1, [pc, #184]	; (8019e04 <etharp_find_entry+0x2e8>)
 8019d4c:	482b      	ldr	r0, [pc, #172]	; (8019dfc <etharp_find_entry+0x2e0>)
 8019d4e:	f002 fa21 	bl	801c194 <iprintf>
    etharp_free_entry(i);
 8019d52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d56:	4618      	mov	r0, r3
 8019d58:	f7ff fe06 	bl	8019968 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019d5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d60:	2b09      	cmp	r3, #9
 8019d62:	dd06      	ble.n	8019d72 <etharp_find_entry+0x256>
 8019d64:	4b23      	ldr	r3, [pc, #140]	; (8019df4 <etharp_find_entry+0x2d8>)
 8019d66:	f240 1283 	movw	r2, #387	; 0x183
 8019d6a:	4926      	ldr	r1, [pc, #152]	; (8019e04 <etharp_find_entry+0x2e8>)
 8019d6c:	4823      	ldr	r0, [pc, #140]	; (8019dfc <etharp_find_entry+0x2e0>)
 8019d6e:	f002 fa11 	bl	801c194 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019d72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d76:	491e      	ldr	r1, [pc, #120]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019d78:	4613      	mov	r3, r2
 8019d7a:	005b      	lsls	r3, r3, #1
 8019d7c:	4413      	add	r3, r2
 8019d7e:	00db      	lsls	r3, r3, #3
 8019d80:	440b      	add	r3, r1
 8019d82:	3314      	adds	r3, #20
 8019d84:	781b      	ldrb	r3, [r3, #0]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d006      	beq.n	8019d98 <etharp_find_entry+0x27c>
 8019d8a:	4b1a      	ldr	r3, [pc, #104]	; (8019df4 <etharp_find_entry+0x2d8>)
 8019d8c:	f240 1285 	movw	r2, #389	; 0x185
 8019d90:	491d      	ldr	r1, [pc, #116]	; (8019e08 <etharp_find_entry+0x2ec>)
 8019d92:	481a      	ldr	r0, [pc, #104]	; (8019dfc <etharp_find_entry+0x2e0>)
 8019d94:	f002 f9fe 	bl	801c194 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d00b      	beq.n	8019db6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019d9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	6819      	ldr	r1, [r3, #0]
 8019da6:	4812      	ldr	r0, [pc, #72]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019da8:	4613      	mov	r3, r2
 8019daa:	005b      	lsls	r3, r3, #1
 8019dac:	4413      	add	r3, r2
 8019dae:	00db      	lsls	r3, r3, #3
 8019db0:	4403      	add	r3, r0
 8019db2:	3304      	adds	r3, #4
 8019db4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019db6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019dba:	490d      	ldr	r1, [pc, #52]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019dbc:	4613      	mov	r3, r2
 8019dbe:	005b      	lsls	r3, r3, #1
 8019dc0:	4413      	add	r3, r2
 8019dc2:	00db      	lsls	r3, r3, #3
 8019dc4:	440b      	add	r3, r1
 8019dc6:	3312      	adds	r3, #18
 8019dc8:	2200      	movs	r2, #0
 8019dca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019dcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019dd0:	4907      	ldr	r1, [pc, #28]	; (8019df0 <etharp_find_entry+0x2d4>)
 8019dd2:	4613      	mov	r3, r2
 8019dd4:	005b      	lsls	r3, r3, #1
 8019dd6:	4413      	add	r3, r2
 8019dd8:	00db      	lsls	r3, r3, #3
 8019dda:	440b      	add	r3, r1
 8019ddc:	3308      	adds	r3, #8
 8019dde:	687a      	ldr	r2, [r7, #4]
 8019de0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019de2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019de6:	4618      	mov	r0, r3
 8019de8:	3728      	adds	r7, #40	; 0x28
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}
 8019dee:	bf00      	nop
 8019df0:	2000455c 	.word	0x2000455c
 8019df4:	0801f6dc 	.word	0x0801f6dc
 8019df8:	0801f714 	.word	0x0801f714
 8019dfc:	0801f754 	.word	0x0801f754
 8019e00:	0801f77c 	.word	0x0801f77c
 8019e04:	0801f794 	.word	0x0801f794
 8019e08:	0801f7a8 	.word	0x0801f7a8

08019e0c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b088      	sub	sp, #32
 8019e10:	af02      	add	r7, sp, #8
 8019e12:	60f8      	str	r0, [r7, #12]
 8019e14:	60b9      	str	r1, [r7, #8]
 8019e16:	607a      	str	r2, [r7, #4]
 8019e18:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019e20:	2b06      	cmp	r3, #6
 8019e22:	d006      	beq.n	8019e32 <etharp_update_arp_entry+0x26>
 8019e24:	4b48      	ldr	r3, [pc, #288]	; (8019f48 <etharp_update_arp_entry+0x13c>)
 8019e26:	f240 12a9 	movw	r2, #425	; 0x1a9
 8019e2a:	4948      	ldr	r1, [pc, #288]	; (8019f4c <etharp_update_arp_entry+0x140>)
 8019e2c:	4848      	ldr	r0, [pc, #288]	; (8019f50 <etharp_update_arp_entry+0x144>)
 8019e2e:	f002 f9b1 	bl	801c194 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019e32:	68bb      	ldr	r3, [r7, #8]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d012      	beq.n	8019e5e <etharp_update_arp_entry+0x52>
 8019e38:	68bb      	ldr	r3, [r7, #8]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d00e      	beq.n	8019e5e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019e40:	68bb      	ldr	r3, [r7, #8]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	68f9      	ldr	r1, [r7, #12]
 8019e46:	4618      	mov	r0, r3
 8019e48:	f001 f8fc 	bl	801b044 <ip4_addr_isbroadcast_u32>
 8019e4c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d105      	bne.n	8019e5e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019e52:	68bb      	ldr	r3, [r7, #8]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019e5a:	2be0      	cmp	r3, #224	; 0xe0
 8019e5c:	d102      	bne.n	8019e64 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019e5e:	f06f 030f 	mvn.w	r3, #15
 8019e62:	e06c      	b.n	8019f3e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019e64:	78fb      	ldrb	r3, [r7, #3]
 8019e66:	68fa      	ldr	r2, [r7, #12]
 8019e68:	4619      	mov	r1, r3
 8019e6a:	68b8      	ldr	r0, [r7, #8]
 8019e6c:	f7ff fe56 	bl	8019b1c <etharp_find_entry>
 8019e70:	4603      	mov	r3, r0
 8019e72:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019e74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	da02      	bge.n	8019e82 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019e7c:	8afb      	ldrh	r3, [r7, #22]
 8019e7e:	b25b      	sxtb	r3, r3
 8019e80:	e05d      	b.n	8019f3e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019e82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e86:	4933      	ldr	r1, [pc, #204]	; (8019f54 <etharp_update_arp_entry+0x148>)
 8019e88:	4613      	mov	r3, r2
 8019e8a:	005b      	lsls	r3, r3, #1
 8019e8c:	4413      	add	r3, r2
 8019e8e:	00db      	lsls	r3, r3, #3
 8019e90:	440b      	add	r3, r1
 8019e92:	3314      	adds	r3, #20
 8019e94:	2202      	movs	r2, #2
 8019e96:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019e98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e9c:	492d      	ldr	r1, [pc, #180]	; (8019f54 <etharp_update_arp_entry+0x148>)
 8019e9e:	4613      	mov	r3, r2
 8019ea0:	005b      	lsls	r3, r3, #1
 8019ea2:	4413      	add	r3, r2
 8019ea4:	00db      	lsls	r3, r3, #3
 8019ea6:	440b      	add	r3, r1
 8019ea8:	3308      	adds	r3, #8
 8019eaa:	68fa      	ldr	r2, [r7, #12]
 8019eac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019eae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019eb2:	4613      	mov	r3, r2
 8019eb4:	005b      	lsls	r3, r3, #1
 8019eb6:	4413      	add	r3, r2
 8019eb8:	00db      	lsls	r3, r3, #3
 8019eba:	3308      	adds	r3, #8
 8019ebc:	4a25      	ldr	r2, [pc, #148]	; (8019f54 <etharp_update_arp_entry+0x148>)
 8019ebe:	4413      	add	r3, r2
 8019ec0:	3304      	adds	r3, #4
 8019ec2:	2206      	movs	r2, #6
 8019ec4:	6879      	ldr	r1, [r7, #4]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f002 f951 	bl	801c16e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019ecc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019ed0:	4920      	ldr	r1, [pc, #128]	; (8019f54 <etharp_update_arp_entry+0x148>)
 8019ed2:	4613      	mov	r3, r2
 8019ed4:	005b      	lsls	r3, r3, #1
 8019ed6:	4413      	add	r3, r2
 8019ed8:	00db      	lsls	r3, r3, #3
 8019eda:	440b      	add	r3, r1
 8019edc:	3312      	adds	r3, #18
 8019ede:	2200      	movs	r2, #0
 8019ee0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019ee2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019ee6:	491b      	ldr	r1, [pc, #108]	; (8019f54 <etharp_update_arp_entry+0x148>)
 8019ee8:	4613      	mov	r3, r2
 8019eea:	005b      	lsls	r3, r3, #1
 8019eec:	4413      	add	r3, r2
 8019eee:	00db      	lsls	r3, r3, #3
 8019ef0:	440b      	add	r3, r1
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d021      	beq.n	8019f3c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019ef8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019efc:	4915      	ldr	r1, [pc, #84]	; (8019f54 <etharp_update_arp_entry+0x148>)
 8019efe:	4613      	mov	r3, r2
 8019f00:	005b      	lsls	r3, r3, #1
 8019f02:	4413      	add	r3, r2
 8019f04:	00db      	lsls	r3, r3, #3
 8019f06:	440b      	add	r3, r1
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019f0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019f10:	4910      	ldr	r1, [pc, #64]	; (8019f54 <etharp_update_arp_entry+0x148>)
 8019f12:	4613      	mov	r3, r2
 8019f14:	005b      	lsls	r3, r3, #1
 8019f16:	4413      	add	r3, r2
 8019f18:	00db      	lsls	r3, r3, #3
 8019f1a:	440b      	add	r3, r1
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019f2a:	9300      	str	r3, [sp, #0]
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6939      	ldr	r1, [r7, #16]
 8019f30:	68f8      	ldr	r0, [r7, #12]
 8019f32:	f001 ff8b 	bl	801be4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019f36:	6938      	ldr	r0, [r7, #16]
 8019f38:	f7f8 feee 	bl	8012d18 <pbuf_free>
  }
  return ERR_OK;
 8019f3c:	2300      	movs	r3, #0
}
 8019f3e:	4618      	mov	r0, r3
 8019f40:	3718      	adds	r7, #24
 8019f42:	46bd      	mov	sp, r7
 8019f44:	bd80      	pop	{r7, pc}
 8019f46:	bf00      	nop
 8019f48:	0801f6dc 	.word	0x0801f6dc
 8019f4c:	0801f7d4 	.word	0x0801f7d4
 8019f50:	0801f754 	.word	0x0801f754
 8019f54:	2000455c 	.word	0x2000455c

08019f58 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b084      	sub	sp, #16
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019f60:	2300      	movs	r3, #0
 8019f62:	60fb      	str	r3, [r7, #12]
 8019f64:	e01e      	b.n	8019fa4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019f66:	4913      	ldr	r1, [pc, #76]	; (8019fb4 <etharp_cleanup_netif+0x5c>)
 8019f68:	68fa      	ldr	r2, [r7, #12]
 8019f6a:	4613      	mov	r3, r2
 8019f6c:	005b      	lsls	r3, r3, #1
 8019f6e:	4413      	add	r3, r2
 8019f70:	00db      	lsls	r3, r3, #3
 8019f72:	440b      	add	r3, r1
 8019f74:	3314      	adds	r3, #20
 8019f76:	781b      	ldrb	r3, [r3, #0]
 8019f78:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019f7a:	7afb      	ldrb	r3, [r7, #11]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d00e      	beq.n	8019f9e <etharp_cleanup_netif+0x46>
 8019f80:	490c      	ldr	r1, [pc, #48]	; (8019fb4 <etharp_cleanup_netif+0x5c>)
 8019f82:	68fa      	ldr	r2, [r7, #12]
 8019f84:	4613      	mov	r3, r2
 8019f86:	005b      	lsls	r3, r3, #1
 8019f88:	4413      	add	r3, r2
 8019f8a:	00db      	lsls	r3, r3, #3
 8019f8c:	440b      	add	r3, r1
 8019f8e:	3308      	adds	r3, #8
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	687a      	ldr	r2, [r7, #4]
 8019f94:	429a      	cmp	r2, r3
 8019f96:	d102      	bne.n	8019f9e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019f98:	68f8      	ldr	r0, [r7, #12]
 8019f9a:	f7ff fce5 	bl	8019968 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	3301      	adds	r3, #1
 8019fa2:	60fb      	str	r3, [r7, #12]
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	2b09      	cmp	r3, #9
 8019fa8:	dddd      	ble.n	8019f66 <etharp_cleanup_netif+0xe>
    }
  }
}
 8019faa:	bf00      	nop
 8019fac:	3710      	adds	r7, #16
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}
 8019fb2:	bf00      	nop
 8019fb4:	2000455c 	.word	0x2000455c

08019fb8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019fb8:	b5b0      	push	{r4, r5, r7, lr}
 8019fba:	b08a      	sub	sp, #40	; 0x28
 8019fbc:	af04      	add	r7, sp, #16
 8019fbe:	6078      	str	r0, [r7, #4]
 8019fc0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019fc2:	683b      	ldr	r3, [r7, #0]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d107      	bne.n	8019fd8 <etharp_input+0x20>
 8019fc8:	4b3d      	ldr	r3, [pc, #244]	; (801a0c0 <etharp_input+0x108>)
 8019fca:	f240 228a 	movw	r2, #650	; 0x28a
 8019fce:	493d      	ldr	r1, [pc, #244]	; (801a0c4 <etharp_input+0x10c>)
 8019fd0:	483d      	ldr	r0, [pc, #244]	; (801a0c8 <etharp_input+0x110>)
 8019fd2:	f002 f8df 	bl	801c194 <iprintf>
 8019fd6:	e06f      	b.n	801a0b8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	685b      	ldr	r3, [r3, #4]
 8019fdc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019fde:	693b      	ldr	r3, [r7, #16]
 8019fe0:	881b      	ldrh	r3, [r3, #0]
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019fe8:	d10c      	bne.n	801a004 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019fea:	693b      	ldr	r3, [r7, #16]
 8019fec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019fee:	2b06      	cmp	r3, #6
 8019ff0:	d108      	bne.n	801a004 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019ff2:	693b      	ldr	r3, [r7, #16]
 8019ff4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019ff6:	2b04      	cmp	r3, #4
 8019ff8:	d104      	bne.n	801a004 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019ffa:	693b      	ldr	r3, [r7, #16]
 8019ffc:	885b      	ldrh	r3, [r3, #2]
 8019ffe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a000:	2b08      	cmp	r3, #8
 801a002:	d003      	beq.n	801a00c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a004:	6878      	ldr	r0, [r7, #4]
 801a006:	f7f8 fe87 	bl	8012d18 <pbuf_free>
    return;
 801a00a:	e055      	b.n	801a0b8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a00c:	693b      	ldr	r3, [r7, #16]
 801a00e:	330e      	adds	r3, #14
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a014:	693b      	ldr	r3, [r7, #16]
 801a016:	3318      	adds	r3, #24
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a01c:	683b      	ldr	r3, [r7, #0]
 801a01e:	3304      	adds	r3, #4
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d102      	bne.n	801a02c <etharp_input+0x74>
    for_us = 0;
 801a026:	2300      	movs	r3, #0
 801a028:	75fb      	strb	r3, [r7, #23]
 801a02a:	e009      	b.n	801a040 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a02c:	68ba      	ldr	r2, [r7, #8]
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	3304      	adds	r3, #4
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	429a      	cmp	r2, r3
 801a036:	bf0c      	ite	eq
 801a038:	2301      	moveq	r3, #1
 801a03a:	2300      	movne	r3, #0
 801a03c:	b2db      	uxtb	r3, r3
 801a03e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a040:	693b      	ldr	r3, [r7, #16]
 801a042:	f103 0208 	add.w	r2, r3, #8
 801a046:	7dfb      	ldrb	r3, [r7, #23]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d001      	beq.n	801a050 <etharp_input+0x98>
 801a04c:	2301      	movs	r3, #1
 801a04e:	e000      	b.n	801a052 <etharp_input+0x9a>
 801a050:	2302      	movs	r3, #2
 801a052:	f107 010c 	add.w	r1, r7, #12
 801a056:	6838      	ldr	r0, [r7, #0]
 801a058:	f7ff fed8 	bl	8019e0c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a05c:	693b      	ldr	r3, [r7, #16]
 801a05e:	88db      	ldrh	r3, [r3, #6]
 801a060:	b29b      	uxth	r3, r3
 801a062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a066:	d003      	beq.n	801a070 <etharp_input+0xb8>
 801a068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a06c:	d01e      	beq.n	801a0ac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a06e:	e020      	b.n	801a0b2 <etharp_input+0xfa>
      if (for_us) {
 801a070:	7dfb      	ldrb	r3, [r7, #23]
 801a072:	2b00      	cmp	r3, #0
 801a074:	d01c      	beq.n	801a0b0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a076:	683b      	ldr	r3, [r7, #0]
 801a078:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a07c:	693b      	ldr	r3, [r7, #16]
 801a07e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a082:	683b      	ldr	r3, [r7, #0]
 801a084:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801a088:	683b      	ldr	r3, [r7, #0]
 801a08a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a08c:	693a      	ldr	r2, [r7, #16]
 801a08e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a090:	2102      	movs	r1, #2
 801a092:	9103      	str	r1, [sp, #12]
 801a094:	f107 010c 	add.w	r1, r7, #12
 801a098:	9102      	str	r1, [sp, #8]
 801a09a:	9201      	str	r2, [sp, #4]
 801a09c:	9300      	str	r3, [sp, #0]
 801a09e:	462b      	mov	r3, r5
 801a0a0:	4622      	mov	r2, r4
 801a0a2:	4601      	mov	r1, r0
 801a0a4:	6838      	ldr	r0, [r7, #0]
 801a0a6:	f000 faeb 	bl	801a680 <etharp_raw>
      break;
 801a0aa:	e001      	b.n	801a0b0 <etharp_input+0xf8>
      break;
 801a0ac:	bf00      	nop
 801a0ae:	e000      	b.n	801a0b2 <etharp_input+0xfa>
      break;
 801a0b0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a0b2:	6878      	ldr	r0, [r7, #4]
 801a0b4:	f7f8 fe30 	bl	8012d18 <pbuf_free>
}
 801a0b8:	3718      	adds	r7, #24
 801a0ba:	46bd      	mov	sp, r7
 801a0bc:	bdb0      	pop	{r4, r5, r7, pc}
 801a0be:	bf00      	nop
 801a0c0:	0801f6dc 	.word	0x0801f6dc
 801a0c4:	0801f82c 	.word	0x0801f82c
 801a0c8:	0801f754 	.word	0x0801f754

0801a0cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b086      	sub	sp, #24
 801a0d0:	af02      	add	r7, sp, #8
 801a0d2:	60f8      	str	r0, [r7, #12]
 801a0d4:	60b9      	str	r1, [r7, #8]
 801a0d6:	4613      	mov	r3, r2
 801a0d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a0da:	79fa      	ldrb	r2, [r7, #7]
 801a0dc:	4944      	ldr	r1, [pc, #272]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a0de:	4613      	mov	r3, r2
 801a0e0:	005b      	lsls	r3, r3, #1
 801a0e2:	4413      	add	r3, r2
 801a0e4:	00db      	lsls	r3, r3, #3
 801a0e6:	440b      	add	r3, r1
 801a0e8:	3314      	adds	r3, #20
 801a0ea:	781b      	ldrb	r3, [r3, #0]
 801a0ec:	2b01      	cmp	r3, #1
 801a0ee:	d806      	bhi.n	801a0fe <etharp_output_to_arp_index+0x32>
 801a0f0:	4b40      	ldr	r3, [pc, #256]	; (801a1f4 <etharp_output_to_arp_index+0x128>)
 801a0f2:	f240 22ef 	movw	r2, #751	; 0x2ef
 801a0f6:	4940      	ldr	r1, [pc, #256]	; (801a1f8 <etharp_output_to_arp_index+0x12c>)
 801a0f8:	4840      	ldr	r0, [pc, #256]	; (801a1fc <etharp_output_to_arp_index+0x130>)
 801a0fa:	f002 f84b 	bl	801c194 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a0fe:	79fa      	ldrb	r2, [r7, #7]
 801a100:	493b      	ldr	r1, [pc, #236]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a102:	4613      	mov	r3, r2
 801a104:	005b      	lsls	r3, r3, #1
 801a106:	4413      	add	r3, r2
 801a108:	00db      	lsls	r3, r3, #3
 801a10a:	440b      	add	r3, r1
 801a10c:	3314      	adds	r3, #20
 801a10e:	781b      	ldrb	r3, [r3, #0]
 801a110:	2b02      	cmp	r3, #2
 801a112:	d153      	bne.n	801a1bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a114:	79fa      	ldrb	r2, [r7, #7]
 801a116:	4936      	ldr	r1, [pc, #216]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a118:	4613      	mov	r3, r2
 801a11a:	005b      	lsls	r3, r3, #1
 801a11c:	4413      	add	r3, r2
 801a11e:	00db      	lsls	r3, r3, #3
 801a120:	440b      	add	r3, r1
 801a122:	3312      	adds	r3, #18
 801a124:	881b      	ldrh	r3, [r3, #0]
 801a126:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a12a:	d919      	bls.n	801a160 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a12c:	79fa      	ldrb	r2, [r7, #7]
 801a12e:	4613      	mov	r3, r2
 801a130:	005b      	lsls	r3, r3, #1
 801a132:	4413      	add	r3, r2
 801a134:	00db      	lsls	r3, r3, #3
 801a136:	4a2e      	ldr	r2, [pc, #184]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a138:	4413      	add	r3, r2
 801a13a:	3304      	adds	r3, #4
 801a13c:	4619      	mov	r1, r3
 801a13e:	68f8      	ldr	r0, [r7, #12]
 801a140:	f000 fb4c 	bl	801a7dc <etharp_request>
 801a144:	4603      	mov	r3, r0
 801a146:	2b00      	cmp	r3, #0
 801a148:	d138      	bne.n	801a1bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a14a:	79fa      	ldrb	r2, [r7, #7]
 801a14c:	4928      	ldr	r1, [pc, #160]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a14e:	4613      	mov	r3, r2
 801a150:	005b      	lsls	r3, r3, #1
 801a152:	4413      	add	r3, r2
 801a154:	00db      	lsls	r3, r3, #3
 801a156:	440b      	add	r3, r1
 801a158:	3314      	adds	r3, #20
 801a15a:	2203      	movs	r2, #3
 801a15c:	701a      	strb	r2, [r3, #0]
 801a15e:	e02d      	b.n	801a1bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a160:	79fa      	ldrb	r2, [r7, #7]
 801a162:	4923      	ldr	r1, [pc, #140]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a164:	4613      	mov	r3, r2
 801a166:	005b      	lsls	r3, r3, #1
 801a168:	4413      	add	r3, r2
 801a16a:	00db      	lsls	r3, r3, #3
 801a16c:	440b      	add	r3, r1
 801a16e:	3312      	adds	r3, #18
 801a170:	881b      	ldrh	r3, [r3, #0]
 801a172:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a176:	d321      	bcc.n	801a1bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a178:	79fa      	ldrb	r2, [r7, #7]
 801a17a:	4613      	mov	r3, r2
 801a17c:	005b      	lsls	r3, r3, #1
 801a17e:	4413      	add	r3, r2
 801a180:	00db      	lsls	r3, r3, #3
 801a182:	4a1b      	ldr	r2, [pc, #108]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a184:	4413      	add	r3, r2
 801a186:	1d19      	adds	r1, r3, #4
 801a188:	79fa      	ldrb	r2, [r7, #7]
 801a18a:	4613      	mov	r3, r2
 801a18c:	005b      	lsls	r3, r3, #1
 801a18e:	4413      	add	r3, r2
 801a190:	00db      	lsls	r3, r3, #3
 801a192:	3308      	adds	r3, #8
 801a194:	4a16      	ldr	r2, [pc, #88]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a196:	4413      	add	r3, r2
 801a198:	3304      	adds	r3, #4
 801a19a:	461a      	mov	r2, r3
 801a19c:	68f8      	ldr	r0, [r7, #12]
 801a19e:	f000 fafb 	bl	801a798 <etharp_request_dst>
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d109      	bne.n	801a1bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a1a8:	79fa      	ldrb	r2, [r7, #7]
 801a1aa:	4911      	ldr	r1, [pc, #68]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a1ac:	4613      	mov	r3, r2
 801a1ae:	005b      	lsls	r3, r3, #1
 801a1b0:	4413      	add	r3, r2
 801a1b2:	00db      	lsls	r3, r3, #3
 801a1b4:	440b      	add	r3, r1
 801a1b6:	3314      	adds	r3, #20
 801a1b8:	2203      	movs	r2, #3
 801a1ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801a1c2:	79fa      	ldrb	r2, [r7, #7]
 801a1c4:	4613      	mov	r3, r2
 801a1c6:	005b      	lsls	r3, r3, #1
 801a1c8:	4413      	add	r3, r2
 801a1ca:	00db      	lsls	r3, r3, #3
 801a1cc:	3308      	adds	r3, #8
 801a1ce:	4a08      	ldr	r2, [pc, #32]	; (801a1f0 <etharp_output_to_arp_index+0x124>)
 801a1d0:	4413      	add	r3, r2
 801a1d2:	1d1a      	adds	r2, r3, #4
 801a1d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a1d8:	9300      	str	r3, [sp, #0]
 801a1da:	4613      	mov	r3, r2
 801a1dc:	460a      	mov	r2, r1
 801a1de:	68b9      	ldr	r1, [r7, #8]
 801a1e0:	68f8      	ldr	r0, [r7, #12]
 801a1e2:	f001 fe33 	bl	801be4c <ethernet_output>
 801a1e6:	4603      	mov	r3, r0
}
 801a1e8:	4618      	mov	r0, r3
 801a1ea:	3710      	adds	r7, #16
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}
 801a1f0:	2000455c 	.word	0x2000455c
 801a1f4:	0801f6dc 	.word	0x0801f6dc
 801a1f8:	0801f84c 	.word	0x0801f84c
 801a1fc:	0801f754 	.word	0x0801f754

0801a200 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a200:	b580      	push	{r7, lr}
 801a202:	b08a      	sub	sp, #40	; 0x28
 801a204:	af02      	add	r7, sp, #8
 801a206:	60f8      	str	r0, [r7, #12]
 801a208:	60b9      	str	r1, [r7, #8]
 801a20a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	2b00      	cmp	r3, #0
 801a214:	d106      	bne.n	801a224 <etharp_output+0x24>
 801a216:	4b73      	ldr	r3, [pc, #460]	; (801a3e4 <etharp_output+0x1e4>)
 801a218:	f240 321e 	movw	r2, #798	; 0x31e
 801a21c:	4972      	ldr	r1, [pc, #456]	; (801a3e8 <etharp_output+0x1e8>)
 801a21e:	4873      	ldr	r0, [pc, #460]	; (801a3ec <etharp_output+0x1ec>)
 801a220:	f001 ffb8 	bl	801c194 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a224:	68bb      	ldr	r3, [r7, #8]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d106      	bne.n	801a238 <etharp_output+0x38>
 801a22a:	4b6e      	ldr	r3, [pc, #440]	; (801a3e4 <etharp_output+0x1e4>)
 801a22c:	f240 321f 	movw	r2, #799	; 0x31f
 801a230:	496f      	ldr	r1, [pc, #444]	; (801a3f0 <etharp_output+0x1f0>)
 801a232:	486e      	ldr	r0, [pc, #440]	; (801a3ec <etharp_output+0x1ec>)
 801a234:	f001 ffae 	bl	801c194 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d106      	bne.n	801a24c <etharp_output+0x4c>
 801a23e:	4b69      	ldr	r3, [pc, #420]	; (801a3e4 <etharp_output+0x1e4>)
 801a240:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a244:	496b      	ldr	r1, [pc, #428]	; (801a3f4 <etharp_output+0x1f4>)
 801a246:	4869      	ldr	r0, [pc, #420]	; (801a3ec <etharp_output+0x1ec>)
 801a248:	f001 ffa4 	bl	801c194 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	68f9      	ldr	r1, [r7, #12]
 801a252:	4618      	mov	r0, r3
 801a254:	f000 fef6 	bl	801b044 <ip4_addr_isbroadcast_u32>
 801a258:	4603      	mov	r3, r0
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d002      	beq.n	801a264 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a25e:	4b66      	ldr	r3, [pc, #408]	; (801a3f8 <etharp_output+0x1f8>)
 801a260:	61fb      	str	r3, [r7, #28]
 801a262:	e0af      	b.n	801a3c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a26c:	2be0      	cmp	r3, #224	; 0xe0
 801a26e:	d118      	bne.n	801a2a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a270:	2301      	movs	r3, #1
 801a272:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a274:	2300      	movs	r3, #0
 801a276:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a278:	235e      	movs	r3, #94	; 0x5e
 801a27a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	3301      	adds	r3, #1
 801a280:	781b      	ldrb	r3, [r3, #0]
 801a282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a286:	b2db      	uxtb	r3, r3
 801a288:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	3302      	adds	r3, #2
 801a28e:	781b      	ldrb	r3, [r3, #0]
 801a290:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	3303      	adds	r3, #3
 801a296:	781b      	ldrb	r3, [r3, #0]
 801a298:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a29a:	f107 0310 	add.w	r3, r7, #16
 801a29e:	61fb      	str	r3, [r7, #28]
 801a2a0:	e090      	b.n	801a3c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	681a      	ldr	r2, [r3, #0]
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	3304      	adds	r3, #4
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	405a      	eors	r2, r3
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	3308      	adds	r3, #8
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	4013      	ands	r3, r2
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d012      	beq.n	801a2e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a2c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801a2c4:	4293      	cmp	r3, r2
 801a2c6:	d00b      	beq.n	801a2e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	330c      	adds	r3, #12
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d003      	beq.n	801a2da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	330c      	adds	r3, #12
 801a2d6:	61bb      	str	r3, [r7, #24]
 801a2d8:	e002      	b.n	801a2e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a2da:	f06f 0303 	mvn.w	r3, #3
 801a2de:	e07d      	b.n	801a3dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a2e0:	4b46      	ldr	r3, [pc, #280]	; (801a3fc <etharp_output+0x1fc>)
 801a2e2:	781b      	ldrb	r3, [r3, #0]
 801a2e4:	4619      	mov	r1, r3
 801a2e6:	4a46      	ldr	r2, [pc, #280]	; (801a400 <etharp_output+0x200>)
 801a2e8:	460b      	mov	r3, r1
 801a2ea:	005b      	lsls	r3, r3, #1
 801a2ec:	440b      	add	r3, r1
 801a2ee:	00db      	lsls	r3, r3, #3
 801a2f0:	4413      	add	r3, r2
 801a2f2:	3314      	adds	r3, #20
 801a2f4:	781b      	ldrb	r3, [r3, #0]
 801a2f6:	2b01      	cmp	r3, #1
 801a2f8:	d925      	bls.n	801a346 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a2fa:	4b40      	ldr	r3, [pc, #256]	; (801a3fc <etharp_output+0x1fc>)
 801a2fc:	781b      	ldrb	r3, [r3, #0]
 801a2fe:	4619      	mov	r1, r3
 801a300:	4a3f      	ldr	r2, [pc, #252]	; (801a400 <etharp_output+0x200>)
 801a302:	460b      	mov	r3, r1
 801a304:	005b      	lsls	r3, r3, #1
 801a306:	440b      	add	r3, r1
 801a308:	00db      	lsls	r3, r3, #3
 801a30a:	4413      	add	r3, r2
 801a30c:	3308      	adds	r3, #8
 801a30e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a310:	68fa      	ldr	r2, [r7, #12]
 801a312:	429a      	cmp	r2, r3
 801a314:	d117      	bne.n	801a346 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a316:	69bb      	ldr	r3, [r7, #24]
 801a318:	681a      	ldr	r2, [r3, #0]
 801a31a:	4b38      	ldr	r3, [pc, #224]	; (801a3fc <etharp_output+0x1fc>)
 801a31c:	781b      	ldrb	r3, [r3, #0]
 801a31e:	4618      	mov	r0, r3
 801a320:	4937      	ldr	r1, [pc, #220]	; (801a400 <etharp_output+0x200>)
 801a322:	4603      	mov	r3, r0
 801a324:	005b      	lsls	r3, r3, #1
 801a326:	4403      	add	r3, r0
 801a328:	00db      	lsls	r3, r3, #3
 801a32a:	440b      	add	r3, r1
 801a32c:	3304      	adds	r3, #4
 801a32e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a330:	429a      	cmp	r2, r3
 801a332:	d108      	bne.n	801a346 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a334:	4b31      	ldr	r3, [pc, #196]	; (801a3fc <etharp_output+0x1fc>)
 801a336:	781b      	ldrb	r3, [r3, #0]
 801a338:	461a      	mov	r2, r3
 801a33a:	68b9      	ldr	r1, [r7, #8]
 801a33c:	68f8      	ldr	r0, [r7, #12]
 801a33e:	f7ff fec5 	bl	801a0cc <etharp_output_to_arp_index>
 801a342:	4603      	mov	r3, r0
 801a344:	e04a      	b.n	801a3dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a346:	2300      	movs	r3, #0
 801a348:	75fb      	strb	r3, [r7, #23]
 801a34a:	e031      	b.n	801a3b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a34c:	7dfa      	ldrb	r2, [r7, #23]
 801a34e:	492c      	ldr	r1, [pc, #176]	; (801a400 <etharp_output+0x200>)
 801a350:	4613      	mov	r3, r2
 801a352:	005b      	lsls	r3, r3, #1
 801a354:	4413      	add	r3, r2
 801a356:	00db      	lsls	r3, r3, #3
 801a358:	440b      	add	r3, r1
 801a35a:	3314      	adds	r3, #20
 801a35c:	781b      	ldrb	r3, [r3, #0]
 801a35e:	2b01      	cmp	r3, #1
 801a360:	d923      	bls.n	801a3aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a362:	7dfa      	ldrb	r2, [r7, #23]
 801a364:	4926      	ldr	r1, [pc, #152]	; (801a400 <etharp_output+0x200>)
 801a366:	4613      	mov	r3, r2
 801a368:	005b      	lsls	r3, r3, #1
 801a36a:	4413      	add	r3, r2
 801a36c:	00db      	lsls	r3, r3, #3
 801a36e:	440b      	add	r3, r1
 801a370:	3308      	adds	r3, #8
 801a372:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a374:	68fa      	ldr	r2, [r7, #12]
 801a376:	429a      	cmp	r2, r3
 801a378:	d117      	bne.n	801a3aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a37a:	69bb      	ldr	r3, [r7, #24]
 801a37c:	6819      	ldr	r1, [r3, #0]
 801a37e:	7dfa      	ldrb	r2, [r7, #23]
 801a380:	481f      	ldr	r0, [pc, #124]	; (801a400 <etharp_output+0x200>)
 801a382:	4613      	mov	r3, r2
 801a384:	005b      	lsls	r3, r3, #1
 801a386:	4413      	add	r3, r2
 801a388:	00db      	lsls	r3, r3, #3
 801a38a:	4403      	add	r3, r0
 801a38c:	3304      	adds	r3, #4
 801a38e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a390:	4299      	cmp	r1, r3
 801a392:	d10a      	bne.n	801a3aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a394:	4a19      	ldr	r2, [pc, #100]	; (801a3fc <etharp_output+0x1fc>)
 801a396:	7dfb      	ldrb	r3, [r7, #23]
 801a398:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a39a:	7dfb      	ldrb	r3, [r7, #23]
 801a39c:	461a      	mov	r2, r3
 801a39e:	68b9      	ldr	r1, [r7, #8]
 801a3a0:	68f8      	ldr	r0, [r7, #12]
 801a3a2:	f7ff fe93 	bl	801a0cc <etharp_output_to_arp_index>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	e018      	b.n	801a3dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a3aa:	7dfb      	ldrb	r3, [r7, #23]
 801a3ac:	3301      	adds	r3, #1
 801a3ae:	75fb      	strb	r3, [r7, #23]
 801a3b0:	7dfb      	ldrb	r3, [r7, #23]
 801a3b2:	2b09      	cmp	r3, #9
 801a3b4:	d9ca      	bls.n	801a34c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a3b6:	68ba      	ldr	r2, [r7, #8]
 801a3b8:	69b9      	ldr	r1, [r7, #24]
 801a3ba:	68f8      	ldr	r0, [r7, #12]
 801a3bc:	f000 f822 	bl	801a404 <etharp_query>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	e00b      	b.n	801a3dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a3ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a3ce:	9300      	str	r3, [sp, #0]
 801a3d0:	69fb      	ldr	r3, [r7, #28]
 801a3d2:	68b9      	ldr	r1, [r7, #8]
 801a3d4:	68f8      	ldr	r0, [r7, #12]
 801a3d6:	f001 fd39 	bl	801be4c <ethernet_output>
 801a3da:	4603      	mov	r3, r0
}
 801a3dc:	4618      	mov	r0, r3
 801a3de:	3720      	adds	r7, #32
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}
 801a3e4:	0801f6dc 	.word	0x0801f6dc
 801a3e8:	0801f82c 	.word	0x0801f82c
 801a3ec:	0801f754 	.word	0x0801f754
 801a3f0:	0801f87c 	.word	0x0801f87c
 801a3f4:	0801f81c 	.word	0x0801f81c
 801a3f8:	08030a0c 	.word	0x08030a0c
 801a3fc:	2000464c 	.word	0x2000464c
 801a400:	2000455c 	.word	0x2000455c

0801a404 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b08c      	sub	sp, #48	; 0x30
 801a408:	af02      	add	r7, sp, #8
 801a40a:	60f8      	str	r0, [r7, #12]
 801a40c:	60b9      	str	r1, [r7, #8]
 801a40e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	3326      	adds	r3, #38	; 0x26
 801a414:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a416:	23ff      	movs	r3, #255	; 0xff
 801a418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801a41c:	2300      	movs	r3, #0
 801a41e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a420:	68bb      	ldr	r3, [r7, #8]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	68f9      	ldr	r1, [r7, #12]
 801a426:	4618      	mov	r0, r3
 801a428:	f000 fe0c 	bl	801b044 <ip4_addr_isbroadcast_u32>
 801a42c:	4603      	mov	r3, r0
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d10c      	bne.n	801a44c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a432:	68bb      	ldr	r3, [r7, #8]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a43a:	2be0      	cmp	r3, #224	; 0xe0
 801a43c:	d006      	beq.n	801a44c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a43e:	68bb      	ldr	r3, [r7, #8]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d003      	beq.n	801a44c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a444:	68bb      	ldr	r3, [r7, #8]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d102      	bne.n	801a452 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a44c:	f06f 030f 	mvn.w	r3, #15
 801a450:	e102      	b.n	801a658 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a452:	68fa      	ldr	r2, [r7, #12]
 801a454:	2101      	movs	r1, #1
 801a456:	68b8      	ldr	r0, [r7, #8]
 801a458:	f7ff fb60 	bl	8019b1c <etharp_find_entry>
 801a45c:	4603      	mov	r3, r0
 801a45e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a460:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a464:	2b00      	cmp	r3, #0
 801a466:	da02      	bge.n	801a46e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a468:	8a7b      	ldrh	r3, [r7, #18]
 801a46a:	b25b      	sxtb	r3, r3
 801a46c:	e0f4      	b.n	801a658 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a46e:	8a7b      	ldrh	r3, [r7, #18]
 801a470:	2b7e      	cmp	r3, #126	; 0x7e
 801a472:	d906      	bls.n	801a482 <etharp_query+0x7e>
 801a474:	4b7a      	ldr	r3, [pc, #488]	; (801a660 <etharp_query+0x25c>)
 801a476:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a47a:	497a      	ldr	r1, [pc, #488]	; (801a664 <etharp_query+0x260>)
 801a47c:	487a      	ldr	r0, [pc, #488]	; (801a668 <etharp_query+0x264>)
 801a47e:	f001 fe89 	bl	801c194 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a482:	8a7b      	ldrh	r3, [r7, #18]
 801a484:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a486:	7c7a      	ldrb	r2, [r7, #17]
 801a488:	4978      	ldr	r1, [pc, #480]	; (801a66c <etharp_query+0x268>)
 801a48a:	4613      	mov	r3, r2
 801a48c:	005b      	lsls	r3, r3, #1
 801a48e:	4413      	add	r3, r2
 801a490:	00db      	lsls	r3, r3, #3
 801a492:	440b      	add	r3, r1
 801a494:	3314      	adds	r3, #20
 801a496:	781b      	ldrb	r3, [r3, #0]
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d115      	bne.n	801a4c8 <etharp_query+0xc4>
    is_new_entry = 1;
 801a49c:	2301      	movs	r3, #1
 801a49e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a4a0:	7c7a      	ldrb	r2, [r7, #17]
 801a4a2:	4972      	ldr	r1, [pc, #456]	; (801a66c <etharp_query+0x268>)
 801a4a4:	4613      	mov	r3, r2
 801a4a6:	005b      	lsls	r3, r3, #1
 801a4a8:	4413      	add	r3, r2
 801a4aa:	00db      	lsls	r3, r3, #3
 801a4ac:	440b      	add	r3, r1
 801a4ae:	3314      	adds	r3, #20
 801a4b0:	2201      	movs	r2, #1
 801a4b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a4b4:	7c7a      	ldrb	r2, [r7, #17]
 801a4b6:	496d      	ldr	r1, [pc, #436]	; (801a66c <etharp_query+0x268>)
 801a4b8:	4613      	mov	r3, r2
 801a4ba:	005b      	lsls	r3, r3, #1
 801a4bc:	4413      	add	r3, r2
 801a4be:	00db      	lsls	r3, r3, #3
 801a4c0:	440b      	add	r3, r1
 801a4c2:	3308      	adds	r3, #8
 801a4c4:	68fa      	ldr	r2, [r7, #12]
 801a4c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a4c8:	7c7a      	ldrb	r2, [r7, #17]
 801a4ca:	4968      	ldr	r1, [pc, #416]	; (801a66c <etharp_query+0x268>)
 801a4cc:	4613      	mov	r3, r2
 801a4ce:	005b      	lsls	r3, r3, #1
 801a4d0:	4413      	add	r3, r2
 801a4d2:	00db      	lsls	r3, r3, #3
 801a4d4:	440b      	add	r3, r1
 801a4d6:	3314      	adds	r3, #20
 801a4d8:	781b      	ldrb	r3, [r3, #0]
 801a4da:	2b01      	cmp	r3, #1
 801a4dc:	d011      	beq.n	801a502 <etharp_query+0xfe>
 801a4de:	7c7a      	ldrb	r2, [r7, #17]
 801a4e0:	4962      	ldr	r1, [pc, #392]	; (801a66c <etharp_query+0x268>)
 801a4e2:	4613      	mov	r3, r2
 801a4e4:	005b      	lsls	r3, r3, #1
 801a4e6:	4413      	add	r3, r2
 801a4e8:	00db      	lsls	r3, r3, #3
 801a4ea:	440b      	add	r3, r1
 801a4ec:	3314      	adds	r3, #20
 801a4ee:	781b      	ldrb	r3, [r3, #0]
 801a4f0:	2b01      	cmp	r3, #1
 801a4f2:	d806      	bhi.n	801a502 <etharp_query+0xfe>
 801a4f4:	4b5a      	ldr	r3, [pc, #360]	; (801a660 <etharp_query+0x25c>)
 801a4f6:	f240 32cf 	movw	r2, #975	; 0x3cf
 801a4fa:	495d      	ldr	r1, [pc, #372]	; (801a670 <etharp_query+0x26c>)
 801a4fc:	485a      	ldr	r0, [pc, #360]	; (801a668 <etharp_query+0x264>)
 801a4fe:	f001 fe49 	bl	801c194 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a502:	6a3b      	ldr	r3, [r7, #32]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d102      	bne.n	801a50e <etharp_query+0x10a>
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d10c      	bne.n	801a528 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a50e:	68b9      	ldr	r1, [r7, #8]
 801a510:	68f8      	ldr	r0, [r7, #12]
 801a512:	f000 f963 	bl	801a7dc <etharp_request>
 801a516:	4603      	mov	r3, r0
 801a518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d102      	bne.n	801a528 <etharp_query+0x124>
      return result;
 801a522:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a526:	e097      	b.n	801a658 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d106      	bne.n	801a53c <etharp_query+0x138>
 801a52e:	4b4c      	ldr	r3, [pc, #304]	; (801a660 <etharp_query+0x25c>)
 801a530:	f240 32e1 	movw	r2, #993	; 0x3e1
 801a534:	494f      	ldr	r1, [pc, #316]	; (801a674 <etharp_query+0x270>)
 801a536:	484c      	ldr	r0, [pc, #304]	; (801a668 <etharp_query+0x264>)
 801a538:	f001 fe2c 	bl	801c194 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a53c:	7c7a      	ldrb	r2, [r7, #17]
 801a53e:	494b      	ldr	r1, [pc, #300]	; (801a66c <etharp_query+0x268>)
 801a540:	4613      	mov	r3, r2
 801a542:	005b      	lsls	r3, r3, #1
 801a544:	4413      	add	r3, r2
 801a546:	00db      	lsls	r3, r3, #3
 801a548:	440b      	add	r3, r1
 801a54a:	3314      	adds	r3, #20
 801a54c:	781b      	ldrb	r3, [r3, #0]
 801a54e:	2b01      	cmp	r3, #1
 801a550:	d918      	bls.n	801a584 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a552:	4a49      	ldr	r2, [pc, #292]	; (801a678 <etharp_query+0x274>)
 801a554:	7c7b      	ldrb	r3, [r7, #17]
 801a556:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a558:	7c7a      	ldrb	r2, [r7, #17]
 801a55a:	4613      	mov	r3, r2
 801a55c:	005b      	lsls	r3, r3, #1
 801a55e:	4413      	add	r3, r2
 801a560:	00db      	lsls	r3, r3, #3
 801a562:	3308      	adds	r3, #8
 801a564:	4a41      	ldr	r2, [pc, #260]	; (801a66c <etharp_query+0x268>)
 801a566:	4413      	add	r3, r2
 801a568:	1d1a      	adds	r2, r3, #4
 801a56a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a56e:	9300      	str	r3, [sp, #0]
 801a570:	4613      	mov	r3, r2
 801a572:	697a      	ldr	r2, [r7, #20]
 801a574:	6879      	ldr	r1, [r7, #4]
 801a576:	68f8      	ldr	r0, [r7, #12]
 801a578:	f001 fc68 	bl	801be4c <ethernet_output>
 801a57c:	4603      	mov	r3, r0
 801a57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a582:	e067      	b.n	801a654 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a584:	7c7a      	ldrb	r2, [r7, #17]
 801a586:	4939      	ldr	r1, [pc, #228]	; (801a66c <etharp_query+0x268>)
 801a588:	4613      	mov	r3, r2
 801a58a:	005b      	lsls	r3, r3, #1
 801a58c:	4413      	add	r3, r2
 801a58e:	00db      	lsls	r3, r3, #3
 801a590:	440b      	add	r3, r1
 801a592:	3314      	adds	r3, #20
 801a594:	781b      	ldrb	r3, [r3, #0]
 801a596:	2b01      	cmp	r3, #1
 801a598:	d15c      	bne.n	801a654 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a59a:	2300      	movs	r3, #0
 801a59c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a5a2:	e01c      	b.n	801a5de <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a5a4:	69fb      	ldr	r3, [r7, #28]
 801a5a6:	895a      	ldrh	r2, [r3, #10]
 801a5a8:	69fb      	ldr	r3, [r7, #28]
 801a5aa:	891b      	ldrh	r3, [r3, #8]
 801a5ac:	429a      	cmp	r2, r3
 801a5ae:	d10a      	bne.n	801a5c6 <etharp_query+0x1c2>
 801a5b0:	69fb      	ldr	r3, [r7, #28]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d006      	beq.n	801a5c6 <etharp_query+0x1c2>
 801a5b8:	4b29      	ldr	r3, [pc, #164]	; (801a660 <etharp_query+0x25c>)
 801a5ba:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801a5be:	492f      	ldr	r1, [pc, #188]	; (801a67c <etharp_query+0x278>)
 801a5c0:	4829      	ldr	r0, [pc, #164]	; (801a668 <etharp_query+0x264>)
 801a5c2:	f001 fde7 	bl	801c194 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a5c6:	69fb      	ldr	r3, [r7, #28]
 801a5c8:	7b1b      	ldrb	r3, [r3, #12]
 801a5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d002      	beq.n	801a5d8 <etharp_query+0x1d4>
        copy_needed = 1;
 801a5d2:	2301      	movs	r3, #1
 801a5d4:	61bb      	str	r3, [r7, #24]
        break;
 801a5d6:	e005      	b.n	801a5e4 <etharp_query+0x1e0>
      }
      p = p->next;
 801a5d8:	69fb      	ldr	r3, [r7, #28]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d1df      	bne.n	801a5a4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801a5e4:	69bb      	ldr	r3, [r7, #24]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d007      	beq.n	801a5fa <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a5ea:	687a      	ldr	r2, [r7, #4]
 801a5ec:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a5f0:	200e      	movs	r0, #14
 801a5f2:	f7f8 fdf9 	bl	80131e8 <pbuf_clone>
 801a5f6:	61f8      	str	r0, [r7, #28]
 801a5f8:	e004      	b.n	801a604 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a5fe:	69f8      	ldr	r0, [r7, #28]
 801a600:	f7f8 fc30 	bl	8012e64 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a604:	69fb      	ldr	r3, [r7, #28]
 801a606:	2b00      	cmp	r3, #0
 801a608:	d021      	beq.n	801a64e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a60a:	7c7a      	ldrb	r2, [r7, #17]
 801a60c:	4917      	ldr	r1, [pc, #92]	; (801a66c <etharp_query+0x268>)
 801a60e:	4613      	mov	r3, r2
 801a610:	005b      	lsls	r3, r3, #1
 801a612:	4413      	add	r3, r2
 801a614:	00db      	lsls	r3, r3, #3
 801a616:	440b      	add	r3, r1
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d00a      	beq.n	801a634 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a61e:	7c7a      	ldrb	r2, [r7, #17]
 801a620:	4912      	ldr	r1, [pc, #72]	; (801a66c <etharp_query+0x268>)
 801a622:	4613      	mov	r3, r2
 801a624:	005b      	lsls	r3, r3, #1
 801a626:	4413      	add	r3, r2
 801a628:	00db      	lsls	r3, r3, #3
 801a62a:	440b      	add	r3, r1
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	4618      	mov	r0, r3
 801a630:	f7f8 fb72 	bl	8012d18 <pbuf_free>
      }
      arp_table[i].q = p;
 801a634:	7c7a      	ldrb	r2, [r7, #17]
 801a636:	490d      	ldr	r1, [pc, #52]	; (801a66c <etharp_query+0x268>)
 801a638:	4613      	mov	r3, r2
 801a63a:	005b      	lsls	r3, r3, #1
 801a63c:	4413      	add	r3, r2
 801a63e:	00db      	lsls	r3, r3, #3
 801a640:	440b      	add	r3, r1
 801a642:	69fa      	ldr	r2, [r7, #28]
 801a644:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a646:	2300      	movs	r3, #0
 801a648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a64c:	e002      	b.n	801a654 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a64e:	23ff      	movs	r3, #255	; 0xff
 801a650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a654:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a658:	4618      	mov	r0, r3
 801a65a:	3728      	adds	r7, #40	; 0x28
 801a65c:	46bd      	mov	sp, r7
 801a65e:	bd80      	pop	{r7, pc}
 801a660:	0801f6dc 	.word	0x0801f6dc
 801a664:	0801f888 	.word	0x0801f888
 801a668:	0801f754 	.word	0x0801f754
 801a66c:	2000455c 	.word	0x2000455c
 801a670:	0801f898 	.word	0x0801f898
 801a674:	0801f87c 	.word	0x0801f87c
 801a678:	2000464c 	.word	0x2000464c
 801a67c:	0801f8c0 	.word	0x0801f8c0

0801a680 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b08a      	sub	sp, #40	; 0x28
 801a684:	af02      	add	r7, sp, #8
 801a686:	60f8      	str	r0, [r7, #12]
 801a688:	60b9      	str	r1, [r7, #8]
 801a68a:	607a      	str	r2, [r7, #4]
 801a68c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a68e:	2300      	movs	r3, #0
 801a690:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	2b00      	cmp	r3, #0
 801a696:	d106      	bne.n	801a6a6 <etharp_raw+0x26>
 801a698:	4b3a      	ldr	r3, [pc, #232]	; (801a784 <etharp_raw+0x104>)
 801a69a:	f240 4257 	movw	r2, #1111	; 0x457
 801a69e:	493a      	ldr	r1, [pc, #232]	; (801a788 <etharp_raw+0x108>)
 801a6a0:	483a      	ldr	r0, [pc, #232]	; (801a78c <etharp_raw+0x10c>)
 801a6a2:	f001 fd77 	bl	801c194 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a6a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a6aa:	211c      	movs	r1, #28
 801a6ac:	200e      	movs	r0, #14
 801a6ae:	f7f8 f853 	bl	8012758 <pbuf_alloc>
 801a6b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a6b4:	69bb      	ldr	r3, [r7, #24]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d102      	bne.n	801a6c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a6ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a6be:	e05d      	b.n	801a77c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a6c0:	69bb      	ldr	r3, [r7, #24]
 801a6c2:	895b      	ldrh	r3, [r3, #10]
 801a6c4:	2b1b      	cmp	r3, #27
 801a6c6:	d806      	bhi.n	801a6d6 <etharp_raw+0x56>
 801a6c8:	4b2e      	ldr	r3, [pc, #184]	; (801a784 <etharp_raw+0x104>)
 801a6ca:	f240 4263 	movw	r2, #1123	; 0x463
 801a6ce:	4930      	ldr	r1, [pc, #192]	; (801a790 <etharp_raw+0x110>)
 801a6d0:	482e      	ldr	r0, [pc, #184]	; (801a78c <etharp_raw+0x10c>)
 801a6d2:	f001 fd5f 	bl	801c194 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a6d6:	69bb      	ldr	r3, [r7, #24]
 801a6d8:	685b      	ldr	r3, [r3, #4]
 801a6da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a6dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a6de:	4618      	mov	r0, r3
 801a6e0:	f7f6 ff3c 	bl	801155c <lwip_htons>
 801a6e4:	4603      	mov	r3, r0
 801a6e6:	461a      	mov	r2, r3
 801a6e8:	697b      	ldr	r3, [r7, #20]
 801a6ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a6f2:	2b06      	cmp	r3, #6
 801a6f4:	d006      	beq.n	801a704 <etharp_raw+0x84>
 801a6f6:	4b23      	ldr	r3, [pc, #140]	; (801a784 <etharp_raw+0x104>)
 801a6f8:	f240 426a 	movw	r2, #1130	; 0x46a
 801a6fc:	4925      	ldr	r1, [pc, #148]	; (801a794 <etharp_raw+0x114>)
 801a6fe:	4823      	ldr	r0, [pc, #140]	; (801a78c <etharp_raw+0x10c>)
 801a700:	f001 fd48 	bl	801c194 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	3308      	adds	r3, #8
 801a708:	2206      	movs	r2, #6
 801a70a:	6839      	ldr	r1, [r7, #0]
 801a70c:	4618      	mov	r0, r3
 801a70e:	f001 fd2e 	bl	801c16e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a712:	697b      	ldr	r3, [r7, #20]
 801a714:	3312      	adds	r3, #18
 801a716:	2206      	movs	r2, #6
 801a718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a71a:	4618      	mov	r0, r3
 801a71c:	f001 fd27 	bl	801c16e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a720:	697b      	ldr	r3, [r7, #20]
 801a722:	330e      	adds	r3, #14
 801a724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a726:	6812      	ldr	r2, [r2, #0]
 801a728:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a72a:	697b      	ldr	r3, [r7, #20]
 801a72c:	3318      	adds	r3, #24
 801a72e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a730:	6812      	ldr	r2, [r2, #0]
 801a732:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a734:	697b      	ldr	r3, [r7, #20]
 801a736:	2200      	movs	r2, #0
 801a738:	701a      	strb	r2, [r3, #0]
 801a73a:	2200      	movs	r2, #0
 801a73c:	f042 0201 	orr.w	r2, r2, #1
 801a740:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a742:	697b      	ldr	r3, [r7, #20]
 801a744:	2200      	movs	r2, #0
 801a746:	f042 0208 	orr.w	r2, r2, #8
 801a74a:	709a      	strb	r2, [r3, #2]
 801a74c:	2200      	movs	r2, #0
 801a74e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	2206      	movs	r2, #6
 801a754:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a756:	697b      	ldr	r3, [r7, #20]
 801a758:	2204      	movs	r2, #4
 801a75a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a75c:	f640 0306 	movw	r3, #2054	; 0x806
 801a760:	9300      	str	r3, [sp, #0]
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	68ba      	ldr	r2, [r7, #8]
 801a766:	69b9      	ldr	r1, [r7, #24]
 801a768:	68f8      	ldr	r0, [r7, #12]
 801a76a:	f001 fb6f 	bl	801be4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a76e:	69b8      	ldr	r0, [r7, #24]
 801a770:	f7f8 fad2 	bl	8012d18 <pbuf_free>
  p = NULL;
 801a774:	2300      	movs	r3, #0
 801a776:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a778:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a77c:	4618      	mov	r0, r3
 801a77e:	3720      	adds	r7, #32
 801a780:	46bd      	mov	sp, r7
 801a782:	bd80      	pop	{r7, pc}
 801a784:	0801f6dc 	.word	0x0801f6dc
 801a788:	0801f82c 	.word	0x0801f82c
 801a78c:	0801f754 	.word	0x0801f754
 801a790:	0801f8dc 	.word	0x0801f8dc
 801a794:	0801f910 	.word	0x0801f910

0801a798 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b088      	sub	sp, #32
 801a79c:	af04      	add	r7, sp, #16
 801a79e:	60f8      	str	r0, [r7, #12]
 801a7a0:	60b9      	str	r1, [r7, #8]
 801a7a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a7b4:	2201      	movs	r2, #1
 801a7b6:	9203      	str	r2, [sp, #12]
 801a7b8:	68ba      	ldr	r2, [r7, #8]
 801a7ba:	9202      	str	r2, [sp, #8]
 801a7bc:	4a06      	ldr	r2, [pc, #24]	; (801a7d8 <etharp_request_dst+0x40>)
 801a7be:	9201      	str	r2, [sp, #4]
 801a7c0:	9300      	str	r3, [sp, #0]
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	687a      	ldr	r2, [r7, #4]
 801a7c6:	68f8      	ldr	r0, [r7, #12]
 801a7c8:	f7ff ff5a 	bl	801a680 <etharp_raw>
 801a7cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a7ce:	4618      	mov	r0, r3
 801a7d0:	3710      	adds	r7, #16
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}
 801a7d6:	bf00      	nop
 801a7d8:	08030a14 	.word	0x08030a14

0801a7dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	b082      	sub	sp, #8
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
 801a7e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a7e6:	4a05      	ldr	r2, [pc, #20]	; (801a7fc <etharp_request+0x20>)
 801a7e8:	6839      	ldr	r1, [r7, #0]
 801a7ea:	6878      	ldr	r0, [r7, #4]
 801a7ec:	f7ff ffd4 	bl	801a798 <etharp_request_dst>
 801a7f0:	4603      	mov	r3, r0
}
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	3708      	adds	r7, #8
 801a7f6:	46bd      	mov	sp, r7
 801a7f8:	bd80      	pop	{r7, pc}
 801a7fa:	bf00      	nop
 801a7fc:	08030a0c 	.word	0x08030a0c

0801a800 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b08e      	sub	sp, #56	; 0x38
 801a804:	af04      	add	r7, sp, #16
 801a806:	6078      	str	r0, [r7, #4]
 801a808:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a80a:	4b79      	ldr	r3, [pc, #484]	; (801a9f0 <icmp_input+0x1f0>)
 801a80c:	689b      	ldr	r3, [r3, #8]
 801a80e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	f003 030f 	and.w	r3, r3, #15
 801a818:	b2db      	uxtb	r3, r3
 801a81a:	009b      	lsls	r3, r3, #2
 801a81c:	b2db      	uxtb	r3, r3
 801a81e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a822:	2b13      	cmp	r3, #19
 801a824:	f240 80cd 	bls.w	801a9c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	895b      	ldrh	r3, [r3, #10]
 801a82c:	2b03      	cmp	r3, #3
 801a82e:	f240 80ca 	bls.w	801a9c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	685b      	ldr	r3, [r3, #4]
 801a836:	781b      	ldrb	r3, [r3, #0]
 801a838:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a83c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a840:	2b00      	cmp	r3, #0
 801a842:	f000 80b7 	beq.w	801a9b4 <icmp_input+0x1b4>
 801a846:	2b08      	cmp	r3, #8
 801a848:	f040 80b7 	bne.w	801a9ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a84c:	4b69      	ldr	r3, [pc, #420]	; (801a9f4 <icmp_input+0x1f4>)
 801a84e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a850:	4b67      	ldr	r3, [pc, #412]	; (801a9f0 <icmp_input+0x1f0>)
 801a852:	695b      	ldr	r3, [r3, #20]
 801a854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a858:	2be0      	cmp	r3, #224	; 0xe0
 801a85a:	f000 80bb 	beq.w	801a9d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a85e:	4b64      	ldr	r3, [pc, #400]	; (801a9f0 <icmp_input+0x1f0>)
 801a860:	695a      	ldr	r2, [r3, #20]
 801a862:	4b63      	ldr	r3, [pc, #396]	; (801a9f0 <icmp_input+0x1f0>)
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	4619      	mov	r1, r3
 801a868:	4610      	mov	r0, r2
 801a86a:	f000 fbeb 	bl	801b044 <ip4_addr_isbroadcast_u32>
 801a86e:	4603      	mov	r3, r0
 801a870:	2b00      	cmp	r3, #0
 801a872:	f040 80b1 	bne.w	801a9d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	891b      	ldrh	r3, [r3, #8]
 801a87a:	2b07      	cmp	r3, #7
 801a87c:	f240 80a5 	bls.w	801a9ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a882:	330e      	adds	r3, #14
 801a884:	4619      	mov	r1, r3
 801a886:	6878      	ldr	r0, [r7, #4]
 801a888:	f7f8 f9b0 	bl	8012bec <pbuf_add_header>
 801a88c:	4603      	mov	r3, r0
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d04b      	beq.n	801a92a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	891a      	ldrh	r2, [r3, #8]
 801a896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a898:	4413      	add	r3, r2
 801a89a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	891b      	ldrh	r3, [r3, #8]
 801a8a0:	8b7a      	ldrh	r2, [r7, #26]
 801a8a2:	429a      	cmp	r2, r3
 801a8a4:	f0c0 809a 	bcc.w	801a9dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a8a8:	8b7b      	ldrh	r3, [r7, #26]
 801a8aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a8ae:	4619      	mov	r1, r3
 801a8b0:	200e      	movs	r0, #14
 801a8b2:	f7f7 ff51 	bl	8012758 <pbuf_alloc>
 801a8b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a8b8:	697b      	ldr	r3, [r7, #20]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	f000 8090 	beq.w	801a9e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a8c0:	697b      	ldr	r3, [r7, #20]
 801a8c2:	895b      	ldrh	r3, [r3, #10]
 801a8c4:	461a      	mov	r2, r3
 801a8c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a8c8:	3308      	adds	r3, #8
 801a8ca:	429a      	cmp	r2, r3
 801a8cc:	d203      	bcs.n	801a8d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a8ce:	6978      	ldr	r0, [r7, #20]
 801a8d0:	f7f8 fa22 	bl	8012d18 <pbuf_free>
          goto icmperr;
 801a8d4:	e085      	b.n	801a9e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a8d6:	697b      	ldr	r3, [r7, #20]
 801a8d8:	685b      	ldr	r3, [r3, #4]
 801a8da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a8dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a8de:	4618      	mov	r0, r3
 801a8e0:	f001 fc45 	bl	801c16e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a8e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a8e6:	4619      	mov	r1, r3
 801a8e8:	6978      	ldr	r0, [r7, #20]
 801a8ea:	f7f8 f98f 	bl	8012c0c <pbuf_remove_header>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d009      	beq.n	801a908 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a8f4:	4b40      	ldr	r3, [pc, #256]	; (801a9f8 <icmp_input+0x1f8>)
 801a8f6:	22b6      	movs	r2, #182	; 0xb6
 801a8f8:	4940      	ldr	r1, [pc, #256]	; (801a9fc <icmp_input+0x1fc>)
 801a8fa:	4841      	ldr	r0, [pc, #260]	; (801aa00 <icmp_input+0x200>)
 801a8fc:	f001 fc4a 	bl	801c194 <iprintf>
          pbuf_free(r);
 801a900:	6978      	ldr	r0, [r7, #20]
 801a902:	f7f8 fa09 	bl	8012d18 <pbuf_free>
          goto icmperr;
 801a906:	e06c      	b.n	801a9e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a908:	6879      	ldr	r1, [r7, #4]
 801a90a:	6978      	ldr	r0, [r7, #20]
 801a90c:	f7f8 fb28 	bl	8012f60 <pbuf_copy>
 801a910:	4603      	mov	r3, r0
 801a912:	2b00      	cmp	r3, #0
 801a914:	d003      	beq.n	801a91e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a916:	6978      	ldr	r0, [r7, #20]
 801a918:	f7f8 f9fe 	bl	8012d18 <pbuf_free>
          goto icmperr;
 801a91c:	e061      	b.n	801a9e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801a91e:	6878      	ldr	r0, [r7, #4]
 801a920:	f7f8 f9fa 	bl	8012d18 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a924:	697b      	ldr	r3, [r7, #20]
 801a926:	607b      	str	r3, [r7, #4]
 801a928:	e00f      	b.n	801a94a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a92a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a92c:	330e      	adds	r3, #14
 801a92e:	4619      	mov	r1, r3
 801a930:	6878      	ldr	r0, [r7, #4]
 801a932:	f7f8 f96b 	bl	8012c0c <pbuf_remove_header>
 801a936:	4603      	mov	r3, r0
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d006      	beq.n	801a94a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a93c:	4b2e      	ldr	r3, [pc, #184]	; (801a9f8 <icmp_input+0x1f8>)
 801a93e:	22c7      	movs	r2, #199	; 0xc7
 801a940:	4930      	ldr	r1, [pc, #192]	; (801aa04 <icmp_input+0x204>)
 801a942:	482f      	ldr	r0, [pc, #188]	; (801aa00 <icmp_input+0x200>)
 801a944:	f001 fc26 	bl	801c194 <iprintf>
          goto icmperr;
 801a948:	e04b      	b.n	801a9e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a952:	4619      	mov	r1, r3
 801a954:	6878      	ldr	r0, [r7, #4]
 801a956:	f7f8 f949 	bl	8012bec <pbuf_add_header>
 801a95a:	4603      	mov	r3, r0
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d12b      	bne.n	801a9b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	685b      	ldr	r3, [r3, #4]
 801a964:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a966:	69fb      	ldr	r3, [r7, #28]
 801a968:	681a      	ldr	r2, [r3, #0]
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a96e:	4b20      	ldr	r3, [pc, #128]	; (801a9f0 <icmp_input+0x1f0>)
 801a970:	691a      	ldr	r2, [r3, #16]
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a976:	693b      	ldr	r3, [r7, #16]
 801a978:	2200      	movs	r2, #0
 801a97a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801a97c:	693b      	ldr	r3, [r7, #16]
 801a97e:	2200      	movs	r2, #0
 801a980:	709a      	strb	r2, [r3, #2]
 801a982:	2200      	movs	r2, #0
 801a984:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	22ff      	movs	r2, #255	; 0xff
 801a98a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	2200      	movs	r2, #0
 801a990:	729a      	strb	r2, [r3, #10]
 801a992:	2200      	movs	r2, #0
 801a994:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a996:	683b      	ldr	r3, [r7, #0]
 801a998:	9302      	str	r3, [sp, #8]
 801a99a:	2301      	movs	r3, #1
 801a99c:	9301      	str	r3, [sp, #4]
 801a99e:	2300      	movs	r3, #0
 801a9a0:	9300      	str	r3, [sp, #0]
 801a9a2:	23ff      	movs	r3, #255	; 0xff
 801a9a4:	2200      	movs	r2, #0
 801a9a6:	69f9      	ldr	r1, [r7, #28]
 801a9a8:	6878      	ldr	r0, [r7, #4]
 801a9aa:	f000 fa73 	bl	801ae94 <ip4_output_if>
 801a9ae:	4603      	mov	r3, r0
 801a9b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a9b2:	e001      	b.n	801a9b8 <icmp_input+0x1b8>
      break;
 801a9b4:	bf00      	nop
 801a9b6:	e000      	b.n	801a9ba <icmp_input+0x1ba>
      break;
 801a9b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a9ba:	6878      	ldr	r0, [r7, #4]
 801a9bc:	f7f8 f9ac 	bl	8012d18 <pbuf_free>
  return;
 801a9c0:	e013      	b.n	801a9ea <icmp_input+0x1ea>
    goto lenerr;
 801a9c2:	bf00      	nop
 801a9c4:	e002      	b.n	801a9cc <icmp_input+0x1cc>
    goto lenerr;
 801a9c6:	bf00      	nop
 801a9c8:	e000      	b.n	801a9cc <icmp_input+0x1cc>
        goto lenerr;
 801a9ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a9cc:	6878      	ldr	r0, [r7, #4]
 801a9ce:	f7f8 f9a3 	bl	8012d18 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a9d2:	e00a      	b.n	801a9ea <icmp_input+0x1ea>
        goto icmperr;
 801a9d4:	bf00      	nop
 801a9d6:	e004      	b.n	801a9e2 <icmp_input+0x1e2>
        goto icmperr;
 801a9d8:	bf00      	nop
 801a9da:	e002      	b.n	801a9e2 <icmp_input+0x1e2>
          goto icmperr;
 801a9dc:	bf00      	nop
 801a9de:	e000      	b.n	801a9e2 <icmp_input+0x1e2>
          goto icmperr;
 801a9e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a9e2:	6878      	ldr	r0, [r7, #4]
 801a9e4:	f7f8 f998 	bl	8012d18 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a9e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a9ea:	3728      	adds	r7, #40	; 0x28
 801a9ec:	46bd      	mov	sp, r7
 801a9ee:	bd80      	pop	{r7, pc}
 801a9f0:	20007c2c 	.word	0x20007c2c
 801a9f4:	20007c40 	.word	0x20007c40
 801a9f8:	0801f954 	.word	0x0801f954
 801a9fc:	0801f98c 	.word	0x0801f98c
 801aa00:	0801f9c4 	.word	0x0801f9c4
 801aa04:	0801f9ec 	.word	0x0801f9ec

0801aa08 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b082      	sub	sp, #8
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
 801aa10:	460b      	mov	r3, r1
 801aa12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801aa14:	78fb      	ldrb	r3, [r7, #3]
 801aa16:	461a      	mov	r2, r3
 801aa18:	2103      	movs	r1, #3
 801aa1a:	6878      	ldr	r0, [r7, #4]
 801aa1c:	f000 f814 	bl	801aa48 <icmp_send_response>
}
 801aa20:	bf00      	nop
 801aa22:	3708      	adds	r7, #8
 801aa24:	46bd      	mov	sp, r7
 801aa26:	bd80      	pop	{r7, pc}

0801aa28 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b082      	sub	sp, #8
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	6078      	str	r0, [r7, #4]
 801aa30:	460b      	mov	r3, r1
 801aa32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801aa34:	78fb      	ldrb	r3, [r7, #3]
 801aa36:	461a      	mov	r2, r3
 801aa38:	210b      	movs	r1, #11
 801aa3a:	6878      	ldr	r0, [r7, #4]
 801aa3c:	f000 f804 	bl	801aa48 <icmp_send_response>
}
 801aa40:	bf00      	nop
 801aa42:	3708      	adds	r7, #8
 801aa44:	46bd      	mov	sp, r7
 801aa46:	bd80      	pop	{r7, pc}

0801aa48 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b08c      	sub	sp, #48	; 0x30
 801aa4c:	af04      	add	r7, sp, #16
 801aa4e:	6078      	str	r0, [r7, #4]
 801aa50:	460b      	mov	r3, r1
 801aa52:	70fb      	strb	r3, [r7, #3]
 801aa54:	4613      	mov	r3, r2
 801aa56:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801aa58:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa5c:	2124      	movs	r1, #36	; 0x24
 801aa5e:	2022      	movs	r0, #34	; 0x22
 801aa60:	f7f7 fe7a 	bl	8012758 <pbuf_alloc>
 801aa64:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801aa66:	69fb      	ldr	r3, [r7, #28]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d04c      	beq.n	801ab06 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801aa6c:	69fb      	ldr	r3, [r7, #28]
 801aa6e:	895b      	ldrh	r3, [r3, #10]
 801aa70:	2b23      	cmp	r3, #35	; 0x23
 801aa72:	d806      	bhi.n	801aa82 <icmp_send_response+0x3a>
 801aa74:	4b26      	ldr	r3, [pc, #152]	; (801ab10 <icmp_send_response+0xc8>)
 801aa76:	f240 1269 	movw	r2, #361	; 0x169
 801aa7a:	4926      	ldr	r1, [pc, #152]	; (801ab14 <icmp_send_response+0xcc>)
 801aa7c:	4826      	ldr	r0, [pc, #152]	; (801ab18 <icmp_send_response+0xd0>)
 801aa7e:	f001 fb89 	bl	801c194 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	685b      	ldr	r3, [r3, #4]
 801aa86:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801aa88:	69fb      	ldr	r3, [r7, #28]
 801aa8a:	685b      	ldr	r3, [r3, #4]
 801aa8c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801aa8e:	697b      	ldr	r3, [r7, #20]
 801aa90:	78fa      	ldrb	r2, [r7, #3]
 801aa92:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801aa94:	697b      	ldr	r3, [r7, #20]
 801aa96:	78ba      	ldrb	r2, [r7, #2]
 801aa98:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801aa9a:	697b      	ldr	r3, [r7, #20]
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	711a      	strb	r2, [r3, #4]
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801aaa4:	697b      	ldr	r3, [r7, #20]
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	719a      	strb	r2, [r3, #6]
 801aaaa:	2200      	movs	r2, #0
 801aaac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801aaae:	69fb      	ldr	r3, [r7, #28]
 801aab0:	685b      	ldr	r3, [r3, #4]
 801aab2:	f103 0008 	add.w	r0, r3, #8
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	685b      	ldr	r3, [r3, #4]
 801aaba:	221c      	movs	r2, #28
 801aabc:	4619      	mov	r1, r3
 801aabe:	f001 fb56 	bl	801c16e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801aac2:	69bb      	ldr	r3, [r7, #24]
 801aac4:	68db      	ldr	r3, [r3, #12]
 801aac6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801aac8:	f107 030c 	add.w	r3, r7, #12
 801aacc:	4618      	mov	r0, r3
 801aace:	f000 f825 	bl	801ab1c <ip4_route>
 801aad2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801aad4:	693b      	ldr	r3, [r7, #16]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d011      	beq.n	801aafe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801aada:	697b      	ldr	r3, [r7, #20]
 801aadc:	2200      	movs	r2, #0
 801aade:	709a      	strb	r2, [r3, #2]
 801aae0:	2200      	movs	r2, #0
 801aae2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801aae4:	f107 020c 	add.w	r2, r7, #12
 801aae8:	693b      	ldr	r3, [r7, #16]
 801aaea:	9302      	str	r3, [sp, #8]
 801aaec:	2301      	movs	r3, #1
 801aaee:	9301      	str	r3, [sp, #4]
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	9300      	str	r3, [sp, #0]
 801aaf4:	23ff      	movs	r3, #255	; 0xff
 801aaf6:	2100      	movs	r1, #0
 801aaf8:	69f8      	ldr	r0, [r7, #28]
 801aafa:	f000 f9cb 	bl	801ae94 <ip4_output_if>
  }
  pbuf_free(q);
 801aafe:	69f8      	ldr	r0, [r7, #28]
 801ab00:	f7f8 f90a 	bl	8012d18 <pbuf_free>
 801ab04:	e000      	b.n	801ab08 <icmp_send_response+0xc0>
    return;
 801ab06:	bf00      	nop
}
 801ab08:	3720      	adds	r7, #32
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bd80      	pop	{r7, pc}
 801ab0e:	bf00      	nop
 801ab10:	0801f954 	.word	0x0801f954
 801ab14:	0801fa20 	.word	0x0801fa20
 801ab18:	0801f9c4 	.word	0x0801f9c4

0801ab1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ab1c:	b480      	push	{r7}
 801ab1e:	b085      	sub	sp, #20
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ab24:	4b33      	ldr	r3, [pc, #204]	; (801abf4 <ip4_route+0xd8>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	60fb      	str	r3, [r7, #12]
 801ab2a:	e036      	b.n	801ab9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ab32:	f003 0301 	and.w	r3, r3, #1
 801ab36:	b2db      	uxtb	r3, r3
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d02b      	beq.n	801ab94 <ip4_route+0x78>
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ab42:	089b      	lsrs	r3, r3, #2
 801ab44:	f003 0301 	and.w	r3, r3, #1
 801ab48:	b2db      	uxtb	r3, r3
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d022      	beq.n	801ab94 <ip4_route+0x78>
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	3304      	adds	r3, #4
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d01d      	beq.n	801ab94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	681a      	ldr	r2, [r3, #0]
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	3304      	adds	r3, #4
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	405a      	eors	r2, r3
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	3308      	adds	r3, #8
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	4013      	ands	r3, r2
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d101      	bne.n	801ab74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	e038      	b.n	801abe6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ab7a:	f003 0302 	and.w	r3, r3, #2
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d108      	bne.n	801ab94 <ip4_route+0x78>
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681a      	ldr	r2, [r3, #0]
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	330c      	adds	r3, #12
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	429a      	cmp	r2, r3
 801ab8e:	d101      	bne.n	801ab94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	e028      	b.n	801abe6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	60fb      	str	r3, [r7, #12]
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d1c5      	bne.n	801ab2c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801aba0:	4b15      	ldr	r3, [pc, #84]	; (801abf8 <ip4_route+0xdc>)
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d01a      	beq.n	801abde <ip4_route+0xc2>
 801aba8:	4b13      	ldr	r3, [pc, #76]	; (801abf8 <ip4_route+0xdc>)
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801abb0:	f003 0301 	and.w	r3, r3, #1
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d012      	beq.n	801abde <ip4_route+0xc2>
 801abb8:	4b0f      	ldr	r3, [pc, #60]	; (801abf8 <ip4_route+0xdc>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801abc0:	f003 0304 	and.w	r3, r3, #4
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d00a      	beq.n	801abde <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801abc8:	4b0b      	ldr	r3, [pc, #44]	; (801abf8 <ip4_route+0xdc>)
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	3304      	adds	r3, #4
 801abce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	d004      	beq.n	801abde <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	b2db      	uxtb	r3, r3
 801abda:	2b7f      	cmp	r3, #127	; 0x7f
 801abdc:	d101      	bne.n	801abe2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801abde:	2300      	movs	r3, #0
 801abe0:	e001      	b.n	801abe6 <ip4_route+0xca>
  }

  return netif_default;
 801abe2:	4b05      	ldr	r3, [pc, #20]	; (801abf8 <ip4_route+0xdc>)
 801abe4:	681b      	ldr	r3, [r3, #0]
}
 801abe6:	4618      	mov	r0, r3
 801abe8:	3714      	adds	r7, #20
 801abea:	46bd      	mov	sp, r7
 801abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf0:	4770      	bx	lr
 801abf2:	bf00      	nop
 801abf4:	2000b330 	.word	0x2000b330
 801abf8:	2000b334 	.word	0x2000b334

0801abfc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b082      	sub	sp, #8
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ac0a:	f003 0301 	and.w	r3, r3, #1
 801ac0e:	b2db      	uxtb	r3, r3
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d016      	beq.n	801ac42 <ip4_input_accept+0x46>
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	3304      	adds	r3, #4
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d011      	beq.n	801ac42 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ac1e:	4b0b      	ldr	r3, [pc, #44]	; (801ac4c <ip4_input_accept+0x50>)
 801ac20:	695a      	ldr	r2, [r3, #20]
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	3304      	adds	r3, #4
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	d008      	beq.n	801ac3e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ac2c:	4b07      	ldr	r3, [pc, #28]	; (801ac4c <ip4_input_accept+0x50>)
 801ac2e:	695b      	ldr	r3, [r3, #20]
 801ac30:	6879      	ldr	r1, [r7, #4]
 801ac32:	4618      	mov	r0, r3
 801ac34:	f000 fa06 	bl	801b044 <ip4_addr_isbroadcast_u32>
 801ac38:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d001      	beq.n	801ac42 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ac3e:	2301      	movs	r3, #1
 801ac40:	e000      	b.n	801ac44 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ac42:	2300      	movs	r3, #0
}
 801ac44:	4618      	mov	r0, r3
 801ac46:	3708      	adds	r7, #8
 801ac48:	46bd      	mov	sp, r7
 801ac4a:	bd80      	pop	{r7, pc}
 801ac4c:	20007c2c 	.word	0x20007c2c

0801ac50 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ac50:	b580      	push	{r7, lr}
 801ac52:	b086      	sub	sp, #24
 801ac54:	af00      	add	r7, sp, #0
 801ac56:	6078      	str	r0, [r7, #4]
 801ac58:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	685b      	ldr	r3, [r3, #4]
 801ac5e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801ac60:	697b      	ldr	r3, [r7, #20]
 801ac62:	781b      	ldrb	r3, [r3, #0]
 801ac64:	091b      	lsrs	r3, r3, #4
 801ac66:	b2db      	uxtb	r3, r3
 801ac68:	2b04      	cmp	r3, #4
 801ac6a:	d004      	beq.n	801ac76 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ac6c:	6878      	ldr	r0, [r7, #4]
 801ac6e:	f7f8 f853 	bl	8012d18 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ac72:	2300      	movs	r3, #0
 801ac74:	e105      	b.n	801ae82 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ac76:	697b      	ldr	r3, [r7, #20]
 801ac78:	781b      	ldrb	r3, [r3, #0]
 801ac7a:	f003 030f 	and.w	r3, r3, #15
 801ac7e:	b2db      	uxtb	r3, r3
 801ac80:	009b      	lsls	r3, r3, #2
 801ac82:	b2db      	uxtb	r3, r3
 801ac84:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ac86:	697b      	ldr	r3, [r7, #20]
 801ac88:	885b      	ldrh	r3, [r3, #2]
 801ac8a:	b29b      	uxth	r3, r3
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	f7f6 fc65 	bl	801155c <lwip_htons>
 801ac92:	4603      	mov	r3, r0
 801ac94:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	891b      	ldrh	r3, [r3, #8]
 801ac9a:	89ba      	ldrh	r2, [r7, #12]
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	d204      	bcs.n	801acaa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801aca0:	89bb      	ldrh	r3, [r7, #12]
 801aca2:	4619      	mov	r1, r3
 801aca4:	6878      	ldr	r0, [r7, #4]
 801aca6:	f7f7 feb1 	bl	8012a0c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	895b      	ldrh	r3, [r3, #10]
 801acae:	89fa      	ldrh	r2, [r7, #14]
 801acb0:	429a      	cmp	r2, r3
 801acb2:	d807      	bhi.n	801acc4 <ip4_input+0x74>
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	891b      	ldrh	r3, [r3, #8]
 801acb8:	89ba      	ldrh	r2, [r7, #12]
 801acba:	429a      	cmp	r2, r3
 801acbc:	d802      	bhi.n	801acc4 <ip4_input+0x74>
 801acbe:	89fb      	ldrh	r3, [r7, #14]
 801acc0:	2b13      	cmp	r3, #19
 801acc2:	d804      	bhi.n	801acce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801acc4:	6878      	ldr	r0, [r7, #4]
 801acc6:	f7f8 f827 	bl	8012d18 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801acca:	2300      	movs	r3, #0
 801accc:	e0d9      	b.n	801ae82 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801acce:	697b      	ldr	r3, [r7, #20]
 801acd0:	691b      	ldr	r3, [r3, #16]
 801acd2:	4a6e      	ldr	r2, [pc, #440]	; (801ae8c <ip4_input+0x23c>)
 801acd4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801acd6:	697b      	ldr	r3, [r7, #20]
 801acd8:	68db      	ldr	r3, [r3, #12]
 801acda:	4a6c      	ldr	r2, [pc, #432]	; (801ae8c <ip4_input+0x23c>)
 801acdc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801acde:	4b6b      	ldr	r3, [pc, #428]	; (801ae8c <ip4_input+0x23c>)
 801ace0:	695b      	ldr	r3, [r3, #20]
 801ace2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ace6:	2be0      	cmp	r3, #224	; 0xe0
 801ace8:	d112      	bne.n	801ad10 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801acea:	683b      	ldr	r3, [r7, #0]
 801acec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801acf0:	f003 0301 	and.w	r3, r3, #1
 801acf4:	b2db      	uxtb	r3, r3
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d007      	beq.n	801ad0a <ip4_input+0xba>
 801acfa:	683b      	ldr	r3, [r7, #0]
 801acfc:	3304      	adds	r3, #4
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d002      	beq.n	801ad0a <ip4_input+0xba>
      netif = inp;
 801ad04:	683b      	ldr	r3, [r7, #0]
 801ad06:	613b      	str	r3, [r7, #16]
 801ad08:	e02a      	b.n	801ad60 <ip4_input+0x110>
    } else {
      netif = NULL;
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	613b      	str	r3, [r7, #16]
 801ad0e:	e027      	b.n	801ad60 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ad10:	6838      	ldr	r0, [r7, #0]
 801ad12:	f7ff ff73 	bl	801abfc <ip4_input_accept>
 801ad16:	4603      	mov	r3, r0
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d002      	beq.n	801ad22 <ip4_input+0xd2>
      netif = inp;
 801ad1c:	683b      	ldr	r3, [r7, #0]
 801ad1e:	613b      	str	r3, [r7, #16]
 801ad20:	e01e      	b.n	801ad60 <ip4_input+0x110>
    } else {
      netif = NULL;
 801ad22:	2300      	movs	r3, #0
 801ad24:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ad26:	4b59      	ldr	r3, [pc, #356]	; (801ae8c <ip4_input+0x23c>)
 801ad28:	695b      	ldr	r3, [r3, #20]
 801ad2a:	b2db      	uxtb	r3, r3
 801ad2c:	2b7f      	cmp	r3, #127	; 0x7f
 801ad2e:	d017      	beq.n	801ad60 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ad30:	4b57      	ldr	r3, [pc, #348]	; (801ae90 <ip4_input+0x240>)
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	613b      	str	r3, [r7, #16]
 801ad36:	e00e      	b.n	801ad56 <ip4_input+0x106>
          if (netif == inp) {
 801ad38:	693a      	ldr	r2, [r7, #16]
 801ad3a:	683b      	ldr	r3, [r7, #0]
 801ad3c:	429a      	cmp	r2, r3
 801ad3e:	d006      	beq.n	801ad4e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801ad40:	6938      	ldr	r0, [r7, #16]
 801ad42:	f7ff ff5b 	bl	801abfc <ip4_input_accept>
 801ad46:	4603      	mov	r3, r0
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d108      	bne.n	801ad5e <ip4_input+0x10e>
 801ad4c:	e000      	b.n	801ad50 <ip4_input+0x100>
            continue;
 801ad4e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ad50:	693b      	ldr	r3, [r7, #16]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	613b      	str	r3, [r7, #16]
 801ad56:	693b      	ldr	r3, [r7, #16]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d1ed      	bne.n	801ad38 <ip4_input+0xe8>
 801ad5c:	e000      	b.n	801ad60 <ip4_input+0x110>
            break;
 801ad5e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ad60:	4b4a      	ldr	r3, [pc, #296]	; (801ae8c <ip4_input+0x23c>)
 801ad62:	691b      	ldr	r3, [r3, #16]
 801ad64:	6839      	ldr	r1, [r7, #0]
 801ad66:	4618      	mov	r0, r3
 801ad68:	f000 f96c 	bl	801b044 <ip4_addr_isbroadcast_u32>
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d105      	bne.n	801ad7e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ad72:	4b46      	ldr	r3, [pc, #280]	; (801ae8c <ip4_input+0x23c>)
 801ad74:	691b      	ldr	r3, [r3, #16]
 801ad76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ad7a:	2be0      	cmp	r3, #224	; 0xe0
 801ad7c:	d104      	bne.n	801ad88 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ad7e:	6878      	ldr	r0, [r7, #4]
 801ad80:	f7f7 ffca 	bl	8012d18 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801ad84:	2300      	movs	r3, #0
 801ad86:	e07c      	b.n	801ae82 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801ad88:	693b      	ldr	r3, [r7, #16]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d104      	bne.n	801ad98 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801ad8e:	6878      	ldr	r0, [r7, #4]
 801ad90:	f7f7 ffc2 	bl	8012d18 <pbuf_free>
    return ERR_OK;
 801ad94:	2300      	movs	r3, #0
 801ad96:	e074      	b.n	801ae82 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ad98:	697b      	ldr	r3, [r7, #20]
 801ad9a:	88db      	ldrh	r3, [r3, #6]
 801ad9c:	b29b      	uxth	r3, r3
 801ad9e:	461a      	mov	r2, r3
 801ada0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801ada4:	4013      	ands	r3, r2
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d00b      	beq.n	801adc2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801adaa:	6878      	ldr	r0, [r7, #4]
 801adac:	f000 fc90 	bl	801b6d0 <ip4_reass>
 801adb0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d101      	bne.n	801adbc <ip4_input+0x16c>
      return ERR_OK;
 801adb8:	2300      	movs	r3, #0
 801adba:	e062      	b.n	801ae82 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	685b      	ldr	r3, [r3, #4]
 801adc0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801adc2:	4a32      	ldr	r2, [pc, #200]	; (801ae8c <ip4_input+0x23c>)
 801adc4:	693b      	ldr	r3, [r7, #16]
 801adc6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801adc8:	4a30      	ldr	r2, [pc, #192]	; (801ae8c <ip4_input+0x23c>)
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801adce:	4a2f      	ldr	r2, [pc, #188]	; (801ae8c <ip4_input+0x23c>)
 801add0:	697b      	ldr	r3, [r7, #20]
 801add2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801add4:	697b      	ldr	r3, [r7, #20]
 801add6:	781b      	ldrb	r3, [r3, #0]
 801add8:	f003 030f 	and.w	r3, r3, #15
 801addc:	b2db      	uxtb	r3, r3
 801adde:	009b      	lsls	r3, r3, #2
 801ade0:	b2db      	uxtb	r3, r3
 801ade2:	b29a      	uxth	r2, r3
 801ade4:	4b29      	ldr	r3, [pc, #164]	; (801ae8c <ip4_input+0x23c>)
 801ade6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ade8:	89fb      	ldrh	r3, [r7, #14]
 801adea:	4619      	mov	r1, r3
 801adec:	6878      	ldr	r0, [r7, #4]
 801adee:	f7f7 ff0d 	bl	8012c0c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801adf2:	697b      	ldr	r3, [r7, #20]
 801adf4:	7a5b      	ldrb	r3, [r3, #9]
 801adf6:	2b06      	cmp	r3, #6
 801adf8:	d009      	beq.n	801ae0e <ip4_input+0x1be>
 801adfa:	2b11      	cmp	r3, #17
 801adfc:	d002      	beq.n	801ae04 <ip4_input+0x1b4>
 801adfe:	2b01      	cmp	r3, #1
 801ae00:	d00a      	beq.n	801ae18 <ip4_input+0x1c8>
 801ae02:	e00e      	b.n	801ae22 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ae04:	6839      	ldr	r1, [r7, #0]
 801ae06:	6878      	ldr	r0, [r7, #4]
 801ae08:	f7fe fc6a 	bl	80196e0 <udp_input>
        break;
 801ae0c:	e026      	b.n	801ae5c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ae0e:	6839      	ldr	r1, [r7, #0]
 801ae10:	6878      	ldr	r0, [r7, #4]
 801ae12:	f7fa f84f 	bl	8014eb4 <tcp_input>
        break;
 801ae16:	e021      	b.n	801ae5c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ae18:	6839      	ldr	r1, [r7, #0]
 801ae1a:	6878      	ldr	r0, [r7, #4]
 801ae1c:	f7ff fcf0 	bl	801a800 <icmp_input>
        break;
 801ae20:	e01c      	b.n	801ae5c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ae22:	4b1a      	ldr	r3, [pc, #104]	; (801ae8c <ip4_input+0x23c>)
 801ae24:	695b      	ldr	r3, [r3, #20]
 801ae26:	6939      	ldr	r1, [r7, #16]
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f000 f90b 	bl	801b044 <ip4_addr_isbroadcast_u32>
 801ae2e:	4603      	mov	r3, r0
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d10f      	bne.n	801ae54 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ae34:	4b15      	ldr	r3, [pc, #84]	; (801ae8c <ip4_input+0x23c>)
 801ae36:	695b      	ldr	r3, [r3, #20]
 801ae38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ae3c:	2be0      	cmp	r3, #224	; 0xe0
 801ae3e:	d009      	beq.n	801ae54 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ae40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ae44:	4619      	mov	r1, r3
 801ae46:	6878      	ldr	r0, [r7, #4]
 801ae48:	f7f7 ff53 	bl	8012cf2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ae4c:	2102      	movs	r1, #2
 801ae4e:	6878      	ldr	r0, [r7, #4]
 801ae50:	f7ff fdda 	bl	801aa08 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ae54:	6878      	ldr	r0, [r7, #4]
 801ae56:	f7f7 ff5f 	bl	8012d18 <pbuf_free>
        break;
 801ae5a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ae5c:	4b0b      	ldr	r3, [pc, #44]	; (801ae8c <ip4_input+0x23c>)
 801ae5e:	2200      	movs	r2, #0
 801ae60:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ae62:	4b0a      	ldr	r3, [pc, #40]	; (801ae8c <ip4_input+0x23c>)
 801ae64:	2200      	movs	r2, #0
 801ae66:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ae68:	4b08      	ldr	r3, [pc, #32]	; (801ae8c <ip4_input+0x23c>)
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ae6e:	4b07      	ldr	r3, [pc, #28]	; (801ae8c <ip4_input+0x23c>)
 801ae70:	2200      	movs	r2, #0
 801ae72:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ae74:	4b05      	ldr	r3, [pc, #20]	; (801ae8c <ip4_input+0x23c>)
 801ae76:	2200      	movs	r2, #0
 801ae78:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801ae7a:	4b04      	ldr	r3, [pc, #16]	; (801ae8c <ip4_input+0x23c>)
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801ae80:	2300      	movs	r3, #0
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	3718      	adds	r7, #24
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}
 801ae8a:	bf00      	nop
 801ae8c:	20007c2c 	.word	0x20007c2c
 801ae90:	2000b330 	.word	0x2000b330

0801ae94 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b08a      	sub	sp, #40	; 0x28
 801ae98:	af04      	add	r7, sp, #16
 801ae9a:	60f8      	str	r0, [r7, #12]
 801ae9c:	60b9      	str	r1, [r7, #8]
 801ae9e:	607a      	str	r2, [r7, #4]
 801aea0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801aea2:	68bb      	ldr	r3, [r7, #8]
 801aea4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d009      	beq.n	801aec0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d003      	beq.n	801aeba <ip4_output_if+0x26>
 801aeb2:	68bb      	ldr	r3, [r7, #8]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d102      	bne.n	801aec0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aebc:	3304      	adds	r3, #4
 801aebe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801aec0:	78fa      	ldrb	r2, [r7, #3]
 801aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aec4:	9302      	str	r3, [sp, #8]
 801aec6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aeca:	9301      	str	r3, [sp, #4]
 801aecc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801aed0:	9300      	str	r3, [sp, #0]
 801aed2:	4613      	mov	r3, r2
 801aed4:	687a      	ldr	r2, [r7, #4]
 801aed6:	6979      	ldr	r1, [r7, #20]
 801aed8:	68f8      	ldr	r0, [r7, #12]
 801aeda:	f000 f805 	bl	801aee8 <ip4_output_if_src>
 801aede:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801aee0:	4618      	mov	r0, r3
 801aee2:	3718      	adds	r7, #24
 801aee4:	46bd      	mov	sp, r7
 801aee6:	bd80      	pop	{r7, pc}

0801aee8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801aee8:	b580      	push	{r7, lr}
 801aeea:	b088      	sub	sp, #32
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	60f8      	str	r0, [r7, #12]
 801aef0:	60b9      	str	r1, [r7, #8]
 801aef2:	607a      	str	r2, [r7, #4]
 801aef4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	7b9b      	ldrb	r3, [r3, #14]
 801aefa:	2b01      	cmp	r3, #1
 801aefc:	d006      	beq.n	801af0c <ip4_output_if_src+0x24>
 801aefe:	4b4b      	ldr	r3, [pc, #300]	; (801b02c <ip4_output_if_src+0x144>)
 801af00:	f44f 7255 	mov.w	r2, #852	; 0x354
 801af04:	494a      	ldr	r1, [pc, #296]	; (801b030 <ip4_output_if_src+0x148>)
 801af06:	484b      	ldr	r0, [pc, #300]	; (801b034 <ip4_output_if_src+0x14c>)
 801af08:	f001 f944 	bl	801c194 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d060      	beq.n	801afd4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801af12:	2314      	movs	r3, #20
 801af14:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801af16:	2114      	movs	r1, #20
 801af18:	68f8      	ldr	r0, [r7, #12]
 801af1a:	f7f7 fe67 	bl	8012bec <pbuf_add_header>
 801af1e:	4603      	mov	r3, r0
 801af20:	2b00      	cmp	r3, #0
 801af22:	d002      	beq.n	801af2a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801af24:	f06f 0301 	mvn.w	r3, #1
 801af28:	e07c      	b.n	801b024 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	685b      	ldr	r3, [r3, #4]
 801af2e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	895b      	ldrh	r3, [r3, #10]
 801af34:	2b13      	cmp	r3, #19
 801af36:	d806      	bhi.n	801af46 <ip4_output_if_src+0x5e>
 801af38:	4b3c      	ldr	r3, [pc, #240]	; (801b02c <ip4_output_if_src+0x144>)
 801af3a:	f240 3289 	movw	r2, #905	; 0x389
 801af3e:	493e      	ldr	r1, [pc, #248]	; (801b038 <ip4_output_if_src+0x150>)
 801af40:	483c      	ldr	r0, [pc, #240]	; (801b034 <ip4_output_if_src+0x14c>)
 801af42:	f001 f927 	bl	801c194 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801af46:	69fb      	ldr	r3, [r7, #28]
 801af48:	78fa      	ldrb	r2, [r7, #3]
 801af4a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801af4c:	69fb      	ldr	r3, [r7, #28]
 801af4e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801af52:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	681a      	ldr	r2, [r3, #0]
 801af58:	69fb      	ldr	r3, [r7, #28]
 801af5a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801af5c:	8b7b      	ldrh	r3, [r7, #26]
 801af5e:	089b      	lsrs	r3, r3, #2
 801af60:	b29b      	uxth	r3, r3
 801af62:	b2db      	uxtb	r3, r3
 801af64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af68:	b2da      	uxtb	r2, r3
 801af6a:	69fb      	ldr	r3, [r7, #28]
 801af6c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801af6e:	69fb      	ldr	r3, [r7, #28]
 801af70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801af74:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801af76:	68fb      	ldr	r3, [r7, #12]
 801af78:	891b      	ldrh	r3, [r3, #8]
 801af7a:	4618      	mov	r0, r3
 801af7c:	f7f6 faee 	bl	801155c <lwip_htons>
 801af80:	4603      	mov	r3, r0
 801af82:	461a      	mov	r2, r3
 801af84:	69fb      	ldr	r3, [r7, #28]
 801af86:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801af88:	69fb      	ldr	r3, [r7, #28]
 801af8a:	2200      	movs	r2, #0
 801af8c:	719a      	strb	r2, [r3, #6]
 801af8e:	2200      	movs	r2, #0
 801af90:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801af92:	4b2a      	ldr	r3, [pc, #168]	; (801b03c <ip4_output_if_src+0x154>)
 801af94:	881b      	ldrh	r3, [r3, #0]
 801af96:	4618      	mov	r0, r3
 801af98:	f7f6 fae0 	bl	801155c <lwip_htons>
 801af9c:	4603      	mov	r3, r0
 801af9e:	461a      	mov	r2, r3
 801afa0:	69fb      	ldr	r3, [r7, #28]
 801afa2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801afa4:	4b25      	ldr	r3, [pc, #148]	; (801b03c <ip4_output_if_src+0x154>)
 801afa6:	881b      	ldrh	r3, [r3, #0]
 801afa8:	3301      	adds	r3, #1
 801afaa:	b29a      	uxth	r2, r3
 801afac:	4b23      	ldr	r3, [pc, #140]	; (801b03c <ip4_output_if_src+0x154>)
 801afae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d104      	bne.n	801afc0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801afb6:	4b22      	ldr	r3, [pc, #136]	; (801b040 <ip4_output_if_src+0x158>)
 801afb8:	681a      	ldr	r2, [r3, #0]
 801afba:	69fb      	ldr	r3, [r7, #28]
 801afbc:	60da      	str	r2, [r3, #12]
 801afbe:	e003      	b.n	801afc8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801afc0:	68bb      	ldr	r3, [r7, #8]
 801afc2:	681a      	ldr	r2, [r3, #0]
 801afc4:	69fb      	ldr	r3, [r7, #28]
 801afc6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801afc8:	69fb      	ldr	r3, [r7, #28]
 801afca:	2200      	movs	r2, #0
 801afcc:	729a      	strb	r2, [r3, #10]
 801afce:	2200      	movs	r2, #0
 801afd0:	72da      	strb	r2, [r3, #11]
 801afd2:	e00f      	b.n	801aff4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	895b      	ldrh	r3, [r3, #10]
 801afd8:	2b13      	cmp	r3, #19
 801afda:	d802      	bhi.n	801afe2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801afdc:	f06f 0301 	mvn.w	r3, #1
 801afe0:	e020      	b.n	801b024 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	685b      	ldr	r3, [r3, #4]
 801afe6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801afe8:	69fb      	ldr	r3, [r7, #28]
 801afea:	691b      	ldr	r3, [r3, #16]
 801afec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801afee:	f107 0314 	add.w	r3, r7, #20
 801aff2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d00c      	beq.n	801b016 <ip4_output_if_src+0x12e>
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	891a      	ldrh	r2, [r3, #8]
 801b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b004:	429a      	cmp	r2, r3
 801b006:	d906      	bls.n	801b016 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b008:	687a      	ldr	r2, [r7, #4]
 801b00a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b00c:	68f8      	ldr	r0, [r7, #12]
 801b00e:	f000 fd4b 	bl	801baa8 <ip4_frag>
 801b012:	4603      	mov	r3, r0
 801b014:	e006      	b.n	801b024 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b018:	695b      	ldr	r3, [r3, #20]
 801b01a:	687a      	ldr	r2, [r7, #4]
 801b01c:	68f9      	ldr	r1, [r7, #12]
 801b01e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b020:	4798      	blx	r3
 801b022:	4603      	mov	r3, r0
}
 801b024:	4618      	mov	r0, r3
 801b026:	3720      	adds	r7, #32
 801b028:	46bd      	mov	sp, r7
 801b02a:	bd80      	pop	{r7, pc}
 801b02c:	0801fa4c 	.word	0x0801fa4c
 801b030:	0801fa80 	.word	0x0801fa80
 801b034:	0801fa8c 	.word	0x0801fa8c
 801b038:	0801fab4 	.word	0x0801fab4
 801b03c:	2000464e 	.word	0x2000464e
 801b040:	08030a08 	.word	0x08030a08

0801b044 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b044:	b480      	push	{r7}
 801b046:	b085      	sub	sp, #20
 801b048:	af00      	add	r7, sp, #0
 801b04a:	6078      	str	r0, [r7, #4]
 801b04c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b058:	d002      	beq.n	801b060 <ip4_addr_isbroadcast_u32+0x1c>
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d101      	bne.n	801b064 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b060:	2301      	movs	r3, #1
 801b062:	e02a      	b.n	801b0ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b064:	683b      	ldr	r3, [r7, #0]
 801b066:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b06a:	f003 0302 	and.w	r3, r3, #2
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d101      	bne.n	801b076 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b072:	2300      	movs	r3, #0
 801b074:	e021      	b.n	801b0ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b076:	683b      	ldr	r3, [r7, #0]
 801b078:	3304      	adds	r3, #4
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	687a      	ldr	r2, [r7, #4]
 801b07e:	429a      	cmp	r2, r3
 801b080:	d101      	bne.n	801b086 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b082:	2300      	movs	r3, #0
 801b084:	e019      	b.n	801b0ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b086:	68fa      	ldr	r2, [r7, #12]
 801b088:	683b      	ldr	r3, [r7, #0]
 801b08a:	3304      	adds	r3, #4
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	405a      	eors	r2, r3
 801b090:	683b      	ldr	r3, [r7, #0]
 801b092:	3308      	adds	r3, #8
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	4013      	ands	r3, r2
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d10d      	bne.n	801b0b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b09c:	683b      	ldr	r3, [r7, #0]
 801b09e:	3308      	adds	r3, #8
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	43da      	mvns	r2, r3
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	3308      	adds	r3, #8
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b0b0:	429a      	cmp	r2, r3
 801b0b2:	d101      	bne.n	801b0b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b0b4:	2301      	movs	r3, #1
 801b0b6:	e000      	b.n	801b0ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b0b8:	2300      	movs	r3, #0
  }
}
 801b0ba:	4618      	mov	r0, r3
 801b0bc:	3714      	adds	r7, #20
 801b0be:	46bd      	mov	sp, r7
 801b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c4:	4770      	bx	lr
	...

0801b0c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b084      	sub	sp, #16
 801b0cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b0ce:	2300      	movs	r3, #0
 801b0d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b0d2:	4b12      	ldr	r3, [pc, #72]	; (801b11c <ip_reass_tmr+0x54>)
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b0d8:	e018      	b.n	801b10c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	7fdb      	ldrb	r3, [r3, #31]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d00b      	beq.n	801b0fa <ip_reass_tmr+0x32>
      r->timer--;
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	7fdb      	ldrb	r3, [r3, #31]
 801b0e6:	3b01      	subs	r3, #1
 801b0e8:	b2da      	uxtb	r2, r3
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	60fb      	str	r3, [r7, #12]
 801b0f8:	e008      	b.n	801b10c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b0fa:	68fb      	ldr	r3, [r7, #12]
 801b0fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b104:	68b9      	ldr	r1, [r7, #8]
 801b106:	6878      	ldr	r0, [r7, #4]
 801b108:	f000 f80a 	bl	801b120 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d1e3      	bne.n	801b0da <ip_reass_tmr+0x12>
    }
  }
}
 801b112:	bf00      	nop
 801b114:	3710      	adds	r7, #16
 801b116:	46bd      	mov	sp, r7
 801b118:	bd80      	pop	{r7, pc}
 801b11a:	bf00      	nop
 801b11c:	20004650 	.word	0x20004650

0801b120 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b120:	b580      	push	{r7, lr}
 801b122:	b088      	sub	sp, #32
 801b124:	af00      	add	r7, sp, #0
 801b126:	6078      	str	r0, [r7, #4]
 801b128:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b12a:	2300      	movs	r3, #0
 801b12c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b12e:	683a      	ldr	r2, [r7, #0]
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	429a      	cmp	r2, r3
 801b134:	d105      	bne.n	801b142 <ip_reass_free_complete_datagram+0x22>
 801b136:	4b45      	ldr	r3, [pc, #276]	; (801b24c <ip_reass_free_complete_datagram+0x12c>)
 801b138:	22ab      	movs	r2, #171	; 0xab
 801b13a:	4945      	ldr	r1, [pc, #276]	; (801b250 <ip_reass_free_complete_datagram+0x130>)
 801b13c:	4845      	ldr	r0, [pc, #276]	; (801b254 <ip_reass_free_complete_datagram+0x134>)
 801b13e:	f001 f829 	bl	801c194 <iprintf>
  if (prev != NULL) {
 801b142:	683b      	ldr	r3, [r7, #0]
 801b144:	2b00      	cmp	r3, #0
 801b146:	d00a      	beq.n	801b15e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b148:	683b      	ldr	r3, [r7, #0]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	687a      	ldr	r2, [r7, #4]
 801b14e:	429a      	cmp	r2, r3
 801b150:	d005      	beq.n	801b15e <ip_reass_free_complete_datagram+0x3e>
 801b152:	4b3e      	ldr	r3, [pc, #248]	; (801b24c <ip_reass_free_complete_datagram+0x12c>)
 801b154:	22ad      	movs	r2, #173	; 0xad
 801b156:	4940      	ldr	r1, [pc, #256]	; (801b258 <ip_reass_free_complete_datagram+0x138>)
 801b158:	483e      	ldr	r0, [pc, #248]	; (801b254 <ip_reass_free_complete_datagram+0x134>)
 801b15a:	f001 f81b 	bl	801c194 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	685b      	ldr	r3, [r3, #4]
 801b162:	685b      	ldr	r3, [r3, #4]
 801b164:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b166:	697b      	ldr	r3, [r7, #20]
 801b168:	889b      	ldrh	r3, [r3, #4]
 801b16a:	b29b      	uxth	r3, r3
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d12a      	bne.n	801b1c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	685b      	ldr	r3, [r3, #4]
 801b174:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b176:	697b      	ldr	r3, [r7, #20]
 801b178:	681a      	ldr	r2, [r3, #0]
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b17e:	69bb      	ldr	r3, [r7, #24]
 801b180:	6858      	ldr	r0, [r3, #4]
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	3308      	adds	r3, #8
 801b186:	2214      	movs	r2, #20
 801b188:	4619      	mov	r1, r3
 801b18a:	f000 fff0 	bl	801c16e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b18e:	2101      	movs	r1, #1
 801b190:	69b8      	ldr	r0, [r7, #24]
 801b192:	f7ff fc49 	bl	801aa28 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b196:	69b8      	ldr	r0, [r7, #24]
 801b198:	f7f7 fe4c 	bl	8012e34 <pbuf_clen>
 801b19c:	4603      	mov	r3, r0
 801b19e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b1a0:	8bfa      	ldrh	r2, [r7, #30]
 801b1a2:	8a7b      	ldrh	r3, [r7, #18]
 801b1a4:	4413      	add	r3, r2
 801b1a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b1aa:	db05      	blt.n	801b1b8 <ip_reass_free_complete_datagram+0x98>
 801b1ac:	4b27      	ldr	r3, [pc, #156]	; (801b24c <ip_reass_free_complete_datagram+0x12c>)
 801b1ae:	22bc      	movs	r2, #188	; 0xbc
 801b1b0:	492a      	ldr	r1, [pc, #168]	; (801b25c <ip_reass_free_complete_datagram+0x13c>)
 801b1b2:	4828      	ldr	r0, [pc, #160]	; (801b254 <ip_reass_free_complete_datagram+0x134>)
 801b1b4:	f000 ffee 	bl	801c194 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b1b8:	8bfa      	ldrh	r2, [r7, #30]
 801b1ba:	8a7b      	ldrh	r3, [r7, #18]
 801b1bc:	4413      	add	r3, r2
 801b1be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b1c0:	69b8      	ldr	r0, [r7, #24]
 801b1c2:	f7f7 fda9 	bl	8012d18 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	685b      	ldr	r3, [r3, #4]
 801b1ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b1cc:	e01f      	b.n	801b20e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b1ce:	69bb      	ldr	r3, [r7, #24]
 801b1d0:	685b      	ldr	r3, [r3, #4]
 801b1d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b1d4:	69bb      	ldr	r3, [r7, #24]
 801b1d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b1d8:	697b      	ldr	r3, [r7, #20]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b1de:	68f8      	ldr	r0, [r7, #12]
 801b1e0:	f7f7 fe28 	bl	8012e34 <pbuf_clen>
 801b1e4:	4603      	mov	r3, r0
 801b1e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b1e8:	8bfa      	ldrh	r2, [r7, #30]
 801b1ea:	8a7b      	ldrh	r3, [r7, #18]
 801b1ec:	4413      	add	r3, r2
 801b1ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b1f2:	db05      	blt.n	801b200 <ip_reass_free_complete_datagram+0xe0>
 801b1f4:	4b15      	ldr	r3, [pc, #84]	; (801b24c <ip_reass_free_complete_datagram+0x12c>)
 801b1f6:	22cc      	movs	r2, #204	; 0xcc
 801b1f8:	4918      	ldr	r1, [pc, #96]	; (801b25c <ip_reass_free_complete_datagram+0x13c>)
 801b1fa:	4816      	ldr	r0, [pc, #88]	; (801b254 <ip_reass_free_complete_datagram+0x134>)
 801b1fc:	f000 ffca 	bl	801c194 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b200:	8bfa      	ldrh	r2, [r7, #30]
 801b202:	8a7b      	ldrh	r3, [r7, #18]
 801b204:	4413      	add	r3, r2
 801b206:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b208:	68f8      	ldr	r0, [r7, #12]
 801b20a:	f7f7 fd85 	bl	8012d18 <pbuf_free>
  while (p != NULL) {
 801b20e:	69bb      	ldr	r3, [r7, #24]
 801b210:	2b00      	cmp	r3, #0
 801b212:	d1dc      	bne.n	801b1ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b214:	6839      	ldr	r1, [r7, #0]
 801b216:	6878      	ldr	r0, [r7, #4]
 801b218:	f000 f8c2 	bl	801b3a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b21c:	4b10      	ldr	r3, [pc, #64]	; (801b260 <ip_reass_free_complete_datagram+0x140>)
 801b21e:	881b      	ldrh	r3, [r3, #0]
 801b220:	8bfa      	ldrh	r2, [r7, #30]
 801b222:	429a      	cmp	r2, r3
 801b224:	d905      	bls.n	801b232 <ip_reass_free_complete_datagram+0x112>
 801b226:	4b09      	ldr	r3, [pc, #36]	; (801b24c <ip_reass_free_complete_datagram+0x12c>)
 801b228:	22d2      	movs	r2, #210	; 0xd2
 801b22a:	490e      	ldr	r1, [pc, #56]	; (801b264 <ip_reass_free_complete_datagram+0x144>)
 801b22c:	4809      	ldr	r0, [pc, #36]	; (801b254 <ip_reass_free_complete_datagram+0x134>)
 801b22e:	f000 ffb1 	bl	801c194 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b232:	4b0b      	ldr	r3, [pc, #44]	; (801b260 <ip_reass_free_complete_datagram+0x140>)
 801b234:	881a      	ldrh	r2, [r3, #0]
 801b236:	8bfb      	ldrh	r3, [r7, #30]
 801b238:	1ad3      	subs	r3, r2, r3
 801b23a:	b29a      	uxth	r2, r3
 801b23c:	4b08      	ldr	r3, [pc, #32]	; (801b260 <ip_reass_free_complete_datagram+0x140>)
 801b23e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b240:	8bfb      	ldrh	r3, [r7, #30]
}
 801b242:	4618      	mov	r0, r3
 801b244:	3720      	adds	r7, #32
 801b246:	46bd      	mov	sp, r7
 801b248:	bd80      	pop	{r7, pc}
 801b24a:	bf00      	nop
 801b24c:	0801fae4 	.word	0x0801fae4
 801b250:	0801fb20 	.word	0x0801fb20
 801b254:	0801fb2c 	.word	0x0801fb2c
 801b258:	0801fb54 	.word	0x0801fb54
 801b25c:	0801fb68 	.word	0x0801fb68
 801b260:	20004654 	.word	0x20004654
 801b264:	0801fb88 	.word	0x0801fb88

0801b268 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b268:	b580      	push	{r7, lr}
 801b26a:	b08a      	sub	sp, #40	; 0x28
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	6078      	str	r0, [r7, #4]
 801b270:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b272:	2300      	movs	r3, #0
 801b274:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b276:	2300      	movs	r3, #0
 801b278:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b27a:	2300      	movs	r3, #0
 801b27c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b27e:	2300      	movs	r3, #0
 801b280:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b282:	2300      	movs	r3, #0
 801b284:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b286:	4b28      	ldr	r3, [pc, #160]	; (801b328 <ip_reass_remove_oldest_datagram+0xc0>)
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b28c:	e030      	b.n	801b2f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b290:	695a      	ldr	r2, [r3, #20]
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	68db      	ldr	r3, [r3, #12]
 801b296:	429a      	cmp	r2, r3
 801b298:	d10c      	bne.n	801b2b4 <ip_reass_remove_oldest_datagram+0x4c>
 801b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b29c:	699a      	ldr	r2, [r3, #24]
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	691b      	ldr	r3, [r3, #16]
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	d106      	bne.n	801b2b4 <ip_reass_remove_oldest_datagram+0x4c>
 801b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a8:	899a      	ldrh	r2, [r3, #12]
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	889b      	ldrh	r3, [r3, #4]
 801b2ae:	b29b      	uxth	r3, r3
 801b2b0:	429a      	cmp	r2, r3
 801b2b2:	d014      	beq.n	801b2de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b2b4:	693b      	ldr	r3, [r7, #16]
 801b2b6:	3301      	adds	r3, #1
 801b2b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b2ba:	6a3b      	ldr	r3, [r7, #32]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d104      	bne.n	801b2ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b2c4:	69fb      	ldr	r3, [r7, #28]
 801b2c6:	61bb      	str	r3, [r7, #24]
 801b2c8:	e009      	b.n	801b2de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2cc:	7fda      	ldrb	r2, [r3, #31]
 801b2ce:	6a3b      	ldr	r3, [r7, #32]
 801b2d0:	7fdb      	ldrb	r3, [r3, #31]
 801b2d2:	429a      	cmp	r2, r3
 801b2d4:	d803      	bhi.n	801b2de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b2da:	69fb      	ldr	r3, [r7, #28]
 801b2dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d001      	beq.n	801b2ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d1cb      	bne.n	801b28e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b2f6:	6a3b      	ldr	r3, [r7, #32]
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d008      	beq.n	801b30e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b2fc:	69b9      	ldr	r1, [r7, #24]
 801b2fe:	6a38      	ldr	r0, [r7, #32]
 801b300:	f7ff ff0e 	bl	801b120 <ip_reass_free_complete_datagram>
 801b304:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b306:	697a      	ldr	r2, [r7, #20]
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	4413      	add	r3, r2
 801b30c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b30e:	697a      	ldr	r2, [r7, #20]
 801b310:	683b      	ldr	r3, [r7, #0]
 801b312:	429a      	cmp	r2, r3
 801b314:	da02      	bge.n	801b31c <ip_reass_remove_oldest_datagram+0xb4>
 801b316:	693b      	ldr	r3, [r7, #16]
 801b318:	2b01      	cmp	r3, #1
 801b31a:	dcac      	bgt.n	801b276 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b31c:	697b      	ldr	r3, [r7, #20]
}
 801b31e:	4618      	mov	r0, r3
 801b320:	3728      	adds	r7, #40	; 0x28
 801b322:	46bd      	mov	sp, r7
 801b324:	bd80      	pop	{r7, pc}
 801b326:	bf00      	nop
 801b328:	20004650 	.word	0x20004650

0801b32c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b084      	sub	sp, #16
 801b330:	af00      	add	r7, sp, #0
 801b332:	6078      	str	r0, [r7, #4]
 801b334:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b336:	2004      	movs	r0, #4
 801b338:	f7f6 fdfc 	bl	8011f34 <memp_malloc>
 801b33c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	2b00      	cmp	r3, #0
 801b342:	d110      	bne.n	801b366 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b344:	6839      	ldr	r1, [r7, #0]
 801b346:	6878      	ldr	r0, [r7, #4]
 801b348:	f7ff ff8e 	bl	801b268 <ip_reass_remove_oldest_datagram>
 801b34c:	4602      	mov	r2, r0
 801b34e:	683b      	ldr	r3, [r7, #0]
 801b350:	4293      	cmp	r3, r2
 801b352:	dc03      	bgt.n	801b35c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b354:	2004      	movs	r0, #4
 801b356:	f7f6 fded 	bl	8011f34 <memp_malloc>
 801b35a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d101      	bne.n	801b366 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b362:	2300      	movs	r3, #0
 801b364:	e016      	b.n	801b394 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b366:	2220      	movs	r2, #32
 801b368:	2100      	movs	r1, #0
 801b36a:	68f8      	ldr	r0, [r7, #12]
 801b36c:	f000 ff0a 	bl	801c184 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	220f      	movs	r2, #15
 801b374:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b376:	4b09      	ldr	r3, [pc, #36]	; (801b39c <ip_reass_enqueue_new_datagram+0x70>)
 801b378:	681a      	ldr	r2, [r3, #0]
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b37e:	4a07      	ldr	r2, [pc, #28]	; (801b39c <ip_reass_enqueue_new_datagram+0x70>)
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	3308      	adds	r3, #8
 801b388:	2214      	movs	r2, #20
 801b38a:	6879      	ldr	r1, [r7, #4]
 801b38c:	4618      	mov	r0, r3
 801b38e:	f000 feee 	bl	801c16e <memcpy>
  return ipr;
 801b392:	68fb      	ldr	r3, [r7, #12]
}
 801b394:	4618      	mov	r0, r3
 801b396:	3710      	adds	r7, #16
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}
 801b39c:	20004650 	.word	0x20004650

0801b3a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b3aa:	4b10      	ldr	r3, [pc, #64]	; (801b3ec <ip_reass_dequeue_datagram+0x4c>)
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	687a      	ldr	r2, [r7, #4]
 801b3b0:	429a      	cmp	r2, r3
 801b3b2:	d104      	bne.n	801b3be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	4a0c      	ldr	r2, [pc, #48]	; (801b3ec <ip_reass_dequeue_datagram+0x4c>)
 801b3ba:	6013      	str	r3, [r2, #0]
 801b3bc:	e00d      	b.n	801b3da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b3be:	683b      	ldr	r3, [r7, #0]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d106      	bne.n	801b3d2 <ip_reass_dequeue_datagram+0x32>
 801b3c4:	4b0a      	ldr	r3, [pc, #40]	; (801b3f0 <ip_reass_dequeue_datagram+0x50>)
 801b3c6:	f240 1245 	movw	r2, #325	; 0x145
 801b3ca:	490a      	ldr	r1, [pc, #40]	; (801b3f4 <ip_reass_dequeue_datagram+0x54>)
 801b3cc:	480a      	ldr	r0, [pc, #40]	; (801b3f8 <ip_reass_dequeue_datagram+0x58>)
 801b3ce:	f000 fee1 	bl	801c194 <iprintf>
    prev->next = ipr->next;
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	681a      	ldr	r2, [r3, #0]
 801b3d6:	683b      	ldr	r3, [r7, #0]
 801b3d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b3da:	6879      	ldr	r1, [r7, #4]
 801b3dc:	2004      	movs	r0, #4
 801b3de:	f7f6 fdfb 	bl	8011fd8 <memp_free>
}
 801b3e2:	bf00      	nop
 801b3e4:	3708      	adds	r7, #8
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	bd80      	pop	{r7, pc}
 801b3ea:	bf00      	nop
 801b3ec:	20004650 	.word	0x20004650
 801b3f0:	0801fae4 	.word	0x0801fae4
 801b3f4:	0801fbac 	.word	0x0801fbac
 801b3f8:	0801fb2c 	.word	0x0801fb2c

0801b3fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b3fc:	b580      	push	{r7, lr}
 801b3fe:	b08c      	sub	sp, #48	; 0x30
 801b400:	af00      	add	r7, sp, #0
 801b402:	60f8      	str	r0, [r7, #12]
 801b404:	60b9      	str	r1, [r7, #8]
 801b406:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b408:	2300      	movs	r3, #0
 801b40a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b40c:	2301      	movs	r3, #1
 801b40e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b410:	68bb      	ldr	r3, [r7, #8]
 801b412:	685b      	ldr	r3, [r3, #4]
 801b414:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b416:	69fb      	ldr	r3, [r7, #28]
 801b418:	885b      	ldrh	r3, [r3, #2]
 801b41a:	b29b      	uxth	r3, r3
 801b41c:	4618      	mov	r0, r3
 801b41e:	f7f6 f89d 	bl	801155c <lwip_htons>
 801b422:	4603      	mov	r3, r0
 801b424:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b426:	69fb      	ldr	r3, [r7, #28]
 801b428:	781b      	ldrb	r3, [r3, #0]
 801b42a:	f003 030f 	and.w	r3, r3, #15
 801b42e:	b2db      	uxtb	r3, r3
 801b430:	009b      	lsls	r3, r3, #2
 801b432:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b434:	7e7b      	ldrb	r3, [r7, #25]
 801b436:	b29b      	uxth	r3, r3
 801b438:	8b7a      	ldrh	r2, [r7, #26]
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d202      	bcs.n	801b444 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b43e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b442:	e135      	b.n	801b6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b444:	7e7b      	ldrb	r3, [r7, #25]
 801b446:	b29b      	uxth	r3, r3
 801b448:	8b7a      	ldrh	r2, [r7, #26]
 801b44a:	1ad3      	subs	r3, r2, r3
 801b44c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b44e:	69fb      	ldr	r3, [r7, #28]
 801b450:	88db      	ldrh	r3, [r3, #6]
 801b452:	b29b      	uxth	r3, r3
 801b454:	4618      	mov	r0, r3
 801b456:	f7f6 f881 	bl	801155c <lwip_htons>
 801b45a:	4603      	mov	r3, r0
 801b45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b460:	b29b      	uxth	r3, r3
 801b462:	00db      	lsls	r3, r3, #3
 801b464:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b466:	68bb      	ldr	r3, [r7, #8]
 801b468:	685b      	ldr	r3, [r3, #4]
 801b46a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b46e:	2200      	movs	r2, #0
 801b470:	701a      	strb	r2, [r3, #0]
 801b472:	2200      	movs	r2, #0
 801b474:	705a      	strb	r2, [r3, #1]
 801b476:	2200      	movs	r2, #0
 801b478:	709a      	strb	r2, [r3, #2]
 801b47a:	2200      	movs	r2, #0
 801b47c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b480:	8afa      	ldrh	r2, [r7, #22]
 801b482:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b484:	8afa      	ldrh	r2, [r7, #22]
 801b486:	8b7b      	ldrh	r3, [r7, #26]
 801b488:	4413      	add	r3, r2
 801b48a:	b29a      	uxth	r2, r3
 801b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b48e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b492:	88db      	ldrh	r3, [r3, #6]
 801b494:	b29b      	uxth	r3, r3
 801b496:	8afa      	ldrh	r2, [r7, #22]
 801b498:	429a      	cmp	r2, r3
 801b49a:	d902      	bls.n	801b4a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b49c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4a0:	e106      	b.n	801b6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	685b      	ldr	r3, [r3, #4]
 801b4a6:	627b      	str	r3, [r7, #36]	; 0x24
 801b4a8:	e068      	b.n	801b57c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ac:	685b      	ldr	r3, [r3, #4]
 801b4ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4b2:	889b      	ldrh	r3, [r3, #4]
 801b4b4:	b29a      	uxth	r2, r3
 801b4b6:	693b      	ldr	r3, [r7, #16]
 801b4b8:	889b      	ldrh	r3, [r3, #4]
 801b4ba:	b29b      	uxth	r3, r3
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d235      	bcs.n	801b52c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d020      	beq.n	801b50e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ce:	889b      	ldrh	r3, [r3, #4]
 801b4d0:	b29a      	uxth	r2, r3
 801b4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4d4:	88db      	ldrh	r3, [r3, #6]
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d307      	bcc.n	801b4ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4de:	88db      	ldrh	r3, [r3, #6]
 801b4e0:	b29a      	uxth	r2, r3
 801b4e2:	693b      	ldr	r3, [r7, #16]
 801b4e4:	889b      	ldrh	r3, [r3, #4]
 801b4e6:	b29b      	uxth	r3, r3
 801b4e8:	429a      	cmp	r2, r3
 801b4ea:	d902      	bls.n	801b4f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4f0:	e0de      	b.n	801b6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4f4:	68ba      	ldr	r2, [r7, #8]
 801b4f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4fa:	88db      	ldrh	r3, [r3, #6]
 801b4fc:	b29a      	uxth	r2, r3
 801b4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b500:	889b      	ldrh	r3, [r3, #4]
 801b502:	b29b      	uxth	r3, r3
 801b504:	429a      	cmp	r2, r3
 801b506:	d03d      	beq.n	801b584 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b508:	2300      	movs	r3, #0
 801b50a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b50c:	e03a      	b.n	801b584 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b510:	88db      	ldrh	r3, [r3, #6]
 801b512:	b29a      	uxth	r2, r3
 801b514:	693b      	ldr	r3, [r7, #16]
 801b516:	889b      	ldrh	r3, [r3, #4]
 801b518:	b29b      	uxth	r3, r3
 801b51a:	429a      	cmp	r2, r3
 801b51c:	d902      	bls.n	801b524 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b51e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b522:	e0c5      	b.n	801b6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	68ba      	ldr	r2, [r7, #8]
 801b528:	605a      	str	r2, [r3, #4]
      break;
 801b52a:	e02b      	b.n	801b584 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b52e:	889b      	ldrh	r3, [r3, #4]
 801b530:	b29a      	uxth	r2, r3
 801b532:	693b      	ldr	r3, [r7, #16]
 801b534:	889b      	ldrh	r3, [r3, #4]
 801b536:	b29b      	uxth	r3, r3
 801b538:	429a      	cmp	r2, r3
 801b53a:	d102      	bne.n	801b542 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b540:	e0b6      	b.n	801b6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b544:	889b      	ldrh	r3, [r3, #4]
 801b546:	b29a      	uxth	r2, r3
 801b548:	693b      	ldr	r3, [r7, #16]
 801b54a:	88db      	ldrh	r3, [r3, #6]
 801b54c:	b29b      	uxth	r3, r3
 801b54e:	429a      	cmp	r2, r3
 801b550:	d202      	bcs.n	801b558 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b556:	e0ab      	b.n	801b6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d009      	beq.n	801b572 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b560:	88db      	ldrh	r3, [r3, #6]
 801b562:	b29a      	uxth	r2, r3
 801b564:	693b      	ldr	r3, [r7, #16]
 801b566:	889b      	ldrh	r3, [r3, #4]
 801b568:	b29b      	uxth	r3, r3
 801b56a:	429a      	cmp	r2, r3
 801b56c:	d001      	beq.n	801b572 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b56e:	2300      	movs	r3, #0
 801b570:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b572:	693b      	ldr	r3, [r7, #16]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b578:	693b      	ldr	r3, [r7, #16]
 801b57a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d193      	bne.n	801b4aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b582:	e000      	b.n	801b586 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b584:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d12d      	bne.n	801b5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d01c      	beq.n	801b5cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b594:	88db      	ldrh	r3, [r3, #6]
 801b596:	b29a      	uxth	r2, r3
 801b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b59a:	889b      	ldrh	r3, [r3, #4]
 801b59c:	b29b      	uxth	r3, r3
 801b59e:	429a      	cmp	r2, r3
 801b5a0:	d906      	bls.n	801b5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b5a2:	4b45      	ldr	r3, [pc, #276]	; (801b6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b5a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b5a8:	4944      	ldr	r1, [pc, #272]	; (801b6bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b5aa:	4845      	ldr	r0, [pc, #276]	; (801b6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b5ac:	f000 fdf2 	bl	801c194 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5b2:	68ba      	ldr	r2, [r7, #8]
 801b5b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5b8:	88db      	ldrh	r3, [r3, #6]
 801b5ba:	b29a      	uxth	r2, r3
 801b5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5be:	889b      	ldrh	r3, [r3, #4]
 801b5c0:	b29b      	uxth	r3, r3
 801b5c2:	429a      	cmp	r2, r3
 801b5c4:	d010      	beq.n	801b5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	623b      	str	r3, [r7, #32]
 801b5ca:	e00d      	b.n	801b5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	685b      	ldr	r3, [r3, #4]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d006      	beq.n	801b5e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b5d4:	4b38      	ldr	r3, [pc, #224]	; (801b6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b5d6:	f240 12bf 	movw	r2, #447	; 0x1bf
 801b5da:	493a      	ldr	r1, [pc, #232]	; (801b6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b5dc:	4838      	ldr	r0, [pc, #224]	; (801b6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b5de:	f000 fdd9 	bl	801c194 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	68ba      	ldr	r2, [r7, #8]
 801b5e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d105      	bne.n	801b5fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	7f9b      	ldrb	r3, [r3, #30]
 801b5f2:	f003 0301 	and.w	r3, r3, #1
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d059      	beq.n	801b6ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b5fa:	6a3b      	ldr	r3, [r7, #32]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d04f      	beq.n	801b6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	685b      	ldr	r3, [r3, #4]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d006      	beq.n	801b616 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	685b      	ldr	r3, [r3, #4]
 801b60c:	685b      	ldr	r3, [r3, #4]
 801b60e:	889b      	ldrh	r3, [r3, #4]
 801b610:	b29b      	uxth	r3, r3
 801b612:	2b00      	cmp	r3, #0
 801b614:	d002      	beq.n	801b61c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b616:	2300      	movs	r3, #0
 801b618:	623b      	str	r3, [r7, #32]
 801b61a:	e041      	b.n	801b6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b61e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b626:	e012      	b.n	801b64e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b62a:	685b      	ldr	r3, [r3, #4]
 801b62c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b630:	88db      	ldrh	r3, [r3, #6]
 801b632:	b29a      	uxth	r2, r3
 801b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b636:	889b      	ldrh	r3, [r3, #4]
 801b638:	b29b      	uxth	r3, r3
 801b63a:	429a      	cmp	r2, r3
 801b63c:	d002      	beq.n	801b644 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b63e:	2300      	movs	r3, #0
 801b640:	623b      	str	r3, [r7, #32]
            break;
 801b642:	e007      	b.n	801b654 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b646:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b650:	2b00      	cmp	r3, #0
 801b652:	d1e9      	bne.n	801b628 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b654:	6a3b      	ldr	r3, [r7, #32]
 801b656:	2b00      	cmp	r3, #0
 801b658:	d022      	beq.n	801b6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	685b      	ldr	r3, [r3, #4]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d106      	bne.n	801b670 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b662:	4b15      	ldr	r3, [pc, #84]	; (801b6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b664:	f240 12df 	movw	r2, #479	; 0x1df
 801b668:	4917      	ldr	r1, [pc, #92]	; (801b6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b66a:	4815      	ldr	r0, [pc, #84]	; (801b6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b66c:	f000 fd92 	bl	801c194 <iprintf>
          LWIP_ASSERT("sanity check",
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	685b      	ldr	r3, [r3, #4]
 801b674:	685b      	ldr	r3, [r3, #4]
 801b676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b678:	429a      	cmp	r2, r3
 801b67a:	d106      	bne.n	801b68a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b67c:	4b0e      	ldr	r3, [pc, #56]	; (801b6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b67e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801b682:	4911      	ldr	r1, [pc, #68]	; (801b6c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b684:	480e      	ldr	r0, [pc, #56]	; (801b6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b686:	f000 fd85 	bl	801c194 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d006      	beq.n	801b6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b692:	4b09      	ldr	r3, [pc, #36]	; (801b6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b694:	f240 12e3 	movw	r2, #483	; 0x1e3
 801b698:	490c      	ldr	r1, [pc, #48]	; (801b6cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b69a:	4809      	ldr	r0, [pc, #36]	; (801b6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b69c:	f000 fd7a 	bl	801c194 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b6a0:	6a3b      	ldr	r3, [r7, #32]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	bf14      	ite	ne
 801b6a6:	2301      	movne	r3, #1
 801b6a8:	2300      	moveq	r3, #0
 801b6aa:	b2db      	uxtb	r3, r3
 801b6ac:	e000      	b.n	801b6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b6ae:	2300      	movs	r3, #0
}
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	3730      	adds	r7, #48	; 0x30
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}
 801b6b8:	0801fae4 	.word	0x0801fae4
 801b6bc:	0801fbc8 	.word	0x0801fbc8
 801b6c0:	0801fb2c 	.word	0x0801fb2c
 801b6c4:	0801fbe8 	.word	0x0801fbe8
 801b6c8:	0801fc20 	.word	0x0801fc20
 801b6cc:	0801fc30 	.word	0x0801fc30

0801b6d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b6d0:	b580      	push	{r7, lr}
 801b6d2:	b08e      	sub	sp, #56	; 0x38
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	685b      	ldr	r3, [r3, #4]
 801b6dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6e0:	781b      	ldrb	r3, [r3, #0]
 801b6e2:	f003 030f 	and.w	r3, r3, #15
 801b6e6:	b2db      	uxtb	r3, r3
 801b6e8:	009b      	lsls	r3, r3, #2
 801b6ea:	b2db      	uxtb	r3, r3
 801b6ec:	2b14      	cmp	r3, #20
 801b6ee:	f040 8167 	bne.w	801b9c0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6f4:	88db      	ldrh	r3, [r3, #6]
 801b6f6:	b29b      	uxth	r3, r3
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f7f5 ff2f 	bl	801155c <lwip_htons>
 801b6fe:	4603      	mov	r3, r0
 801b700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b704:	b29b      	uxth	r3, r3
 801b706:	00db      	lsls	r3, r3, #3
 801b708:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b70c:	885b      	ldrh	r3, [r3, #2]
 801b70e:	b29b      	uxth	r3, r3
 801b710:	4618      	mov	r0, r3
 801b712:	f7f5 ff23 	bl	801155c <lwip_htons>
 801b716:	4603      	mov	r3, r0
 801b718:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b71c:	781b      	ldrb	r3, [r3, #0]
 801b71e:	f003 030f 	and.w	r3, r3, #15
 801b722:	b2db      	uxtb	r3, r3
 801b724:	009b      	lsls	r3, r3, #2
 801b726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801b72a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b72e:	b29b      	uxth	r3, r3
 801b730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b732:	429a      	cmp	r2, r3
 801b734:	f0c0 8146 	bcc.w	801b9c4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b73c:	b29b      	uxth	r3, r3
 801b73e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b740:	1ad3      	subs	r3, r2, r3
 801b742:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b744:	6878      	ldr	r0, [r7, #4]
 801b746:	f7f7 fb75 	bl	8012e34 <pbuf_clen>
 801b74a:	4603      	mov	r3, r0
 801b74c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b74e:	4ba3      	ldr	r3, [pc, #652]	; (801b9dc <ip4_reass+0x30c>)
 801b750:	881b      	ldrh	r3, [r3, #0]
 801b752:	461a      	mov	r2, r3
 801b754:	8c3b      	ldrh	r3, [r7, #32]
 801b756:	4413      	add	r3, r2
 801b758:	2b0a      	cmp	r3, #10
 801b75a:	dd10      	ble.n	801b77e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b75c:	8c3b      	ldrh	r3, [r7, #32]
 801b75e:	4619      	mov	r1, r3
 801b760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b762:	f7ff fd81 	bl	801b268 <ip_reass_remove_oldest_datagram>
 801b766:	4603      	mov	r3, r0
 801b768:	2b00      	cmp	r3, #0
 801b76a:	f000 812d 	beq.w	801b9c8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b76e:	4b9b      	ldr	r3, [pc, #620]	; (801b9dc <ip4_reass+0x30c>)
 801b770:	881b      	ldrh	r3, [r3, #0]
 801b772:	461a      	mov	r2, r3
 801b774:	8c3b      	ldrh	r3, [r7, #32]
 801b776:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b778:	2b0a      	cmp	r3, #10
 801b77a:	f300 8125 	bgt.w	801b9c8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b77e:	4b98      	ldr	r3, [pc, #608]	; (801b9e0 <ip4_reass+0x310>)
 801b780:	681b      	ldr	r3, [r3, #0]
 801b782:	633b      	str	r3, [r7, #48]	; 0x30
 801b784:	e015      	b.n	801b7b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b788:	695a      	ldr	r2, [r3, #20]
 801b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b78c:	68db      	ldr	r3, [r3, #12]
 801b78e:	429a      	cmp	r2, r3
 801b790:	d10c      	bne.n	801b7ac <ip4_reass+0xdc>
 801b792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b794:	699a      	ldr	r2, [r3, #24]
 801b796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b798:	691b      	ldr	r3, [r3, #16]
 801b79a:	429a      	cmp	r2, r3
 801b79c:	d106      	bne.n	801b7ac <ip4_reass+0xdc>
 801b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7a0:	899a      	ldrh	r2, [r3, #12]
 801b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7a4:	889b      	ldrh	r3, [r3, #4]
 801b7a6:	b29b      	uxth	r3, r3
 801b7a8:	429a      	cmp	r2, r3
 801b7aa:	d006      	beq.n	801b7ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	633b      	str	r3, [r7, #48]	; 0x30
 801b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d1e6      	bne.n	801b786 <ip4_reass+0xb6>
 801b7b8:	e000      	b.n	801b7bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b7ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d109      	bne.n	801b7d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b7c2:	8c3b      	ldrh	r3, [r7, #32]
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b7c8:	f7ff fdb0 	bl	801b32c <ip_reass_enqueue_new_datagram>
 801b7cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d11c      	bne.n	801b80e <ip4_reass+0x13e>
      goto nullreturn;
 801b7d4:	e0f9      	b.n	801b9ca <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7d8:	88db      	ldrh	r3, [r3, #6]
 801b7da:	b29b      	uxth	r3, r3
 801b7dc:	4618      	mov	r0, r3
 801b7de:	f7f5 febd 	bl	801155c <lwip_htons>
 801b7e2:	4603      	mov	r3, r0
 801b7e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d110      	bne.n	801b80e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7ee:	89db      	ldrh	r3, [r3, #14]
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f7f5 feb3 	bl	801155c <lwip_htons>
 801b7f6:	4603      	mov	r3, r0
 801b7f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d006      	beq.n	801b80e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b802:	3308      	adds	r3, #8
 801b804:	2214      	movs	r2, #20
 801b806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b808:	4618      	mov	r0, r3
 801b80a:	f000 fcb0 	bl	801c16e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b810:	88db      	ldrh	r3, [r3, #6]
 801b812:	b29b      	uxth	r3, r3
 801b814:	f003 0320 	and.w	r3, r3, #32
 801b818:	2b00      	cmp	r3, #0
 801b81a:	bf0c      	ite	eq
 801b81c:	2301      	moveq	r3, #1
 801b81e:	2300      	movne	r3, #0
 801b820:	b2db      	uxtb	r3, r3
 801b822:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b824:	69fb      	ldr	r3, [r7, #28]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d00e      	beq.n	801b848 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b82a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b82e:	4413      	add	r3, r2
 801b830:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b832:	8b7a      	ldrh	r2, [r7, #26]
 801b834:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b836:	429a      	cmp	r2, r3
 801b838:	f0c0 80a0 	bcc.w	801b97c <ip4_reass+0x2ac>
 801b83c:	8b7b      	ldrh	r3, [r7, #26]
 801b83e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b842:	4293      	cmp	r3, r2
 801b844:	f200 809a 	bhi.w	801b97c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b848:	69fa      	ldr	r2, [r7, #28]
 801b84a:	6879      	ldr	r1, [r7, #4]
 801b84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b84e:	f7ff fdd5 	bl	801b3fc <ip_reass_chain_frag_into_datagram_and_validate>
 801b852:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b854:	697b      	ldr	r3, [r7, #20]
 801b856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b85a:	f000 8091 	beq.w	801b980 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b85e:	4b5f      	ldr	r3, [pc, #380]	; (801b9dc <ip4_reass+0x30c>)
 801b860:	881a      	ldrh	r2, [r3, #0]
 801b862:	8c3b      	ldrh	r3, [r7, #32]
 801b864:	4413      	add	r3, r2
 801b866:	b29a      	uxth	r2, r3
 801b868:	4b5c      	ldr	r3, [pc, #368]	; (801b9dc <ip4_reass+0x30c>)
 801b86a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b86c:	69fb      	ldr	r3, [r7, #28]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d00d      	beq.n	801b88e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b872:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b876:	4413      	add	r3, r2
 801b878:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b87c:	8a7a      	ldrh	r2, [r7, #18]
 801b87e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b882:	7f9b      	ldrb	r3, [r3, #30]
 801b884:	f043 0301 	orr.w	r3, r3, #1
 801b888:	b2da      	uxtb	r2, r3
 801b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b88c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b88e:	697b      	ldr	r3, [r7, #20]
 801b890:	2b01      	cmp	r3, #1
 801b892:	d171      	bne.n	801b978 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b896:	8b9b      	ldrh	r3, [r3, #28]
 801b898:	3314      	adds	r3, #20
 801b89a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b89e:	685b      	ldr	r3, [r3, #4]
 801b8a0:	685b      	ldr	r3, [r3, #4]
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8a8:	685b      	ldr	r3, [r3, #4]
 801b8aa:	685b      	ldr	r3, [r3, #4]
 801b8ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8b0:	3308      	adds	r3, #8
 801b8b2:	2214      	movs	r2, #20
 801b8b4:	4619      	mov	r1, r3
 801b8b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b8b8:	f000 fc59 	bl	801c16e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b8bc:	8a3b      	ldrh	r3, [r7, #16]
 801b8be:	4618      	mov	r0, r3
 801b8c0:	f7f5 fe4c 	bl	801155c <lwip_htons>
 801b8c4:	4603      	mov	r3, r0
 801b8c6:	461a      	mov	r2, r3
 801b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	719a      	strb	r2, [r3, #6]
 801b8d2:	2200      	movs	r2, #0
 801b8d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8d8:	2200      	movs	r2, #0
 801b8da:	729a      	strb	r2, [r3, #10]
 801b8dc:	2200      	movs	r2, #0
 801b8de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8e2:	685b      	ldr	r3, [r3, #4]
 801b8e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b8e6:	e00d      	b.n	801b904 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8ea:	685b      	ldr	r3, [r3, #4]
 801b8ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b8ee:	2114      	movs	r1, #20
 801b8f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b8f2:	f7f7 f98b 	bl	8012c0c <pbuf_remove_header>
      pbuf_cat(p, r);
 801b8f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b8f8:	6878      	ldr	r0, [r7, #4]
 801b8fa:	f7f7 fadb 	bl	8012eb4 <pbuf_cat>
      r = iprh->next_pbuf;
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b906:	2b00      	cmp	r3, #0
 801b908:	d1ee      	bne.n	801b8e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b90a:	4b35      	ldr	r3, [pc, #212]	; (801b9e0 <ip4_reass+0x310>)
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b910:	429a      	cmp	r2, r3
 801b912:	d102      	bne.n	801b91a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b914:	2300      	movs	r3, #0
 801b916:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b918:	e010      	b.n	801b93c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b91a:	4b31      	ldr	r3, [pc, #196]	; (801b9e0 <ip4_reass+0x310>)
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b920:	e007      	b.n	801b932 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b928:	429a      	cmp	r2, r3
 801b92a:	d006      	beq.n	801b93a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b934:	2b00      	cmp	r3, #0
 801b936:	d1f4      	bne.n	801b922 <ip4_reass+0x252>
 801b938:	e000      	b.n	801b93c <ip4_reass+0x26c>
          break;
 801b93a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b93c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b93e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b940:	f7ff fd2e 	bl	801b3a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b944:	6878      	ldr	r0, [r7, #4]
 801b946:	f7f7 fa75 	bl	8012e34 <pbuf_clen>
 801b94a:	4603      	mov	r3, r0
 801b94c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b94e:	4b23      	ldr	r3, [pc, #140]	; (801b9dc <ip4_reass+0x30c>)
 801b950:	881b      	ldrh	r3, [r3, #0]
 801b952:	8c3a      	ldrh	r2, [r7, #32]
 801b954:	429a      	cmp	r2, r3
 801b956:	d906      	bls.n	801b966 <ip4_reass+0x296>
 801b958:	4b22      	ldr	r3, [pc, #136]	; (801b9e4 <ip4_reass+0x314>)
 801b95a:	f240 229b 	movw	r2, #667	; 0x29b
 801b95e:	4922      	ldr	r1, [pc, #136]	; (801b9e8 <ip4_reass+0x318>)
 801b960:	4822      	ldr	r0, [pc, #136]	; (801b9ec <ip4_reass+0x31c>)
 801b962:	f000 fc17 	bl	801c194 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b966:	4b1d      	ldr	r3, [pc, #116]	; (801b9dc <ip4_reass+0x30c>)
 801b968:	881a      	ldrh	r2, [r3, #0]
 801b96a:	8c3b      	ldrh	r3, [r7, #32]
 801b96c:	1ad3      	subs	r3, r2, r3
 801b96e:	b29a      	uxth	r2, r3
 801b970:	4b1a      	ldr	r3, [pc, #104]	; (801b9dc <ip4_reass+0x30c>)
 801b972:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	e02c      	b.n	801b9d2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b978:	2300      	movs	r3, #0
 801b97a:	e02a      	b.n	801b9d2 <ip4_reass+0x302>

nullreturn_ipr:
 801b97c:	bf00      	nop
 801b97e:	e000      	b.n	801b982 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801b980:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b984:	2b00      	cmp	r3, #0
 801b986:	d106      	bne.n	801b996 <ip4_reass+0x2c6>
 801b988:	4b16      	ldr	r3, [pc, #88]	; (801b9e4 <ip4_reass+0x314>)
 801b98a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b98e:	4918      	ldr	r1, [pc, #96]	; (801b9f0 <ip4_reass+0x320>)
 801b990:	4816      	ldr	r0, [pc, #88]	; (801b9ec <ip4_reass+0x31c>)
 801b992:	f000 fbff 	bl	801c194 <iprintf>
  if (ipr->p == NULL) {
 801b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b998:	685b      	ldr	r3, [r3, #4]
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d114      	bne.n	801b9c8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b99e:	4b10      	ldr	r3, [pc, #64]	; (801b9e0 <ip4_reass+0x310>)
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b9a4:	429a      	cmp	r2, r3
 801b9a6:	d006      	beq.n	801b9b6 <ip4_reass+0x2e6>
 801b9a8:	4b0e      	ldr	r3, [pc, #56]	; (801b9e4 <ip4_reass+0x314>)
 801b9aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b9ae:	4911      	ldr	r1, [pc, #68]	; (801b9f4 <ip4_reass+0x324>)
 801b9b0:	480e      	ldr	r0, [pc, #56]	; (801b9ec <ip4_reass+0x31c>)
 801b9b2:	f000 fbef 	bl	801c194 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b9b6:	2100      	movs	r1, #0
 801b9b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b9ba:	f7ff fcf1 	bl	801b3a0 <ip_reass_dequeue_datagram>
 801b9be:	e004      	b.n	801b9ca <ip4_reass+0x2fa>
    goto nullreturn;
 801b9c0:	bf00      	nop
 801b9c2:	e002      	b.n	801b9ca <ip4_reass+0x2fa>
    goto nullreturn;
 801b9c4:	bf00      	nop
 801b9c6:	e000      	b.n	801b9ca <ip4_reass+0x2fa>
  }

nullreturn:
 801b9c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b9ca:	6878      	ldr	r0, [r7, #4]
 801b9cc:	f7f7 f9a4 	bl	8012d18 <pbuf_free>
  return NULL;
 801b9d0:	2300      	movs	r3, #0
}
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	3738      	adds	r7, #56	; 0x38
 801b9d6:	46bd      	mov	sp, r7
 801b9d8:	bd80      	pop	{r7, pc}
 801b9da:	bf00      	nop
 801b9dc:	20004654 	.word	0x20004654
 801b9e0:	20004650 	.word	0x20004650
 801b9e4:	0801fae4 	.word	0x0801fae4
 801b9e8:	0801fc54 	.word	0x0801fc54
 801b9ec:	0801fb2c 	.word	0x0801fb2c
 801b9f0:	0801fc70 	.word	0x0801fc70
 801b9f4:	0801fc7c 	.word	0x0801fc7c

0801b9f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b9f8:	b580      	push	{r7, lr}
 801b9fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b9fc:	2005      	movs	r0, #5
 801b9fe:	f7f6 fa99 	bl	8011f34 <memp_malloc>
 801ba02:	4603      	mov	r3, r0
}
 801ba04:	4618      	mov	r0, r3
 801ba06:	bd80      	pop	{r7, pc}

0801ba08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b082      	sub	sp, #8
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d106      	bne.n	801ba24 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ba16:	4b07      	ldr	r3, [pc, #28]	; (801ba34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ba18:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ba1c:	4906      	ldr	r1, [pc, #24]	; (801ba38 <ip_frag_free_pbuf_custom_ref+0x30>)
 801ba1e:	4807      	ldr	r0, [pc, #28]	; (801ba3c <ip_frag_free_pbuf_custom_ref+0x34>)
 801ba20:	f000 fbb8 	bl	801c194 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ba24:	6879      	ldr	r1, [r7, #4]
 801ba26:	2005      	movs	r0, #5
 801ba28:	f7f6 fad6 	bl	8011fd8 <memp_free>
}
 801ba2c:	bf00      	nop
 801ba2e:	3708      	adds	r7, #8
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	0801fae4 	.word	0x0801fae4
 801ba38:	0801fc9c 	.word	0x0801fc9c
 801ba3c:	0801fb2c 	.word	0x0801fb2c

0801ba40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b084      	sub	sp, #16
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d106      	bne.n	801ba60 <ipfrag_free_pbuf_custom+0x20>
 801ba52:	4b11      	ldr	r3, [pc, #68]	; (801ba98 <ipfrag_free_pbuf_custom+0x58>)
 801ba54:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ba58:	4910      	ldr	r1, [pc, #64]	; (801ba9c <ipfrag_free_pbuf_custom+0x5c>)
 801ba5a:	4811      	ldr	r0, [pc, #68]	; (801baa0 <ipfrag_free_pbuf_custom+0x60>)
 801ba5c:	f000 fb9a 	bl	801c194 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ba60:	68fa      	ldr	r2, [r7, #12]
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	429a      	cmp	r2, r3
 801ba66:	d006      	beq.n	801ba76 <ipfrag_free_pbuf_custom+0x36>
 801ba68:	4b0b      	ldr	r3, [pc, #44]	; (801ba98 <ipfrag_free_pbuf_custom+0x58>)
 801ba6a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ba6e:	490d      	ldr	r1, [pc, #52]	; (801baa4 <ipfrag_free_pbuf_custom+0x64>)
 801ba70:	480b      	ldr	r0, [pc, #44]	; (801baa0 <ipfrag_free_pbuf_custom+0x60>)
 801ba72:	f000 fb8f 	bl	801c194 <iprintf>
  if (pcr->original != NULL) {
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	695b      	ldr	r3, [r3, #20]
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d004      	beq.n	801ba88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	695b      	ldr	r3, [r3, #20]
 801ba82:	4618      	mov	r0, r3
 801ba84:	f7f7 f948 	bl	8012d18 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ba88:	68f8      	ldr	r0, [r7, #12]
 801ba8a:	f7ff ffbd 	bl	801ba08 <ip_frag_free_pbuf_custom_ref>
}
 801ba8e:	bf00      	nop
 801ba90:	3710      	adds	r7, #16
 801ba92:	46bd      	mov	sp, r7
 801ba94:	bd80      	pop	{r7, pc}
 801ba96:	bf00      	nop
 801ba98:	0801fae4 	.word	0x0801fae4
 801ba9c:	0801fca8 	.word	0x0801fca8
 801baa0:	0801fb2c 	.word	0x0801fb2c
 801baa4:	0801fcb4 	.word	0x0801fcb4

0801baa8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b094      	sub	sp, #80	; 0x50
 801baac:	af02      	add	r7, sp, #8
 801baae:	60f8      	str	r0, [r7, #12]
 801bab0:	60b9      	str	r1, [r7, #8]
 801bab2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801bab4:	2300      	movs	r3, #0
 801bab6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801baba:	68bb      	ldr	r3, [r7, #8]
 801babc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801babe:	3b14      	subs	r3, #20
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	da00      	bge.n	801bac6 <ip4_frag+0x1e>
 801bac4:	3307      	adds	r3, #7
 801bac6:	10db      	asrs	r3, r3, #3
 801bac8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801baca:	2314      	movs	r3, #20
 801bacc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	685b      	ldr	r3, [r3, #4]
 801bad2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801bad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bad6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bada:	781b      	ldrb	r3, [r3, #0]
 801badc:	f003 030f 	and.w	r3, r3, #15
 801bae0:	b2db      	uxtb	r3, r3
 801bae2:	009b      	lsls	r3, r3, #2
 801bae4:	b2db      	uxtb	r3, r3
 801bae6:	2b14      	cmp	r3, #20
 801bae8:	d002      	beq.n	801baf0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801baea:	f06f 0305 	mvn.w	r3, #5
 801baee:	e10f      	b.n	801bd10 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	895b      	ldrh	r3, [r3, #10]
 801baf4:	2b13      	cmp	r3, #19
 801baf6:	d809      	bhi.n	801bb0c <ip4_frag+0x64>
 801baf8:	4b87      	ldr	r3, [pc, #540]	; (801bd18 <ip4_frag+0x270>)
 801bafa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801bafe:	4987      	ldr	r1, [pc, #540]	; (801bd1c <ip4_frag+0x274>)
 801bb00:	4887      	ldr	r0, [pc, #540]	; (801bd20 <ip4_frag+0x278>)
 801bb02:	f000 fb47 	bl	801c194 <iprintf>
 801bb06:	f06f 0305 	mvn.w	r3, #5
 801bb0a:	e101      	b.n	801bd10 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bb0e:	88db      	ldrh	r3, [r3, #6]
 801bb10:	b29b      	uxth	r3, r3
 801bb12:	4618      	mov	r0, r3
 801bb14:	f7f5 fd22 	bl	801155c <lwip_htons>
 801bb18:	4603      	mov	r3, r0
 801bb1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801bb1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bb1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801bb26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bb28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bb2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	891b      	ldrh	r3, [r3, #8]
 801bb32:	3b14      	subs	r3, #20
 801bb34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801bb38:	e0e0      	b.n	801bcfc <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bb3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bb3c:	00db      	lsls	r3, r3, #3
 801bb3e:	b29b      	uxth	r3, r3
 801bb40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bb44:	4293      	cmp	r3, r2
 801bb46:	bf28      	it	cs
 801bb48:	4613      	movcs	r3, r2
 801bb4a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bb4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bb50:	2114      	movs	r1, #20
 801bb52:	200e      	movs	r0, #14
 801bb54:	f7f6 fe00 	bl	8012758 <pbuf_alloc>
 801bb58:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	f000 80d4 	beq.w	801bd0a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb64:	895b      	ldrh	r3, [r3, #10]
 801bb66:	2b13      	cmp	r3, #19
 801bb68:	d806      	bhi.n	801bb78 <ip4_frag+0xd0>
 801bb6a:	4b6b      	ldr	r3, [pc, #428]	; (801bd18 <ip4_frag+0x270>)
 801bb6c:	f240 3225 	movw	r2, #805	; 0x325
 801bb70:	496c      	ldr	r1, [pc, #432]	; (801bd24 <ip4_frag+0x27c>)
 801bb72:	486b      	ldr	r0, [pc, #428]	; (801bd20 <ip4_frag+0x278>)
 801bb74:	f000 fb0e 	bl	801c194 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb7a:	685b      	ldr	r3, [r3, #4]
 801bb7c:	2214      	movs	r2, #20
 801bb7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bb80:	4618      	mov	r0, r3
 801bb82:	f000 faf4 	bl	801c16e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb88:	685b      	ldr	r3, [r3, #4]
 801bb8a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801bb8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bb8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801bb92:	e064      	b.n	801bc5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	895a      	ldrh	r2, [r3, #10]
 801bb98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bb9a:	1ad3      	subs	r3, r2, r3
 801bb9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bb9e:	68fb      	ldr	r3, [r7, #12]
 801bba0:	895b      	ldrh	r3, [r3, #10]
 801bba2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bba4:	429a      	cmp	r2, r3
 801bba6:	d906      	bls.n	801bbb6 <ip4_frag+0x10e>
 801bba8:	4b5b      	ldr	r3, [pc, #364]	; (801bd18 <ip4_frag+0x270>)
 801bbaa:	f240 322d 	movw	r2, #813	; 0x32d
 801bbae:	495e      	ldr	r1, [pc, #376]	; (801bd28 <ip4_frag+0x280>)
 801bbb0:	485b      	ldr	r0, [pc, #364]	; (801bd20 <ip4_frag+0x278>)
 801bbb2:	f000 faef 	bl	801c194 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bbb6:	8bfa      	ldrh	r2, [r7, #30]
 801bbb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bbbc:	4293      	cmp	r3, r2
 801bbbe:	bf28      	it	cs
 801bbc0:	4613      	movcs	r3, r2
 801bbc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bbc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d105      	bne.n	801bbda <ip4_frag+0x132>
        poff = 0;
 801bbce:	2300      	movs	r3, #0
 801bbd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	60fb      	str	r3, [r7, #12]
        continue;
 801bbd8:	e041      	b.n	801bc5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801bbda:	f7ff ff0d 	bl	801b9f8 <ip_frag_alloc_pbuf_custom_ref>
 801bbde:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801bbe0:	69bb      	ldr	r3, [r7, #24]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d103      	bne.n	801bbee <ip4_frag+0x146>
        pbuf_free(rambuf);
 801bbe6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bbe8:	f7f7 f896 	bl	8012d18 <pbuf_free>
        goto memerr;
 801bbec:	e08e      	b.n	801bd0c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bbee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bbf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bbf6:	4413      	add	r3, r2
 801bbf8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801bbfc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801bc00:	9201      	str	r2, [sp, #4]
 801bc02:	9300      	str	r3, [sp, #0]
 801bc04:	4603      	mov	r3, r0
 801bc06:	2241      	movs	r2, #65	; 0x41
 801bc08:	2000      	movs	r0, #0
 801bc0a:	f7f6 fecb 	bl	80129a4 <pbuf_alloced_custom>
 801bc0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d106      	bne.n	801bc24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801bc16:	69b8      	ldr	r0, [r7, #24]
 801bc18:	f7ff fef6 	bl	801ba08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801bc1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc1e:	f7f7 f87b 	bl	8012d18 <pbuf_free>
        goto memerr;
 801bc22:	e073      	b.n	801bd0c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801bc24:	68f8      	ldr	r0, [r7, #12]
 801bc26:	f7f7 f91d 	bl	8012e64 <pbuf_ref>
      pcr->original = p;
 801bc2a:	69bb      	ldr	r3, [r7, #24]
 801bc2c:	68fa      	ldr	r2, [r7, #12]
 801bc2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801bc30:	69bb      	ldr	r3, [r7, #24]
 801bc32:	4a3e      	ldr	r2, [pc, #248]	; (801bd2c <ip4_frag+0x284>)
 801bc34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801bc36:	6979      	ldr	r1, [r7, #20]
 801bc38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc3a:	f7f7 f93b 	bl	8012eb4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801bc3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801bc42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bc46:	1ad3      	subs	r3, r2, r3
 801bc48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801bc4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d004      	beq.n	801bc5e <ip4_frag+0x1b6>
        poff = 0;
 801bc54:	2300      	movs	r3, #0
 801bc56:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801bc5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d196      	bne.n	801bb94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801bc66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bc68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bc6c:	4413      	add	r3, r2
 801bc6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801bc70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bc74:	68bb      	ldr	r3, [r7, #8]
 801bc76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801bc78:	3b14      	subs	r3, #20
 801bc7a:	429a      	cmp	r2, r3
 801bc7c:	bfd4      	ite	le
 801bc7e:	2301      	movle	r3, #1
 801bc80:	2300      	movgt	r3, #0
 801bc82:	b2db      	uxtb	r3, r3
 801bc84:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801bc86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bc8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bc8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801bc90:	6a3b      	ldr	r3, [r7, #32]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d002      	beq.n	801bc9c <ip4_frag+0x1f4>
 801bc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d003      	beq.n	801bca4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801bc9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bc9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bca2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801bca4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bca6:	4618      	mov	r0, r3
 801bca8:	f7f5 fc58 	bl	801155c <lwip_htons>
 801bcac:	4603      	mov	r3, r0
 801bcae:	461a      	mov	r2, r3
 801bcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcb2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801bcb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bcb6:	3314      	adds	r3, #20
 801bcb8:	b29b      	uxth	r3, r3
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f7f5 fc4e 	bl	801155c <lwip_htons>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	461a      	mov	r2, r3
 801bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcc6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bcca:	2200      	movs	r2, #0
 801bccc:	729a      	strb	r2, [r3, #10]
 801bcce:	2200      	movs	r2, #0
 801bcd0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bcd2:	68bb      	ldr	r3, [r7, #8]
 801bcd4:	695b      	ldr	r3, [r3, #20]
 801bcd6:	687a      	ldr	r2, [r7, #4]
 801bcd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bcda:	68b8      	ldr	r0, [r7, #8]
 801bcdc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801bcde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bce0:	f7f7 f81a 	bl	8012d18 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801bce4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bce8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bcea:	1ad3      	subs	r3, r2, r3
 801bcec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801bcf0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801bcf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bcf6:	4413      	add	r3, r2
 801bcf8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801bcfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	f47f af1a 	bne.w	801bb3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bd06:	2300      	movs	r3, #0
 801bd08:	e002      	b.n	801bd10 <ip4_frag+0x268>
      goto memerr;
 801bd0a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bd0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801bd10:	4618      	mov	r0, r3
 801bd12:	3748      	adds	r7, #72	; 0x48
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd80      	pop	{r7, pc}
 801bd18:	0801fae4 	.word	0x0801fae4
 801bd1c:	0801fcc0 	.word	0x0801fcc0
 801bd20:	0801fb2c 	.word	0x0801fb2c
 801bd24:	0801fcdc 	.word	0x0801fcdc
 801bd28:	0801fcfc 	.word	0x0801fcfc
 801bd2c:	0801ba41 	.word	0x0801ba41

0801bd30 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801bd30:	b580      	push	{r7, lr}
 801bd32:	b086      	sub	sp, #24
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
 801bd38:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801bd3a:	230e      	movs	r3, #14
 801bd3c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	895b      	ldrh	r3, [r3, #10]
 801bd42:	2b0e      	cmp	r3, #14
 801bd44:	d96e      	bls.n	801be24 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	7bdb      	ldrb	r3, [r3, #15]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d106      	bne.n	801bd5c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801bd4e:	683b      	ldr	r3, [r7, #0]
 801bd50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bd54:	3301      	adds	r3, #1
 801bd56:	b2da      	uxtb	r2, r3
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	685b      	ldr	r3, [r3, #4]
 801bd60:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801bd62:	693b      	ldr	r3, [r7, #16]
 801bd64:	7b1a      	ldrb	r2, [r3, #12]
 801bd66:	7b5b      	ldrb	r3, [r3, #13]
 801bd68:	021b      	lsls	r3, r3, #8
 801bd6a:	4313      	orrs	r3, r2
 801bd6c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801bd6e:	693b      	ldr	r3, [r7, #16]
 801bd70:	781b      	ldrb	r3, [r3, #0]
 801bd72:	f003 0301 	and.w	r3, r3, #1
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d023      	beq.n	801bdc2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801bd7a:	693b      	ldr	r3, [r7, #16]
 801bd7c:	781b      	ldrb	r3, [r3, #0]
 801bd7e:	2b01      	cmp	r3, #1
 801bd80:	d10f      	bne.n	801bda2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bd82:	693b      	ldr	r3, [r7, #16]
 801bd84:	785b      	ldrb	r3, [r3, #1]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d11b      	bne.n	801bdc2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801bd8a:	693b      	ldr	r3, [r7, #16]
 801bd8c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bd8e:	2b5e      	cmp	r3, #94	; 0x5e
 801bd90:	d117      	bne.n	801bdc2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	7b5b      	ldrb	r3, [r3, #13]
 801bd96:	f043 0310 	orr.w	r3, r3, #16
 801bd9a:	b2da      	uxtb	r2, r3
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	735a      	strb	r2, [r3, #13]
 801bda0:	e00f      	b.n	801bdc2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801bda2:	693b      	ldr	r3, [r7, #16]
 801bda4:	2206      	movs	r2, #6
 801bda6:	4928      	ldr	r1, [pc, #160]	; (801be48 <ethernet_input+0x118>)
 801bda8:	4618      	mov	r0, r3
 801bdaa:	f000 f9d1 	bl	801c150 <memcmp>
 801bdae:	4603      	mov	r3, r0
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d106      	bne.n	801bdc2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	7b5b      	ldrb	r3, [r3, #13]
 801bdb8:	f043 0308 	orr.w	r3, r3, #8
 801bdbc:	b2da      	uxtb	r2, r3
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801bdc2:	89fb      	ldrh	r3, [r7, #14]
 801bdc4:	2b08      	cmp	r3, #8
 801bdc6:	d003      	beq.n	801bdd0 <ethernet_input+0xa0>
 801bdc8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801bdcc:	d014      	beq.n	801bdf8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801bdce:	e032      	b.n	801be36 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bdd0:	683b      	ldr	r3, [r7, #0]
 801bdd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bdd6:	f003 0308 	and.w	r3, r3, #8
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d024      	beq.n	801be28 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801bdde:	8afb      	ldrh	r3, [r7, #22]
 801bde0:	4619      	mov	r1, r3
 801bde2:	6878      	ldr	r0, [r7, #4]
 801bde4:	f7f6 ff12 	bl	8012c0c <pbuf_remove_header>
 801bde8:	4603      	mov	r3, r0
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d11e      	bne.n	801be2c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801bdee:	6839      	ldr	r1, [r7, #0]
 801bdf0:	6878      	ldr	r0, [r7, #4]
 801bdf2:	f7fe ff2d 	bl	801ac50 <ip4_input>
      break;
 801bdf6:	e013      	b.n	801be20 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bdf8:	683b      	ldr	r3, [r7, #0]
 801bdfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bdfe:	f003 0308 	and.w	r3, r3, #8
 801be02:	2b00      	cmp	r3, #0
 801be04:	d014      	beq.n	801be30 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801be06:	8afb      	ldrh	r3, [r7, #22]
 801be08:	4619      	mov	r1, r3
 801be0a:	6878      	ldr	r0, [r7, #4]
 801be0c:	f7f6 fefe 	bl	8012c0c <pbuf_remove_header>
 801be10:	4603      	mov	r3, r0
 801be12:	2b00      	cmp	r3, #0
 801be14:	d10e      	bne.n	801be34 <ethernet_input+0x104>
        etharp_input(p, netif);
 801be16:	6839      	ldr	r1, [r7, #0]
 801be18:	6878      	ldr	r0, [r7, #4]
 801be1a:	f7fe f8cd 	bl	8019fb8 <etharp_input>
      break;
 801be1e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801be20:	2300      	movs	r3, #0
 801be22:	e00c      	b.n	801be3e <ethernet_input+0x10e>
    goto free_and_return;
 801be24:	bf00      	nop
 801be26:	e006      	b.n	801be36 <ethernet_input+0x106>
        goto free_and_return;
 801be28:	bf00      	nop
 801be2a:	e004      	b.n	801be36 <ethernet_input+0x106>
        goto free_and_return;
 801be2c:	bf00      	nop
 801be2e:	e002      	b.n	801be36 <ethernet_input+0x106>
        goto free_and_return;
 801be30:	bf00      	nop
 801be32:	e000      	b.n	801be36 <ethernet_input+0x106>
        goto free_and_return;
 801be34:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801be36:	6878      	ldr	r0, [r7, #4]
 801be38:	f7f6 ff6e 	bl	8012d18 <pbuf_free>
  return ERR_OK;
 801be3c:	2300      	movs	r3, #0
}
 801be3e:	4618      	mov	r0, r3
 801be40:	3718      	adds	r7, #24
 801be42:	46bd      	mov	sp, r7
 801be44:	bd80      	pop	{r7, pc}
 801be46:	bf00      	nop
 801be48:	08030a0c 	.word	0x08030a0c

0801be4c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b086      	sub	sp, #24
 801be50:	af00      	add	r7, sp, #0
 801be52:	60f8      	str	r0, [r7, #12]
 801be54:	60b9      	str	r1, [r7, #8]
 801be56:	607a      	str	r2, [r7, #4]
 801be58:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801be5a:	8c3b      	ldrh	r3, [r7, #32]
 801be5c:	4618      	mov	r0, r3
 801be5e:	f7f5 fb7d 	bl	801155c <lwip_htons>
 801be62:	4603      	mov	r3, r0
 801be64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801be66:	210e      	movs	r1, #14
 801be68:	68b8      	ldr	r0, [r7, #8]
 801be6a:	f7f6 febf 	bl	8012bec <pbuf_add_header>
 801be6e:	4603      	mov	r3, r0
 801be70:	2b00      	cmp	r3, #0
 801be72:	d125      	bne.n	801bec0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801be74:	68bb      	ldr	r3, [r7, #8]
 801be76:	685b      	ldr	r3, [r3, #4]
 801be78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801be7a:	693b      	ldr	r3, [r7, #16]
 801be7c:	8afa      	ldrh	r2, [r7, #22]
 801be7e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801be80:	693b      	ldr	r3, [r7, #16]
 801be82:	2206      	movs	r2, #6
 801be84:	6839      	ldr	r1, [r7, #0]
 801be86:	4618      	mov	r0, r3
 801be88:	f000 f971 	bl	801c16e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801be8c:	693b      	ldr	r3, [r7, #16]
 801be8e:	3306      	adds	r3, #6
 801be90:	2206      	movs	r2, #6
 801be92:	6879      	ldr	r1, [r7, #4]
 801be94:	4618      	mov	r0, r3
 801be96:	f000 f96a 	bl	801c16e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bea0:	2b06      	cmp	r3, #6
 801bea2:	d006      	beq.n	801beb2 <ethernet_output+0x66>
 801bea4:	4b0a      	ldr	r3, [pc, #40]	; (801bed0 <ethernet_output+0x84>)
 801bea6:	f240 1233 	movw	r2, #307	; 0x133
 801beaa:	490a      	ldr	r1, [pc, #40]	; (801bed4 <ethernet_output+0x88>)
 801beac:	480a      	ldr	r0, [pc, #40]	; (801bed8 <ethernet_output+0x8c>)
 801beae:	f000 f971 	bl	801c194 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	699b      	ldr	r3, [r3, #24]
 801beb6:	68b9      	ldr	r1, [r7, #8]
 801beb8:	68f8      	ldr	r0, [r7, #12]
 801beba:	4798      	blx	r3
 801bebc:	4603      	mov	r3, r0
 801bebe:	e002      	b.n	801bec6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801bec0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801bec2:	f06f 0301 	mvn.w	r3, #1
}
 801bec6:	4618      	mov	r0, r3
 801bec8:	3718      	adds	r7, #24
 801beca:	46bd      	mov	sp, r7
 801becc:	bd80      	pop	{r7, pc}
 801bece:	bf00      	nop
 801bed0:	0801fd0c 	.word	0x0801fd0c
 801bed4:	0801fd44 	.word	0x0801fd44
 801bed8:	0801fd78 	.word	0x0801fd78

0801bedc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801bedc:	b580      	push	{r7, lr}
 801bede:	b086      	sub	sp, #24
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	6078      	str	r0, [r7, #4]
 801bee4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801bee6:	683b      	ldr	r3, [r7, #0]
 801bee8:	60bb      	str	r3, [r7, #8]
 801beea:	2304      	movs	r3, #4
 801beec:	60fb      	str	r3, [r7, #12]
 801beee:	2300      	movs	r3, #0
 801bef0:	613b      	str	r3, [r7, #16]
 801bef2:	2300      	movs	r3, #0
 801bef4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801bef6:	f107 0308 	add.w	r3, r7, #8
 801befa:	2100      	movs	r1, #0
 801befc:	4618      	mov	r0, r3
 801befe:	f7f1 fe43 	bl	800db88 <osMessageCreate>
 801bf02:	4602      	mov	r2, r0
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d102      	bne.n	801bf16 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801bf10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf14:	e000      	b.n	801bf18 <sys_mbox_new+0x3c>

  return ERR_OK;
 801bf16:	2300      	movs	r3, #0
}
 801bf18:	4618      	mov	r0, r3
 801bf1a:	3718      	adds	r7, #24
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	bd80      	pop	{r7, pc}

0801bf20 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b084      	sub	sp, #16
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	6078      	str	r0, [r7, #4]
 801bf28:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	6839      	ldr	r1, [r7, #0]
 801bf30:	2200      	movs	r2, #0
 801bf32:	4618      	mov	r0, r3
 801bf34:	f7f1 fe52 	bl	800dbdc <osMessagePut>
 801bf38:	4603      	mov	r3, r0
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d102      	bne.n	801bf44 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801bf3e:	2300      	movs	r3, #0
 801bf40:	73fb      	strb	r3, [r7, #15]
 801bf42:	e001      	b.n	801bf48 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801bf44:	23ff      	movs	r3, #255	; 0xff
 801bf46:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801bf48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	3710      	adds	r7, #16
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bd80      	pop	{r7, pc}

0801bf54 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801bf54:	b580      	push	{r7, lr}
 801bf56:	b08c      	sub	sp, #48	; 0x30
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	61f8      	str	r0, [r7, #28]
 801bf5c:	61b9      	str	r1, [r7, #24]
 801bf5e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801bf60:	f7f1 fc4d 	bl	800d7fe <osKernelSysTick>
 801bf64:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d017      	beq.n	801bf9c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801bf6c:	69fb      	ldr	r3, [r7, #28]
 801bf6e:	6819      	ldr	r1, [r3, #0]
 801bf70:	f107 0320 	add.w	r3, r7, #32
 801bf74:	697a      	ldr	r2, [r7, #20]
 801bf76:	4618      	mov	r0, r3
 801bf78:	f7f1 fe70 	bl	800dc5c <osMessageGet>

    if(event.status == osEventMessage)
 801bf7c:	6a3b      	ldr	r3, [r7, #32]
 801bf7e:	2b10      	cmp	r3, #16
 801bf80:	d109      	bne.n	801bf96 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf84:	461a      	mov	r2, r3
 801bf86:	69bb      	ldr	r3, [r7, #24]
 801bf88:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801bf8a:	f7f1 fc38 	bl	800d7fe <osKernelSysTick>
 801bf8e:	4602      	mov	r2, r0
 801bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf92:	1ad3      	subs	r3, r2, r3
 801bf94:	e019      	b.n	801bfca <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801bf96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf9a:	e016      	b.n	801bfca <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801bf9c:	69fb      	ldr	r3, [r7, #28]
 801bf9e:	6819      	ldr	r1, [r3, #0]
 801bfa0:	463b      	mov	r3, r7
 801bfa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	f7f1 fe58 	bl	800dc5c <osMessageGet>
 801bfac:	f107 0320 	add.w	r3, r7, #32
 801bfb0:	463a      	mov	r2, r7
 801bfb2:	ca07      	ldmia	r2, {r0, r1, r2}
 801bfb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801bfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfba:	461a      	mov	r2, r3
 801bfbc:	69bb      	ldr	r3, [r7, #24]
 801bfbe:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801bfc0:	f7f1 fc1d 	bl	800d7fe <osKernelSysTick>
 801bfc4:	4602      	mov	r2, r0
 801bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfc8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801bfca:	4618      	mov	r0, r3
 801bfcc:	3730      	adds	r7, #48	; 0x30
 801bfce:	46bd      	mov	sp, r7
 801bfd0:	bd80      	pop	{r7, pc}

0801bfd2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801bfd2:	b480      	push	{r7}
 801bfd4:	b083      	sub	sp, #12
 801bfd6:	af00      	add	r7, sp, #0
 801bfd8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d101      	bne.n	801bfe6 <sys_mbox_valid+0x14>
    return 0;
 801bfe2:	2300      	movs	r3, #0
 801bfe4:	e000      	b.n	801bfe8 <sys_mbox_valid+0x16>
  else
    return 1;
 801bfe6:	2301      	movs	r3, #1
}
 801bfe8:	4618      	mov	r0, r3
 801bfea:	370c      	adds	r7, #12
 801bfec:	46bd      	mov	sp, r7
 801bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bff2:	4770      	bx	lr

0801bff4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801bff4:	b580      	push	{r7, lr}
 801bff6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801bff8:	4803      	ldr	r0, [pc, #12]	; (801c008 <sys_init+0x14>)
 801bffa:	f7f1 fc70 	bl	800d8de <osMutexCreate>
 801bffe:	4602      	mov	r2, r0
 801c000:	4b02      	ldr	r3, [pc, #8]	; (801c00c <sys_init+0x18>)
 801c002:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c004:	bf00      	nop
 801c006:	bd80      	pop	{r7, pc}
 801c008:	08030a1c 	.word	0x08030a1c
 801c00c:	2000b360 	.word	0x2000b360

0801c010 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c010:	b580      	push	{r7, lr}
 801c012:	b084      	sub	sp, #16
 801c014:	af00      	add	r7, sp, #0
 801c016:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c018:	2300      	movs	r3, #0
 801c01a:	60bb      	str	r3, [r7, #8]
 801c01c:	2300      	movs	r3, #0
 801c01e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c020:	f107 0308 	add.w	r3, r7, #8
 801c024:	4618      	mov	r0, r3
 801c026:	f7f1 fc5a 	bl	800d8de <osMutexCreate>
 801c02a:	4602      	mov	r2, r0
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d102      	bne.n	801c03e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c03c:	e000      	b.n	801c040 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c03e:	2300      	movs	r3, #0
}
 801c040:	4618      	mov	r0, r3
 801c042:	3710      	adds	r7, #16
 801c044:	46bd      	mov	sp, r7
 801c046:	bd80      	pop	{r7, pc}

0801c048 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c048:	b580      	push	{r7, lr}
 801c04a:	b082      	sub	sp, #8
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c058:	4618      	mov	r0, r3
 801c05a:	f7f1 fc59 	bl	800d910 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c05e:	bf00      	nop
 801c060:	3708      	adds	r7, #8
 801c062:	46bd      	mov	sp, r7
 801c064:	bd80      	pop	{r7, pc}

0801c066 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c066:	b580      	push	{r7, lr}
 801c068:	b082      	sub	sp, #8
 801c06a:	af00      	add	r7, sp, #0
 801c06c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	4618      	mov	r0, r3
 801c074:	f7f1 fc9a 	bl	800d9ac <osMutexRelease>
}
 801c078:	bf00      	nop
 801c07a:	3708      	adds	r7, #8
 801c07c:	46bd      	mov	sp, r7
 801c07e:	bd80      	pop	{r7, pc}

0801c080 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b08c      	sub	sp, #48	; 0x30
 801c084:	af00      	add	r7, sp, #0
 801c086:	60f8      	str	r0, [r7, #12]
 801c088:	60b9      	str	r1, [r7, #8]
 801c08a:	607a      	str	r2, [r7, #4]
 801c08c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c08e:	f107 0314 	add.w	r3, r7, #20
 801c092:	2200      	movs	r2, #0
 801c094:	601a      	str	r2, [r3, #0]
 801c096:	605a      	str	r2, [r3, #4]
 801c098:	609a      	str	r2, [r3, #8]
 801c09a:	60da      	str	r2, [r3, #12]
 801c09c:	611a      	str	r2, [r3, #16]
 801c09e:	615a      	str	r2, [r3, #20]
 801c0a0:	619a      	str	r2, [r3, #24]
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	617b      	str	r3, [r7, #20]
 801c0a6:	68bb      	ldr	r3, [r7, #8]
 801c0a8:	61bb      	str	r3, [r7, #24]
 801c0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0ac:	b21b      	sxth	r3, r3
 801c0ae:	83bb      	strh	r3, [r7, #28]
 801c0b0:	683b      	ldr	r3, [r7, #0]
 801c0b2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c0b4:	f107 0314 	add.w	r3, r7, #20
 801c0b8:	6879      	ldr	r1, [r7, #4]
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	f7f1 fbaf 	bl	800d81e <osThreadCreate>
 801c0c0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c0c2:	4618      	mov	r0, r3
 801c0c4:	3730      	adds	r7, #48	; 0x30
 801c0c6:	46bd      	mov	sp, r7
 801c0c8:	bd80      	pop	{r7, pc}
	...

0801c0cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c0d0:	4b04      	ldr	r3, [pc, #16]	; (801c0e4 <sys_arch_protect+0x18>)
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f7f1 fc19 	bl	800d910 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c0de:	2301      	movs	r3, #1
}
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	bd80      	pop	{r7, pc}
 801c0e4:	2000b360 	.word	0x2000b360

0801c0e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b082      	sub	sp, #8
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c0f0:	4b04      	ldr	r3, [pc, #16]	; (801c104 <sys_arch_unprotect+0x1c>)
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	4618      	mov	r0, r3
 801c0f6:	f7f1 fc59 	bl	800d9ac <osMutexRelease>
}
 801c0fa:	bf00      	nop
 801c0fc:	3708      	adds	r7, #8
 801c0fe:	46bd      	mov	sp, r7
 801c100:	bd80      	pop	{r7, pc}
 801c102:	bf00      	nop
 801c104:	2000b360 	.word	0x2000b360

0801c108 <__libc_init_array>:
 801c108:	b570      	push	{r4, r5, r6, lr}
 801c10a:	4e0d      	ldr	r6, [pc, #52]	; (801c140 <__libc_init_array+0x38>)
 801c10c:	4c0d      	ldr	r4, [pc, #52]	; (801c144 <__libc_init_array+0x3c>)
 801c10e:	1ba4      	subs	r4, r4, r6
 801c110:	10a4      	asrs	r4, r4, #2
 801c112:	2500      	movs	r5, #0
 801c114:	42a5      	cmp	r5, r4
 801c116:	d109      	bne.n	801c12c <__libc_init_array+0x24>
 801c118:	4e0b      	ldr	r6, [pc, #44]	; (801c148 <__libc_init_array+0x40>)
 801c11a:	4c0c      	ldr	r4, [pc, #48]	; (801c14c <__libc_init_array+0x44>)
 801c11c:	f000 ff7a 	bl	801d014 <_init>
 801c120:	1ba4      	subs	r4, r4, r6
 801c122:	10a4      	asrs	r4, r4, #2
 801c124:	2500      	movs	r5, #0
 801c126:	42a5      	cmp	r5, r4
 801c128:	d105      	bne.n	801c136 <__libc_init_array+0x2e>
 801c12a:	bd70      	pop	{r4, r5, r6, pc}
 801c12c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c130:	4798      	blx	r3
 801c132:	3501      	adds	r5, #1
 801c134:	e7ee      	b.n	801c114 <__libc_init_array+0xc>
 801c136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c13a:	4798      	blx	r3
 801c13c:	3501      	adds	r5, #1
 801c13e:	e7f2      	b.n	801c126 <__libc_init_array+0x1e>
 801c140:	08030ac4 	.word	0x08030ac4
 801c144:	08030ac4 	.word	0x08030ac4
 801c148:	08030ac4 	.word	0x08030ac4
 801c14c:	08030ac8 	.word	0x08030ac8

0801c150 <memcmp>:
 801c150:	b530      	push	{r4, r5, lr}
 801c152:	2400      	movs	r4, #0
 801c154:	42a2      	cmp	r2, r4
 801c156:	d101      	bne.n	801c15c <memcmp+0xc>
 801c158:	2000      	movs	r0, #0
 801c15a:	e007      	b.n	801c16c <memcmp+0x1c>
 801c15c:	5d03      	ldrb	r3, [r0, r4]
 801c15e:	3401      	adds	r4, #1
 801c160:	190d      	adds	r5, r1, r4
 801c162:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801c166:	42ab      	cmp	r3, r5
 801c168:	d0f4      	beq.n	801c154 <memcmp+0x4>
 801c16a:	1b58      	subs	r0, r3, r5
 801c16c:	bd30      	pop	{r4, r5, pc}

0801c16e <memcpy>:
 801c16e:	b510      	push	{r4, lr}
 801c170:	1e43      	subs	r3, r0, #1
 801c172:	440a      	add	r2, r1
 801c174:	4291      	cmp	r1, r2
 801c176:	d100      	bne.n	801c17a <memcpy+0xc>
 801c178:	bd10      	pop	{r4, pc}
 801c17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c17e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c182:	e7f7      	b.n	801c174 <memcpy+0x6>

0801c184 <memset>:
 801c184:	4402      	add	r2, r0
 801c186:	4603      	mov	r3, r0
 801c188:	4293      	cmp	r3, r2
 801c18a:	d100      	bne.n	801c18e <memset+0xa>
 801c18c:	4770      	bx	lr
 801c18e:	f803 1b01 	strb.w	r1, [r3], #1
 801c192:	e7f9      	b.n	801c188 <memset+0x4>

0801c194 <iprintf>:
 801c194:	b40f      	push	{r0, r1, r2, r3}
 801c196:	4b0a      	ldr	r3, [pc, #40]	; (801c1c0 <iprintf+0x2c>)
 801c198:	b513      	push	{r0, r1, r4, lr}
 801c19a:	681c      	ldr	r4, [r3, #0]
 801c19c:	b124      	cbz	r4, 801c1a8 <iprintf+0x14>
 801c19e:	69a3      	ldr	r3, [r4, #24]
 801c1a0:	b913      	cbnz	r3, 801c1a8 <iprintf+0x14>
 801c1a2:	4620      	mov	r0, r4
 801c1a4:	f000 f8a2 	bl	801c2ec <__sinit>
 801c1a8:	ab05      	add	r3, sp, #20
 801c1aa:	9a04      	ldr	r2, [sp, #16]
 801c1ac:	68a1      	ldr	r1, [r4, #8]
 801c1ae:	9301      	str	r3, [sp, #4]
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	f000 f9ff 	bl	801c5b4 <_vfiprintf_r>
 801c1b6:	b002      	add	sp, #8
 801c1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c1bc:	b004      	add	sp, #16
 801c1be:	4770      	bx	lr
 801c1c0:	2000005c 	.word	0x2000005c

0801c1c4 <rand>:
 801c1c4:	b538      	push	{r3, r4, r5, lr}
 801c1c6:	4b13      	ldr	r3, [pc, #76]	; (801c214 <rand+0x50>)
 801c1c8:	681c      	ldr	r4, [r3, #0]
 801c1ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c1cc:	b97b      	cbnz	r3, 801c1ee <rand+0x2a>
 801c1ce:	2018      	movs	r0, #24
 801c1d0:	f000 f916 	bl	801c400 <malloc>
 801c1d4:	4a10      	ldr	r2, [pc, #64]	; (801c218 <rand+0x54>)
 801c1d6:	4b11      	ldr	r3, [pc, #68]	; (801c21c <rand+0x58>)
 801c1d8:	63a0      	str	r0, [r4, #56]	; 0x38
 801c1da:	e9c0 2300 	strd	r2, r3, [r0]
 801c1de:	4b10      	ldr	r3, [pc, #64]	; (801c220 <rand+0x5c>)
 801c1e0:	6083      	str	r3, [r0, #8]
 801c1e2:	230b      	movs	r3, #11
 801c1e4:	8183      	strh	r3, [r0, #12]
 801c1e6:	2201      	movs	r2, #1
 801c1e8:	2300      	movs	r3, #0
 801c1ea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c1ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c1f0:	480c      	ldr	r0, [pc, #48]	; (801c224 <rand+0x60>)
 801c1f2:	690a      	ldr	r2, [r1, #16]
 801c1f4:	694b      	ldr	r3, [r1, #20]
 801c1f6:	4c0c      	ldr	r4, [pc, #48]	; (801c228 <rand+0x64>)
 801c1f8:	4350      	muls	r0, r2
 801c1fa:	fb04 0003 	mla	r0, r4, r3, r0
 801c1fe:	fba2 2304 	umull	r2, r3, r2, r4
 801c202:	4403      	add	r3, r0
 801c204:	1c54      	adds	r4, r2, #1
 801c206:	f143 0500 	adc.w	r5, r3, #0
 801c20a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801c20e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801c212:	bd38      	pop	{r3, r4, r5, pc}
 801c214:	2000005c 	.word	0x2000005c
 801c218:	abcd330e 	.word	0xabcd330e
 801c21c:	e66d1234 	.word	0xe66d1234
 801c220:	0005deec 	.word	0x0005deec
 801c224:	5851f42d 	.word	0x5851f42d
 801c228:	4c957f2d 	.word	0x4c957f2d

0801c22c <strchr>:
 801c22c:	b2c9      	uxtb	r1, r1
 801c22e:	4603      	mov	r3, r0
 801c230:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c234:	b11a      	cbz	r2, 801c23e <strchr+0x12>
 801c236:	428a      	cmp	r2, r1
 801c238:	d1f9      	bne.n	801c22e <strchr+0x2>
 801c23a:	4618      	mov	r0, r3
 801c23c:	4770      	bx	lr
 801c23e:	2900      	cmp	r1, #0
 801c240:	bf18      	it	ne
 801c242:	2300      	movne	r3, #0
 801c244:	e7f9      	b.n	801c23a <strchr+0xe>

0801c246 <strncmp>:
 801c246:	b510      	push	{r4, lr}
 801c248:	b16a      	cbz	r2, 801c266 <strncmp+0x20>
 801c24a:	3901      	subs	r1, #1
 801c24c:	1884      	adds	r4, r0, r2
 801c24e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801c252:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c256:	4293      	cmp	r3, r2
 801c258:	d103      	bne.n	801c262 <strncmp+0x1c>
 801c25a:	42a0      	cmp	r0, r4
 801c25c:	d001      	beq.n	801c262 <strncmp+0x1c>
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d1f5      	bne.n	801c24e <strncmp+0x8>
 801c262:	1a98      	subs	r0, r3, r2
 801c264:	bd10      	pop	{r4, pc}
 801c266:	4610      	mov	r0, r2
 801c268:	e7fc      	b.n	801c264 <strncmp+0x1e>
	...

0801c26c <std>:
 801c26c:	2300      	movs	r3, #0
 801c26e:	b510      	push	{r4, lr}
 801c270:	4604      	mov	r4, r0
 801c272:	e9c0 3300 	strd	r3, r3, [r0]
 801c276:	6083      	str	r3, [r0, #8]
 801c278:	8181      	strh	r1, [r0, #12]
 801c27a:	6643      	str	r3, [r0, #100]	; 0x64
 801c27c:	81c2      	strh	r2, [r0, #14]
 801c27e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c282:	6183      	str	r3, [r0, #24]
 801c284:	4619      	mov	r1, r3
 801c286:	2208      	movs	r2, #8
 801c288:	305c      	adds	r0, #92	; 0x5c
 801c28a:	f7ff ff7b 	bl	801c184 <memset>
 801c28e:	4b05      	ldr	r3, [pc, #20]	; (801c2a4 <std+0x38>)
 801c290:	6263      	str	r3, [r4, #36]	; 0x24
 801c292:	4b05      	ldr	r3, [pc, #20]	; (801c2a8 <std+0x3c>)
 801c294:	62a3      	str	r3, [r4, #40]	; 0x28
 801c296:	4b05      	ldr	r3, [pc, #20]	; (801c2ac <std+0x40>)
 801c298:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c29a:	4b05      	ldr	r3, [pc, #20]	; (801c2b0 <std+0x44>)
 801c29c:	6224      	str	r4, [r4, #32]
 801c29e:	6323      	str	r3, [r4, #48]	; 0x30
 801c2a0:	bd10      	pop	{r4, pc}
 801c2a2:	bf00      	nop
 801c2a4:	0801cb11 	.word	0x0801cb11
 801c2a8:	0801cb33 	.word	0x0801cb33
 801c2ac:	0801cb6b 	.word	0x0801cb6b
 801c2b0:	0801cb8f 	.word	0x0801cb8f

0801c2b4 <_cleanup_r>:
 801c2b4:	4901      	ldr	r1, [pc, #4]	; (801c2bc <_cleanup_r+0x8>)
 801c2b6:	f000 b885 	b.w	801c3c4 <_fwalk_reent>
 801c2ba:	bf00      	nop
 801c2bc:	0801ce69 	.word	0x0801ce69

0801c2c0 <__sfmoreglue>:
 801c2c0:	b570      	push	{r4, r5, r6, lr}
 801c2c2:	1e4a      	subs	r2, r1, #1
 801c2c4:	2568      	movs	r5, #104	; 0x68
 801c2c6:	4355      	muls	r5, r2
 801c2c8:	460e      	mov	r6, r1
 801c2ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c2ce:	f000 f8ed 	bl	801c4ac <_malloc_r>
 801c2d2:	4604      	mov	r4, r0
 801c2d4:	b140      	cbz	r0, 801c2e8 <__sfmoreglue+0x28>
 801c2d6:	2100      	movs	r1, #0
 801c2d8:	e9c0 1600 	strd	r1, r6, [r0]
 801c2dc:	300c      	adds	r0, #12
 801c2de:	60a0      	str	r0, [r4, #8]
 801c2e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c2e4:	f7ff ff4e 	bl	801c184 <memset>
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	bd70      	pop	{r4, r5, r6, pc}

0801c2ec <__sinit>:
 801c2ec:	6983      	ldr	r3, [r0, #24]
 801c2ee:	b510      	push	{r4, lr}
 801c2f0:	4604      	mov	r4, r0
 801c2f2:	bb33      	cbnz	r3, 801c342 <__sinit+0x56>
 801c2f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c2f8:	6503      	str	r3, [r0, #80]	; 0x50
 801c2fa:	4b12      	ldr	r3, [pc, #72]	; (801c344 <__sinit+0x58>)
 801c2fc:	4a12      	ldr	r2, [pc, #72]	; (801c348 <__sinit+0x5c>)
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	6282      	str	r2, [r0, #40]	; 0x28
 801c302:	4298      	cmp	r0, r3
 801c304:	bf04      	itt	eq
 801c306:	2301      	moveq	r3, #1
 801c308:	6183      	streq	r3, [r0, #24]
 801c30a:	f000 f81f 	bl	801c34c <__sfp>
 801c30e:	6060      	str	r0, [r4, #4]
 801c310:	4620      	mov	r0, r4
 801c312:	f000 f81b 	bl	801c34c <__sfp>
 801c316:	60a0      	str	r0, [r4, #8]
 801c318:	4620      	mov	r0, r4
 801c31a:	f000 f817 	bl	801c34c <__sfp>
 801c31e:	2200      	movs	r2, #0
 801c320:	60e0      	str	r0, [r4, #12]
 801c322:	2104      	movs	r1, #4
 801c324:	6860      	ldr	r0, [r4, #4]
 801c326:	f7ff ffa1 	bl	801c26c <std>
 801c32a:	2201      	movs	r2, #1
 801c32c:	2109      	movs	r1, #9
 801c32e:	68a0      	ldr	r0, [r4, #8]
 801c330:	f7ff ff9c 	bl	801c26c <std>
 801c334:	2202      	movs	r2, #2
 801c336:	2112      	movs	r1, #18
 801c338:	68e0      	ldr	r0, [r4, #12]
 801c33a:	f7ff ff97 	bl	801c26c <std>
 801c33e:	2301      	movs	r3, #1
 801c340:	61a3      	str	r3, [r4, #24]
 801c342:	bd10      	pop	{r4, pc}
 801c344:	08030a24 	.word	0x08030a24
 801c348:	0801c2b5 	.word	0x0801c2b5

0801c34c <__sfp>:
 801c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c34e:	4b1b      	ldr	r3, [pc, #108]	; (801c3bc <__sfp+0x70>)
 801c350:	681e      	ldr	r6, [r3, #0]
 801c352:	69b3      	ldr	r3, [r6, #24]
 801c354:	4607      	mov	r7, r0
 801c356:	b913      	cbnz	r3, 801c35e <__sfp+0x12>
 801c358:	4630      	mov	r0, r6
 801c35a:	f7ff ffc7 	bl	801c2ec <__sinit>
 801c35e:	3648      	adds	r6, #72	; 0x48
 801c360:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c364:	3b01      	subs	r3, #1
 801c366:	d503      	bpl.n	801c370 <__sfp+0x24>
 801c368:	6833      	ldr	r3, [r6, #0]
 801c36a:	b133      	cbz	r3, 801c37a <__sfp+0x2e>
 801c36c:	6836      	ldr	r6, [r6, #0]
 801c36e:	e7f7      	b.n	801c360 <__sfp+0x14>
 801c370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c374:	b16d      	cbz	r5, 801c392 <__sfp+0x46>
 801c376:	3468      	adds	r4, #104	; 0x68
 801c378:	e7f4      	b.n	801c364 <__sfp+0x18>
 801c37a:	2104      	movs	r1, #4
 801c37c:	4638      	mov	r0, r7
 801c37e:	f7ff ff9f 	bl	801c2c0 <__sfmoreglue>
 801c382:	6030      	str	r0, [r6, #0]
 801c384:	2800      	cmp	r0, #0
 801c386:	d1f1      	bne.n	801c36c <__sfp+0x20>
 801c388:	230c      	movs	r3, #12
 801c38a:	603b      	str	r3, [r7, #0]
 801c38c:	4604      	mov	r4, r0
 801c38e:	4620      	mov	r0, r4
 801c390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c392:	4b0b      	ldr	r3, [pc, #44]	; (801c3c0 <__sfp+0x74>)
 801c394:	6665      	str	r5, [r4, #100]	; 0x64
 801c396:	e9c4 5500 	strd	r5, r5, [r4]
 801c39a:	60a5      	str	r5, [r4, #8]
 801c39c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c3a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c3a4:	2208      	movs	r2, #8
 801c3a6:	4629      	mov	r1, r5
 801c3a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c3ac:	f7ff feea 	bl	801c184 <memset>
 801c3b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c3b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c3b8:	e7e9      	b.n	801c38e <__sfp+0x42>
 801c3ba:	bf00      	nop
 801c3bc:	08030a24 	.word	0x08030a24
 801c3c0:	ffff0001 	.word	0xffff0001

0801c3c4 <_fwalk_reent>:
 801c3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3c8:	4680      	mov	r8, r0
 801c3ca:	4689      	mov	r9, r1
 801c3cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c3d0:	2600      	movs	r6, #0
 801c3d2:	b914      	cbnz	r4, 801c3da <_fwalk_reent+0x16>
 801c3d4:	4630      	mov	r0, r6
 801c3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c3de:	3f01      	subs	r7, #1
 801c3e0:	d501      	bpl.n	801c3e6 <_fwalk_reent+0x22>
 801c3e2:	6824      	ldr	r4, [r4, #0]
 801c3e4:	e7f5      	b.n	801c3d2 <_fwalk_reent+0xe>
 801c3e6:	89ab      	ldrh	r3, [r5, #12]
 801c3e8:	2b01      	cmp	r3, #1
 801c3ea:	d907      	bls.n	801c3fc <_fwalk_reent+0x38>
 801c3ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c3f0:	3301      	adds	r3, #1
 801c3f2:	d003      	beq.n	801c3fc <_fwalk_reent+0x38>
 801c3f4:	4629      	mov	r1, r5
 801c3f6:	4640      	mov	r0, r8
 801c3f8:	47c8      	blx	r9
 801c3fa:	4306      	orrs	r6, r0
 801c3fc:	3568      	adds	r5, #104	; 0x68
 801c3fe:	e7ee      	b.n	801c3de <_fwalk_reent+0x1a>

0801c400 <malloc>:
 801c400:	4b02      	ldr	r3, [pc, #8]	; (801c40c <malloc+0xc>)
 801c402:	4601      	mov	r1, r0
 801c404:	6818      	ldr	r0, [r3, #0]
 801c406:	f000 b851 	b.w	801c4ac <_malloc_r>
 801c40a:	bf00      	nop
 801c40c:	2000005c 	.word	0x2000005c

0801c410 <_free_r>:
 801c410:	b538      	push	{r3, r4, r5, lr}
 801c412:	4605      	mov	r5, r0
 801c414:	2900      	cmp	r1, #0
 801c416:	d045      	beq.n	801c4a4 <_free_r+0x94>
 801c418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c41c:	1f0c      	subs	r4, r1, #4
 801c41e:	2b00      	cmp	r3, #0
 801c420:	bfb8      	it	lt
 801c422:	18e4      	addlt	r4, r4, r3
 801c424:	f000 fdc0 	bl	801cfa8 <__malloc_lock>
 801c428:	4a1f      	ldr	r2, [pc, #124]	; (801c4a8 <_free_r+0x98>)
 801c42a:	6813      	ldr	r3, [r2, #0]
 801c42c:	4610      	mov	r0, r2
 801c42e:	b933      	cbnz	r3, 801c43e <_free_r+0x2e>
 801c430:	6063      	str	r3, [r4, #4]
 801c432:	6014      	str	r4, [r2, #0]
 801c434:	4628      	mov	r0, r5
 801c436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c43a:	f000 bdb6 	b.w	801cfaa <__malloc_unlock>
 801c43e:	42a3      	cmp	r3, r4
 801c440:	d90c      	bls.n	801c45c <_free_r+0x4c>
 801c442:	6821      	ldr	r1, [r4, #0]
 801c444:	1862      	adds	r2, r4, r1
 801c446:	4293      	cmp	r3, r2
 801c448:	bf04      	itt	eq
 801c44a:	681a      	ldreq	r2, [r3, #0]
 801c44c:	685b      	ldreq	r3, [r3, #4]
 801c44e:	6063      	str	r3, [r4, #4]
 801c450:	bf04      	itt	eq
 801c452:	1852      	addeq	r2, r2, r1
 801c454:	6022      	streq	r2, [r4, #0]
 801c456:	6004      	str	r4, [r0, #0]
 801c458:	e7ec      	b.n	801c434 <_free_r+0x24>
 801c45a:	4613      	mov	r3, r2
 801c45c:	685a      	ldr	r2, [r3, #4]
 801c45e:	b10a      	cbz	r2, 801c464 <_free_r+0x54>
 801c460:	42a2      	cmp	r2, r4
 801c462:	d9fa      	bls.n	801c45a <_free_r+0x4a>
 801c464:	6819      	ldr	r1, [r3, #0]
 801c466:	1858      	adds	r0, r3, r1
 801c468:	42a0      	cmp	r0, r4
 801c46a:	d10b      	bne.n	801c484 <_free_r+0x74>
 801c46c:	6820      	ldr	r0, [r4, #0]
 801c46e:	4401      	add	r1, r0
 801c470:	1858      	adds	r0, r3, r1
 801c472:	4282      	cmp	r2, r0
 801c474:	6019      	str	r1, [r3, #0]
 801c476:	d1dd      	bne.n	801c434 <_free_r+0x24>
 801c478:	6810      	ldr	r0, [r2, #0]
 801c47a:	6852      	ldr	r2, [r2, #4]
 801c47c:	605a      	str	r2, [r3, #4]
 801c47e:	4401      	add	r1, r0
 801c480:	6019      	str	r1, [r3, #0]
 801c482:	e7d7      	b.n	801c434 <_free_r+0x24>
 801c484:	d902      	bls.n	801c48c <_free_r+0x7c>
 801c486:	230c      	movs	r3, #12
 801c488:	602b      	str	r3, [r5, #0]
 801c48a:	e7d3      	b.n	801c434 <_free_r+0x24>
 801c48c:	6820      	ldr	r0, [r4, #0]
 801c48e:	1821      	adds	r1, r4, r0
 801c490:	428a      	cmp	r2, r1
 801c492:	bf04      	itt	eq
 801c494:	6811      	ldreq	r1, [r2, #0]
 801c496:	6852      	ldreq	r2, [r2, #4]
 801c498:	6062      	str	r2, [r4, #4]
 801c49a:	bf04      	itt	eq
 801c49c:	1809      	addeq	r1, r1, r0
 801c49e:	6021      	streq	r1, [r4, #0]
 801c4a0:	605c      	str	r4, [r3, #4]
 801c4a2:	e7c7      	b.n	801c434 <_free_r+0x24>
 801c4a4:	bd38      	pop	{r3, r4, r5, pc}
 801c4a6:	bf00      	nop
 801c4a8:	20004658 	.word	0x20004658

0801c4ac <_malloc_r>:
 801c4ac:	b570      	push	{r4, r5, r6, lr}
 801c4ae:	1ccd      	adds	r5, r1, #3
 801c4b0:	f025 0503 	bic.w	r5, r5, #3
 801c4b4:	3508      	adds	r5, #8
 801c4b6:	2d0c      	cmp	r5, #12
 801c4b8:	bf38      	it	cc
 801c4ba:	250c      	movcc	r5, #12
 801c4bc:	2d00      	cmp	r5, #0
 801c4be:	4606      	mov	r6, r0
 801c4c0:	db01      	blt.n	801c4c6 <_malloc_r+0x1a>
 801c4c2:	42a9      	cmp	r1, r5
 801c4c4:	d903      	bls.n	801c4ce <_malloc_r+0x22>
 801c4c6:	230c      	movs	r3, #12
 801c4c8:	6033      	str	r3, [r6, #0]
 801c4ca:	2000      	movs	r0, #0
 801c4cc:	bd70      	pop	{r4, r5, r6, pc}
 801c4ce:	f000 fd6b 	bl	801cfa8 <__malloc_lock>
 801c4d2:	4a21      	ldr	r2, [pc, #132]	; (801c558 <_malloc_r+0xac>)
 801c4d4:	6814      	ldr	r4, [r2, #0]
 801c4d6:	4621      	mov	r1, r4
 801c4d8:	b991      	cbnz	r1, 801c500 <_malloc_r+0x54>
 801c4da:	4c20      	ldr	r4, [pc, #128]	; (801c55c <_malloc_r+0xb0>)
 801c4dc:	6823      	ldr	r3, [r4, #0]
 801c4de:	b91b      	cbnz	r3, 801c4e8 <_malloc_r+0x3c>
 801c4e0:	4630      	mov	r0, r6
 801c4e2:	f000 fb05 	bl	801caf0 <_sbrk_r>
 801c4e6:	6020      	str	r0, [r4, #0]
 801c4e8:	4629      	mov	r1, r5
 801c4ea:	4630      	mov	r0, r6
 801c4ec:	f000 fb00 	bl	801caf0 <_sbrk_r>
 801c4f0:	1c43      	adds	r3, r0, #1
 801c4f2:	d124      	bne.n	801c53e <_malloc_r+0x92>
 801c4f4:	230c      	movs	r3, #12
 801c4f6:	6033      	str	r3, [r6, #0]
 801c4f8:	4630      	mov	r0, r6
 801c4fa:	f000 fd56 	bl	801cfaa <__malloc_unlock>
 801c4fe:	e7e4      	b.n	801c4ca <_malloc_r+0x1e>
 801c500:	680b      	ldr	r3, [r1, #0]
 801c502:	1b5b      	subs	r3, r3, r5
 801c504:	d418      	bmi.n	801c538 <_malloc_r+0x8c>
 801c506:	2b0b      	cmp	r3, #11
 801c508:	d90f      	bls.n	801c52a <_malloc_r+0x7e>
 801c50a:	600b      	str	r3, [r1, #0]
 801c50c:	50cd      	str	r5, [r1, r3]
 801c50e:	18cc      	adds	r4, r1, r3
 801c510:	4630      	mov	r0, r6
 801c512:	f000 fd4a 	bl	801cfaa <__malloc_unlock>
 801c516:	f104 000b 	add.w	r0, r4, #11
 801c51a:	1d23      	adds	r3, r4, #4
 801c51c:	f020 0007 	bic.w	r0, r0, #7
 801c520:	1ac3      	subs	r3, r0, r3
 801c522:	d0d3      	beq.n	801c4cc <_malloc_r+0x20>
 801c524:	425a      	negs	r2, r3
 801c526:	50e2      	str	r2, [r4, r3]
 801c528:	e7d0      	b.n	801c4cc <_malloc_r+0x20>
 801c52a:	428c      	cmp	r4, r1
 801c52c:	684b      	ldr	r3, [r1, #4]
 801c52e:	bf16      	itet	ne
 801c530:	6063      	strne	r3, [r4, #4]
 801c532:	6013      	streq	r3, [r2, #0]
 801c534:	460c      	movne	r4, r1
 801c536:	e7eb      	b.n	801c510 <_malloc_r+0x64>
 801c538:	460c      	mov	r4, r1
 801c53a:	6849      	ldr	r1, [r1, #4]
 801c53c:	e7cc      	b.n	801c4d8 <_malloc_r+0x2c>
 801c53e:	1cc4      	adds	r4, r0, #3
 801c540:	f024 0403 	bic.w	r4, r4, #3
 801c544:	42a0      	cmp	r0, r4
 801c546:	d005      	beq.n	801c554 <_malloc_r+0xa8>
 801c548:	1a21      	subs	r1, r4, r0
 801c54a:	4630      	mov	r0, r6
 801c54c:	f000 fad0 	bl	801caf0 <_sbrk_r>
 801c550:	3001      	adds	r0, #1
 801c552:	d0cf      	beq.n	801c4f4 <_malloc_r+0x48>
 801c554:	6025      	str	r5, [r4, #0]
 801c556:	e7db      	b.n	801c510 <_malloc_r+0x64>
 801c558:	20004658 	.word	0x20004658
 801c55c:	2000465c 	.word	0x2000465c

0801c560 <__sfputc_r>:
 801c560:	6893      	ldr	r3, [r2, #8]
 801c562:	3b01      	subs	r3, #1
 801c564:	2b00      	cmp	r3, #0
 801c566:	b410      	push	{r4}
 801c568:	6093      	str	r3, [r2, #8]
 801c56a:	da08      	bge.n	801c57e <__sfputc_r+0x1e>
 801c56c:	6994      	ldr	r4, [r2, #24]
 801c56e:	42a3      	cmp	r3, r4
 801c570:	db01      	blt.n	801c576 <__sfputc_r+0x16>
 801c572:	290a      	cmp	r1, #10
 801c574:	d103      	bne.n	801c57e <__sfputc_r+0x1e>
 801c576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c57a:	f000 bb0d 	b.w	801cb98 <__swbuf_r>
 801c57e:	6813      	ldr	r3, [r2, #0]
 801c580:	1c58      	adds	r0, r3, #1
 801c582:	6010      	str	r0, [r2, #0]
 801c584:	7019      	strb	r1, [r3, #0]
 801c586:	4608      	mov	r0, r1
 801c588:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c58c:	4770      	bx	lr

0801c58e <__sfputs_r>:
 801c58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c590:	4606      	mov	r6, r0
 801c592:	460f      	mov	r7, r1
 801c594:	4614      	mov	r4, r2
 801c596:	18d5      	adds	r5, r2, r3
 801c598:	42ac      	cmp	r4, r5
 801c59a:	d101      	bne.n	801c5a0 <__sfputs_r+0x12>
 801c59c:	2000      	movs	r0, #0
 801c59e:	e007      	b.n	801c5b0 <__sfputs_r+0x22>
 801c5a0:	463a      	mov	r2, r7
 801c5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5a6:	4630      	mov	r0, r6
 801c5a8:	f7ff ffda 	bl	801c560 <__sfputc_r>
 801c5ac:	1c43      	adds	r3, r0, #1
 801c5ae:	d1f3      	bne.n	801c598 <__sfputs_r+0xa>
 801c5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c5b4 <_vfiprintf_r>:
 801c5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5b8:	460c      	mov	r4, r1
 801c5ba:	b09d      	sub	sp, #116	; 0x74
 801c5bc:	4617      	mov	r7, r2
 801c5be:	461d      	mov	r5, r3
 801c5c0:	4606      	mov	r6, r0
 801c5c2:	b118      	cbz	r0, 801c5cc <_vfiprintf_r+0x18>
 801c5c4:	6983      	ldr	r3, [r0, #24]
 801c5c6:	b90b      	cbnz	r3, 801c5cc <_vfiprintf_r+0x18>
 801c5c8:	f7ff fe90 	bl	801c2ec <__sinit>
 801c5cc:	4b7c      	ldr	r3, [pc, #496]	; (801c7c0 <_vfiprintf_r+0x20c>)
 801c5ce:	429c      	cmp	r4, r3
 801c5d0:	d158      	bne.n	801c684 <_vfiprintf_r+0xd0>
 801c5d2:	6874      	ldr	r4, [r6, #4]
 801c5d4:	89a3      	ldrh	r3, [r4, #12]
 801c5d6:	0718      	lsls	r0, r3, #28
 801c5d8:	d55e      	bpl.n	801c698 <_vfiprintf_r+0xe4>
 801c5da:	6923      	ldr	r3, [r4, #16]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d05b      	beq.n	801c698 <_vfiprintf_r+0xe4>
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	9309      	str	r3, [sp, #36]	; 0x24
 801c5e4:	2320      	movs	r3, #32
 801c5e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c5ea:	2330      	movs	r3, #48	; 0x30
 801c5ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c5f0:	9503      	str	r5, [sp, #12]
 801c5f2:	f04f 0b01 	mov.w	fp, #1
 801c5f6:	46b8      	mov	r8, r7
 801c5f8:	4645      	mov	r5, r8
 801c5fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c5fe:	b10b      	cbz	r3, 801c604 <_vfiprintf_r+0x50>
 801c600:	2b25      	cmp	r3, #37	; 0x25
 801c602:	d154      	bne.n	801c6ae <_vfiprintf_r+0xfa>
 801c604:	ebb8 0a07 	subs.w	sl, r8, r7
 801c608:	d00b      	beq.n	801c622 <_vfiprintf_r+0x6e>
 801c60a:	4653      	mov	r3, sl
 801c60c:	463a      	mov	r2, r7
 801c60e:	4621      	mov	r1, r4
 801c610:	4630      	mov	r0, r6
 801c612:	f7ff ffbc 	bl	801c58e <__sfputs_r>
 801c616:	3001      	adds	r0, #1
 801c618:	f000 80c2 	beq.w	801c7a0 <_vfiprintf_r+0x1ec>
 801c61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c61e:	4453      	add	r3, sl
 801c620:	9309      	str	r3, [sp, #36]	; 0x24
 801c622:	f898 3000 	ldrb.w	r3, [r8]
 801c626:	2b00      	cmp	r3, #0
 801c628:	f000 80ba 	beq.w	801c7a0 <_vfiprintf_r+0x1ec>
 801c62c:	2300      	movs	r3, #0
 801c62e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c636:	9304      	str	r3, [sp, #16]
 801c638:	9307      	str	r3, [sp, #28]
 801c63a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c63e:	931a      	str	r3, [sp, #104]	; 0x68
 801c640:	46a8      	mov	r8, r5
 801c642:	2205      	movs	r2, #5
 801c644:	f818 1b01 	ldrb.w	r1, [r8], #1
 801c648:	485e      	ldr	r0, [pc, #376]	; (801c7c4 <_vfiprintf_r+0x210>)
 801c64a:	f7eb fe11 	bl	8008270 <memchr>
 801c64e:	9b04      	ldr	r3, [sp, #16]
 801c650:	bb78      	cbnz	r0, 801c6b2 <_vfiprintf_r+0xfe>
 801c652:	06d9      	lsls	r1, r3, #27
 801c654:	bf44      	itt	mi
 801c656:	2220      	movmi	r2, #32
 801c658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c65c:	071a      	lsls	r2, r3, #28
 801c65e:	bf44      	itt	mi
 801c660:	222b      	movmi	r2, #43	; 0x2b
 801c662:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c666:	782a      	ldrb	r2, [r5, #0]
 801c668:	2a2a      	cmp	r2, #42	; 0x2a
 801c66a:	d02a      	beq.n	801c6c2 <_vfiprintf_r+0x10e>
 801c66c:	9a07      	ldr	r2, [sp, #28]
 801c66e:	46a8      	mov	r8, r5
 801c670:	2000      	movs	r0, #0
 801c672:	250a      	movs	r5, #10
 801c674:	4641      	mov	r1, r8
 801c676:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c67a:	3b30      	subs	r3, #48	; 0x30
 801c67c:	2b09      	cmp	r3, #9
 801c67e:	d969      	bls.n	801c754 <_vfiprintf_r+0x1a0>
 801c680:	b360      	cbz	r0, 801c6dc <_vfiprintf_r+0x128>
 801c682:	e024      	b.n	801c6ce <_vfiprintf_r+0x11a>
 801c684:	4b50      	ldr	r3, [pc, #320]	; (801c7c8 <_vfiprintf_r+0x214>)
 801c686:	429c      	cmp	r4, r3
 801c688:	d101      	bne.n	801c68e <_vfiprintf_r+0xda>
 801c68a:	68b4      	ldr	r4, [r6, #8]
 801c68c:	e7a2      	b.n	801c5d4 <_vfiprintf_r+0x20>
 801c68e:	4b4f      	ldr	r3, [pc, #316]	; (801c7cc <_vfiprintf_r+0x218>)
 801c690:	429c      	cmp	r4, r3
 801c692:	bf08      	it	eq
 801c694:	68f4      	ldreq	r4, [r6, #12]
 801c696:	e79d      	b.n	801c5d4 <_vfiprintf_r+0x20>
 801c698:	4621      	mov	r1, r4
 801c69a:	4630      	mov	r0, r6
 801c69c:	f000 fae0 	bl	801cc60 <__swsetup_r>
 801c6a0:	2800      	cmp	r0, #0
 801c6a2:	d09d      	beq.n	801c5e0 <_vfiprintf_r+0x2c>
 801c6a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c6a8:	b01d      	add	sp, #116	; 0x74
 801c6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6ae:	46a8      	mov	r8, r5
 801c6b0:	e7a2      	b.n	801c5f8 <_vfiprintf_r+0x44>
 801c6b2:	4a44      	ldr	r2, [pc, #272]	; (801c7c4 <_vfiprintf_r+0x210>)
 801c6b4:	1a80      	subs	r0, r0, r2
 801c6b6:	fa0b f000 	lsl.w	r0, fp, r0
 801c6ba:	4318      	orrs	r0, r3
 801c6bc:	9004      	str	r0, [sp, #16]
 801c6be:	4645      	mov	r5, r8
 801c6c0:	e7be      	b.n	801c640 <_vfiprintf_r+0x8c>
 801c6c2:	9a03      	ldr	r2, [sp, #12]
 801c6c4:	1d11      	adds	r1, r2, #4
 801c6c6:	6812      	ldr	r2, [r2, #0]
 801c6c8:	9103      	str	r1, [sp, #12]
 801c6ca:	2a00      	cmp	r2, #0
 801c6cc:	db01      	blt.n	801c6d2 <_vfiprintf_r+0x11e>
 801c6ce:	9207      	str	r2, [sp, #28]
 801c6d0:	e004      	b.n	801c6dc <_vfiprintf_r+0x128>
 801c6d2:	4252      	negs	r2, r2
 801c6d4:	f043 0302 	orr.w	r3, r3, #2
 801c6d8:	9207      	str	r2, [sp, #28]
 801c6da:	9304      	str	r3, [sp, #16]
 801c6dc:	f898 3000 	ldrb.w	r3, [r8]
 801c6e0:	2b2e      	cmp	r3, #46	; 0x2e
 801c6e2:	d10e      	bne.n	801c702 <_vfiprintf_r+0x14e>
 801c6e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c6e8:	2b2a      	cmp	r3, #42	; 0x2a
 801c6ea:	d138      	bne.n	801c75e <_vfiprintf_r+0x1aa>
 801c6ec:	9b03      	ldr	r3, [sp, #12]
 801c6ee:	1d1a      	adds	r2, r3, #4
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	9203      	str	r2, [sp, #12]
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	bfb8      	it	lt
 801c6f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c6fc:	f108 0802 	add.w	r8, r8, #2
 801c700:	9305      	str	r3, [sp, #20]
 801c702:	4d33      	ldr	r5, [pc, #204]	; (801c7d0 <_vfiprintf_r+0x21c>)
 801c704:	f898 1000 	ldrb.w	r1, [r8]
 801c708:	2203      	movs	r2, #3
 801c70a:	4628      	mov	r0, r5
 801c70c:	f7eb fdb0 	bl	8008270 <memchr>
 801c710:	b140      	cbz	r0, 801c724 <_vfiprintf_r+0x170>
 801c712:	2340      	movs	r3, #64	; 0x40
 801c714:	1b40      	subs	r0, r0, r5
 801c716:	fa03 f000 	lsl.w	r0, r3, r0
 801c71a:	9b04      	ldr	r3, [sp, #16]
 801c71c:	4303      	orrs	r3, r0
 801c71e:	f108 0801 	add.w	r8, r8, #1
 801c722:	9304      	str	r3, [sp, #16]
 801c724:	f898 1000 	ldrb.w	r1, [r8]
 801c728:	482a      	ldr	r0, [pc, #168]	; (801c7d4 <_vfiprintf_r+0x220>)
 801c72a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c72e:	2206      	movs	r2, #6
 801c730:	f108 0701 	add.w	r7, r8, #1
 801c734:	f7eb fd9c 	bl	8008270 <memchr>
 801c738:	2800      	cmp	r0, #0
 801c73a:	d037      	beq.n	801c7ac <_vfiprintf_r+0x1f8>
 801c73c:	4b26      	ldr	r3, [pc, #152]	; (801c7d8 <_vfiprintf_r+0x224>)
 801c73e:	bb1b      	cbnz	r3, 801c788 <_vfiprintf_r+0x1d4>
 801c740:	9b03      	ldr	r3, [sp, #12]
 801c742:	3307      	adds	r3, #7
 801c744:	f023 0307 	bic.w	r3, r3, #7
 801c748:	3308      	adds	r3, #8
 801c74a:	9303      	str	r3, [sp, #12]
 801c74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c74e:	444b      	add	r3, r9
 801c750:	9309      	str	r3, [sp, #36]	; 0x24
 801c752:	e750      	b.n	801c5f6 <_vfiprintf_r+0x42>
 801c754:	fb05 3202 	mla	r2, r5, r2, r3
 801c758:	2001      	movs	r0, #1
 801c75a:	4688      	mov	r8, r1
 801c75c:	e78a      	b.n	801c674 <_vfiprintf_r+0xc0>
 801c75e:	2300      	movs	r3, #0
 801c760:	f108 0801 	add.w	r8, r8, #1
 801c764:	9305      	str	r3, [sp, #20]
 801c766:	4619      	mov	r1, r3
 801c768:	250a      	movs	r5, #10
 801c76a:	4640      	mov	r0, r8
 801c76c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c770:	3a30      	subs	r2, #48	; 0x30
 801c772:	2a09      	cmp	r2, #9
 801c774:	d903      	bls.n	801c77e <_vfiprintf_r+0x1ca>
 801c776:	2b00      	cmp	r3, #0
 801c778:	d0c3      	beq.n	801c702 <_vfiprintf_r+0x14e>
 801c77a:	9105      	str	r1, [sp, #20]
 801c77c:	e7c1      	b.n	801c702 <_vfiprintf_r+0x14e>
 801c77e:	fb05 2101 	mla	r1, r5, r1, r2
 801c782:	2301      	movs	r3, #1
 801c784:	4680      	mov	r8, r0
 801c786:	e7f0      	b.n	801c76a <_vfiprintf_r+0x1b6>
 801c788:	ab03      	add	r3, sp, #12
 801c78a:	9300      	str	r3, [sp, #0]
 801c78c:	4622      	mov	r2, r4
 801c78e:	4b13      	ldr	r3, [pc, #76]	; (801c7dc <_vfiprintf_r+0x228>)
 801c790:	a904      	add	r1, sp, #16
 801c792:	4630      	mov	r0, r6
 801c794:	f3af 8000 	nop.w
 801c798:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801c79c:	4681      	mov	r9, r0
 801c79e:	d1d5      	bne.n	801c74c <_vfiprintf_r+0x198>
 801c7a0:	89a3      	ldrh	r3, [r4, #12]
 801c7a2:	065b      	lsls	r3, r3, #25
 801c7a4:	f53f af7e 	bmi.w	801c6a4 <_vfiprintf_r+0xf0>
 801c7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c7aa:	e77d      	b.n	801c6a8 <_vfiprintf_r+0xf4>
 801c7ac:	ab03      	add	r3, sp, #12
 801c7ae:	9300      	str	r3, [sp, #0]
 801c7b0:	4622      	mov	r2, r4
 801c7b2:	4b0a      	ldr	r3, [pc, #40]	; (801c7dc <_vfiprintf_r+0x228>)
 801c7b4:	a904      	add	r1, sp, #16
 801c7b6:	4630      	mov	r0, r6
 801c7b8:	f000 f888 	bl	801c8cc <_printf_i>
 801c7bc:	e7ec      	b.n	801c798 <_vfiprintf_r+0x1e4>
 801c7be:	bf00      	nop
 801c7c0:	08030a48 	.word	0x08030a48
 801c7c4:	08030a88 	.word	0x08030a88
 801c7c8:	08030a68 	.word	0x08030a68
 801c7cc:	08030a28 	.word	0x08030a28
 801c7d0:	08030a8e 	.word	0x08030a8e
 801c7d4:	08030a92 	.word	0x08030a92
 801c7d8:	00000000 	.word	0x00000000
 801c7dc:	0801c58f 	.word	0x0801c58f

0801c7e0 <_printf_common>:
 801c7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7e4:	4691      	mov	r9, r2
 801c7e6:	461f      	mov	r7, r3
 801c7e8:	688a      	ldr	r2, [r1, #8]
 801c7ea:	690b      	ldr	r3, [r1, #16]
 801c7ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c7f0:	4293      	cmp	r3, r2
 801c7f2:	bfb8      	it	lt
 801c7f4:	4613      	movlt	r3, r2
 801c7f6:	f8c9 3000 	str.w	r3, [r9]
 801c7fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c7fe:	4606      	mov	r6, r0
 801c800:	460c      	mov	r4, r1
 801c802:	b112      	cbz	r2, 801c80a <_printf_common+0x2a>
 801c804:	3301      	adds	r3, #1
 801c806:	f8c9 3000 	str.w	r3, [r9]
 801c80a:	6823      	ldr	r3, [r4, #0]
 801c80c:	0699      	lsls	r1, r3, #26
 801c80e:	bf42      	ittt	mi
 801c810:	f8d9 3000 	ldrmi.w	r3, [r9]
 801c814:	3302      	addmi	r3, #2
 801c816:	f8c9 3000 	strmi.w	r3, [r9]
 801c81a:	6825      	ldr	r5, [r4, #0]
 801c81c:	f015 0506 	ands.w	r5, r5, #6
 801c820:	d107      	bne.n	801c832 <_printf_common+0x52>
 801c822:	f104 0a19 	add.w	sl, r4, #25
 801c826:	68e3      	ldr	r3, [r4, #12]
 801c828:	f8d9 2000 	ldr.w	r2, [r9]
 801c82c:	1a9b      	subs	r3, r3, r2
 801c82e:	42ab      	cmp	r3, r5
 801c830:	dc28      	bgt.n	801c884 <_printf_common+0xa4>
 801c832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801c836:	6822      	ldr	r2, [r4, #0]
 801c838:	3300      	adds	r3, #0
 801c83a:	bf18      	it	ne
 801c83c:	2301      	movne	r3, #1
 801c83e:	0692      	lsls	r2, r2, #26
 801c840:	d42d      	bmi.n	801c89e <_printf_common+0xbe>
 801c842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c846:	4639      	mov	r1, r7
 801c848:	4630      	mov	r0, r6
 801c84a:	47c0      	blx	r8
 801c84c:	3001      	adds	r0, #1
 801c84e:	d020      	beq.n	801c892 <_printf_common+0xb2>
 801c850:	6823      	ldr	r3, [r4, #0]
 801c852:	68e5      	ldr	r5, [r4, #12]
 801c854:	f8d9 2000 	ldr.w	r2, [r9]
 801c858:	f003 0306 	and.w	r3, r3, #6
 801c85c:	2b04      	cmp	r3, #4
 801c85e:	bf08      	it	eq
 801c860:	1aad      	subeq	r5, r5, r2
 801c862:	68a3      	ldr	r3, [r4, #8]
 801c864:	6922      	ldr	r2, [r4, #16]
 801c866:	bf0c      	ite	eq
 801c868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c86c:	2500      	movne	r5, #0
 801c86e:	4293      	cmp	r3, r2
 801c870:	bfc4      	itt	gt
 801c872:	1a9b      	subgt	r3, r3, r2
 801c874:	18ed      	addgt	r5, r5, r3
 801c876:	f04f 0900 	mov.w	r9, #0
 801c87a:	341a      	adds	r4, #26
 801c87c:	454d      	cmp	r5, r9
 801c87e:	d11a      	bne.n	801c8b6 <_printf_common+0xd6>
 801c880:	2000      	movs	r0, #0
 801c882:	e008      	b.n	801c896 <_printf_common+0xb6>
 801c884:	2301      	movs	r3, #1
 801c886:	4652      	mov	r2, sl
 801c888:	4639      	mov	r1, r7
 801c88a:	4630      	mov	r0, r6
 801c88c:	47c0      	blx	r8
 801c88e:	3001      	adds	r0, #1
 801c890:	d103      	bne.n	801c89a <_printf_common+0xba>
 801c892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c89a:	3501      	adds	r5, #1
 801c89c:	e7c3      	b.n	801c826 <_printf_common+0x46>
 801c89e:	18e1      	adds	r1, r4, r3
 801c8a0:	1c5a      	adds	r2, r3, #1
 801c8a2:	2030      	movs	r0, #48	; 0x30
 801c8a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c8a8:	4422      	add	r2, r4
 801c8aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c8ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c8b2:	3302      	adds	r3, #2
 801c8b4:	e7c5      	b.n	801c842 <_printf_common+0x62>
 801c8b6:	2301      	movs	r3, #1
 801c8b8:	4622      	mov	r2, r4
 801c8ba:	4639      	mov	r1, r7
 801c8bc:	4630      	mov	r0, r6
 801c8be:	47c0      	blx	r8
 801c8c0:	3001      	adds	r0, #1
 801c8c2:	d0e6      	beq.n	801c892 <_printf_common+0xb2>
 801c8c4:	f109 0901 	add.w	r9, r9, #1
 801c8c8:	e7d8      	b.n	801c87c <_printf_common+0x9c>
	...

0801c8cc <_printf_i>:
 801c8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c8d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801c8d4:	460c      	mov	r4, r1
 801c8d6:	7e09      	ldrb	r1, [r1, #24]
 801c8d8:	b085      	sub	sp, #20
 801c8da:	296e      	cmp	r1, #110	; 0x6e
 801c8dc:	4617      	mov	r7, r2
 801c8de:	4606      	mov	r6, r0
 801c8e0:	4698      	mov	r8, r3
 801c8e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c8e4:	f000 80b3 	beq.w	801ca4e <_printf_i+0x182>
 801c8e8:	d822      	bhi.n	801c930 <_printf_i+0x64>
 801c8ea:	2963      	cmp	r1, #99	; 0x63
 801c8ec:	d036      	beq.n	801c95c <_printf_i+0x90>
 801c8ee:	d80a      	bhi.n	801c906 <_printf_i+0x3a>
 801c8f0:	2900      	cmp	r1, #0
 801c8f2:	f000 80b9 	beq.w	801ca68 <_printf_i+0x19c>
 801c8f6:	2958      	cmp	r1, #88	; 0x58
 801c8f8:	f000 8083 	beq.w	801ca02 <_printf_i+0x136>
 801c8fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c900:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801c904:	e032      	b.n	801c96c <_printf_i+0xa0>
 801c906:	2964      	cmp	r1, #100	; 0x64
 801c908:	d001      	beq.n	801c90e <_printf_i+0x42>
 801c90a:	2969      	cmp	r1, #105	; 0x69
 801c90c:	d1f6      	bne.n	801c8fc <_printf_i+0x30>
 801c90e:	6820      	ldr	r0, [r4, #0]
 801c910:	6813      	ldr	r3, [r2, #0]
 801c912:	0605      	lsls	r5, r0, #24
 801c914:	f103 0104 	add.w	r1, r3, #4
 801c918:	d52a      	bpl.n	801c970 <_printf_i+0xa4>
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	6011      	str	r1, [r2, #0]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	da03      	bge.n	801c92a <_printf_i+0x5e>
 801c922:	222d      	movs	r2, #45	; 0x2d
 801c924:	425b      	negs	r3, r3
 801c926:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801c92a:	486f      	ldr	r0, [pc, #444]	; (801cae8 <_printf_i+0x21c>)
 801c92c:	220a      	movs	r2, #10
 801c92e:	e039      	b.n	801c9a4 <_printf_i+0xd8>
 801c930:	2973      	cmp	r1, #115	; 0x73
 801c932:	f000 809d 	beq.w	801ca70 <_printf_i+0x1a4>
 801c936:	d808      	bhi.n	801c94a <_printf_i+0x7e>
 801c938:	296f      	cmp	r1, #111	; 0x6f
 801c93a:	d020      	beq.n	801c97e <_printf_i+0xb2>
 801c93c:	2970      	cmp	r1, #112	; 0x70
 801c93e:	d1dd      	bne.n	801c8fc <_printf_i+0x30>
 801c940:	6823      	ldr	r3, [r4, #0]
 801c942:	f043 0320 	orr.w	r3, r3, #32
 801c946:	6023      	str	r3, [r4, #0]
 801c948:	e003      	b.n	801c952 <_printf_i+0x86>
 801c94a:	2975      	cmp	r1, #117	; 0x75
 801c94c:	d017      	beq.n	801c97e <_printf_i+0xb2>
 801c94e:	2978      	cmp	r1, #120	; 0x78
 801c950:	d1d4      	bne.n	801c8fc <_printf_i+0x30>
 801c952:	2378      	movs	r3, #120	; 0x78
 801c954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c958:	4864      	ldr	r0, [pc, #400]	; (801caec <_printf_i+0x220>)
 801c95a:	e055      	b.n	801ca08 <_printf_i+0x13c>
 801c95c:	6813      	ldr	r3, [r2, #0]
 801c95e:	1d19      	adds	r1, r3, #4
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	6011      	str	r1, [r2, #0]
 801c964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c96c:	2301      	movs	r3, #1
 801c96e:	e08c      	b.n	801ca8a <_printf_i+0x1be>
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	6011      	str	r1, [r2, #0]
 801c974:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c978:	bf18      	it	ne
 801c97a:	b21b      	sxthne	r3, r3
 801c97c:	e7cf      	b.n	801c91e <_printf_i+0x52>
 801c97e:	6813      	ldr	r3, [r2, #0]
 801c980:	6825      	ldr	r5, [r4, #0]
 801c982:	1d18      	adds	r0, r3, #4
 801c984:	6010      	str	r0, [r2, #0]
 801c986:	0628      	lsls	r0, r5, #24
 801c988:	d501      	bpl.n	801c98e <_printf_i+0xc2>
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	e002      	b.n	801c994 <_printf_i+0xc8>
 801c98e:	0668      	lsls	r0, r5, #25
 801c990:	d5fb      	bpl.n	801c98a <_printf_i+0xbe>
 801c992:	881b      	ldrh	r3, [r3, #0]
 801c994:	4854      	ldr	r0, [pc, #336]	; (801cae8 <_printf_i+0x21c>)
 801c996:	296f      	cmp	r1, #111	; 0x6f
 801c998:	bf14      	ite	ne
 801c99a:	220a      	movne	r2, #10
 801c99c:	2208      	moveq	r2, #8
 801c99e:	2100      	movs	r1, #0
 801c9a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c9a4:	6865      	ldr	r5, [r4, #4]
 801c9a6:	60a5      	str	r5, [r4, #8]
 801c9a8:	2d00      	cmp	r5, #0
 801c9aa:	f2c0 8095 	blt.w	801cad8 <_printf_i+0x20c>
 801c9ae:	6821      	ldr	r1, [r4, #0]
 801c9b0:	f021 0104 	bic.w	r1, r1, #4
 801c9b4:	6021      	str	r1, [r4, #0]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d13d      	bne.n	801ca36 <_printf_i+0x16a>
 801c9ba:	2d00      	cmp	r5, #0
 801c9bc:	f040 808e 	bne.w	801cadc <_printf_i+0x210>
 801c9c0:	4665      	mov	r5, ip
 801c9c2:	2a08      	cmp	r2, #8
 801c9c4:	d10b      	bne.n	801c9de <_printf_i+0x112>
 801c9c6:	6823      	ldr	r3, [r4, #0]
 801c9c8:	07db      	lsls	r3, r3, #31
 801c9ca:	d508      	bpl.n	801c9de <_printf_i+0x112>
 801c9cc:	6923      	ldr	r3, [r4, #16]
 801c9ce:	6862      	ldr	r2, [r4, #4]
 801c9d0:	429a      	cmp	r2, r3
 801c9d2:	bfde      	ittt	le
 801c9d4:	2330      	movle	r3, #48	; 0x30
 801c9d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c9da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c9de:	ebac 0305 	sub.w	r3, ip, r5
 801c9e2:	6123      	str	r3, [r4, #16]
 801c9e4:	f8cd 8000 	str.w	r8, [sp]
 801c9e8:	463b      	mov	r3, r7
 801c9ea:	aa03      	add	r2, sp, #12
 801c9ec:	4621      	mov	r1, r4
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	f7ff fef6 	bl	801c7e0 <_printf_common>
 801c9f4:	3001      	adds	r0, #1
 801c9f6:	d14d      	bne.n	801ca94 <_printf_i+0x1c8>
 801c9f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c9fc:	b005      	add	sp, #20
 801c9fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ca02:	4839      	ldr	r0, [pc, #228]	; (801cae8 <_printf_i+0x21c>)
 801ca04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801ca08:	6813      	ldr	r3, [r2, #0]
 801ca0a:	6821      	ldr	r1, [r4, #0]
 801ca0c:	1d1d      	adds	r5, r3, #4
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	6015      	str	r5, [r2, #0]
 801ca12:	060a      	lsls	r2, r1, #24
 801ca14:	d50b      	bpl.n	801ca2e <_printf_i+0x162>
 801ca16:	07ca      	lsls	r2, r1, #31
 801ca18:	bf44      	itt	mi
 801ca1a:	f041 0120 	orrmi.w	r1, r1, #32
 801ca1e:	6021      	strmi	r1, [r4, #0]
 801ca20:	b91b      	cbnz	r3, 801ca2a <_printf_i+0x15e>
 801ca22:	6822      	ldr	r2, [r4, #0]
 801ca24:	f022 0220 	bic.w	r2, r2, #32
 801ca28:	6022      	str	r2, [r4, #0]
 801ca2a:	2210      	movs	r2, #16
 801ca2c:	e7b7      	b.n	801c99e <_printf_i+0xd2>
 801ca2e:	064d      	lsls	r5, r1, #25
 801ca30:	bf48      	it	mi
 801ca32:	b29b      	uxthmi	r3, r3
 801ca34:	e7ef      	b.n	801ca16 <_printf_i+0x14a>
 801ca36:	4665      	mov	r5, ip
 801ca38:	fbb3 f1f2 	udiv	r1, r3, r2
 801ca3c:	fb02 3311 	mls	r3, r2, r1, r3
 801ca40:	5cc3      	ldrb	r3, [r0, r3]
 801ca42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ca46:	460b      	mov	r3, r1
 801ca48:	2900      	cmp	r1, #0
 801ca4a:	d1f5      	bne.n	801ca38 <_printf_i+0x16c>
 801ca4c:	e7b9      	b.n	801c9c2 <_printf_i+0xf6>
 801ca4e:	6813      	ldr	r3, [r2, #0]
 801ca50:	6825      	ldr	r5, [r4, #0]
 801ca52:	6961      	ldr	r1, [r4, #20]
 801ca54:	1d18      	adds	r0, r3, #4
 801ca56:	6010      	str	r0, [r2, #0]
 801ca58:	0628      	lsls	r0, r5, #24
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	d501      	bpl.n	801ca62 <_printf_i+0x196>
 801ca5e:	6019      	str	r1, [r3, #0]
 801ca60:	e002      	b.n	801ca68 <_printf_i+0x19c>
 801ca62:	066a      	lsls	r2, r5, #25
 801ca64:	d5fb      	bpl.n	801ca5e <_printf_i+0x192>
 801ca66:	8019      	strh	r1, [r3, #0]
 801ca68:	2300      	movs	r3, #0
 801ca6a:	6123      	str	r3, [r4, #16]
 801ca6c:	4665      	mov	r5, ip
 801ca6e:	e7b9      	b.n	801c9e4 <_printf_i+0x118>
 801ca70:	6813      	ldr	r3, [r2, #0]
 801ca72:	1d19      	adds	r1, r3, #4
 801ca74:	6011      	str	r1, [r2, #0]
 801ca76:	681d      	ldr	r5, [r3, #0]
 801ca78:	6862      	ldr	r2, [r4, #4]
 801ca7a:	2100      	movs	r1, #0
 801ca7c:	4628      	mov	r0, r5
 801ca7e:	f7eb fbf7 	bl	8008270 <memchr>
 801ca82:	b108      	cbz	r0, 801ca88 <_printf_i+0x1bc>
 801ca84:	1b40      	subs	r0, r0, r5
 801ca86:	6060      	str	r0, [r4, #4]
 801ca88:	6863      	ldr	r3, [r4, #4]
 801ca8a:	6123      	str	r3, [r4, #16]
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ca92:	e7a7      	b.n	801c9e4 <_printf_i+0x118>
 801ca94:	6923      	ldr	r3, [r4, #16]
 801ca96:	462a      	mov	r2, r5
 801ca98:	4639      	mov	r1, r7
 801ca9a:	4630      	mov	r0, r6
 801ca9c:	47c0      	blx	r8
 801ca9e:	3001      	adds	r0, #1
 801caa0:	d0aa      	beq.n	801c9f8 <_printf_i+0x12c>
 801caa2:	6823      	ldr	r3, [r4, #0]
 801caa4:	079b      	lsls	r3, r3, #30
 801caa6:	d413      	bmi.n	801cad0 <_printf_i+0x204>
 801caa8:	68e0      	ldr	r0, [r4, #12]
 801caaa:	9b03      	ldr	r3, [sp, #12]
 801caac:	4298      	cmp	r0, r3
 801caae:	bfb8      	it	lt
 801cab0:	4618      	movlt	r0, r3
 801cab2:	e7a3      	b.n	801c9fc <_printf_i+0x130>
 801cab4:	2301      	movs	r3, #1
 801cab6:	464a      	mov	r2, r9
 801cab8:	4639      	mov	r1, r7
 801caba:	4630      	mov	r0, r6
 801cabc:	47c0      	blx	r8
 801cabe:	3001      	adds	r0, #1
 801cac0:	d09a      	beq.n	801c9f8 <_printf_i+0x12c>
 801cac2:	3501      	adds	r5, #1
 801cac4:	68e3      	ldr	r3, [r4, #12]
 801cac6:	9a03      	ldr	r2, [sp, #12]
 801cac8:	1a9b      	subs	r3, r3, r2
 801caca:	42ab      	cmp	r3, r5
 801cacc:	dcf2      	bgt.n	801cab4 <_printf_i+0x1e8>
 801cace:	e7eb      	b.n	801caa8 <_printf_i+0x1dc>
 801cad0:	2500      	movs	r5, #0
 801cad2:	f104 0919 	add.w	r9, r4, #25
 801cad6:	e7f5      	b.n	801cac4 <_printf_i+0x1f8>
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d1ac      	bne.n	801ca36 <_printf_i+0x16a>
 801cadc:	7803      	ldrb	r3, [r0, #0]
 801cade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cae2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cae6:	e76c      	b.n	801c9c2 <_printf_i+0xf6>
 801cae8:	08030a99 	.word	0x08030a99
 801caec:	08030aaa 	.word	0x08030aaa

0801caf0 <_sbrk_r>:
 801caf0:	b538      	push	{r3, r4, r5, lr}
 801caf2:	4c06      	ldr	r4, [pc, #24]	; (801cb0c <_sbrk_r+0x1c>)
 801caf4:	2300      	movs	r3, #0
 801caf6:	4605      	mov	r5, r0
 801caf8:	4608      	mov	r0, r1
 801cafa:	6023      	str	r3, [r4, #0]
 801cafc:	f7ec f9f6 	bl	8008eec <_sbrk>
 801cb00:	1c43      	adds	r3, r0, #1
 801cb02:	d102      	bne.n	801cb0a <_sbrk_r+0x1a>
 801cb04:	6823      	ldr	r3, [r4, #0]
 801cb06:	b103      	cbz	r3, 801cb0a <_sbrk_r+0x1a>
 801cb08:	602b      	str	r3, [r5, #0]
 801cb0a:	bd38      	pop	{r3, r4, r5, pc}
 801cb0c:	2000b35c 	.word	0x2000b35c

0801cb10 <__sread>:
 801cb10:	b510      	push	{r4, lr}
 801cb12:	460c      	mov	r4, r1
 801cb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb18:	f000 fa48 	bl	801cfac <_read_r>
 801cb1c:	2800      	cmp	r0, #0
 801cb1e:	bfab      	itete	ge
 801cb20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cb22:	89a3      	ldrhlt	r3, [r4, #12]
 801cb24:	181b      	addge	r3, r3, r0
 801cb26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cb2a:	bfac      	ite	ge
 801cb2c:	6563      	strge	r3, [r4, #84]	; 0x54
 801cb2e:	81a3      	strhlt	r3, [r4, #12]
 801cb30:	bd10      	pop	{r4, pc}

0801cb32 <__swrite>:
 801cb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb36:	461f      	mov	r7, r3
 801cb38:	898b      	ldrh	r3, [r1, #12]
 801cb3a:	05db      	lsls	r3, r3, #23
 801cb3c:	4605      	mov	r5, r0
 801cb3e:	460c      	mov	r4, r1
 801cb40:	4616      	mov	r6, r2
 801cb42:	d505      	bpl.n	801cb50 <__swrite+0x1e>
 801cb44:	2302      	movs	r3, #2
 801cb46:	2200      	movs	r2, #0
 801cb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb4c:	f000 f9b6 	bl	801cebc <_lseek_r>
 801cb50:	89a3      	ldrh	r3, [r4, #12]
 801cb52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cb56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cb5a:	81a3      	strh	r3, [r4, #12]
 801cb5c:	4632      	mov	r2, r6
 801cb5e:	463b      	mov	r3, r7
 801cb60:	4628      	mov	r0, r5
 801cb62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cb66:	f000 b869 	b.w	801cc3c <_write_r>

0801cb6a <__sseek>:
 801cb6a:	b510      	push	{r4, lr}
 801cb6c:	460c      	mov	r4, r1
 801cb6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb72:	f000 f9a3 	bl	801cebc <_lseek_r>
 801cb76:	1c43      	adds	r3, r0, #1
 801cb78:	89a3      	ldrh	r3, [r4, #12]
 801cb7a:	bf15      	itete	ne
 801cb7c:	6560      	strne	r0, [r4, #84]	; 0x54
 801cb7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cb82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cb86:	81a3      	strheq	r3, [r4, #12]
 801cb88:	bf18      	it	ne
 801cb8a:	81a3      	strhne	r3, [r4, #12]
 801cb8c:	bd10      	pop	{r4, pc}

0801cb8e <__sclose>:
 801cb8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb92:	f000 b8d3 	b.w	801cd3c <_close_r>
	...

0801cb98 <__swbuf_r>:
 801cb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb9a:	460e      	mov	r6, r1
 801cb9c:	4614      	mov	r4, r2
 801cb9e:	4605      	mov	r5, r0
 801cba0:	b118      	cbz	r0, 801cbaa <__swbuf_r+0x12>
 801cba2:	6983      	ldr	r3, [r0, #24]
 801cba4:	b90b      	cbnz	r3, 801cbaa <__swbuf_r+0x12>
 801cba6:	f7ff fba1 	bl	801c2ec <__sinit>
 801cbaa:	4b21      	ldr	r3, [pc, #132]	; (801cc30 <__swbuf_r+0x98>)
 801cbac:	429c      	cmp	r4, r3
 801cbae:	d12a      	bne.n	801cc06 <__swbuf_r+0x6e>
 801cbb0:	686c      	ldr	r4, [r5, #4]
 801cbb2:	69a3      	ldr	r3, [r4, #24]
 801cbb4:	60a3      	str	r3, [r4, #8]
 801cbb6:	89a3      	ldrh	r3, [r4, #12]
 801cbb8:	071a      	lsls	r2, r3, #28
 801cbba:	d52e      	bpl.n	801cc1a <__swbuf_r+0x82>
 801cbbc:	6923      	ldr	r3, [r4, #16]
 801cbbe:	b363      	cbz	r3, 801cc1a <__swbuf_r+0x82>
 801cbc0:	6923      	ldr	r3, [r4, #16]
 801cbc2:	6820      	ldr	r0, [r4, #0]
 801cbc4:	1ac0      	subs	r0, r0, r3
 801cbc6:	6963      	ldr	r3, [r4, #20]
 801cbc8:	b2f6      	uxtb	r6, r6
 801cbca:	4283      	cmp	r3, r0
 801cbcc:	4637      	mov	r7, r6
 801cbce:	dc04      	bgt.n	801cbda <__swbuf_r+0x42>
 801cbd0:	4621      	mov	r1, r4
 801cbd2:	4628      	mov	r0, r5
 801cbd4:	f000 f948 	bl	801ce68 <_fflush_r>
 801cbd8:	bb28      	cbnz	r0, 801cc26 <__swbuf_r+0x8e>
 801cbda:	68a3      	ldr	r3, [r4, #8]
 801cbdc:	3b01      	subs	r3, #1
 801cbde:	60a3      	str	r3, [r4, #8]
 801cbe0:	6823      	ldr	r3, [r4, #0]
 801cbe2:	1c5a      	adds	r2, r3, #1
 801cbe4:	6022      	str	r2, [r4, #0]
 801cbe6:	701e      	strb	r6, [r3, #0]
 801cbe8:	6963      	ldr	r3, [r4, #20]
 801cbea:	3001      	adds	r0, #1
 801cbec:	4283      	cmp	r3, r0
 801cbee:	d004      	beq.n	801cbfa <__swbuf_r+0x62>
 801cbf0:	89a3      	ldrh	r3, [r4, #12]
 801cbf2:	07db      	lsls	r3, r3, #31
 801cbf4:	d519      	bpl.n	801cc2a <__swbuf_r+0x92>
 801cbf6:	2e0a      	cmp	r6, #10
 801cbf8:	d117      	bne.n	801cc2a <__swbuf_r+0x92>
 801cbfa:	4621      	mov	r1, r4
 801cbfc:	4628      	mov	r0, r5
 801cbfe:	f000 f933 	bl	801ce68 <_fflush_r>
 801cc02:	b190      	cbz	r0, 801cc2a <__swbuf_r+0x92>
 801cc04:	e00f      	b.n	801cc26 <__swbuf_r+0x8e>
 801cc06:	4b0b      	ldr	r3, [pc, #44]	; (801cc34 <__swbuf_r+0x9c>)
 801cc08:	429c      	cmp	r4, r3
 801cc0a:	d101      	bne.n	801cc10 <__swbuf_r+0x78>
 801cc0c:	68ac      	ldr	r4, [r5, #8]
 801cc0e:	e7d0      	b.n	801cbb2 <__swbuf_r+0x1a>
 801cc10:	4b09      	ldr	r3, [pc, #36]	; (801cc38 <__swbuf_r+0xa0>)
 801cc12:	429c      	cmp	r4, r3
 801cc14:	bf08      	it	eq
 801cc16:	68ec      	ldreq	r4, [r5, #12]
 801cc18:	e7cb      	b.n	801cbb2 <__swbuf_r+0x1a>
 801cc1a:	4621      	mov	r1, r4
 801cc1c:	4628      	mov	r0, r5
 801cc1e:	f000 f81f 	bl	801cc60 <__swsetup_r>
 801cc22:	2800      	cmp	r0, #0
 801cc24:	d0cc      	beq.n	801cbc0 <__swbuf_r+0x28>
 801cc26:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801cc2a:	4638      	mov	r0, r7
 801cc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	08030a48 	.word	0x08030a48
 801cc34:	08030a68 	.word	0x08030a68
 801cc38:	08030a28 	.word	0x08030a28

0801cc3c <_write_r>:
 801cc3c:	b538      	push	{r3, r4, r5, lr}
 801cc3e:	4c07      	ldr	r4, [pc, #28]	; (801cc5c <_write_r+0x20>)
 801cc40:	4605      	mov	r5, r0
 801cc42:	4608      	mov	r0, r1
 801cc44:	4611      	mov	r1, r2
 801cc46:	2200      	movs	r2, #0
 801cc48:	6022      	str	r2, [r4, #0]
 801cc4a:	461a      	mov	r2, r3
 801cc4c:	f7ec f8fd 	bl	8008e4a <_write>
 801cc50:	1c43      	adds	r3, r0, #1
 801cc52:	d102      	bne.n	801cc5a <_write_r+0x1e>
 801cc54:	6823      	ldr	r3, [r4, #0]
 801cc56:	b103      	cbz	r3, 801cc5a <_write_r+0x1e>
 801cc58:	602b      	str	r3, [r5, #0]
 801cc5a:	bd38      	pop	{r3, r4, r5, pc}
 801cc5c:	2000b35c 	.word	0x2000b35c

0801cc60 <__swsetup_r>:
 801cc60:	4b32      	ldr	r3, [pc, #200]	; (801cd2c <__swsetup_r+0xcc>)
 801cc62:	b570      	push	{r4, r5, r6, lr}
 801cc64:	681d      	ldr	r5, [r3, #0]
 801cc66:	4606      	mov	r6, r0
 801cc68:	460c      	mov	r4, r1
 801cc6a:	b125      	cbz	r5, 801cc76 <__swsetup_r+0x16>
 801cc6c:	69ab      	ldr	r3, [r5, #24]
 801cc6e:	b913      	cbnz	r3, 801cc76 <__swsetup_r+0x16>
 801cc70:	4628      	mov	r0, r5
 801cc72:	f7ff fb3b 	bl	801c2ec <__sinit>
 801cc76:	4b2e      	ldr	r3, [pc, #184]	; (801cd30 <__swsetup_r+0xd0>)
 801cc78:	429c      	cmp	r4, r3
 801cc7a:	d10f      	bne.n	801cc9c <__swsetup_r+0x3c>
 801cc7c:	686c      	ldr	r4, [r5, #4]
 801cc7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc82:	b29a      	uxth	r2, r3
 801cc84:	0715      	lsls	r5, r2, #28
 801cc86:	d42c      	bmi.n	801cce2 <__swsetup_r+0x82>
 801cc88:	06d0      	lsls	r0, r2, #27
 801cc8a:	d411      	bmi.n	801ccb0 <__swsetup_r+0x50>
 801cc8c:	2209      	movs	r2, #9
 801cc8e:	6032      	str	r2, [r6, #0]
 801cc90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc94:	81a3      	strh	r3, [r4, #12]
 801cc96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cc9a:	e03e      	b.n	801cd1a <__swsetup_r+0xba>
 801cc9c:	4b25      	ldr	r3, [pc, #148]	; (801cd34 <__swsetup_r+0xd4>)
 801cc9e:	429c      	cmp	r4, r3
 801cca0:	d101      	bne.n	801cca6 <__swsetup_r+0x46>
 801cca2:	68ac      	ldr	r4, [r5, #8]
 801cca4:	e7eb      	b.n	801cc7e <__swsetup_r+0x1e>
 801cca6:	4b24      	ldr	r3, [pc, #144]	; (801cd38 <__swsetup_r+0xd8>)
 801cca8:	429c      	cmp	r4, r3
 801ccaa:	bf08      	it	eq
 801ccac:	68ec      	ldreq	r4, [r5, #12]
 801ccae:	e7e6      	b.n	801cc7e <__swsetup_r+0x1e>
 801ccb0:	0751      	lsls	r1, r2, #29
 801ccb2:	d512      	bpl.n	801ccda <__swsetup_r+0x7a>
 801ccb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ccb6:	b141      	cbz	r1, 801ccca <__swsetup_r+0x6a>
 801ccb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ccbc:	4299      	cmp	r1, r3
 801ccbe:	d002      	beq.n	801ccc6 <__swsetup_r+0x66>
 801ccc0:	4630      	mov	r0, r6
 801ccc2:	f7ff fba5 	bl	801c410 <_free_r>
 801ccc6:	2300      	movs	r3, #0
 801ccc8:	6363      	str	r3, [r4, #52]	; 0x34
 801ccca:	89a3      	ldrh	r3, [r4, #12]
 801cccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ccd0:	81a3      	strh	r3, [r4, #12]
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	6063      	str	r3, [r4, #4]
 801ccd6:	6923      	ldr	r3, [r4, #16]
 801ccd8:	6023      	str	r3, [r4, #0]
 801ccda:	89a3      	ldrh	r3, [r4, #12]
 801ccdc:	f043 0308 	orr.w	r3, r3, #8
 801cce0:	81a3      	strh	r3, [r4, #12]
 801cce2:	6923      	ldr	r3, [r4, #16]
 801cce4:	b94b      	cbnz	r3, 801ccfa <__swsetup_r+0x9a>
 801cce6:	89a3      	ldrh	r3, [r4, #12]
 801cce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ccec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ccf0:	d003      	beq.n	801ccfa <__swsetup_r+0x9a>
 801ccf2:	4621      	mov	r1, r4
 801ccf4:	4630      	mov	r0, r6
 801ccf6:	f000 f917 	bl	801cf28 <__smakebuf_r>
 801ccfa:	89a2      	ldrh	r2, [r4, #12]
 801ccfc:	f012 0301 	ands.w	r3, r2, #1
 801cd00:	d00c      	beq.n	801cd1c <__swsetup_r+0xbc>
 801cd02:	2300      	movs	r3, #0
 801cd04:	60a3      	str	r3, [r4, #8]
 801cd06:	6963      	ldr	r3, [r4, #20]
 801cd08:	425b      	negs	r3, r3
 801cd0a:	61a3      	str	r3, [r4, #24]
 801cd0c:	6923      	ldr	r3, [r4, #16]
 801cd0e:	b953      	cbnz	r3, 801cd26 <__swsetup_r+0xc6>
 801cd10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801cd18:	d1ba      	bne.n	801cc90 <__swsetup_r+0x30>
 801cd1a:	bd70      	pop	{r4, r5, r6, pc}
 801cd1c:	0792      	lsls	r2, r2, #30
 801cd1e:	bf58      	it	pl
 801cd20:	6963      	ldrpl	r3, [r4, #20]
 801cd22:	60a3      	str	r3, [r4, #8]
 801cd24:	e7f2      	b.n	801cd0c <__swsetup_r+0xac>
 801cd26:	2000      	movs	r0, #0
 801cd28:	e7f7      	b.n	801cd1a <__swsetup_r+0xba>
 801cd2a:	bf00      	nop
 801cd2c:	2000005c 	.word	0x2000005c
 801cd30:	08030a48 	.word	0x08030a48
 801cd34:	08030a68 	.word	0x08030a68
 801cd38:	08030a28 	.word	0x08030a28

0801cd3c <_close_r>:
 801cd3c:	b538      	push	{r3, r4, r5, lr}
 801cd3e:	4c06      	ldr	r4, [pc, #24]	; (801cd58 <_close_r+0x1c>)
 801cd40:	2300      	movs	r3, #0
 801cd42:	4605      	mov	r5, r0
 801cd44:	4608      	mov	r0, r1
 801cd46:	6023      	str	r3, [r4, #0]
 801cd48:	f7ec f89b 	bl	8008e82 <_close>
 801cd4c:	1c43      	adds	r3, r0, #1
 801cd4e:	d102      	bne.n	801cd56 <_close_r+0x1a>
 801cd50:	6823      	ldr	r3, [r4, #0]
 801cd52:	b103      	cbz	r3, 801cd56 <_close_r+0x1a>
 801cd54:	602b      	str	r3, [r5, #0]
 801cd56:	bd38      	pop	{r3, r4, r5, pc}
 801cd58:	2000b35c 	.word	0x2000b35c

0801cd5c <__sflush_r>:
 801cd5c:	898a      	ldrh	r2, [r1, #12]
 801cd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd62:	4605      	mov	r5, r0
 801cd64:	0710      	lsls	r0, r2, #28
 801cd66:	460c      	mov	r4, r1
 801cd68:	d458      	bmi.n	801ce1c <__sflush_r+0xc0>
 801cd6a:	684b      	ldr	r3, [r1, #4]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	dc05      	bgt.n	801cd7c <__sflush_r+0x20>
 801cd70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	dc02      	bgt.n	801cd7c <__sflush_r+0x20>
 801cd76:	2000      	movs	r0, #0
 801cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cd7e:	2e00      	cmp	r6, #0
 801cd80:	d0f9      	beq.n	801cd76 <__sflush_r+0x1a>
 801cd82:	2300      	movs	r3, #0
 801cd84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cd88:	682f      	ldr	r7, [r5, #0]
 801cd8a:	6a21      	ldr	r1, [r4, #32]
 801cd8c:	602b      	str	r3, [r5, #0]
 801cd8e:	d032      	beq.n	801cdf6 <__sflush_r+0x9a>
 801cd90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cd92:	89a3      	ldrh	r3, [r4, #12]
 801cd94:	075a      	lsls	r2, r3, #29
 801cd96:	d505      	bpl.n	801cda4 <__sflush_r+0x48>
 801cd98:	6863      	ldr	r3, [r4, #4]
 801cd9a:	1ac0      	subs	r0, r0, r3
 801cd9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cd9e:	b10b      	cbz	r3, 801cda4 <__sflush_r+0x48>
 801cda0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cda2:	1ac0      	subs	r0, r0, r3
 801cda4:	2300      	movs	r3, #0
 801cda6:	4602      	mov	r2, r0
 801cda8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cdaa:	6a21      	ldr	r1, [r4, #32]
 801cdac:	4628      	mov	r0, r5
 801cdae:	47b0      	blx	r6
 801cdb0:	1c43      	adds	r3, r0, #1
 801cdb2:	89a3      	ldrh	r3, [r4, #12]
 801cdb4:	d106      	bne.n	801cdc4 <__sflush_r+0x68>
 801cdb6:	6829      	ldr	r1, [r5, #0]
 801cdb8:	291d      	cmp	r1, #29
 801cdba:	d848      	bhi.n	801ce4e <__sflush_r+0xf2>
 801cdbc:	4a29      	ldr	r2, [pc, #164]	; (801ce64 <__sflush_r+0x108>)
 801cdbe:	40ca      	lsrs	r2, r1
 801cdc0:	07d6      	lsls	r6, r2, #31
 801cdc2:	d544      	bpl.n	801ce4e <__sflush_r+0xf2>
 801cdc4:	2200      	movs	r2, #0
 801cdc6:	6062      	str	r2, [r4, #4]
 801cdc8:	04d9      	lsls	r1, r3, #19
 801cdca:	6922      	ldr	r2, [r4, #16]
 801cdcc:	6022      	str	r2, [r4, #0]
 801cdce:	d504      	bpl.n	801cdda <__sflush_r+0x7e>
 801cdd0:	1c42      	adds	r2, r0, #1
 801cdd2:	d101      	bne.n	801cdd8 <__sflush_r+0x7c>
 801cdd4:	682b      	ldr	r3, [r5, #0]
 801cdd6:	b903      	cbnz	r3, 801cdda <__sflush_r+0x7e>
 801cdd8:	6560      	str	r0, [r4, #84]	; 0x54
 801cdda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cddc:	602f      	str	r7, [r5, #0]
 801cdde:	2900      	cmp	r1, #0
 801cde0:	d0c9      	beq.n	801cd76 <__sflush_r+0x1a>
 801cde2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cde6:	4299      	cmp	r1, r3
 801cde8:	d002      	beq.n	801cdf0 <__sflush_r+0x94>
 801cdea:	4628      	mov	r0, r5
 801cdec:	f7ff fb10 	bl	801c410 <_free_r>
 801cdf0:	2000      	movs	r0, #0
 801cdf2:	6360      	str	r0, [r4, #52]	; 0x34
 801cdf4:	e7c0      	b.n	801cd78 <__sflush_r+0x1c>
 801cdf6:	2301      	movs	r3, #1
 801cdf8:	4628      	mov	r0, r5
 801cdfa:	47b0      	blx	r6
 801cdfc:	1c41      	adds	r1, r0, #1
 801cdfe:	d1c8      	bne.n	801cd92 <__sflush_r+0x36>
 801ce00:	682b      	ldr	r3, [r5, #0]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d0c5      	beq.n	801cd92 <__sflush_r+0x36>
 801ce06:	2b1d      	cmp	r3, #29
 801ce08:	d001      	beq.n	801ce0e <__sflush_r+0xb2>
 801ce0a:	2b16      	cmp	r3, #22
 801ce0c:	d101      	bne.n	801ce12 <__sflush_r+0xb6>
 801ce0e:	602f      	str	r7, [r5, #0]
 801ce10:	e7b1      	b.n	801cd76 <__sflush_r+0x1a>
 801ce12:	89a3      	ldrh	r3, [r4, #12]
 801ce14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce18:	81a3      	strh	r3, [r4, #12]
 801ce1a:	e7ad      	b.n	801cd78 <__sflush_r+0x1c>
 801ce1c:	690f      	ldr	r7, [r1, #16]
 801ce1e:	2f00      	cmp	r7, #0
 801ce20:	d0a9      	beq.n	801cd76 <__sflush_r+0x1a>
 801ce22:	0793      	lsls	r3, r2, #30
 801ce24:	680e      	ldr	r6, [r1, #0]
 801ce26:	bf08      	it	eq
 801ce28:	694b      	ldreq	r3, [r1, #20]
 801ce2a:	600f      	str	r7, [r1, #0]
 801ce2c:	bf18      	it	ne
 801ce2e:	2300      	movne	r3, #0
 801ce30:	eba6 0807 	sub.w	r8, r6, r7
 801ce34:	608b      	str	r3, [r1, #8]
 801ce36:	f1b8 0f00 	cmp.w	r8, #0
 801ce3a:	dd9c      	ble.n	801cd76 <__sflush_r+0x1a>
 801ce3c:	4643      	mov	r3, r8
 801ce3e:	463a      	mov	r2, r7
 801ce40:	6a21      	ldr	r1, [r4, #32]
 801ce42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ce44:	4628      	mov	r0, r5
 801ce46:	47b0      	blx	r6
 801ce48:	2800      	cmp	r0, #0
 801ce4a:	dc06      	bgt.n	801ce5a <__sflush_r+0xfe>
 801ce4c:	89a3      	ldrh	r3, [r4, #12]
 801ce4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce52:	81a3      	strh	r3, [r4, #12]
 801ce54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce58:	e78e      	b.n	801cd78 <__sflush_r+0x1c>
 801ce5a:	4407      	add	r7, r0
 801ce5c:	eba8 0800 	sub.w	r8, r8, r0
 801ce60:	e7e9      	b.n	801ce36 <__sflush_r+0xda>
 801ce62:	bf00      	nop
 801ce64:	20400001 	.word	0x20400001

0801ce68 <_fflush_r>:
 801ce68:	b538      	push	{r3, r4, r5, lr}
 801ce6a:	690b      	ldr	r3, [r1, #16]
 801ce6c:	4605      	mov	r5, r0
 801ce6e:	460c      	mov	r4, r1
 801ce70:	b1db      	cbz	r3, 801ceaa <_fflush_r+0x42>
 801ce72:	b118      	cbz	r0, 801ce7c <_fflush_r+0x14>
 801ce74:	6983      	ldr	r3, [r0, #24]
 801ce76:	b90b      	cbnz	r3, 801ce7c <_fflush_r+0x14>
 801ce78:	f7ff fa38 	bl	801c2ec <__sinit>
 801ce7c:	4b0c      	ldr	r3, [pc, #48]	; (801ceb0 <_fflush_r+0x48>)
 801ce7e:	429c      	cmp	r4, r3
 801ce80:	d109      	bne.n	801ce96 <_fflush_r+0x2e>
 801ce82:	686c      	ldr	r4, [r5, #4]
 801ce84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce88:	b17b      	cbz	r3, 801ceaa <_fflush_r+0x42>
 801ce8a:	4621      	mov	r1, r4
 801ce8c:	4628      	mov	r0, r5
 801ce8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce92:	f7ff bf63 	b.w	801cd5c <__sflush_r>
 801ce96:	4b07      	ldr	r3, [pc, #28]	; (801ceb4 <_fflush_r+0x4c>)
 801ce98:	429c      	cmp	r4, r3
 801ce9a:	d101      	bne.n	801cea0 <_fflush_r+0x38>
 801ce9c:	68ac      	ldr	r4, [r5, #8]
 801ce9e:	e7f1      	b.n	801ce84 <_fflush_r+0x1c>
 801cea0:	4b05      	ldr	r3, [pc, #20]	; (801ceb8 <_fflush_r+0x50>)
 801cea2:	429c      	cmp	r4, r3
 801cea4:	bf08      	it	eq
 801cea6:	68ec      	ldreq	r4, [r5, #12]
 801cea8:	e7ec      	b.n	801ce84 <_fflush_r+0x1c>
 801ceaa:	2000      	movs	r0, #0
 801ceac:	bd38      	pop	{r3, r4, r5, pc}
 801ceae:	bf00      	nop
 801ceb0:	08030a48 	.word	0x08030a48
 801ceb4:	08030a68 	.word	0x08030a68
 801ceb8:	08030a28 	.word	0x08030a28

0801cebc <_lseek_r>:
 801cebc:	b538      	push	{r3, r4, r5, lr}
 801cebe:	4c07      	ldr	r4, [pc, #28]	; (801cedc <_lseek_r+0x20>)
 801cec0:	4605      	mov	r5, r0
 801cec2:	4608      	mov	r0, r1
 801cec4:	4611      	mov	r1, r2
 801cec6:	2200      	movs	r2, #0
 801cec8:	6022      	str	r2, [r4, #0]
 801ceca:	461a      	mov	r2, r3
 801cecc:	f7ec f800 	bl	8008ed0 <_lseek>
 801ced0:	1c43      	adds	r3, r0, #1
 801ced2:	d102      	bne.n	801ceda <_lseek_r+0x1e>
 801ced4:	6823      	ldr	r3, [r4, #0]
 801ced6:	b103      	cbz	r3, 801ceda <_lseek_r+0x1e>
 801ced8:	602b      	str	r3, [r5, #0]
 801ceda:	bd38      	pop	{r3, r4, r5, pc}
 801cedc:	2000b35c 	.word	0x2000b35c

0801cee0 <__swhatbuf_r>:
 801cee0:	b570      	push	{r4, r5, r6, lr}
 801cee2:	460e      	mov	r6, r1
 801cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cee8:	2900      	cmp	r1, #0
 801ceea:	b096      	sub	sp, #88	; 0x58
 801ceec:	4614      	mov	r4, r2
 801ceee:	461d      	mov	r5, r3
 801cef0:	da07      	bge.n	801cf02 <__swhatbuf_r+0x22>
 801cef2:	2300      	movs	r3, #0
 801cef4:	602b      	str	r3, [r5, #0]
 801cef6:	89b3      	ldrh	r3, [r6, #12]
 801cef8:	061a      	lsls	r2, r3, #24
 801cefa:	d410      	bmi.n	801cf1e <__swhatbuf_r+0x3e>
 801cefc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cf00:	e00e      	b.n	801cf20 <__swhatbuf_r+0x40>
 801cf02:	466a      	mov	r2, sp
 801cf04:	f000 f864 	bl	801cfd0 <_fstat_r>
 801cf08:	2800      	cmp	r0, #0
 801cf0a:	dbf2      	blt.n	801cef2 <__swhatbuf_r+0x12>
 801cf0c:	9a01      	ldr	r2, [sp, #4]
 801cf0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cf12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cf16:	425a      	negs	r2, r3
 801cf18:	415a      	adcs	r2, r3
 801cf1a:	602a      	str	r2, [r5, #0]
 801cf1c:	e7ee      	b.n	801cefc <__swhatbuf_r+0x1c>
 801cf1e:	2340      	movs	r3, #64	; 0x40
 801cf20:	2000      	movs	r0, #0
 801cf22:	6023      	str	r3, [r4, #0]
 801cf24:	b016      	add	sp, #88	; 0x58
 801cf26:	bd70      	pop	{r4, r5, r6, pc}

0801cf28 <__smakebuf_r>:
 801cf28:	898b      	ldrh	r3, [r1, #12]
 801cf2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cf2c:	079d      	lsls	r5, r3, #30
 801cf2e:	4606      	mov	r6, r0
 801cf30:	460c      	mov	r4, r1
 801cf32:	d507      	bpl.n	801cf44 <__smakebuf_r+0x1c>
 801cf34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cf38:	6023      	str	r3, [r4, #0]
 801cf3a:	6123      	str	r3, [r4, #16]
 801cf3c:	2301      	movs	r3, #1
 801cf3e:	6163      	str	r3, [r4, #20]
 801cf40:	b002      	add	sp, #8
 801cf42:	bd70      	pop	{r4, r5, r6, pc}
 801cf44:	ab01      	add	r3, sp, #4
 801cf46:	466a      	mov	r2, sp
 801cf48:	f7ff ffca 	bl	801cee0 <__swhatbuf_r>
 801cf4c:	9900      	ldr	r1, [sp, #0]
 801cf4e:	4605      	mov	r5, r0
 801cf50:	4630      	mov	r0, r6
 801cf52:	f7ff faab 	bl	801c4ac <_malloc_r>
 801cf56:	b948      	cbnz	r0, 801cf6c <__smakebuf_r+0x44>
 801cf58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf5c:	059a      	lsls	r2, r3, #22
 801cf5e:	d4ef      	bmi.n	801cf40 <__smakebuf_r+0x18>
 801cf60:	f023 0303 	bic.w	r3, r3, #3
 801cf64:	f043 0302 	orr.w	r3, r3, #2
 801cf68:	81a3      	strh	r3, [r4, #12]
 801cf6a:	e7e3      	b.n	801cf34 <__smakebuf_r+0xc>
 801cf6c:	4b0d      	ldr	r3, [pc, #52]	; (801cfa4 <__smakebuf_r+0x7c>)
 801cf6e:	62b3      	str	r3, [r6, #40]	; 0x28
 801cf70:	89a3      	ldrh	r3, [r4, #12]
 801cf72:	6020      	str	r0, [r4, #0]
 801cf74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf78:	81a3      	strh	r3, [r4, #12]
 801cf7a:	9b00      	ldr	r3, [sp, #0]
 801cf7c:	6163      	str	r3, [r4, #20]
 801cf7e:	9b01      	ldr	r3, [sp, #4]
 801cf80:	6120      	str	r0, [r4, #16]
 801cf82:	b15b      	cbz	r3, 801cf9c <__smakebuf_r+0x74>
 801cf84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf88:	4630      	mov	r0, r6
 801cf8a:	f000 f833 	bl	801cff4 <_isatty_r>
 801cf8e:	b128      	cbz	r0, 801cf9c <__smakebuf_r+0x74>
 801cf90:	89a3      	ldrh	r3, [r4, #12]
 801cf92:	f023 0303 	bic.w	r3, r3, #3
 801cf96:	f043 0301 	orr.w	r3, r3, #1
 801cf9a:	81a3      	strh	r3, [r4, #12]
 801cf9c:	89a3      	ldrh	r3, [r4, #12]
 801cf9e:	431d      	orrs	r5, r3
 801cfa0:	81a5      	strh	r5, [r4, #12]
 801cfa2:	e7cd      	b.n	801cf40 <__smakebuf_r+0x18>
 801cfa4:	0801c2b5 	.word	0x0801c2b5

0801cfa8 <__malloc_lock>:
 801cfa8:	4770      	bx	lr

0801cfaa <__malloc_unlock>:
 801cfaa:	4770      	bx	lr

0801cfac <_read_r>:
 801cfac:	b538      	push	{r3, r4, r5, lr}
 801cfae:	4c07      	ldr	r4, [pc, #28]	; (801cfcc <_read_r+0x20>)
 801cfb0:	4605      	mov	r5, r0
 801cfb2:	4608      	mov	r0, r1
 801cfb4:	4611      	mov	r1, r2
 801cfb6:	2200      	movs	r2, #0
 801cfb8:	6022      	str	r2, [r4, #0]
 801cfba:	461a      	mov	r2, r3
 801cfbc:	f7eb ff28 	bl	8008e10 <_read>
 801cfc0:	1c43      	adds	r3, r0, #1
 801cfc2:	d102      	bne.n	801cfca <_read_r+0x1e>
 801cfc4:	6823      	ldr	r3, [r4, #0]
 801cfc6:	b103      	cbz	r3, 801cfca <_read_r+0x1e>
 801cfc8:	602b      	str	r3, [r5, #0]
 801cfca:	bd38      	pop	{r3, r4, r5, pc}
 801cfcc:	2000b35c 	.word	0x2000b35c

0801cfd0 <_fstat_r>:
 801cfd0:	b538      	push	{r3, r4, r5, lr}
 801cfd2:	4c07      	ldr	r4, [pc, #28]	; (801cff0 <_fstat_r+0x20>)
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	4605      	mov	r5, r0
 801cfd8:	4608      	mov	r0, r1
 801cfda:	4611      	mov	r1, r2
 801cfdc:	6023      	str	r3, [r4, #0]
 801cfde:	f7eb ff5c 	bl	8008e9a <_fstat>
 801cfe2:	1c43      	adds	r3, r0, #1
 801cfe4:	d102      	bne.n	801cfec <_fstat_r+0x1c>
 801cfe6:	6823      	ldr	r3, [r4, #0]
 801cfe8:	b103      	cbz	r3, 801cfec <_fstat_r+0x1c>
 801cfea:	602b      	str	r3, [r5, #0]
 801cfec:	bd38      	pop	{r3, r4, r5, pc}
 801cfee:	bf00      	nop
 801cff0:	2000b35c 	.word	0x2000b35c

0801cff4 <_isatty_r>:
 801cff4:	b538      	push	{r3, r4, r5, lr}
 801cff6:	4c06      	ldr	r4, [pc, #24]	; (801d010 <_isatty_r+0x1c>)
 801cff8:	2300      	movs	r3, #0
 801cffa:	4605      	mov	r5, r0
 801cffc:	4608      	mov	r0, r1
 801cffe:	6023      	str	r3, [r4, #0]
 801d000:	f7eb ff5b 	bl	8008eba <_isatty>
 801d004:	1c43      	adds	r3, r0, #1
 801d006:	d102      	bne.n	801d00e <_isatty_r+0x1a>
 801d008:	6823      	ldr	r3, [r4, #0]
 801d00a:	b103      	cbz	r3, 801d00e <_isatty_r+0x1a>
 801d00c:	602b      	str	r3, [r5, #0]
 801d00e:	bd38      	pop	{r3, r4, r5, pc}
 801d010:	2000b35c 	.word	0x2000b35c

0801d014 <_init>:
 801d014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d016:	bf00      	nop
 801d018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d01a:	bc08      	pop	{r3}
 801d01c:	469e      	mov	lr, r3
 801d01e:	4770      	bx	lr

0801d020 <_fini>:
 801d020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d022:	bf00      	nop
 801d024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d026:	bc08      	pop	{r3}
 801d028:	469e      	mov	lr, r3
 801d02a:	4770      	bx	lr
