
updating_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00030000  2**2
                  ALLOC
  1 .isr_vector   000001fc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013a78  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002dd0  0801bc78  0801bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0801ea48  0801ea48  0001ea48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0801ea50  0801ea50  0001ea50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801ea54  0801ea54  0001ea54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000080  20000040  0801ea58  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000b428  200000c0  0801ead8  000200c0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000b4e8  0801ead8  0002b4e8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003cb43  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000774b  00000000  00000000  0005cc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001f00  00000000  00000000  00064380  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001d80  00000000  00000000  00066280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00037381  00000000  00000000  00068000  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00029b5c  00000000  00000000  0009f381  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00119197  00000000  00000000  000c8edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001e2074  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000082e0  00000000  00000000  001e20f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	200000c0 	.word	0x200000c0
 800821c:	00000000 	.word	0x00000000
 8008220:	0801bc60 	.word	0x0801bc60

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	200000c4 	.word	0x200000c4
 800823c:	0801bc60 	.word	0x0801bc60

08008240 <strlen>:
 8008240:	4603      	mov	r3, r0
 8008242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008246:	2a00      	cmp	r2, #0
 8008248:	d1fb      	bne.n	8008242 <strlen+0x2>
 800824a:	1a18      	subs	r0, r3, r0
 800824c:	3801      	subs	r0, #1
 800824e:	4770      	bx	lr

08008250 <memchr>:
 8008250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008254:	2a10      	cmp	r2, #16
 8008256:	db2b      	blt.n	80082b0 <memchr+0x60>
 8008258:	f010 0f07 	tst.w	r0, #7
 800825c:	d008      	beq.n	8008270 <memchr+0x20>
 800825e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008262:	3a01      	subs	r2, #1
 8008264:	428b      	cmp	r3, r1
 8008266:	d02d      	beq.n	80082c4 <memchr+0x74>
 8008268:	f010 0f07 	tst.w	r0, #7
 800826c:	b342      	cbz	r2, 80082c0 <memchr+0x70>
 800826e:	d1f6      	bne.n	800825e <memchr+0xe>
 8008270:	b4f0      	push	{r4, r5, r6, r7}
 8008272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800827a:	f022 0407 	bic.w	r4, r2, #7
 800827e:	f07f 0700 	mvns.w	r7, #0
 8008282:	2300      	movs	r3, #0
 8008284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008288:	3c08      	subs	r4, #8
 800828a:	ea85 0501 	eor.w	r5, r5, r1
 800828e:	ea86 0601 	eor.w	r6, r6, r1
 8008292:	fa85 f547 	uadd8	r5, r5, r7
 8008296:	faa3 f587 	sel	r5, r3, r7
 800829a:	fa86 f647 	uadd8	r6, r6, r7
 800829e:	faa5 f687 	sel	r6, r5, r7
 80082a2:	b98e      	cbnz	r6, 80082c8 <memchr+0x78>
 80082a4:	d1ee      	bne.n	8008284 <memchr+0x34>
 80082a6:	bcf0      	pop	{r4, r5, r6, r7}
 80082a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80082ac:	f002 0207 	and.w	r2, r2, #7
 80082b0:	b132      	cbz	r2, 80082c0 <memchr+0x70>
 80082b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082b6:	3a01      	subs	r2, #1
 80082b8:	ea83 0301 	eor.w	r3, r3, r1
 80082bc:	b113      	cbz	r3, 80082c4 <memchr+0x74>
 80082be:	d1f8      	bne.n	80082b2 <memchr+0x62>
 80082c0:	2000      	movs	r0, #0
 80082c2:	4770      	bx	lr
 80082c4:	3801      	subs	r0, #1
 80082c6:	4770      	bx	lr
 80082c8:	2d00      	cmp	r5, #0
 80082ca:	bf06      	itte	eq
 80082cc:	4635      	moveq	r5, r6
 80082ce:	3803      	subeq	r0, #3
 80082d0:	3807      	subne	r0, #7
 80082d2:	f015 0f01 	tst.w	r5, #1
 80082d6:	d107      	bne.n	80082e8 <memchr+0x98>
 80082d8:	3001      	adds	r0, #1
 80082da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80082de:	bf02      	ittt	eq
 80082e0:	3001      	addeq	r0, #1
 80082e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80082e6:	3001      	addeq	r0, #1
 80082e8:	bcf0      	pop	{r4, r5, r6, r7}
 80082ea:	3801      	subs	r0, #1
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop

080082f0 <__aeabi_uldivmod>:
 80082f0:	b953      	cbnz	r3, 8008308 <__aeabi_uldivmod+0x18>
 80082f2:	b94a      	cbnz	r2, 8008308 <__aeabi_uldivmod+0x18>
 80082f4:	2900      	cmp	r1, #0
 80082f6:	bf08      	it	eq
 80082f8:	2800      	cmpeq	r0, #0
 80082fa:	bf1c      	itt	ne
 80082fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008304:	f000 b972 	b.w	80085ec <__aeabi_idiv0>
 8008308:	f1ad 0c08 	sub.w	ip, sp, #8
 800830c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008310:	f000 f806 	bl	8008320 <__udivmoddi4>
 8008314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800831c:	b004      	add	sp, #16
 800831e:	4770      	bx	lr

08008320 <__udivmoddi4>:
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	9e08      	ldr	r6, [sp, #32]
 8008326:	4604      	mov	r4, r0
 8008328:	4688      	mov	r8, r1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d14b      	bne.n	80083c6 <__udivmoddi4+0xa6>
 800832e:	428a      	cmp	r2, r1
 8008330:	4615      	mov	r5, r2
 8008332:	d967      	bls.n	8008404 <__udivmoddi4+0xe4>
 8008334:	fab2 f282 	clz	r2, r2
 8008338:	b14a      	cbz	r2, 800834e <__udivmoddi4+0x2e>
 800833a:	f1c2 0720 	rsb	r7, r2, #32
 800833e:	fa01 f302 	lsl.w	r3, r1, r2
 8008342:	fa20 f707 	lsr.w	r7, r0, r7
 8008346:	4095      	lsls	r5, r2
 8008348:	ea47 0803 	orr.w	r8, r7, r3
 800834c:	4094      	lsls	r4, r2
 800834e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008352:	0c23      	lsrs	r3, r4, #16
 8008354:	fbb8 f7fe 	udiv	r7, r8, lr
 8008358:	fa1f fc85 	uxth.w	ip, r5
 800835c:	fb0e 8817 	mls	r8, lr, r7, r8
 8008360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008364:	fb07 f10c 	mul.w	r1, r7, ip
 8008368:	4299      	cmp	r1, r3
 800836a:	d909      	bls.n	8008380 <__udivmoddi4+0x60>
 800836c:	18eb      	adds	r3, r5, r3
 800836e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8008372:	f080 811b 	bcs.w	80085ac <__udivmoddi4+0x28c>
 8008376:	4299      	cmp	r1, r3
 8008378:	f240 8118 	bls.w	80085ac <__udivmoddi4+0x28c>
 800837c:	3f02      	subs	r7, #2
 800837e:	442b      	add	r3, r5
 8008380:	1a5b      	subs	r3, r3, r1
 8008382:	b2a4      	uxth	r4, r4
 8008384:	fbb3 f0fe 	udiv	r0, r3, lr
 8008388:	fb0e 3310 	mls	r3, lr, r0, r3
 800838c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008390:	fb00 fc0c 	mul.w	ip, r0, ip
 8008394:	45a4      	cmp	ip, r4
 8008396:	d909      	bls.n	80083ac <__udivmoddi4+0x8c>
 8008398:	192c      	adds	r4, r5, r4
 800839a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800839e:	f080 8107 	bcs.w	80085b0 <__udivmoddi4+0x290>
 80083a2:	45a4      	cmp	ip, r4
 80083a4:	f240 8104 	bls.w	80085b0 <__udivmoddi4+0x290>
 80083a8:	3802      	subs	r0, #2
 80083aa:	442c      	add	r4, r5
 80083ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80083b0:	eba4 040c 	sub.w	r4, r4, ip
 80083b4:	2700      	movs	r7, #0
 80083b6:	b11e      	cbz	r6, 80083c0 <__udivmoddi4+0xa0>
 80083b8:	40d4      	lsrs	r4, r2
 80083ba:	2300      	movs	r3, #0
 80083bc:	e9c6 4300 	strd	r4, r3, [r6]
 80083c0:	4639      	mov	r1, r7
 80083c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c6:	428b      	cmp	r3, r1
 80083c8:	d909      	bls.n	80083de <__udivmoddi4+0xbe>
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	f000 80eb 	beq.w	80085a6 <__udivmoddi4+0x286>
 80083d0:	2700      	movs	r7, #0
 80083d2:	e9c6 0100 	strd	r0, r1, [r6]
 80083d6:	4638      	mov	r0, r7
 80083d8:	4639      	mov	r1, r7
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	fab3 f783 	clz	r7, r3
 80083e2:	2f00      	cmp	r7, #0
 80083e4:	d147      	bne.n	8008476 <__udivmoddi4+0x156>
 80083e6:	428b      	cmp	r3, r1
 80083e8:	d302      	bcc.n	80083f0 <__udivmoddi4+0xd0>
 80083ea:	4282      	cmp	r2, r0
 80083ec:	f200 80fa 	bhi.w	80085e4 <__udivmoddi4+0x2c4>
 80083f0:	1a84      	subs	r4, r0, r2
 80083f2:	eb61 0303 	sbc.w	r3, r1, r3
 80083f6:	2001      	movs	r0, #1
 80083f8:	4698      	mov	r8, r3
 80083fa:	2e00      	cmp	r6, #0
 80083fc:	d0e0      	beq.n	80083c0 <__udivmoddi4+0xa0>
 80083fe:	e9c6 4800 	strd	r4, r8, [r6]
 8008402:	e7dd      	b.n	80083c0 <__udivmoddi4+0xa0>
 8008404:	b902      	cbnz	r2, 8008408 <__udivmoddi4+0xe8>
 8008406:	deff      	udf	#255	; 0xff
 8008408:	fab2 f282 	clz	r2, r2
 800840c:	2a00      	cmp	r2, #0
 800840e:	f040 808f 	bne.w	8008530 <__udivmoddi4+0x210>
 8008412:	1b49      	subs	r1, r1, r5
 8008414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008418:	fa1f f885 	uxth.w	r8, r5
 800841c:	2701      	movs	r7, #1
 800841e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008422:	0c23      	lsrs	r3, r4, #16
 8008424:	fb0e 111c 	mls	r1, lr, ip, r1
 8008428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800842c:	fb08 f10c 	mul.w	r1, r8, ip
 8008430:	4299      	cmp	r1, r3
 8008432:	d907      	bls.n	8008444 <__udivmoddi4+0x124>
 8008434:	18eb      	adds	r3, r5, r3
 8008436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800843a:	d202      	bcs.n	8008442 <__udivmoddi4+0x122>
 800843c:	4299      	cmp	r1, r3
 800843e:	f200 80cd 	bhi.w	80085dc <__udivmoddi4+0x2bc>
 8008442:	4684      	mov	ip, r0
 8008444:	1a59      	subs	r1, r3, r1
 8008446:	b2a3      	uxth	r3, r4
 8008448:	fbb1 f0fe 	udiv	r0, r1, lr
 800844c:	fb0e 1410 	mls	r4, lr, r0, r1
 8008450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008454:	fb08 f800 	mul.w	r8, r8, r0
 8008458:	45a0      	cmp	r8, r4
 800845a:	d907      	bls.n	800846c <__udivmoddi4+0x14c>
 800845c:	192c      	adds	r4, r5, r4
 800845e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008462:	d202      	bcs.n	800846a <__udivmoddi4+0x14a>
 8008464:	45a0      	cmp	r8, r4
 8008466:	f200 80b6 	bhi.w	80085d6 <__udivmoddi4+0x2b6>
 800846a:	4618      	mov	r0, r3
 800846c:	eba4 0408 	sub.w	r4, r4, r8
 8008470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008474:	e79f      	b.n	80083b6 <__udivmoddi4+0x96>
 8008476:	f1c7 0c20 	rsb	ip, r7, #32
 800847a:	40bb      	lsls	r3, r7
 800847c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008480:	ea4e 0e03 	orr.w	lr, lr, r3
 8008484:	fa01 f407 	lsl.w	r4, r1, r7
 8008488:	fa20 f50c 	lsr.w	r5, r0, ip
 800848c:	fa21 f30c 	lsr.w	r3, r1, ip
 8008490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008494:	4325      	orrs	r5, r4
 8008496:	fbb3 f9f8 	udiv	r9, r3, r8
 800849a:	0c2c      	lsrs	r4, r5, #16
 800849c:	fb08 3319 	mls	r3, r8, r9, r3
 80084a0:	fa1f fa8e 	uxth.w	sl, lr
 80084a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80084a8:	fb09 f40a 	mul.w	r4, r9, sl
 80084ac:	429c      	cmp	r4, r3
 80084ae:	fa02 f207 	lsl.w	r2, r2, r7
 80084b2:	fa00 f107 	lsl.w	r1, r0, r7
 80084b6:	d90b      	bls.n	80084d0 <__udivmoddi4+0x1b0>
 80084b8:	eb1e 0303 	adds.w	r3, lr, r3
 80084bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80084c0:	f080 8087 	bcs.w	80085d2 <__udivmoddi4+0x2b2>
 80084c4:	429c      	cmp	r4, r3
 80084c6:	f240 8084 	bls.w	80085d2 <__udivmoddi4+0x2b2>
 80084ca:	f1a9 0902 	sub.w	r9, r9, #2
 80084ce:	4473      	add	r3, lr
 80084d0:	1b1b      	subs	r3, r3, r4
 80084d2:	b2ad      	uxth	r5, r5
 80084d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80084d8:	fb08 3310 	mls	r3, r8, r0, r3
 80084dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80084e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80084e4:	45a2      	cmp	sl, r4
 80084e6:	d908      	bls.n	80084fa <__udivmoddi4+0x1da>
 80084e8:	eb1e 0404 	adds.w	r4, lr, r4
 80084ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80084f0:	d26b      	bcs.n	80085ca <__udivmoddi4+0x2aa>
 80084f2:	45a2      	cmp	sl, r4
 80084f4:	d969      	bls.n	80085ca <__udivmoddi4+0x2aa>
 80084f6:	3802      	subs	r0, #2
 80084f8:	4474      	add	r4, lr
 80084fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80084fe:	fba0 8902 	umull	r8, r9, r0, r2
 8008502:	eba4 040a 	sub.w	r4, r4, sl
 8008506:	454c      	cmp	r4, r9
 8008508:	46c2      	mov	sl, r8
 800850a:	464b      	mov	r3, r9
 800850c:	d354      	bcc.n	80085b8 <__udivmoddi4+0x298>
 800850e:	d051      	beq.n	80085b4 <__udivmoddi4+0x294>
 8008510:	2e00      	cmp	r6, #0
 8008512:	d069      	beq.n	80085e8 <__udivmoddi4+0x2c8>
 8008514:	ebb1 050a 	subs.w	r5, r1, sl
 8008518:	eb64 0403 	sbc.w	r4, r4, r3
 800851c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008520:	40fd      	lsrs	r5, r7
 8008522:	40fc      	lsrs	r4, r7
 8008524:	ea4c 0505 	orr.w	r5, ip, r5
 8008528:	e9c6 5400 	strd	r5, r4, [r6]
 800852c:	2700      	movs	r7, #0
 800852e:	e747      	b.n	80083c0 <__udivmoddi4+0xa0>
 8008530:	f1c2 0320 	rsb	r3, r2, #32
 8008534:	fa20 f703 	lsr.w	r7, r0, r3
 8008538:	4095      	lsls	r5, r2
 800853a:	fa01 f002 	lsl.w	r0, r1, r2
 800853e:	fa21 f303 	lsr.w	r3, r1, r3
 8008542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008546:	4338      	orrs	r0, r7
 8008548:	0c01      	lsrs	r1, r0, #16
 800854a:	fbb3 f7fe 	udiv	r7, r3, lr
 800854e:	fa1f f885 	uxth.w	r8, r5
 8008552:	fb0e 3317 	mls	r3, lr, r7, r3
 8008556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800855a:	fb07 f308 	mul.w	r3, r7, r8
 800855e:	428b      	cmp	r3, r1
 8008560:	fa04 f402 	lsl.w	r4, r4, r2
 8008564:	d907      	bls.n	8008576 <__udivmoddi4+0x256>
 8008566:	1869      	adds	r1, r5, r1
 8008568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800856c:	d22f      	bcs.n	80085ce <__udivmoddi4+0x2ae>
 800856e:	428b      	cmp	r3, r1
 8008570:	d92d      	bls.n	80085ce <__udivmoddi4+0x2ae>
 8008572:	3f02      	subs	r7, #2
 8008574:	4429      	add	r1, r5
 8008576:	1acb      	subs	r3, r1, r3
 8008578:	b281      	uxth	r1, r0
 800857a:	fbb3 f0fe 	udiv	r0, r3, lr
 800857e:	fb0e 3310 	mls	r3, lr, r0, r3
 8008582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008586:	fb00 f308 	mul.w	r3, r0, r8
 800858a:	428b      	cmp	r3, r1
 800858c:	d907      	bls.n	800859e <__udivmoddi4+0x27e>
 800858e:	1869      	adds	r1, r5, r1
 8008590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8008594:	d217      	bcs.n	80085c6 <__udivmoddi4+0x2a6>
 8008596:	428b      	cmp	r3, r1
 8008598:	d915      	bls.n	80085c6 <__udivmoddi4+0x2a6>
 800859a:	3802      	subs	r0, #2
 800859c:	4429      	add	r1, r5
 800859e:	1ac9      	subs	r1, r1, r3
 80085a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80085a4:	e73b      	b.n	800841e <__udivmoddi4+0xfe>
 80085a6:	4637      	mov	r7, r6
 80085a8:	4630      	mov	r0, r6
 80085aa:	e709      	b.n	80083c0 <__udivmoddi4+0xa0>
 80085ac:	4607      	mov	r7, r0
 80085ae:	e6e7      	b.n	8008380 <__udivmoddi4+0x60>
 80085b0:	4618      	mov	r0, r3
 80085b2:	e6fb      	b.n	80083ac <__udivmoddi4+0x8c>
 80085b4:	4541      	cmp	r1, r8
 80085b6:	d2ab      	bcs.n	8008510 <__udivmoddi4+0x1f0>
 80085b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80085bc:	eb69 020e 	sbc.w	r2, r9, lr
 80085c0:	3801      	subs	r0, #1
 80085c2:	4613      	mov	r3, r2
 80085c4:	e7a4      	b.n	8008510 <__udivmoddi4+0x1f0>
 80085c6:	4660      	mov	r0, ip
 80085c8:	e7e9      	b.n	800859e <__udivmoddi4+0x27e>
 80085ca:	4618      	mov	r0, r3
 80085cc:	e795      	b.n	80084fa <__udivmoddi4+0x1da>
 80085ce:	4667      	mov	r7, ip
 80085d0:	e7d1      	b.n	8008576 <__udivmoddi4+0x256>
 80085d2:	4681      	mov	r9, r0
 80085d4:	e77c      	b.n	80084d0 <__udivmoddi4+0x1b0>
 80085d6:	3802      	subs	r0, #2
 80085d8:	442c      	add	r4, r5
 80085da:	e747      	b.n	800846c <__udivmoddi4+0x14c>
 80085dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80085e0:	442b      	add	r3, r5
 80085e2:	e72f      	b.n	8008444 <__udivmoddi4+0x124>
 80085e4:	4638      	mov	r0, r7
 80085e6:	e708      	b.n	80083fa <__udivmoddi4+0xda>
 80085e8:	4637      	mov	r7, r6
 80085ea:	e6e9      	b.n	80083c0 <__udivmoddi4+0xa0>

080085ec <__aeabi_idiv0>:
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop

080085f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80085f4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <__NVIC_SystemReset+0x20>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008600:	4903      	ldr	r1, [pc, #12]	; (8008610 <__NVIC_SystemReset+0x20>)
 8008602:	4b04      	ldr	r3, [pc, #16]	; (8008614 <__NVIC_SystemReset+0x24>)
 8008604:	4313      	orrs	r3, r2
 8008606:	60cb      	str	r3, [r1, #12]
 8008608:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800860c:	bf00      	nop
 800860e:	e7fd      	b.n	800860c <__NVIC_SystemReset+0x1c>
 8008610:	e000ed00 	.word	0xe000ed00
 8008614:	05fa0004 	.word	0x05fa0004

08008618 <BootActivate>:
** \brief     Bootloader activation function.
** \return    none.
**
****************************************************************************************/
void BootActivate(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
  /* perform software reset to activate the bootoader again */
  NVIC_SystemReset();
 800861c:	f7ff ffe8 	bl	80085f0 <__NVIC_SystemReset>

08008620 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4a07      	ldr	r2, [pc, #28]	; (800864c <vApplicationGetIdleTaskMemory+0x2c>)
 8008630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	4a06      	ldr	r2, [pc, #24]	; (8008650 <vApplicationGetIdleTaskMemory+0x30>)
 8008636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2280      	movs	r2, #128	; 0x80
 800863c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800863e:	bf00      	nop
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	200000dc 	.word	0x200000dc
 8008650:	20000130 	.word	0x20000130

08008654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008654:	b5b0      	push	{r4, r5, r7, lr}
 8008656:	b08a      	sub	sp, #40	; 0x28
 8008658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VectorBase_Config();
 800865a:	f000 f9e3 	bl	8008a24 <VectorBase_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800865e:	f000 fca2 	bl	8008fa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008662:	f000 f849 	bl	80086f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008666:	f000 f93b 	bl	80088e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800866a:	f000 f8db 	bl	8008824 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800866e:	f000 f909 	bl	8008884 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008672:	4b1e      	ldr	r3, [pc, #120]	; (80086ec <main+0x98>)
 8008674:	1d3c      	adds	r4, r7, #4
 8008676:	461d      	mov	r5, r3
 8008678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800867a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800867c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008684:	1d3b      	adds	r3, r7, #4
 8008686:	2100      	movs	r1, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f004 fe31 	bl	800d2f0 <osThreadCreate>
 800868e:	4602      	mov	r2, r0
 8008690:	4b17      	ldr	r3, [pc, #92]	; (80086f0 <main+0x9c>)
 8008692:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008694:	f004 fe15 	bl	800d2c2 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i= 0; i <10 ; i++){
 8008698:	2300      	movs	r3, #0
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
 800869c:	e00b      	b.n	80086b6 <main+0x62>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 800869e:	f244 0181 	movw	r1, #16513	; 0x4081
 80086a2:	4814      	ldr	r0, [pc, #80]	; (80086f4 <main+0xa0>)
 80086a4:	f001 ffc5 	bl	800a632 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80086a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086ac:	f000 fcd8 	bl	8009060 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	3301      	adds	r3, #1
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	2b09      	cmp	r3, #9
 80086ba:	ddf0      	ble.n	800869e <main+0x4a>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 80086bc:	2300      	movs	r3, #0
 80086be:	623b      	str	r3, [r7, #32]
 80086c0:	e00a      	b.n	80086d8 <main+0x84>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 80086c2:	f244 0181 	movw	r1, #16513	; 0x4081
 80086c6:	480b      	ldr	r0, [pc, #44]	; (80086f4 <main+0xa0>)
 80086c8:	f001 ffb3 	bl	800a632 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 80086cc:	2032      	movs	r0, #50	; 0x32
 80086ce:	f000 fcc7 	bl	8009060 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	3301      	adds	r3, #1
 80086d6:	623b      	str	r3, [r7, #32]
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	2b09      	cmp	r3, #9
 80086dc:	ddf1      	ble.n	80086c2 <main+0x6e>
	  }
      SharedParamsWriteByIndex(0, 1);
 80086de:	2101      	movs	r1, #1
 80086e0:	2000      	movs	r0, #0
 80086e2:	f000 f9e7 	bl	8008ab4 <SharedParamsWriteByIndex>
      /* connection request received so start the bootloader */
      BootActivate();
 80086e6:	f7ff ff97 	bl	8008618 <BootActivate>
	  for(int i= 0; i <10 ; i++){
 80086ea:	e7d5      	b.n	8008698 <main+0x44>
 80086ec:	0801bc84 	.word	0x0801bc84
 80086f0:	200046a8 	.word	0x200046a8
 80086f4:	40020400 	.word	0x40020400

080086f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b0b8      	sub	sp, #224	; 0xe0
 80086fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008702:	2234      	movs	r2, #52	; 0x34
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f012 fb82 	bl	801ae10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800870c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	605a      	str	r2, [r3, #4]
 8008716:	609a      	str	r2, [r3, #8]
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800871c:	f107 0308 	add.w	r3, r7, #8
 8008720:	2290      	movs	r2, #144	; 0x90
 8008722:	2100      	movs	r1, #0
 8008724:	4618      	mov	r0, r3
 8008726:	f012 fb73 	bl	801ae10 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800872a:	f002 f8e5 	bl	800a8f8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800872e:	4b3a      	ldr	r3, [pc, #232]	; (8008818 <SystemClock_Config+0x120>)
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	4a39      	ldr	r2, [pc, #228]	; (8008818 <SystemClock_Config+0x120>)
 8008734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008738:	6413      	str	r3, [r2, #64]	; 0x40
 800873a:	4b37      	ldr	r3, [pc, #220]	; (8008818 <SystemClock_Config+0x120>)
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008742:	607b      	str	r3, [r7, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008746:	4b35      	ldr	r3, [pc, #212]	; (800881c <SystemClock_Config+0x124>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800874e:	4a33      	ldr	r2, [pc, #204]	; (800881c <SystemClock_Config+0x124>)
 8008750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	4b31      	ldr	r3, [pc, #196]	; (800881c <SystemClock_Config+0x124>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008762:	2301      	movs	r3, #1
 8008764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008768:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800876c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008770:	2302      	movs	r3, #2
 8008772:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800877a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800877e:	2304      	movs	r3, #4
 8008780:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8008784:	2360      	movs	r3, #96	; 0x60
 8008786:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800878a:	2302      	movs	r3, #2
 800878c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008790:	2304      	movs	r3, #4
 8008792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800879a:	4618      	mov	r0, r3
 800879c:	f002 f90c 	bl	800a9b8 <HAL_RCC_OscConfig>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80087a6:	f000 f97d 	bl	8008aa4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80087aa:	f002 f8b5 	bl	800a918 <HAL_PWREx_EnableOverDrive>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80087b4:	f000 f976 	bl	8008aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80087b8:	230f      	movs	r3, #15
 80087ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80087be:	2302      	movs	r3, #2
 80087c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80087c4:	2300      	movs	r3, #0
 80087c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80087ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80087d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80087dc:	2103      	movs	r1, #3
 80087de:	4618      	mov	r0, r3
 80087e0:	f002 fb98 	bl	800af14 <HAL_RCC_ClockConfig>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80087ea:	f000 f95b 	bl	8008aa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <SystemClock_Config+0x128>)
 80087f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80087f2:	2300      	movs	r3, #0
 80087f4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087fc:	f107 0308 	add.w	r3, r7, #8
 8008800:	4618      	mov	r0, r3
 8008802:	f002 fd7f 	bl	800b304 <HAL_RCCEx_PeriphCLKConfig>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <SystemClock_Config+0x118>
  {
    Error_Handler();
 800880c:	f000 f94a 	bl	8008aa4 <Error_Handler>
  }
}
 8008810:	bf00      	nop
 8008812:	37e0      	adds	r7, #224	; 0xe0
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	40023800 	.word	0x40023800
 800881c:	40007000 	.word	0x40007000
 8008820:	00200100 	.word	0x00200100

08008824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008828:	4b14      	ldr	r3, [pc, #80]	; (800887c <MX_USART3_UART_Init+0x58>)
 800882a:	4a15      	ldr	r2, [pc, #84]	; (8008880 <MX_USART3_UART_Init+0x5c>)
 800882c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <MX_USART3_UART_Init+0x58>)
 8008830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <MX_USART3_UART_Init+0x58>)
 8008838:	2200      	movs	r2, #0
 800883a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800883c:	4b0f      	ldr	r3, [pc, #60]	; (800887c <MX_USART3_UART_Init+0x58>)
 800883e:	2200      	movs	r2, #0
 8008840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008842:	4b0e      	ldr	r3, [pc, #56]	; (800887c <MX_USART3_UART_Init+0x58>)
 8008844:	2200      	movs	r2, #0
 8008846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008848:	4b0c      	ldr	r3, [pc, #48]	; (800887c <MX_USART3_UART_Init+0x58>)
 800884a:	220c      	movs	r2, #12
 800884c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <MX_USART3_UART_Init+0x58>)
 8008850:	2200      	movs	r2, #0
 8008852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008854:	4b09      	ldr	r3, [pc, #36]	; (800887c <MX_USART3_UART_Init+0x58>)
 8008856:	2200      	movs	r2, #0
 8008858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800885a:	4b08      	ldr	r3, [pc, #32]	; (800887c <MX_USART3_UART_Init+0x58>)
 800885c:	2200      	movs	r2, #0
 800885e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008860:	4b06      	ldr	r3, [pc, #24]	; (800887c <MX_USART3_UART_Init+0x58>)
 8008862:	2200      	movs	r2, #0
 8008864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008866:	4805      	ldr	r0, [pc, #20]	; (800887c <MX_USART3_UART_Init+0x58>)
 8008868:	f003 f972 	bl	800bb50 <HAL_UART_Init>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8008872:	f000 f917 	bl	8008aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008876:	bf00      	nop
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200046ac 	.word	0x200046ac
 8008880:	40004800 	.word	0x40004800

08008884 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008888:	4b14      	ldr	r3, [pc, #80]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800888a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800888e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008890:	4b12      	ldr	r3, [pc, #72]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008892:	2206      	movs	r2, #6
 8008894:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008896:	4b11      	ldr	r3, [pc, #68]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008898:	2202      	movs	r2, #2
 800889a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800889e:	2200      	movs	r2, #0
 80088a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088a2:	4b0e      	ldr	r3, [pc, #56]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088a4:	2202      	movs	r2, #2
 80088a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088ae:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80088ba:	4b08      	ldr	r3, [pc, #32]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088bc:	2201      	movs	r2, #1
 80088be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088c0:	4b06      	ldr	r3, [pc, #24]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088c6:	4805      	ldr	r0, [pc, #20]	; (80088dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80088c8:	f001 fecd 	bl	800a666 <HAL_PCD_Init>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80088d2:	f000 f8e7 	bl	8008aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80088d6:	bf00      	nop
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	2000472c 	.word	0x2000472c

080088e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08c      	sub	sp, #48	; 0x30
 80088e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e6:	f107 031c 	add.w	r3, r7, #28
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	605a      	str	r2, [r3, #4]
 80088f0:	609a      	str	r2, [r3, #8]
 80088f2:	60da      	str	r2, [r3, #12]
 80088f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80088f6:	4b46      	ldr	r3, [pc, #280]	; (8008a10 <MX_GPIO_Init+0x130>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	4a45      	ldr	r2, [pc, #276]	; (8008a10 <MX_GPIO_Init+0x130>)
 80088fc:	f043 0304 	orr.w	r3, r3, #4
 8008900:	6313      	str	r3, [r2, #48]	; 0x30
 8008902:	4b43      	ldr	r3, [pc, #268]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	f003 0304 	and.w	r3, r3, #4
 800890a:	61bb      	str	r3, [r7, #24]
 800890c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800890e:	4b40      	ldr	r3, [pc, #256]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	4a3f      	ldr	r2, [pc, #252]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008918:	6313      	str	r3, [r2, #48]	; 0x30
 800891a:	4b3d      	ldr	r3, [pc, #244]	; (8008a10 <MX_GPIO_Init+0x130>)
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	617b      	str	r3, [r7, #20]
 8008924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008926:	4b3a      	ldr	r3, [pc, #232]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	4a39      	ldr	r2, [pc, #228]	; (8008a10 <MX_GPIO_Init+0x130>)
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	6313      	str	r3, [r2, #48]	; 0x30
 8008932:	4b37      	ldr	r3, [pc, #220]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800893e:	4b34      	ldr	r3, [pc, #208]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	4a33      	ldr	r2, [pc, #204]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008944:	f043 0302 	orr.w	r3, r3, #2
 8008948:	6313      	str	r3, [r2, #48]	; 0x30
 800894a:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <MX_GPIO_Init+0x130>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008956:	4b2e      	ldr	r3, [pc, #184]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	4a2d      	ldr	r2, [pc, #180]	; (8008a10 <MX_GPIO_Init+0x130>)
 800895c:	f043 0308 	orr.w	r3, r3, #8
 8008960:	6313      	str	r3, [r2, #48]	; 0x30
 8008962:	4b2b      	ldr	r3, [pc, #172]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	60bb      	str	r3, [r7, #8]
 800896c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800896e:	4b28      	ldr	r3, [pc, #160]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <MX_GPIO_Init+0x130>)
 8008974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008978:	6313      	str	r3, [r2, #48]	; 0x30
 800897a:	4b25      	ldr	r3, [pc, #148]	; (8008a10 <MX_GPIO_Init+0x130>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8008986:	2200      	movs	r2, #0
 8008988:	f244 0181 	movw	r1, #16513	; 0x4081
 800898c:	4821      	ldr	r0, [pc, #132]	; (8008a14 <MX_GPIO_Init+0x134>)
 800898e:	f001 fe37 	bl	800a600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8008992:	2200      	movs	r2, #0
 8008994:	2140      	movs	r1, #64	; 0x40
 8008996:	4820      	ldr	r0, [pc, #128]	; (8008a18 <MX_GPIO_Init+0x138>)
 8008998:	f001 fe32 	bl	800a600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800899c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80089a2:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <MX_GPIO_Init+0x13c>)
 80089a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80089aa:	f107 031c 	add.w	r3, r7, #28
 80089ae:	4619      	mov	r1, r3
 80089b0:	481b      	ldr	r0, [pc, #108]	; (8008a20 <MX_GPIO_Init+0x140>)
 80089b2:	f001 fc7b 	bl	800a2ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80089b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80089ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089bc:	2301      	movs	r3, #1
 80089be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089c4:	2300      	movs	r3, #0
 80089c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089c8:	f107 031c 	add.w	r3, r7, #28
 80089cc:	4619      	mov	r1, r3
 80089ce:	4811      	ldr	r0, [pc, #68]	; (8008a14 <MX_GPIO_Init+0x134>)
 80089d0:	f001 fc6c 	bl	800a2ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80089d4:	2340      	movs	r3, #64	; 0x40
 80089d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089d8:	2301      	movs	r3, #1
 80089da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089e0:	2300      	movs	r3, #0
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80089e4:	f107 031c 	add.w	r3, r7, #28
 80089e8:	4619      	mov	r1, r3
 80089ea:	480b      	ldr	r0, [pc, #44]	; (8008a18 <MX_GPIO_Init+0x138>)
 80089ec:	f001 fc5e 	bl	800a2ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80089f0:	2380      	movs	r3, #128	; 0x80
 80089f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089f4:	2300      	movs	r3, #0
 80089f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80089fc:	f107 031c 	add.w	r3, r7, #28
 8008a00:	4619      	mov	r1, r3
 8008a02:	4805      	ldr	r0, [pc, #20]	; (8008a18 <MX_GPIO_Init+0x138>)
 8008a04:	f001 fc52 	bl	800a2ac <HAL_GPIO_Init>

}
 8008a08:	bf00      	nop
 8008a0a:	3730      	adds	r7, #48	; 0x30
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	40023800 	.word	0x40023800
 8008a14:	40020400 	.word	0x40020400
 8008a18:	40021800 	.word	0x40021800
 8008a1c:	10110000 	.word	0x10110000
 8008a20:	40020800 	.word	0x40020800

08008a24 <VectorBase_Config>:

/* USER CODE BEGIN 4 */
static void VectorBase_Config(void)
{
 8008a24:	b480      	push	{r7}
 8008a26:	af00      	add	r7, sp, #0
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 8008a28:	4b03      	ldr	r3, [pc, #12]	; (8008a38 <VectorBase_Config+0x14>)
 8008a2a:	4a04      	ldr	r2, [pc, #16]	; (8008a3c <VectorBase_Config+0x18>)
 8008a2c:	609a      	str	r2, [r3, #8]
}
 8008a2e:	bf00      	nop
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	e000ed00 	.word	0xe000ed00
 8008a3c:	08008000 	.word	0x08008000

08008a40 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8008a48:	f003 ff8c 	bl	800c964 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  for(int i= 0; i <100 ; i++){
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	e00b      	b.n	8008a6a <StartDefaultTask+0x2a>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8008a52:	f244 0181 	movw	r1, #16513	; 0x4081
 8008a56:	4812      	ldr	r0, [pc, #72]	; (8008aa0 <StartDefaultTask+0x60>)
 8008a58:	f001 fdeb 	bl	800a632 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8008a5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a60:	f000 fafe 	bl	8009060 <HAL_Delay>
	  for(int i= 0; i <100 ; i++){
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b63      	cmp	r3, #99	; 0x63
 8008a6e:	ddf0      	ble.n	8008a52 <StartDefaultTask+0x12>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 8008a70:	2300      	movs	r3, #0
 8008a72:	60bb      	str	r3, [r7, #8]
 8008a74:	e00a      	b.n	8008a8c <StartDefaultTask+0x4c>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8008a76:	f244 0181 	movw	r1, #16513	; 0x4081
 8008a7a:	4809      	ldr	r0, [pc, #36]	; (8008aa0 <StartDefaultTask+0x60>)
 8008a7c:	f001 fdd9 	bl	800a632 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8008a80:	2032      	movs	r0, #50	; 0x32
 8008a82:	f000 faed 	bl	8009060 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	60bb      	str	r3, [r7, #8]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b09      	cmp	r3, #9
 8008a90:	ddf1      	ble.n	8008a76 <StartDefaultTask+0x36>
	  }
      SharedParamsWriteByIndex(0, 1);
 8008a92:	2101      	movs	r1, #1
 8008a94:	2000      	movs	r0, #0
 8008a96:	f000 f80d 	bl	8008ab4 <SharedParamsWriteByIndex>
      /* connection request received so start the bootloader */
      BootActivate();
 8008a9a:	f7ff fdbd 	bl	8008618 <BootActivate>
	  for(int i= 0; i <100 ; i++){
 8008a9e:	e7d5      	b.n	8008a4c <StartDefaultTask+0xc>
 8008aa0:	40020400 	.word	0x40020400

08008aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008aa8:	bf00      	nop
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <SharedParamsWriteByIndex>:
** \param     value Value to write.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsWriteByIndex(uint32_t idx, uint8_t value)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  bool result = false;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 8008ac4:	f000 f818 	bl	8008af8 <SharedParamsValidateBuffer>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00c      	beq.n	8008ae8 <SharedParamsWriteByIndex+0x34>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b37      	cmp	r3, #55	; 0x37
 8008ad2:	d809      	bhi.n	8008ae8 <SharedParamsWriteByIndex+0x34>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN) )
  {
    /* Write the value. */
    sharedParamsBuffer.data[idx] = value;
 8008ad4:	4a07      	ldr	r2, [pc, #28]	; (8008af4 <SharedParamsWriteByIndex+0x40>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4413      	add	r3, r2
 8008ada:	3304      	adds	r3, #4
 8008adc:	78fa      	ldrb	r2, [r7, #3]
 8008ade:	701a      	strb	r2, [r3, #0]
    /* Update the checksum since the contents were just changed. */
    SharedParamsWriteChecksum();
 8008ae0:	f000 f824 	bl	8008b2c <SharedParamsWriteChecksum>
    /* Update the result. */
    result = true;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsWriteByIndex ***/
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20000000 	.word	0x20000000

08008af8 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
  bool result = false;
 8008afe:	2300      	movs	r3, #0
 8008b00:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8008b02:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <SharedParamsValidateBuffer+0x2c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a08      	ldr	r2, [pc, #32]	; (8008b28 <SharedParamsValidateBuffer+0x30>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d106      	bne.n	8008b1a <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 8008b0c:	f000 f81a 	bl	8008b44 <SharedParamsVerifyChecksum>
 8008b10:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 8008b16:	2301      	movs	r3, #1
 8008b18:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000000 	.word	0x20000000
 8008b28:	ce42e7a2 	.word	0xce42e7a2

08008b2c <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8008b30:	f000 f81e 	bl	8008b70 <SharedParamsCalculateChecksum>
 8008b34:	4603      	mov	r3, r0
 8008b36:	461a      	mov	r2, r3
 8008b38:	4b01      	ldr	r3, [pc, #4]	; (8008b40 <SharedParamsWriteChecksum+0x14>)
 8008b3a:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8008b3c:	bf00      	nop
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20000000 	.word	0x20000000

08008b44 <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
  bool result = false;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 8008b4e:	f000 f80f 	bl	8008b70 <SharedParamsCalculateChecksum>
 8008b52:	4603      	mov	r3, r0
 8008b54:	461a      	mov	r2, r3
 8008b56:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <SharedParamsVerifyChecksum+0x28>)
 8008b58:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d101      	bne.n	8008b62 <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8008b62:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000000 	.word	0x20000000

08008b70 <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8008b7a:	4b1f      	ldr	r3, [pc, #124]	; (8008bf8 <SharedParamsCalculateChecksum+0x88>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	4413      	add	r3, r2
 8008b86:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8008b88:	4b1b      	ldr	r3, [pc, #108]	; (8008bf8 <SharedParamsCalculateChecksum+0x88>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	88fb      	ldrh	r3, [r7, #6]
 8008b94:	4413      	add	r3, r2
 8008b96:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8008b98:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <SharedParamsCalculateChecksum+0x88>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	0c1b      	lsrs	r3, r3, #16
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8008ba8:	4b13      	ldr	r3, [pc, #76]	; (8008bf8 <SharedParamsCalculateChecksum+0x88>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	0e1b      	lsrs	r3, r3, #24
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	e00b      	b.n	8008bd6 <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 8008bbe:	4a0e      	ldr	r2, [pc, #56]	; (8008bf8 <SharedParamsCalculateChecksum+0x88>)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	88fb      	ldrh	r3, [r7, #6]
 8008bcc:	4413      	add	r3, r2
 8008bce:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	603b      	str	r3, [r7, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b37      	cmp	r3, #55	; 0x37
 8008bda:	d9f0      	bls.n	8008bbe <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	43db      	mvns	r3, r3
 8008be0:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	3301      	adds	r3, #1
 8008be6:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 8008be8:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	20000000 	.word	0x20000000

08008bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c02:	4b11      	ldr	r3, [pc, #68]	; (8008c48 <HAL_MspInit+0x4c>)
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	4a10      	ldr	r2, [pc, #64]	; (8008c48 <HAL_MspInit+0x4c>)
 8008c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c0e:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <HAL_MspInit+0x4c>)
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c16:	607b      	str	r3, [r7, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c1a:	4b0b      	ldr	r3, [pc, #44]	; (8008c48 <HAL_MspInit+0x4c>)
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1e:	4a0a      	ldr	r2, [pc, #40]	; (8008c48 <HAL_MspInit+0x4c>)
 8008c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c24:	6453      	str	r3, [r2, #68]	; 0x44
 8008c26:	4b08      	ldr	r3, [pc, #32]	; (8008c48 <HAL_MspInit+0x4c>)
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008c32:	2200      	movs	r2, #0
 8008c34:	210f      	movs	r1, #15
 8008c36:	f06f 0001 	mvn.w	r0, #1
 8008c3a:	f000 fb0e 	bl	800925a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c3e:	bf00      	nop
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	40023800 	.word	0x40023800

08008c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08a      	sub	sp, #40	; 0x28
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c54:	f107 0314 	add.w	r3, r7, #20
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	605a      	str	r2, [r3, #4]
 8008c5e:	609a      	str	r2, [r3, #8]
 8008c60:	60da      	str	r2, [r3, #12]
 8008c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <HAL_UART_MspInit+0x7c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d128      	bne.n	8008cc0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008c6e:	4b17      	ldr	r3, [pc, #92]	; (8008ccc <HAL_UART_MspInit+0x80>)
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <HAL_UART_MspInit+0x80>)
 8008c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c78:	6413      	str	r3, [r2, #64]	; 0x40
 8008c7a:	4b14      	ldr	r3, [pc, #80]	; (8008ccc <HAL_UART_MspInit+0x80>)
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c86:	4b11      	ldr	r3, [pc, #68]	; (8008ccc <HAL_UART_MspInit+0x80>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	4a10      	ldr	r2, [pc, #64]	; (8008ccc <HAL_UART_MspInit+0x80>)
 8008c8c:	f043 0308 	orr.w	r3, r3, #8
 8008c90:	6313      	str	r3, [r2, #48]	; 0x30
 8008c92:	4b0e      	ldr	r3, [pc, #56]	; (8008ccc <HAL_UART_MspInit+0x80>)
 8008c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	60fb      	str	r3, [r7, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8008c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cac:	2303      	movs	r3, #3
 8008cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008cb0:	2307      	movs	r3, #7
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008cb4:	f107 0314 	add.w	r3, r7, #20
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4805      	ldr	r0, [pc, #20]	; (8008cd0 <HAL_UART_MspInit+0x84>)
 8008cbc:	f001 faf6 	bl	800a2ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008cc0:	bf00      	nop
 8008cc2:	3728      	adds	r7, #40	; 0x28
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	40004800 	.word	0x40004800
 8008ccc:	40023800 	.word	0x40023800
 8008cd0:	40020c00 	.word	0x40020c00

08008cd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	; 0x28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	609a      	str	r2, [r3, #8]
 8008ce8:	60da      	str	r2, [r3, #12]
 8008cea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cf4:	d141      	bne.n	8008d7a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cf6:	4b23      	ldr	r3, [pc, #140]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	4a22      	ldr	r2, [pc, #136]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008cfc:	f043 0301 	orr.w	r3, r3, #1
 8008d00:	6313      	str	r3, [r2, #48]	; 0x30
 8008d02:	4b20      	ldr	r3, [pc, #128]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008d0e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d14:	2302      	movs	r3, #2
 8008d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d20:	230a      	movs	r3, #10
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d24:	f107 0314 	add.w	r3, r7, #20
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4817      	ldr	r0, [pc, #92]	; (8008d88 <HAL_PCD_MspInit+0xb4>)
 8008d2c:	f001 fabe 	bl	800a2ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d36:	2300      	movs	r3, #0
 8008d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008d3e:	f107 0314 	add.w	r3, r7, #20
 8008d42:	4619      	mov	r1, r3
 8008d44:	4810      	ldr	r0, [pc, #64]	; (8008d88 <HAL_PCD_MspInit+0xb4>)
 8008d46:	f001 fab1 	bl	800a2ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4e:	4a0d      	ldr	r2, [pc, #52]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d54:	6353      	str	r3, [r2, #52]	; 0x34
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4b08      	ldr	r3, [pc, #32]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d66:	4a07      	ldr	r2, [pc, #28]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <HAL_PCD_MspInit+0xb0>)
 8008d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d76:	60bb      	str	r3, [r7, #8]
 8008d78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8008d7a:	bf00      	nop
 8008d7c:	3728      	adds	r7, #40	; 0x28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40023800 	.word	0x40023800
 8008d88:	40020000 	.word	0x40020000

08008d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008d90:	bf00      	nop
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d9e:	e7fe      	b.n	8008d9e <HardFault_Handler+0x4>

08008da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008da4:	e7fe      	b.n	8008da4 <MemManage_Handler+0x4>

08008da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008da6:	b480      	push	{r7}
 8008da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008daa:	e7fe      	b.n	8008daa <BusFault_Handler+0x4>

08008dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008db0:	e7fe      	b.n	8008db0 <UsageFault_Handler+0x4>

08008db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008db2:	b480      	push	{r7}
 8008db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008db6:	bf00      	nop
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008dc4:	f000 f92c 	bl	8009020 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008dc8:	f006 fae6 	bl	800f398 <xTaskGetSchedulerState>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d001      	beq.n	8008dd6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8008dd2:	f006 feb9 	bl	800fb48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008dd6:	bf00      	nop
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8008de0:	4802      	ldr	r0, [pc, #8]	; (8008dec <ETH_IRQHandler+0x10>)
 8008de2:	f000 fe55 	bl	8009a90 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8008de6:	bf00      	nop
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	2000644c 	.word	0x2000644c

08008df0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e00a      	b.n	8008e18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008e02:	f3af 8000 	nop.w
 8008e06:	4601      	mov	r1, r0
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	1c5a      	adds	r2, r3, #1
 8008e0c:	60ba      	str	r2, [r7, #8]
 8008e0e:	b2ca      	uxtb	r2, r1
 8008e10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	3301      	adds	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	dbf0      	blt.n	8008e02 <_read+0x12>
	}

return len;
 8008e20:	687b      	ldr	r3, [r7, #4]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b086      	sub	sp, #24
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	e009      	b.n	8008e50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	60ba      	str	r2, [r7, #8]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	dbf1      	blt.n	8008e3c <_write+0x12>
	}
	return len;
 8008e58:	687b      	ldr	r3, [r7, #4]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <_close>:

int _close(int file)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
	return -1;
 8008e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e8a:	605a      	str	r2, [r3, #4]
	return 0;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <_isatty>:

int _isatty(int file)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
	return 1;
 8008ea2:	2301      	movs	r3, #1
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
	return 0;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
	...

08008ecc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008ed4:	4b11      	ldr	r3, [pc, #68]	; (8008f1c <_sbrk+0x50>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d102      	bne.n	8008ee2 <_sbrk+0x16>
		heap_end = &end;
 8008edc:	4b0f      	ldr	r3, [pc, #60]	; (8008f1c <_sbrk+0x50>)
 8008ede:	4a10      	ldr	r2, [pc, #64]	; (8008f20 <_sbrk+0x54>)
 8008ee0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <_sbrk+0x50>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008ee8:	4b0c      	ldr	r3, [pc, #48]	; (8008f1c <_sbrk+0x50>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4413      	add	r3, r2
 8008ef0:	466a      	mov	r2, sp
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d905      	bls.n	8008f02 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	; (8008f24 <_sbrk+0x58>)
 8008ef8:	220c      	movs	r2, #12
 8008efa:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8008efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f00:	e006      	b.n	8008f10 <_sbrk+0x44>
	}

	heap_end += incr;
 8008f02:	4b06      	ldr	r3, [pc, #24]	; (8008f1c <_sbrk+0x50>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4413      	add	r3, r2
 8008f0a:	4a04      	ldr	r2, [pc, #16]	; (8008f1c <_sbrk+0x50>)
 8008f0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	20000330 	.word	0x20000330
 8008f20:	2000b4e8 	.word	0x2000b4e8
 8008f24:	2000b4e0 	.word	0x2000b4e0

08008f28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008f2c:	4b08      	ldr	r3, [pc, #32]	; (8008f50 <SystemInit+0x28>)
 8008f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f32:	4a07      	ldr	r2, [pc, #28]	; (8008f50 <SystemInit+0x28>)
 8008f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <SystemInit+0x28>)
 8008f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008f42:	609a      	str	r2, [r3, #8]
#endif
}
 8008f44:	bf00      	nop
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	e000ed00 	.word	0xe000ed00

08008f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008f58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008f5a:	e003      	b.n	8008f64 <LoopCopyDataInit>

08008f5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008f5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008f60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008f62:	3104      	adds	r1, #4

08008f64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008f64:	480b      	ldr	r0, [pc, #44]	; (8008f94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008f66:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008f68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008f6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008f6c:	d3f6      	bcc.n	8008f5c <CopyDataInit>
  ldr  r2, =_sbss
 8008f6e:	4a0b      	ldr	r2, [pc, #44]	; (8008f9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008f70:	e002      	b.n	8008f78 <LoopFillZerobss>

08008f72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008f72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008f74:	f842 3b04 	str.w	r3, [r2], #4

08008f78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008f78:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008f7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008f7c:	d3f9      	bcc.n	8008f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008f7e:	f7ff ffd3 	bl	8008f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f82:	f011 ff07 	bl	801ad94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f86:	f7ff fb65 	bl	8008654 <main>
  bx  lr    
 8008f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008f8c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008f90:	0801ea58 	.word	0x0801ea58
  ldr  r0, =_sdata
 8008f94:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 8008f98:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8008f9c:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8008fa0:	2000b4e8 	.word	0x2000b4e8

08008fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008fa4:	e7fe      	b.n	8008fa4 <ADC_IRQHandler>

08008fa6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008faa:	2003      	movs	r0, #3
 8008fac:	f000 f94a 	bl	8009244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008fb0:	200f      	movs	r0, #15
 8008fb2:	f000 f805 	bl	8008fc0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008fb6:	f7ff fe21 	bl	8008bfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008fc8:	4b12      	ldr	r3, [pc, #72]	; (8009014 <HAL_InitTick+0x54>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4b12      	ldr	r3, [pc, #72]	; (8009018 <HAL_InitTick+0x58>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f965 	bl	80092ae <HAL_SYSTICK_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e00e      	b.n	800900c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b0f      	cmp	r3, #15
 8008ff2:	d80a      	bhi.n	800900a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ffc:	f000 f92d 	bl	800925a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009000:	4a06      	ldr	r2, [pc, #24]	; (800901c <HAL_InitTick+0x5c>)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	e000      	b.n	800900c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	20000040 	.word	0x20000040
 8009018:	20000048 	.word	0x20000048
 800901c:	20000044 	.word	0x20000044

08009020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009024:	4b06      	ldr	r3, [pc, #24]	; (8009040 <HAL_IncTick+0x20>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	4b06      	ldr	r3, [pc, #24]	; (8009044 <HAL_IncTick+0x24>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4413      	add	r3, r2
 8009030:	4a04      	ldr	r2, [pc, #16]	; (8009044 <HAL_IncTick+0x24>)
 8009032:	6013      	str	r3, [r2, #0]
}
 8009034:	bf00      	nop
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	20000048 	.word	0x20000048
 8009044:	20004b30 	.word	0x20004b30

08009048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
  return uwTick;
 800904c:	4b03      	ldr	r3, [pc, #12]	; (800905c <HAL_GetTick+0x14>)
 800904e:	681b      	ldr	r3, [r3, #0]
}
 8009050:	4618      	mov	r0, r3
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	20004b30 	.word	0x20004b30

08009060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009068:	f7ff ffee 	bl	8009048 <HAL_GetTick>
 800906c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009078:	d005      	beq.n	8009086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800907a:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <HAL_Delay+0x40>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4413      	add	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009086:	bf00      	nop
 8009088:	f7ff ffde 	bl	8009048 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	429a      	cmp	r2, r3
 8009096:	d8f7      	bhi.n	8009088 <HAL_Delay+0x28>
  {
  }
}
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000048 	.word	0x20000048

080090a4 <__NVIC_SetPriorityGrouping>:
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f003 0307 	and.w	r3, r3, #7
 80090b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090b4:	4b0b      	ldr	r3, [pc, #44]	; (80090e4 <__NVIC_SetPriorityGrouping+0x40>)
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090c0:	4013      	ands	r3, r2
 80090c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80090cc:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <__NVIC_SetPriorityGrouping+0x44>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090d2:	4a04      	ldr	r2, [pc, #16]	; (80090e4 <__NVIC_SetPriorityGrouping+0x40>)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	60d3      	str	r3, [r2, #12]
}
 80090d8:	bf00      	nop
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	e000ed00 	.word	0xe000ed00
 80090e8:	05fa0000 	.word	0x05fa0000

080090ec <__NVIC_GetPriorityGrouping>:
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <__NVIC_GetPriorityGrouping+0x18>)
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	f003 0307 	and.w	r3, r3, #7
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	e000ed00 	.word	0xe000ed00

08009108 <__NVIC_EnableIRQ>:
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009116:	2b00      	cmp	r3, #0
 8009118:	db0b      	blt.n	8009132 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	f003 021f 	and.w	r2, r3, #31
 8009120:	4907      	ldr	r1, [pc, #28]	; (8009140 <__NVIC_EnableIRQ+0x38>)
 8009122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009126:	095b      	lsrs	r3, r3, #5
 8009128:	2001      	movs	r0, #1
 800912a:	fa00 f202 	lsl.w	r2, r0, r2
 800912e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009132:	bf00      	nop
 8009134:	370c      	adds	r7, #12
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	e000e100 	.word	0xe000e100

08009144 <__NVIC_SetPriority>:
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009154:	2b00      	cmp	r3, #0
 8009156:	db0a      	blt.n	800916e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	b2da      	uxtb	r2, r3
 800915c:	490c      	ldr	r1, [pc, #48]	; (8009190 <__NVIC_SetPriority+0x4c>)
 800915e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009162:	0112      	lsls	r2, r2, #4
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	440b      	add	r3, r1
 8009168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800916c:	e00a      	b.n	8009184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	b2da      	uxtb	r2, r3
 8009172:	4908      	ldr	r1, [pc, #32]	; (8009194 <__NVIC_SetPriority+0x50>)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	f003 030f 	and.w	r3, r3, #15
 800917a:	3b04      	subs	r3, #4
 800917c:	0112      	lsls	r2, r2, #4
 800917e:	b2d2      	uxtb	r2, r2
 8009180:	440b      	add	r3, r1
 8009182:	761a      	strb	r2, [r3, #24]
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	e000e100 	.word	0xe000e100
 8009194:	e000ed00 	.word	0xe000ed00

08009198 <NVIC_EncodePriority>:
{
 8009198:	b480      	push	{r7}
 800919a:	b089      	sub	sp, #36	; 0x24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f1c3 0307 	rsb	r3, r3, #7
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	bf28      	it	cs
 80091b6:	2304      	movcs	r3, #4
 80091b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	3304      	adds	r3, #4
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d902      	bls.n	80091c8 <NVIC_EncodePriority+0x30>
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	3b03      	subs	r3, #3
 80091c6:	e000      	b.n	80091ca <NVIC_EncodePriority+0x32>
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	43da      	mvns	r2, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	401a      	ands	r2, r3
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	fa01 f303 	lsl.w	r3, r1, r3
 80091ea:	43d9      	mvns	r1, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091f0:	4313      	orrs	r3, r2
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3724      	adds	r7, #36	; 0x24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3b01      	subs	r3, #1
 800920c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009210:	d301      	bcc.n	8009216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009212:	2301      	movs	r3, #1
 8009214:	e00f      	b.n	8009236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009216:	4a0a      	ldr	r2, [pc, #40]	; (8009240 <SysTick_Config+0x40>)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3b01      	subs	r3, #1
 800921c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800921e:	210f      	movs	r1, #15
 8009220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009224:	f7ff ff8e 	bl	8009144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <SysTick_Config+0x40>)
 800922a:	2200      	movs	r2, #0
 800922c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800922e:	4b04      	ldr	r3, [pc, #16]	; (8009240 <SysTick_Config+0x40>)
 8009230:	2207      	movs	r2, #7
 8009232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	e000e010 	.word	0xe000e010

08009244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff ff29 	bl	80090a4 <__NVIC_SetPriorityGrouping>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800925a:	b580      	push	{r7, lr}
 800925c:	b086      	sub	sp, #24
 800925e:	af00      	add	r7, sp, #0
 8009260:	4603      	mov	r3, r0
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800926c:	f7ff ff3e 	bl	80090ec <__NVIC_GetPriorityGrouping>
 8009270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	6978      	ldr	r0, [r7, #20]
 8009278:	f7ff ff8e 	bl	8009198 <NVIC_EncodePriority>
 800927c:	4602      	mov	r2, r0
 800927e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009282:	4611      	mov	r1, r2
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff ff5d 	bl	8009144 <__NVIC_SetPriority>
}
 800928a:	bf00      	nop
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	4603      	mov	r3, r0
 800929a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800929c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff ff31 	bl	8009108 <__NVIC_EnableIRQ>
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff ffa2 	bl	8009200 <SysTick_Config>
 80092bc:	4603      	mov	r3, r0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80092d8:	4ba9      	ldr	r3, [pc, #676]	; (8009580 <HAL_ETH_Init+0x2b8>)
 80092da:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e183      	b.n	80095f6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d106      	bne.n	8009308 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f003 fc5c 	bl	800cbc0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009308:	4b9e      	ldr	r3, [pc, #632]	; (8009584 <HAL_ETH_Init+0x2bc>)
 800930a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930c:	4a9d      	ldr	r2, [pc, #628]	; (8009584 <HAL_ETH_Init+0x2bc>)
 800930e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009312:	6453      	str	r3, [r2, #68]	; 0x44
 8009314:	4b9b      	ldr	r3, [pc, #620]	; (8009584 <HAL_ETH_Init+0x2bc>)
 8009316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009320:	4b99      	ldr	r3, [pc, #612]	; (8009588 <HAL_ETH_Init+0x2c0>)
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	4a98      	ldr	r2, [pc, #608]	; (8009588 <HAL_ETH_Init+0x2c0>)
 8009326:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800932a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800932c:	4b96      	ldr	r3, [pc, #600]	; (8009588 <HAL_ETH_Init+0x2c0>)
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	4994      	ldr	r1, [pc, #592]	; (8009588 <HAL_ETH_Init+0x2c0>)
 8009336:	4313      	orrs	r3, r2
 8009338:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f042 0201 	orr.w	r2, r2, #1
 800934c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009350:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009352:	f7ff fe79 	bl	8009048 <HAL_GetTick>
 8009356:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009358:	e011      	b.n	800937e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800935a:	f7ff fe75 	bl	8009048 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009368:	d909      	bls.n	800937e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2203      	movs	r2, #3
 800936e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e13b      	b.n	80095f6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e4      	bne.n	800935a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f023 031c 	bic.w	r3, r3, #28
 800939e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80093a0:	f001 ff7c 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 80093a4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	4a78      	ldr	r2, [pc, #480]	; (800958c <HAL_ETH_Init+0x2c4>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d908      	bls.n	80093c0 <HAL_ETH_Init+0xf8>
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	4a77      	ldr	r2, [pc, #476]	; (8009590 <HAL_ETH_Init+0x2c8>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d804      	bhi.n	80093c0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f043 0308 	orr.w	r3, r3, #8
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	e027      	b.n	8009410 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	4a73      	ldr	r2, [pc, #460]	; (8009590 <HAL_ETH_Init+0x2c8>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d908      	bls.n	80093da <HAL_ETH_Init+0x112>
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	4a72      	ldr	r2, [pc, #456]	; (8009594 <HAL_ETH_Init+0x2cc>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d804      	bhi.n	80093da <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	f043 030c 	orr.w	r3, r3, #12
 80093d6:	61fb      	str	r3, [r7, #28]
 80093d8:	e01a      	b.n	8009410 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	4a6d      	ldr	r2, [pc, #436]	; (8009594 <HAL_ETH_Init+0x2cc>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d903      	bls.n	80093ea <HAL_ETH_Init+0x122>
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	4a6c      	ldr	r2, [pc, #432]	; (8009598 <HAL_ETH_Init+0x2d0>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d911      	bls.n	800940e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	4a6a      	ldr	r2, [pc, #424]	; (8009598 <HAL_ETH_Init+0x2d0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d908      	bls.n	8009404 <HAL_ETH_Init+0x13c>
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	4a69      	ldr	r2, [pc, #420]	; (800959c <HAL_ETH_Init+0x2d4>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d804      	bhi.n	8009404 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f043 0304 	orr.w	r3, r3, #4
 8009400:	61fb      	str	r3, [r7, #28]
 8009402:	e005      	b.n	8009410 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	f043 0310 	orr.w	r3, r3, #16
 800940a:	61fb      	str	r3, [r7, #28]
 800940c:	e000      	b.n	8009410 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800940e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8009418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800941c:	2100      	movs	r1, #0
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fc19 	bl	8009c56 <HAL_ETH_WritePHYRegister>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800942e:	6939      	ldr	r1, [r7, #16]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fca5 	bl	8009d80 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e0d9      	b.n	80095f6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8009442:	20ff      	movs	r0, #255	; 0xff
 8009444:	f7ff fe0c 	bl	8009060 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 80a7 	beq.w	80095a0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8009452:	f7ff fdf9 	bl	8009048 <HAL_GetTick>
 8009456:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009458:	f107 030c 	add.w	r3, r7, #12
 800945c:	461a      	mov	r2, r3
 800945e:	2101      	movs	r1, #1
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fb90 	bl	8009b86 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009466:	f7ff fdef 	bl	8009048 <HAL_GetTick>
 800946a:	4602      	mov	r2, r0
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	f241 3288 	movw	r2, #5000	; 0x1388
 8009474:	4293      	cmp	r3, r2
 8009476:	d90f      	bls.n	8009498 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800947c:	6939      	ldr	r1, [r7, #16]
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 fc7e 	bl	8009d80 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e0ae      	b.n	80095f6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f003 0304 	and.w	r3, r3, #4
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0da      	beq.n	8009458 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80094a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80094a6:	2100      	movs	r1, #0
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fbd4 	bl	8009c56 <HAL_ETH_WritePHYRegister>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00b      	beq.n	80094cc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80094b8:	6939      	ldr	r1, [r7, #16]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fc60 	bl	8009d80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80094c8:	2301      	movs	r3, #1
 80094ca:	e094      	b.n	80095f6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80094cc:	f7ff fdbc 	bl	8009048 <HAL_GetTick>
 80094d0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80094d2:	f107 030c 	add.w	r3, r7, #12
 80094d6:	461a      	mov	r2, r3
 80094d8:	2101      	movs	r1, #1
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fb53 	bl	8009b86 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80094e0:	f7ff fdb2 	bl	8009048 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d90f      	bls.n	8009512 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80094f6:	6939      	ldr	r1, [r7, #16]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fc41 	bl	8009d80 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e071      	b.n	80095f6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0da      	beq.n	80094d2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	461a      	mov	r2, r3
 8009522:	211f      	movs	r1, #31
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fb2e 	bl	8009b86 <HAL_ETH_ReadPHYRegister>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00b      	beq.n	8009548 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009534:	6939      	ldr	r1, [r7, #16]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fc22 	bl	8009d80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8009544:	2301      	movs	r3, #1
 8009546:	e056      	b.n	80095f6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f003 0310 	and.w	r3, r3, #16
 800954e:	2b00      	cmp	r3, #0
 8009550:	d004      	beq.n	800955c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009558:	60da      	str	r2, [r3, #12]
 800955a:	e002      	b.n	8009562 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	609a      	str	r2, [r3, #8]
 8009572:	e037      	b.n	80095e4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800957a:	609a      	str	r2, [r3, #8]
 800957c:	e032      	b.n	80095e4 <HAL_ETH_Init+0x31c>
 800957e:	bf00      	nop
 8009580:	03938700 	.word	0x03938700
 8009584:	40023800 	.word	0x40023800
 8009588:	40013800 	.word	0x40013800
 800958c:	01312cff 	.word	0x01312cff
 8009590:	02160ebf 	.word	0x02160ebf
 8009594:	039386ff 	.word	0x039386ff
 8009598:	05f5e0ff 	.word	0x05f5e0ff
 800959c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	08db      	lsrs	r3, r3, #3
 80095a6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	085b      	lsrs	r3, r3, #1
 80095ae:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80095b0:	4313      	orrs	r3, r2
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	461a      	mov	r2, r3
 80095b6:	2100      	movs	r1, #0
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fb4c 	bl	8009c56 <HAL_ETH_WritePHYRegister>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80095c8:	6939      	ldr	r1, [r7, #16]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fbd8 	bl	8009d80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e00c      	b.n	80095f6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80095dc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80095e0:	f7ff fd3e 	bl	8009060 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80095e4:	6939      	ldr	r1, [r7, #16]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fbca 	bl	8009d80 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop

08009600 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <HAL_ETH_DMATxDescListInit+0x20>
 800961c:	2302      	movs	r3, #2
 800961e:	e052      	b.n	80096c6 <HAL_ETH_DMATxDescListInit+0xc6>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	e030      	b.n	800969e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	015b      	lsls	r3, r3, #5
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	4413      	add	r3, r2
 8009644:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800964c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009654:	fb02 f303 	mul.w	r3, r2, r3
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	4413      	add	r3, r2
 800965c:	461a      	mov	r2, r3
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d105      	bne.n	8009676 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	3b01      	subs	r3, #1
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	429a      	cmp	r2, r3
 800967e:	d208      	bcs.n	8009692 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	3301      	adds	r3, #1
 8009684:	015b      	lsls	r3, r3, #5
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	4413      	add	r3, r2
 800968a:	461a      	mov	r2, r3
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	60da      	str	r2, [r3, #12]
 8009690:	e002      	b.n	8009698 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	3301      	adds	r3, #1
 800969c:	617b      	str	r3, [r7, #20]
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d3ca      	bcc.n	800963c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6819      	ldr	r1, [r3, #0]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	f241 0310 	movw	r3, #4112	; 0x1010
 80096b0:	440b      	add	r3, r1
 80096b2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b087      	sub	sp, #28
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
 80096de:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_ETH_DMARxDescListInit+0x20>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e056      	b.n	80097a0 <HAL_ETH_DMARxDescListInit+0xce>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2202      	movs	r2, #2
 80096fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8009708:	2300      	movs	r3, #0
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	e034      	b.n	8009778 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	015b      	lsls	r3, r3, #5
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	4413      	add	r3, r2
 8009716:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800971e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8009726:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800972e:	fb02 f303 	mul.w	r3, r2, r3
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	4413      	add	r3, r2
 8009736:	461a      	mov	r2, r3
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d105      	bne.n	8009750 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	3b01      	subs	r3, #1
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	429a      	cmp	r2, r3
 8009758:	d208      	bcs.n	800976c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	3301      	adds	r3, #1
 800975e:	015b      	lsls	r3, r3, #5
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	4413      	add	r3, r2
 8009764:	461a      	mov	r2, r3
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	60da      	str	r2, [r3, #12]
 800976a:	e002      	b.n	8009772 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	3301      	adds	r3, #1
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d3c6      	bcc.n	800970e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6819      	ldr	r1, [r3, #0]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	f241 030c 	movw	r3, #4108	; 0x100c
 800978a:	440b      	add	r3, r1
 800978c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	371c      	adds	r7, #28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	617b      	str	r3, [r7, #20]
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_ETH_TransmitFrame+0x24>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e0cd      	b.n	800996c <HAL_ETH_TransmitFrame+0x1c0>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80097f6:	2301      	movs	r3, #1
 80097f8:	e0b8      	b.n	800996c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	da09      	bge.n	8009818 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2212      	movs	r2, #18
 8009808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e0a9      	b.n	800996c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800981e:	4293      	cmp	r3, r2
 8009820:	d915      	bls.n	800984e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	4a54      	ldr	r2, [pc, #336]	; (8009978 <HAL_ETH_TransmitFrame+0x1cc>)
 8009826:	fba2 2303 	umull	r2, r3, r2, r3
 800982a:	0a9b      	lsrs	r3, r3, #10
 800982c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	4b51      	ldr	r3, [pc, #324]	; (8009978 <HAL_ETH_TransmitFrame+0x1cc>)
 8009832:	fba3 1302 	umull	r1, r3, r3, r2
 8009836:	0a9b      	lsrs	r3, r3, #10
 8009838:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800983c:	fb01 f303 	mul.w	r3, r1, r3
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d005      	beq.n	8009852 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	3301      	adds	r3, #1
 800984a:	617b      	str	r3, [r7, #20]
 800984c:	e001      	b.n	8009852 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800984e:	2301      	movs	r3, #1
 8009850:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d11c      	bne.n	8009892 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009862:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8009866:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8009872:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009882:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	461a      	mov	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009890:	e04b      	b.n	800992a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8009892:	2300      	movs	r3, #0
 8009894:	613b      	str	r3, [r7, #16]
 8009896:	e044      	b.n	8009922 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80098a6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d107      	bne.n	80098be <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80098bc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80098c6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d116      	bne.n	8009900 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80098e0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4a25      	ldr	r2, [pc, #148]	; (800997c <HAL_ETH_TransmitFrame+0x1d0>)
 80098e6:	fb02 f203 	mul.w	r2, r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	4413      	add	r3, r2
 80098ee:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80098f2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80098fe:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800990e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	461a      	mov	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	3301      	adds	r3, #1
 8009920:	613b      	str	r3, [r7, #16]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	429a      	cmp	r2, r3
 8009928:	d3b6      	bcc.n	8009898 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	f241 0314 	movw	r3, #4116	; 0x1014
 8009932:	4413      	add	r3, r2
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0304 	and.w	r3, r3, #4
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00d      	beq.n	800995a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	f241 0314 	movw	r3, #4116	; 0x1014
 8009946:	4413      	add	r3, r2
 8009948:	2204      	movs	r2, #4
 800994a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	f241 0304 	movw	r3, #4100	; 0x1004
 8009954:	4413      	add	r3, r2
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	ac02b00b 	.word	0xac02b00b
 800997c:	fffffa0c 	.word	0xfffffa0c

08009980 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8009996:	2302      	movs	r3, #2
 8009998:	e074      	b.n	8009a84 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80099aa:	e05a      	b.n	8009a62 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3301      	adds	r3, #1
 80099b0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c0:	d10d      	bne.n	80099de <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	461a      	mov	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	629a      	str	r2, [r3, #40]	; 0x28
 80099dc:	e041      	b.n	8009a62 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10b      	bne.n	8009a04 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	461a      	mov	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	629a      	str	r2, [r3, #40]	; 0x28
 8009a02:	e02e      	b.n	8009a62 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d103      	bne.n	8009a26 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	0c1b      	lsrs	r3, r3, #16
 8009a2e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009a32:	1f1a      	subs	r2, r3, #4
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3c:	689a      	ldr	r2, [r3, #8]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e010      	b.n	8009a84 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	db02      	blt.n	8009a72 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d99c      	bls.n	80099ac <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f241 0314 	movw	r3, #4116	; 0x1014
 8009aa0:	4413      	add	r3, r2
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa8:	2b40      	cmp	r3, #64	; 0x40
 8009aaa:	d112      	bne.n	8009ad2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f003 f947 	bl	800cd40 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	f241 0314 	movw	r3, #4116	; 0x1014
 8009aba:	4413      	add	r3, r2
 8009abc:	2240      	movs	r2, #64	; 0x40
 8009abe:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad0:	e01b      	b.n	8009b0a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	f241 0314 	movw	r3, #4116	; 0x1014
 8009ada:	4413      	add	r3, r2
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d111      	bne.n	8009b0a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f839 	bl	8009b5e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	f241 0314 	movw	r3, #4116	; 0x1014
 8009af4:	4413      	add	r3, r2
 8009af6:	2201      	movs	r2, #1
 8009af8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	f241 0314 	movw	r3, #4116	; 0x1014
 8009b12:	4413      	add	r3, r2
 8009b14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009b18:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	f241 0314 	movw	r3, #4116	; 0x1014
 8009b22:	4413      	add	r3, r2
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b2e:	d112      	bne.n	8009b56 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f81e 	bl	8009b72 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	f241 0314 	movw	r3, #4116	; 0x1014
 8009b3e:	4413      	add	r3, r2
 8009b40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009b44:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8009b56:	bf00      	nop
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b083      	sub	sp, #12
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b086      	sub	sp, #24
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8009b94:	2300      	movs	r3, #0
 8009b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b82      	cmp	r3, #130	; 0x82
 8009ba6:	d101      	bne.n	8009bac <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e050      	b.n	8009c4e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2282      	movs	r2, #130	; 0x82
 8009bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f003 031c 	and.w	r3, r3, #28
 8009bc2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8a1b      	ldrh	r3, [r3, #16]
 8009bc8:	02db      	lsls	r3, r3, #11
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009bd2:	897b      	ldrh	r3, [r7, #10]
 8009bd4:	019b      	lsls	r3, r3, #6
 8009bd6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f023 0302 	bic.w	r3, r3, #2
 8009be6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f043 0301 	orr.w	r3, r3, #1
 8009bee:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009bf8:	f7ff fa26 	bl	8009048 <HAL_GetTick>
 8009bfc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009bfe:	e015      	b.n	8009c2c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8009c00:	f7ff fa22 	bl	8009048 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0e:	d309      	bcc.n	8009c24 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e014      	b.n	8009c4e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e4      	bne.n	8009c00 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	607a      	str	r2, [r7, #4]
 8009c62:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b42      	cmp	r3, #66	; 0x42
 8009c76:	d101      	bne.n	8009c7c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e04e      	b.n	8009d1a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2242      	movs	r2, #66	; 0x42
 8009c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	f003 031c 	and.w	r3, r3, #28
 8009c92:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8a1b      	ldrh	r3, [r3, #16]
 8009c98:	02db      	lsls	r3, r3, #11
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009ca2:	897b      	ldrh	r3, [r7, #10]
 8009ca4:	019b      	lsls	r3, r3, #6
 8009ca6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f043 0302 	orr.w	r3, r3, #2
 8009cb6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f043 0301 	orr.w	r3, r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009cd2:	f7ff f9b9 	bl	8009048 <HAL_GetTick>
 8009cd6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009cd8:	e015      	b.n	8009d06 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009cda:	f7ff f9b5 	bl	8009048 <HAL_GetTick>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ce8:	d309      	bcc.n	8009cfe <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e00d      	b.n	8009d1a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1e4      	bne.n	8009cda <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d101      	bne.n	8009d38 <HAL_ETH_Start+0x16>
 8009d34:	2302      	movs	r3, #2
 8009d36:	e01f      	b.n	8009d78 <HAL_ETH_Start+0x56>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fa1b 	bl	800a184 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fa35 	bl	800a1be <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fa7f 	bl	800a258 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa4c 	bl	800a1f8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fa61 	bl	800a228 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b0b0      	sub	sp, #192	; 0xc0
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d007      	beq.n	8009da6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d9c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8009da6:	2300      	movs	r3, #0
 8009da8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8009dae:	2300      	movs	r3, #0
 8009db0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8009db6:	2300      	movs	r3, #0
 8009db8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69db      	ldr	r3, [r3, #28]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d103      	bne.n	8009dce <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8009dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dca:	663b      	str	r3, [r7, #96]	; 0x60
 8009dcc:	e001      	b.n	8009dd2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8009dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dd6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8009de4:	2300      	movs	r3, #0
 8009de6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8009de8:	2300      	movs	r3, #0
 8009dea:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8009dec:	2340      	movs	r3, #64	; 0x40
 8009dee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8009df0:	2300      	movs	r3, #0
 8009df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8009e02:	2300      	movs	r3, #0
 8009e04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8009e20:	2380      	movs	r3, #128	; 0x80
 8009e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8009e26:	2300      	movs	r3, #0
 8009e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009e54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009e58:	4bab      	ldr	r3, [pc, #684]	; (800a108 <ETH_MACDMAConfig+0x388>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8009e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009e64:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8009e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8009e68:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8009e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8009e6c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8009e72:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8009e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8009e76:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8009e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8009e7a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8009e80:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8009e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8009e84:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8009e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8009e88:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8009e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8009e8c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8009e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8009e90:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8009e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8009e94:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009e96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009ea8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	f7ff f8d3 	bl	8009060 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009ec2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009ec4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8009ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009ec8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8009eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8009ecc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8009ece:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8009ed2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8009ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8009ed8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8009eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8009ede:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8009ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8009ee4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8009ee8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8009ef0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009ef2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009efe:	2001      	movs	r0, #1
 8009f00:	f7ff f8ae 	bl	8009060 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f0c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f16:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009f20:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f30:	f64f 7341 	movw	r3, #65345	; 0xff41
 8009f34:	4013      	ands	r3, r2
 8009f36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009f3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f3e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8009f40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009f44:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8009f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8009f4a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8009f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8009f50:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8009f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8009f56:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8009f58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8009f5c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009f5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f62:	4313      	orrs	r3, r2
 8009f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f70:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009f7c:	2001      	movs	r0, #1
 8009f7e:	f7ff f86f 	bl	8009060 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009f8a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009f8c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8009f90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	f7ff f85a 	bl	8009060 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009fb4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8009fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fbe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8009fc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009fc8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8009fda:	2304      	movs	r3, #4
 8009fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8009fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8009fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009fe8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009fea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009fee:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ff4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8009ff6:	2380      	movs	r3, #128	; 0x80
 8009ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8009ffe:	2300      	movs	r3, #0
 800a000:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	f241 0318 	movw	r3, #4120	; 0x1018
 800a00a:	4413      	add	r3, r2
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800a012:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a016:	4b3d      	ldr	r3, [pc, #244]	; (800a10c <ETH_MACDMAConfig+0x38c>)
 800a018:	4013      	ands	r3, r2
 800a01a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a01e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800a020:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a022:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800a024:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800a026:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800a028:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800a02a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800a02c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800a02e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800a030:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800a032:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800a034:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800a036:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800a03a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800a03e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a040:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a044:	4313      	orrs	r3, r2
 800a046:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	f241 0318 	movw	r3, #4120	; 0x1018
 800a052:	4413      	add	r3, r2
 800a054:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a058:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	f241 0318 	movw	r3, #4120	; 0x1018
 800a062:	4413      	add	r3, r2
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a06a:	2001      	movs	r0, #1
 800a06c:	f7fe fff8 	bl	8009060 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	f241 0318 	movw	r3, #4120	; 0x1018
 800a078:	4413      	add	r3, r2
 800a07a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a07e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a084:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800a086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800a088:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800a08c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800a08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800a090:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800a092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a094:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800a096:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800a098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800a09a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	f7fe ffd1 	bl	8009060 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a0ca:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d10d      	bne.n	800a0f0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	f241 031c 	movw	r3, #4124	; 0x101c
 800a0dc:	4413      	add	r3, r2
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	6811      	ldr	r1, [r2, #0]
 800a0e4:	4a0a      	ldr	r2, [pc, #40]	; (800a110 <ETH_MACDMAConfig+0x390>)
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	f241 031c 	movw	r3, #4124	; 0x101c
 800a0ec:	440b      	add	r3, r1
 800a0ee:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	695b      	ldr	r3, [r3, #20]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f80b 	bl	800a114 <ETH_MACAddressConfig>
}
 800a0fe:	bf00      	nop
 800a100:	37c0      	adds	r7, #192	; 0xc0
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	ff20810f 	.word	0xff20810f
 800a10c:	f8de3f23 	.word	0xf8de3f23
 800a110:	00010040 	.word	0x00010040

0800a114 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3305      	adds	r3, #5
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	021b      	lsls	r3, r3, #8
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	3204      	adds	r2, #4
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	4313      	orrs	r3, r2
 800a130:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	4b11      	ldr	r3, [pc, #68]	; (800a17c <ETH_MACAddressConfig+0x68>)
 800a136:	4413      	add	r3, r2
 800a138:	461a      	mov	r2, r3
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3303      	adds	r3, #3
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	061a      	lsls	r2, r3, #24
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3302      	adds	r3, #2
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	041b      	lsls	r3, r3, #16
 800a14e:	431a      	orrs	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3301      	adds	r3, #1
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	4313      	orrs	r3, r2
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	4313      	orrs	r3, r2
 800a160:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	4b06      	ldr	r3, [pc, #24]	; (800a180 <ETH_MACAddressConfig+0x6c>)
 800a166:	4413      	add	r3, r2
 800a168:	461a      	mov	r2, r3
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	6013      	str	r3, [r2, #0]
}
 800a16e:	bf00      	nop
 800a170:	371c      	adds	r7, #28
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	40028040 	.word	0x40028040
 800a180:	40028044 	.word	0x40028044

0800a184 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f042 0208 	orr.w	r2, r2, #8
 800a19e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	f7fe ff59 	bl	8009060 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	601a      	str	r2, [r3, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f042 0204 	orr.w	r2, r2, #4
 800a1d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a1e2:	2001      	movs	r0, #1
 800a1e4:	f7fe ff3c 	bl	8009060 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	601a      	str	r2, [r3, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	f241 0318 	movw	r3, #4120	; 0x1018
 800a208:	4413      	add	r3, r2
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	6811      	ldr	r1, [r2, #0]
 800a210:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a214:	f241 0318 	movw	r3, #4120	; 0x1018
 800a218:	440b      	add	r3, r1
 800a21a:	601a      	str	r2, [r3, #0]
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	f241 0318 	movw	r3, #4120	; 0x1018
 800a238:	4413      	add	r3, r2
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6811      	ldr	r1, [r2, #0]
 800a240:	f043 0202 	orr.w	r2, r3, #2
 800a244:	f241 0318 	movw	r3, #4120	; 0x1018
 800a248:	440b      	add	r3, r1
 800a24a:	601a      	str	r2, [r3, #0]
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	f241 0318 	movw	r3, #4120	; 0x1018
 800a26c:	4413      	add	r3, r2
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	6811      	ldr	r1, [r2, #0]
 800a274:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a278:	f241 0318 	movw	r3, #4120	; 0x1018
 800a27c:	440b      	add	r3, r1
 800a27e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	f241 0318 	movw	r3, #4120	; 0x1018
 800a288:	4413      	add	r3, r2
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a28e:	2001      	movs	r0, #1
 800a290:	f7fe fee6 	bl	8009060 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6819      	ldr	r1, [r3, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	f241 0318 	movw	r3, #4120	; 0x1018
 800a29e:	440b      	add	r3, r1
 800a2a0:	601a      	str	r2, [r3, #0]
}
 800a2a2:	bf00      	nop
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b089      	sub	sp, #36	; 0x24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61fb      	str	r3, [r7, #28]
 800a2ca:	e175      	b.n	800a5b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	f040 8164 	bne.w	800a5b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d00b      	beq.n	800a30a <HAL_GPIO_Init+0x5e>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d007      	beq.n	800a30a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a2fe:	2b11      	cmp	r3, #17
 800a300:	d003      	beq.n	800a30a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	2b12      	cmp	r3, #18
 800a308:	d130      	bne.n	800a36c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	005b      	lsls	r3, r3, #1
 800a314:	2203      	movs	r2, #3
 800a316:	fa02 f303 	lsl.w	r3, r2, r3
 800a31a:	43db      	mvns	r3, r3
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	4013      	ands	r3, r2
 800a320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	005b      	lsls	r3, r3, #1
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	4313      	orrs	r3, r2
 800a332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a340:	2201      	movs	r2, #1
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	fa02 f303 	lsl.w	r3, r2, r3
 800a348:	43db      	mvns	r3, r3
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	4013      	ands	r3, r2
 800a34e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	091b      	lsrs	r3, r3, #4
 800a356:	f003 0201 	and.w	r2, r3, #1
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	fa02 f303 	lsl.w	r3, r2, r3
 800a360:	69ba      	ldr	r2, [r7, #24]
 800a362:	4313      	orrs	r3, r2
 800a364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	2203      	movs	r2, #3
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	43db      	mvns	r3, r3
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	4013      	ands	r3, r2
 800a382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	4313      	orrs	r3, r2
 800a394:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69ba      	ldr	r2, [r7, #24]
 800a39a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d003      	beq.n	800a3ac <HAL_GPIO_Init+0x100>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	2b12      	cmp	r3, #18
 800a3aa:	d123      	bne.n	800a3f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	08da      	lsrs	r2, r3, #3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3208      	adds	r2, #8
 800a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	220f      	movs	r2, #15
 800a3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	691a      	ldr	r2, [r3, #16]
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e0:	69ba      	ldr	r2, [r7, #24]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	08da      	lsrs	r2, r3, #3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3208      	adds	r2, #8
 800a3ee:	69b9      	ldr	r1, [r7, #24]
 800a3f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	005b      	lsls	r3, r3, #1
 800a3fe:	2203      	movs	r2, #3
 800a400:	fa02 f303 	lsl.w	r3, r2, r3
 800a404:	43db      	mvns	r3, r3
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	4013      	ands	r3, r2
 800a40a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f003 0203 	and.w	r2, r3, #3
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	fa02 f303 	lsl.w	r3, r2, r3
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	4313      	orrs	r3, r2
 800a420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 80be 	beq.w	800a5b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a436:	4b65      	ldr	r3, [pc, #404]	; (800a5cc <HAL_GPIO_Init+0x320>)
 800a438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a43a:	4a64      	ldr	r2, [pc, #400]	; (800a5cc <HAL_GPIO_Init+0x320>)
 800a43c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a440:	6453      	str	r3, [r2, #68]	; 0x44
 800a442:	4b62      	ldr	r3, [pc, #392]	; (800a5cc <HAL_GPIO_Init+0x320>)
 800a444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a44e:	4a60      	ldr	r2, [pc, #384]	; (800a5d0 <HAL_GPIO_Init+0x324>)
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	089b      	lsrs	r3, r3, #2
 800a454:	3302      	adds	r3, #2
 800a456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a45a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	220f      	movs	r2, #15
 800a466:	fa02 f303 	lsl.w	r3, r2, r3
 800a46a:	43db      	mvns	r3, r3
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	4013      	ands	r3, r2
 800a470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a57      	ldr	r2, [pc, #348]	; (800a5d4 <HAL_GPIO_Init+0x328>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d037      	beq.n	800a4ea <HAL_GPIO_Init+0x23e>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a56      	ldr	r2, [pc, #344]	; (800a5d8 <HAL_GPIO_Init+0x32c>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d031      	beq.n	800a4e6 <HAL_GPIO_Init+0x23a>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a55      	ldr	r2, [pc, #340]	; (800a5dc <HAL_GPIO_Init+0x330>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d02b      	beq.n	800a4e2 <HAL_GPIO_Init+0x236>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a54      	ldr	r2, [pc, #336]	; (800a5e0 <HAL_GPIO_Init+0x334>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d025      	beq.n	800a4de <HAL_GPIO_Init+0x232>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a53      	ldr	r2, [pc, #332]	; (800a5e4 <HAL_GPIO_Init+0x338>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d01f      	beq.n	800a4da <HAL_GPIO_Init+0x22e>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a52      	ldr	r2, [pc, #328]	; (800a5e8 <HAL_GPIO_Init+0x33c>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d019      	beq.n	800a4d6 <HAL_GPIO_Init+0x22a>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a51      	ldr	r2, [pc, #324]	; (800a5ec <HAL_GPIO_Init+0x340>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d013      	beq.n	800a4d2 <HAL_GPIO_Init+0x226>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a50      	ldr	r2, [pc, #320]	; (800a5f0 <HAL_GPIO_Init+0x344>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00d      	beq.n	800a4ce <HAL_GPIO_Init+0x222>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a4f      	ldr	r2, [pc, #316]	; (800a5f4 <HAL_GPIO_Init+0x348>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d007      	beq.n	800a4ca <HAL_GPIO_Init+0x21e>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a4e      	ldr	r2, [pc, #312]	; (800a5f8 <HAL_GPIO_Init+0x34c>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d101      	bne.n	800a4c6 <HAL_GPIO_Init+0x21a>
 800a4c2:	2309      	movs	r3, #9
 800a4c4:	e012      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4c6:	230a      	movs	r3, #10
 800a4c8:	e010      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4ca:	2308      	movs	r3, #8
 800a4cc:	e00e      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4ce:	2307      	movs	r3, #7
 800a4d0:	e00c      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4d2:	2306      	movs	r3, #6
 800a4d4:	e00a      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4d6:	2305      	movs	r3, #5
 800a4d8:	e008      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4da:	2304      	movs	r3, #4
 800a4dc:	e006      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4de:	2303      	movs	r3, #3
 800a4e0:	e004      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	e002      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e000      	b.n	800a4ec <HAL_GPIO_Init+0x240>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	69fa      	ldr	r2, [r7, #28]
 800a4ee:	f002 0203 	and.w	r2, r2, #3
 800a4f2:	0092      	lsls	r2, r2, #2
 800a4f4:	4093      	lsls	r3, r2
 800a4f6:	69ba      	ldr	r2, [r7, #24]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a4fc:	4934      	ldr	r1, [pc, #208]	; (800a5d0 <HAL_GPIO_Init+0x324>)
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	089b      	lsrs	r3, r3, #2
 800a502:	3302      	adds	r3, #2
 800a504:	69ba      	ldr	r2, [r7, #24]
 800a506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a50a:	4b3c      	ldr	r3, [pc, #240]	; (800a5fc <HAL_GPIO_Init+0x350>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	43db      	mvns	r3, r3
 800a514:	69ba      	ldr	r2, [r7, #24]
 800a516:	4013      	ands	r3, r2
 800a518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a526:	69ba      	ldr	r2, [r7, #24]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a52e:	4a33      	ldr	r2, [pc, #204]	; (800a5fc <HAL_GPIO_Init+0x350>)
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a534:	4b31      	ldr	r3, [pc, #196]	; (800a5fc <HAL_GPIO_Init+0x350>)
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	43db      	mvns	r3, r3
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	4013      	ands	r3, r2
 800a542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d003      	beq.n	800a558 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	4313      	orrs	r3, r2
 800a556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a558:	4a28      	ldr	r2, [pc, #160]	; (800a5fc <HAL_GPIO_Init+0x350>)
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a55e:	4b27      	ldr	r3, [pc, #156]	; (800a5fc <HAL_GPIO_Init+0x350>)
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	43db      	mvns	r3, r3
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	4013      	ands	r3, r2
 800a56c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	4313      	orrs	r3, r2
 800a580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a582:	4a1e      	ldr	r2, [pc, #120]	; (800a5fc <HAL_GPIO_Init+0x350>)
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a588:	4b1c      	ldr	r3, [pc, #112]	; (800a5fc <HAL_GPIO_Init+0x350>)
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	43db      	mvns	r3, r3
 800a592:	69ba      	ldr	r2, [r7, #24]
 800a594:	4013      	ands	r3, r2
 800a596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a5a4:	69ba      	ldr	r2, [r7, #24]
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a5ac:	4a13      	ldr	r2, [pc, #76]	; (800a5fc <HAL_GPIO_Init+0x350>)
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	61fb      	str	r3, [r7, #28]
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2b0f      	cmp	r3, #15
 800a5bc:	f67f ae86 	bls.w	800a2cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	3724      	adds	r7, #36	; 0x24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	40013800 	.word	0x40013800
 800a5d4:	40020000 	.word	0x40020000
 800a5d8:	40020400 	.word	0x40020400
 800a5dc:	40020800 	.word	0x40020800
 800a5e0:	40020c00 	.word	0x40020c00
 800a5e4:	40021000 	.word	0x40021000
 800a5e8:	40021400 	.word	0x40021400
 800a5ec:	40021800 	.word	0x40021800
 800a5f0:	40021c00 	.word	0x40021c00
 800a5f4:	40022000 	.word	0x40022000
 800a5f8:	40022400 	.word	0x40022400
 800a5fc:	40013c00 	.word	0x40013c00

0800a600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	460b      	mov	r3, r1
 800a60a:	807b      	strh	r3, [r7, #2]
 800a60c:	4613      	mov	r3, r2
 800a60e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a610:	787b      	ldrb	r3, [r7, #1]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a616:	887a      	ldrh	r2, [r7, #2]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a61c:	e003      	b.n	800a626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a61e:	887b      	ldrh	r3, [r7, #2]
 800a620:	041a      	lsls	r2, r3, #16
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	619a      	str	r2, [r3, #24]
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	460b      	mov	r3, r1
 800a63c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	695a      	ldr	r2, [r3, #20]
 800a642:	887b      	ldrh	r3, [r7, #2]
 800a644:	4013      	ands	r3, r2
 800a646:	2b00      	cmp	r3, #0
 800a648:	d004      	beq.n	800a654 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a64a:	887b      	ldrh	r3, [r7, #2]
 800a64c:	041a      	lsls	r2, r3, #16
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800a652:	e002      	b.n	800a65a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a654:	887a      	ldrh	r2, [r7, #2]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	619a      	str	r2, [r3, #24]
}
 800a65a:	bf00      	nop
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a666:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a668:	b08f      	sub	sp, #60	; 0x3c
 800a66a:	af0a      	add	r7, sp, #40	; 0x28
 800a66c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e116      	b.n	800a8a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7fe fb1e 	bl	8008cd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2203      	movs	r2, #3
 800a69c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d102      	bne.n	800a6b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f001 fefc 	bl	800c4b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	603b      	str	r3, [r7, #0]
 800a6c2:	687e      	ldr	r6, [r7, #4]
 800a6c4:	466d      	mov	r5, sp
 800a6c6:	f106 0410 	add.w	r4, r6, #16
 800a6ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a6ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a6d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a6d6:	e885 0003 	stmia.w	r5, {r0, r1}
 800a6da:	1d33      	adds	r3, r6, #4
 800a6dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6de:	6838      	ldr	r0, [r7, #0]
 800a6e0:	f001 fe90 	bl	800c404 <USB_CoreInit>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d005      	beq.n	800a6f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e0d7      	b.n	800a8a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 feea 	bl	800c4d6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a702:	2300      	movs	r3, #0
 800a704:	73fb      	strb	r3, [r7, #15]
 800a706:	e04a      	b.n	800a79e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a708:	7bfa      	ldrb	r2, [r7, #15]
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	4613      	mov	r3, r2
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	1a9b      	subs	r3, r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	440b      	add	r3, r1
 800a716:	333d      	adds	r3, #61	; 0x3d
 800a718:	2201      	movs	r2, #1
 800a71a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a71c:	7bfa      	ldrb	r2, [r7, #15]
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	4613      	mov	r3, r2
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	1a9b      	subs	r3, r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	440b      	add	r3, r1
 800a72a:	333c      	adds	r3, #60	; 0x3c
 800a72c:	7bfa      	ldrb	r2, [r7, #15]
 800a72e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a730:	7bfa      	ldrb	r2, [r7, #15]
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	b298      	uxth	r0, r3
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	4613      	mov	r3, r2
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	1a9b      	subs	r3, r3, r2
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	440b      	add	r3, r1
 800a742:	3342      	adds	r3, #66	; 0x42
 800a744:	4602      	mov	r2, r0
 800a746:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a748:	7bfa      	ldrb	r2, [r7, #15]
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	4613      	mov	r3, r2
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	1a9b      	subs	r3, r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	440b      	add	r3, r1
 800a756:	333f      	adds	r3, #63	; 0x3f
 800a758:	2200      	movs	r2, #0
 800a75a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a75c:	7bfa      	ldrb	r2, [r7, #15]
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	00db      	lsls	r3, r3, #3
 800a764:	1a9b      	subs	r3, r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	3344      	adds	r3, #68	; 0x44
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a770:	7bfa      	ldrb	r2, [r7, #15]
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	4613      	mov	r3, r2
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	1a9b      	subs	r3, r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	440b      	add	r3, r1
 800a77e:	3348      	adds	r3, #72	; 0x48
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a784:	7bfa      	ldrb	r2, [r7, #15]
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	4613      	mov	r3, r2
 800a78a:	00db      	lsls	r3, r3, #3
 800a78c:	1a9b      	subs	r3, r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	440b      	add	r3, r1
 800a792:	3350      	adds	r3, #80	; 0x50
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	3301      	adds	r3, #1
 800a79c:	73fb      	strb	r3, [r7, #15]
 800a79e:	7bfa      	ldrb	r2, [r7, #15]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d3af      	bcc.n	800a708 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73fb      	strb	r3, [r7, #15]
 800a7ac:	e044      	b.n	800a838 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a7ae:	7bfa      	ldrb	r2, [r7, #15]
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	1a9b      	subs	r3, r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	440b      	add	r3, r1
 800a7bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a7c4:	7bfa      	ldrb	r2, [r7, #15]
 800a7c6:	6879      	ldr	r1, [r7, #4]
 800a7c8:	4613      	mov	r3, r2
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	1a9b      	subs	r3, r3, r2
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	440b      	add	r3, r1
 800a7d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a7d6:	7bfa      	ldrb	r2, [r7, #15]
 800a7d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a7da:	7bfa      	ldrb	r2, [r7, #15]
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	1a9b      	subs	r3, r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a7f0:	7bfa      	ldrb	r2, [r7, #15]
 800a7f2:	6879      	ldr	r1, [r7, #4]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	1a9b      	subs	r3, r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	440b      	add	r3, r1
 800a7fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a802:	2200      	movs	r2, #0
 800a804:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a806:	7bfa      	ldrb	r2, [r7, #15]
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	1a9b      	subs	r3, r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a818:	2200      	movs	r2, #0
 800a81a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a81c:	7bfa      	ldrb	r2, [r7, #15]
 800a81e:	6879      	ldr	r1, [r7, #4]
 800a820:	4613      	mov	r3, r2
 800a822:	00db      	lsls	r3, r3, #3
 800a824:	1a9b      	subs	r3, r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	440b      	add	r3, r1
 800a82a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	3301      	adds	r3, #1
 800a836:	73fb      	strb	r3, [r7, #15]
 800a838:	7bfa      	ldrb	r2, [r7, #15]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d3b5      	bcc.n	800a7ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	687e      	ldr	r6, [r7, #4]
 800a84a:	466d      	mov	r5, sp
 800a84c:	f106 0410 	add.w	r4, r6, #16
 800a850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a85c:	e885 0003 	stmia.w	r5, {r0, r1}
 800a860:	1d33      	adds	r3, r6, #4
 800a862:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a864:	6838      	ldr	r0, [r7, #0]
 800a866:	f001 fe61 	bl	800c52c <USB_DevInit>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d005      	beq.n	800a87c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e014      	b.n	800a8a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	2b01      	cmp	r3, #1
 800a892:	d102      	bne.n	800a89a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f80b 	bl	800a8b0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f002 f813 	bl	800c8ca <USB_DevDisconnect>

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a8b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <HAL_PCDEx_ActivateLPM+0x44>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	10000003 	.word	0x10000003

0800a8f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a04      	ldr	r2, [pc, #16]	; (800a914 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a906:	6013      	str	r3, [r2, #0]
}
 800a908:	bf00      	nop
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	40007000 	.word	0x40007000

0800a918 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a922:	4b23      	ldr	r3, [pc, #140]	; (800a9b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a926:	4a22      	ldr	r2, [pc, #136]	; (800a9b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a92c:	6413      	str	r3, [r2, #64]	; 0x40
 800a92e:	4b20      	ldr	r3, [pc, #128]	; (800a9b0 <HAL_PWREx_EnableOverDrive+0x98>)
 800a930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a936:	603b      	str	r3, [r7, #0]
 800a938:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a93a:	4b1e      	ldr	r3, [pc, #120]	; (800a9b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a944:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a946:	f7fe fb7f 	bl	8009048 <HAL_GetTick>
 800a94a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a94c:	e009      	b.n	800a962 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a94e:	f7fe fb7b 	bl	8009048 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a95c:	d901      	bls.n	800a962 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e022      	b.n	800a9a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a962:	4b14      	ldr	r3, [pc, #80]	; (800a9b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a96a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a96e:	d1ee      	bne.n	800a94e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a970:	4b10      	ldr	r3, [pc, #64]	; (800a9b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a0f      	ldr	r2, [pc, #60]	; (800a9b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a97a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a97c:	f7fe fb64 	bl	8009048 <HAL_GetTick>
 800a980:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a982:	e009      	b.n	800a998 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a984:	f7fe fb60 	bl	8009048 <HAL_GetTick>
 800a988:	4602      	mov	r2, r0
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	1ad3      	subs	r3, r2, r3
 800a98e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a992:	d901      	bls.n	800a998 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e007      	b.n	800a9a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a998:	4b06      	ldr	r3, [pc, #24]	; (800a9b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9a4:	d1ee      	bne.n	800a984 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	40023800 	.word	0x40023800
 800a9b4:	40007000 	.word	0x40007000

0800a9b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e29b      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 8087 	beq.w	800aaea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9dc:	4b96      	ldr	r3, [pc, #600]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f003 030c 	and.w	r3, r3, #12
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	d00c      	beq.n	800aa02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a9e8:	4b93      	ldr	r3, [pc, #588]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	f003 030c 	and.w	r3, r3, #12
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	d112      	bne.n	800aa1a <HAL_RCC_OscConfig+0x62>
 800a9f4:	4b90      	ldr	r3, [pc, #576]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa00:	d10b      	bne.n	800aa1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa02:	4b8d      	ldr	r3, [pc, #564]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d06c      	beq.n	800aae8 <HAL_RCC_OscConfig+0x130>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d168      	bne.n	800aae8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e275      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa22:	d106      	bne.n	800aa32 <HAL_RCC_OscConfig+0x7a>
 800aa24:	4b84      	ldr	r3, [pc, #528]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a83      	ldr	r2, [pc, #524]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	e02e      	b.n	800aa90 <HAL_RCC_OscConfig+0xd8>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10c      	bne.n	800aa54 <HAL_RCC_OscConfig+0x9c>
 800aa3a:	4b7f      	ldr	r3, [pc, #508]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a7e      	ldr	r2, [pc, #504]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	4b7c      	ldr	r3, [pc, #496]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a7b      	ldr	r2, [pc, #492]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	e01d      	b.n	800aa90 <HAL_RCC_OscConfig+0xd8>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa5c:	d10c      	bne.n	800aa78 <HAL_RCC_OscConfig+0xc0>
 800aa5e:	4b76      	ldr	r3, [pc, #472]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a75      	ldr	r2, [pc, #468]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	4b73      	ldr	r3, [pc, #460]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a72      	ldr	r2, [pc, #456]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	e00b      	b.n	800aa90 <HAL_RCC_OscConfig+0xd8>
 800aa78:	4b6f      	ldr	r3, [pc, #444]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a6e      	ldr	r2, [pc, #440]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	4b6c      	ldr	r3, [pc, #432]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a6b      	ldr	r2, [pc, #428]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aa8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d013      	beq.n	800aac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa98:	f7fe fad6 	bl	8009048 <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa9e:	e008      	b.n	800aab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aaa0:	f7fe fad2 	bl	8009048 <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b64      	cmp	r3, #100	; 0x64
 800aaac:	d901      	bls.n	800aab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e229      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aab2:	4b61      	ldr	r3, [pc, #388]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0f0      	beq.n	800aaa0 <HAL_RCC_OscConfig+0xe8>
 800aabe:	e014      	b.n	800aaea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aac0:	f7fe fac2 	bl	8009048 <HAL_GetTick>
 800aac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aac6:	e008      	b.n	800aada <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aac8:	f7fe fabe 	bl	8009048 <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	2b64      	cmp	r3, #100	; 0x64
 800aad4:	d901      	bls.n	800aada <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e215      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aada:	4b57      	ldr	r3, [pc, #348]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1f0      	bne.n	800aac8 <HAL_RCC_OscConfig+0x110>
 800aae6:	e000      	b.n	800aaea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d069      	beq.n	800abca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aaf6:	4b50      	ldr	r3, [pc, #320]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f003 030c 	and.w	r3, r3, #12
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00b      	beq.n	800ab1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab02:	4b4d      	ldr	r3, [pc, #308]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f003 030c 	and.w	r3, r3, #12
 800ab0a:	2b08      	cmp	r3, #8
 800ab0c:	d11c      	bne.n	800ab48 <HAL_RCC_OscConfig+0x190>
 800ab0e:	4b4a      	ldr	r3, [pc, #296]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d116      	bne.n	800ab48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab1a:	4b47      	ldr	r3, [pc, #284]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0302 	and.w	r3, r3, #2
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d005      	beq.n	800ab32 <HAL_RCC_OscConfig+0x17a>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d001      	beq.n	800ab32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e1e9      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab32:	4b41      	ldr	r3, [pc, #260]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	493d      	ldr	r1, [pc, #244]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab46:	e040      	b.n	800abca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d023      	beq.n	800ab98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab50:	4b39      	ldr	r3, [pc, #228]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a38      	ldr	r2, [pc, #224]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab56:	f043 0301 	orr.w	r3, r3, #1
 800ab5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab5c:	f7fe fa74 	bl	8009048 <HAL_GetTick>
 800ab60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab62:	e008      	b.n	800ab76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab64:	f7fe fa70 	bl	8009048 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d901      	bls.n	800ab76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e1c7      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab76:	4b30      	ldr	r3, [pc, #192]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0f0      	beq.n	800ab64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab82:	4b2d      	ldr	r3, [pc, #180]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	00db      	lsls	r3, r3, #3
 800ab90:	4929      	ldr	r1, [pc, #164]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab92:	4313      	orrs	r3, r2
 800ab94:	600b      	str	r3, [r1, #0]
 800ab96:	e018      	b.n	800abca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab98:	4b27      	ldr	r3, [pc, #156]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a26      	ldr	r2, [pc, #152]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ab9e:	f023 0301 	bic.w	r3, r3, #1
 800aba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba4:	f7fe fa50 	bl	8009048 <HAL_GetTick>
 800aba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abaa:	e008      	b.n	800abbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abac:	f7fe fa4c 	bl	8009048 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d901      	bls.n	800abbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e1a3      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abbe:	4b1e      	ldr	r3, [pc, #120]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1f0      	bne.n	800abac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d038      	beq.n	800ac48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d019      	beq.n	800ac12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abde:	4b16      	ldr	r3, [pc, #88]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800abe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800abe4:	f043 0301 	orr.w	r3, r3, #1
 800abe8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abea:	f7fe fa2d 	bl	8009048 <HAL_GetTick>
 800abee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abf0:	e008      	b.n	800ac04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abf2:	f7fe fa29 	bl	8009048 <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d901      	bls.n	800ac04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e180      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ac06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d0f0      	beq.n	800abf2 <HAL_RCC_OscConfig+0x23a>
 800ac10:	e01a      	b.n	800ac48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac12:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ac14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac16:	4a08      	ldr	r2, [pc, #32]	; (800ac38 <HAL_RCC_OscConfig+0x280>)
 800ac18:	f023 0301 	bic.w	r3, r3, #1
 800ac1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac1e:	f7fe fa13 	bl	8009048 <HAL_GetTick>
 800ac22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac24:	e00a      	b.n	800ac3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac26:	f7fe fa0f 	bl	8009048 <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d903      	bls.n	800ac3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e166      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
 800ac38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac3c:	4b92      	ldr	r3, [pc, #584]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ac3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1ee      	bne.n	800ac26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0304 	and.w	r3, r3, #4
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 80a4 	beq.w	800ad9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac56:	4b8c      	ldr	r3, [pc, #560]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ac58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10d      	bne.n	800ac7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac62:	4b89      	ldr	r3, [pc, #548]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ac64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac66:	4a88      	ldr	r2, [pc, #544]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ac68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac6c:	6413      	str	r3, [r2, #64]	; 0x40
 800ac6e:	4b86      	ldr	r3, [pc, #536]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac76:	60bb      	str	r3, [r7, #8]
 800ac78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac7e:	4b83      	ldr	r3, [pc, #524]	; (800ae8c <HAL_RCC_OscConfig+0x4d4>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d118      	bne.n	800acbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800ac8a:	4b80      	ldr	r3, [pc, #512]	; (800ae8c <HAL_RCC_OscConfig+0x4d4>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a7f      	ldr	r2, [pc, #508]	; (800ae8c <HAL_RCC_OscConfig+0x4d4>)
 800ac90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac96:	f7fe f9d7 	bl	8009048 <HAL_GetTick>
 800ac9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac9c:	e008      	b.n	800acb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac9e:	f7fe f9d3 	bl	8009048 <HAL_GetTick>
 800aca2:	4602      	mov	r2, r0
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	2b64      	cmp	r3, #100	; 0x64
 800acaa:	d901      	bls.n	800acb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e12a      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800acb0:	4b76      	ldr	r3, [pc, #472]	; (800ae8c <HAL_RCC_OscConfig+0x4d4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0f0      	beq.n	800ac9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d106      	bne.n	800acd2 <HAL_RCC_OscConfig+0x31a>
 800acc4:	4b70      	ldr	r3, [pc, #448]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800acc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc8:	4a6f      	ldr	r2, [pc, #444]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800acca:	f043 0301 	orr.w	r3, r3, #1
 800acce:	6713      	str	r3, [r2, #112]	; 0x70
 800acd0:	e02d      	b.n	800ad2e <HAL_RCC_OscConfig+0x376>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10c      	bne.n	800acf4 <HAL_RCC_OscConfig+0x33c>
 800acda:	4b6b      	ldr	r3, [pc, #428]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800acdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acde:	4a6a      	ldr	r2, [pc, #424]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ace0:	f023 0301 	bic.w	r3, r3, #1
 800ace4:	6713      	str	r3, [r2, #112]	; 0x70
 800ace6:	4b68      	ldr	r3, [pc, #416]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ace8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acea:	4a67      	ldr	r2, [pc, #412]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800acec:	f023 0304 	bic.w	r3, r3, #4
 800acf0:	6713      	str	r3, [r2, #112]	; 0x70
 800acf2:	e01c      	b.n	800ad2e <HAL_RCC_OscConfig+0x376>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	2b05      	cmp	r3, #5
 800acfa:	d10c      	bne.n	800ad16 <HAL_RCC_OscConfig+0x35e>
 800acfc:	4b62      	ldr	r3, [pc, #392]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800acfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad00:	4a61      	ldr	r2, [pc, #388]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad02:	f043 0304 	orr.w	r3, r3, #4
 800ad06:	6713      	str	r3, [r2, #112]	; 0x70
 800ad08:	4b5f      	ldr	r3, [pc, #380]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad0c:	4a5e      	ldr	r2, [pc, #376]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad0e:	f043 0301 	orr.w	r3, r3, #1
 800ad12:	6713      	str	r3, [r2, #112]	; 0x70
 800ad14:	e00b      	b.n	800ad2e <HAL_RCC_OscConfig+0x376>
 800ad16:	4b5c      	ldr	r3, [pc, #368]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1a:	4a5b      	ldr	r2, [pc, #364]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad1c:	f023 0301 	bic.w	r3, r3, #1
 800ad20:	6713      	str	r3, [r2, #112]	; 0x70
 800ad22:	4b59      	ldr	r3, [pc, #356]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad26:	4a58      	ldr	r2, [pc, #352]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad28:	f023 0304 	bic.w	r3, r3, #4
 800ad2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d015      	beq.n	800ad62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad36:	f7fe f987 	bl	8009048 <HAL_GetTick>
 800ad3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad3c:	e00a      	b.n	800ad54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad3e:	f7fe f983 	bl	8009048 <HAL_GetTick>
 800ad42:	4602      	mov	r2, r0
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d901      	bls.n	800ad54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e0d8      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad54:	4b4c      	ldr	r3, [pc, #304]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0ee      	beq.n	800ad3e <HAL_RCC_OscConfig+0x386>
 800ad60:	e014      	b.n	800ad8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad62:	f7fe f971 	bl	8009048 <HAL_GetTick>
 800ad66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad68:	e00a      	b.n	800ad80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad6a:	f7fe f96d 	bl	8009048 <HAL_GetTick>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d901      	bls.n	800ad80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e0c2      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad80:	4b41      	ldr	r3, [pc, #260]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad84:	f003 0302 	and.w	r3, r3, #2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1ee      	bne.n	800ad6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d105      	bne.n	800ad9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad92:	4b3d      	ldr	r3, [pc, #244]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad96:	4a3c      	ldr	r2, [pc, #240]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ad98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 80ae 	beq.w	800af04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ada8:	4b37      	ldr	r3, [pc, #220]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f003 030c 	and.w	r3, r3, #12
 800adb0:	2b08      	cmp	r3, #8
 800adb2:	d06d      	beq.n	800ae90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d14b      	bne.n	800ae54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adbc:	4b32      	ldr	r3, [pc, #200]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a31      	ldr	r2, [pc, #196]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800adc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc8:	f7fe f93e 	bl	8009048 <HAL_GetTick>
 800adcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adce:	e008      	b.n	800ade2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800add0:	f7fe f93a 	bl	8009048 <HAL_GetTick>
 800add4:	4602      	mov	r2, r0
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	2b02      	cmp	r3, #2
 800addc:	d901      	bls.n	800ade2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800adde:	2303      	movs	r3, #3
 800ade0:	e091      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ade2:	4b29      	ldr	r3, [pc, #164]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1f0      	bne.n	800add0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	69da      	ldr	r2, [r3, #28]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	019b      	lsls	r3, r3, #6
 800adfe:	431a      	orrs	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae04:	085b      	lsrs	r3, r3, #1
 800ae06:	3b01      	subs	r3, #1
 800ae08:	041b      	lsls	r3, r3, #16
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	061b      	lsls	r3, r3, #24
 800ae12:	431a      	orrs	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae18:	071b      	lsls	r3, r3, #28
 800ae1a:	491b      	ldr	r1, [pc, #108]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae20:	4b19      	ldr	r3, [pc, #100]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a18      	ldr	r2, [pc, #96]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ae26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae2c:	f7fe f90c 	bl	8009048 <HAL_GetTick>
 800ae30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae34:	f7fe f908 	bl	8009048 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e05f      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae46:	4b10      	ldr	r3, [pc, #64]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0f0      	beq.n	800ae34 <HAL_RCC_OscConfig+0x47c>
 800ae52:	e057      	b.n	800af04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae54:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a0b      	ldr	r2, [pc, #44]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ae5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae60:	f7fe f8f2 	bl	8009048 <HAL_GetTick>
 800ae64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae66:	e008      	b.n	800ae7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae68:	f7fe f8ee 	bl	8009048 <HAL_GetTick>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d901      	bls.n	800ae7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e045      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae7a:	4b03      	ldr	r3, [pc, #12]	; (800ae88 <HAL_RCC_OscConfig+0x4d0>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1f0      	bne.n	800ae68 <HAL_RCC_OscConfig+0x4b0>
 800ae86:	e03d      	b.n	800af04 <HAL_RCC_OscConfig+0x54c>
 800ae88:	40023800 	.word	0x40023800
 800ae8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ae90:	4b1f      	ldr	r3, [pc, #124]	; (800af10 <HAL_RCC_OscConfig+0x558>)
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d030      	beq.n	800af00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d129      	bne.n	800af00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d122      	bne.n	800af00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aec0:	4013      	ands	r3, r2
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aec6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d119      	bne.n	800af00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed6:	085b      	lsrs	r3, r3, #1
 800aed8:	3b01      	subs	r3, #1
 800aeda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aedc:	429a      	cmp	r2, r3
 800aede:	d10f      	bne.n	800af00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d107      	bne.n	800af00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d001      	beq.n	800af04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e000      	b.n	800af06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	40023800 	.word	0x40023800

0800af14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e0d0      	b.n	800b0ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af2c:	4b6a      	ldr	r3, [pc, #424]	; (800b0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 030f 	and.w	r3, r3, #15
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	429a      	cmp	r2, r3
 800af38:	d910      	bls.n	800af5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af3a:	4b67      	ldr	r3, [pc, #412]	; (800b0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f023 020f 	bic.w	r2, r3, #15
 800af42:	4965      	ldr	r1, [pc, #404]	; (800b0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	4313      	orrs	r3, r2
 800af48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af4a:	4b63      	ldr	r3, [pc, #396]	; (800b0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 030f 	and.w	r3, r3, #15
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	429a      	cmp	r2, r3
 800af56:	d001      	beq.n	800af5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e0b8      	b.n	800b0ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0302 	and.w	r3, r3, #2
 800af64:	2b00      	cmp	r3, #0
 800af66:	d020      	beq.n	800afaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af74:	4b59      	ldr	r3, [pc, #356]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	4a58      	ldr	r2, [pc, #352]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800af7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800af7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 0308 	and.w	r3, r3, #8
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af8c:	4b53      	ldr	r3, [pc, #332]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	4a52      	ldr	r2, [pc, #328]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800af92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800af96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af98:	4b50      	ldr	r3, [pc, #320]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	494d      	ldr	r1, [pc, #308]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d040      	beq.n	800b038 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d107      	bne.n	800afce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afbe:	4b47      	ldr	r3, [pc, #284]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d115      	bne.n	800aff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e07f      	b.n	800b0ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d107      	bne.n	800afe6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afd6:	4b41      	ldr	r3, [pc, #260]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d109      	bne.n	800aff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e073      	b.n	800b0ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afe6:	4b3d      	ldr	r3, [pc, #244]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e06b      	b.n	800b0ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aff6:	4b39      	ldr	r3, [pc, #228]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f023 0203 	bic.w	r2, r3, #3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	4936      	ldr	r1, [pc, #216]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800b004:	4313      	orrs	r3, r2
 800b006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b008:	f7fe f81e 	bl	8009048 <HAL_GetTick>
 800b00c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b00e:	e00a      	b.n	800b026 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b010:	f7fe f81a 	bl	8009048 <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b01e:	4293      	cmp	r3, r2
 800b020:	d901      	bls.n	800b026 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e053      	b.n	800b0ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b026:	4b2d      	ldr	r3, [pc, #180]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f003 020c 	and.w	r2, r3, #12
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	429a      	cmp	r2, r3
 800b036:	d1eb      	bne.n	800b010 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b038:	4b27      	ldr	r3, [pc, #156]	; (800b0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 030f 	and.w	r3, r3, #15
 800b040:	683a      	ldr	r2, [r7, #0]
 800b042:	429a      	cmp	r2, r3
 800b044:	d210      	bcs.n	800b068 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b046:	4b24      	ldr	r3, [pc, #144]	; (800b0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f023 020f 	bic.w	r2, r3, #15
 800b04e:	4922      	ldr	r1, [pc, #136]	; (800b0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	4313      	orrs	r3, r2
 800b054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b056:	4b20      	ldr	r3, [pc, #128]	; (800b0d8 <HAL_RCC_ClockConfig+0x1c4>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 030f 	and.w	r3, r3, #15
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d001      	beq.n	800b068 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e032      	b.n	800b0ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d008      	beq.n	800b086 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b074:	4b19      	ldr	r3, [pc, #100]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	4916      	ldr	r1, [pc, #88]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800b082:	4313      	orrs	r3, r2
 800b084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0308 	and.w	r3, r3, #8
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d009      	beq.n	800b0a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b092:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	490e      	ldr	r1, [pc, #56]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b0a6:	f000 f821 	bl	800b0ec <HAL_RCC_GetSysClockFreq>
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	4b0b      	ldr	r3, [pc, #44]	; (800b0dc <HAL_RCC_ClockConfig+0x1c8>)
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	091b      	lsrs	r3, r3, #4
 800b0b2:	f003 030f 	and.w	r3, r3, #15
 800b0b6:	4a0a      	ldr	r2, [pc, #40]	; (800b0e0 <HAL_RCC_ClockConfig+0x1cc>)
 800b0b8:	5cd3      	ldrb	r3, [r2, r3]
 800b0ba:	fa21 f303 	lsr.w	r3, r1, r3
 800b0be:	4a09      	ldr	r2, [pc, #36]	; (800b0e4 <HAL_RCC_ClockConfig+0x1d0>)
 800b0c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b0c2:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <HAL_RCC_ClockConfig+0x1d4>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fd ff7a 	bl	8008fc0 <HAL_InitTick>

  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	40023c00 	.word	0x40023c00
 800b0dc:	40023800 	.word	0x40023800
 800b0e0:	0801e854 	.word	0x0801e854
 800b0e4:	20000040 	.word	0x20000040
 800b0e8:	20000044 	.word	0x20000044

0800b0ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	607b      	str	r3, [r7, #4]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b102:	4b63      	ldr	r3, [pc, #396]	; (800b290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	f003 030c 	and.w	r3, r3, #12
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d007      	beq.n	800b11e <HAL_RCC_GetSysClockFreq+0x32>
 800b10e:	2b08      	cmp	r3, #8
 800b110:	d008      	beq.n	800b124 <HAL_RCC_GetSysClockFreq+0x38>
 800b112:	2b00      	cmp	r3, #0
 800b114:	f040 80b4 	bne.w	800b280 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b118:	4b5e      	ldr	r3, [pc, #376]	; (800b294 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b11a:	60bb      	str	r3, [r7, #8]
      break;
 800b11c:	e0b3      	b.n	800b286 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b11e:	4b5e      	ldr	r3, [pc, #376]	; (800b298 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b120:	60bb      	str	r3, [r7, #8]
      break;
 800b122:	e0b0      	b.n	800b286 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b124:	4b5a      	ldr	r3, [pc, #360]	; (800b290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b12c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b12e:	4b58      	ldr	r3, [pc, #352]	; (800b290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d04a      	beq.n	800b1d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b13a:	4b55      	ldr	r3, [pc, #340]	; (800b290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	099b      	lsrs	r3, r3, #6
 800b140:	f04f 0400 	mov.w	r4, #0
 800b144:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b148:	f04f 0200 	mov.w	r2, #0
 800b14c:	ea03 0501 	and.w	r5, r3, r1
 800b150:	ea04 0602 	and.w	r6, r4, r2
 800b154:	4629      	mov	r1, r5
 800b156:	4632      	mov	r2, r6
 800b158:	f04f 0300 	mov.w	r3, #0
 800b15c:	f04f 0400 	mov.w	r4, #0
 800b160:	0154      	lsls	r4, r2, #5
 800b162:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b166:	014b      	lsls	r3, r1, #5
 800b168:	4619      	mov	r1, r3
 800b16a:	4622      	mov	r2, r4
 800b16c:	1b49      	subs	r1, r1, r5
 800b16e:	eb62 0206 	sbc.w	r2, r2, r6
 800b172:	f04f 0300 	mov.w	r3, #0
 800b176:	f04f 0400 	mov.w	r4, #0
 800b17a:	0194      	lsls	r4, r2, #6
 800b17c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b180:	018b      	lsls	r3, r1, #6
 800b182:	1a5b      	subs	r3, r3, r1
 800b184:	eb64 0402 	sbc.w	r4, r4, r2
 800b188:	f04f 0100 	mov.w	r1, #0
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	00e2      	lsls	r2, r4, #3
 800b192:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b196:	00d9      	lsls	r1, r3, #3
 800b198:	460b      	mov	r3, r1
 800b19a:	4614      	mov	r4, r2
 800b19c:	195b      	adds	r3, r3, r5
 800b19e:	eb44 0406 	adc.w	r4, r4, r6
 800b1a2:	f04f 0100 	mov.w	r1, #0
 800b1a6:	f04f 0200 	mov.w	r2, #0
 800b1aa:	0262      	lsls	r2, r4, #9
 800b1ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b1b0:	0259      	lsls	r1, r3, #9
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f04f 0400 	mov.w	r4, #0
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4623      	mov	r3, r4
 800b1c4:	f7fd f894 	bl	80082f0 <__aeabi_uldivmod>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e049      	b.n	800b264 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1d0:	4b2f      	ldr	r3, [pc, #188]	; (800b290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	099b      	lsrs	r3, r3, #6
 800b1d6:	f04f 0400 	mov.w	r4, #0
 800b1da:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b1de:	f04f 0200 	mov.w	r2, #0
 800b1e2:	ea03 0501 	and.w	r5, r3, r1
 800b1e6:	ea04 0602 	and.w	r6, r4, r2
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	f04f 0300 	mov.w	r3, #0
 800b1f2:	f04f 0400 	mov.w	r4, #0
 800b1f6:	0154      	lsls	r4, r2, #5
 800b1f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b1fc:	014b      	lsls	r3, r1, #5
 800b1fe:	4619      	mov	r1, r3
 800b200:	4622      	mov	r2, r4
 800b202:	1b49      	subs	r1, r1, r5
 800b204:	eb62 0206 	sbc.w	r2, r2, r6
 800b208:	f04f 0300 	mov.w	r3, #0
 800b20c:	f04f 0400 	mov.w	r4, #0
 800b210:	0194      	lsls	r4, r2, #6
 800b212:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b216:	018b      	lsls	r3, r1, #6
 800b218:	1a5b      	subs	r3, r3, r1
 800b21a:	eb64 0402 	sbc.w	r4, r4, r2
 800b21e:	f04f 0100 	mov.w	r1, #0
 800b222:	f04f 0200 	mov.w	r2, #0
 800b226:	00e2      	lsls	r2, r4, #3
 800b228:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b22c:	00d9      	lsls	r1, r3, #3
 800b22e:	460b      	mov	r3, r1
 800b230:	4614      	mov	r4, r2
 800b232:	195b      	adds	r3, r3, r5
 800b234:	eb44 0406 	adc.w	r4, r4, r6
 800b238:	f04f 0100 	mov.w	r1, #0
 800b23c:	f04f 0200 	mov.w	r2, #0
 800b240:	02a2      	lsls	r2, r4, #10
 800b242:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b246:	0299      	lsls	r1, r3, #10
 800b248:	460b      	mov	r3, r1
 800b24a:	4614      	mov	r4, r2
 800b24c:	4618      	mov	r0, r3
 800b24e:	4621      	mov	r1, r4
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f04f 0400 	mov.w	r4, #0
 800b256:	461a      	mov	r2, r3
 800b258:	4623      	mov	r3, r4
 800b25a:	f7fd f849 	bl	80082f0 <__aeabi_uldivmod>
 800b25e:	4603      	mov	r3, r0
 800b260:	460c      	mov	r4, r1
 800b262:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b264:	4b0a      	ldr	r3, [pc, #40]	; (800b290 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	0c1b      	lsrs	r3, r3, #16
 800b26a:	f003 0303 	and.w	r3, r3, #3
 800b26e:	3301      	adds	r3, #1
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27c:	60bb      	str	r3, [r7, #8]
      break;
 800b27e:	e002      	b.n	800b286 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b280:	4b04      	ldr	r3, [pc, #16]	; (800b294 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b282:	60bb      	str	r3, [r7, #8]
      break;
 800b284:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b286:	68bb      	ldr	r3, [r7, #8]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b290:	40023800 	.word	0x40023800
 800b294:	00f42400 	.word	0x00f42400
 800b298:	007a1200 	.word	0x007a1200

0800b29c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2a0:	4b03      	ldr	r3, [pc, #12]	; (800b2b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	20000040 	.word	0x20000040

0800b2b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b2b8:	f7ff fff0 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 800b2bc:	4601      	mov	r1, r0
 800b2be:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	0a9b      	lsrs	r3, r3, #10
 800b2c4:	f003 0307 	and.w	r3, r3, #7
 800b2c8:	4a03      	ldr	r2, [pc, #12]	; (800b2d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2ca:	5cd3      	ldrb	r3, [r2, r3]
 800b2cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	40023800 	.word	0x40023800
 800b2d8:	0801e864 	.word	0x0801e864

0800b2dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b2e0:	f7ff ffdc 	bl	800b29c <HAL_RCC_GetHCLKFreq>
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	0b5b      	lsrs	r3, r3, #13
 800b2ec:	f003 0307 	and.w	r3, r3, #7
 800b2f0:	4a03      	ldr	r2, [pc, #12]	; (800b300 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b2f2:	5cd3      	ldrb	r3, [r2, r3]
 800b2f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	40023800 	.word	0x40023800
 800b300:	0801e864 	.word	0x0801e864

0800b304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d012      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b32c:	4b69      	ldr	r3, [pc, #420]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	4a68      	ldr	r2, [pc, #416]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b332:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b336:	6093      	str	r3, [r2, #8]
 800b338:	4b66      	ldr	r3, [pc, #408]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b340:	4964      	ldr	r1, [pc, #400]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b342:	4313      	orrs	r3, r2
 800b344:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b34e:	2301      	movs	r3, #1
 800b350:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d017      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b35e:	4b5d      	ldr	r3, [pc, #372]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36c:	4959      	ldr	r1, [pc, #356]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b36e:	4313      	orrs	r3, r2
 800b370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b37c:	d101      	bne.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b37e:	2301      	movs	r3, #1
 800b380:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b38a:	2301      	movs	r3, #1
 800b38c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d017      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b39a:	4b4e      	ldr	r3, [pc, #312]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a8:	494a      	ldr	r1, [pc, #296]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3b8:	d101      	bne.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d101      	bne.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 0320 	and.w	r3, r3, #32
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 808b 	beq.w	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b3e8:	4b3a      	ldr	r3, [pc, #232]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ec:	4a39      	ldr	r2, [pc, #228]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3f2:	6413      	str	r3, [r2, #64]	; 0x40
 800b3f4:	4b37      	ldr	r3, [pc, #220]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3fc:	60bb      	str	r3, [r7, #8]
 800b3fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b400:	4b35      	ldr	r3, [pc, #212]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a34      	ldr	r2, [pc, #208]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b40a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b40c:	f7fd fe1c 	bl	8009048 <HAL_GetTick>
 800b410:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b412:	e008      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b414:	f7fd fe18 	bl	8009048 <HAL_GetTick>
 800b418:	4602      	mov	r2, r0
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	2b64      	cmp	r3, #100	; 0x64
 800b420:	d901      	bls.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e38d      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b426:	4b2c      	ldr	r3, [pc, #176]	; (800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0f0      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b432:	4b28      	ldr	r3, [pc, #160]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b43a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d035      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d02e      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b450:	4b20      	ldr	r3, [pc, #128]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b458:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b45a:	4b1e      	ldr	r3, [pc, #120]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b45e:	4a1d      	ldr	r2, [pc, #116]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b464:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b466:	4b1b      	ldr	r3, [pc, #108]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b46a:	4a1a      	ldr	r2, [pc, #104]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b46c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b470:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b472:	4a18      	ldr	r2, [pc, #96]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b478:	4b16      	ldr	r3, [pc, #88]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b01      	cmp	r3, #1
 800b482:	d114      	bne.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b484:	f7fd fde0 	bl	8009048 <HAL_GetTick>
 800b488:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b48a:	e00a      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b48c:	f7fd fddc 	bl	8009048 <HAL_GetTick>
 800b490:	4602      	mov	r2, r0
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	f241 3288 	movw	r2, #5000	; 0x1388
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d901      	bls.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e34f      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a6:	f003 0302 	and.w	r3, r3, #2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d0ee      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4ba:	d111      	bne.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b4bc:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b4c8:	4b04      	ldr	r3, [pc, #16]	; (800b4dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b4ca:	400b      	ands	r3, r1
 800b4cc:	4901      	ldr	r1, [pc, #4]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	608b      	str	r3, [r1, #8]
 800b4d2:	e00b      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b4d4:	40023800 	.word	0x40023800
 800b4d8:	40007000 	.word	0x40007000
 800b4dc:	0ffffcff 	.word	0x0ffffcff
 800b4e0:	4bb3      	ldr	r3, [pc, #716]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	4ab2      	ldr	r2, [pc, #712]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b4ea:	6093      	str	r3, [r2, #8]
 800b4ec:	4bb0      	ldr	r3, [pc, #704]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4f8:	49ad      	ldr	r1, [pc, #692]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 0310 	and.w	r3, r3, #16
 800b506:	2b00      	cmp	r3, #0
 800b508:	d010      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b50a:	4ba9      	ldr	r3, [pc, #676]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b50c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b510:	4aa7      	ldr	r2, [pc, #668]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b516:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b51a:	4ba5      	ldr	r3, [pc, #660]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b51c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b524:	49a2      	ldr	r1, [pc, #648]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b526:	4313      	orrs	r3, r2
 800b528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b538:	4b9d      	ldr	r3, [pc, #628]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b53e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b546:	499a      	ldr	r1, [pc, #616]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b55a:	4b95      	ldr	r3, [pc, #596]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b560:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b568:	4991      	ldr	r1, [pc, #580]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b57c:	4b8c      	ldr	r3, [pc, #560]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b582:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b58a:	4989      	ldr	r1, [pc, #548]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00a      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b59e:	4b84      	ldr	r3, [pc, #528]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ac:	4980      	ldr	r1, [pc, #512]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00a      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b5c0:	4b7b      	ldr	r3, [pc, #492]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c6:	f023 0203 	bic.w	r2, r3, #3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ce:	4978      	ldr	r1, [pc, #480]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00a      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b5e2:	4b73      	ldr	r3, [pc, #460]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e8:	f023 020c 	bic.w	r2, r3, #12
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5f0:	496f      	ldr	r1, [pc, #444]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00a      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b604:	4b6a      	ldr	r3, [pc, #424]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b60a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b612:	4967      	ldr	r1, [pc, #412]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b614:	4313      	orrs	r3, r2
 800b616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b626:	4b62      	ldr	r3, [pc, #392]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b62c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b634:	495e      	ldr	r1, [pc, #376]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b636:	4313      	orrs	r3, r2
 800b638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00a      	beq.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b648:	4b59      	ldr	r3, [pc, #356]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b64e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b656:	4956      	ldr	r1, [pc, #344]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b658:	4313      	orrs	r3, r2
 800b65a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00a      	beq.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b66a:	4b51      	ldr	r3, [pc, #324]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b670:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b678:	494d      	ldr	r1, [pc, #308]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b67a:	4313      	orrs	r3, r2
 800b67c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00a      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b68c:	4b48      	ldr	r3, [pc, #288]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b692:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b69a:	4945      	ldr	r1, [pc, #276]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b69c:	4313      	orrs	r3, r2
 800b69e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00a      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b6ae:	4b40      	ldr	r3, [pc, #256]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6bc:	493c      	ldr	r1, [pc, #240]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00a      	beq.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b6d0:	4b37      	ldr	r3, [pc, #220]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6de:	4934      	ldr	r1, [pc, #208]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d011      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b6f2:	4b2f      	ldr	r3, [pc, #188]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b700:	492b      	ldr	r1, [pc, #172]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b702:	4313      	orrs	r3, r2
 800b704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b70c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b710:	d101      	bne.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b712:	2301      	movs	r3, #1
 800b714:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 0308 	and.w	r3, r3, #8
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b722:	2301      	movs	r3, #1
 800b724:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00a      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b732:	4b1f      	ldr	r3, [pc, #124]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b738:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b740:	491b      	ldr	r1, [pc, #108]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b742:	4313      	orrs	r3, r2
 800b744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00b      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b754:	4b16      	ldr	r3, [pc, #88]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b75a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b764:	4912      	ldr	r1, [pc, #72]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b766:	4313      	orrs	r3, r2
 800b768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00b      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800b778:	4b0d      	ldr	r3, [pc, #52]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b77a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b77e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b788:	4909      	ldr	r1, [pc, #36]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b78a:	4313      	orrs	r3, r2
 800b78c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00f      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b79c:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800b79e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ac:	e002      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b7ae:	bf00      	nop
 800b7b0:	40023800 	.word	0x40023800
 800b7b4:	4985      	ldr	r1, [pc, #532]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b7c8:	4b80      	ldr	r3, [pc, #512]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7d8:	497c      	ldr	r1, [pc, #496]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d005      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7ee:	f040 80d6 	bne.w	800b99e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b7f2:	4b76      	ldr	r3, [pc, #472]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a75      	ldr	r2, [pc, #468]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b7f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7fe:	f7fd fc23 	bl	8009048 <HAL_GetTick>
 800b802:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b804:	e008      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b806:	f7fd fc1f 	bl	8009048 <HAL_GetTick>
 800b80a:	4602      	mov	r2, r0
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	2b64      	cmp	r3, #100	; 0x64
 800b812:	d901      	bls.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	e194      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b818:	4b6c      	ldr	r3, [pc, #432]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1f0      	bne.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0301 	and.w	r3, r3, #1
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d021      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b834:	2b00      	cmp	r3, #0
 800b836:	d11d      	bne.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b838:	4b64      	ldr	r3, [pc, #400]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b83e:	0c1b      	lsrs	r3, r3, #16
 800b840:	f003 0303 	and.w	r3, r3, #3
 800b844:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b846:	4b61      	ldr	r3, [pc, #388]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b84c:	0e1b      	lsrs	r3, r3, #24
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	019a      	lsls	r2, r3, #6
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	041b      	lsls	r3, r3, #16
 800b85e:	431a      	orrs	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	061b      	lsls	r3, r3, #24
 800b864:	431a      	orrs	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	071b      	lsls	r3, r3, #28
 800b86c:	4957      	ldr	r1, [pc, #348]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d004      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b888:	d00a      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b892:	2b00      	cmp	r3, #0
 800b894:	d02e      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b89a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b89e:	d129      	bne.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b8a0:	4b4a      	ldr	r3, [pc, #296]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8a6:	0c1b      	lsrs	r3, r3, #16
 800b8a8:	f003 0303 	and.w	r3, r3, #3
 800b8ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b8ae:	4b47      	ldr	r3, [pc, #284]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b8b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8b4:	0f1b      	lsrs	r3, r3, #28
 800b8b6:	f003 0307 	and.w	r3, r3, #7
 800b8ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	019a      	lsls	r2, r3, #6
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	041b      	lsls	r3, r3, #16
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	061b      	lsls	r3, r3, #24
 800b8ce:	431a      	orrs	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	071b      	lsls	r3, r3, #28
 800b8d4:	493d      	ldr	r1, [pc, #244]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b8dc:	4b3b      	ldr	r3, [pc, #236]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b8de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8e2:	f023 021f 	bic.w	r2, r3, #31
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	4937      	ldr	r1, [pc, #220]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d01d      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b900:	4b32      	ldr	r3, [pc, #200]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b906:	0e1b      	lsrs	r3, r3, #24
 800b908:	f003 030f 	and.w	r3, r3, #15
 800b90c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b90e:	4b2f      	ldr	r3, [pc, #188]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b914:	0f1b      	lsrs	r3, r3, #28
 800b916:	f003 0307 	and.w	r3, r3, #7
 800b91a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	019a      	lsls	r2, r3, #6
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	431a      	orrs	r2, r3
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	061b      	lsls	r3, r3, #24
 800b92e:	431a      	orrs	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	071b      	lsls	r3, r3, #28
 800b934:	4925      	ldr	r1, [pc, #148]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b936:	4313      	orrs	r3, r2
 800b938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d011      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	019a      	lsls	r2, r3, #6
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	041b      	lsls	r3, r3, #16
 800b954:	431a      	orrs	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	061b      	lsls	r3, r3, #24
 800b95c:	431a      	orrs	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	071b      	lsls	r3, r3, #28
 800b964:	4919      	ldr	r1, [pc, #100]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b966:	4313      	orrs	r3, r2
 800b968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b96c:	4b17      	ldr	r3, [pc, #92]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a16      	ldr	r2, [pc, #88]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b972:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b978:	f7fd fb66 	bl	8009048 <HAL_GetTick>
 800b97c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b97e:	e008      	b.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b980:	f7fd fb62 	bl	8009048 <HAL_GetTick>
 800b984:	4602      	mov	r2, r0
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	2b64      	cmp	r3, #100	; 0x64
 800b98c:	d901      	bls.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b98e:	2303      	movs	r3, #3
 800b990:	e0d7      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b992:	4b0e      	ldr	r3, [pc, #56]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d0f0      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	f040 80cd 	bne.w	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b9a6:	4b09      	ldr	r3, [pc, #36]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a08      	ldr	r2, [pc, #32]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b9ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9b2:	f7fd fb49 	bl	8009048 <HAL_GetTick>
 800b9b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b9b8:	e00a      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b9ba:	f7fd fb45 	bl	8009048 <HAL_GetTick>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	2b64      	cmp	r3, #100	; 0x64
 800b9c6:	d903      	bls.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e0ba      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800b9cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b9d0:	4b5e      	ldr	r3, [pc, #376]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9dc:	d0ed      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d009      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d02e      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d12a      	bne.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ba06:	4b51      	ldr	r3, [pc, #324]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba0c:	0c1b      	lsrs	r3, r3, #16
 800ba0e:	f003 0303 	and.w	r3, r3, #3
 800ba12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ba14:	4b4d      	ldr	r3, [pc, #308]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba1a:	0f1b      	lsrs	r3, r3, #28
 800ba1c:	f003 0307 	and.w	r3, r3, #7
 800ba20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	695b      	ldr	r3, [r3, #20]
 800ba26:	019a      	lsls	r2, r3, #6
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	061b      	lsls	r3, r3, #24
 800ba34:	431a      	orrs	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	071b      	lsls	r3, r3, #28
 800ba3a:	4944      	ldr	r1, [pc, #272]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ba42:	4b42      	ldr	r3, [pc, #264]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba50:	3b01      	subs	r3, #1
 800ba52:	021b      	lsls	r3, r3, #8
 800ba54:	493d      	ldr	r1, [pc, #244]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba56:	4313      	orrs	r3, r2
 800ba58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d022      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba70:	d11d      	bne.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ba72:	4b36      	ldr	r3, [pc, #216]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba78:	0e1b      	lsrs	r3, r3, #24
 800ba7a:	f003 030f 	and.w	r3, r3, #15
 800ba7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ba80:	4b32      	ldr	r3, [pc, #200]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ba82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba86:	0f1b      	lsrs	r3, r3, #28
 800ba88:	f003 0307 	and.w	r3, r3, #7
 800ba8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	695b      	ldr	r3, [r3, #20]
 800ba92:	019a      	lsls	r2, r3, #6
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a1b      	ldr	r3, [r3, #32]
 800ba98:	041b      	lsls	r3, r3, #16
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	061b      	lsls	r3, r3, #24
 800baa0:	431a      	orrs	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	071b      	lsls	r3, r3, #28
 800baa6:	4929      	ldr	r1, [pc, #164]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800baa8:	4313      	orrs	r3, r2
 800baaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0308 	and.w	r3, r3, #8
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d028      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800baba:	4b24      	ldr	r3, [pc, #144]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800babc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bac0:	0e1b      	lsrs	r3, r3, #24
 800bac2:	f003 030f 	and.w	r3, r3, #15
 800bac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bac8:	4b20      	ldr	r3, [pc, #128]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800baca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bace:	0c1b      	lsrs	r3, r3, #16
 800bad0:	f003 0303 	and.w	r3, r3, #3
 800bad4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	019a      	lsls	r2, r3, #6
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	041b      	lsls	r3, r3, #16
 800bae0:	431a      	orrs	r2, r3
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	061b      	lsls	r3, r3, #24
 800bae6:	431a      	orrs	r2, r3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	071b      	lsls	r3, r3, #28
 800baee:	4917      	ldr	r1, [pc, #92]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800baf0:	4313      	orrs	r3, r2
 800baf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800baf6:	4b15      	ldr	r3, [pc, #84]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800baf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bafc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb04:	4911      	ldr	r1, [pc, #68]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bb06:	4313      	orrs	r3, r2
 800bb08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bb0c:	4b0f      	ldr	r3, [pc, #60]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a0e      	ldr	r2, [pc, #56]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bb12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb18:	f7fd fa96 	bl	8009048 <HAL_GetTick>
 800bb1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bb1e:	e008      	b.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bb20:	f7fd fa92 	bl	8009048 <HAL_GetTick>
 800bb24:	4602      	mov	r2, r0
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	2b64      	cmp	r3, #100	; 0x64
 800bb2c:	d901      	bls.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	e007      	b.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bb32:	4b06      	ldr	r3, [pc, #24]	; (800bb4c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb3e:	d1ef      	bne.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3720      	adds	r7, #32
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	40023800 	.word	0x40023800

0800bb50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e040      	b.n	800bbe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fd f86a 	bl	8008c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2224      	movs	r2, #36	; 0x24
 800bb7c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f022 0201 	bic.w	r2, r2, #1
 800bb8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f82c 	bl	800bbec <UART_SetConfig>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d101      	bne.n	800bb9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e022      	b.n	800bbe4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 faca 	bl	800c140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	689a      	ldr	r2, [r3, #8]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f042 0201 	orr.w	r2, r2, #1
 800bbda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fb51 	bl	800c284 <UART_CheckIdleState>
 800bbe2:	4603      	mov	r3, r0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b088      	sub	sp, #32
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	689a      	ldr	r2, [r3, #8]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	431a      	orrs	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	69db      	ldr	r3, [r3, #28]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	4bb1      	ldr	r3, [pc, #708]	; (800bee0 <UART_SetConfig+0x2f4>)
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	6812      	ldr	r2, [r2, #0]
 800bc22:	6939      	ldr	r1, [r7, #16]
 800bc24:	430b      	orrs	r3, r1
 800bc26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	68da      	ldr	r2, [r3, #12]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	430a      	orrs	r2, r1
 800bc3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a1b      	ldr	r3, [r3, #32]
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a9f      	ldr	r2, [pc, #636]	; (800bee4 <UART_SetConfig+0x2f8>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d121      	bne.n	800bcb0 <UART_SetConfig+0xc4>
 800bc6c:	4b9e      	ldr	r3, [pc, #632]	; (800bee8 <UART_SetConfig+0x2fc>)
 800bc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc72:	f003 0303 	and.w	r3, r3, #3
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d816      	bhi.n	800bca8 <UART_SetConfig+0xbc>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <UART_SetConfig+0x94>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bc91 	.word	0x0800bc91
 800bc84:	0800bc9d 	.word	0x0800bc9d
 800bc88:	0800bc97 	.word	0x0800bc97
 800bc8c:	0800bca3 	.word	0x0800bca3
 800bc90:	2301      	movs	r3, #1
 800bc92:	77fb      	strb	r3, [r7, #31]
 800bc94:	e151      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bc96:	2302      	movs	r3, #2
 800bc98:	77fb      	strb	r3, [r7, #31]
 800bc9a:	e14e      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	77fb      	strb	r3, [r7, #31]
 800bca0:	e14b      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bca2:	2308      	movs	r3, #8
 800bca4:	77fb      	strb	r3, [r7, #31]
 800bca6:	e148      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bca8:	2310      	movs	r3, #16
 800bcaa:	77fb      	strb	r3, [r7, #31]
 800bcac:	bf00      	nop
 800bcae:	e144      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a8d      	ldr	r2, [pc, #564]	; (800beec <UART_SetConfig+0x300>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d134      	bne.n	800bd24 <UART_SetConfig+0x138>
 800bcba:	4b8b      	ldr	r3, [pc, #556]	; (800bee8 <UART_SetConfig+0x2fc>)
 800bcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcc0:	f003 030c 	and.w	r3, r3, #12
 800bcc4:	2b0c      	cmp	r3, #12
 800bcc6:	d829      	bhi.n	800bd1c <UART_SetConfig+0x130>
 800bcc8:	a201      	add	r2, pc, #4	; (adr r2, 800bcd0 <UART_SetConfig+0xe4>)
 800bcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcce:	bf00      	nop
 800bcd0:	0800bd05 	.word	0x0800bd05
 800bcd4:	0800bd1d 	.word	0x0800bd1d
 800bcd8:	0800bd1d 	.word	0x0800bd1d
 800bcdc:	0800bd1d 	.word	0x0800bd1d
 800bce0:	0800bd11 	.word	0x0800bd11
 800bce4:	0800bd1d 	.word	0x0800bd1d
 800bce8:	0800bd1d 	.word	0x0800bd1d
 800bcec:	0800bd1d 	.word	0x0800bd1d
 800bcf0:	0800bd0b 	.word	0x0800bd0b
 800bcf4:	0800bd1d 	.word	0x0800bd1d
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd1d 	.word	0x0800bd1d
 800bd00:	0800bd17 	.word	0x0800bd17
 800bd04:	2300      	movs	r3, #0
 800bd06:	77fb      	strb	r3, [r7, #31]
 800bd08:	e117      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd0a:	2302      	movs	r3, #2
 800bd0c:	77fb      	strb	r3, [r7, #31]
 800bd0e:	e114      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd10:	2304      	movs	r3, #4
 800bd12:	77fb      	strb	r3, [r7, #31]
 800bd14:	e111      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd16:	2308      	movs	r3, #8
 800bd18:	77fb      	strb	r3, [r7, #31]
 800bd1a:	e10e      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd1c:	2310      	movs	r3, #16
 800bd1e:	77fb      	strb	r3, [r7, #31]
 800bd20:	bf00      	nop
 800bd22:	e10a      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a71      	ldr	r2, [pc, #452]	; (800bef0 <UART_SetConfig+0x304>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d120      	bne.n	800bd70 <UART_SetConfig+0x184>
 800bd2e:	4b6e      	ldr	r3, [pc, #440]	; (800bee8 <UART_SetConfig+0x2fc>)
 800bd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd38:	2b10      	cmp	r3, #16
 800bd3a:	d00f      	beq.n	800bd5c <UART_SetConfig+0x170>
 800bd3c:	2b10      	cmp	r3, #16
 800bd3e:	d802      	bhi.n	800bd46 <UART_SetConfig+0x15a>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d005      	beq.n	800bd50 <UART_SetConfig+0x164>
 800bd44:	e010      	b.n	800bd68 <UART_SetConfig+0x17c>
 800bd46:	2b20      	cmp	r3, #32
 800bd48:	d005      	beq.n	800bd56 <UART_SetConfig+0x16a>
 800bd4a:	2b30      	cmp	r3, #48	; 0x30
 800bd4c:	d009      	beq.n	800bd62 <UART_SetConfig+0x176>
 800bd4e:	e00b      	b.n	800bd68 <UART_SetConfig+0x17c>
 800bd50:	2300      	movs	r3, #0
 800bd52:	77fb      	strb	r3, [r7, #31]
 800bd54:	e0f1      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd56:	2302      	movs	r3, #2
 800bd58:	77fb      	strb	r3, [r7, #31]
 800bd5a:	e0ee      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd5c:	2304      	movs	r3, #4
 800bd5e:	77fb      	strb	r3, [r7, #31]
 800bd60:	e0eb      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd62:	2308      	movs	r3, #8
 800bd64:	77fb      	strb	r3, [r7, #31]
 800bd66:	e0e8      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd68:	2310      	movs	r3, #16
 800bd6a:	77fb      	strb	r3, [r7, #31]
 800bd6c:	bf00      	nop
 800bd6e:	e0e4      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a5f      	ldr	r2, [pc, #380]	; (800bef4 <UART_SetConfig+0x308>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d120      	bne.n	800bdbc <UART_SetConfig+0x1d0>
 800bd7a:	4b5b      	ldr	r3, [pc, #364]	; (800bee8 <UART_SetConfig+0x2fc>)
 800bd7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bd84:	2b40      	cmp	r3, #64	; 0x40
 800bd86:	d00f      	beq.n	800bda8 <UART_SetConfig+0x1bc>
 800bd88:	2b40      	cmp	r3, #64	; 0x40
 800bd8a:	d802      	bhi.n	800bd92 <UART_SetConfig+0x1a6>
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d005      	beq.n	800bd9c <UART_SetConfig+0x1b0>
 800bd90:	e010      	b.n	800bdb4 <UART_SetConfig+0x1c8>
 800bd92:	2b80      	cmp	r3, #128	; 0x80
 800bd94:	d005      	beq.n	800bda2 <UART_SetConfig+0x1b6>
 800bd96:	2bc0      	cmp	r3, #192	; 0xc0
 800bd98:	d009      	beq.n	800bdae <UART_SetConfig+0x1c2>
 800bd9a:	e00b      	b.n	800bdb4 <UART_SetConfig+0x1c8>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	77fb      	strb	r3, [r7, #31]
 800bda0:	e0cb      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bda2:	2302      	movs	r3, #2
 800bda4:	77fb      	strb	r3, [r7, #31]
 800bda6:	e0c8      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bda8:	2304      	movs	r3, #4
 800bdaa:	77fb      	strb	r3, [r7, #31]
 800bdac:	e0c5      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bdae:	2308      	movs	r3, #8
 800bdb0:	77fb      	strb	r3, [r7, #31]
 800bdb2:	e0c2      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	77fb      	strb	r3, [r7, #31]
 800bdb8:	bf00      	nop
 800bdba:	e0be      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a4d      	ldr	r2, [pc, #308]	; (800bef8 <UART_SetConfig+0x30c>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d124      	bne.n	800be10 <UART_SetConfig+0x224>
 800bdc6:	4b48      	ldr	r3, [pc, #288]	; (800bee8 <UART_SetConfig+0x2fc>)
 800bdc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdd4:	d012      	beq.n	800bdfc <UART_SetConfig+0x210>
 800bdd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdda:	d802      	bhi.n	800bde2 <UART_SetConfig+0x1f6>
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d007      	beq.n	800bdf0 <UART_SetConfig+0x204>
 800bde0:	e012      	b.n	800be08 <UART_SetConfig+0x21c>
 800bde2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bde6:	d006      	beq.n	800bdf6 <UART_SetConfig+0x20a>
 800bde8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdec:	d009      	beq.n	800be02 <UART_SetConfig+0x216>
 800bdee:	e00b      	b.n	800be08 <UART_SetConfig+0x21c>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	77fb      	strb	r3, [r7, #31]
 800bdf4:	e0a1      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	77fb      	strb	r3, [r7, #31]
 800bdfa:	e09e      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bdfc:	2304      	movs	r3, #4
 800bdfe:	77fb      	strb	r3, [r7, #31]
 800be00:	e09b      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be02:	2308      	movs	r3, #8
 800be04:	77fb      	strb	r3, [r7, #31]
 800be06:	e098      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be08:	2310      	movs	r3, #16
 800be0a:	77fb      	strb	r3, [r7, #31]
 800be0c:	bf00      	nop
 800be0e:	e094      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a39      	ldr	r2, [pc, #228]	; (800befc <UART_SetConfig+0x310>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d124      	bne.n	800be64 <UART_SetConfig+0x278>
 800be1a:	4b33      	ldr	r3, [pc, #204]	; (800bee8 <UART_SetConfig+0x2fc>)
 800be1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be28:	d012      	beq.n	800be50 <UART_SetConfig+0x264>
 800be2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be2e:	d802      	bhi.n	800be36 <UART_SetConfig+0x24a>
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <UART_SetConfig+0x258>
 800be34:	e012      	b.n	800be5c <UART_SetConfig+0x270>
 800be36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be3a:	d006      	beq.n	800be4a <UART_SetConfig+0x25e>
 800be3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be40:	d009      	beq.n	800be56 <UART_SetConfig+0x26a>
 800be42:	e00b      	b.n	800be5c <UART_SetConfig+0x270>
 800be44:	2301      	movs	r3, #1
 800be46:	77fb      	strb	r3, [r7, #31]
 800be48:	e077      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be4a:	2302      	movs	r3, #2
 800be4c:	77fb      	strb	r3, [r7, #31]
 800be4e:	e074      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be50:	2304      	movs	r3, #4
 800be52:	77fb      	strb	r3, [r7, #31]
 800be54:	e071      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be56:	2308      	movs	r3, #8
 800be58:	77fb      	strb	r3, [r7, #31]
 800be5a:	e06e      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be5c:	2310      	movs	r3, #16
 800be5e:	77fb      	strb	r3, [r7, #31]
 800be60:	bf00      	nop
 800be62:	e06a      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a25      	ldr	r2, [pc, #148]	; (800bf00 <UART_SetConfig+0x314>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d124      	bne.n	800beb8 <UART_SetConfig+0x2cc>
 800be6e:	4b1e      	ldr	r3, [pc, #120]	; (800bee8 <UART_SetConfig+0x2fc>)
 800be70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be74:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800be78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be7c:	d012      	beq.n	800bea4 <UART_SetConfig+0x2b8>
 800be7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be82:	d802      	bhi.n	800be8a <UART_SetConfig+0x29e>
 800be84:	2b00      	cmp	r3, #0
 800be86:	d007      	beq.n	800be98 <UART_SetConfig+0x2ac>
 800be88:	e012      	b.n	800beb0 <UART_SetConfig+0x2c4>
 800be8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be8e:	d006      	beq.n	800be9e <UART_SetConfig+0x2b2>
 800be90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800be94:	d009      	beq.n	800beaa <UART_SetConfig+0x2be>
 800be96:	e00b      	b.n	800beb0 <UART_SetConfig+0x2c4>
 800be98:	2300      	movs	r3, #0
 800be9a:	77fb      	strb	r3, [r7, #31]
 800be9c:	e04d      	b.n	800bf3a <UART_SetConfig+0x34e>
 800be9e:	2302      	movs	r3, #2
 800bea0:	77fb      	strb	r3, [r7, #31]
 800bea2:	e04a      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bea4:	2304      	movs	r3, #4
 800bea6:	77fb      	strb	r3, [r7, #31]
 800bea8:	e047      	b.n	800bf3a <UART_SetConfig+0x34e>
 800beaa:	2308      	movs	r3, #8
 800beac:	77fb      	strb	r3, [r7, #31]
 800beae:	e044      	b.n	800bf3a <UART_SetConfig+0x34e>
 800beb0:	2310      	movs	r3, #16
 800beb2:	77fb      	strb	r3, [r7, #31]
 800beb4:	bf00      	nop
 800beb6:	e040      	b.n	800bf3a <UART_SetConfig+0x34e>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a11      	ldr	r2, [pc, #68]	; (800bf04 <UART_SetConfig+0x318>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d139      	bne.n	800bf36 <UART_SetConfig+0x34a>
 800bec2:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <UART_SetConfig+0x2fc>)
 800bec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800becc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bed0:	d027      	beq.n	800bf22 <UART_SetConfig+0x336>
 800bed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bed6:	d817      	bhi.n	800bf08 <UART_SetConfig+0x31c>
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d01c      	beq.n	800bf16 <UART_SetConfig+0x32a>
 800bedc:	e027      	b.n	800bf2e <UART_SetConfig+0x342>
 800bede:	bf00      	nop
 800bee0:	efff69f3 	.word	0xefff69f3
 800bee4:	40011000 	.word	0x40011000
 800bee8:	40023800 	.word	0x40023800
 800beec:	40004400 	.word	0x40004400
 800bef0:	40004800 	.word	0x40004800
 800bef4:	40004c00 	.word	0x40004c00
 800bef8:	40005000 	.word	0x40005000
 800befc:	40011400 	.word	0x40011400
 800bf00:	40007800 	.word	0x40007800
 800bf04:	40007c00 	.word	0x40007c00
 800bf08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf0c:	d006      	beq.n	800bf1c <UART_SetConfig+0x330>
 800bf0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bf12:	d009      	beq.n	800bf28 <UART_SetConfig+0x33c>
 800bf14:	e00b      	b.n	800bf2e <UART_SetConfig+0x342>
 800bf16:	2300      	movs	r3, #0
 800bf18:	77fb      	strb	r3, [r7, #31]
 800bf1a:	e00e      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	77fb      	strb	r3, [r7, #31]
 800bf20:	e00b      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bf22:	2304      	movs	r3, #4
 800bf24:	77fb      	strb	r3, [r7, #31]
 800bf26:	e008      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bf28:	2308      	movs	r3, #8
 800bf2a:	77fb      	strb	r3, [r7, #31]
 800bf2c:	e005      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bf2e:	2310      	movs	r3, #16
 800bf30:	77fb      	strb	r3, [r7, #31]
 800bf32:	bf00      	nop
 800bf34:	e001      	b.n	800bf3a <UART_SetConfig+0x34e>
 800bf36:	2310      	movs	r3, #16
 800bf38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf42:	d17f      	bne.n	800c044 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800bf44:	7ffb      	ldrb	r3, [r7, #31]
 800bf46:	2b08      	cmp	r3, #8
 800bf48:	d85c      	bhi.n	800c004 <UART_SetConfig+0x418>
 800bf4a:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <UART_SetConfig+0x364>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bf75 	.word	0x0800bf75
 800bf54:	0800bf95 	.word	0x0800bf95
 800bf58:	0800bfb5 	.word	0x0800bfb5
 800bf5c:	0800c005 	.word	0x0800c005
 800bf60:	0800bfcd 	.word	0x0800bfcd
 800bf64:	0800c005 	.word	0x0800c005
 800bf68:	0800c005 	.word	0x0800c005
 800bf6c:	0800c005 	.word	0x0800c005
 800bf70:	0800bfed 	.word	0x0800bfed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf74:	f7ff f99e 	bl	800b2b4 <HAL_RCC_GetPCLK1Freq>
 800bf78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	005a      	lsls	r2, r3, #1
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	085b      	lsrs	r3, r3, #1
 800bf84:	441a      	add	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	61bb      	str	r3, [r7, #24]
        break;
 800bf92:	e03a      	b.n	800c00a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf94:	f7ff f9a2 	bl	800b2dc <HAL_RCC_GetPCLK2Freq>
 800bf98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	005a      	lsls	r2, r3, #1
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	085b      	lsrs	r3, r3, #1
 800bfa4:	441a      	add	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	61bb      	str	r3, [r7, #24]
        break;
 800bfb2:	e02a      	b.n	800c00a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	085a      	lsrs	r2, r3, #1
 800bfba:	4b5f      	ldr	r3, [pc, #380]	; (800c138 <UART_SetConfig+0x54c>)
 800bfbc:	4413      	add	r3, r2
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	6852      	ldr	r2, [r2, #4]
 800bfc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	61bb      	str	r3, [r7, #24]
        break;
 800bfca:	e01e      	b.n	800c00a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfcc:	f7ff f88e 	bl	800b0ec <HAL_RCC_GetSysClockFreq>
 800bfd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	005a      	lsls	r2, r3, #1
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	085b      	lsrs	r3, r3, #1
 800bfdc:	441a      	add	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	61bb      	str	r3, [r7, #24]
        break;
 800bfea:	e00e      	b.n	800c00a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	085b      	lsrs	r3, r3, #1
 800bff2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bffe:	b29b      	uxth	r3, r3
 800c000:	61bb      	str	r3, [r7, #24]
        break;
 800c002:	e002      	b.n	800c00a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	75fb      	strb	r3, [r7, #23]
        break;
 800c008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2b0f      	cmp	r3, #15
 800c00e:	d916      	bls.n	800c03e <UART_SetConfig+0x452>
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c016:	d212      	bcs.n	800c03e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	f023 030f 	bic.w	r3, r3, #15
 800c020:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	085b      	lsrs	r3, r3, #1
 800c026:	b29b      	uxth	r3, r3
 800c028:	f003 0307 	and.w	r3, r3, #7
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	897b      	ldrh	r3, [r7, #10]
 800c030:	4313      	orrs	r3, r2
 800c032:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	897a      	ldrh	r2, [r7, #10]
 800c03a:	60da      	str	r2, [r3, #12]
 800c03c:	e070      	b.n	800c120 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c03e:	2301      	movs	r3, #1
 800c040:	75fb      	strb	r3, [r7, #23]
 800c042:	e06d      	b.n	800c120 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800c044:	7ffb      	ldrb	r3, [r7, #31]
 800c046:	2b08      	cmp	r3, #8
 800c048:	d859      	bhi.n	800c0fe <UART_SetConfig+0x512>
 800c04a:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <UART_SetConfig+0x464>)
 800c04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c050:	0800c075 	.word	0x0800c075
 800c054:	0800c093 	.word	0x0800c093
 800c058:	0800c0b1 	.word	0x0800c0b1
 800c05c:	0800c0ff 	.word	0x0800c0ff
 800c060:	0800c0c9 	.word	0x0800c0c9
 800c064:	0800c0ff 	.word	0x0800c0ff
 800c068:	0800c0ff 	.word	0x0800c0ff
 800c06c:	0800c0ff 	.word	0x0800c0ff
 800c070:	0800c0e7 	.word	0x0800c0e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c074:	f7ff f91e 	bl	800b2b4 <HAL_RCC_GetPCLK1Freq>
 800c078:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	085a      	lsrs	r2, r3, #1
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	441a      	add	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	fbb2 f3f3 	udiv	r3, r2, r3
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	61bb      	str	r3, [r7, #24]
        break;
 800c090:	e038      	b.n	800c104 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c092:	f7ff f923 	bl	800b2dc <HAL_RCC_GetPCLK2Freq>
 800c096:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	085a      	lsrs	r2, r3, #1
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	441a      	add	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	61bb      	str	r3, [r7, #24]
        break;
 800c0ae:	e029      	b.n	800c104 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	085a      	lsrs	r2, r3, #1
 800c0b6:	4b21      	ldr	r3, [pc, #132]	; (800c13c <UART_SetConfig+0x550>)
 800c0b8:	4413      	add	r3, r2
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	6852      	ldr	r2, [r2, #4]
 800c0be:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	61bb      	str	r3, [r7, #24]
        break;
 800c0c6:	e01d      	b.n	800c104 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0c8:	f7ff f810 	bl	800b0ec <HAL_RCC_GetSysClockFreq>
 800c0cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	085a      	lsrs	r2, r3, #1
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	441a      	add	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	61bb      	str	r3, [r7, #24]
        break;
 800c0e4:	e00e      	b.n	800c104 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	085b      	lsrs	r3, r3, #1
 800c0ec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	61bb      	str	r3, [r7, #24]
        break;
 800c0fc:	e002      	b.n	800c104 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	75fb      	strb	r3, [r7, #23]
        break;
 800c102:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	2b0f      	cmp	r3, #15
 800c108:	d908      	bls.n	800c11c <UART_SetConfig+0x530>
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c110:	d204      	bcs.n	800c11c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	69ba      	ldr	r2, [r7, #24]
 800c118:	60da      	str	r2, [r3, #12]
 800c11a:	e001      	b.n	800c120 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
 800c11e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3720      	adds	r7, #32
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	01e84800 	.word	0x01e84800
 800c13c:	00f42400 	.word	0x00f42400

0800c140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00a      	beq.n	800c16a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	430a      	orrs	r2, r1
 800c168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16e:	f003 0302 	and.w	r3, r3, #2
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00a      	beq.n	800c18c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	430a      	orrs	r2, r1
 800c18a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c190:	f003 0304 	and.w	r3, r3, #4
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00a      	beq.n	800c1ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	430a      	orrs	r2, r1
 800c1ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b2:	f003 0308 	and.w	r3, r3, #8
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00a      	beq.n	800c1d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d4:	f003 0310 	and.w	r3, r3, #16
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00a      	beq.n	800c1f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	430a      	orrs	r2, r1
 800c1f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f6:	f003 0320 	and.w	r3, r3, #32
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	430a      	orrs	r2, r1
 800c212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d01a      	beq.n	800c256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c23e:	d10a      	bne.n	800c256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	430a      	orrs	r2, r1
 800c254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00a      	beq.n	800c278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	430a      	orrs	r2, r1
 800c276:	605a      	str	r2, [r3, #4]
  }
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af02      	add	r7, sp, #8
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c292:	f7fc fed9 	bl	8009048 <HAL_GetTick>
 800c296:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0308 	and.w	r3, r3, #8
 800c2a2:	2b08      	cmp	r3, #8
 800c2a4:	d10e      	bne.n	800c2c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f82a 	bl	800c30e <UART_WaitOnFlagUntilTimeout>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e020      	b.n	800c306 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0304 	and.w	r3, r3, #4
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d10e      	bne.n	800c2f0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f814 	bl	800c30e <UART_WaitOnFlagUntilTimeout>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e00a      	b.n	800c306 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2220      	movs	r2, #32
 800c2f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2220      	movs	r2, #32
 800c2fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b084      	sub	sp, #16
 800c312:	af00      	add	r7, sp, #0
 800c314:	60f8      	str	r0, [r7, #12]
 800c316:	60b9      	str	r1, [r7, #8]
 800c318:	603b      	str	r3, [r7, #0]
 800c31a:	4613      	mov	r3, r2
 800c31c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c31e:	e05d      	b.n	800c3dc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c326:	d059      	beq.n	800c3dc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c328:	f7fc fe8e 	bl	8009048 <HAL_GetTick>
 800c32c:	4602      	mov	r2, r0
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	69ba      	ldr	r2, [r7, #24]
 800c334:	429a      	cmp	r2, r3
 800c336:	d302      	bcc.n	800c33e <UART_WaitOnFlagUntilTimeout+0x30>
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d11b      	bne.n	800c376 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c34c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	689a      	ldr	r2, [r3, #8]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f022 0201 	bic.w	r2, r2, #1
 800c35c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2220      	movs	r2, #32
 800c362:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2220      	movs	r2, #32
 800c368:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c372:	2303      	movs	r3, #3
 800c374:	e042      	b.n	800c3fc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 0304 	and.w	r3, r3, #4
 800c380:	2b00      	cmp	r3, #0
 800c382:	d02b      	beq.n	800c3dc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c38e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c392:	d123      	bne.n	800c3dc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c39c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c3ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	689a      	ldr	r2, [r3, #8]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f022 0201 	bic.w	r2, r2, #1
 800c3bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2220      	movs	r2, #32
 800c3c2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e00f      	b.n	800c3fc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	69da      	ldr	r2, [r3, #28]
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	4013      	ands	r3, r2
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	bf0c      	ite	eq
 800c3ec:	2301      	moveq	r3, #1
 800c3ee:	2300      	movne	r3, #0
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	79fb      	ldrb	r3, [r7, #7]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d092      	beq.n	800c320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c404:	b084      	sub	sp, #16
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	f107 001c 	add.w	r0, r7, #28
 800c412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d120      	bne.n	800c45e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c420:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	4b20      	ldr	r3, [pc, #128]	; (800c4b0 <USB_CoreInit+0xac>)
 800c42e:	4013      	ands	r3, r2
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c442:	2b01      	cmp	r3, #1
 800c444:	d105      	bne.n	800c452 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 fa52 	bl	800c8fc <USB_CoreReset>
 800c458:	4603      	mov	r3, r0
 800c45a:	73fb      	strb	r3, [r7, #15]
 800c45c:	e010      	b.n	800c480 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fa46 	bl	800c8fc <USB_CoreReset>
 800c470:	4603      	mov	r3, r0
 800c472:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c478:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c482:	2b01      	cmp	r3, #1
 800c484:	d10b      	bne.n	800c49e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f043 0206 	orr.w	r2, r3, #6
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	f043 0220 	orr.w	r2, r3, #32
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4aa:	b004      	add	sp, #16
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	ffbdffbf 	.word	0xffbdffbf

0800c4b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	f023 0201 	bic.w	r2, r3, #1
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c4ee:	78fb      	ldrb	r3, [r7, #3]
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d106      	bne.n	800c502 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	60da      	str	r2, [r3, #12]
 800c500:	e00b      	b.n	800c51a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c502:	78fb      	ldrb	r3, [r7, #3]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	60da      	str	r2, [r3, #12]
 800c514:	e001      	b.n	800c51a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	e003      	b.n	800c522 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c51a:	2032      	movs	r0, #50	; 0x32
 800c51c:	f7fc fda0 	bl	8009060 <HAL_Delay>

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c52c:	b084      	sub	sp, #16
 800c52e:	b580      	push	{r7, lr}
 800c530:	b086      	sub	sp, #24
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c53a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c53e:	2300      	movs	r3, #0
 800c540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c546:	2300      	movs	r3, #0
 800c548:	613b      	str	r3, [r7, #16]
 800c54a:	e009      	b.n	800c560 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3340      	adds	r3, #64	; 0x40
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4413      	add	r3, r2
 800c556:	2200      	movs	r2, #0
 800c558:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	3301      	adds	r3, #1
 800c55e:	613b      	str	r3, [r7, #16]
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	2b0e      	cmp	r3, #14
 800c564:	d9f2      	bls.n	800c54c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d11c      	bne.n	800c5a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c57a:	f043 0302 	orr.w	r3, r3, #2
 800c57e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c584:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	601a      	str	r2, [r3, #0]
 800c5a4:	e005      	b.n	800c5b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	680b      	ldr	r3, [r1, #0]
 800c5d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d10c      	bne.n	800c5f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d104      	bne.n	800c5e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c5de:	2100      	movs	r1, #0
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f959 	bl	800c898 <USB_SetDevSpeed>
 800c5e6:	e018      	b.n	800c61a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c5e8:	2101      	movs	r1, #1
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f954 	bl	800c898 <USB_SetDevSpeed>
 800c5f0:	e013      	b.n	800c61a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f4:	2b03      	cmp	r3, #3
 800c5f6:	d10c      	bne.n	800c612 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d104      	bne.n	800c608 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c5fe:	2100      	movs	r1, #0
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 f949 	bl	800c898 <USB_SetDevSpeed>
 800c606:	e008      	b.n	800c61a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c608:	2101      	movs	r1, #1
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f944 	bl	800c898 <USB_SetDevSpeed>
 800c610:	e003      	b.n	800c61a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c612:	2103      	movs	r1, #3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f93f 	bl	800c898 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c61a:	2110      	movs	r1, #16
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 f8f3 	bl	800c808 <USB_FlushTxFifo>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 f911 	bl	800c854 <USB_FlushRxFifo>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c642:	461a      	mov	r2, r3
 800c644:	2300      	movs	r3, #0
 800c646:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c64e:	461a      	mov	r2, r3
 800c650:	2300      	movs	r3, #0
 800c652:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c65a:	461a      	mov	r2, r3
 800c65c:	2300      	movs	r3, #0
 800c65e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c660:	2300      	movs	r3, #0
 800c662:	613b      	str	r3, [r7, #16]
 800c664:	e043      	b.n	800c6ee <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c67c:	d118      	bne.n	800c6b0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c690:	461a      	mov	r2, r3
 800c692:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	e013      	b.n	800c6c2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	015a      	lsls	r2, r3, #5
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	e008      	b.n	800c6c2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6bc:	461a      	mov	r2, r3
 800c6be:	2300      	movs	r3, #0
 800c6c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	015a      	lsls	r2, r3, #5
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	4413      	add	r3, r2
 800c6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c6e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	613b      	str	r3, [r7, #16]
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d3b7      	bcc.n	800c666 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	613b      	str	r3, [r7, #16]
 800c6fa:	e043      	b.n	800c784 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	015a      	lsls	r2, r3, #5
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4413      	add	r3, r2
 800c704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c70e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c712:	d118      	bne.n	800c746 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10a      	bne.n	800c730 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	015a      	lsls	r2, r3, #5
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	4413      	add	r3, r2
 800c722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c726:	461a      	mov	r2, r3
 800c728:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c72c:	6013      	str	r3, [r2, #0]
 800c72e:	e013      	b.n	800c758 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	015a      	lsls	r2, r3, #5
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4413      	add	r3, r2
 800c738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c73c:	461a      	mov	r2, r3
 800c73e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c742:	6013      	str	r3, [r2, #0]
 800c744:	e008      	b.n	800c758 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	015a      	lsls	r2, r3, #5
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	4413      	add	r3, r2
 800c74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c752:	461a      	mov	r2, r3
 800c754:	2300      	movs	r3, #0
 800c756:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c764:	461a      	mov	r2, r3
 800c766:	2300      	movs	r3, #0
 800c768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	4413      	add	r3, r2
 800c772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c776:	461a      	mov	r2, r3
 800c778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c77c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	3301      	adds	r3, #1
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d3b7      	bcc.n	800c6fc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c79a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c79e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c7ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d105      	bne.n	800c7c0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	f043 0210 	orr.w	r2, r3, #16
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	699a      	ldr	r2, [r3, #24]
 800c7c4:	4b0e      	ldr	r3, [pc, #56]	; (800c800 <USB_DevInit+0x2d4>)
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d005      	beq.n	800c7de <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	f043 0208 	orr.w	r2, r3, #8
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c7de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d105      	bne.n	800c7f0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	699a      	ldr	r2, [r3, #24]
 800c7e8:	4b06      	ldr	r3, [pc, #24]	; (800c804 <USB_DevInit+0x2d8>)
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3718      	adds	r7, #24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7fc:	b004      	add	sp, #16
 800c7fe:	4770      	bx	lr
 800c800:	803c3800 	.word	0x803c3800
 800c804:	40000004 	.word	0x40000004

0800c808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c812:	2300      	movs	r3, #0
 800c814:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	019b      	lsls	r3, r3, #6
 800c81a:	f043 0220 	orr.w	r2, r3, #32
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	4a09      	ldr	r2, [pc, #36]	; (800c850 <USB_FlushTxFifo+0x48>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d901      	bls.n	800c834 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c830:	2303      	movs	r3, #3
 800c832:	e006      	b.n	800c842 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	f003 0320 	and.w	r3, r3, #32
 800c83c:	2b20      	cmp	r3, #32
 800c83e:	d0f0      	beq.n	800c822 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	00030d40 	.word	0x00030d40

0800c854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2210      	movs	r2, #16
 800c864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3301      	adds	r3, #1
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	4a09      	ldr	r2, [pc, #36]	; (800c894 <USB_FlushRxFifo+0x40>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d901      	bls.n	800c878 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c874:	2303      	movs	r3, #3
 800c876:	e006      	b.n	800c886 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	f003 0310 	and.w	r3, r3, #16
 800c880:	2b10      	cmp	r3, #16
 800c882:	d0f0      	beq.n	800c866 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	00030d40 	.word	0x00030d40

0800c898 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	78fb      	ldrb	r3, [r7, #3]
 800c8b2:	68f9      	ldr	r1, [r7, #12]
 800c8b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8e4:	f043 0302 	orr.w	r3, r3, #2
 800c8e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c8ea:	2003      	movs	r0, #3
 800c8ec:	f7fc fbb8 	bl	8009060 <HAL_Delay>

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
	...

0800c8fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c904:	2300      	movs	r3, #0
 800c906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	3301      	adds	r3, #1
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	4a13      	ldr	r2, [pc, #76]	; (800c960 <USB_CoreReset+0x64>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d901      	bls.n	800c91a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c916:	2303      	movs	r3, #3
 800c918:	e01b      	b.n	800c952 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	daf2      	bge.n	800c908 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	f043 0201 	orr.w	r2, r3, #1
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	3301      	adds	r3, #1
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4a09      	ldr	r2, [pc, #36]	; (800c960 <USB_CoreReset+0x64>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d901      	bls.n	800c944 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c940:	2303      	movs	r3, #3
 800c942:	e006      	b.n	800c952 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	691b      	ldr	r3, [r3, #16]
 800c948:	f003 0301 	and.w	r3, r3, #1
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d0f0      	beq.n	800c932 <USB_CoreReset+0x36>

  return HAL_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	00030d40 	.word	0x00030d40

0800c964 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c96a:	4b8c      	ldr	r3, [pc, #560]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c96c:	22c0      	movs	r2, #192	; 0xc0
 800c96e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800c970:	4b8a      	ldr	r3, [pc, #552]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c972:	22a8      	movs	r2, #168	; 0xa8
 800c974:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800c976:	4b89      	ldr	r3, [pc, #548]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c978:	2201      	movs	r2, #1
 800c97a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 70;
 800c97c:	4b87      	ldr	r3, [pc, #540]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c97e:	2246      	movs	r2, #70	; 0x46
 800c980:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c982:	4b87      	ldr	r3, [pc, #540]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800c984:	22ff      	movs	r2, #255	; 0xff
 800c986:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c988:	4b85      	ldr	r3, [pc, #532]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800c98a:	22ff      	movs	r2, #255	; 0xff
 800c98c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c98e:	4b84      	ldr	r3, [pc, #528]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800c990:	22ff      	movs	r2, #255	; 0xff
 800c992:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c994:	4b82      	ldr	r3, [pc, #520]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800c996:	2200      	movs	r2, #0
 800c998:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800c99a:	4b82      	ldr	r3, [pc, #520]	; (800cba4 <MX_LWIP_Init+0x240>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800c9a0:	4b80      	ldr	r3, [pc, #512]	; (800cba4 <MX_LWIP_Init+0x240>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800c9a6:	4b7f      	ldr	r3, [pc, #508]	; (800cba4 <MX_LWIP_Init+0x240>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800c9ac:	4b7d      	ldr	r3, [pc, #500]	; (800cba4 <MX_LWIP_Init+0x240>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	f003 fc8d 	bl	80102d4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c9ba:	4b78      	ldr	r3, [pc, #480]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	061a      	lsls	r2, r3, #24
 800c9c0:	4b76      	ldr	r3, [pc, #472]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9c2:	785b      	ldrb	r3, [r3, #1]
 800c9c4:	041b      	lsls	r3, r3, #16
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	4b74      	ldr	r3, [pc, #464]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9ca:	789b      	ldrb	r3, [r3, #2]
 800c9cc:	021b      	lsls	r3, r3, #8
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	4a72      	ldr	r2, [pc, #456]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9d2:	78d2      	ldrb	r2, [r2, #3]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	061a      	lsls	r2, r3, #24
 800c9d8:	4b70      	ldr	r3, [pc, #448]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	0619      	lsls	r1, r3, #24
 800c9de:	4b6f      	ldr	r3, [pc, #444]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9e0:	785b      	ldrb	r3, [r3, #1]
 800c9e2:	041b      	lsls	r3, r3, #16
 800c9e4:	4319      	orrs	r1, r3
 800c9e6:	4b6d      	ldr	r3, [pc, #436]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9e8:	789b      	ldrb	r3, [r3, #2]
 800c9ea:	021b      	lsls	r3, r3, #8
 800c9ec:	430b      	orrs	r3, r1
 800c9ee:	496b      	ldr	r1, [pc, #428]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9f0:	78c9      	ldrb	r1, [r1, #3]
 800c9f2:	430b      	orrs	r3, r1
 800c9f4:	021b      	lsls	r3, r3, #8
 800c9f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	4b67      	ldr	r3, [pc, #412]	; (800cb9c <MX_LWIP_Init+0x238>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	0619      	lsls	r1, r3, #24
 800ca02:	4b66      	ldr	r3, [pc, #408]	; (800cb9c <MX_LWIP_Init+0x238>)
 800ca04:	785b      	ldrb	r3, [r3, #1]
 800ca06:	041b      	lsls	r3, r3, #16
 800ca08:	4319      	orrs	r1, r3
 800ca0a:	4b64      	ldr	r3, [pc, #400]	; (800cb9c <MX_LWIP_Init+0x238>)
 800ca0c:	789b      	ldrb	r3, [r3, #2]
 800ca0e:	021b      	lsls	r3, r3, #8
 800ca10:	430b      	orrs	r3, r1
 800ca12:	4962      	ldr	r1, [pc, #392]	; (800cb9c <MX_LWIP_Init+0x238>)
 800ca14:	78c9      	ldrb	r1, [r1, #3]
 800ca16:	430b      	orrs	r3, r1
 800ca18:	0a1b      	lsrs	r3, r3, #8
 800ca1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ca1e:	431a      	orrs	r2, r3
 800ca20:	4b5e      	ldr	r3, [pc, #376]	; (800cb9c <MX_LWIP_Init+0x238>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	0619      	lsls	r1, r3, #24
 800ca26:	4b5d      	ldr	r3, [pc, #372]	; (800cb9c <MX_LWIP_Init+0x238>)
 800ca28:	785b      	ldrb	r3, [r3, #1]
 800ca2a:	041b      	lsls	r3, r3, #16
 800ca2c:	4319      	orrs	r1, r3
 800ca2e:	4b5b      	ldr	r3, [pc, #364]	; (800cb9c <MX_LWIP_Init+0x238>)
 800ca30:	789b      	ldrb	r3, [r3, #2]
 800ca32:	021b      	lsls	r3, r3, #8
 800ca34:	430b      	orrs	r3, r1
 800ca36:	4959      	ldr	r1, [pc, #356]	; (800cb9c <MX_LWIP_Init+0x238>)
 800ca38:	78c9      	ldrb	r1, [r1, #3]
 800ca3a:	430b      	orrs	r3, r1
 800ca3c:	0e1b      	lsrs	r3, r3, #24
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	4a59      	ldr	r2, [pc, #356]	; (800cba8 <MX_LWIP_Init+0x244>)
 800ca42:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ca44:	4b56      	ldr	r3, [pc, #344]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	061a      	lsls	r2, r3, #24
 800ca4a:	4b55      	ldr	r3, [pc, #340]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca4c:	785b      	ldrb	r3, [r3, #1]
 800ca4e:	041b      	lsls	r3, r3, #16
 800ca50:	431a      	orrs	r2, r3
 800ca52:	4b53      	ldr	r3, [pc, #332]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca54:	789b      	ldrb	r3, [r3, #2]
 800ca56:	021b      	lsls	r3, r3, #8
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	4a51      	ldr	r2, [pc, #324]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca5c:	78d2      	ldrb	r2, [r2, #3]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	061a      	lsls	r2, r3, #24
 800ca62:	4b4f      	ldr	r3, [pc, #316]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	0619      	lsls	r1, r3, #24
 800ca68:	4b4d      	ldr	r3, [pc, #308]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca6a:	785b      	ldrb	r3, [r3, #1]
 800ca6c:	041b      	lsls	r3, r3, #16
 800ca6e:	4319      	orrs	r1, r3
 800ca70:	4b4b      	ldr	r3, [pc, #300]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca72:	789b      	ldrb	r3, [r3, #2]
 800ca74:	021b      	lsls	r3, r3, #8
 800ca76:	430b      	orrs	r3, r1
 800ca78:	4949      	ldr	r1, [pc, #292]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca7a:	78c9      	ldrb	r1, [r1, #3]
 800ca7c:	430b      	orrs	r3, r1
 800ca7e:	021b      	lsls	r3, r3, #8
 800ca80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca84:	431a      	orrs	r2, r3
 800ca86:	4b46      	ldr	r3, [pc, #280]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	0619      	lsls	r1, r3, #24
 800ca8c:	4b44      	ldr	r3, [pc, #272]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca8e:	785b      	ldrb	r3, [r3, #1]
 800ca90:	041b      	lsls	r3, r3, #16
 800ca92:	4319      	orrs	r1, r3
 800ca94:	4b42      	ldr	r3, [pc, #264]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca96:	789b      	ldrb	r3, [r3, #2]
 800ca98:	021b      	lsls	r3, r3, #8
 800ca9a:	430b      	orrs	r3, r1
 800ca9c:	4940      	ldr	r1, [pc, #256]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800ca9e:	78c9      	ldrb	r1, [r1, #3]
 800caa0:	430b      	orrs	r3, r1
 800caa2:	0a1b      	lsrs	r3, r3, #8
 800caa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800caa8:	431a      	orrs	r2, r3
 800caaa:	4b3d      	ldr	r3, [pc, #244]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	0619      	lsls	r1, r3, #24
 800cab0:	4b3b      	ldr	r3, [pc, #236]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800cab2:	785b      	ldrb	r3, [r3, #1]
 800cab4:	041b      	lsls	r3, r3, #16
 800cab6:	4319      	orrs	r1, r3
 800cab8:	4b39      	ldr	r3, [pc, #228]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800caba:	789b      	ldrb	r3, [r3, #2]
 800cabc:	021b      	lsls	r3, r3, #8
 800cabe:	430b      	orrs	r3, r1
 800cac0:	4937      	ldr	r1, [pc, #220]	; (800cba0 <MX_LWIP_Init+0x23c>)
 800cac2:	78c9      	ldrb	r1, [r1, #3]
 800cac4:	430b      	orrs	r3, r1
 800cac6:	0e1b      	lsrs	r3, r3, #24
 800cac8:	4313      	orrs	r3, r2
 800caca:	4a38      	ldr	r2, [pc, #224]	; (800cbac <MX_LWIP_Init+0x248>)
 800cacc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800cace:	4b35      	ldr	r3, [pc, #212]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	061a      	lsls	r2, r3, #24
 800cad4:	4b33      	ldr	r3, [pc, #204]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cad6:	785b      	ldrb	r3, [r3, #1]
 800cad8:	041b      	lsls	r3, r3, #16
 800cada:	431a      	orrs	r2, r3
 800cadc:	4b31      	ldr	r3, [pc, #196]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cade:	789b      	ldrb	r3, [r3, #2]
 800cae0:	021b      	lsls	r3, r3, #8
 800cae2:	4313      	orrs	r3, r2
 800cae4:	4a2f      	ldr	r2, [pc, #188]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cae6:	78d2      	ldrb	r2, [r2, #3]
 800cae8:	4313      	orrs	r3, r2
 800caea:	061a      	lsls	r2, r3, #24
 800caec:	4b2d      	ldr	r3, [pc, #180]	; (800cba4 <MX_LWIP_Init+0x240>)
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	0619      	lsls	r1, r3, #24
 800caf2:	4b2c      	ldr	r3, [pc, #176]	; (800cba4 <MX_LWIP_Init+0x240>)
 800caf4:	785b      	ldrb	r3, [r3, #1]
 800caf6:	041b      	lsls	r3, r3, #16
 800caf8:	4319      	orrs	r1, r3
 800cafa:	4b2a      	ldr	r3, [pc, #168]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cafc:	789b      	ldrb	r3, [r3, #2]
 800cafe:	021b      	lsls	r3, r3, #8
 800cb00:	430b      	orrs	r3, r1
 800cb02:	4928      	ldr	r1, [pc, #160]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb04:	78c9      	ldrb	r1, [r1, #3]
 800cb06:	430b      	orrs	r3, r1
 800cb08:	021b      	lsls	r3, r3, #8
 800cb0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb0e:	431a      	orrs	r2, r3
 800cb10:	4b24      	ldr	r3, [pc, #144]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	0619      	lsls	r1, r3, #24
 800cb16:	4b23      	ldr	r3, [pc, #140]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb18:	785b      	ldrb	r3, [r3, #1]
 800cb1a:	041b      	lsls	r3, r3, #16
 800cb1c:	4319      	orrs	r1, r3
 800cb1e:	4b21      	ldr	r3, [pc, #132]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb20:	789b      	ldrb	r3, [r3, #2]
 800cb22:	021b      	lsls	r3, r3, #8
 800cb24:	430b      	orrs	r3, r1
 800cb26:	491f      	ldr	r1, [pc, #124]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb28:	78c9      	ldrb	r1, [r1, #3]
 800cb2a:	430b      	orrs	r3, r1
 800cb2c:	0a1b      	lsrs	r3, r3, #8
 800cb2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cb32:	431a      	orrs	r2, r3
 800cb34:	4b1b      	ldr	r3, [pc, #108]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	0619      	lsls	r1, r3, #24
 800cb3a:	4b1a      	ldr	r3, [pc, #104]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb3c:	785b      	ldrb	r3, [r3, #1]
 800cb3e:	041b      	lsls	r3, r3, #16
 800cb40:	4319      	orrs	r1, r3
 800cb42:	4b18      	ldr	r3, [pc, #96]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb44:	789b      	ldrb	r3, [r3, #2]
 800cb46:	021b      	lsls	r3, r3, #8
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	4916      	ldr	r1, [pc, #88]	; (800cba4 <MX_LWIP_Init+0x240>)
 800cb4c:	78c9      	ldrb	r1, [r1, #3]
 800cb4e:	430b      	orrs	r3, r1
 800cb50:	0e1b      	lsrs	r3, r3, #24
 800cb52:	4313      	orrs	r3, r2
 800cb54:	4a16      	ldr	r2, [pc, #88]	; (800cbb0 <MX_LWIP_Init+0x24c>)
 800cb56:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800cb58:	4b16      	ldr	r3, [pc, #88]	; (800cbb4 <MX_LWIP_Init+0x250>)
 800cb5a:	9302      	str	r3, [sp, #8]
 800cb5c:	4b16      	ldr	r3, [pc, #88]	; (800cbb8 <MX_LWIP_Init+0x254>)
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	2300      	movs	r3, #0
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	4b12      	ldr	r3, [pc, #72]	; (800cbb0 <MX_LWIP_Init+0x24c>)
 800cb66:	4a11      	ldr	r2, [pc, #68]	; (800cbac <MX_LWIP_Init+0x248>)
 800cb68:	490f      	ldr	r1, [pc, #60]	; (800cba8 <MX_LWIP_Init+0x244>)
 800cb6a:	4814      	ldr	r0, [pc, #80]	; (800cbbc <MX_LWIP_Init+0x258>)
 800cb6c:	f004 fc02 	bl	8011374 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800cb70:	4812      	ldr	r0, [pc, #72]	; (800cbbc <MX_LWIP_Init+0x258>)
 800cb72:	f004 fdaf 	bl	80116d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800cb76:	4b11      	ldr	r3, [pc, #68]	; (800cbbc <MX_LWIP_Init+0x258>)
 800cb78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cb7c:	089b      	lsrs	r3, r3, #2
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d003      	beq.n	800cb90 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800cb88:	480c      	ldr	r0, [pc, #48]	; (800cbbc <MX_LWIP_Init+0x258>)
 800cb8a:	f004 fdb3 	bl	80116f4 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800cb8e:	e002      	b.n	800cb96 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800cb90:	480a      	ldr	r0, [pc, #40]	; (800cbbc <MX_LWIP_Init+0x258>)
 800cb92:	f004 fe1b 	bl	80117cc <netif_set_down>
}
 800cb96:	bf00      	nop
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	20004b70 	.word	0x20004b70
 800cba0:	20004b6c 	.word	0x20004b6c
 800cba4:	20004b34 	.word	0x20004b34
 800cba8:	20004b68 	.word	0x20004b68
 800cbac:	20004b74 	.word	0x20004b74
 800cbb0:	20004b78 	.word	0x20004b78
 800cbb4:	08010211 	.word	0x08010211
 800cbb8:	0800d205 	.word	0x0800d205
 800cbbc:	20004b38 	.word	0x20004b38

0800cbc0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08e      	sub	sp, #56	; 0x38
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbcc:	2200      	movs	r2, #0
 800cbce:	601a      	str	r2, [r3, #0]
 800cbd0:	605a      	str	r2, [r3, #4]
 800cbd2:	609a      	str	r2, [r3, #8]
 800cbd4:	60da      	str	r2, [r3, #12]
 800cbd6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a52      	ldr	r2, [pc, #328]	; (800cd28 <HAL_ETH_MspInit+0x168>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	f040 809e 	bne.w	800cd20 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800cbe4:	4b51      	ldr	r3, [pc, #324]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cbe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbe8:	4a50      	ldr	r2, [pc, #320]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cbea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cbee:	6313      	str	r3, [r2, #48]	; 0x30
 800cbf0:	4b4e      	ldr	r3, [pc, #312]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbf8:	623b      	str	r3, [r7, #32]
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	4b4b      	ldr	r3, [pc, #300]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc00:	4a4a      	ldr	r2, [pc, #296]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cc06:	6313      	str	r3, [r2, #48]	; 0x30
 800cc08:	4b48      	ldr	r3, [pc, #288]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	4b45      	ldr	r3, [pc, #276]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc18:	4a44      	ldr	r2, [pc, #272]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc1e:	6313      	str	r3, [r2, #48]	; 0x30
 800cc20:	4b42      	ldr	r3, [pc, #264]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc28:	61bb      	str	r3, [r7, #24]
 800cc2a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc2c:	4b3f      	ldr	r3, [pc, #252]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc30:	4a3e      	ldr	r2, [pc, #248]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc32:	f043 0304 	orr.w	r3, r3, #4
 800cc36:	6313      	str	r3, [r2, #48]	; 0x30
 800cc38:	4b3c      	ldr	r3, [pc, #240]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc44:	4b39      	ldr	r3, [pc, #228]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc48:	4a38      	ldr	r2, [pc, #224]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc4a:	f043 0301 	orr.w	r3, r3, #1
 800cc4e:	6313      	str	r3, [r2, #48]	; 0x30
 800cc50:	4b36      	ldr	r3, [pc, #216]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc54:	f003 0301 	and.w	r3, r3, #1
 800cc58:	613b      	str	r3, [r7, #16]
 800cc5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc5c:	4b33      	ldr	r3, [pc, #204]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc60:	4a32      	ldr	r2, [pc, #200]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc62:	f043 0302 	orr.w	r3, r3, #2
 800cc66:	6313      	str	r3, [r2, #48]	; 0x30
 800cc68:	4b30      	ldr	r3, [pc, #192]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc6c:	f003 0302 	and.w	r3, r3, #2
 800cc70:	60fb      	str	r3, [r7, #12]
 800cc72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cc74:	4b2d      	ldr	r3, [pc, #180]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc78:	4a2c      	ldr	r2, [pc, #176]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc7e:	6313      	str	r3, [r2, #48]	; 0x30
 800cc80:	4b2a      	ldr	r3, [pc, #168]	; (800cd2c <HAL_ETH_MspInit+0x16c>)
 800cc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc88:	60bb      	str	r3, [r7, #8]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800cc8c:	2332      	movs	r3, #50	; 0x32
 800cc8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc90:	2302      	movs	r3, #2
 800cc92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cc9c:	230b      	movs	r3, #11
 800cc9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cca4:	4619      	mov	r1, r3
 800cca6:	4822      	ldr	r0, [pc, #136]	; (800cd30 <HAL_ETH_MspInit+0x170>)
 800cca8:	f7fd fb00 	bl	800a2ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ccac:	2386      	movs	r3, #134	; 0x86
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ccbc:	230b      	movs	r3, #11
 800ccbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	481b      	ldr	r0, [pc, #108]	; (800cd34 <HAL_ETH_MspInit+0x174>)
 800ccc8:	f7fd faf0 	bl	800a2ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800cccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ccde:	230b      	movs	r3, #11
 800cce0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800cce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cce6:	4619      	mov	r1, r3
 800cce8:	4813      	ldr	r0, [pc, #76]	; (800cd38 <HAL_ETH_MspInit+0x178>)
 800ccea:	f7fd fadf 	bl	800a2ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ccee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ccf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd00:	230b      	movs	r3, #11
 800cd02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cd04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd08:	4619      	mov	r1, r3
 800cd0a:	480c      	ldr	r0, [pc, #48]	; (800cd3c <HAL_ETH_MspInit+0x17c>)
 800cd0c:	f7fd face 	bl	800a2ac <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800cd10:	2200      	movs	r2, #0
 800cd12:	2105      	movs	r1, #5
 800cd14:	203d      	movs	r0, #61	; 0x3d
 800cd16:	f7fc faa0 	bl	800925a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800cd1a:	203d      	movs	r0, #61	; 0x3d
 800cd1c:	f7fc fab9 	bl	8009292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800cd20:	bf00      	nop
 800cd22:	3738      	adds	r7, #56	; 0x38
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	40028000 	.word	0x40028000
 800cd2c:	40023800 	.word	0x40023800
 800cd30:	40020800 	.word	0x40020800
 800cd34:	40020000 	.word	0x40020000
 800cd38:	40020400 	.word	0x40020400
 800cd3c:	40021800 	.word	0x40021800

0800cd40 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800cd48:	4b04      	ldr	r3, [pc, #16]	; (800cd5c <HAL_ETH_RxCpltCallback+0x1c>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 fc39 	bl	800d5c4 <osSemaphoreRelease>
}
 800cd52:	bf00      	nop
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	20000334 	.word	0x20000334

0800cd60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800cd60:	b5b0      	push	{r4, r5, r7, lr}
 800cd62:	b090      	sub	sp, #64	; 0x40
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800cd6c:	4b5c      	ldr	r3, [pc, #368]	; (800cee0 <low_level_init+0x180>)
 800cd6e:	4a5d      	ldr	r2, [pc, #372]	; (800cee4 <low_level_init+0x184>)
 800cd70:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800cd72:	4b5b      	ldr	r3, [pc, #364]	; (800cee0 <low_level_init+0x180>)
 800cd74:	2201      	movs	r2, #1
 800cd76:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800cd78:	4b59      	ldr	r3, [pc, #356]	; (800cee0 <low_level_init+0x180>)
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800cd84:	2380      	movs	r3, #128	; 0x80
 800cd86:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800cd8a:	23e1      	movs	r3, #225	; 0xe1
 800cd8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800cd90:	2300      	movs	r3, #0
 800cd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800cd96:	2300      	movs	r3, #0
 800cd98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800cda2:	4a4f      	ldr	r2, [pc, #316]	; (800cee0 <low_level_init+0x180>)
 800cda4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cda8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800cdaa:	4b4d      	ldr	r3, [pc, #308]	; (800cee0 <low_level_init+0x180>)
 800cdac:	2201      	movs	r2, #1
 800cdae:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800cdb0:	4b4b      	ldr	r3, [pc, #300]	; (800cee0 <low_level_init+0x180>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800cdb6:	4b4a      	ldr	r3, [pc, #296]	; (800cee0 <low_level_init+0x180>)
 800cdb8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800cdbc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800cdbe:	4848      	ldr	r0, [pc, #288]	; (800cee0 <low_level_init+0x180>)
 800cdc0:	f7fc fa82 	bl	80092c8 <HAL_ETH_Init>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800cdca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d108      	bne.n	800cde4 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cdd8:	f043 0304 	orr.w	r3, r3, #4
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800cde4:	2304      	movs	r3, #4
 800cde6:	4a40      	ldr	r2, [pc, #256]	; (800cee8 <low_level_init+0x188>)
 800cde8:	4940      	ldr	r1, [pc, #256]	; (800ceec <low_level_init+0x18c>)
 800cdea:	483d      	ldr	r0, [pc, #244]	; (800cee0 <low_level_init+0x180>)
 800cdec:	f7fc fc08 	bl	8009600 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800cdf0:	2304      	movs	r3, #4
 800cdf2:	4a3f      	ldr	r2, [pc, #252]	; (800cef0 <low_level_init+0x190>)
 800cdf4:	493f      	ldr	r1, [pc, #252]	; (800cef4 <low_level_init+0x194>)
 800cdf6:	483a      	ldr	r0, [pc, #232]	; (800cee0 <low_level_init+0x180>)
 800cdf8:	f7fc fc6b 	bl	80096d2 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2206      	movs	r2, #6
 800ce00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ce04:	4b36      	ldr	r3, [pc, #216]	; (800cee0 <low_level_init+0x180>)
 800ce06:	695b      	ldr	r3, [r3, #20]
 800ce08:	781a      	ldrb	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ce10:	4b33      	ldr	r3, [pc, #204]	; (800cee0 <low_level_init+0x180>)
 800ce12:	695b      	ldr	r3, [r3, #20]
 800ce14:	785a      	ldrb	r2, [r3, #1]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ce1c:	4b30      	ldr	r3, [pc, #192]	; (800cee0 <low_level_init+0x180>)
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	789a      	ldrb	r2, [r3, #2]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ce28:	4b2d      	ldr	r3, [pc, #180]	; (800cee0 <low_level_init+0x180>)
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	78da      	ldrb	r2, [r3, #3]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ce34:	4b2a      	ldr	r3, [pc, #168]	; (800cee0 <low_level_init+0x180>)
 800ce36:	695b      	ldr	r3, [r3, #20]
 800ce38:	791a      	ldrb	r2, [r3, #4]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ce40:	4b27      	ldr	r3, [pc, #156]	; (800cee0 <low_level_init+0x180>)
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	795a      	ldrb	r2, [r3, #5]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ce52:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ce5a:	f043 030a 	orr.w	r3, r3, #10
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800ce66:	2300      	movs	r3, #0
 800ce68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ce6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce72:	2101      	movs	r1, #1
 800ce74:	4618      	mov	r0, r3
 800ce76:	f000 fb23 	bl	800d4c0 <osSemaphoreCreate>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	4b1e      	ldr	r3, [pc, #120]	; (800cef8 <low_level_init+0x198>)
 800ce7e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ce80:	4b1e      	ldr	r3, [pc, #120]	; (800cefc <low_level_init+0x19c>)
 800ce82:	f107 040c 	add.w	r4, r7, #12
 800ce86:	461d      	mov	r5, r3
 800ce88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ce90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800ce94:	f107 030c 	add.w	r3, r7, #12
 800ce98:	6879      	ldr	r1, [r7, #4]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 fa28 	bl	800d2f0 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800cea0:	480f      	ldr	r0, [pc, #60]	; (800cee0 <low_level_init+0x180>)
 800cea2:	f7fc ff3e 	bl	8009d22 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800cea6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ceaa:	461a      	mov	r2, r3
 800ceac:	211d      	movs	r1, #29
 800ceae:	480c      	ldr	r0, [pc, #48]	; (800cee0 <low_level_init+0x180>)
 800ceb0:	f7fc fe69 	bl	8009b86 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	f043 030b 	orr.w	r3, r3, #11
 800ceba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	461a      	mov	r2, r3
 800cec0:	211d      	movs	r1, #29
 800cec2:	4807      	ldr	r0, [pc, #28]	; (800cee0 <low_level_init+0x180>)
 800cec4:	f7fc fec7 	bl	8009c56 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800cec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cecc:	461a      	mov	r2, r3
 800cece:	211d      	movs	r1, #29
 800ced0:	4803      	ldr	r0, [pc, #12]	; (800cee0 <low_level_init+0x180>)
 800ced2:	f7fc fe58 	bl	8009b86 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800ced6:	bf00      	nop
 800ced8:	3740      	adds	r7, #64	; 0x40
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bdb0      	pop	{r4, r5, r7, pc}
 800cede:	bf00      	nop
 800cee0:	2000644c 	.word	0x2000644c
 800cee4:	40028000 	.word	0x40028000
 800cee8:	20006494 	.word	0x20006494
 800ceec:	20004b7c 	.word	0x20004b7c
 800cef0:	20004bfc 	.word	0x20004bfc
 800cef4:	200063cc 	.word	0x200063cc
 800cef8:	20000334 	.word	0x20000334
 800cefc:	0801bca8 	.word	0x0801bca8

0800cf00 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08a      	sub	sp, #40	; 0x28
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800cf0a:	4b4b      	ldr	r3, [pc, #300]	; (800d038 <low_level_output+0x138>)
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800cf22:	4b45      	ldr	r3, [pc, #276]	; (800d038 <low_level_output+0x138>)
 800cf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf26:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	623b      	str	r3, [r7, #32]
 800cf30:	e05a      	b.n	800cfe8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	da03      	bge.n	800cf42 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800cf3a:	23f8      	movs	r3, #248	; 0xf8
 800cf3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800cf40:	e05c      	b.n	800cffc <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	895b      	ldrh	r3, [r3, #10]
 800cf46:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800cf4c:	e02f      	b.n	800cfae <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800cf4e:	69fa      	ldr	r2, [r7, #28]
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	18d0      	adds	r0, r2, r3
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	18d1      	adds	r1, r2, r3
 800cf5c:	693a      	ldr	r2, [r7, #16]
 800cf5e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800cf62:	1a9b      	subs	r3, r3, r2
 800cf64:	461a      	mov	r2, r3
 800cf66:	f00d ff48 	bl	801adfa <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	da03      	bge.n	800cf80 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800cf78:	23f8      	movs	r3, #248	; 0xf8
 800cf7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800cf7e:	e03d      	b.n	800cffc <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800cf90:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800cf9c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800cfa8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d8c8      	bhi.n	800cf4e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800cfbc:	69fa      	ldr	r2, [r7, #28]
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	18d0      	adds	r0, r2, r3
 800cfc2:	6a3b      	ldr	r3, [r7, #32]
 800cfc4:	685a      	ldr	r2, [r3, #4]
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	4413      	add	r3, r2
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	f00d ff14 	bl	801adfa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800cfd2:	693a      	ldr	r2, [r7, #16]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	4413      	add	r3, r2
 800cfd8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800cfda:	697a      	ldr	r2, [r7, #20]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	623b      	str	r3, [r7, #32]
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1a1      	bne.n	800cf32 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800cfee:	6979      	ldr	r1, [r7, #20]
 800cff0:	4811      	ldr	r0, [pc, #68]	; (800d038 <low_level_output+0x138>)
 800cff2:	f7fc fbdb 	bl	80097ac <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800cffc:	4b0e      	ldr	r3, [pc, #56]	; (800d038 <low_level_output+0x138>)
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	f241 0314 	movw	r3, #4116	; 0x1014
 800d004:	4413      	add	r3, r2
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 0320 	and.w	r3, r3, #32
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00d      	beq.n	800d02c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d010:	4b09      	ldr	r3, [pc, #36]	; (800d038 <low_level_output+0x138>)
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	f241 0314 	movw	r3, #4116	; 0x1014
 800d018:	4413      	add	r3, r2
 800d01a:	2220      	movs	r2, #32
 800d01c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800d01e:	4b06      	ldr	r3, [pc, #24]	; (800d038 <low_level_output+0x138>)
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	f241 0304 	movw	r3, #4100	; 0x1004
 800d026:	4413      	add	r3, r2
 800d028:	2200      	movs	r2, #0
 800d02a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800d02c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d030:	4618      	mov	r0, r3
 800d032:	3728      	adds	r7, #40	; 0x28
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	2000644c 	.word	0x2000644c

0800d03c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08c      	sub	sp, #48	; 0x30
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d044:	2300      	movs	r3, #0
 800d046:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800d048:	2300      	movs	r3, #0
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800d058:	2300      	movs	r3, #0
 800d05a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800d060:	484f      	ldr	r0, [pc, #316]	; (800d1a0 <low_level_input+0x164>)
 800d062:	f7fc fc8d 	bl	8009980 <HAL_ETH_GetReceivedFrame_IT>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <low_level_input+0x34>
  
    return NULL;
 800d06c:	2300      	movs	r3, #0
 800d06e:	e092      	b.n	800d196 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800d070:	4b4b      	ldr	r3, [pc, #300]	; (800d1a0 <low_level_input+0x164>)
 800d072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d074:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d076:	4b4a      	ldr	r3, [pc, #296]	; (800d1a0 <low_level_input+0x164>)
 800d078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800d07c:	89fb      	ldrh	r3, [r7, #14]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d007      	beq.n	800d092 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800d082:	89fb      	ldrh	r3, [r7, #14]
 800d084:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800d088:	4619      	mov	r1, r3
 800d08a:	2000      	movs	r0, #0
 800d08c:	f004 fc88 	bl	80119a0 <pbuf_alloc>
 800d090:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800d092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d094:	2b00      	cmp	r3, #0
 800d096:	d04b      	beq.n	800d130 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d098:	4b41      	ldr	r3, [pc, #260]	; (800d1a0 <low_level_input+0x164>)
 800d09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0a6:	e040      	b.n	800d12a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0aa:	895b      	ldrh	r3, [r3, #10]
 800d0ac:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d0b2:	e021      	b.n	800d0f8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b6:	685a      	ldr	r2, [r3, #4]
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	18d0      	adds	r0, r2, r3
 800d0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	18d1      	adds	r1, r2, r3
 800d0c2:	69fa      	ldr	r2, [r7, #28]
 800d0c4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800d0c8:	1a9b      	subs	r3, r3, r2
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f00d fe95 	bl	801adfa <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d0dc:	69fa      	ldr	r2, [r7, #28]
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d0e6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800d0e8:	69ba      	ldr	r2, [r7, #24]
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d0f2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d0f8:	697a      	ldr	r2, [r7, #20]
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d102:	4293      	cmp	r3, r2
 800d104:	d8d6      	bhi.n	800d0b4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800d106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d108:	685a      	ldr	r2, [r3, #4]
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	18d0      	adds	r0, r2, r3
 800d10e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	4413      	add	r3, r2
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	4619      	mov	r1, r3
 800d118:	f00d fe6f 	bl	801adfa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d11c:	69fa      	ldr	r2, [r7, #28]
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	4413      	add	r3, r2
 800d122:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	62bb      	str	r3, [r7, #40]	; 0x28
 800d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1bb      	bne.n	800d0a8 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d130:	4b1b      	ldr	r3, [pc, #108]	; (800d1a0 <low_level_input+0x164>)
 800d132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d134:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d136:	2300      	movs	r3, #0
 800d138:	613b      	str	r3, [r7, #16]
 800d13a:	e00b      	b.n	800d154 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	3301      	adds	r3, #1
 800d152:	613b      	str	r3, [r7, #16]
 800d154:	4b12      	ldr	r3, [pc, #72]	; (800d1a0 <low_level_input+0x164>)
 800d156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d3ee      	bcc.n	800d13c <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800d15e:	4b10      	ldr	r3, [pc, #64]	; (800d1a0 <low_level_input+0x164>)
 800d160:	2200      	movs	r2, #0
 800d162:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800d164:	4b0e      	ldr	r3, [pc, #56]	; (800d1a0 <low_level_input+0x164>)
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	f241 0314 	movw	r3, #4116	; 0x1014
 800d16c:	4413      	add	r3, r2
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00d      	beq.n	800d194 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800d178:	4b09      	ldr	r3, [pc, #36]	; (800d1a0 <low_level_input+0x164>)
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	f241 0314 	movw	r3, #4116	; 0x1014
 800d180:	4413      	add	r3, r2
 800d182:	2280      	movs	r2, #128	; 0x80
 800d184:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800d186:	4b06      	ldr	r3, [pc, #24]	; (800d1a0 <low_level_input+0x164>)
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	f241 0308 	movw	r3, #4104	; 0x1008
 800d18e:	4413      	add	r3, r2
 800d190:	2200      	movs	r2, #0
 800d192:	601a      	str	r2, [r3, #0]
  }
  return p;
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d196:	4618      	mov	r0, r3
 800d198:	3730      	adds	r7, #48	; 0x30
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	2000644c 	.word	0x2000644c

0800d1a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d1b0:	4b12      	ldr	r3, [pc, #72]	; (800d1fc <ethernetif_input+0x58>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 f9b5 	bl	800d528 <osSemaphoreWait>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1f5      	bne.n	800d1b0 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 800d1c4:	480e      	ldr	r0, [pc, #56]	; (800d200 <ethernetif_input+0x5c>)
 800d1c6:	f00d fd85 	bl	801acd4 <sys_mutex_lock>
        p = low_level_input( netif );
 800d1ca:	68f8      	ldr	r0, [r7, #12]
 800d1cc:	f7ff ff36 	bl	800d03c <low_level_input>
 800d1d0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00a      	beq.n	800d1ee <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	68f9      	ldr	r1, [r7, #12]
 800d1de:	68b8      	ldr	r0, [r7, #8]
 800d1e0:	4798      	blx	r3
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800d1e8:	68b8      	ldr	r0, [r7, #8]
 800d1ea:	f004 feb9 	bl	8011f60 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800d1ee:	4804      	ldr	r0, [pc, #16]	; (800d200 <ethernetif_input+0x5c>)
 800d1f0:	f00d fd7f 	bl	801acf2 <sys_mutex_unlock>
      } while(p!=NULL);
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1e4      	bne.n	800d1c4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d1fa:	e7d9      	b.n	800d1b0 <ethernetif_input+0xc>
 800d1fc:	20000334 	.word	0x20000334
 800d200:	20007c64 	.word	0x20007c64

0800d204 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d106      	bne.n	800d220 <ethernetif_init+0x1c>
 800d212:	4b0e      	ldr	r3, [pc, #56]	; (800d24c <ethernetif_init+0x48>)
 800d214:	f240 2235 	movw	r2, #565	; 0x235
 800d218:	490d      	ldr	r1, [pc, #52]	; (800d250 <ethernetif_init+0x4c>)
 800d21a:	480e      	ldr	r0, [pc, #56]	; (800d254 <ethernetif_init+0x50>)
 800d21c:	f00d fe00 	bl	801ae20 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2273      	movs	r2, #115	; 0x73
 800d224:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2274      	movs	r2, #116	; 0x74
 800d22c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a09      	ldr	r2, [pc, #36]	; (800d258 <ethernetif_init+0x54>)
 800d234:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a08      	ldr	r2, [pc, #32]	; (800d25c <ethernetif_init+0x58>)
 800d23a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff fd8f 	bl	800cd60 <low_level_init>

  return ERR_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	0801bcc4 	.word	0x0801bcc4
 800d250:	0801bce0 	.word	0x0801bce0
 800d254:	0801bcf0 	.word	0x0801bcf0
 800d258:	08018e8d 	.word	0x08018e8d
 800d25c:	0800cf01 	.word	0x0800cf01

0800d260 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d264:	f7fb fef0 	bl	8009048 <HAL_GetTick>
 800d268:	4603      	mov	r3, r0
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d26e:	b480      	push	{r7}
 800d270:	b085      	sub	sp, #20
 800d272:	af00      	add	r7, sp, #0
 800d274:	4603      	mov	r3, r0
 800d276:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d278:	2300      	movs	r3, #0
 800d27a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d27c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d280:	2b84      	cmp	r3, #132	; 0x84
 800d282:	d005      	beq.n	800d290 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d284:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	4413      	add	r3, r2
 800d28c:	3303      	adds	r3, #3
 800d28e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d290:	68fb      	ldr	r3, [r7, #12]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3714      	adds	r7, #20
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr

0800d29e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b083      	sub	sp, #12
 800d2a2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2a4:	f3ef 8305 	mrs	r3, IPSR
 800d2a8:	607b      	str	r3, [r7, #4]
  return(result);
 800d2aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	bf14      	ite	ne
 800d2b0:	2301      	movne	r3, #1
 800d2b2:	2300      	moveq	r3, #0
 800d2b4:	b2db      	uxtb	r3, r3
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d2c6:	f001 fc3d 	bl	800eb44 <vTaskStartScheduler>
  
  return osOK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d2d4:	f7ff ffe3 	bl	800d29e <inHandlerMode>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d003      	beq.n	800d2e6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d2de:	f001 fd4f 	bl	800ed80 <xTaskGetTickCountFromISR>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	e002      	b.n	800d2ec <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d2e6:	f001 fd3b 	bl	800ed60 <xTaskGetTickCount>
 800d2ea:	4603      	mov	r3, r0
  }
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2f2:	b089      	sub	sp, #36	; 0x24
 800d2f4:	af04      	add	r7, sp, #16
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d020      	beq.n	800d344 <osThreadCreate+0x54>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d01c      	beq.n	800d344 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685c      	ldr	r4, [r3, #4]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681d      	ldr	r5, [r3, #0]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691e      	ldr	r6, [r3, #16]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff ffa6 	bl	800d26e <makeFreeRtosPriority>
 800d322:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	695b      	ldr	r3, [r3, #20]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d32c:	9202      	str	r2, [sp, #8]
 800d32e:	9301      	str	r3, [sp, #4]
 800d330:	9100      	str	r1, [sp, #0]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	4632      	mov	r2, r6
 800d336:	4629      	mov	r1, r5
 800d338:	4620      	mov	r0, r4
 800d33a:	f001 fa6c 	bl	800e816 <xTaskCreateStatic>
 800d33e:	4603      	mov	r3, r0
 800d340:	60fb      	str	r3, [r7, #12]
 800d342:	e01c      	b.n	800d37e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685c      	ldr	r4, [r3, #4]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d350:	b29e      	uxth	r6, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff ff88 	bl	800d26e <makeFreeRtosPriority>
 800d35e:	4602      	mov	r2, r0
 800d360:	f107 030c 	add.w	r3, r7, #12
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	9200      	str	r2, [sp, #0]
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	4632      	mov	r2, r6
 800d36c:	4629      	mov	r1, r5
 800d36e:	4620      	mov	r0, r4
 800d370:	f001 fab1 	bl	800e8d6 <xTaskCreate>
 800d374:	4603      	mov	r3, r0
 800d376:	2b01      	cmp	r3, #1
 800d378:	d001      	beq.n	800d37e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d37a:	2300      	movs	r3, #0
 800d37c:	e000      	b.n	800d380 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d37e:	68fb      	ldr	r3, [r7, #12]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3714      	adds	r7, #20
 800d384:	46bd      	mov	sp, r7
 800d386:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d388 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d007      	beq.n	800d3a8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	4619      	mov	r1, r3
 800d39e:	2001      	movs	r0, #1
 800d3a0:	f000 fc51 	bl	800dc46 <xQueueCreateMutexStatic>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	e003      	b.n	800d3b0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	f000 fc34 	bl	800dc16 <xQueueCreateMutex>
 800d3ae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <osMutexWait+0x18>
    return osErrorParameter;
 800d3cc:	2380      	movs	r3, #128	; 0x80
 800d3ce:	e03a      	b.n	800d446 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3da:	d103      	bne.n	800d3e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800d3dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3e0:	60fb      	str	r3, [r7, #12]
 800d3e2:	e009      	b.n	800d3f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d006      	beq.n	800d3f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <osMutexWait+0x40>
      ticks = 1;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d3f8:	f7ff ff51 	bl	800d29e <inHandlerMode>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d017      	beq.n	800d432 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d402:	f107 0308 	add.w	r3, r7, #8
 800d406:	461a      	mov	r2, r3
 800d408:	2100      	movs	r1, #0
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f001 f858 	bl	800e4c0 <xQueueReceiveFromISR>
 800d410:	4603      	mov	r3, r0
 800d412:	2b01      	cmp	r3, #1
 800d414:	d001      	beq.n	800d41a <osMutexWait+0x62>
      return osErrorOS;
 800d416:	23ff      	movs	r3, #255	; 0xff
 800d418:	e015      	b.n	800d446 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d011      	beq.n	800d444 <osMutexWait+0x8c>
 800d420:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <osMutexWait+0x98>)
 800d422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	e008      	b.n	800d444 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d432:	68f9      	ldr	r1, [r7, #12]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 ff33 	bl	800e2a0 <xQueueSemaphoreTake>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d001      	beq.n	800d444 <osMutexWait+0x8c>
    return osErrorOS;
 800d440:	23ff      	movs	r3, #255	; 0xff
 800d442:	e000      	b.n	800d446 <osMutexWait+0x8e>
  }
  
  return osOK;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	e000ed04 	.word	0xe000ed04

0800d454 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d460:	2300      	movs	r3, #0
 800d462:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d464:	f7ff ff1b 	bl	800d29e <inHandlerMode>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d016      	beq.n	800d49c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d46e:	f107 0308 	add.w	r3, r7, #8
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fd9f 	bl	800dfb8 <xQueueGiveFromISR>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d001      	beq.n	800d484 <osMutexRelease+0x30>
      return osErrorOS;
 800d480:	23ff      	movs	r3, #255	; 0xff
 800d482:	e017      	b.n	800d4b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d013      	beq.n	800d4b2 <osMutexRelease+0x5e>
 800d48a:	4b0c      	ldr	r3, [pc, #48]	; (800d4bc <osMutexRelease+0x68>)
 800d48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	e00a      	b.n	800d4b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d49c:	2300      	movs	r3, #0
 800d49e:	2200      	movs	r2, #0
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fbea 	bl	800dc7c <xQueueGenericSend>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d001      	beq.n	800d4b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d4ae:	23ff      	movs	r3, #255	; 0xff
 800d4b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	e000ed04 	.word	0xe000ed04

0800d4c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af02      	add	r7, sp, #8
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d010      	beq.n	800d4f4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d10b      	bne.n	800d4f0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	2303      	movs	r3, #3
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	2001      	movs	r0, #1
 800d4e8:	f000 fa9e 	bl	800da28 <xQueueGenericCreateStatic>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	e016      	b.n	800d51e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	e014      	b.n	800d51e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d110      	bne.n	800d51c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	2001      	movs	r0, #1
 800d500:	f000 fb0f 	bl	800db22 <xQueueGenericCreate>
 800d504:	60f8      	str	r0, [r7, #12]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d005      	beq.n	800d518 <osSemaphoreCreate+0x58>
 800d50c:	2300      	movs	r3, #0
 800d50e:	2200      	movs	r2, #0
 800d510:	2100      	movs	r1, #0
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 fbb2 	bl	800dc7c <xQueueGenericSend>
      return sema;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	e000      	b.n	800d51e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d51c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d532:	2300      	movs	r3, #0
 800d534:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d101      	bne.n	800d540 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d53c:	2380      	movs	r3, #128	; 0x80
 800d53e:	e03a      	b.n	800d5b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d54a:	d103      	bne.n	800d554 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d54c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d550:	60fb      	str	r3, [r7, #12]
 800d552:	e009      	b.n	800d568 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d006      	beq.n	800d568 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <osSemaphoreWait+0x40>
      ticks = 1;
 800d564:	2301      	movs	r3, #1
 800d566:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d568:	f7ff fe99 	bl	800d29e <inHandlerMode>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d017      	beq.n	800d5a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d572:	f107 0308 	add.w	r3, r7, #8
 800d576:	461a      	mov	r2, r3
 800d578:	2100      	movs	r1, #0
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 ffa0 	bl	800e4c0 <xQueueReceiveFromISR>
 800d580:	4603      	mov	r3, r0
 800d582:	2b01      	cmp	r3, #1
 800d584:	d001      	beq.n	800d58a <osSemaphoreWait+0x62>
      return osErrorOS;
 800d586:	23ff      	movs	r3, #255	; 0xff
 800d588:	e015      	b.n	800d5b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d011      	beq.n	800d5b4 <osSemaphoreWait+0x8c>
 800d590:	4b0b      	ldr	r3, [pc, #44]	; (800d5c0 <osSemaphoreWait+0x98>)
 800d592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d596:	601a      	str	r2, [r3, #0]
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	e008      	b.n	800d5b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d5a2:	68f9      	ldr	r1, [r7, #12]
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fe7b 	bl	800e2a0 <xQueueSemaphoreTake>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d001      	beq.n	800d5b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d5b0:	23ff      	movs	r3, #255	; 0xff
 800d5b2:	e000      	b.n	800d5b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	e000ed04 	.word	0xe000ed04

0800d5c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d5d4:	f7ff fe63 	bl	800d29e <inHandlerMode>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d016      	beq.n	800d60c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d5de:	f107 0308 	add.w	r3, r7, #8
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fce7 	bl	800dfb8 <xQueueGiveFromISR>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d001      	beq.n	800d5f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d5f0:	23ff      	movs	r3, #255	; 0xff
 800d5f2:	e017      	b.n	800d624 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d013      	beq.n	800d622 <osSemaphoreRelease+0x5e>
 800d5fa:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <osSemaphoreRelease+0x68>)
 800d5fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d600:	601a      	str	r2, [r3, #0]
 800d602:	f3bf 8f4f 	dsb	sy
 800d606:	f3bf 8f6f 	isb	sy
 800d60a:	e00a      	b.n	800d622 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d60c:	2300      	movs	r3, #0
 800d60e:	2200      	movs	r2, #0
 800d610:	2100      	movs	r1, #0
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fb32 	bl	800dc7c <xQueueGenericSend>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d001      	beq.n	800d622 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d61e:	23ff      	movs	r3, #255	; 0xff
 800d620:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d622:	68fb      	ldr	r3, [r7, #12]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	e000ed04 	.word	0xe000ed04

0800d630 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d630:	b590      	push	{r4, r7, lr}
 800d632:	b085      	sub	sp, #20
 800d634:	af02      	add	r7, sp, #8
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d012      	beq.n	800d668 <osMessageCreate+0x38>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00e      	beq.n	800d668 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6818      	ldr	r0, [r3, #0]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6859      	ldr	r1, [r3, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	689a      	ldr	r2, [r3, #8]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68dc      	ldr	r4, [r3, #12]
 800d65a:	2300      	movs	r3, #0
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	4623      	mov	r3, r4
 800d660:	f000 f9e2 	bl	800da28 <xQueueGenericCreateStatic>
 800d664:	4603      	mov	r3, r0
 800d666:	e008      	b.n	800d67a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6818      	ldr	r0, [r3, #0]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	4619      	mov	r1, r3
 800d674:	f000 fa55 	bl	800db22 <xQueueGenericCreate>
 800d678:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd90      	pop	{r4, r7, pc}
	...

0800d684 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d690:	2300      	movs	r3, #0
 800d692:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <osMessagePut+0x1e>
    ticks = 1;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d6a2:	f7ff fdfc 	bl	800d29e <inHandlerMode>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d018      	beq.n	800d6de <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d6ac:	f107 0210 	add.w	r2, r7, #16
 800d6b0:	f107 0108 	add.w	r1, r7, #8
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f000 fbe2 	bl	800de80 <xQueueGenericSendFromISR>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d001      	beq.n	800d6c6 <osMessagePut+0x42>
      return osErrorOS;
 800d6c2:	23ff      	movs	r3, #255	; 0xff
 800d6c4:	e018      	b.n	800d6f8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d014      	beq.n	800d6f6 <osMessagePut+0x72>
 800d6cc:	4b0c      	ldr	r3, [pc, #48]	; (800d700 <osMessagePut+0x7c>)
 800d6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6d2:	601a      	str	r2, [r3, #0]
 800d6d4:	f3bf 8f4f 	dsb	sy
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	e00b      	b.n	800d6f6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d6de:	f107 0108 	add.w	r1, r7, #8
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f000 fac8 	bl	800dc7c <xQueueGenericSend>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d001      	beq.n	800d6f6 <osMessagePut+0x72>
      return osErrorOS;
 800d6f2:	23ff      	movs	r3, #255	; 0xff
 800d6f4:	e000      	b.n	800d6f8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d6f6:	2300      	movs	r3, #0
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3718      	adds	r7, #24
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	e000ed04 	.word	0xe000ed04

0800d704 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b08b      	sub	sp, #44	; 0x2c
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d714:	2300      	movs	r3, #0
 800d716:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10a      	bne.n	800d734 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d71e:	2380      	movs	r3, #128	; 0x80
 800d720:	617b      	str	r3, [r7, #20]
    return event;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	461c      	mov	r4, r3
 800d726:	f107 0314 	add.w	r3, r7, #20
 800d72a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d72e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d732:	e054      	b.n	800d7de <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d734:	2300      	movs	r3, #0
 800d736:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d742:	d103      	bne.n	800d74c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d748:	627b      	str	r3, [r7, #36]	; 0x24
 800d74a:	e009      	b.n	800d760 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d006      	beq.n	800d760 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <osMessageGet+0x5c>
      ticks = 1;
 800d75c:	2301      	movs	r3, #1
 800d75e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d760:	f7ff fd9d 	bl	800d29e <inHandlerMode>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d01c      	beq.n	800d7a4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d76a:	f107 0220 	add.w	r2, r7, #32
 800d76e:	f107 0314 	add.w	r3, r7, #20
 800d772:	3304      	adds	r3, #4
 800d774:	4619      	mov	r1, r3
 800d776:	68b8      	ldr	r0, [r7, #8]
 800d778:	f000 fea2 	bl	800e4c0 <xQueueReceiveFromISR>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d102      	bne.n	800d788 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d782:	2310      	movs	r3, #16
 800d784:	617b      	str	r3, [r7, #20]
 800d786:	e001      	b.n	800d78c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d788:	2300      	movs	r3, #0
 800d78a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d78c:	6a3b      	ldr	r3, [r7, #32]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d01d      	beq.n	800d7ce <osMessageGet+0xca>
 800d792:	4b15      	ldr	r3, [pc, #84]	; (800d7e8 <osMessageGet+0xe4>)
 800d794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	f3bf 8f6f 	isb	sy
 800d7a2:	e014      	b.n	800d7ce <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d7a4:	f107 0314 	add.w	r3, r7, #20
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	68b8      	ldr	r0, [r7, #8]
 800d7b0:	f000 fc94 	bl	800e0dc <xQueueReceive>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d102      	bne.n	800d7c0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d7ba:	2310      	movs	r3, #16
 800d7bc:	617b      	str	r3, [r7, #20]
 800d7be:	e006      	b.n	800d7ce <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <osMessageGet+0xc6>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	e000      	b.n	800d7cc <osMessageGet+0xc8>
 800d7ca:	2340      	movs	r3, #64	; 0x40
 800d7cc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	461c      	mov	r4, r3
 800d7d2:	f107 0314 	add.w	r3, r7, #20
 800d7d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	372c      	adds	r7, #44	; 0x2c
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd90      	pop	{r4, r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	e000ed04 	.word	0xe000ed04

0800d7ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f103 0208 	add.w	r2, r3, #8
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f103 0208 	add.w	r2, r3, #8
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f103 0208 	add.w	r2, r3, #8
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d83a:	bf00      	nop
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d846:	b480      	push	{r7}
 800d848:	b085      	sub	sp, #20
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	689a      	ldr	r2, [r3, #8]
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	1c5a      	adds	r2, r3, #1
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	601a      	str	r2, [r3, #0]
}
 800d882:	bf00      	nop
 800d884:	3714      	adds	r7, #20
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d88e:	b480      	push	{r7}
 800d890:	b085      	sub	sp, #20
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8a4:	d103      	bne.n	800d8ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	691b      	ldr	r3, [r3, #16]
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	e00c      	b.n	800d8c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	3308      	adds	r3, #8
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e002      	b.n	800d8bc <vListInsert+0x2e>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d2f6      	bcs.n	800d8b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	683a      	ldr	r2, [r7, #0]
 800d8e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	1c5a      	adds	r2, r3, #1
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	601a      	str	r2, [r3, #0]
}
 800d8f4:	bf00      	nop
 800d8f6:	3714      	adds	r7, #20
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	6892      	ldr	r2, [r2, #8]
 800d916:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	6852      	ldr	r2, [r2, #4]
 800d920:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	687a      	ldr	r2, [r7, #4]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d103      	bne.n	800d934 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689a      	ldr	r2, [r3, #8]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	1e5a      	subs	r2, r3, #1
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3714      	adds	r7, #20
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d10b      	bne.n	800d980 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96c:	b672      	cpsid	i
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	b662      	cpsie	i
 800d97c:	60bb      	str	r3, [r7, #8]
 800d97e:	e7fe      	b.n	800d97e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d980:	f002 f852 	bl	800fa28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d98c:	68f9      	ldr	r1, [r7, #12]
 800d98e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d990:	fb01 f303 	mul.w	r3, r1, r3
 800d994:	441a      	add	r2, r3
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2200      	movs	r2, #0
 800d99e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	68f9      	ldr	r1, [r7, #12]
 800d9b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9b6:	fb01 f303 	mul.w	r3, r1, r3
 800d9ba:	441a      	add	r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	22ff      	movs	r2, #255	; 0xff
 800d9c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	22ff      	movs	r2, #255	; 0xff
 800d9cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d114      	bne.n	800da00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d01a      	beq.n	800da14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	3310      	adds	r3, #16
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 fb1a 	bl	800f01c <xTaskRemoveFromEventList>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d012      	beq.n	800da14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d9ee:	4b0d      	ldr	r3, [pc, #52]	; (800da24 <xQueueGenericReset+0xd0>)
 800d9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f4:	601a      	str	r2, [r3, #0]
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	f3bf 8f6f 	isb	sy
 800d9fe:	e009      	b.n	800da14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3310      	adds	r3, #16
 800da04:	4618      	mov	r0, r3
 800da06:	f7ff fef1 	bl	800d7ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3324      	adds	r3, #36	; 0x24
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff feec 	bl	800d7ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da14:	f002 f83a 	bl	800fa8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da18:	2301      	movs	r3, #1
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	e000ed04 	.word	0xe000ed04

0800da28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b08e      	sub	sp, #56	; 0x38
 800da2c:	af02      	add	r7, sp, #8
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
 800da34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d10b      	bne.n	800da54 <xQueueGenericCreateStatic+0x2c>
 800da3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da40:	b672      	cpsid	i
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	b662      	cpsie	i
 800da50:	62bb      	str	r3, [r7, #40]	; 0x28
 800da52:	e7fe      	b.n	800da52 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10b      	bne.n	800da72 <xQueueGenericCreateStatic+0x4a>
 800da5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5e:	b672      	cpsid	i
 800da60:	f383 8811 	msr	BASEPRI, r3
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	b662      	cpsie	i
 800da6e:	627b      	str	r3, [r7, #36]	; 0x24
 800da70:	e7fe      	b.n	800da70 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d002      	beq.n	800da7e <xQueueGenericCreateStatic+0x56>
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d001      	beq.n	800da82 <xQueueGenericCreateStatic+0x5a>
 800da7e:	2301      	movs	r3, #1
 800da80:	e000      	b.n	800da84 <xQueueGenericCreateStatic+0x5c>
 800da82:	2300      	movs	r3, #0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10b      	bne.n	800daa0 <xQueueGenericCreateStatic+0x78>
 800da88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8c:	b672      	cpsid	i
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	b662      	cpsie	i
 800da9c:	623b      	str	r3, [r7, #32]
 800da9e:	e7fe      	b.n	800da9e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d102      	bne.n	800daac <xQueueGenericCreateStatic+0x84>
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <xQueueGenericCreateStatic+0x88>
 800daac:	2301      	movs	r3, #1
 800daae:	e000      	b.n	800dab2 <xQueueGenericCreateStatic+0x8a>
 800dab0:	2300      	movs	r3, #0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10b      	bne.n	800dace <xQueueGenericCreateStatic+0xa6>
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	b672      	cpsid	i
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	b662      	cpsie	i
 800daca:	61fb      	str	r3, [r7, #28]
 800dacc:	e7fe      	b.n	800dacc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dace:	2348      	movs	r3, #72	; 0x48
 800dad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	2b48      	cmp	r3, #72	; 0x48
 800dad6:	d00b      	beq.n	800daf0 <xQueueGenericCreateStatic+0xc8>
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	b672      	cpsid	i
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	b662      	cpsie	i
 800daec:	61bb      	str	r3, [r7, #24]
 800daee:	e7fe      	b.n	800daee <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800daf0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800daf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00d      	beq.n	800db18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	2201      	movs	r2, #1
 800db00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db04:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	4613      	mov	r3, r2
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	68b9      	ldr	r1, [r7, #8]
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f000 f846 	bl	800dba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3730      	adds	r7, #48	; 0x30
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800db22:	b580      	push	{r7, lr}
 800db24:	b08a      	sub	sp, #40	; 0x28
 800db26:	af02      	add	r7, sp, #8
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	4613      	mov	r3, r2
 800db2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10b      	bne.n	800db4e <xQueueGenericCreate+0x2c>
 800db36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3a:	b672      	cpsid	i
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	b662      	cpsie	i
 800db4a:	613b      	str	r3, [r7, #16]
 800db4c:	e7fe      	b.n	800db4c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800db54:	2300      	movs	r3, #0
 800db56:	61fb      	str	r3, [r7, #28]
 800db58:	e004      	b.n	800db64 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	fb02 f303 	mul.w	r3, r2, r3
 800db62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	3348      	adds	r3, #72	; 0x48
 800db68:	4618      	mov	r0, r3
 800db6a:	f002 f87f 	bl	800fc6c <pvPortMalloc>
 800db6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d011      	beq.n	800db9a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	3348      	adds	r3, #72	; 0x48
 800db7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db88:	79fa      	ldrb	r2, [r7, #7]
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	4613      	mov	r3, r2
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	68b9      	ldr	r1, [r7, #8]
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 f805 	bl	800dba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db9a:	69bb      	ldr	r3, [r7, #24]
	}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3720      	adds	r7, #32
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d103      	bne.n	800dbc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbb8:	69bb      	ldr	r3, [r7, #24]
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	601a      	str	r2, [r3, #0]
 800dbbe:	e002      	b.n	800dbc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbd2:	2101      	movs	r1, #1
 800dbd4:	69b8      	ldr	r0, [r7, #24]
 800dbd6:	f7ff febd 	bl	800d954 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dbda:	bf00      	nop
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b082      	sub	sp, #8
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00e      	beq.n	800dc0e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dc02:	2300      	movs	r3, #0
 800dc04:	2200      	movs	r2, #0
 800dc06:	2100      	movs	r1, #0
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 f837 	bl	800dc7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dc0e:	bf00      	nop
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b086      	sub	sp, #24
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc20:	2301      	movs	r3, #1
 800dc22:	617b      	str	r3, [r7, #20]
 800dc24:	2300      	movs	r3, #0
 800dc26:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dc28:	79fb      	ldrb	r3, [r7, #7]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	6939      	ldr	r1, [r7, #16]
 800dc2e:	6978      	ldr	r0, [r7, #20]
 800dc30:	f7ff ff77 	bl	800db22 <xQueueGenericCreate>
 800dc34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f7ff ffd3 	bl	800dbe2 <prvInitialiseMutex>

		return xNewQueue;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
	}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b088      	sub	sp, #32
 800dc4a:	af02      	add	r7, sp, #8
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	6039      	str	r1, [r7, #0]
 800dc50:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc52:	2301      	movs	r3, #1
 800dc54:	617b      	str	r3, [r7, #20]
 800dc56:	2300      	movs	r3, #0
 800dc58:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dc5a:	79fb      	ldrb	r3, [r7, #7]
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2200      	movs	r2, #0
 800dc62:	6939      	ldr	r1, [r7, #16]
 800dc64:	6978      	ldr	r0, [r7, #20]
 800dc66:	f7ff fedf 	bl	800da28 <xQueueGenericCreateStatic>
 800dc6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f7ff ffb8 	bl	800dbe2 <prvInitialiseMutex>

		return xNewQueue;
 800dc72:	68fb      	ldr	r3, [r7, #12]
	}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3718      	adds	r7, #24
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b08e      	sub	sp, #56	; 0x38
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d10b      	bne.n	800dcb0 <xQueueGenericSend+0x34>
 800dc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9c:	b672      	cpsid	i
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	b662      	cpsie	i
 800dcac:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcae:	e7fe      	b.n	800dcae <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d103      	bne.n	800dcbe <xQueueGenericSend+0x42>
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d101      	bne.n	800dcc2 <xQueueGenericSend+0x46>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e000      	b.n	800dcc4 <xQueueGenericSend+0x48>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10b      	bne.n	800dce0 <xQueueGenericSend+0x64>
 800dcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dccc:	b672      	cpsid	i
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	b662      	cpsie	i
 800dcdc:	627b      	str	r3, [r7, #36]	; 0x24
 800dcde:	e7fe      	b.n	800dcde <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d103      	bne.n	800dcee <xQueueGenericSend+0x72>
 800dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d101      	bne.n	800dcf2 <xQueueGenericSend+0x76>
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e000      	b.n	800dcf4 <xQueueGenericSend+0x78>
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10b      	bne.n	800dd10 <xQueueGenericSend+0x94>
 800dcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfc:	b672      	cpsid	i
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	b662      	cpsie	i
 800dd0c:	623b      	str	r3, [r7, #32]
 800dd0e:	e7fe      	b.n	800dd0e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd10:	f001 fb42 	bl	800f398 <xTaskGetSchedulerState>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d102      	bne.n	800dd20 <xQueueGenericSend+0xa4>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <xQueueGenericSend+0xa8>
 800dd20:	2301      	movs	r3, #1
 800dd22:	e000      	b.n	800dd26 <xQueueGenericSend+0xaa>
 800dd24:	2300      	movs	r3, #0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d10b      	bne.n	800dd42 <xQueueGenericSend+0xc6>
 800dd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2e:	b672      	cpsid	i
 800dd30:	f383 8811 	msr	BASEPRI, r3
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	b662      	cpsie	i
 800dd3e:	61fb      	str	r3, [r7, #28]
 800dd40:	e7fe      	b.n	800dd40 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd42:	f001 fe71 	bl	800fa28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d302      	bcc.n	800dd58 <xQueueGenericSend+0xdc>
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	d129      	bne.n	800ddac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dd58:	683a      	ldr	r2, [r7, #0]
 800dd5a:	68b9      	ldr	r1, [r7, #8]
 800dd5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd5e:	f000 fc4a 	bl	800e5f6 <prvCopyDataToQueue>
 800dd62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d010      	beq.n	800dd8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6e:	3324      	adds	r3, #36	; 0x24
 800dd70:	4618      	mov	r0, r3
 800dd72:	f001 f953 	bl	800f01c <xTaskRemoveFromEventList>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d013      	beq.n	800dda4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dd7c:	4b3f      	ldr	r3, [pc, #252]	; (800de7c <xQueueGenericSend+0x200>)
 800dd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd82:	601a      	str	r2, [r3, #0]
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	e00a      	b.n	800dda4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d007      	beq.n	800dda4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dd94:	4b39      	ldr	r3, [pc, #228]	; (800de7c <xQueueGenericSend+0x200>)
 800dd96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dda4:	f001 fe72 	bl	800fa8c <vPortExitCritical>
				return pdPASS;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e063      	b.n	800de74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d103      	bne.n	800ddba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddb2:	f001 fe6b 	bl	800fa8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	e05c      	b.n	800de74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d106      	bne.n	800ddce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddc0:	f107 0314 	add.w	r3, r7, #20
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f001 f98d 	bl	800f0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ddce:	f001 fe5d 	bl	800fa8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ddd2:	f000 ff19 	bl	800ec08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ddd6:	f001 fe27 	bl	800fa28 <vPortEnterCritical>
 800ddda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dde0:	b25b      	sxtb	r3, r3
 800dde2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dde6:	d103      	bne.n	800ddf0 <xQueueGenericSend+0x174>
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddf6:	b25b      	sxtb	r3, r3
 800ddf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddfc:	d103      	bne.n	800de06 <xQueueGenericSend+0x18a>
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	2200      	movs	r2, #0
 800de02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de06:	f001 fe41 	bl	800fa8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de0a:	1d3a      	adds	r2, r7, #4
 800de0c:	f107 0314 	add.w	r3, r7, #20
 800de10:	4611      	mov	r1, r2
 800de12:	4618      	mov	r0, r3
 800de14:	f001 f97c 	bl	800f110 <xTaskCheckForTimeOut>
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d124      	bne.n	800de68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800de1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de20:	f000 fce1 	bl	800e7e6 <prvIsQueueFull>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d018      	beq.n	800de5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	3310      	adds	r3, #16
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	4611      	mov	r1, r2
 800de32:	4618      	mov	r0, r3
 800de34:	f001 f8cc 	bl	800efd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800de38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de3a:	f000 fc6c 	bl	800e716 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800de3e:	f000 fef1 	bl	800ec24 <xTaskResumeAll>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	f47f af7c 	bne.w	800dd42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800de4a:	4b0c      	ldr	r3, [pc, #48]	; (800de7c <xQueueGenericSend+0x200>)
 800de4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	e772      	b.n	800dd42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800de5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de5e:	f000 fc5a 	bl	800e716 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de62:	f000 fedf 	bl	800ec24 <xTaskResumeAll>
 800de66:	e76c      	b.n	800dd42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800de68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de6a:	f000 fc54 	bl	800e716 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de6e:	f000 fed9 	bl	800ec24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800de72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800de74:	4618      	mov	r0, r3
 800de76:	3738      	adds	r7, #56	; 0x38
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	e000ed04 	.word	0xe000ed04

0800de80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b08e      	sub	sp, #56	; 0x38
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
 800de8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10b      	bne.n	800deb0 <xQueueGenericSendFromISR+0x30>
 800de98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9c:	b672      	cpsid	i
 800de9e:	f383 8811 	msr	BASEPRI, r3
 800dea2:	f3bf 8f6f 	isb	sy
 800dea6:	f3bf 8f4f 	dsb	sy
 800deaa:	b662      	cpsie	i
 800deac:	627b      	str	r3, [r7, #36]	; 0x24
 800deae:	e7fe      	b.n	800deae <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d103      	bne.n	800debe <xQueueGenericSendFromISR+0x3e>
 800deb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deba:	2b00      	cmp	r3, #0
 800debc:	d101      	bne.n	800dec2 <xQueueGenericSendFromISR+0x42>
 800debe:	2301      	movs	r3, #1
 800dec0:	e000      	b.n	800dec4 <xQueueGenericSendFromISR+0x44>
 800dec2:	2300      	movs	r3, #0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10b      	bne.n	800dee0 <xQueueGenericSendFromISR+0x60>
 800dec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800decc:	b672      	cpsid	i
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	b662      	cpsie	i
 800dedc:	623b      	str	r3, [r7, #32]
 800dede:	e7fe      	b.n	800dede <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	d103      	bne.n	800deee <xQueueGenericSendFromISR+0x6e>
 800dee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deea:	2b01      	cmp	r3, #1
 800deec:	d101      	bne.n	800def2 <xQueueGenericSendFromISR+0x72>
 800deee:	2301      	movs	r3, #1
 800def0:	e000      	b.n	800def4 <xQueueGenericSendFromISR+0x74>
 800def2:	2300      	movs	r3, #0
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10b      	bne.n	800df10 <xQueueGenericSendFromISR+0x90>
 800def8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defc:	b672      	cpsid	i
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	b662      	cpsie	i
 800df0c:	61fb      	str	r3, [r7, #28]
 800df0e:	e7fe      	b.n	800df0e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df10:	f001 fe6a 	bl	800fbe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800df14:	f3ef 8211 	mrs	r2, BASEPRI
 800df18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1c:	b672      	cpsid	i
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	b662      	cpsie	i
 800df2c:	61ba      	str	r2, [r7, #24]
 800df2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800df30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800df32:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d302      	bcc.n	800df46 <xQueueGenericSendFromISR+0xc6>
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	2b02      	cmp	r3, #2
 800df44:	d12c      	bne.n	800dfa0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df50:	683a      	ldr	r2, [r7, #0]
 800df52:	68b9      	ldr	r1, [r7, #8]
 800df54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df56:	f000 fb4e 	bl	800e5f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800df5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800df5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df62:	d112      	bne.n	800df8a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d016      	beq.n	800df9a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	3324      	adds	r3, #36	; 0x24
 800df70:	4618      	mov	r0, r3
 800df72:	f001 f853 	bl	800f01c <xTaskRemoveFromEventList>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00e      	beq.n	800df9a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00b      	beq.n	800df9a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	601a      	str	r2, [r3, #0]
 800df88:	e007      	b.n	800df9a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800df8e:	3301      	adds	r3, #1
 800df90:	b2db      	uxtb	r3, r3
 800df92:	b25a      	sxtb	r2, r3
 800df94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800df9a:	2301      	movs	r3, #1
 800df9c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800df9e:	e001      	b.n	800dfa4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	637b      	str	r3, [r7, #52]	; 0x34
 800dfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dfae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3738      	adds	r7, #56	; 0x38
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b08e      	sub	sp, #56	; 0x38
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10b      	bne.n	800dfe4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800dfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd0:	b672      	cpsid	i
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	b662      	cpsie	i
 800dfe0:	623b      	str	r3, [r7, #32]
 800dfe2:	e7fe      	b.n	800dfe2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00b      	beq.n	800e004 <xQueueGiveFromISR+0x4c>
 800dfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff0:	b672      	cpsid	i
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	b662      	cpsie	i
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	e7fe      	b.n	800e002 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d103      	bne.n	800e014 <xQueueGiveFromISR+0x5c>
 800e00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <xQueueGiveFromISR+0x60>
 800e014:	2301      	movs	r3, #1
 800e016:	e000      	b.n	800e01a <xQueueGiveFromISR+0x62>
 800e018:	2300      	movs	r3, #0
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d10b      	bne.n	800e036 <xQueueGiveFromISR+0x7e>
 800e01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e022:	b672      	cpsid	i
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	b662      	cpsie	i
 800e032:	61bb      	str	r3, [r7, #24]
 800e034:	e7fe      	b.n	800e034 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e036:	f001 fdd7 	bl	800fbe8 <vPortValidateInterruptPriority>
	__asm volatile
 800e03a:	f3ef 8211 	mrs	r2, BASEPRI
 800e03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e042:	b672      	cpsid	i
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	b662      	cpsie	i
 800e052:	617a      	str	r2, [r7, #20]
 800e054:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e056:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e058:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e066:	429a      	cmp	r2, r3
 800e068:	d22b      	bcs.n	800e0c2 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e076:	1c5a      	adds	r2, r3, #1
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e07c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e084:	d112      	bne.n	800e0ac <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d016      	beq.n	800e0bc <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e090:	3324      	adds	r3, #36	; 0x24
 800e092:	4618      	mov	r0, r3
 800e094:	f000 ffc2 	bl	800f01c <xTaskRemoveFromEventList>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00e      	beq.n	800e0bc <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00b      	beq.n	800e0bc <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	e007      	b.n	800e0bc <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	b25a      	sxtb	r2, r3
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	637b      	str	r3, [r7, #52]	; 0x34
 800e0c0:	e001      	b.n	800e0c6 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3738      	adds	r7, #56	; 0x38
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b08c      	sub	sp, #48	; 0x30
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d10b      	bne.n	800e10e <xQueueReceive+0x32>
	__asm volatile
 800e0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fa:	b672      	cpsid	i
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	b662      	cpsie	i
 800e10a:	623b      	str	r3, [r7, #32]
 800e10c:	e7fe      	b.n	800e10c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d103      	bne.n	800e11c <xQueueReceive+0x40>
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d101      	bne.n	800e120 <xQueueReceive+0x44>
 800e11c:	2301      	movs	r3, #1
 800e11e:	e000      	b.n	800e122 <xQueueReceive+0x46>
 800e120:	2300      	movs	r3, #0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10b      	bne.n	800e13e <xQueueReceive+0x62>
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	b672      	cpsid	i
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	b662      	cpsie	i
 800e13a:	61fb      	str	r3, [r7, #28]
 800e13c:	e7fe      	b.n	800e13c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e13e:	f001 f92b 	bl	800f398 <xTaskGetSchedulerState>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d102      	bne.n	800e14e <xQueueReceive+0x72>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <xQueueReceive+0x76>
 800e14e:	2301      	movs	r3, #1
 800e150:	e000      	b.n	800e154 <xQueueReceive+0x78>
 800e152:	2300      	movs	r3, #0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d10b      	bne.n	800e170 <xQueueReceive+0x94>
 800e158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15c:	b672      	cpsid	i
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	b662      	cpsie	i
 800e16c:	61bb      	str	r3, [r7, #24]
 800e16e:	e7fe      	b.n	800e16e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e170:	f001 fc5a 	bl	800fa28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e178:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d01f      	beq.n	800e1c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e180:	68b9      	ldr	r1, [r7, #8]
 800e182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e184:	f000 faa1 	bl	800e6ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	1e5a      	subs	r2, r3, #1
 800e18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00f      	beq.n	800e1b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19a:	3310      	adds	r3, #16
 800e19c:	4618      	mov	r0, r3
 800e19e:	f000 ff3d 	bl	800f01c <xTaskRemoveFromEventList>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d007      	beq.n	800e1b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e1a8:	4b3c      	ldr	r3, [pc, #240]	; (800e29c <xQueueReceive+0x1c0>)
 800e1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e1b8:	f001 fc68 	bl	800fa8c <vPortExitCritical>
				return pdPASS;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e069      	b.n	800e294 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d103      	bne.n	800e1ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e1c6:	f001 fc61 	bl	800fa8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	e062      	b.n	800e294 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d106      	bne.n	800e1e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e1d4:	f107 0310 	add.w	r3, r7, #16
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f000 ff83 	bl	800f0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e1e2:	f001 fc53 	bl	800fa8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e1e6:	f000 fd0f 	bl	800ec08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e1ea:	f001 fc1d 	bl	800fa28 <vPortEnterCritical>
 800e1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e1f4:	b25b      	sxtb	r3, r3
 800e1f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1fa:	d103      	bne.n	800e204 <xQueueReceive+0x128>
 800e1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fe:	2200      	movs	r2, #0
 800e200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e20a:	b25b      	sxtb	r3, r3
 800e20c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e210:	d103      	bne.n	800e21a <xQueueReceive+0x13e>
 800e212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e214:	2200      	movs	r2, #0
 800e216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e21a:	f001 fc37 	bl	800fa8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e21e:	1d3a      	adds	r2, r7, #4
 800e220:	f107 0310 	add.w	r3, r7, #16
 800e224:	4611      	mov	r1, r2
 800e226:	4618      	mov	r0, r3
 800e228:	f000 ff72 	bl	800f110 <xTaskCheckForTimeOut>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d123      	bne.n	800e27a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e234:	f000 fac1 	bl	800e7ba <prvIsQueueEmpty>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d017      	beq.n	800e26e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e240:	3324      	adds	r3, #36	; 0x24
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	4611      	mov	r1, r2
 800e246:	4618      	mov	r0, r3
 800e248:	f000 fec2 	bl	800efd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e24e:	f000 fa62 	bl	800e716 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e252:	f000 fce7 	bl	800ec24 <xTaskResumeAll>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d189      	bne.n	800e170 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e25c:	4b0f      	ldr	r3, [pc, #60]	; (800e29c <xQueueReceive+0x1c0>)
 800e25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	f3bf 8f4f 	dsb	sy
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	e780      	b.n	800e170 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e26e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e270:	f000 fa51 	bl	800e716 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e274:	f000 fcd6 	bl	800ec24 <xTaskResumeAll>
 800e278:	e77a      	b.n	800e170 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e27a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e27c:	f000 fa4b 	bl	800e716 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e280:	f000 fcd0 	bl	800ec24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e286:	f000 fa98 	bl	800e7ba <prvIsQueueEmpty>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f43f af6f 	beq.w	800e170 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e292:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e294:	4618      	mov	r0, r3
 800e296:	3730      	adds	r7, #48	; 0x30
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	e000ed04 	.word	0xe000ed04

0800e2a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08e      	sub	sp, #56	; 0x38
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10b      	bne.n	800e2d4 <xQueueSemaphoreTake+0x34>
 800e2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c0:	b672      	cpsid	i
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	b662      	cpsie	i
 800e2d0:	623b      	str	r3, [r7, #32]
 800e2d2:	e7fe      	b.n	800e2d2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00b      	beq.n	800e2f4 <xQueueSemaphoreTake+0x54>
 800e2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e0:	b672      	cpsid	i
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	b662      	cpsie	i
 800e2f0:	61fb      	str	r3, [r7, #28]
 800e2f2:	e7fe      	b.n	800e2f2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2f4:	f001 f850 	bl	800f398 <xTaskGetSchedulerState>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d102      	bne.n	800e304 <xQueueSemaphoreTake+0x64>
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d101      	bne.n	800e308 <xQueueSemaphoreTake+0x68>
 800e304:	2301      	movs	r3, #1
 800e306:	e000      	b.n	800e30a <xQueueSemaphoreTake+0x6a>
 800e308:	2300      	movs	r3, #0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d10b      	bne.n	800e326 <xQueueSemaphoreTake+0x86>
 800e30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e312:	b672      	cpsid	i
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	b662      	cpsie	i
 800e322:	61bb      	str	r3, [r7, #24]
 800e324:	e7fe      	b.n	800e324 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e326:	f001 fb7f 	bl	800fa28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e332:	2b00      	cmp	r3, #0
 800e334:	d024      	beq.n	800e380 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e338:	1e5a      	subs	r2, r3, #1
 800e33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d104      	bne.n	800e350 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e346:	f001 f9e9 	bl	800f71c <pvTaskIncrementMutexHeldCount>
 800e34a:	4602      	mov	r2, r0
 800e34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00f      	beq.n	800e378 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35a:	3310      	adds	r3, #16
 800e35c:	4618      	mov	r0, r3
 800e35e:	f000 fe5d 	bl	800f01c <xTaskRemoveFromEventList>
 800e362:	4603      	mov	r3, r0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d007      	beq.n	800e378 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e368:	4b54      	ldr	r3, [pc, #336]	; (800e4bc <xQueueSemaphoreTake+0x21c>)
 800e36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e36e:	601a      	str	r2, [r3, #0]
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e378:	f001 fb88 	bl	800fa8c <vPortExitCritical>
				return pdPASS;
 800e37c:	2301      	movs	r3, #1
 800e37e:	e098      	b.n	800e4b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d112      	bne.n	800e3ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00b      	beq.n	800e3a4 <xQueueSemaphoreTake+0x104>
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	b672      	cpsid	i
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	b662      	cpsie	i
 800e3a0:	617b      	str	r3, [r7, #20]
 800e3a2:	e7fe      	b.n	800e3a2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e3a4:	f001 fb72 	bl	800fa8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	e082      	b.n	800e4b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d106      	bne.n	800e3c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3b2:	f107 030c 	add.w	r3, r7, #12
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f000 fe94 	bl	800f0e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3c0:	f001 fb64 	bl	800fa8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3c4:	f000 fc20 	bl	800ec08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3c8:	f001 fb2e 	bl	800fa28 <vPortEnterCritical>
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3d2:	b25b      	sxtb	r3, r3
 800e3d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3d8:	d103      	bne.n	800e3e2 <xQueueSemaphoreTake+0x142>
 800e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3e8:	b25b      	sxtb	r3, r3
 800e3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3ee:	d103      	bne.n	800e3f8 <xQueueSemaphoreTake+0x158>
 800e3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3f8:	f001 fb48 	bl	800fa8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3fc:	463a      	mov	r2, r7
 800e3fe:	f107 030c 	add.w	r3, r7, #12
 800e402:	4611      	mov	r1, r2
 800e404:	4618      	mov	r0, r3
 800e406:	f000 fe83 	bl	800f110 <xTaskCheckForTimeOut>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d132      	bne.n	800e476 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e412:	f000 f9d2 	bl	800e7ba <prvIsQueueEmpty>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d026      	beq.n	800e46a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d109      	bne.n	800e438 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800e424:	f001 fb00 	bl	800fa28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f000 ffd1 	bl	800f3d4 <xTaskPriorityInherit>
 800e432:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e434:	f001 fb2a 	bl	800fa8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43a:	3324      	adds	r3, #36	; 0x24
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	4611      	mov	r1, r2
 800e440:	4618      	mov	r0, r3
 800e442:	f000 fdc5 	bl	800efd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e446:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e448:	f000 f965 	bl	800e716 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e44c:	f000 fbea 	bl	800ec24 <xTaskResumeAll>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	f47f af67 	bne.w	800e326 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800e458:	4b18      	ldr	r3, [pc, #96]	; (800e4bc <xQueueSemaphoreTake+0x21c>)
 800e45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e45e:	601a      	str	r2, [r3, #0]
 800e460:	f3bf 8f4f 	dsb	sy
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	e75d      	b.n	800e326 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e46a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e46c:	f000 f953 	bl	800e716 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e470:	f000 fbd8 	bl	800ec24 <xTaskResumeAll>
 800e474:	e757      	b.n	800e326 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e478:	f000 f94d 	bl	800e716 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e47c:	f000 fbd2 	bl	800ec24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e480:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e482:	f000 f99a 	bl	800e7ba <prvIsQueueEmpty>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f43f af4c 	beq.w	800e326 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00d      	beq.n	800e4b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800e494:	f001 fac8 	bl	800fa28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e49a:	f000 f894 	bl	800e5c6 <prvGetDisinheritPriorityAfterTimeout>
 800e49e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f001 f89c 	bl	800f5e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e4ac:	f001 faee 	bl	800fa8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e4b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3738      	adds	r7, #56	; 0x38
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	e000ed04 	.word	0xe000ed04

0800e4c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b08e      	sub	sp, #56	; 0x38
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d10b      	bne.n	800e4ee <xQueueReceiveFromISR+0x2e>
 800e4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4da:	b672      	cpsid	i
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	b662      	cpsie	i
 800e4ea:	623b      	str	r3, [r7, #32]
 800e4ec:	e7fe      	b.n	800e4ec <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d103      	bne.n	800e4fc <xQueueReceiveFromISR+0x3c>
 800e4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d101      	bne.n	800e500 <xQueueReceiveFromISR+0x40>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e000      	b.n	800e502 <xQueueReceiveFromISR+0x42>
 800e500:	2300      	movs	r3, #0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d10b      	bne.n	800e51e <xQueueReceiveFromISR+0x5e>
 800e506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50a:	b672      	cpsid	i
 800e50c:	f383 8811 	msr	BASEPRI, r3
 800e510:	f3bf 8f6f 	isb	sy
 800e514:	f3bf 8f4f 	dsb	sy
 800e518:	b662      	cpsie	i
 800e51a:	61fb      	str	r3, [r7, #28]
 800e51c:	e7fe      	b.n	800e51c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e51e:	f001 fb63 	bl	800fbe8 <vPortValidateInterruptPriority>
	__asm volatile
 800e522:	f3ef 8211 	mrs	r2, BASEPRI
 800e526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52a:	b672      	cpsid	i
 800e52c:	f383 8811 	msr	BASEPRI, r3
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	f3bf 8f4f 	dsb	sy
 800e538:	b662      	cpsie	i
 800e53a:	61ba      	str	r2, [r7, #24]
 800e53c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e53e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e540:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e546:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d02f      	beq.n	800e5ae <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e558:	68b9      	ldr	r1, [r7, #8]
 800e55a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e55c:	f000 f8b5 	bl	800e6ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e562:	1e5a      	subs	r2, r3, #1
 800e564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e566:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e568:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e56c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e570:	d112      	bne.n	800e598 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d016      	beq.n	800e5a8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57c:	3310      	adds	r3, #16
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 fd4c 	bl	800f01c <xTaskRemoveFromEventList>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00e      	beq.n	800e5a8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00b      	beq.n	800e5a8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	601a      	str	r2, [r3, #0]
 800e596:	e007      	b.n	800e5a8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e59c:	3301      	adds	r3, #1
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	b25a      	sxtb	r2, r3
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e5ac:	e001      	b.n	800e5b2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	637b      	str	r3, [r7, #52]	; 0x34
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3738      	adds	r7, #56	; 0x38
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e5c6:	b480      	push	{r7}
 800e5c8:	b085      	sub	sp, #20
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d006      	beq.n	800e5e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f1c3 0307 	rsb	r3, r3, #7
 800e5e0:	60fb      	str	r3, [r7, #12]
 800e5e2:	e001      	b.n	800e5e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
	}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3714      	adds	r7, #20
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b086      	sub	sp, #24
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	60f8      	str	r0, [r7, #12]
 800e5fe:	60b9      	str	r1, [r7, #8]
 800e600:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e602:	2300      	movs	r3, #0
 800e604:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10d      	bne.n	800e630 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d14d      	bne.n	800e6b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	4618      	mov	r0, r3
 800e622:	f000 ff57 	bl	800f4d4 <xTaskPriorityDisinherit>
 800e626:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2200      	movs	r2, #0
 800e62c:	609a      	str	r2, [r3, #8]
 800e62e:	e043      	b.n	800e6b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d119      	bne.n	800e66a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6858      	ldr	r0, [r3, #4]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e63e:	461a      	mov	r2, r3
 800e640:	68b9      	ldr	r1, [r7, #8]
 800e642:	f00c fbda 	bl	801adfa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	685a      	ldr	r2, [r3, #4]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e64e:	441a      	add	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	685a      	ldr	r2, [r3, #4]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d32b      	bcc.n	800e6b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	605a      	str	r2, [r3, #4]
 800e668:	e026      	b.n	800e6b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68d8      	ldr	r0, [r3, #12]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e672:	461a      	mov	r2, r3
 800e674:	68b9      	ldr	r1, [r7, #8]
 800e676:	f00c fbc0 	bl	801adfa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	68da      	ldr	r2, [r3, #12]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e682:	425b      	negs	r3, r3
 800e684:	441a      	add	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	68da      	ldr	r2, [r3, #12]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	429a      	cmp	r2, r3
 800e694:	d207      	bcs.n	800e6a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	689a      	ldr	r2, [r3, #8]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69e:	425b      	negs	r3, r3
 800e6a0:	441a      	add	r2, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d105      	bne.n	800e6b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d002      	beq.n	800e6b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	1c5a      	adds	r2, r3, #1
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e6c0:	697b      	ldr	r3, [r7, #20]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3718      	adds	r7, #24
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b082      	sub	sp, #8
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
 800e6d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d018      	beq.n	800e70e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68da      	ldr	r2, [r3, #12]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e4:	441a      	add	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	68da      	ldr	r2, [r3, #12]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d303      	bcc.n	800e6fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	68d9      	ldr	r1, [r3, #12]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e706:	461a      	mov	r2, r3
 800e708:	6838      	ldr	r0, [r7, #0]
 800e70a:	f00c fb76 	bl	801adfa <memcpy>
	}
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b084      	sub	sp, #16
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e71e:	f001 f983 	bl	800fa28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e728:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e72a:	e011      	b.n	800e750 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e730:	2b00      	cmp	r3, #0
 800e732:	d012      	beq.n	800e75a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	3324      	adds	r3, #36	; 0x24
 800e738:	4618      	mov	r0, r3
 800e73a:	f000 fc6f 	bl	800f01c <xTaskRemoveFromEventList>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d001      	beq.n	800e748 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e744:	f000 fd48 	bl	800f1d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e748:	7bfb      	ldrb	r3, [r7, #15]
 800e74a:	3b01      	subs	r3, #1
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e754:	2b00      	cmp	r3, #0
 800e756:	dce9      	bgt.n	800e72c <prvUnlockQueue+0x16>
 800e758:	e000      	b.n	800e75c <prvUnlockQueue+0x46>
					break;
 800e75a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	22ff      	movs	r2, #255	; 0xff
 800e760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e764:	f001 f992 	bl	800fa8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e768:	f001 f95e 	bl	800fa28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e772:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e774:	e011      	b.n	800e79a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d012      	beq.n	800e7a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	3310      	adds	r3, #16
 800e782:	4618      	mov	r0, r3
 800e784:	f000 fc4a 	bl	800f01c <xTaskRemoveFromEventList>
 800e788:	4603      	mov	r3, r0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d001      	beq.n	800e792 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e78e:	f000 fd23 	bl	800f1d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e792:	7bbb      	ldrb	r3, [r7, #14]
 800e794:	3b01      	subs	r3, #1
 800e796:	b2db      	uxtb	r3, r3
 800e798:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e79a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	dce9      	bgt.n	800e776 <prvUnlockQueue+0x60>
 800e7a2:	e000      	b.n	800e7a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e7a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	22ff      	movs	r2, #255	; 0xff
 800e7aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e7ae:	f001 f96d 	bl	800fa8c <vPortExitCritical>
}
 800e7b2:	bf00      	nop
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b084      	sub	sp, #16
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7c2:	f001 f931 	bl	800fa28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d102      	bne.n	800e7d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	60fb      	str	r3, [r7, #12]
 800e7d2:	e001      	b.n	800e7d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e7d8:	f001 f958 	bl	800fa8c <vPortExitCritical>

	return xReturn;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e7e6:	b580      	push	{r7, lr}
 800e7e8:	b084      	sub	sp, #16
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7ee:	f001 f91b 	bl	800fa28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d102      	bne.n	800e804 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e7fe:	2301      	movs	r3, #1
 800e800:	60fb      	str	r3, [r7, #12]
 800e802:	e001      	b.n	800e808 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e804:	2300      	movs	r3, #0
 800e806:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e808:	f001 f940 	bl	800fa8c <vPortExitCritical>

	return xReturn;
 800e80c:	68fb      	ldr	r3, [r7, #12]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e816:	b580      	push	{r7, lr}
 800e818:	b08e      	sub	sp, #56	; 0x38
 800e81a:	af04      	add	r7, sp, #16
 800e81c:	60f8      	str	r0, [r7, #12]
 800e81e:	60b9      	str	r1, [r7, #8]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e826:	2b00      	cmp	r3, #0
 800e828:	d10b      	bne.n	800e842 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e82e:	b672      	cpsid	i
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	b662      	cpsie	i
 800e83e:	623b      	str	r3, [r7, #32]
 800e840:	e7fe      	b.n	800e840 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	2b00      	cmp	r3, #0
 800e846:	d10b      	bne.n	800e860 <xTaskCreateStatic+0x4a>
 800e848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84c:	b672      	cpsid	i
 800e84e:	f383 8811 	msr	BASEPRI, r3
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	b662      	cpsie	i
 800e85c:	61fb      	str	r3, [r7, #28]
 800e85e:	e7fe      	b.n	800e85e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e860:	2354      	movs	r3, #84	; 0x54
 800e862:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	2b54      	cmp	r3, #84	; 0x54
 800e868:	d00b      	beq.n	800e882 <xTaskCreateStatic+0x6c>
 800e86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86e:	b672      	cpsid	i
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	b662      	cpsie	i
 800e87e:	61bb      	str	r3, [r7, #24]
 800e880:	e7fe      	b.n	800e880 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e882:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e886:	2b00      	cmp	r3, #0
 800e888:	d01e      	beq.n	800e8c8 <xTaskCreateStatic+0xb2>
 800e88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d01b      	beq.n	800e8c8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e898:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	2202      	movs	r2, #2
 800e89e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	9303      	str	r3, [sp, #12]
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a8:	9302      	str	r3, [sp, #8]
 800e8aa:	f107 0314 	add.w	r3, r7, #20
 800e8ae:	9301      	str	r3, [sp, #4]
 800e8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	68b9      	ldr	r1, [r7, #8]
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f000 f850 	bl	800e960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8c2:	f000 f8d5 	bl	800ea70 <prvAddNewTaskToReadyList>
 800e8c6:	e001      	b.n	800e8cc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e8cc:	697b      	ldr	r3, [r7, #20]
	}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3728      	adds	r7, #40	; 0x28
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b08c      	sub	sp, #48	; 0x30
 800e8da:	af04      	add	r7, sp, #16
 800e8dc:	60f8      	str	r0, [r7, #12]
 800e8de:	60b9      	str	r1, [r7, #8]
 800e8e0:	603b      	str	r3, [r7, #0]
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e8e6:	88fb      	ldrh	r3, [r7, #6]
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f001 f9be 	bl	800fc6c <pvPortMalloc>
 800e8f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00e      	beq.n	800e916 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e8f8:	2054      	movs	r0, #84	; 0x54
 800e8fa:	f001 f9b7 	bl	800fc6c <pvPortMalloc>
 800e8fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d003      	beq.n	800e90e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	697a      	ldr	r2, [r7, #20]
 800e90a:	631a      	str	r2, [r3, #48]	; 0x30
 800e90c:	e005      	b.n	800e91a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e90e:	6978      	ldr	r0, [r7, #20]
 800e910:	f001 fa74 	bl	800fdfc <vPortFree>
 800e914:	e001      	b.n	800e91a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e916:	2300      	movs	r3, #0
 800e918:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d017      	beq.n	800e950 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	2200      	movs	r2, #0
 800e924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e928:	88fa      	ldrh	r2, [r7, #6]
 800e92a:	2300      	movs	r3, #0
 800e92c:	9303      	str	r3, [sp, #12]
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	9302      	str	r3, [sp, #8]
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	9301      	str	r3, [sp, #4]
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	68b9      	ldr	r1, [r7, #8]
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f000 f80e 	bl	800e960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e944:	69f8      	ldr	r0, [r7, #28]
 800e946:	f000 f893 	bl	800ea70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e94a:	2301      	movs	r3, #1
 800e94c:	61bb      	str	r3, [r7, #24]
 800e94e:	e002      	b.n	800e956 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e954:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e956:	69bb      	ldr	r3, [r7, #24]
	}
 800e958:	4618      	mov	r0, r3
 800e95a:	3720      	adds	r7, #32
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b088      	sub	sp, #32
 800e964:	af00      	add	r7, sp, #0
 800e966:	60f8      	str	r0, [r7, #12]
 800e968:	60b9      	str	r1, [r7, #8]
 800e96a:	607a      	str	r2, [r7, #4]
 800e96c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e972:	6879      	ldr	r1, [r7, #4]
 800e974:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e978:	440b      	add	r3, r1
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	f023 0307 	bic.w	r3, r3, #7
 800e986:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	f003 0307 	and.w	r3, r3, #7
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00b      	beq.n	800e9aa <prvInitialiseNewTask+0x4a>
 800e992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e996:	b672      	cpsid	i
 800e998:	f383 8811 	msr	BASEPRI, r3
 800e99c:	f3bf 8f6f 	isb	sy
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	b662      	cpsie	i
 800e9a6:	617b      	str	r3, [r7, #20]
 800e9a8:	e7fe      	b.n	800e9a8 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d01f      	beq.n	800e9f0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	61fb      	str	r3, [r7, #28]
 800e9b4:	e012      	b.n	800e9dc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e9b6:	68ba      	ldr	r2, [r7, #8]
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	7819      	ldrb	r1, [r3, #0]
 800e9be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	3334      	adds	r3, #52	; 0x34
 800e9c6:	460a      	mov	r2, r1
 800e9c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d006      	beq.n	800e9e4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	61fb      	str	r3, [r7, #28]
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	2b0f      	cmp	r3, #15
 800e9e0:	d9e9      	bls.n	800e9b6 <prvInitialiseNewTask+0x56>
 800e9e2:	e000      	b.n	800e9e6 <prvInitialiseNewTask+0x86>
			{
				break;
 800e9e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e9ee:	e003      	b.n	800e9f8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fa:	2b06      	cmp	r3, #6
 800e9fc:	d901      	bls.n	800ea02 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9fe:	2306      	movs	r3, #6
 800ea00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ea02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ea08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea0c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea10:	2200      	movs	r2, #0
 800ea12:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ea14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea16:	3304      	adds	r3, #4
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7fe ff07 	bl	800d82c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea20:	3318      	adds	r3, #24
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fe ff02 	bl	800d82c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea30:	f1c3 0207 	rsb	r2, r3, #7
 800ea34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ea38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	2200      	movs	r2, #0
 800ea42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea4c:	683a      	ldr	r2, [r7, #0]
 800ea4e:	68f9      	ldr	r1, [r7, #12]
 800ea50:	69b8      	ldr	r0, [r7, #24]
 800ea52:	f000 fedd 	bl	800f810 <pxPortInitialiseStack>
 800ea56:	4602      	mov	r2, r0
 800ea58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea68:	bf00      	nop
 800ea6a:	3720      	adds	r7, #32
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea78:	f000 ffd6 	bl	800fa28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea7c:	4b2a      	ldr	r3, [pc, #168]	; (800eb28 <prvAddNewTaskToReadyList+0xb8>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	3301      	adds	r3, #1
 800ea82:	4a29      	ldr	r2, [pc, #164]	; (800eb28 <prvAddNewTaskToReadyList+0xb8>)
 800ea84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea86:	4b29      	ldr	r3, [pc, #164]	; (800eb2c <prvAddNewTaskToReadyList+0xbc>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d109      	bne.n	800eaa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea8e:	4a27      	ldr	r2, [pc, #156]	; (800eb2c <prvAddNewTaskToReadyList+0xbc>)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea94:	4b24      	ldr	r3, [pc, #144]	; (800eb28 <prvAddNewTaskToReadyList+0xb8>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d110      	bne.n	800eabe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea9c:	f000 fbc0 	bl	800f220 <prvInitialiseTaskLists>
 800eaa0:	e00d      	b.n	800eabe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eaa2:	4b23      	ldr	r3, [pc, #140]	; (800eb30 <prvAddNewTaskToReadyList+0xc0>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d109      	bne.n	800eabe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eaaa:	4b20      	ldr	r3, [pc, #128]	; (800eb2c <prvAddNewTaskToReadyList+0xbc>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d802      	bhi.n	800eabe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eab8:	4a1c      	ldr	r2, [pc, #112]	; (800eb2c <prvAddNewTaskToReadyList+0xbc>)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eabe:	4b1d      	ldr	r3, [pc, #116]	; (800eb34 <prvAddNewTaskToReadyList+0xc4>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	3301      	adds	r3, #1
 800eac4:	4a1b      	ldr	r2, [pc, #108]	; (800eb34 <prvAddNewTaskToReadyList+0xc4>)
 800eac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eacc:	2201      	movs	r2, #1
 800eace:	409a      	lsls	r2, r3
 800ead0:	4b19      	ldr	r3, [pc, #100]	; (800eb38 <prvAddNewTaskToReadyList+0xc8>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4313      	orrs	r3, r2
 800ead6:	4a18      	ldr	r2, [pc, #96]	; (800eb38 <prvAddNewTaskToReadyList+0xc8>)
 800ead8:	6013      	str	r3, [r2, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	4a15      	ldr	r2, [pc, #84]	; (800eb3c <prvAddNewTaskToReadyList+0xcc>)
 800eae8:	441a      	add	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	3304      	adds	r3, #4
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	f7fe fea8 	bl	800d846 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eaf6:	f000 ffc9 	bl	800fa8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eafa:	4b0d      	ldr	r3, [pc, #52]	; (800eb30 <prvAddNewTaskToReadyList+0xc0>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d00e      	beq.n	800eb20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eb02:	4b0a      	ldr	r3, [pc, #40]	; (800eb2c <prvAddNewTaskToReadyList+0xbc>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d207      	bcs.n	800eb20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eb10:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <prvAddNewTaskToReadyList+0xd0>)
 800eb12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb16:	601a      	str	r2, [r3, #0]
 800eb18:	f3bf 8f4f 	dsb	sy
 800eb1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	20000438 	.word	0x20000438
 800eb2c:	20000338 	.word	0x20000338
 800eb30:	20000444 	.word	0x20000444
 800eb34:	20000454 	.word	0x20000454
 800eb38:	20000440 	.word	0x20000440
 800eb3c:	2000033c 	.word	0x2000033c
 800eb40:	e000ed04 	.word	0xe000ed04

0800eb44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b08a      	sub	sp, #40	; 0x28
 800eb48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eb52:	463a      	mov	r2, r7
 800eb54:	1d39      	adds	r1, r7, #4
 800eb56:	f107 0308 	add.w	r3, r7, #8
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7f9 fd60 	bl	8008620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	9202      	str	r2, [sp, #8]
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	2300      	movs	r3, #0
 800eb70:	460a      	mov	r2, r1
 800eb72:	491f      	ldr	r1, [pc, #124]	; (800ebf0 <vTaskStartScheduler+0xac>)
 800eb74:	481f      	ldr	r0, [pc, #124]	; (800ebf4 <vTaskStartScheduler+0xb0>)
 800eb76:	f7ff fe4e 	bl	800e816 <xTaskCreateStatic>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	4b1e      	ldr	r3, [pc, #120]	; (800ebf8 <vTaskStartScheduler+0xb4>)
 800eb7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eb80:	4b1d      	ldr	r3, [pc, #116]	; (800ebf8 <vTaskStartScheduler+0xb4>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	617b      	str	r3, [r7, #20]
 800eb8c:	e001      	b.n	800eb92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d117      	bne.n	800ebc8 <vTaskStartScheduler+0x84>
 800eb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9c:	b672      	cpsid	i
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	b662      	cpsie	i
 800ebac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ebae:	4b13      	ldr	r3, [pc, #76]	; (800ebfc <vTaskStartScheduler+0xb8>)
 800ebb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ebb6:	4b12      	ldr	r3, [pc, #72]	; (800ec00 <vTaskStartScheduler+0xbc>)
 800ebb8:	2201      	movs	r2, #1
 800ebba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ebbc:	4b11      	ldr	r3, [pc, #68]	; (800ec04 <vTaskStartScheduler+0xc0>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ebc2:	f000 feb5 	bl	800f930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ebc6:	e00f      	b.n	800ebe8 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebce:	d10b      	bne.n	800ebe8 <vTaskStartScheduler+0xa4>
 800ebd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd4:	b672      	cpsid	i
 800ebd6:	f383 8811 	msr	BASEPRI, r3
 800ebda:	f3bf 8f6f 	isb	sy
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	b662      	cpsie	i
 800ebe4:	60fb      	str	r3, [r7, #12]
 800ebe6:	e7fe      	b.n	800ebe6 <vTaskStartScheduler+0xa2>
}
 800ebe8:	bf00      	nop
 800ebea:	3718      	adds	r7, #24
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	0801bd18 	.word	0x0801bd18
 800ebf4:	0800f1f1 	.word	0x0800f1f1
 800ebf8:	2000045c 	.word	0x2000045c
 800ebfc:	20000458 	.word	0x20000458
 800ec00:	20000444 	.word	0x20000444
 800ec04:	2000043c 	.word	0x2000043c

0800ec08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec08:	b480      	push	{r7}
 800ec0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ec0c:	4b04      	ldr	r3, [pc, #16]	; (800ec20 <vTaskSuspendAll+0x18>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3301      	adds	r3, #1
 800ec12:	4a03      	ldr	r2, [pc, #12]	; (800ec20 <vTaskSuspendAll+0x18>)
 800ec14:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ec16:	bf00      	nop
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	20000460 	.word	0x20000460

0800ec24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec32:	4b42      	ldr	r3, [pc, #264]	; (800ed3c <xTaskResumeAll+0x118>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d10b      	bne.n	800ec52 <xTaskResumeAll+0x2e>
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	b672      	cpsid	i
 800ec40:	f383 8811 	msr	BASEPRI, r3
 800ec44:	f3bf 8f6f 	isb	sy
 800ec48:	f3bf 8f4f 	dsb	sy
 800ec4c:	b662      	cpsie	i
 800ec4e:	603b      	str	r3, [r7, #0]
 800ec50:	e7fe      	b.n	800ec50 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ec52:	f000 fee9 	bl	800fa28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ec56:	4b39      	ldr	r3, [pc, #228]	; (800ed3c <xTaskResumeAll+0x118>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	3b01      	subs	r3, #1
 800ec5c:	4a37      	ldr	r2, [pc, #220]	; (800ed3c <xTaskResumeAll+0x118>)
 800ec5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec60:	4b36      	ldr	r3, [pc, #216]	; (800ed3c <xTaskResumeAll+0x118>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d161      	bne.n	800ed2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ec68:	4b35      	ldr	r3, [pc, #212]	; (800ed40 <xTaskResumeAll+0x11c>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d05d      	beq.n	800ed2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ec70:	e02e      	b.n	800ecd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec72:	4b34      	ldr	r3, [pc, #208]	; (800ed44 <xTaskResumeAll+0x120>)
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	68db      	ldr	r3, [r3, #12]
 800ec78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	3318      	adds	r3, #24
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fe fe3e 	bl	800d900 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	3304      	adds	r3, #4
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fe fe39 	bl	800d900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec92:	2201      	movs	r2, #1
 800ec94:	409a      	lsls	r2, r3
 800ec96:	4b2c      	ldr	r3, [pc, #176]	; (800ed48 <xTaskResumeAll+0x124>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	4a2a      	ldr	r2, [pc, #168]	; (800ed48 <xTaskResumeAll+0x124>)
 800ec9e:	6013      	str	r3, [r2, #0]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eca4:	4613      	mov	r3, r2
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	4413      	add	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4a27      	ldr	r2, [pc, #156]	; (800ed4c <xTaskResumeAll+0x128>)
 800ecae:	441a      	add	r2, r3
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	4610      	mov	r0, r2
 800ecb8:	f7fe fdc5 	bl	800d846 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc0:	4b23      	ldr	r3, [pc, #140]	; (800ed50 <xTaskResumeAll+0x12c>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d302      	bcc.n	800ecd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ecca:	4b22      	ldr	r3, [pc, #136]	; (800ed54 <xTaskResumeAll+0x130>)
 800eccc:	2201      	movs	r2, #1
 800ecce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecd0:	4b1c      	ldr	r3, [pc, #112]	; (800ed44 <xTaskResumeAll+0x120>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1cc      	bne.n	800ec72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ecde:	f000 fb3b 	bl	800f358 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ece2:	4b1d      	ldr	r3, [pc, #116]	; (800ed58 <xTaskResumeAll+0x134>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d010      	beq.n	800ed10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ecee:	f000 f859 	bl	800eda4 <xTaskIncrementTick>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ecf8:	4b16      	ldr	r3, [pc, #88]	; (800ed54 <xTaskResumeAll+0x130>)
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	3b01      	subs	r3, #1
 800ed02:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1f1      	bne.n	800ecee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ed0a:	4b13      	ldr	r3, [pc, #76]	; (800ed58 <xTaskResumeAll+0x134>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed10:	4b10      	ldr	r3, [pc, #64]	; (800ed54 <xTaskResumeAll+0x130>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d009      	beq.n	800ed2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed1c:	4b0f      	ldr	r3, [pc, #60]	; (800ed5c <xTaskResumeAll+0x138>)
 800ed1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	f3bf 8f4f 	dsb	sy
 800ed28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed2c:	f000 feae 	bl	800fa8c <vPortExitCritical>

	return xAlreadyYielded;
 800ed30:	68bb      	ldr	r3, [r7, #8]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20000460 	.word	0x20000460
 800ed40:	20000438 	.word	0x20000438
 800ed44:	200003f8 	.word	0x200003f8
 800ed48:	20000440 	.word	0x20000440
 800ed4c:	2000033c 	.word	0x2000033c
 800ed50:	20000338 	.word	0x20000338
 800ed54:	2000044c 	.word	0x2000044c
 800ed58:	20000448 	.word	0x20000448
 800ed5c:	e000ed04 	.word	0xe000ed04

0800ed60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ed66:	4b05      	ldr	r3, [pc, #20]	; (800ed7c <xTaskGetTickCount+0x1c>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ed6c:	687b      	ldr	r3, [r7, #4]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	370c      	adds	r7, #12
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	2000043c 	.word	0x2000043c

0800ed80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed86:	f000 ff2f 	bl	800fbe8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ed8e:	4b04      	ldr	r3, [pc, #16]	; (800eda0 <xTaskGetTickCountFromISR+0x20>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed94:	683b      	ldr	r3, [r7, #0]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	2000043c 	.word	0x2000043c

0800eda4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edaa:	2300      	movs	r3, #0
 800edac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edae:	4b4f      	ldr	r3, [pc, #316]	; (800eeec <xTaskIncrementTick+0x148>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f040 8089 	bne.w	800eeca <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800edb8:	4b4d      	ldr	r3, [pc, #308]	; (800eef0 <xTaskIncrementTick+0x14c>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	3301      	adds	r3, #1
 800edbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800edc0:	4a4b      	ldr	r2, [pc, #300]	; (800eef0 <xTaskIncrementTick+0x14c>)
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d121      	bne.n	800ee10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800edcc:	4b49      	ldr	r3, [pc, #292]	; (800eef4 <xTaskIncrementTick+0x150>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00b      	beq.n	800edee <xTaskIncrementTick+0x4a>
 800edd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edda:	b672      	cpsid	i
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	b662      	cpsie	i
 800edea:	603b      	str	r3, [r7, #0]
 800edec:	e7fe      	b.n	800edec <xTaskIncrementTick+0x48>
 800edee:	4b41      	ldr	r3, [pc, #260]	; (800eef4 <xTaskIncrementTick+0x150>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	60fb      	str	r3, [r7, #12]
 800edf4:	4b40      	ldr	r3, [pc, #256]	; (800eef8 <xTaskIncrementTick+0x154>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a3e      	ldr	r2, [pc, #248]	; (800eef4 <xTaskIncrementTick+0x150>)
 800edfa:	6013      	str	r3, [r2, #0]
 800edfc:	4a3e      	ldr	r2, [pc, #248]	; (800eef8 <xTaskIncrementTick+0x154>)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6013      	str	r3, [r2, #0]
 800ee02:	4b3e      	ldr	r3, [pc, #248]	; (800eefc <xTaskIncrementTick+0x158>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3301      	adds	r3, #1
 800ee08:	4a3c      	ldr	r2, [pc, #240]	; (800eefc <xTaskIncrementTick+0x158>)
 800ee0a:	6013      	str	r3, [r2, #0]
 800ee0c:	f000 faa4 	bl	800f358 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee10:	4b3b      	ldr	r3, [pc, #236]	; (800ef00 <xTaskIncrementTick+0x15c>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	693a      	ldr	r2, [r7, #16]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d348      	bcc.n	800eeac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee1a:	4b36      	ldr	r3, [pc, #216]	; (800eef4 <xTaskIncrementTick+0x150>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d104      	bne.n	800ee2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee24:	4b36      	ldr	r3, [pc, #216]	; (800ef00 <xTaskIncrementTick+0x15c>)
 800ee26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee2a:	601a      	str	r2, [r3, #0]
					break;
 800ee2c:	e03e      	b.n	800eeac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee2e:	4b31      	ldr	r3, [pc, #196]	; (800eef4 <xTaskIncrementTick+0x150>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee3e:	693a      	ldr	r2, [r7, #16]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d203      	bcs.n	800ee4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee46:	4a2e      	ldr	r2, [pc, #184]	; (800ef00 <xTaskIncrementTick+0x15c>)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee4c:	e02e      	b.n	800eeac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	3304      	adds	r3, #4
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fe fd54 	bl	800d900 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d004      	beq.n	800ee6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	3318      	adds	r3, #24
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fe fd4b 	bl	800d900 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6e:	2201      	movs	r2, #1
 800ee70:	409a      	lsls	r2, r3
 800ee72:	4b24      	ldr	r3, [pc, #144]	; (800ef04 <xTaskIncrementTick+0x160>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	4a22      	ldr	r2, [pc, #136]	; (800ef04 <xTaskIncrementTick+0x160>)
 800ee7a:	6013      	str	r3, [r2, #0]
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee80:	4613      	mov	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	4413      	add	r3, r2
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	4a1f      	ldr	r2, [pc, #124]	; (800ef08 <xTaskIncrementTick+0x164>)
 800ee8a:	441a      	add	r2, r3
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	4619      	mov	r1, r3
 800ee92:	4610      	mov	r0, r2
 800ee94:	f7fe fcd7 	bl	800d846 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9c:	4b1b      	ldr	r3, [pc, #108]	; (800ef0c <xTaskIncrementTick+0x168>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d3b9      	bcc.n	800ee1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800eea6:	2301      	movs	r3, #1
 800eea8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eeaa:	e7b6      	b.n	800ee1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eeac:	4b17      	ldr	r3, [pc, #92]	; (800ef0c <xTaskIncrementTick+0x168>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb2:	4915      	ldr	r1, [pc, #84]	; (800ef08 <xTaskIncrementTick+0x164>)
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4413      	add	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	440b      	add	r3, r1
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d907      	bls.n	800eed4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800eec4:	2301      	movs	r3, #1
 800eec6:	617b      	str	r3, [r7, #20]
 800eec8:	e004      	b.n	800eed4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800eeca:	4b11      	ldr	r3, [pc, #68]	; (800ef10 <xTaskIncrementTick+0x16c>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3301      	adds	r3, #1
 800eed0:	4a0f      	ldr	r2, [pc, #60]	; (800ef10 <xTaskIncrementTick+0x16c>)
 800eed2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800eed4:	4b0f      	ldr	r3, [pc, #60]	; (800ef14 <xTaskIncrementTick+0x170>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d001      	beq.n	800eee0 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800eedc:	2301      	movs	r3, #1
 800eede:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800eee0:	697b      	ldr	r3, [r7, #20]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3718      	adds	r7, #24
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	20000460 	.word	0x20000460
 800eef0:	2000043c 	.word	0x2000043c
 800eef4:	200003f0 	.word	0x200003f0
 800eef8:	200003f4 	.word	0x200003f4
 800eefc:	20000450 	.word	0x20000450
 800ef00:	20000458 	.word	0x20000458
 800ef04:	20000440 	.word	0x20000440
 800ef08:	2000033c 	.word	0x2000033c
 800ef0c:	20000338 	.word	0x20000338
 800ef10:	20000448 	.word	0x20000448
 800ef14:	2000044c 	.word	0x2000044c

0800ef18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef1e:	4b27      	ldr	r3, [pc, #156]	; (800efbc <vTaskSwitchContext+0xa4>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d003      	beq.n	800ef2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef26:	4b26      	ldr	r3, [pc, #152]	; (800efc0 <vTaskSwitchContext+0xa8>)
 800ef28:	2201      	movs	r2, #1
 800ef2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef2c:	e040      	b.n	800efb0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800ef2e:	4b24      	ldr	r3, [pc, #144]	; (800efc0 <vTaskSwitchContext+0xa8>)
 800ef30:	2200      	movs	r2, #0
 800ef32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef34:	4b23      	ldr	r3, [pc, #140]	; (800efc4 <vTaskSwitchContext+0xac>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	fab3 f383 	clz	r3, r3
 800ef40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ef42:	7afb      	ldrb	r3, [r7, #11]
 800ef44:	f1c3 031f 	rsb	r3, r3, #31
 800ef48:	617b      	str	r3, [r7, #20]
 800ef4a:	491f      	ldr	r1, [pc, #124]	; (800efc8 <vTaskSwitchContext+0xb0>)
 800ef4c:	697a      	ldr	r2, [r7, #20]
 800ef4e:	4613      	mov	r3, r2
 800ef50:	009b      	lsls	r3, r3, #2
 800ef52:	4413      	add	r3, r2
 800ef54:	009b      	lsls	r3, r3, #2
 800ef56:	440b      	add	r3, r1
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10b      	bne.n	800ef76 <vTaskSwitchContext+0x5e>
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef62:	b672      	cpsid	i
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	b662      	cpsie	i
 800ef72:	607b      	str	r3, [r7, #4]
 800ef74:	e7fe      	b.n	800ef74 <vTaskSwitchContext+0x5c>
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4a11      	ldr	r2, [pc, #68]	; (800efc8 <vTaskSwitchContext+0xb0>)
 800ef82:	4413      	add	r3, r2
 800ef84:	613b      	str	r3, [r7, #16]
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	685a      	ldr	r2, [r3, #4]
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	605a      	str	r2, [r3, #4]
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	685a      	ldr	r2, [r3, #4]
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	3308      	adds	r3, #8
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d104      	bne.n	800efa6 <vTaskSwitchContext+0x8e>
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	685a      	ldr	r2, [r3, #4]
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	605a      	str	r2, [r3, #4]
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	4a07      	ldr	r2, [pc, #28]	; (800efcc <vTaskSwitchContext+0xb4>)
 800efae:	6013      	str	r3, [r2, #0]
}
 800efb0:	bf00      	nop
 800efb2:	371c      	adds	r7, #28
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr
 800efbc:	20000460 	.word	0x20000460
 800efc0:	2000044c 	.word	0x2000044c
 800efc4:	20000440 	.word	0x20000440
 800efc8:	2000033c 	.word	0x2000033c
 800efcc:	20000338 	.word	0x20000338

0800efd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10b      	bne.n	800eff8 <vTaskPlaceOnEventList+0x28>
 800efe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe4:	b672      	cpsid	i
 800efe6:	f383 8811 	msr	BASEPRI, r3
 800efea:	f3bf 8f6f 	isb	sy
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	b662      	cpsie	i
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	e7fe      	b.n	800eff6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eff8:	4b07      	ldr	r3, [pc, #28]	; (800f018 <vTaskPlaceOnEventList+0x48>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	3318      	adds	r3, #24
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7fe fc44 	bl	800d88e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f006:	2101      	movs	r1, #1
 800f008:	6838      	ldr	r0, [r7, #0]
 800f00a:	f000 fb9b 	bl	800f744 <prvAddCurrentTaskToDelayedList>
}
 800f00e:	bf00      	nop
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20000338 	.word	0x20000338

0800f01c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10b      	bne.n	800f04a <xTaskRemoveFromEventList+0x2e>
 800f032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f036:	b672      	cpsid	i
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	b662      	cpsie	i
 800f046:	60fb      	str	r3, [r7, #12]
 800f048:	e7fe      	b.n	800f048 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	3318      	adds	r3, #24
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fe fc56 	bl	800d900 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f054:	4b1d      	ldr	r3, [pc, #116]	; (800f0cc <xTaskRemoveFromEventList+0xb0>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d11c      	bne.n	800f096 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	3304      	adds	r3, #4
 800f060:	4618      	mov	r0, r3
 800f062:	f7fe fc4d 	bl	800d900 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f06a:	2201      	movs	r2, #1
 800f06c:	409a      	lsls	r2, r3
 800f06e:	4b18      	ldr	r3, [pc, #96]	; (800f0d0 <xTaskRemoveFromEventList+0xb4>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4313      	orrs	r3, r2
 800f074:	4a16      	ldr	r2, [pc, #88]	; (800f0d0 <xTaskRemoveFromEventList+0xb4>)
 800f076:	6013      	str	r3, [r2, #0]
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f07c:	4613      	mov	r3, r2
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4413      	add	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	4a13      	ldr	r2, [pc, #76]	; (800f0d4 <xTaskRemoveFromEventList+0xb8>)
 800f086:	441a      	add	r2, r3
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	3304      	adds	r3, #4
 800f08c:	4619      	mov	r1, r3
 800f08e:	4610      	mov	r0, r2
 800f090:	f7fe fbd9 	bl	800d846 <vListInsertEnd>
 800f094:	e005      	b.n	800f0a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	3318      	adds	r3, #24
 800f09a:	4619      	mov	r1, r3
 800f09c:	480e      	ldr	r0, [pc, #56]	; (800f0d8 <xTaskRemoveFromEventList+0xbc>)
 800f09e:	f7fe fbd2 	bl	800d846 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a6:	4b0d      	ldr	r3, [pc, #52]	; (800f0dc <xTaskRemoveFromEventList+0xc0>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d905      	bls.n	800f0bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f0b4:	4b0a      	ldr	r3, [pc, #40]	; (800f0e0 <xTaskRemoveFromEventList+0xc4>)
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	601a      	str	r2, [r3, #0]
 800f0ba:	e001      	b.n	800f0c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f0c0:	697b      	ldr	r3, [r7, #20]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3718      	adds	r7, #24
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}
 800f0ca:	bf00      	nop
 800f0cc:	20000460 	.word	0x20000460
 800f0d0:	20000440 	.word	0x20000440
 800f0d4:	2000033c 	.word	0x2000033c
 800f0d8:	200003f8 	.word	0x200003f8
 800f0dc:	20000338 	.word	0x20000338
 800f0e0:	2000044c 	.word	0x2000044c

0800f0e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f0ec:	4b06      	ldr	r3, [pc, #24]	; (800f108 <vTaskInternalSetTimeOutState+0x24>)
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f0f4:	4b05      	ldr	r3, [pc, #20]	; (800f10c <vTaskInternalSetTimeOutState+0x28>)
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	605a      	str	r2, [r3, #4]
}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr
 800f108:	20000450 	.word	0x20000450
 800f10c:	2000043c 	.word	0x2000043c

0800f110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b088      	sub	sp, #32
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d10b      	bne.n	800f138 <xTaskCheckForTimeOut+0x28>
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	b672      	cpsid	i
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	b662      	cpsie	i
 800f134:	613b      	str	r3, [r7, #16]
 800f136:	e7fe      	b.n	800f136 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d10b      	bne.n	800f156 <xTaskCheckForTimeOut+0x46>
 800f13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f142:	b672      	cpsid	i
 800f144:	f383 8811 	msr	BASEPRI, r3
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	b662      	cpsie	i
 800f152:	60fb      	str	r3, [r7, #12]
 800f154:	e7fe      	b.n	800f154 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800f156:	f000 fc67 	bl	800fa28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f15a:	4b1d      	ldr	r3, [pc, #116]	; (800f1d0 <xTaskCheckForTimeOut+0xc0>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	69ba      	ldr	r2, [r7, #24]
 800f166:	1ad3      	subs	r3, r2, r3
 800f168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f172:	d102      	bne.n	800f17a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f174:	2300      	movs	r3, #0
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	e023      	b.n	800f1c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	4b15      	ldr	r3, [pc, #84]	; (800f1d4 <xTaskCheckForTimeOut+0xc4>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	429a      	cmp	r2, r3
 800f184:	d007      	beq.n	800f196 <xTaskCheckForTimeOut+0x86>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	69ba      	ldr	r2, [r7, #24]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d302      	bcc.n	800f196 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f190:	2301      	movs	r3, #1
 800f192:	61fb      	str	r3, [r7, #28]
 800f194:	e015      	b.n	800f1c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	697a      	ldr	r2, [r7, #20]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d20b      	bcs.n	800f1b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	1ad2      	subs	r2, r2, r3
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f7ff ff99 	bl	800f0e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	61fb      	str	r3, [r7, #28]
 800f1b6:	e004      	b.n	800f1c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f1c2:	f000 fc63 	bl	800fa8c <vPortExitCritical>

	return xReturn;
 800f1c6:	69fb      	ldr	r3, [r7, #28]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3720      	adds	r7, #32
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	2000043c 	.word	0x2000043c
 800f1d4:	20000450 	.word	0x20000450

0800f1d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f1d8:	b480      	push	{r7}
 800f1da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f1dc:	4b03      	ldr	r3, [pc, #12]	; (800f1ec <vTaskMissedYield+0x14>)
 800f1de:	2201      	movs	r2, #1
 800f1e0:	601a      	str	r2, [r3, #0]
}
 800f1e2:	bf00      	nop
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr
 800f1ec:	2000044c 	.word	0x2000044c

0800f1f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f1f8:	f000 f852 	bl	800f2a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f1fc:	4b06      	ldr	r3, [pc, #24]	; (800f218 <prvIdleTask+0x28>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d9f9      	bls.n	800f1f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f204:	4b05      	ldr	r3, [pc, #20]	; (800f21c <prvIdleTask+0x2c>)
 800f206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f20a:	601a      	str	r2, [r3, #0]
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f214:	e7f0      	b.n	800f1f8 <prvIdleTask+0x8>
 800f216:	bf00      	nop
 800f218:	2000033c 	.word	0x2000033c
 800f21c:	e000ed04 	.word	0xe000ed04

0800f220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f226:	2300      	movs	r3, #0
 800f228:	607b      	str	r3, [r7, #4]
 800f22a:	e00c      	b.n	800f246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	4613      	mov	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	4413      	add	r3, r2
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	4a12      	ldr	r2, [pc, #72]	; (800f280 <prvInitialiseTaskLists+0x60>)
 800f238:	4413      	add	r3, r2
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fe fad6 	bl	800d7ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	3301      	adds	r3, #1
 800f244:	607b      	str	r3, [r7, #4]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b06      	cmp	r3, #6
 800f24a:	d9ef      	bls.n	800f22c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f24c:	480d      	ldr	r0, [pc, #52]	; (800f284 <prvInitialiseTaskLists+0x64>)
 800f24e:	f7fe facd 	bl	800d7ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f252:	480d      	ldr	r0, [pc, #52]	; (800f288 <prvInitialiseTaskLists+0x68>)
 800f254:	f7fe faca 	bl	800d7ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f258:	480c      	ldr	r0, [pc, #48]	; (800f28c <prvInitialiseTaskLists+0x6c>)
 800f25a:	f7fe fac7 	bl	800d7ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f25e:	480c      	ldr	r0, [pc, #48]	; (800f290 <prvInitialiseTaskLists+0x70>)
 800f260:	f7fe fac4 	bl	800d7ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f264:	480b      	ldr	r0, [pc, #44]	; (800f294 <prvInitialiseTaskLists+0x74>)
 800f266:	f7fe fac1 	bl	800d7ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f26a:	4b0b      	ldr	r3, [pc, #44]	; (800f298 <prvInitialiseTaskLists+0x78>)
 800f26c:	4a05      	ldr	r2, [pc, #20]	; (800f284 <prvInitialiseTaskLists+0x64>)
 800f26e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f270:	4b0a      	ldr	r3, [pc, #40]	; (800f29c <prvInitialiseTaskLists+0x7c>)
 800f272:	4a05      	ldr	r2, [pc, #20]	; (800f288 <prvInitialiseTaskLists+0x68>)
 800f274:	601a      	str	r2, [r3, #0]
}
 800f276:	bf00      	nop
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	2000033c 	.word	0x2000033c
 800f284:	200003c8 	.word	0x200003c8
 800f288:	200003dc 	.word	0x200003dc
 800f28c:	200003f8 	.word	0x200003f8
 800f290:	2000040c 	.word	0x2000040c
 800f294:	20000424 	.word	0x20000424
 800f298:	200003f0 	.word	0x200003f0
 800f29c:	200003f4 	.word	0x200003f4

0800f2a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f2a6:	e019      	b.n	800f2dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f2a8:	f000 fbbe 	bl	800fa28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2ac:	4b0f      	ldr	r3, [pc, #60]	; (800f2ec <prvCheckTasksWaitingTermination+0x4c>)
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	3304      	adds	r3, #4
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fe fb21 	bl	800d900 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f2be:	4b0c      	ldr	r3, [pc, #48]	; (800f2f0 <prvCheckTasksWaitingTermination+0x50>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	4a0a      	ldr	r2, [pc, #40]	; (800f2f0 <prvCheckTasksWaitingTermination+0x50>)
 800f2c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f2c8:	4b0a      	ldr	r3, [pc, #40]	; (800f2f4 <prvCheckTasksWaitingTermination+0x54>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	4a09      	ldr	r2, [pc, #36]	; (800f2f4 <prvCheckTasksWaitingTermination+0x54>)
 800f2d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f2d2:	f000 fbdb 	bl	800fa8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 f80e 	bl	800f2f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f2dc:	4b05      	ldr	r3, [pc, #20]	; (800f2f4 <prvCheckTasksWaitingTermination+0x54>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d1e1      	bne.n	800f2a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f2e4:	bf00      	nop
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	2000040c 	.word	0x2000040c
 800f2f0:	20000438 	.word	0x20000438
 800f2f4:	20000420 	.word	0x20000420

0800f2f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f306:	2b00      	cmp	r3, #0
 800f308:	d108      	bne.n	800f31c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f30e:	4618      	mov	r0, r3
 800f310:	f000 fd74 	bl	800fdfc <vPortFree>
				vPortFree( pxTCB );
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 fd71 	bl	800fdfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f31a:	e019      	b.n	800f350 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f322:	2b01      	cmp	r3, #1
 800f324:	d103      	bne.n	800f32e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 fd68 	bl	800fdfc <vPortFree>
	}
 800f32c:	e010      	b.n	800f350 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f334:	2b02      	cmp	r3, #2
 800f336:	d00b      	beq.n	800f350 <prvDeleteTCB+0x58>
 800f338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33c:	b672      	cpsid	i
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	b662      	cpsie	i
 800f34c:	60fb      	str	r3, [r7, #12]
 800f34e:	e7fe      	b.n	800f34e <prvDeleteTCB+0x56>
	}
 800f350:	bf00      	nop
 800f352:	3710      	adds	r7, #16
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f35e:	4b0c      	ldr	r3, [pc, #48]	; (800f390 <prvResetNextTaskUnblockTime+0x38>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d104      	bne.n	800f372 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f368:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <prvResetNextTaskUnblockTime+0x3c>)
 800f36a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f36e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f370:	e008      	b.n	800f384 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f372:	4b07      	ldr	r3, [pc, #28]	; (800f390 <prvResetNextTaskUnblockTime+0x38>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	4a04      	ldr	r2, [pc, #16]	; (800f394 <prvResetNextTaskUnblockTime+0x3c>)
 800f382:	6013      	str	r3, [r2, #0]
}
 800f384:	bf00      	nop
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr
 800f390:	200003f0 	.word	0x200003f0
 800f394:	20000458 	.word	0x20000458

0800f398 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f39e:	4b0b      	ldr	r3, [pc, #44]	; (800f3cc <xTaskGetSchedulerState+0x34>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d102      	bne.n	800f3ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	607b      	str	r3, [r7, #4]
 800f3aa:	e008      	b.n	800f3be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3ac:	4b08      	ldr	r3, [pc, #32]	; (800f3d0 <xTaskGetSchedulerState+0x38>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d102      	bne.n	800f3ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	607b      	str	r3, [r7, #4]
 800f3b8:	e001      	b.n	800f3be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f3be:	687b      	ldr	r3, [r7, #4]
	}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr
 800f3cc:	20000444 	.word	0x20000444
 800f3d0:	20000460 	.word	0x20000460

0800f3d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d069      	beq.n	800f4be <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ee:	4b36      	ldr	r3, [pc, #216]	; (800f4c8 <xTaskPriorityInherit+0xf4>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d259      	bcs.n	800f4ac <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	699b      	ldr	r3, [r3, #24]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	db06      	blt.n	800f40e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f400:	4b31      	ldr	r3, [pc, #196]	; (800f4c8 <xTaskPriorityInherit+0xf4>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f406:	f1c3 0207 	rsb	r2, r3, #7
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	6959      	ldr	r1, [r3, #20]
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f416:	4613      	mov	r3, r2
 800f418:	009b      	lsls	r3, r3, #2
 800f41a:	4413      	add	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	4a2b      	ldr	r2, [pc, #172]	; (800f4cc <xTaskPriorityInherit+0xf8>)
 800f420:	4413      	add	r3, r2
 800f422:	4299      	cmp	r1, r3
 800f424:	d13a      	bne.n	800f49c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	3304      	adds	r3, #4
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fe fa68 	bl	800d900 <uxListRemove>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d115      	bne.n	800f462 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f43a:	4924      	ldr	r1, [pc, #144]	; (800f4cc <xTaskPriorityInherit+0xf8>)
 800f43c:	4613      	mov	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	440b      	add	r3, r1
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10a      	bne.n	800f462 <xTaskPriorityInherit+0x8e>
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f450:	2201      	movs	r2, #1
 800f452:	fa02 f303 	lsl.w	r3, r2, r3
 800f456:	43da      	mvns	r2, r3
 800f458:	4b1d      	ldr	r3, [pc, #116]	; (800f4d0 <xTaskPriorityInherit+0xfc>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4013      	ands	r3, r2
 800f45e:	4a1c      	ldr	r2, [pc, #112]	; (800f4d0 <xTaskPriorityInherit+0xfc>)
 800f460:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f462:	4b19      	ldr	r3, [pc, #100]	; (800f4c8 <xTaskPriorityInherit+0xf4>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f470:	2201      	movs	r2, #1
 800f472:	409a      	lsls	r2, r3
 800f474:	4b16      	ldr	r3, [pc, #88]	; (800f4d0 <xTaskPriorityInherit+0xfc>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4313      	orrs	r3, r2
 800f47a:	4a15      	ldr	r2, [pc, #84]	; (800f4d0 <xTaskPriorityInherit+0xfc>)
 800f47c:	6013      	str	r3, [r2, #0]
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f482:	4613      	mov	r3, r2
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	4413      	add	r3, r2
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	4a10      	ldr	r2, [pc, #64]	; (800f4cc <xTaskPriorityInherit+0xf8>)
 800f48c:	441a      	add	r2, r3
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	3304      	adds	r3, #4
 800f492:	4619      	mov	r1, r3
 800f494:	4610      	mov	r0, r2
 800f496:	f7fe f9d6 	bl	800d846 <vListInsertEnd>
 800f49a:	e004      	b.n	800f4a6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f49c:	4b0a      	ldr	r3, [pc, #40]	; (800f4c8 <xTaskPriorityInherit+0xf4>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	60fb      	str	r3, [r7, #12]
 800f4aa:	e008      	b.n	800f4be <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4b0:	4b05      	ldr	r3, [pc, #20]	; (800f4c8 <xTaskPriorityInherit+0xf4>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d201      	bcs.n	800f4be <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f4be:	68fb      	ldr	r3, [r7, #12]
	}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	20000338 	.word	0x20000338
 800f4cc:	2000033c 	.word	0x2000033c
 800f4d0:	20000440 	.word	0x20000440

0800f4d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b086      	sub	sp, #24
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d070      	beq.n	800f5cc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f4ea:	4b3b      	ldr	r3, [pc, #236]	; (800f5d8 <xTaskPriorityDisinherit+0x104>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	693a      	ldr	r2, [r7, #16]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d00b      	beq.n	800f50c <xTaskPriorityDisinherit+0x38>
 800f4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f8:	b672      	cpsid	i
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	b662      	cpsie	i
 800f508:	60fb      	str	r3, [r7, #12]
 800f50a:	e7fe      	b.n	800f50a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f510:	2b00      	cmp	r3, #0
 800f512:	d10b      	bne.n	800f52c <xTaskPriorityDisinherit+0x58>
 800f514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f518:	b672      	cpsid	i
 800f51a:	f383 8811 	msr	BASEPRI, r3
 800f51e:	f3bf 8f6f 	isb	sy
 800f522:	f3bf 8f4f 	dsb	sy
 800f526:	b662      	cpsie	i
 800f528:	60bb      	str	r3, [r7, #8]
 800f52a:	e7fe      	b.n	800f52a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f530:	1e5a      	subs	r2, r3, #1
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f53e:	429a      	cmp	r2, r3
 800f540:	d044      	beq.n	800f5cc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f546:	2b00      	cmp	r3, #0
 800f548:	d140      	bne.n	800f5cc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	3304      	adds	r3, #4
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fe f9d6 	bl	800d900 <uxListRemove>
 800f554:	4603      	mov	r3, r0
 800f556:	2b00      	cmp	r3, #0
 800f558:	d115      	bne.n	800f586 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f55e:	491f      	ldr	r1, [pc, #124]	; (800f5dc <xTaskPriorityDisinherit+0x108>)
 800f560:	4613      	mov	r3, r2
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	4413      	add	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	440b      	add	r3, r1
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d10a      	bne.n	800f586 <xTaskPriorityDisinherit+0xb2>
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f574:	2201      	movs	r2, #1
 800f576:	fa02 f303 	lsl.w	r3, r2, r3
 800f57a:	43da      	mvns	r2, r3
 800f57c:	4b18      	ldr	r3, [pc, #96]	; (800f5e0 <xTaskPriorityDisinherit+0x10c>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4013      	ands	r3, r2
 800f582:	4a17      	ldr	r2, [pc, #92]	; (800f5e0 <xTaskPriorityDisinherit+0x10c>)
 800f584:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f592:	f1c3 0207 	rsb	r2, r3, #7
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59e:	2201      	movs	r2, #1
 800f5a0:	409a      	lsls	r2, r3
 800f5a2:	4b0f      	ldr	r3, [pc, #60]	; (800f5e0 <xTaskPriorityDisinherit+0x10c>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	4a0d      	ldr	r2, [pc, #52]	; (800f5e0 <xTaskPriorityDisinherit+0x10c>)
 800f5aa:	6013      	str	r3, [r2, #0]
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	009b      	lsls	r3, r3, #2
 800f5b4:	4413      	add	r3, r2
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	4a08      	ldr	r2, [pc, #32]	; (800f5dc <xTaskPriorityDisinherit+0x108>)
 800f5ba:	441a      	add	r2, r3
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	3304      	adds	r3, #4
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	f7fe f93f 	bl	800d846 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f5cc:	697b      	ldr	r3, [r7, #20]
	}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3718      	adds	r7, #24
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	20000338 	.word	0x20000338
 800f5dc:	2000033c 	.word	0x2000033c
 800f5e0:	20000440 	.word	0x20000440

0800f5e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b088      	sub	sp, #32
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f000 8085 	beq.w	800f708 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f602:	2b00      	cmp	r3, #0
 800f604:	d10b      	bne.n	800f61e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800f606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60a:	b672      	cpsid	i
 800f60c:	f383 8811 	msr	BASEPRI, r3
 800f610:	f3bf 8f6f 	isb	sy
 800f614:	f3bf 8f4f 	dsb	sy
 800f618:	b662      	cpsie	i
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	e7fe      	b.n	800f61c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f622:	683a      	ldr	r2, [r7, #0]
 800f624:	429a      	cmp	r2, r3
 800f626:	d902      	bls.n	800f62e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	61fb      	str	r3, [r7, #28]
 800f62c:	e002      	b.n	800f634 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f632:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f638:	69fa      	ldr	r2, [r7, #28]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d064      	beq.n	800f708 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f642:	697a      	ldr	r2, [r7, #20]
 800f644:	429a      	cmp	r2, r3
 800f646:	d15f      	bne.n	800f708 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f648:	4b31      	ldr	r3, [pc, #196]	; (800f710 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	69ba      	ldr	r2, [r7, #24]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d10b      	bne.n	800f66a <vTaskPriorityDisinheritAfterTimeout+0x86>
 800f652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f656:	b672      	cpsid	i
 800f658:	f383 8811 	msr	BASEPRI, r3
 800f65c:	f3bf 8f6f 	isb	sy
 800f660:	f3bf 8f4f 	dsb	sy
 800f664:	b662      	cpsie	i
 800f666:	60bb      	str	r3, [r7, #8]
 800f668:	e7fe      	b.n	800f668 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f66e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	69fa      	ldr	r2, [r7, #28]
 800f674:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	699b      	ldr	r3, [r3, #24]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	db04      	blt.n	800f688 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	f1c3 0207 	rsb	r2, r3, #7
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f688:	69bb      	ldr	r3, [r7, #24]
 800f68a:	6959      	ldr	r1, [r3, #20]
 800f68c:	693a      	ldr	r2, [r7, #16]
 800f68e:	4613      	mov	r3, r2
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4a1f      	ldr	r2, [pc, #124]	; (800f714 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f698:	4413      	add	r3, r2
 800f69a:	4299      	cmp	r1, r3
 800f69c:	d134      	bne.n	800f708 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	3304      	adds	r3, #4
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fe f92c 	bl	800d900 <uxListRemove>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d115      	bne.n	800f6da <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b2:	4918      	ldr	r1, [pc, #96]	; (800f714 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f6b4:	4613      	mov	r3, r2
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	4413      	add	r3, r2
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	440b      	add	r3, r1
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d10a      	bne.n	800f6da <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ce:	43da      	mvns	r2, r3
 800f6d0:	4b11      	ldr	r3, [pc, #68]	; (800f718 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4013      	ands	r3, r2
 800f6d6:	4a10      	ldr	r2, [pc, #64]	; (800f718 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f6d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f6da:	69bb      	ldr	r3, [r7, #24]
 800f6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6de:	2201      	movs	r2, #1
 800f6e0:	409a      	lsls	r2, r3
 800f6e2:	4b0d      	ldr	r3, [pc, #52]	; (800f718 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	4a0b      	ldr	r2, [pc, #44]	; (800f718 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f6ea:	6013      	str	r3, [r2, #0]
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	4413      	add	r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4a06      	ldr	r2, [pc, #24]	; (800f714 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f6fa:	441a      	add	r2, r3
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	3304      	adds	r3, #4
 800f700:	4619      	mov	r1, r3
 800f702:	4610      	mov	r0, r2
 800f704:	f7fe f89f 	bl	800d846 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f708:	bf00      	nop
 800f70a:	3720      	adds	r7, #32
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	20000338 	.word	0x20000338
 800f714:	2000033c 	.word	0x2000033c
 800f718:	20000440 	.word	0x20000440

0800f71c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f720:	4b07      	ldr	r3, [pc, #28]	; (800f740 <pvTaskIncrementMutexHeldCount+0x24>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d004      	beq.n	800f732 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f728:	4b05      	ldr	r3, [pc, #20]	; (800f740 <pvTaskIncrementMutexHeldCount+0x24>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f72e:	3201      	adds	r2, #1
 800f730:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f732:	4b03      	ldr	r3, [pc, #12]	; (800f740 <pvTaskIncrementMutexHeldCount+0x24>)
 800f734:	681b      	ldr	r3, [r3, #0]
	}
 800f736:	4618      	mov	r0, r3
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr
 800f740:	20000338 	.word	0x20000338

0800f744 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f74e:	4b29      	ldr	r3, [pc, #164]	; (800f7f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f754:	4b28      	ldr	r3, [pc, #160]	; (800f7f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	3304      	adds	r3, #4
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fe f8d0 	bl	800d900 <uxListRemove>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10b      	bne.n	800f77e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f766:	4b24      	ldr	r3, [pc, #144]	; (800f7f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f76c:	2201      	movs	r2, #1
 800f76e:	fa02 f303 	lsl.w	r3, r2, r3
 800f772:	43da      	mvns	r2, r3
 800f774:	4b21      	ldr	r3, [pc, #132]	; (800f7fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	4013      	ands	r3, r2
 800f77a:	4a20      	ldr	r2, [pc, #128]	; (800f7fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800f77c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f784:	d10a      	bne.n	800f79c <prvAddCurrentTaskToDelayedList+0x58>
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d007      	beq.n	800f79c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f78c:	4b1a      	ldr	r3, [pc, #104]	; (800f7f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	3304      	adds	r3, #4
 800f792:	4619      	mov	r1, r3
 800f794:	481a      	ldr	r0, [pc, #104]	; (800f800 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f796:	f7fe f856 	bl	800d846 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f79a:	e026      	b.n	800f7ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f7a4:	4b14      	ldr	r3, [pc, #80]	; (800f7f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	68ba      	ldr	r2, [r7, #8]
 800f7aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f7ac:	68ba      	ldr	r2, [r7, #8]
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d209      	bcs.n	800f7c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7b4:	4b13      	ldr	r3, [pc, #76]	; (800f804 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	4b0f      	ldr	r3, [pc, #60]	; (800f7f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	3304      	adds	r3, #4
 800f7be:	4619      	mov	r1, r3
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	f7fe f864 	bl	800d88e <vListInsert>
}
 800f7c6:	e010      	b.n	800f7ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7c8:	4b0f      	ldr	r3, [pc, #60]	; (800f808 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	4b0a      	ldr	r3, [pc, #40]	; (800f7f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	f7fe f85a 	bl	800d88e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f7da:	4b0c      	ldr	r3, [pc, #48]	; (800f80c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68ba      	ldr	r2, [r7, #8]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d202      	bcs.n	800f7ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f7e4:	4a09      	ldr	r2, [pc, #36]	; (800f80c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	6013      	str	r3, [r2, #0]
}
 800f7ea:	bf00      	nop
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	2000043c 	.word	0x2000043c
 800f7f8:	20000338 	.word	0x20000338
 800f7fc:	20000440 	.word	0x20000440
 800f800:	20000424 	.word	0x20000424
 800f804:	200003f4 	.word	0x200003f4
 800f808:	200003f0 	.word	0x200003f0
 800f80c:	20000458 	.word	0x20000458

0800f810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f810:	b480      	push	{r7}
 800f812:	b085      	sub	sp, #20
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3b04      	subs	r3, #4
 800f820:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	3b04      	subs	r3, #4
 800f82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	f023 0201 	bic.w	r2, r3, #1
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	3b04      	subs	r3, #4
 800f83e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f840:	4a0c      	ldr	r2, [pc, #48]	; (800f874 <pxPortInitialiseStack+0x64>)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	3b14      	subs	r3, #20
 800f84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	3b04      	subs	r3, #4
 800f856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f06f 0202 	mvn.w	r2, #2
 800f85e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	3b20      	subs	r3, #32
 800f864:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f866:	68fb      	ldr	r3, [r7, #12]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr
 800f874:	0800f879 	.word	0x0800f879

0800f878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f882:	4b13      	ldr	r3, [pc, #76]	; (800f8d0 <prvTaskExitError+0x58>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f88a:	d00b      	beq.n	800f8a4 <prvTaskExitError+0x2c>
 800f88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f890:	b672      	cpsid	i
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	b662      	cpsie	i
 800f8a0:	60fb      	str	r3, [r7, #12]
 800f8a2:	e7fe      	b.n	800f8a2 <prvTaskExitError+0x2a>
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	b672      	cpsid	i
 800f8aa:	f383 8811 	msr	BASEPRI, r3
 800f8ae:	f3bf 8f6f 	isb	sy
 800f8b2:	f3bf 8f4f 	dsb	sy
 800f8b6:	b662      	cpsie	i
 800f8b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f8ba:	bf00      	nop
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d0fc      	beq.n	800f8bc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f8c2:	bf00      	nop
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	2000004c 	.word	0x2000004c
	...

0800f8e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f8e0:	4b07      	ldr	r3, [pc, #28]	; (800f900 <pxCurrentTCBConst2>)
 800f8e2:	6819      	ldr	r1, [r3, #0]
 800f8e4:	6808      	ldr	r0, [r1, #0]
 800f8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ea:	f380 8809 	msr	PSP, r0
 800f8ee:	f3bf 8f6f 	isb	sy
 800f8f2:	f04f 0000 	mov.w	r0, #0
 800f8f6:	f380 8811 	msr	BASEPRI, r0
 800f8fa:	4770      	bx	lr
 800f8fc:	f3af 8000 	nop.w

0800f900 <pxCurrentTCBConst2>:
 800f900:	20000338 	.word	0x20000338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f904:	bf00      	nop
 800f906:	bf00      	nop

0800f908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f908:	4808      	ldr	r0, [pc, #32]	; (800f92c <prvPortStartFirstTask+0x24>)
 800f90a:	6800      	ldr	r0, [r0, #0]
 800f90c:	6800      	ldr	r0, [r0, #0]
 800f90e:	f380 8808 	msr	MSP, r0
 800f912:	f04f 0000 	mov.w	r0, #0
 800f916:	f380 8814 	msr	CONTROL, r0
 800f91a:	b662      	cpsie	i
 800f91c:	b661      	cpsie	f
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	df00      	svc	0
 800f928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f92a:	bf00      	nop
 800f92c:	e000ed08 	.word	0xe000ed08

0800f930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f936:	4b36      	ldr	r3, [pc, #216]	; (800fa10 <xPortStartScheduler+0xe0>)
 800f938:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	22ff      	movs	r2, #255	; 0xff
 800f946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f950:	78fb      	ldrb	r3, [r7, #3]
 800f952:	b2db      	uxtb	r3, r3
 800f954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f958:	b2da      	uxtb	r2, r3
 800f95a:	4b2e      	ldr	r3, [pc, #184]	; (800fa14 <xPortStartScheduler+0xe4>)
 800f95c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f95e:	4b2e      	ldr	r3, [pc, #184]	; (800fa18 <xPortStartScheduler+0xe8>)
 800f960:	2207      	movs	r2, #7
 800f962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f964:	e009      	b.n	800f97a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f966:	4b2c      	ldr	r3, [pc, #176]	; (800fa18 <xPortStartScheduler+0xe8>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	3b01      	subs	r3, #1
 800f96c:	4a2a      	ldr	r2, [pc, #168]	; (800fa18 <xPortStartScheduler+0xe8>)
 800f96e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f970:	78fb      	ldrb	r3, [r7, #3]
 800f972:	b2db      	uxtb	r3, r3
 800f974:	005b      	lsls	r3, r3, #1
 800f976:	b2db      	uxtb	r3, r3
 800f978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f97a:	78fb      	ldrb	r3, [r7, #3]
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f982:	2b80      	cmp	r3, #128	; 0x80
 800f984:	d0ef      	beq.n	800f966 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f986:	4b24      	ldr	r3, [pc, #144]	; (800fa18 <xPortStartScheduler+0xe8>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f1c3 0307 	rsb	r3, r3, #7
 800f98e:	2b04      	cmp	r3, #4
 800f990:	d00b      	beq.n	800f9aa <xPortStartScheduler+0x7a>
 800f992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f996:	b672      	cpsid	i
 800f998:	f383 8811 	msr	BASEPRI, r3
 800f99c:	f3bf 8f6f 	isb	sy
 800f9a0:	f3bf 8f4f 	dsb	sy
 800f9a4:	b662      	cpsie	i
 800f9a6:	60bb      	str	r3, [r7, #8]
 800f9a8:	e7fe      	b.n	800f9a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f9aa:	4b1b      	ldr	r3, [pc, #108]	; (800fa18 <xPortStartScheduler+0xe8>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	021b      	lsls	r3, r3, #8
 800f9b0:	4a19      	ldr	r2, [pc, #100]	; (800fa18 <xPortStartScheduler+0xe8>)
 800f9b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f9b4:	4b18      	ldr	r3, [pc, #96]	; (800fa18 <xPortStartScheduler+0xe8>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f9bc:	4a16      	ldr	r2, [pc, #88]	; (800fa18 <xPortStartScheduler+0xe8>)
 800f9be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	b2da      	uxtb	r2, r3
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f9c8:	4b14      	ldr	r3, [pc, #80]	; (800fa1c <xPortStartScheduler+0xec>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4a13      	ldr	r2, [pc, #76]	; (800fa1c <xPortStartScheduler+0xec>)
 800f9ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f9d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f9d4:	4b11      	ldr	r3, [pc, #68]	; (800fa1c <xPortStartScheduler+0xec>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a10      	ldr	r2, [pc, #64]	; (800fa1c <xPortStartScheduler+0xec>)
 800f9da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f9de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f9e0:	f000 f8d4 	bl	800fb8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f9e4:	4b0e      	ldr	r3, [pc, #56]	; (800fa20 <xPortStartScheduler+0xf0>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f9ea:	f000 f8f3 	bl	800fbd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f9ee:	4b0d      	ldr	r3, [pc, #52]	; (800fa24 <xPortStartScheduler+0xf4>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4a0c      	ldr	r2, [pc, #48]	; (800fa24 <xPortStartScheduler+0xf4>)
 800f9f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f9f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f9fa:	f7ff ff85 	bl	800f908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f9fe:	f7ff fa8b 	bl	800ef18 <vTaskSwitchContext>
	prvTaskExitError();
 800fa02:	f7ff ff39 	bl	800f878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa06:	2300      	movs	r3, #0
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	e000e400 	.word	0xe000e400
 800fa14:	20000464 	.word	0x20000464
 800fa18:	20000468 	.word	0x20000468
 800fa1c:	e000ed20 	.word	0xe000ed20
 800fa20:	2000004c 	.word	0x2000004c
 800fa24:	e000ef34 	.word	0xe000ef34

0800fa28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa32:	b672      	cpsid	i
 800fa34:	f383 8811 	msr	BASEPRI, r3
 800fa38:	f3bf 8f6f 	isb	sy
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	b662      	cpsie	i
 800fa42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa44:	4b0f      	ldr	r3, [pc, #60]	; (800fa84 <vPortEnterCritical+0x5c>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	4a0e      	ldr	r2, [pc, #56]	; (800fa84 <vPortEnterCritical+0x5c>)
 800fa4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa4e:	4b0d      	ldr	r3, [pc, #52]	; (800fa84 <vPortEnterCritical+0x5c>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	d110      	bne.n	800fa78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa56:	4b0c      	ldr	r3, [pc, #48]	; (800fa88 <vPortEnterCritical+0x60>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	b2db      	uxtb	r3, r3
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d00b      	beq.n	800fa78 <vPortEnterCritical+0x50>
 800fa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa64:	b672      	cpsid	i
 800fa66:	f383 8811 	msr	BASEPRI, r3
 800fa6a:	f3bf 8f6f 	isb	sy
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	b662      	cpsie	i
 800fa74:	603b      	str	r3, [r7, #0]
 800fa76:	e7fe      	b.n	800fa76 <vPortEnterCritical+0x4e>
	}
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr
 800fa84:	2000004c 	.word	0x2000004c
 800fa88:	e000ed04 	.word	0xe000ed04

0800fa8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa92:	4b12      	ldr	r3, [pc, #72]	; (800fadc <vPortExitCritical+0x50>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d10b      	bne.n	800fab2 <vPortExitCritical+0x26>
 800fa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa9e:	b672      	cpsid	i
 800faa0:	f383 8811 	msr	BASEPRI, r3
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	b662      	cpsie	i
 800faae:	607b      	str	r3, [r7, #4]
 800fab0:	e7fe      	b.n	800fab0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800fab2:	4b0a      	ldr	r3, [pc, #40]	; (800fadc <vPortExitCritical+0x50>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	3b01      	subs	r3, #1
 800fab8:	4a08      	ldr	r2, [pc, #32]	; (800fadc <vPortExitCritical+0x50>)
 800faba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fabc:	4b07      	ldr	r3, [pc, #28]	; (800fadc <vPortExitCritical+0x50>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d104      	bne.n	800face <vPortExitCritical+0x42>
 800fac4:	2300      	movs	r3, #0
 800fac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800face:	bf00      	nop
 800fad0:	370c      	adds	r7, #12
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	2000004c 	.word	0x2000004c

0800fae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fae0:	f3ef 8009 	mrs	r0, PSP
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	4b15      	ldr	r3, [pc, #84]	; (800fb40 <pxCurrentTCBConst>)
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	f01e 0f10 	tst.w	lr, #16
 800faf0:	bf08      	it	eq
 800faf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800faf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafa:	6010      	str	r0, [r2, #0]
 800fafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fb00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fb04:	b672      	cpsid	i
 800fb06:	f380 8811 	msr	BASEPRI, r0
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	f3bf 8f6f 	isb	sy
 800fb12:	b662      	cpsie	i
 800fb14:	f7ff fa00 	bl	800ef18 <vTaskSwitchContext>
 800fb18:	f04f 0000 	mov.w	r0, #0
 800fb1c:	f380 8811 	msr	BASEPRI, r0
 800fb20:	bc09      	pop	{r0, r3}
 800fb22:	6819      	ldr	r1, [r3, #0]
 800fb24:	6808      	ldr	r0, [r1, #0]
 800fb26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2a:	f01e 0f10 	tst.w	lr, #16
 800fb2e:	bf08      	it	eq
 800fb30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb34:	f380 8809 	msr	PSP, r0
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop

0800fb40 <pxCurrentTCBConst>:
 800fb40:	20000338 	.word	0x20000338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb44:	bf00      	nop
 800fb46:	bf00      	nop

0800fb48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb52:	b672      	cpsid	i
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	b662      	cpsie	i
 800fb62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb64:	f7ff f91e 	bl	800eda4 <xTaskIncrementTick>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d003      	beq.n	800fb76 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb6e:	4b06      	ldr	r3, [pc, #24]	; (800fb88 <xPortSysTickHandler+0x40>)
 800fb70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb74:	601a      	str	r2, [r3, #0]
 800fb76:	2300      	movs	r3, #0
 800fb78:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb80:	bf00      	nop
 800fb82:	3708      	adds	r7, #8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	e000ed04 	.word	0xe000ed04

0800fb8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb90:	4b0b      	ldr	r3, [pc, #44]	; (800fbc0 <vPortSetupTimerInterrupt+0x34>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb96:	4b0b      	ldr	r3, [pc, #44]	; (800fbc4 <vPortSetupTimerInterrupt+0x38>)
 800fb98:	2200      	movs	r2, #0
 800fb9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb9c:	4b0a      	ldr	r3, [pc, #40]	; (800fbc8 <vPortSetupTimerInterrupt+0x3c>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a0a      	ldr	r2, [pc, #40]	; (800fbcc <vPortSetupTimerInterrupt+0x40>)
 800fba2:	fba2 2303 	umull	r2, r3, r2, r3
 800fba6:	099b      	lsrs	r3, r3, #6
 800fba8:	4a09      	ldr	r2, [pc, #36]	; (800fbd0 <vPortSetupTimerInterrupt+0x44>)
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fbae:	4b04      	ldr	r3, [pc, #16]	; (800fbc0 <vPortSetupTimerInterrupt+0x34>)
 800fbb0:	2207      	movs	r2, #7
 800fbb2:	601a      	str	r2, [r3, #0]
}
 800fbb4:	bf00      	nop
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	e000e010 	.word	0xe000e010
 800fbc4:	e000e018 	.word	0xe000e018
 800fbc8:	20000040 	.word	0x20000040
 800fbcc:	10624dd3 	.word	0x10624dd3
 800fbd0:	e000e014 	.word	0xe000e014

0800fbd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fbd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fbe4 <vPortEnableVFP+0x10>
 800fbd8:	6801      	ldr	r1, [r0, #0]
 800fbda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fbde:	6001      	str	r1, [r0, #0]
 800fbe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fbe2:	bf00      	nop
 800fbe4:	e000ed88 	.word	0xe000ed88

0800fbe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fbe8:	b480      	push	{r7}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fbee:	f3ef 8305 	mrs	r3, IPSR
 800fbf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b0f      	cmp	r3, #15
 800fbf8:	d915      	bls.n	800fc26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fbfa:	4a18      	ldr	r2, [pc, #96]	; (800fc5c <vPortValidateInterruptPriority+0x74>)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	4413      	add	r3, r2
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fc04:	4b16      	ldr	r3, [pc, #88]	; (800fc60 <vPortValidateInterruptPriority+0x78>)
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	7afa      	ldrb	r2, [r7, #11]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d20b      	bcs.n	800fc26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc12:	b672      	cpsid	i
 800fc14:	f383 8811 	msr	BASEPRI, r3
 800fc18:	f3bf 8f6f 	isb	sy
 800fc1c:	f3bf 8f4f 	dsb	sy
 800fc20:	b662      	cpsie	i
 800fc22:	607b      	str	r3, [r7, #4]
 800fc24:	e7fe      	b.n	800fc24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fc26:	4b0f      	ldr	r3, [pc, #60]	; (800fc64 <vPortValidateInterruptPriority+0x7c>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fc2e:	4b0e      	ldr	r3, [pc, #56]	; (800fc68 <vPortValidateInterruptPriority+0x80>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d90b      	bls.n	800fc4e <vPortValidateInterruptPriority+0x66>
 800fc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3a:	b672      	cpsid	i
 800fc3c:	f383 8811 	msr	BASEPRI, r3
 800fc40:	f3bf 8f6f 	isb	sy
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	b662      	cpsie	i
 800fc4a:	603b      	str	r3, [r7, #0]
 800fc4c:	e7fe      	b.n	800fc4c <vPortValidateInterruptPriority+0x64>
	}
 800fc4e:	bf00      	nop
 800fc50:	3714      	adds	r7, #20
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	e000e3f0 	.word	0xe000e3f0
 800fc60:	20000464 	.word	0x20000464
 800fc64:	e000ed0c 	.word	0xe000ed0c
 800fc68:	20000468 	.word	0x20000468

0800fc6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b08a      	sub	sp, #40	; 0x28
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc74:	2300      	movs	r3, #0
 800fc76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc78:	f7fe ffc6 	bl	800ec08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc7c:	4b5a      	ldr	r3, [pc, #360]	; (800fde8 <pvPortMalloc+0x17c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d101      	bne.n	800fc88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc84:	f000 f916 	bl	800feb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc88:	4b58      	ldr	r3, [pc, #352]	; (800fdec <pvPortMalloc+0x180>)
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4013      	ands	r3, r2
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	f040 8090 	bne.w	800fdb6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d01e      	beq.n	800fcda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fc9c:	2208      	movs	r2, #8
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4413      	add	r3, r2
 800fca2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f003 0307 	and.w	r3, r3, #7
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d015      	beq.n	800fcda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f023 0307 	bic.w	r3, r3, #7
 800fcb4:	3308      	adds	r3, #8
 800fcb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f003 0307 	and.w	r3, r3, #7
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00b      	beq.n	800fcda <pvPortMalloc+0x6e>
 800fcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc6:	b672      	cpsid	i
 800fcc8:	f383 8811 	msr	BASEPRI, r3
 800fccc:	f3bf 8f6f 	isb	sy
 800fcd0:	f3bf 8f4f 	dsb	sy
 800fcd4:	b662      	cpsie	i
 800fcd6:	617b      	str	r3, [r7, #20]
 800fcd8:	e7fe      	b.n	800fcd8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d06a      	beq.n	800fdb6 <pvPortMalloc+0x14a>
 800fce0:	4b43      	ldr	r3, [pc, #268]	; (800fdf0 <pvPortMalloc+0x184>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d865      	bhi.n	800fdb6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fcea:	4b42      	ldr	r3, [pc, #264]	; (800fdf4 <pvPortMalloc+0x188>)
 800fcec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fcee:	4b41      	ldr	r3, [pc, #260]	; (800fdf4 <pvPortMalloc+0x188>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcf4:	e004      	b.n	800fd00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d903      	bls.n	800fd12 <pvPortMalloc+0xa6>
 800fd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1f1      	bne.n	800fcf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fd12:	4b35      	ldr	r3, [pc, #212]	; (800fde8 <pvPortMalloc+0x17c>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d04c      	beq.n	800fdb6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd1c:	6a3b      	ldr	r3, [r7, #32]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2208      	movs	r2, #8
 800fd22:	4413      	add	r3, r2
 800fd24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	6a3b      	ldr	r3, [r7, #32]
 800fd2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	685a      	ldr	r2, [r3, #4]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	1ad2      	subs	r2, r2, r3
 800fd36:	2308      	movs	r3, #8
 800fd38:	005b      	lsls	r3, r3, #1
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d920      	bls.n	800fd80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4413      	add	r3, r2
 800fd44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	f003 0307 	and.w	r3, r3, #7
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d00b      	beq.n	800fd68 <pvPortMalloc+0xfc>
 800fd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd54:	b672      	cpsid	i
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	b662      	cpsie	i
 800fd64:	613b      	str	r3, [r7, #16]
 800fd66:	e7fe      	b.n	800fd66 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	1ad2      	subs	r2, r2, r3
 800fd70:	69bb      	ldr	r3, [r7, #24]
 800fd72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd7a:	69b8      	ldr	r0, [r7, #24]
 800fd7c:	f000 f8fc 	bl	800ff78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd80:	4b1b      	ldr	r3, [pc, #108]	; (800fdf0 <pvPortMalloc+0x184>)
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	1ad3      	subs	r3, r2, r3
 800fd8a:	4a19      	ldr	r2, [pc, #100]	; (800fdf0 <pvPortMalloc+0x184>)
 800fd8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd8e:	4b18      	ldr	r3, [pc, #96]	; (800fdf0 <pvPortMalloc+0x184>)
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	4b19      	ldr	r3, [pc, #100]	; (800fdf8 <pvPortMalloc+0x18c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d203      	bcs.n	800fda2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd9a:	4b15      	ldr	r3, [pc, #84]	; (800fdf0 <pvPortMalloc+0x184>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4a16      	ldr	r2, [pc, #88]	; (800fdf8 <pvPortMalloc+0x18c>)
 800fda0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda4:	685a      	ldr	r2, [r3, #4]
 800fda6:	4b11      	ldr	r3, [pc, #68]	; (800fdec <pvPortMalloc+0x180>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	431a      	orrs	r2, r3
 800fdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fdb6:	f7fe ff35 	bl	800ec24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	f003 0307 	and.w	r3, r3, #7
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00b      	beq.n	800fddc <pvPortMalloc+0x170>
 800fdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc8:	b672      	cpsid	i
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	b662      	cpsie	i
 800fdd8:	60fb      	str	r3, [r7, #12]
 800fdda:	e7fe      	b.n	800fdda <pvPortMalloc+0x16e>
	return pvReturn;
 800fddc:	69fb      	ldr	r3, [r7, #28]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3728      	adds	r7, #40	; 0x28
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	20004074 	.word	0x20004074
 800fdec:	20004080 	.word	0x20004080
 800fdf0:	20004078 	.word	0x20004078
 800fdf4:	2000406c 	.word	0x2000406c
 800fdf8:	2000407c 	.word	0x2000407c

0800fdfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b086      	sub	sp, #24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d04a      	beq.n	800fea4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe0e:	2308      	movs	r3, #8
 800fe10:	425b      	negs	r3, r3
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	4413      	add	r3, r2
 800fe16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	685a      	ldr	r2, [r3, #4]
 800fe20:	4b22      	ldr	r3, [pc, #136]	; (800feac <vPortFree+0xb0>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4013      	ands	r3, r2
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10b      	bne.n	800fe42 <vPortFree+0x46>
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	b672      	cpsid	i
 800fe30:	f383 8811 	msr	BASEPRI, r3
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	b662      	cpsie	i
 800fe3e:	60fb      	str	r3, [r7, #12]
 800fe40:	e7fe      	b.n	800fe40 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00b      	beq.n	800fe62 <vPortFree+0x66>
 800fe4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4e:	b672      	cpsid	i
 800fe50:	f383 8811 	msr	BASEPRI, r3
 800fe54:	f3bf 8f6f 	isb	sy
 800fe58:	f3bf 8f4f 	dsb	sy
 800fe5c:	b662      	cpsie	i
 800fe5e:	60bb      	str	r3, [r7, #8]
 800fe60:	e7fe      	b.n	800fe60 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	685a      	ldr	r2, [r3, #4]
 800fe66:	4b11      	ldr	r3, [pc, #68]	; (800feac <vPortFree+0xb0>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4013      	ands	r3, r2
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d019      	beq.n	800fea4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d115      	bne.n	800fea4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	4b0b      	ldr	r3, [pc, #44]	; (800feac <vPortFree+0xb0>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	43db      	mvns	r3, r3
 800fe82:	401a      	ands	r2, r3
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe88:	f7fe febe 	bl	800ec08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	685a      	ldr	r2, [r3, #4]
 800fe90:	4b07      	ldr	r3, [pc, #28]	; (800feb0 <vPortFree+0xb4>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	4413      	add	r3, r2
 800fe96:	4a06      	ldr	r2, [pc, #24]	; (800feb0 <vPortFree+0xb4>)
 800fe98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe9a:	6938      	ldr	r0, [r7, #16]
 800fe9c:	f000 f86c 	bl	800ff78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fea0:	f7fe fec0 	bl	800ec24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fea4:	bf00      	nop
 800fea6:	3718      	adds	r7, #24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	20004080 	.word	0x20004080
 800feb0:	20004078 	.word	0x20004078

0800feb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800feb4:	b480      	push	{r7}
 800feb6:	b085      	sub	sp, #20
 800feb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800feba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800febe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fec0:	4b27      	ldr	r3, [pc, #156]	; (800ff60 <prvHeapInit+0xac>)
 800fec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f003 0307 	and.w	r3, r3, #7
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d00c      	beq.n	800fee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	3307      	adds	r3, #7
 800fed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f023 0307 	bic.w	r3, r3, #7
 800feda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fedc:	68ba      	ldr	r2, [r7, #8]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	4a1f      	ldr	r2, [pc, #124]	; (800ff60 <prvHeapInit+0xac>)
 800fee4:	4413      	add	r3, r2
 800fee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800feec:	4a1d      	ldr	r2, [pc, #116]	; (800ff64 <prvHeapInit+0xb0>)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fef2:	4b1c      	ldr	r3, [pc, #112]	; (800ff64 <prvHeapInit+0xb0>)
 800fef4:	2200      	movs	r2, #0
 800fef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	4413      	add	r3, r2
 800fefe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff00:	2208      	movs	r2, #8
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	1a9b      	subs	r3, r3, r2
 800ff06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f023 0307 	bic.w	r3, r3, #7
 800ff0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	4a15      	ldr	r2, [pc, #84]	; (800ff68 <prvHeapInit+0xb4>)
 800ff14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff16:	4b14      	ldr	r3, [pc, #80]	; (800ff68 <prvHeapInit+0xb4>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff1e:	4b12      	ldr	r3, [pc, #72]	; (800ff68 <prvHeapInit+0xb4>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2200      	movs	r2, #0
 800ff24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	1ad2      	subs	r2, r2, r3
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff34:	4b0c      	ldr	r3, [pc, #48]	; (800ff68 <prvHeapInit+0xb4>)
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	4a0a      	ldr	r2, [pc, #40]	; (800ff6c <prvHeapInit+0xb8>)
 800ff42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	4a09      	ldr	r2, [pc, #36]	; (800ff70 <prvHeapInit+0xbc>)
 800ff4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff4c:	4b09      	ldr	r3, [pc, #36]	; (800ff74 <prvHeapInit+0xc0>)
 800ff4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff52:	601a      	str	r2, [r3, #0]
}
 800ff54:	bf00      	nop
 800ff56:	3714      	adds	r7, #20
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	2000046c 	.word	0x2000046c
 800ff64:	2000406c 	.word	0x2000406c
 800ff68:	20004074 	.word	0x20004074
 800ff6c:	2000407c 	.word	0x2000407c
 800ff70:	20004078 	.word	0x20004078
 800ff74:	20004080 	.word	0x20004080

0800ff78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff80:	4b28      	ldr	r3, [pc, #160]	; (8010024 <prvInsertBlockIntoFreeList+0xac>)
 800ff82:	60fb      	str	r3, [r7, #12]
 800ff84:	e002      	b.n	800ff8c <prvInsertBlockIntoFreeList+0x14>
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d8f7      	bhi.n	800ff86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	4413      	add	r3, r2
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d108      	bne.n	800ffba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	685a      	ldr	r2, [r3, #4]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	441a      	add	r2, r3
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	441a      	add	r2, r3
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d118      	bne.n	8010000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	4b15      	ldr	r3, [pc, #84]	; (8010028 <prvInsertBlockIntoFreeList+0xb0>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d00d      	beq.n	800fff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	685a      	ldr	r2, [r3, #4]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	441a      	add	r2, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	e008      	b.n	8010008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fff6:	4b0c      	ldr	r3, [pc, #48]	; (8010028 <prvInsertBlockIntoFreeList+0xb0>)
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	601a      	str	r2, [r3, #0]
 800fffe:	e003      	b.n	8010008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	429a      	cmp	r2, r3
 801000e:	d002      	beq.n	8010016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010016:	bf00      	nop
 8010018:	3714      	adds	r7, #20
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	2000406c 	.word	0x2000406c
 8010028:	20004074 	.word	0x20004074

0801002c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010036:	f007 fe33 	bl	8017ca0 <sys_timeouts_sleeptime>
 801003a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010042:	d10b      	bne.n	801005c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010044:	4813      	ldr	r0, [pc, #76]	; (8010094 <tcpip_timeouts_mbox_fetch+0x68>)
 8010046:	f00a fe54 	bl	801acf2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801004a:	2200      	movs	r2, #0
 801004c:	6839      	ldr	r1, [r7, #0]
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f00a fdc6 	bl	801abe0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010054:	480f      	ldr	r0, [pc, #60]	; (8010094 <tcpip_timeouts_mbox_fetch+0x68>)
 8010056:	f00a fe3d 	bl	801acd4 <sys_mutex_lock>
    return;
 801005a:	e018      	b.n	801008e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d102      	bne.n	8010068 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010062:	f007 fde3 	bl	8017c2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010066:	e7e6      	b.n	8010036 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010068:	480a      	ldr	r0, [pc, #40]	; (8010094 <tcpip_timeouts_mbox_fetch+0x68>)
 801006a:	f00a fe42 	bl	801acf2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801006e:	68fa      	ldr	r2, [r7, #12]
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f00a fdb4 	bl	801abe0 <sys_arch_mbox_fetch>
 8010078:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801007a:	4806      	ldr	r0, [pc, #24]	; (8010094 <tcpip_timeouts_mbox_fetch+0x68>)
 801007c:	f00a fe2a 	bl	801acd4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010086:	d102      	bne.n	801008e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010088:	f007 fdd0 	bl	8017c2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801008c:	e7d3      	b.n	8010036 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	20007c64 	.word	0x20007c64

08010098 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80100a0:	4810      	ldr	r0, [pc, #64]	; (80100e4 <tcpip_thread+0x4c>)
 80100a2:	f00a fe17 	bl	801acd4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80100a6:	4b10      	ldr	r3, [pc, #64]	; (80100e8 <tcpip_thread+0x50>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d005      	beq.n	80100ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80100ae:	4b0e      	ldr	r3, [pc, #56]	; (80100e8 <tcpip_thread+0x50>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	4a0e      	ldr	r2, [pc, #56]	; (80100ec <tcpip_thread+0x54>)
 80100b4:	6812      	ldr	r2, [r2, #0]
 80100b6:	4610      	mov	r0, r2
 80100b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80100ba:	f107 030c 	add.w	r3, r7, #12
 80100be:	4619      	mov	r1, r3
 80100c0:	480b      	ldr	r0, [pc, #44]	; (80100f0 <tcpip_thread+0x58>)
 80100c2:	f7ff ffb3 	bl	801002c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d106      	bne.n	80100da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80100cc:	4b09      	ldr	r3, [pc, #36]	; (80100f4 <tcpip_thread+0x5c>)
 80100ce:	2291      	movs	r2, #145	; 0x91
 80100d0:	4909      	ldr	r1, [pc, #36]	; (80100f8 <tcpip_thread+0x60>)
 80100d2:	480a      	ldr	r0, [pc, #40]	; (80100fc <tcpip_thread+0x64>)
 80100d4:	f00a fea4 	bl	801ae20 <iprintf>
      continue;
 80100d8:	e003      	b.n	80100e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	4618      	mov	r0, r3
 80100de:	f000 f80f 	bl	8010100 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80100e2:	e7ea      	b.n	80100ba <tcpip_thread+0x22>
 80100e4:	20007c64 	.word	0x20007c64
 80100e8:	20004084 	.word	0x20004084
 80100ec:	20004088 	.word	0x20004088
 80100f0:	2000408c 	.word	0x2000408c
 80100f4:	0801bd20 	.word	0x0801bd20
 80100f8:	0801bd50 	.word	0x0801bd50
 80100fc:	0801bd70 	.word	0x0801bd70

08010100 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d018      	beq.n	8010142 <tcpip_thread_handle_msg+0x42>
 8010110:	2b02      	cmp	r3, #2
 8010112:	d021      	beq.n	8010158 <tcpip_thread_handle_msg+0x58>
 8010114:	2b00      	cmp	r3, #0
 8010116:	d126      	bne.n	8010166 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	6850      	ldr	r0, [r2, #4]
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	6892      	ldr	r2, [r2, #8]
 8010124:	4611      	mov	r1, r2
 8010126:	4798      	blx	r3
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d004      	beq.n	8010138 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	4618      	mov	r0, r3
 8010134:	f001 ff14 	bl	8011f60 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010138:	6879      	ldr	r1, [r7, #4]
 801013a:	2009      	movs	r0, #9
 801013c:	f001 f8e8 	bl	8011310 <memp_free>
      break;
 8010140:	e018      	b.n	8010174 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	6892      	ldr	r2, [r2, #8]
 801014a:	4610      	mov	r0, r2
 801014c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801014e:	6879      	ldr	r1, [r7, #4]
 8010150:	2008      	movs	r0, #8
 8010152:	f001 f8dd 	bl	8011310 <memp_free>
      break;
 8010156:	e00d      	b.n	8010174 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	6892      	ldr	r2, [r2, #8]
 8010160:	4610      	mov	r0, r2
 8010162:	4798      	blx	r3
      break;
 8010164:	e006      	b.n	8010174 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010166:	4b05      	ldr	r3, [pc, #20]	; (801017c <tcpip_thread_handle_msg+0x7c>)
 8010168:	22cf      	movs	r2, #207	; 0xcf
 801016a:	4905      	ldr	r1, [pc, #20]	; (8010180 <tcpip_thread_handle_msg+0x80>)
 801016c:	4805      	ldr	r0, [pc, #20]	; (8010184 <tcpip_thread_handle_msg+0x84>)
 801016e:	f00a fe57 	bl	801ae20 <iprintf>
      break;
 8010172:	bf00      	nop
  }
}
 8010174:	bf00      	nop
 8010176:	3708      	adds	r7, #8
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	0801bd20 	.word	0x0801bd20
 8010180:	0801bd50 	.word	0x0801bd50
 8010184:	0801bd70 	.word	0x0801bd70

08010188 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b086      	sub	sp, #24
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010194:	481a      	ldr	r0, [pc, #104]	; (8010200 <tcpip_inpkt+0x78>)
 8010196:	f00a fd62 	bl	801ac5e <sys_mbox_valid>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d105      	bne.n	80101ac <tcpip_inpkt+0x24>
 80101a0:	4b18      	ldr	r3, [pc, #96]	; (8010204 <tcpip_inpkt+0x7c>)
 80101a2:	22fc      	movs	r2, #252	; 0xfc
 80101a4:	4918      	ldr	r1, [pc, #96]	; (8010208 <tcpip_inpkt+0x80>)
 80101a6:	4819      	ldr	r0, [pc, #100]	; (801020c <tcpip_inpkt+0x84>)
 80101a8:	f00a fe3a 	bl	801ae20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80101ac:	2009      	movs	r0, #9
 80101ae:	f001 f85d 	bl	801126c <memp_malloc>
 80101b2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d102      	bne.n	80101c0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80101ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101be:	e01a      	b.n	80101f6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	2200      	movs	r2, #0
 80101c4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	68fa      	ldr	r2, [r7, #12]
 80101ca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80101d8:	6979      	ldr	r1, [r7, #20]
 80101da:	4809      	ldr	r0, [pc, #36]	; (8010200 <tcpip_inpkt+0x78>)
 80101dc:	f00a fce6 	bl	801abac <sys_mbox_trypost>
 80101e0:	4603      	mov	r3, r0
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d006      	beq.n	80101f4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80101e6:	6979      	ldr	r1, [r7, #20]
 80101e8:	2009      	movs	r0, #9
 80101ea:	f001 f891 	bl	8011310 <memp_free>
    return ERR_MEM;
 80101ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101f2:	e000      	b.n	80101f6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80101f4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3718      	adds	r7, #24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	2000408c 	.word	0x2000408c
 8010204:	0801bd20 	.word	0x0801bd20
 8010208:	0801bd98 	.word	0x0801bd98
 801020c:	0801bd70 	.word	0x0801bd70

08010210 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8010220:	f003 0318 	and.w	r3, r3, #24
 8010224:	2b00      	cmp	r3, #0
 8010226:	d006      	beq.n	8010236 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010228:	4a08      	ldr	r2, [pc, #32]	; (801024c <tcpip_input+0x3c>)
 801022a:	6839      	ldr	r1, [r7, #0]
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7ff ffab 	bl	8010188 <tcpip_inpkt>
 8010232:	4603      	mov	r3, r0
 8010234:	e005      	b.n	8010242 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010236:	4a06      	ldr	r2, [pc, #24]	; (8010250 <tcpip_input+0x40>)
 8010238:	6839      	ldr	r1, [r7, #0]
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff ffa4 	bl	8010188 <tcpip_inpkt>
 8010240:	4603      	mov	r3, r0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	0801a9bd 	.word	0x0801a9bd
 8010250:	080198dd 	.word	0x080198dd

08010254 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b084      	sub	sp, #16
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801025e:	4819      	ldr	r0, [pc, #100]	; (80102c4 <tcpip_try_callback+0x70>)
 8010260:	f00a fcfd 	bl	801ac5e <sys_mbox_valid>
 8010264:	4603      	mov	r3, r0
 8010266:	2b00      	cmp	r3, #0
 8010268:	d106      	bne.n	8010278 <tcpip_try_callback+0x24>
 801026a:	4b17      	ldr	r3, [pc, #92]	; (80102c8 <tcpip_try_callback+0x74>)
 801026c:	f240 125d 	movw	r2, #349	; 0x15d
 8010270:	4916      	ldr	r1, [pc, #88]	; (80102cc <tcpip_try_callback+0x78>)
 8010272:	4817      	ldr	r0, [pc, #92]	; (80102d0 <tcpip_try_callback+0x7c>)
 8010274:	f00a fdd4 	bl	801ae20 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010278:	2008      	movs	r0, #8
 801027a:	f000 fff7 	bl	801126c <memp_malloc>
 801027e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d102      	bne.n	801028c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801028a:	e017      	b.n	80102bc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2201      	movs	r2, #1
 8010290:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	683a      	ldr	r2, [r7, #0]
 801029c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801029e:	68f9      	ldr	r1, [r7, #12]
 80102a0:	4808      	ldr	r0, [pc, #32]	; (80102c4 <tcpip_try_callback+0x70>)
 80102a2:	f00a fc83 	bl	801abac <sys_mbox_trypost>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d006      	beq.n	80102ba <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80102ac:	68f9      	ldr	r1, [r7, #12]
 80102ae:	2008      	movs	r0, #8
 80102b0:	f001 f82e 	bl	8011310 <memp_free>
    return ERR_MEM;
 80102b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102b8:	e000      	b.n	80102bc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80102ba:	2300      	movs	r3, #0
}
 80102bc:	4618      	mov	r0, r3
 80102be:	3710      	adds	r7, #16
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	2000408c 	.word	0x2000408c
 80102c8:	0801bd20 	.word	0x0801bd20
 80102cc:	0801bd98 	.word	0x0801bd98
 80102d0:	0801bd70 	.word	0x0801bd70

080102d4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af02      	add	r7, sp, #8
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80102de:	f000 fb3b 	bl	8010958 <lwip_init>

  tcpip_init_done = initfunc;
 80102e2:	4a17      	ldr	r2, [pc, #92]	; (8010340 <tcpip_init+0x6c>)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80102e8:	4a16      	ldr	r2, [pc, #88]	; (8010344 <tcpip_init+0x70>)
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80102ee:	2106      	movs	r1, #6
 80102f0:	4815      	ldr	r0, [pc, #84]	; (8010348 <tcpip_init+0x74>)
 80102f2:	f00a fc39 	bl	801ab68 <sys_mbox_new>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d006      	beq.n	801030a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80102fc:	4b13      	ldr	r3, [pc, #76]	; (801034c <tcpip_init+0x78>)
 80102fe:	f240 2261 	movw	r2, #609	; 0x261
 8010302:	4913      	ldr	r1, [pc, #76]	; (8010350 <tcpip_init+0x7c>)
 8010304:	4813      	ldr	r0, [pc, #76]	; (8010354 <tcpip_init+0x80>)
 8010306:	f00a fd8b 	bl	801ae20 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801030a:	4813      	ldr	r0, [pc, #76]	; (8010358 <tcpip_init+0x84>)
 801030c:	f00a fcc6 	bl	801ac9c <sys_mutex_new>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d006      	beq.n	8010324 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010316:	4b0d      	ldr	r3, [pc, #52]	; (801034c <tcpip_init+0x78>)
 8010318:	f240 2265 	movw	r2, #613	; 0x265
 801031c:	490f      	ldr	r1, [pc, #60]	; (801035c <tcpip_init+0x88>)
 801031e:	480d      	ldr	r0, [pc, #52]	; (8010354 <tcpip_init+0x80>)
 8010320:	f00a fd7e 	bl	801ae20 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010324:	2300      	movs	r3, #0
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801032c:	2200      	movs	r2, #0
 801032e:	490c      	ldr	r1, [pc, #48]	; (8010360 <tcpip_init+0x8c>)
 8010330:	480c      	ldr	r0, [pc, #48]	; (8010364 <tcpip_init+0x90>)
 8010332:	f00a fceb 	bl	801ad0c <sys_thread_new>
}
 8010336:	bf00      	nop
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	20004084 	.word	0x20004084
 8010344:	20004088 	.word	0x20004088
 8010348:	2000408c 	.word	0x2000408c
 801034c:	0801bd20 	.word	0x0801bd20
 8010350:	0801bda8 	.word	0x0801bda8
 8010354:	0801bd70 	.word	0x0801bd70
 8010358:	20007c64 	.word	0x20007c64
 801035c:	0801bdcc 	.word	0x0801bdcc
 8010360:	08010099 	.word	0x08010099
 8010364:	0801bdf0 	.word	0x0801bdf0

08010368 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	4603      	mov	r3, r0
 8010370:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010372:	88fb      	ldrh	r3, [r7, #6]
 8010374:	021b      	lsls	r3, r3, #8
 8010376:	b21a      	sxth	r2, r3
 8010378:	88fb      	ldrh	r3, [r7, #6]
 801037a:	0a1b      	lsrs	r3, r3, #8
 801037c:	b29b      	uxth	r3, r3
 801037e:	b21b      	sxth	r3, r3
 8010380:	4313      	orrs	r3, r2
 8010382:	b21b      	sxth	r3, r3
 8010384:	b29b      	uxth	r3, r3
}
 8010386:	4618      	mov	r0, r3
 8010388:	370c      	adds	r7, #12
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr

08010392 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010392:	b480      	push	{r7}
 8010394:	b083      	sub	sp, #12
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	061a      	lsls	r2, r3, #24
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	021b      	lsls	r3, r3, #8
 80103a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80103a6:	431a      	orrs	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	0a1b      	lsrs	r3, r3, #8
 80103ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80103b0:	431a      	orrs	r2, r3
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	0e1b      	lsrs	r3, r3, #24
 80103b6:	4313      	orrs	r3, r2
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80103c4:	b480      	push	{r7}
 80103c6:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80103c8:	bf00      	nop
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr

080103d2 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80103d6:	f000 faab 	bl	8010930 <dns_check_entries>
}
 80103da:	bf00      	nop
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b090      	sub	sp, #64	; 0x40
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	4603      	mov	r3, r0
 80103e8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80103ea:	79fa      	ldrb	r2, [r7, #7]
 80103ec:	4613      	mov	r3, r2
 80103ee:	011b      	lsls	r3, r3, #4
 80103f0:	4413      	add	r3, r2
 80103f2:	011b      	lsls	r3, r3, #4
 80103f4:	4a6c      	ldr	r2, [pc, #432]	; (80105a8 <dns_send+0x1c8>)
 80103f6:	4413      	add	r3, r2
 80103f8:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80103fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fc:	7adb      	ldrb	r3, [r3, #11]
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d906      	bls.n	8010410 <dns_send+0x30>
 8010402:	4b6a      	ldr	r3, [pc, #424]	; (80105ac <dns_send+0x1cc>)
 8010404:	f240 22fa 	movw	r2, #762	; 0x2fa
 8010408:	4969      	ldr	r1, [pc, #420]	; (80105b0 <dns_send+0x1d0>)
 801040a:	486a      	ldr	r0, [pc, #424]	; (80105b4 <dns_send+0x1d4>)
 801040c:	f00a fd08 	bl	801ae20 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8010410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010412:	7adb      	ldrb	r3, [r3, #11]
 8010414:	461a      	mov	r2, r3
 8010416:	4b68      	ldr	r3, [pc, #416]	; (80105b8 <dns_send+0x1d8>)
 8010418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d109      	bne.n	8010434 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8010420:	79fb      	ldrb	r3, [r7, #7]
 8010422:	2100      	movs	r1, #0
 8010424:	4618      	mov	r0, r3
 8010426:	f000 f8cb 	bl	80105c0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 801042a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042c:	2200      	movs	r2, #0
 801042e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8010430:	2300      	movs	r3, #0
 8010432:	e0b4      	b.n	801059e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8010434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010436:	3310      	adds	r3, #16
 8010438:	4618      	mov	r0, r3
 801043a:	f7f7 ff01 	bl	8008240 <strlen>
 801043e:	4603      	mov	r3, r0
 8010440:	b29b      	uxth	r3, r3
 8010442:	3312      	adds	r3, #18
 8010444:	b29b      	uxth	r3, r3
 8010446:	f44f 7220 	mov.w	r2, #640	; 0x280
 801044a:	4619      	mov	r1, r3
 801044c:	2036      	movs	r0, #54	; 0x36
 801044e:	f001 faa7 	bl	80119a0 <pbuf_alloc>
 8010452:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8010454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010456:	2b00      	cmp	r3, #0
 8010458:	f000 8095 	beq.w	8010586 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801045c:	f107 0310 	add.w	r3, r7, #16
 8010460:	220c      	movs	r2, #12
 8010462:	2100      	movs	r1, #0
 8010464:	4618      	mov	r0, r3
 8010466:	f00a fcd3 	bl	801ae10 <memset>
    hdr.id = lwip_htons(entry->txid);
 801046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046c:	891b      	ldrh	r3, [r3, #8]
 801046e:	4618      	mov	r0, r3
 8010470:	f7ff ff7a 	bl	8010368 <lwip_htons>
 8010474:	4603      	mov	r3, r0
 8010476:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8010478:	2301      	movs	r3, #1
 801047a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 801047c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010480:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8010482:	f107 0310 	add.w	r3, r7, #16
 8010486:	220c      	movs	r2, #12
 8010488:	4619      	mov	r1, r3
 801048a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801048c:	f002 f81c 	bl	80124c8 <pbuf_take>
    hostname = entry->name;
 8010490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010492:	3310      	adds	r3, #16
 8010494:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8010496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010498:	3b01      	subs	r3, #1
 801049a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 801049c:	230c      	movs	r3, #12
 801049e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	3301      	adds	r3, #1
 80104a4:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 80104a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80104aa:	2300      	movs	r3, #0
 80104ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80104b0:	e007      	b.n	80104c2 <dns_send+0xe2>
        ++n;
 80104b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104b6:	3301      	adds	r3, #1
 80104b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80104bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104be:	3301      	adds	r3, #1
 80104c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80104c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	2b2e      	cmp	r3, #46	; 0x2e
 80104c8:	d003      	beq.n	80104d2 <dns_send+0xf2>
 80104ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1ef      	bne.n	80104b2 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80104d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80104da:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80104dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104e0:	4413      	add	r3, r2
 80104e2:	3301      	adds	r3, #1
 80104e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104e8:	da53      	bge.n	8010592 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80104ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80104ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80104f0:	4619      	mov	r1, r3
 80104f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104f4:	f002 f916 	bl	8012724 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80104f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80104fa:	3301      	adds	r3, #1
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010504:	f002 f872 	bl	80125ec <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8010508:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801050c:	b29a      	uxth	r2, r3
 801050e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010510:	4413      	add	r3, r2
 8010512:	b29b      	uxth	r3, r3
 8010514:	3301      	adds	r3, #1
 8010516:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8010518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d1bf      	bne.n	80104a0 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8010520:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010522:	2200      	movs	r2, #0
 8010524:	4619      	mov	r1, r3
 8010526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010528:	f002 f8fc 	bl	8012724 <pbuf_put_at>
    query_idx++;
 801052c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801052e:	3301      	adds	r3, #1
 8010530:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8010532:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010536:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8010538:	f44f 7380 	mov.w	r3, #256	; 0x100
 801053c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801053e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010540:	f107 010c 	add.w	r1, r7, #12
 8010544:	2204      	movs	r2, #4
 8010546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010548:	f002 f850 	bl	80125ec <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 801054c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054e:	7bdb      	ldrb	r3, [r3, #15]
 8010550:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8010554:	2335      	movs	r3, #53	; 0x35
 8010556:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8010558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055a:	7adb      	ldrb	r3, [r3, #11]
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4a16      	ldr	r2, [pc, #88]	; (80105b8 <dns_send+0x1d8>)
 8010560:	4413      	add	r3, r2
 8010562:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8010564:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010568:	4a14      	ldr	r2, [pc, #80]	; (80105bc <dns_send+0x1dc>)
 801056a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801056e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010570:	69fa      	ldr	r2, [r7, #28]
 8010572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010574:	f007 fd8e 	bl	8018094 <udp_sendto>
 8010578:	4603      	mov	r3, r0
 801057a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 801057e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010580:	f001 fcee 	bl	8011f60 <pbuf_free>
 8010584:	e002      	b.n	801058c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8010586:	23ff      	movs	r3, #255	; 0xff
 8010588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 801058c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010590:	e005      	b.n	801059e <dns_send+0x1be>
        goto overflow_return;
 8010592:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8010594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010596:	f001 fce3 	bl	8011f60 <pbuf_free>
  return ERR_VAL;
 801059a:	f06f 0305 	mvn.w	r3, #5
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3740      	adds	r7, #64	; 0x40
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	200040a0 	.word	0x200040a0
 80105ac:	0801be00 	.word	0x0801be00
 80105b0:	0801be30 	.word	0x0801be30
 80105b4:	0801be48 	.word	0x0801be48
 80105b8:	20004510 	.word	0x20004510
 80105bc:	20004090 	.word	0x20004090

080105c0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80105c0:	b590      	push	{r4, r7, lr}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	4603      	mov	r3, r0
 80105c8:	6039      	str	r1, [r7, #0]
 80105ca:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80105cc:	2300      	movs	r3, #0
 80105ce:	73fb      	strb	r3, [r7, #15]
 80105d0:	e03d      	b.n	801064e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80105d2:	7bfa      	ldrb	r2, [r7, #15]
 80105d4:	4957      	ldr	r1, [pc, #348]	; (8010734 <dns_call_found+0x174>)
 80105d6:	4613      	mov	r3, r2
 80105d8:	005b      	lsls	r3, r3, #1
 80105da:	4413      	add	r3, r2
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	440b      	add	r3, r1
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d030      	beq.n	8010648 <dns_call_found+0x88>
 80105e6:	7bfa      	ldrb	r2, [r7, #15]
 80105e8:	4952      	ldr	r1, [pc, #328]	; (8010734 <dns_call_found+0x174>)
 80105ea:	4613      	mov	r3, r2
 80105ec:	005b      	lsls	r3, r3, #1
 80105ee:	4413      	add	r3, r2
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	440b      	add	r3, r1
 80105f4:	3308      	adds	r3, #8
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	79fa      	ldrb	r2, [r7, #7]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d124      	bne.n	8010648 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80105fe:	7bfa      	ldrb	r2, [r7, #15]
 8010600:	494c      	ldr	r1, [pc, #304]	; (8010734 <dns_call_found+0x174>)
 8010602:	4613      	mov	r3, r2
 8010604:	005b      	lsls	r3, r3, #1
 8010606:	4413      	add	r3, r2
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	440b      	add	r3, r1
 801060c:	681c      	ldr	r4, [r3, #0]
 801060e:	79fa      	ldrb	r2, [r7, #7]
 8010610:	4613      	mov	r3, r2
 8010612:	011b      	lsls	r3, r3, #4
 8010614:	4413      	add	r3, r2
 8010616:	011b      	lsls	r3, r3, #4
 8010618:	3310      	adds	r3, #16
 801061a:	4a47      	ldr	r2, [pc, #284]	; (8010738 <dns_call_found+0x178>)
 801061c:	1898      	adds	r0, r3, r2
 801061e:	7bfa      	ldrb	r2, [r7, #15]
 8010620:	4944      	ldr	r1, [pc, #272]	; (8010734 <dns_call_found+0x174>)
 8010622:	4613      	mov	r3, r2
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	4413      	add	r3, r2
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	440b      	add	r3, r1
 801062c:	3304      	adds	r3, #4
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	461a      	mov	r2, r3
 8010632:	6839      	ldr	r1, [r7, #0]
 8010634:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8010636:	7bfa      	ldrb	r2, [r7, #15]
 8010638:	493e      	ldr	r1, [pc, #248]	; (8010734 <dns_call_found+0x174>)
 801063a:	4613      	mov	r3, r2
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	4413      	add	r3, r2
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	440b      	add	r3, r1
 8010644:	2200      	movs	r2, #0
 8010646:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010648:	7bfb      	ldrb	r3, [r7, #15]
 801064a:	3301      	adds	r3, #1
 801064c:	73fb      	strb	r3, [r7, #15]
 801064e:	7bfb      	ldrb	r3, [r7, #15]
 8010650:	2b03      	cmp	r3, #3
 8010652:	d9be      	bls.n	80105d2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010654:	2300      	movs	r3, #0
 8010656:	73fb      	strb	r3, [r7, #15]
 8010658:	e031      	b.n	80106be <dns_call_found+0xfe>
    if (i == idx) {
 801065a:	7bfa      	ldrb	r2, [r7, #15]
 801065c:	79fb      	ldrb	r3, [r7, #7]
 801065e:	429a      	cmp	r2, r3
 8010660:	d029      	beq.n	80106b6 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8010662:	7bfa      	ldrb	r2, [r7, #15]
 8010664:	4934      	ldr	r1, [pc, #208]	; (8010738 <dns_call_found+0x178>)
 8010666:	4613      	mov	r3, r2
 8010668:	011b      	lsls	r3, r3, #4
 801066a:	4413      	add	r3, r2
 801066c:	011b      	lsls	r3, r3, #4
 801066e:	440b      	add	r3, r1
 8010670:	330a      	adds	r3, #10
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	2b02      	cmp	r3, #2
 8010676:	d11f      	bne.n	80106b8 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8010678:	7bfa      	ldrb	r2, [r7, #15]
 801067a:	492f      	ldr	r1, [pc, #188]	; (8010738 <dns_call_found+0x178>)
 801067c:	4613      	mov	r3, r2
 801067e:	011b      	lsls	r3, r3, #4
 8010680:	4413      	add	r3, r2
 8010682:	011b      	lsls	r3, r3, #4
 8010684:	440b      	add	r3, r1
 8010686:	330f      	adds	r3, #15
 8010688:	7819      	ldrb	r1, [r3, #0]
 801068a:	79fa      	ldrb	r2, [r7, #7]
 801068c:	482a      	ldr	r0, [pc, #168]	; (8010738 <dns_call_found+0x178>)
 801068e:	4613      	mov	r3, r2
 8010690:	011b      	lsls	r3, r3, #4
 8010692:	4413      	add	r3, r2
 8010694:	011b      	lsls	r3, r3, #4
 8010696:	4403      	add	r3, r0
 8010698:	330f      	adds	r3, #15
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	4299      	cmp	r1, r3
 801069e:	d10b      	bne.n	80106b8 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80106a0:	79fa      	ldrb	r2, [r7, #7]
 80106a2:	4925      	ldr	r1, [pc, #148]	; (8010738 <dns_call_found+0x178>)
 80106a4:	4613      	mov	r3, r2
 80106a6:	011b      	lsls	r3, r3, #4
 80106a8:	4413      	add	r3, r2
 80106aa:	011b      	lsls	r3, r3, #4
 80106ac:	440b      	add	r3, r1
 80106ae:	330f      	adds	r3, #15
 80106b0:	2204      	movs	r2, #4
 80106b2:	701a      	strb	r2, [r3, #0]
        break;
 80106b4:	e006      	b.n	80106c4 <dns_call_found+0x104>
      continue; /* only check other requests */
 80106b6:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80106b8:	7bfb      	ldrb	r3, [r7, #15]
 80106ba:	3301      	adds	r3, #1
 80106bc:	73fb      	strb	r3, [r7, #15]
 80106be:	7bfb      	ldrb	r3, [r7, #15]
 80106c0:	2b03      	cmp	r3, #3
 80106c2:	d9ca      	bls.n	801065a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80106c4:	79fa      	ldrb	r2, [r7, #7]
 80106c6:	491c      	ldr	r1, [pc, #112]	; (8010738 <dns_call_found+0x178>)
 80106c8:	4613      	mov	r3, r2
 80106ca:	011b      	lsls	r3, r3, #4
 80106cc:	4413      	add	r3, r2
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	440b      	add	r3, r1
 80106d2:	330f      	adds	r3, #15
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	2b03      	cmp	r3, #3
 80106d8:	d827      	bhi.n	801072a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80106da:	79fa      	ldrb	r2, [r7, #7]
 80106dc:	4916      	ldr	r1, [pc, #88]	; (8010738 <dns_call_found+0x178>)
 80106de:	4613      	mov	r3, r2
 80106e0:	011b      	lsls	r3, r3, #4
 80106e2:	4413      	add	r3, r2
 80106e4:	011b      	lsls	r3, r3, #4
 80106e6:	440b      	add	r3, r1
 80106e8:	330f      	adds	r3, #15
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	461a      	mov	r2, r3
 80106ee:	4b13      	ldr	r3, [pc, #76]	; (801073c <dns_call_found+0x17c>)
 80106f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f007 ff0b 	bl	8018510 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80106fa:	79fa      	ldrb	r2, [r7, #7]
 80106fc:	490e      	ldr	r1, [pc, #56]	; (8010738 <dns_call_found+0x178>)
 80106fe:	4613      	mov	r3, r2
 8010700:	011b      	lsls	r3, r3, #4
 8010702:	4413      	add	r3, r2
 8010704:	011b      	lsls	r3, r3, #4
 8010706:	440b      	add	r3, r1
 8010708:	330f      	adds	r3, #15
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	4619      	mov	r1, r3
 801070e:	4b0b      	ldr	r3, [pc, #44]	; (801073c <dns_call_found+0x17c>)
 8010710:	2200      	movs	r2, #0
 8010712:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8010716:	79fa      	ldrb	r2, [r7, #7]
 8010718:	4907      	ldr	r1, [pc, #28]	; (8010738 <dns_call_found+0x178>)
 801071a:	4613      	mov	r3, r2
 801071c:	011b      	lsls	r3, r3, #4
 801071e:	4413      	add	r3, r2
 8010720:	011b      	lsls	r3, r3, #4
 8010722:	440b      	add	r3, r1
 8010724:	330f      	adds	r3, #15
 8010726:	2204      	movs	r2, #4
 8010728:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 801072a:	bf00      	nop
 801072c:	3714      	adds	r7, #20
 801072e:	46bd      	mov	sp, r7
 8010730:	bd90      	pop	{r4, r7, pc}
 8010732:	bf00      	nop
 8010734:	200044e0 	.word	0x200044e0
 8010738:	200040a0 	.word	0x200040a0
 801073c:	20004090 	.word	0x20004090

08010740 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8010746:	f00a fb83 	bl	801ae50 <rand>
 801074a:	4603      	mov	r3, r0
 801074c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801074e:	2300      	movs	r3, #0
 8010750:	71fb      	strb	r3, [r7, #7]
 8010752:	e01a      	b.n	801078a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8010754:	79fa      	ldrb	r2, [r7, #7]
 8010756:	4911      	ldr	r1, [pc, #68]	; (801079c <dns_create_txid+0x5c>)
 8010758:	4613      	mov	r3, r2
 801075a:	011b      	lsls	r3, r3, #4
 801075c:	4413      	add	r3, r2
 801075e:	011b      	lsls	r3, r3, #4
 8010760:	440b      	add	r3, r1
 8010762:	330a      	adds	r3, #10
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	2b02      	cmp	r3, #2
 8010768:	d10c      	bne.n	8010784 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 801076a:	79fa      	ldrb	r2, [r7, #7]
 801076c:	490b      	ldr	r1, [pc, #44]	; (801079c <dns_create_txid+0x5c>)
 801076e:	4613      	mov	r3, r2
 8010770:	011b      	lsls	r3, r3, #4
 8010772:	4413      	add	r3, r2
 8010774:	011b      	lsls	r3, r3, #4
 8010776:	440b      	add	r3, r1
 8010778:	3308      	adds	r3, #8
 801077a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801077c:	88ba      	ldrh	r2, [r7, #4]
 801077e:	429a      	cmp	r2, r3
 8010780:	d100      	bne.n	8010784 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8010782:	e7e0      	b.n	8010746 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8010784:	79fb      	ldrb	r3, [r7, #7]
 8010786:	3301      	adds	r3, #1
 8010788:	71fb      	strb	r3, [r7, #7]
 801078a:	79fb      	ldrb	r3, [r7, #7]
 801078c:	2b03      	cmp	r3, #3
 801078e:	d9e1      	bls.n	8010754 <dns_create_txid+0x14>
    }
  }

  return txid;
 8010790:	88bb      	ldrh	r3, [r7, #4]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3708      	adds	r7, #8
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	200040a0 	.word	0x200040a0

080107a0 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b085      	sub	sp, #20
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00e      	beq.n	80107d0 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	7adb      	ldrb	r3, [r3, #11]
 80107b6:	3301      	adds	r3, #1
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	dc09      	bgt.n	80107d0 <dns_backupserver_available+0x30>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	7adb      	ldrb	r3, [r3, #11]
 80107c0:	3301      	adds	r3, #1
 80107c2:	4a07      	ldr	r2, [pc, #28]	; (80107e0 <dns_backupserver_available+0x40>)
 80107c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d001      	beq.n	80107d0 <dns_backupserver_available+0x30>
      ret = 1;
 80107cc:	2301      	movs	r3, #1
 80107ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80107d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3714      	adds	r7, #20
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop
 80107e0:	20004510 	.word	0x20004510

080107e4 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	4603      	mov	r3, r0
 80107ec:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80107ee:	79fa      	ldrb	r2, [r7, #7]
 80107f0:	4613      	mov	r3, r2
 80107f2:	011b      	lsls	r3, r3, #4
 80107f4:	4413      	add	r3, r2
 80107f6:	011b      	lsls	r3, r3, #4
 80107f8:	4a48      	ldr	r2, [pc, #288]	; (801091c <dns_check_entry+0x138>)
 80107fa:	4413      	add	r3, r2
 80107fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80107fe:	79fb      	ldrb	r3, [r7, #7]
 8010800:	2b03      	cmp	r3, #3
 8010802:	d906      	bls.n	8010812 <dns_check_entry+0x2e>
 8010804:	4b46      	ldr	r3, [pc, #280]	; (8010920 <dns_check_entry+0x13c>)
 8010806:	f240 421c 	movw	r2, #1052	; 0x41c
 801080a:	4946      	ldr	r1, [pc, #280]	; (8010924 <dns_check_entry+0x140>)
 801080c:	4846      	ldr	r0, [pc, #280]	; (8010928 <dns_check_entry+0x144>)
 801080e:	f00a fb07 	bl	801ae20 <iprintf>

  switch (entry->state) {
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	7a9b      	ldrb	r3, [r3, #10]
 8010816:	2b03      	cmp	r3, #3
 8010818:	d86f      	bhi.n	80108fa <dns_check_entry+0x116>
 801081a:	a201      	add	r2, pc, #4	; (adr r2, 8010820 <dns_check_entry+0x3c>)
 801081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010820:	0801090b 	.word	0x0801090b
 8010824:	08010831 	.word	0x08010831
 8010828:	08010863 	.word	0x08010863
 801082c:	080108d9 	.word	0x080108d9
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8010830:	f7ff ff86 	bl	8010740 <dns_create_txid>
 8010834:	4603      	mov	r3, r0
 8010836:	461a      	mov	r2, r3
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2202      	movs	r2, #2
 8010840:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2200      	movs	r2, #0
 8010846:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2201      	movs	r2, #1
 801084c:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2200      	movs	r2, #0
 8010852:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8010854:	79fb      	ldrb	r3, [r7, #7]
 8010856:	4618      	mov	r0, r3
 8010858:	f7ff fdc2 	bl	80103e0 <dns_send>
 801085c:	4603      	mov	r3, r0
 801085e:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8010860:	e058      	b.n	8010914 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	7b1b      	ldrb	r3, [r3, #12]
 8010866:	3b01      	subs	r3, #1
 8010868:	b2da      	uxtb	r2, r3
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	731a      	strb	r2, [r3, #12]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	7b1b      	ldrb	r3, [r3, #12]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d14b      	bne.n	801090e <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	7b5b      	ldrb	r3, [r3, #13]
 801087a:	3301      	adds	r3, #1
 801087c:	b2da      	uxtb	r2, r3
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	735a      	strb	r2, [r3, #13]
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	7b5b      	ldrb	r3, [r3, #13]
 8010886:	2b04      	cmp	r3, #4
 8010888:	d11b      	bne.n	80108c2 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f7ff ff88 	bl	80107a0 <dns_backupserver_available>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00c      	beq.n	80108b0 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	7adb      	ldrb	r3, [r3, #11]
 801089a:	3301      	adds	r3, #1
 801089c:	b2da      	uxtb	r2, r3
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2201      	movs	r2, #1
 80108a6:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2200      	movs	r2, #0
 80108ac:	735a      	strb	r2, [r3, #13]
 80108ae:	e00c      	b.n	80108ca <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	2100      	movs	r1, #0
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7ff fe83 	bl	80105c0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2200      	movs	r2, #0
 80108be:	729a      	strb	r2, [r3, #10]
            break;
 80108c0:	e028      	b.n	8010914 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	7b5a      	ldrb	r2, [r3, #13]
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 80108ca:	79fb      	ldrb	r3, [r7, #7]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7ff fd87 	bl	80103e0 <dns_send>
 80108d2:	4603      	mov	r3, r0
 80108d4:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 80108d6:	e01a      	b.n	801090e <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d008      	beq.n	80108f2 <dns_check_entry+0x10e>
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	1e5a      	subs	r2, r3, #1
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	601a      	str	r2, [r3, #0]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d10f      	bne.n	8010912 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2200      	movs	r2, #0
 80108f6:	729a      	strb	r2, [r3, #10]
      }
      break;
 80108f8:	e00b      	b.n	8010912 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80108fa:	4b09      	ldr	r3, [pc, #36]	; (8010920 <dns_check_entry+0x13c>)
 80108fc:	f240 425b 	movw	r2, #1115	; 0x45b
 8010900:	490a      	ldr	r1, [pc, #40]	; (801092c <dns_check_entry+0x148>)
 8010902:	4809      	ldr	r0, [pc, #36]	; (8010928 <dns_check_entry+0x144>)
 8010904:	f00a fa8c 	bl	801ae20 <iprintf>
      break;
 8010908:	e004      	b.n	8010914 <dns_check_entry+0x130>
      break;
 801090a:	bf00      	nop
 801090c:	e002      	b.n	8010914 <dns_check_entry+0x130>
      break;
 801090e:	bf00      	nop
 8010910:	e000      	b.n	8010914 <dns_check_entry+0x130>
      break;
 8010912:	bf00      	nop
  }
}
 8010914:	bf00      	nop
 8010916:	3710      	adds	r7, #16
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}
 801091c:	200040a0 	.word	0x200040a0
 8010920:	0801be00 	.word	0x0801be00
 8010924:	0801be70 	.word	0x0801be70
 8010928:	0801be48 	.word	0x0801be48
 801092c:	0801be8c 	.word	0x0801be8c

08010930 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010936:	2300      	movs	r3, #0
 8010938:	71fb      	strb	r3, [r7, #7]
 801093a:	e006      	b.n	801094a <dns_check_entries+0x1a>
    dns_check_entry(i);
 801093c:	79fb      	ldrb	r3, [r7, #7]
 801093e:	4618      	mov	r0, r3
 8010940:	f7ff ff50 	bl	80107e4 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010944:	79fb      	ldrb	r3, [r7, #7]
 8010946:	3301      	adds	r3, #1
 8010948:	71fb      	strb	r3, [r7, #7]
 801094a:	79fb      	ldrb	r3, [r7, #7]
 801094c:	2b03      	cmp	r3, #3
 801094e:	d9f5      	bls.n	801093c <dns_check_entries+0xc>
  }
}
 8010950:	bf00      	nop
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801095e:	2300      	movs	r3, #0
 8010960:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010962:	f00a f98d 	bl	801ac80 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010966:	f000 f8d7 	bl	8010b18 <mem_init>
  memp_init();
 801096a:	f000 fc33 	bl	80111d4 <memp_init>
  pbuf_init();
  netif_init();
 801096e:	f000 fcf9 	bl	8011364 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010972:	f007 f9cd 	bl	8017d10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010976:	f001 fef7 	bl	8012768 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 801097a:	f7ff fd23 	bl	80103c4 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801097e:	f007 f90f 	bl	8017ba0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010982:	bf00      	nop
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
	...

0801098c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	4603      	mov	r3, r0
 8010994:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010996:	4b05      	ldr	r3, [pc, #20]	; (80109ac <ptr_to_mem+0x20>)
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	88fb      	ldrh	r3, [r7, #6]
 801099c:	4413      	add	r3, r2
}
 801099e:	4618      	mov	r0, r3
 80109a0:	370c      	adds	r7, #12
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
 80109aa:	bf00      	nop
 80109ac:	20004518 	.word	0x20004518

080109b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b083      	sub	sp, #12
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	4a05      	ldr	r2, [pc, #20]	; (80109d0 <mem_to_ptr+0x20>)
 80109bc:	6812      	ldr	r2, [r2, #0]
 80109be:	1a9b      	subs	r3, r3, r2
 80109c0:	b29b      	uxth	r3, r3
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	370c      	adds	r7, #12
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop
 80109d0:	20004518 	.word	0x20004518

080109d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80109d4:	b590      	push	{r4, r7, lr}
 80109d6:	b085      	sub	sp, #20
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80109dc:	4b45      	ldr	r3, [pc, #276]	; (8010af4 <plug_holes+0x120>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d206      	bcs.n	80109f4 <plug_holes+0x20>
 80109e6:	4b44      	ldr	r3, [pc, #272]	; (8010af8 <plug_holes+0x124>)
 80109e8:	f240 12df 	movw	r2, #479	; 0x1df
 80109ec:	4943      	ldr	r1, [pc, #268]	; (8010afc <plug_holes+0x128>)
 80109ee:	4844      	ldr	r0, [pc, #272]	; (8010b00 <plug_holes+0x12c>)
 80109f0:	f00a fa16 	bl	801ae20 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80109f4:	4b43      	ldr	r3, [pc, #268]	; (8010b04 <plug_holes+0x130>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d306      	bcc.n	8010a0c <plug_holes+0x38>
 80109fe:	4b3e      	ldr	r3, [pc, #248]	; (8010af8 <plug_holes+0x124>)
 8010a00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010a04:	4940      	ldr	r1, [pc, #256]	; (8010b08 <plug_holes+0x134>)
 8010a06:	483e      	ldr	r0, [pc, #248]	; (8010b00 <plug_holes+0x12c>)
 8010a08:	f00a fa0a 	bl	801ae20 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	791b      	ldrb	r3, [r3, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d006      	beq.n	8010a22 <plug_holes+0x4e>
 8010a14:	4b38      	ldr	r3, [pc, #224]	; (8010af8 <plug_holes+0x124>)
 8010a16:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010a1a:	493c      	ldr	r1, [pc, #240]	; (8010b0c <plug_holes+0x138>)
 8010a1c:	4838      	ldr	r0, [pc, #224]	; (8010b00 <plug_holes+0x12c>)
 8010a1e:	f00a f9ff 	bl	801ae20 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	881b      	ldrh	r3, [r3, #0]
 8010a26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010a2a:	d906      	bls.n	8010a3a <plug_holes+0x66>
 8010a2c:	4b32      	ldr	r3, [pc, #200]	; (8010af8 <plug_holes+0x124>)
 8010a2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010a32:	4937      	ldr	r1, [pc, #220]	; (8010b10 <plug_holes+0x13c>)
 8010a34:	4832      	ldr	r0, [pc, #200]	; (8010b00 <plug_holes+0x12c>)
 8010a36:	f00a f9f3 	bl	801ae20 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	881b      	ldrh	r3, [r3, #0]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff ffa4 	bl	801098c <ptr_to_mem>
 8010a44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d024      	beq.n	8010a98 <plug_holes+0xc4>
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	791b      	ldrb	r3, [r3, #4]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d120      	bne.n	8010a98 <plug_holes+0xc4>
 8010a56:	4b2b      	ldr	r3, [pc, #172]	; (8010b04 <plug_holes+0x130>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d01b      	beq.n	8010a98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010a60:	4b2c      	ldr	r3, [pc, #176]	; (8010b14 <plug_holes+0x140>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	68fa      	ldr	r2, [r7, #12]
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d102      	bne.n	8010a70 <plug_holes+0x9c>
      lfree = mem;
 8010a6a:	4a2a      	ldr	r2, [pc, #168]	; (8010b14 <plug_holes+0x140>)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	881a      	ldrh	r2, [r3, #0]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	881b      	ldrh	r3, [r3, #0]
 8010a7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010a80:	d00a      	beq.n	8010a98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff ff80 	bl	801098c <ptr_to_mem>
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f7ff ff8e 	bl	80109b0 <mem_to_ptr>
 8010a94:	4603      	mov	r3, r0
 8010a96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	885b      	ldrh	r3, [r3, #2]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff ff75 	bl	801098c <ptr_to_mem>
 8010aa2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010aa4:	68ba      	ldr	r2, [r7, #8]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d01f      	beq.n	8010aec <plug_holes+0x118>
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	791b      	ldrb	r3, [r3, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d11b      	bne.n	8010aec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010ab4:	4b17      	ldr	r3, [pc, #92]	; (8010b14 <plug_holes+0x140>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d102      	bne.n	8010ac4 <plug_holes+0xf0>
      lfree = pmem;
 8010abe:	4a15      	ldr	r2, [pc, #84]	; (8010b14 <plug_holes+0x140>)
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	881a      	ldrh	r2, [r3, #0]
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	881b      	ldrh	r3, [r3, #0]
 8010ad0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010ad4:	d00a      	beq.n	8010aec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	881b      	ldrh	r3, [r3, #0]
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7ff ff56 	bl	801098c <ptr_to_mem>
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	68b8      	ldr	r0, [r7, #8]
 8010ae4:	f7ff ff64 	bl	80109b0 <mem_to_ptr>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010aec:	bf00      	nop
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd90      	pop	{r4, r7, pc}
 8010af4:	20004518 	.word	0x20004518
 8010af8:	0801beac 	.word	0x0801beac
 8010afc:	0801bedc 	.word	0x0801bedc
 8010b00:	0801bef4 	.word	0x0801bef4
 8010b04:	2000451c 	.word	0x2000451c
 8010b08:	0801bf1c 	.word	0x0801bf1c
 8010b0c:	0801bf38 	.word	0x0801bf38
 8010b10:	0801bf54 	.word	0x0801bf54
 8010b14:	20004524 	.word	0x20004524

08010b18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010b1e:	4b1f      	ldr	r3, [pc, #124]	; (8010b9c <mem_init+0x84>)
 8010b20:	3303      	adds	r3, #3
 8010b22:	f023 0303 	bic.w	r3, r3, #3
 8010b26:	461a      	mov	r2, r3
 8010b28:	4b1d      	ldr	r3, [pc, #116]	; (8010ba0 <mem_init+0x88>)
 8010b2a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010b2c:	4b1c      	ldr	r3, [pc, #112]	; (8010ba0 <mem_init+0x88>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010b38:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010b46:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8010b4a:	f7ff ff1f 	bl	801098c <ptr_to_mem>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	4b14      	ldr	r3, [pc, #80]	; (8010ba4 <mem_init+0x8c>)
 8010b52:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8010b54:	4b13      	ldr	r3, [pc, #76]	; (8010ba4 <mem_init+0x8c>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	2201      	movs	r2, #1
 8010b5a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010b5c:	4b11      	ldr	r3, [pc, #68]	; (8010ba4 <mem_init+0x8c>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010b64:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010b66:	4b0f      	ldr	r3, [pc, #60]	; (8010ba4 <mem_init+0x8c>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010b6e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010b70:	4b0b      	ldr	r3, [pc, #44]	; (8010ba0 <mem_init+0x88>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a0c      	ldr	r2, [pc, #48]	; (8010ba8 <mem_init+0x90>)
 8010b76:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010b78:	480c      	ldr	r0, [pc, #48]	; (8010bac <mem_init+0x94>)
 8010b7a:	f00a f88f 	bl	801ac9c <sys_mutex_new>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d006      	beq.n	8010b92 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010b84:	4b0a      	ldr	r3, [pc, #40]	; (8010bb0 <mem_init+0x98>)
 8010b86:	f240 221f 	movw	r2, #543	; 0x21f
 8010b8a:	490a      	ldr	r1, [pc, #40]	; (8010bb4 <mem_init+0x9c>)
 8010b8c:	480a      	ldr	r0, [pc, #40]	; (8010bb8 <mem_init+0xa0>)
 8010b8e:	f00a f947 	bl	801ae20 <iprintf>
  }
}
 8010b92:	bf00      	nop
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20007c80 	.word	0x20007c80
 8010ba0:	20004518 	.word	0x20004518
 8010ba4:	2000451c 	.word	0x2000451c
 8010ba8:	20004524 	.word	0x20004524
 8010bac:	20004520 	.word	0x20004520
 8010bb0:	0801beac 	.word	0x0801beac
 8010bb4:	0801bf80 	.word	0x0801bf80
 8010bb8:	0801bef4 	.word	0x0801bef4

08010bbc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b086      	sub	sp, #24
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f7ff fef3 	bl	80109b0 <mem_to_ptr>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	881b      	ldrh	r3, [r3, #0]
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7ff feda 	bl	801098c <ptr_to_mem>
 8010bd8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	885b      	ldrh	r3, [r3, #2]
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7ff fed4 	bl	801098c <ptr_to_mem>
 8010be4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	881b      	ldrh	r3, [r3, #0]
 8010bea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010bee:	d818      	bhi.n	8010c22 <mem_link_valid+0x66>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	885b      	ldrh	r3, [r3, #2]
 8010bf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010bf8:	d813      	bhi.n	8010c22 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010bfe:	8afa      	ldrh	r2, [r7, #22]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d004      	beq.n	8010c0e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	881b      	ldrh	r3, [r3, #0]
 8010c08:	8afa      	ldrh	r2, [r7, #22]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d109      	bne.n	8010c22 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010c0e:	4b08      	ldr	r3, [pc, #32]	; (8010c30 <mem_link_valid+0x74>)
 8010c10:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010c12:	693a      	ldr	r2, [r7, #16]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d006      	beq.n	8010c26 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	885b      	ldrh	r3, [r3, #2]
 8010c1c:	8afa      	ldrh	r2, [r7, #22]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d001      	beq.n	8010c26 <mem_link_valid+0x6a>
    return 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	e000      	b.n	8010c28 <mem_link_valid+0x6c>
  }
  return 1;
 8010c26:	2301      	movs	r3, #1
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3718      	adds	r7, #24
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	2000451c 	.word	0x2000451c

08010c34 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b088      	sub	sp, #32
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d070      	beq.n	8010d24 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f003 0303 	and.w	r3, r3, #3
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d00d      	beq.n	8010c68 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010c4c:	4b37      	ldr	r3, [pc, #220]	; (8010d2c <mem_free+0xf8>)
 8010c4e:	f240 2273 	movw	r2, #627	; 0x273
 8010c52:	4937      	ldr	r1, [pc, #220]	; (8010d30 <mem_free+0xfc>)
 8010c54:	4837      	ldr	r0, [pc, #220]	; (8010d34 <mem_free+0x100>)
 8010c56:	f00a f8e3 	bl	801ae20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c5a:	f00a f87d 	bl	801ad58 <sys_arch_protect>
 8010c5e:	60f8      	str	r0, [r7, #12]
 8010c60:	68f8      	ldr	r0, [r7, #12]
 8010c62:	f00a f887 	bl	801ad74 <sys_arch_unprotect>
    return;
 8010c66:	e05e      	b.n	8010d26 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	3b08      	subs	r3, #8
 8010c6c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010c6e:	4b32      	ldr	r3, [pc, #200]	; (8010d38 <mem_free+0x104>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	69fa      	ldr	r2, [r7, #28]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d306      	bcc.n	8010c86 <mem_free+0x52>
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f103 020c 	add.w	r2, r3, #12
 8010c7e:	4b2f      	ldr	r3, [pc, #188]	; (8010d3c <mem_free+0x108>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d90d      	bls.n	8010ca2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010c86:	4b29      	ldr	r3, [pc, #164]	; (8010d2c <mem_free+0xf8>)
 8010c88:	f240 227f 	movw	r2, #639	; 0x27f
 8010c8c:	492c      	ldr	r1, [pc, #176]	; (8010d40 <mem_free+0x10c>)
 8010c8e:	4829      	ldr	r0, [pc, #164]	; (8010d34 <mem_free+0x100>)
 8010c90:	f00a f8c6 	bl	801ae20 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010c94:	f00a f860 	bl	801ad58 <sys_arch_protect>
 8010c98:	6138      	str	r0, [r7, #16]
 8010c9a:	6938      	ldr	r0, [r7, #16]
 8010c9c:	f00a f86a 	bl	801ad74 <sys_arch_unprotect>
    return;
 8010ca0:	e041      	b.n	8010d26 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010ca2:	4828      	ldr	r0, [pc, #160]	; (8010d44 <mem_free+0x110>)
 8010ca4:	f00a f816 	bl	801acd4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	791b      	ldrb	r3, [r3, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d110      	bne.n	8010cd2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010cb0:	4b1e      	ldr	r3, [pc, #120]	; (8010d2c <mem_free+0xf8>)
 8010cb2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010cb6:	4924      	ldr	r1, [pc, #144]	; (8010d48 <mem_free+0x114>)
 8010cb8:	481e      	ldr	r0, [pc, #120]	; (8010d34 <mem_free+0x100>)
 8010cba:	f00a f8b1 	bl	801ae20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010cbe:	4821      	ldr	r0, [pc, #132]	; (8010d44 <mem_free+0x110>)
 8010cc0:	f00a f817 	bl	801acf2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010cc4:	f00a f848 	bl	801ad58 <sys_arch_protect>
 8010cc8:	6178      	str	r0, [r7, #20]
 8010cca:	6978      	ldr	r0, [r7, #20]
 8010ccc:	f00a f852 	bl	801ad74 <sys_arch_unprotect>
    return;
 8010cd0:	e029      	b.n	8010d26 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010cd2:	69f8      	ldr	r0, [r7, #28]
 8010cd4:	f7ff ff72 	bl	8010bbc <mem_link_valid>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d110      	bne.n	8010d00 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010cde:	4b13      	ldr	r3, [pc, #76]	; (8010d2c <mem_free+0xf8>)
 8010ce0:	f240 2295 	movw	r2, #661	; 0x295
 8010ce4:	4919      	ldr	r1, [pc, #100]	; (8010d4c <mem_free+0x118>)
 8010ce6:	4813      	ldr	r0, [pc, #76]	; (8010d34 <mem_free+0x100>)
 8010ce8:	f00a f89a 	bl	801ae20 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010cec:	4815      	ldr	r0, [pc, #84]	; (8010d44 <mem_free+0x110>)
 8010cee:	f00a f800 	bl	801acf2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010cf2:	f00a f831 	bl	801ad58 <sys_arch_protect>
 8010cf6:	61b8      	str	r0, [r7, #24]
 8010cf8:	69b8      	ldr	r0, [r7, #24]
 8010cfa:	f00a f83b 	bl	801ad74 <sys_arch_unprotect>
    return;
 8010cfe:	e012      	b.n	8010d26 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	2200      	movs	r2, #0
 8010d04:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010d06:	4b12      	ldr	r3, [pc, #72]	; (8010d50 <mem_free+0x11c>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	69fa      	ldr	r2, [r7, #28]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d202      	bcs.n	8010d16 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010d10:	4a0f      	ldr	r2, [pc, #60]	; (8010d50 <mem_free+0x11c>)
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010d16:	69f8      	ldr	r0, [r7, #28]
 8010d18:	f7ff fe5c 	bl	80109d4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010d1c:	4809      	ldr	r0, [pc, #36]	; (8010d44 <mem_free+0x110>)
 8010d1e:	f009 ffe8 	bl	801acf2 <sys_mutex_unlock>
 8010d22:	e000      	b.n	8010d26 <mem_free+0xf2>
    return;
 8010d24:	bf00      	nop
}
 8010d26:	3720      	adds	r7, #32
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	0801beac 	.word	0x0801beac
 8010d30:	0801bf9c 	.word	0x0801bf9c
 8010d34:	0801bef4 	.word	0x0801bef4
 8010d38:	20004518 	.word	0x20004518
 8010d3c:	2000451c 	.word	0x2000451c
 8010d40:	0801bfc0 	.word	0x0801bfc0
 8010d44:	20004520 	.word	0x20004520
 8010d48:	0801bfdc 	.word	0x0801bfdc
 8010d4c:	0801c004 	.word	0x0801c004
 8010d50:	20004524 	.word	0x20004524

08010d54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b088      	sub	sp, #32
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010d60:	887b      	ldrh	r3, [r7, #2]
 8010d62:	3303      	adds	r3, #3
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	f023 0303 	bic.w	r3, r3, #3
 8010d6a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010d6c:	8bfb      	ldrh	r3, [r7, #30]
 8010d6e:	2b0b      	cmp	r3, #11
 8010d70:	d801      	bhi.n	8010d76 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010d72:	230c      	movs	r3, #12
 8010d74:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010d76:	8bfb      	ldrh	r3, [r7, #30]
 8010d78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010d7c:	d803      	bhi.n	8010d86 <mem_trim+0x32>
 8010d7e:	8bfa      	ldrh	r2, [r7, #30]
 8010d80:	887b      	ldrh	r3, [r7, #2]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d201      	bcs.n	8010d8a <mem_trim+0x36>
    return NULL;
 8010d86:	2300      	movs	r3, #0
 8010d88:	e0d8      	b.n	8010f3c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010d8a:	4b6e      	ldr	r3, [pc, #440]	; (8010f44 <mem_trim+0x1f0>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d304      	bcc.n	8010d9e <mem_trim+0x4a>
 8010d94:	4b6c      	ldr	r3, [pc, #432]	; (8010f48 <mem_trim+0x1f4>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d306      	bcc.n	8010dac <mem_trim+0x58>
 8010d9e:	4b6b      	ldr	r3, [pc, #428]	; (8010f4c <mem_trim+0x1f8>)
 8010da0:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010da4:	496a      	ldr	r1, [pc, #424]	; (8010f50 <mem_trim+0x1fc>)
 8010da6:	486b      	ldr	r0, [pc, #428]	; (8010f54 <mem_trim+0x200>)
 8010da8:	f00a f83a 	bl	801ae20 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010dac:	4b65      	ldr	r3, [pc, #404]	; (8010f44 <mem_trim+0x1f0>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	687a      	ldr	r2, [r7, #4]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d304      	bcc.n	8010dc0 <mem_trim+0x6c>
 8010db6:	4b64      	ldr	r3, [pc, #400]	; (8010f48 <mem_trim+0x1f4>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d307      	bcc.n	8010dd0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010dc0:	f009 ffca 	bl	801ad58 <sys_arch_protect>
 8010dc4:	60b8      	str	r0, [r7, #8]
 8010dc6:	68b8      	ldr	r0, [r7, #8]
 8010dc8:	f009 ffd4 	bl	801ad74 <sys_arch_unprotect>
    return rmem;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	e0b5      	b.n	8010f3c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	3b08      	subs	r3, #8
 8010dd4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010dd6:	69b8      	ldr	r0, [r7, #24]
 8010dd8:	f7ff fdea 	bl	80109b0 <mem_to_ptr>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010de0:	69bb      	ldr	r3, [r7, #24]
 8010de2:	881a      	ldrh	r2, [r3, #0]
 8010de4:	8afb      	ldrh	r3, [r7, #22]
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	3b08      	subs	r3, #8
 8010dec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010dee:	8bfa      	ldrh	r2, [r7, #30]
 8010df0:	8abb      	ldrh	r3, [r7, #20]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d906      	bls.n	8010e04 <mem_trim+0xb0>
 8010df6:	4b55      	ldr	r3, [pc, #340]	; (8010f4c <mem_trim+0x1f8>)
 8010df8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010dfc:	4956      	ldr	r1, [pc, #344]	; (8010f58 <mem_trim+0x204>)
 8010dfe:	4855      	ldr	r0, [pc, #340]	; (8010f54 <mem_trim+0x200>)
 8010e00:	f00a f80e 	bl	801ae20 <iprintf>
  if (newsize > size) {
 8010e04:	8bfa      	ldrh	r2, [r7, #30]
 8010e06:	8abb      	ldrh	r3, [r7, #20]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d901      	bls.n	8010e10 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	e095      	b.n	8010f3c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010e10:	8bfa      	ldrh	r2, [r7, #30]
 8010e12:	8abb      	ldrh	r3, [r7, #20]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d101      	bne.n	8010e1c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	e08f      	b.n	8010f3c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010e1c:	484f      	ldr	r0, [pc, #316]	; (8010f5c <mem_trim+0x208>)
 8010e1e:	f009 ff59 	bl	801acd4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010e22:	69bb      	ldr	r3, [r7, #24]
 8010e24:	881b      	ldrh	r3, [r3, #0]
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7ff fdb0 	bl	801098c <ptr_to_mem>
 8010e2c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	791b      	ldrb	r3, [r3, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d13f      	bne.n	8010eb6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	881b      	ldrh	r3, [r3, #0]
 8010e3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010e3e:	d106      	bne.n	8010e4e <mem_trim+0xfa>
 8010e40:	4b42      	ldr	r3, [pc, #264]	; (8010f4c <mem_trim+0x1f8>)
 8010e42:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010e46:	4946      	ldr	r1, [pc, #280]	; (8010f60 <mem_trim+0x20c>)
 8010e48:	4842      	ldr	r0, [pc, #264]	; (8010f54 <mem_trim+0x200>)
 8010e4a:	f009 ffe9 	bl	801ae20 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	881b      	ldrh	r3, [r3, #0]
 8010e52:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010e54:	8afa      	ldrh	r2, [r7, #22]
 8010e56:	8bfb      	ldrh	r3, [r7, #30]
 8010e58:	4413      	add	r3, r2
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	3308      	adds	r3, #8
 8010e5e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010e60:	4b40      	ldr	r3, [pc, #256]	; (8010f64 <mem_trim+0x210>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d106      	bne.n	8010e78 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010e6a:	89fb      	ldrh	r3, [r7, #14]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7ff fd8d 	bl	801098c <ptr_to_mem>
 8010e72:	4602      	mov	r2, r0
 8010e74:	4b3b      	ldr	r3, [pc, #236]	; (8010f64 <mem_trim+0x210>)
 8010e76:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010e78:	89fb      	ldrh	r3, [r7, #14]
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7ff fd86 	bl	801098c <ptr_to_mem>
 8010e80:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	2200      	movs	r2, #0
 8010e86:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	89ba      	ldrh	r2, [r7, #12]
 8010e8c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	8afa      	ldrh	r2, [r7, #22]
 8010e92:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	89fa      	ldrh	r2, [r7, #14]
 8010e98:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	881b      	ldrh	r3, [r3, #0]
 8010e9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010ea2:	d047      	beq.n	8010f34 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	881b      	ldrh	r3, [r3, #0]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7ff fd6f 	bl	801098c <ptr_to_mem>
 8010eae:	4602      	mov	r2, r0
 8010eb0:	89fb      	ldrh	r3, [r7, #14]
 8010eb2:	8053      	strh	r3, [r2, #2]
 8010eb4:	e03e      	b.n	8010f34 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010eb6:	8bfb      	ldrh	r3, [r7, #30]
 8010eb8:	f103 0214 	add.w	r2, r3, #20
 8010ebc:	8abb      	ldrh	r3, [r7, #20]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	d838      	bhi.n	8010f34 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010ec2:	8afa      	ldrh	r2, [r7, #22]
 8010ec4:	8bfb      	ldrh	r3, [r7, #30]
 8010ec6:	4413      	add	r3, r2
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	3308      	adds	r3, #8
 8010ecc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	881b      	ldrh	r3, [r3, #0]
 8010ed2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010ed6:	d106      	bne.n	8010ee6 <mem_trim+0x192>
 8010ed8:	4b1c      	ldr	r3, [pc, #112]	; (8010f4c <mem_trim+0x1f8>)
 8010eda:	f240 3216 	movw	r2, #790	; 0x316
 8010ede:	4920      	ldr	r1, [pc, #128]	; (8010f60 <mem_trim+0x20c>)
 8010ee0:	481c      	ldr	r0, [pc, #112]	; (8010f54 <mem_trim+0x200>)
 8010ee2:	f009 ff9d 	bl	801ae20 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010ee6:	89fb      	ldrh	r3, [r7, #14]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7ff fd4f 	bl	801098c <ptr_to_mem>
 8010eee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010ef0:	4b1c      	ldr	r3, [pc, #112]	; (8010f64 <mem_trim+0x210>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	693a      	ldr	r2, [r7, #16]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d202      	bcs.n	8010f00 <mem_trim+0x1ac>
      lfree = mem2;
 8010efa:	4a1a      	ldr	r2, [pc, #104]	; (8010f64 <mem_trim+0x210>)
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	2200      	movs	r2, #0
 8010f04:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	881a      	ldrh	r2, [r3, #0]
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	8afa      	ldrh	r2, [r7, #22]
 8010f12:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	89fa      	ldrh	r2, [r7, #14]
 8010f18:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	881b      	ldrh	r3, [r3, #0]
 8010f1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010f22:	d007      	beq.n	8010f34 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7ff fd2f 	bl	801098c <ptr_to_mem>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	89fb      	ldrh	r3, [r7, #14]
 8010f32:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010f34:	4809      	ldr	r0, [pc, #36]	; (8010f5c <mem_trim+0x208>)
 8010f36:	f009 fedc 	bl	801acf2 <sys_mutex_unlock>
  return rmem;
 8010f3a:	687b      	ldr	r3, [r7, #4]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3720      	adds	r7, #32
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	20004518 	.word	0x20004518
 8010f48:	2000451c 	.word	0x2000451c
 8010f4c:	0801beac 	.word	0x0801beac
 8010f50:	0801c038 	.word	0x0801c038
 8010f54:	0801bef4 	.word	0x0801bef4
 8010f58:	0801c050 	.word	0x0801c050
 8010f5c:	20004520 	.word	0x20004520
 8010f60:	0801c070 	.word	0x0801c070
 8010f64:	20004524 	.word	0x20004524

08010f68 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b088      	sub	sp, #32
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	4603      	mov	r3, r0
 8010f70:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010f72:	88fb      	ldrh	r3, [r7, #6]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d101      	bne.n	8010f7c <mem_malloc+0x14>
    return NULL;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	e0e2      	b.n	8011142 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010f7c:	88fb      	ldrh	r3, [r7, #6]
 8010f7e:	3303      	adds	r3, #3
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	f023 0303 	bic.w	r3, r3, #3
 8010f86:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010f88:	8bbb      	ldrh	r3, [r7, #28]
 8010f8a:	2b0b      	cmp	r3, #11
 8010f8c:	d801      	bhi.n	8010f92 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010f8e:	230c      	movs	r3, #12
 8010f90:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010f92:	8bbb      	ldrh	r3, [r7, #28]
 8010f94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010f98:	d803      	bhi.n	8010fa2 <mem_malloc+0x3a>
 8010f9a:	8bba      	ldrh	r2, [r7, #28]
 8010f9c:	88fb      	ldrh	r3, [r7, #6]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d201      	bcs.n	8010fa6 <mem_malloc+0x3e>
    return NULL;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	e0cd      	b.n	8011142 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010fa6:	4869      	ldr	r0, [pc, #420]	; (801114c <mem_malloc+0x1e4>)
 8010fa8:	f009 fe94 	bl	801acd4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010fac:	4b68      	ldr	r3, [pc, #416]	; (8011150 <mem_malloc+0x1e8>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7ff fcfd 	bl	80109b0 <mem_to_ptr>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	83fb      	strh	r3, [r7, #30]
 8010fba:	e0b7      	b.n	801112c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010fbc:	8bfb      	ldrh	r3, [r7, #30]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7ff fce4 	bl	801098c <ptr_to_mem>
 8010fc4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	791b      	ldrb	r3, [r3, #4]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	f040 80a7 	bne.w	801111e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	881b      	ldrh	r3, [r3, #0]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	8bfb      	ldrh	r3, [r7, #30]
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	f1a3 0208 	sub.w	r2, r3, #8
 8010fde:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	f0c0 809c 	bcc.w	801111e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	461a      	mov	r2, r3
 8010fec:	8bfb      	ldrh	r3, [r7, #30]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	f1a3 0208 	sub.w	r2, r3, #8
 8010ff4:	8bbb      	ldrh	r3, [r7, #28]
 8010ff6:	3314      	adds	r3, #20
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d333      	bcc.n	8011064 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010ffc:	8bfa      	ldrh	r2, [r7, #30]
 8010ffe:	8bbb      	ldrh	r3, [r7, #28]
 8011000:	4413      	add	r3, r2
 8011002:	b29b      	uxth	r3, r3
 8011004:	3308      	adds	r3, #8
 8011006:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011008:	8a7b      	ldrh	r3, [r7, #18]
 801100a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801100e:	d106      	bne.n	801101e <mem_malloc+0xb6>
 8011010:	4b50      	ldr	r3, [pc, #320]	; (8011154 <mem_malloc+0x1ec>)
 8011012:	f240 3287 	movw	r2, #903	; 0x387
 8011016:	4950      	ldr	r1, [pc, #320]	; (8011158 <mem_malloc+0x1f0>)
 8011018:	4850      	ldr	r0, [pc, #320]	; (801115c <mem_malloc+0x1f4>)
 801101a:	f009 ff01 	bl	801ae20 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801101e:	8a7b      	ldrh	r3, [r7, #18]
 8011020:	4618      	mov	r0, r3
 8011022:	f7ff fcb3 	bl	801098c <ptr_to_mem>
 8011026:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2200      	movs	r2, #0
 801102c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	881a      	ldrh	r2, [r3, #0]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	8bfa      	ldrh	r2, [r7, #30]
 801103a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	8a7a      	ldrh	r2, [r7, #18]
 8011040:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	2201      	movs	r2, #1
 8011046:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	881b      	ldrh	r3, [r3, #0]
 801104c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011050:	d00b      	beq.n	801106a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	881b      	ldrh	r3, [r3, #0]
 8011056:	4618      	mov	r0, r3
 8011058:	f7ff fc98 	bl	801098c <ptr_to_mem>
 801105c:	4602      	mov	r2, r0
 801105e:	8a7b      	ldrh	r3, [r7, #18]
 8011060:	8053      	strh	r3, [r2, #2]
 8011062:	e002      	b.n	801106a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	2201      	movs	r2, #1
 8011068:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801106a:	4b39      	ldr	r3, [pc, #228]	; (8011150 <mem_malloc+0x1e8>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	697a      	ldr	r2, [r7, #20]
 8011070:	429a      	cmp	r2, r3
 8011072:	d127      	bne.n	80110c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011074:	4b36      	ldr	r3, [pc, #216]	; (8011150 <mem_malloc+0x1e8>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801107a:	e005      	b.n	8011088 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801107c:	69bb      	ldr	r3, [r7, #24]
 801107e:	881b      	ldrh	r3, [r3, #0]
 8011080:	4618      	mov	r0, r3
 8011082:	f7ff fc83 	bl	801098c <ptr_to_mem>
 8011086:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011088:	69bb      	ldr	r3, [r7, #24]
 801108a:	791b      	ldrb	r3, [r3, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d004      	beq.n	801109a <mem_malloc+0x132>
 8011090:	4b33      	ldr	r3, [pc, #204]	; (8011160 <mem_malloc+0x1f8>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	69ba      	ldr	r2, [r7, #24]
 8011096:	429a      	cmp	r2, r3
 8011098:	d1f0      	bne.n	801107c <mem_malloc+0x114>
          }
          lfree = cur;
 801109a:	4a2d      	ldr	r2, [pc, #180]	; (8011150 <mem_malloc+0x1e8>)
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80110a0:	4b2b      	ldr	r3, [pc, #172]	; (8011150 <mem_malloc+0x1e8>)
 80110a2:	681a      	ldr	r2, [r3, #0]
 80110a4:	4b2e      	ldr	r3, [pc, #184]	; (8011160 <mem_malloc+0x1f8>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d00b      	beq.n	80110c4 <mem_malloc+0x15c>
 80110ac:	4b28      	ldr	r3, [pc, #160]	; (8011150 <mem_malloc+0x1e8>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	791b      	ldrb	r3, [r3, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d006      	beq.n	80110c4 <mem_malloc+0x15c>
 80110b6:	4b27      	ldr	r3, [pc, #156]	; (8011154 <mem_malloc+0x1ec>)
 80110b8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80110bc:	4929      	ldr	r1, [pc, #164]	; (8011164 <mem_malloc+0x1fc>)
 80110be:	4827      	ldr	r0, [pc, #156]	; (801115c <mem_malloc+0x1f4>)
 80110c0:	f009 feae 	bl	801ae20 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80110c4:	4821      	ldr	r0, [pc, #132]	; (801114c <mem_malloc+0x1e4>)
 80110c6:	f009 fe14 	bl	801acf2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80110ca:	8bba      	ldrh	r2, [r7, #28]
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	4413      	add	r3, r2
 80110d0:	3308      	adds	r3, #8
 80110d2:	4a23      	ldr	r2, [pc, #140]	; (8011160 <mem_malloc+0x1f8>)
 80110d4:	6812      	ldr	r2, [r2, #0]
 80110d6:	4293      	cmp	r3, r2
 80110d8:	d906      	bls.n	80110e8 <mem_malloc+0x180>
 80110da:	4b1e      	ldr	r3, [pc, #120]	; (8011154 <mem_malloc+0x1ec>)
 80110dc:	f240 32ba 	movw	r2, #954	; 0x3ba
 80110e0:	4921      	ldr	r1, [pc, #132]	; (8011168 <mem_malloc+0x200>)
 80110e2:	481e      	ldr	r0, [pc, #120]	; (801115c <mem_malloc+0x1f4>)
 80110e4:	f009 fe9c 	bl	801ae20 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	f003 0303 	and.w	r3, r3, #3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d006      	beq.n	8011100 <mem_malloc+0x198>
 80110f2:	4b18      	ldr	r3, [pc, #96]	; (8011154 <mem_malloc+0x1ec>)
 80110f4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80110f8:	491c      	ldr	r1, [pc, #112]	; (801116c <mem_malloc+0x204>)
 80110fa:	4818      	ldr	r0, [pc, #96]	; (801115c <mem_malloc+0x1f4>)
 80110fc:	f009 fe90 	bl	801ae20 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	f003 0303 	and.w	r3, r3, #3
 8011106:	2b00      	cmp	r3, #0
 8011108:	d006      	beq.n	8011118 <mem_malloc+0x1b0>
 801110a:	4b12      	ldr	r3, [pc, #72]	; (8011154 <mem_malloc+0x1ec>)
 801110c:	f240 32be 	movw	r2, #958	; 0x3be
 8011110:	4917      	ldr	r1, [pc, #92]	; (8011170 <mem_malloc+0x208>)
 8011112:	4812      	ldr	r0, [pc, #72]	; (801115c <mem_malloc+0x1f4>)
 8011114:	f009 fe84 	bl	801ae20 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	3308      	adds	r3, #8
 801111c:	e011      	b.n	8011142 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801111e:	8bfb      	ldrh	r3, [r7, #30]
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff fc33 	bl	801098c <ptr_to_mem>
 8011126:	4603      	mov	r3, r0
 8011128:	881b      	ldrh	r3, [r3, #0]
 801112a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801112c:	8bfa      	ldrh	r2, [r7, #30]
 801112e:	8bbb      	ldrh	r3, [r7, #28]
 8011130:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011134:	429a      	cmp	r2, r3
 8011136:	f4ff af41 	bcc.w	8010fbc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801113a:	4804      	ldr	r0, [pc, #16]	; (801114c <mem_malloc+0x1e4>)
 801113c:	f009 fdd9 	bl	801acf2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011140:	2300      	movs	r3, #0
}
 8011142:	4618      	mov	r0, r3
 8011144:	3720      	adds	r7, #32
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	20004520 	.word	0x20004520
 8011150:	20004524 	.word	0x20004524
 8011154:	0801beac 	.word	0x0801beac
 8011158:	0801c070 	.word	0x0801c070
 801115c:	0801bef4 	.word	0x0801bef4
 8011160:	2000451c 	.word	0x2000451c
 8011164:	0801c084 	.word	0x0801c084
 8011168:	0801c0a0 	.word	0x0801c0a0
 801116c:	0801c0d0 	.word	0x0801c0d0
 8011170:	0801c100 	.word	0x0801c100

08011174 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011174:	b480      	push	{r7}
 8011176:	b085      	sub	sp, #20
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	689b      	ldr	r3, [r3, #8]
 8011180:	2200      	movs	r2, #0
 8011182:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	3303      	adds	r3, #3
 801118a:	f023 0303 	bic.w	r3, r3, #3
 801118e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011190:	2300      	movs	r3, #0
 8011192:	60fb      	str	r3, [r7, #12]
 8011194:	e011      	b.n	80111ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	689b      	ldr	r3, [r3, #8]
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	881b      	ldrh	r3, [r3, #0]
 80111ac:	461a      	mov	r2, r3
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	4413      	add	r3, r2
 80111b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	3301      	adds	r3, #1
 80111b8:	60fb      	str	r3, [r7, #12]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	885b      	ldrh	r3, [r3, #2]
 80111be:	461a      	mov	r2, r3
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	4293      	cmp	r3, r2
 80111c4:	dbe7      	blt.n	8011196 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80111c6:	bf00      	nop
 80111c8:	3714      	adds	r7, #20
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
	...

080111d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80111da:	2300      	movs	r3, #0
 80111dc:	80fb      	strh	r3, [r7, #6]
 80111de:	e009      	b.n	80111f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80111e0:	88fb      	ldrh	r3, [r7, #6]
 80111e2:	4a08      	ldr	r2, [pc, #32]	; (8011204 <memp_init+0x30>)
 80111e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff ffc3 	bl	8011174 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80111ee:	88fb      	ldrh	r3, [r7, #6]
 80111f0:	3301      	adds	r3, #1
 80111f2:	80fb      	strh	r3, [r7, #6]
 80111f4:	88fb      	ldrh	r3, [r7, #6]
 80111f6:	2b0d      	cmp	r3, #13
 80111f8:	d9f2      	bls.n	80111e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80111fa:	bf00      	nop
 80111fc:	3708      	adds	r7, #8
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	0801e914 	.word	0x0801e914

08011208 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011210:	f009 fda2 	bl	801ad58 <sys_arch_protect>
 8011214:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	689b      	ldr	r3, [r3, #8]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d015      	beq.n	8011250 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	68ba      	ldr	r2, [r7, #8]
 801122a:	6812      	ldr	r2, [r2, #0]
 801122c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	f003 0303 	and.w	r3, r3, #3
 8011234:	2b00      	cmp	r3, #0
 8011236:	d006      	beq.n	8011246 <do_memp_malloc_pool+0x3e>
 8011238:	4b09      	ldr	r3, [pc, #36]	; (8011260 <do_memp_malloc_pool+0x58>)
 801123a:	f240 1219 	movw	r2, #281	; 0x119
 801123e:	4909      	ldr	r1, [pc, #36]	; (8011264 <do_memp_malloc_pool+0x5c>)
 8011240:	4809      	ldr	r0, [pc, #36]	; (8011268 <do_memp_malloc_pool+0x60>)
 8011242:	f009 fded 	bl	801ae20 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	f009 fd94 	bl	801ad74 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	e003      	b.n	8011258 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f009 fd8f 	bl	801ad74 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011256:	2300      	movs	r3, #0
}
 8011258:	4618      	mov	r0, r3
 801125a:	3710      	adds	r7, #16
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	0801c124 	.word	0x0801c124
 8011264:	0801c154 	.word	0x0801c154
 8011268:	0801c178 	.word	0x0801c178

0801126c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	4603      	mov	r3, r0
 8011274:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011276:	79fb      	ldrb	r3, [r7, #7]
 8011278:	2b0d      	cmp	r3, #13
 801127a:	d908      	bls.n	801128e <memp_malloc+0x22>
 801127c:	4b0a      	ldr	r3, [pc, #40]	; (80112a8 <memp_malloc+0x3c>)
 801127e:	f240 1257 	movw	r2, #343	; 0x157
 8011282:	490a      	ldr	r1, [pc, #40]	; (80112ac <memp_malloc+0x40>)
 8011284:	480a      	ldr	r0, [pc, #40]	; (80112b0 <memp_malloc+0x44>)
 8011286:	f009 fdcb 	bl	801ae20 <iprintf>
 801128a:	2300      	movs	r3, #0
 801128c:	e008      	b.n	80112a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	4a08      	ldr	r2, [pc, #32]	; (80112b4 <memp_malloc+0x48>)
 8011292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff ffb6 	bl	8011208 <do_memp_malloc_pool>
 801129c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801129e:	68fb      	ldr	r3, [r7, #12]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3710      	adds	r7, #16
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	0801c124 	.word	0x0801c124
 80112ac:	0801c1b4 	.word	0x0801c1b4
 80112b0:	0801c178 	.word	0x0801c178
 80112b4:	0801e914 	.word	0x0801e914

080112b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	f003 0303 	and.w	r3, r3, #3
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d006      	beq.n	80112da <do_memp_free_pool+0x22>
 80112cc:	4b0d      	ldr	r3, [pc, #52]	; (8011304 <do_memp_free_pool+0x4c>)
 80112ce:	f240 126d 	movw	r2, #365	; 0x16d
 80112d2:	490d      	ldr	r1, [pc, #52]	; (8011308 <do_memp_free_pool+0x50>)
 80112d4:	480d      	ldr	r0, [pc, #52]	; (801130c <do_memp_free_pool+0x54>)
 80112d6:	f009 fda3 	bl	801ae20 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80112de:	f009 fd3b 	bl	801ad58 <sys_arch_protect>
 80112e2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	689b      	ldr	r3, [r3, #8]
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	689b      	ldr	r3, [r3, #8]
 80112f2:	68fa      	ldr	r2, [r7, #12]
 80112f4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80112f6:	68b8      	ldr	r0, [r7, #8]
 80112f8:	f009 fd3c 	bl	801ad74 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80112fc:	bf00      	nop
 80112fe:	3710      	adds	r7, #16
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	0801c124 	.word	0x0801c124
 8011308:	0801c1d4 	.word	0x0801c1d4
 801130c:	0801c178 	.word	0x0801c178

08011310 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	4603      	mov	r3, r0
 8011318:	6039      	str	r1, [r7, #0]
 801131a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801131c:	79fb      	ldrb	r3, [r7, #7]
 801131e:	2b0d      	cmp	r3, #13
 8011320:	d907      	bls.n	8011332 <memp_free+0x22>
 8011322:	4b0c      	ldr	r3, [pc, #48]	; (8011354 <memp_free+0x44>)
 8011324:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011328:	490b      	ldr	r1, [pc, #44]	; (8011358 <memp_free+0x48>)
 801132a:	480c      	ldr	r0, [pc, #48]	; (801135c <memp_free+0x4c>)
 801132c:	f009 fd78 	bl	801ae20 <iprintf>
 8011330:	e00c      	b.n	801134c <memp_free+0x3c>

  if (mem == NULL) {
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d008      	beq.n	801134a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011338:	79fb      	ldrb	r3, [r7, #7]
 801133a:	4a09      	ldr	r2, [pc, #36]	; (8011360 <memp_free+0x50>)
 801133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011340:	6839      	ldr	r1, [r7, #0]
 8011342:	4618      	mov	r0, r3
 8011344:	f7ff ffb8 	bl	80112b8 <do_memp_free_pool>
 8011348:	e000      	b.n	801134c <memp_free+0x3c>
    return;
 801134a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	0801c124 	.word	0x0801c124
 8011358:	0801c1f4 	.word	0x0801c1f4
 801135c:	0801c178 	.word	0x0801c178
 8011360:	0801e914 	.word	0x0801e914

08011364 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011364:	b480      	push	{r7}
 8011366:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011368:	bf00      	nop
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
	...

08011374 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b086      	sub	sp, #24
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
 8011380:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d108      	bne.n	801139a <netif_add+0x26>
 8011388:	4b56      	ldr	r3, [pc, #344]	; (80114e4 <netif_add+0x170>)
 801138a:	f240 1227 	movw	r2, #295	; 0x127
 801138e:	4956      	ldr	r1, [pc, #344]	; (80114e8 <netif_add+0x174>)
 8011390:	4856      	ldr	r0, [pc, #344]	; (80114ec <netif_add+0x178>)
 8011392:	f009 fd45 	bl	801ae20 <iprintf>
 8011396:	2300      	movs	r3, #0
 8011398:	e09f      	b.n	80114da <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139c:	2b00      	cmp	r3, #0
 801139e:	d108      	bne.n	80113b2 <netif_add+0x3e>
 80113a0:	4b50      	ldr	r3, [pc, #320]	; (80114e4 <netif_add+0x170>)
 80113a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80113a6:	4952      	ldr	r1, [pc, #328]	; (80114f0 <netif_add+0x17c>)
 80113a8:	4850      	ldr	r0, [pc, #320]	; (80114ec <netif_add+0x178>)
 80113aa:	f009 fd39 	bl	801ae20 <iprintf>
 80113ae:	2300      	movs	r3, #0
 80113b0:	e093      	b.n	80114da <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d101      	bne.n	80113bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80113b8:	4b4e      	ldr	r3, [pc, #312]	; (80114f4 <netif_add+0x180>)
 80113ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d101      	bne.n	80113c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80113c2:	4b4c      	ldr	r3, [pc, #304]	; (80114f4 <netif_add+0x180>)
 80113c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d101      	bne.n	80113d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80113cc:	4b49      	ldr	r3, [pc, #292]	; (80114f4 <netif_add+0x180>)
 80113ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2200      	movs	r2, #0
 80113d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2200      	movs	r2, #0
 80113da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2200      	movs	r2, #0
 80113e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	4a44      	ldr	r2, [pc, #272]	; (80114f8 <netif_add+0x184>)
 80113e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2200      	movs	r2, #0
 80113ec:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2200      	movs	r2, #0
 80113f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	6a3a      	ldr	r2, [r7, #32]
 80113fa:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80113fc:	4b3f      	ldr	r3, [pc, #252]	; (80114fc <netif_add+0x188>)
 80113fe:	781a      	ldrb	r2, [r3, #0]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801140a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	68b9      	ldr	r1, [r7, #8]
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f000 f914 	bl	8011640 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141a:	68f8      	ldr	r0, [r7, #12]
 801141c:	4798      	blx	r3
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d001      	beq.n	8011428 <netif_add+0xb4>
    return NULL;
 8011424:	2300      	movs	r3, #0
 8011426:	e058      	b.n	80114da <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801142e:	2bff      	cmp	r3, #255	; 0xff
 8011430:	d103      	bne.n	801143a <netif_add+0xc6>
        netif->num = 0;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	2200      	movs	r2, #0
 8011436:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 801143a:	2300      	movs	r3, #0
 801143c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801143e:	4b30      	ldr	r3, [pc, #192]	; (8011500 <netif_add+0x18c>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	617b      	str	r3, [r7, #20]
 8011444:	e02b      	b.n	801149e <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	429a      	cmp	r2, r3
 801144c:	d106      	bne.n	801145c <netif_add+0xe8>
 801144e:	4b25      	ldr	r3, [pc, #148]	; (80114e4 <netif_add+0x170>)
 8011450:	f240 128b 	movw	r2, #395	; 0x18b
 8011454:	492b      	ldr	r1, [pc, #172]	; (8011504 <netif_add+0x190>)
 8011456:	4825      	ldr	r0, [pc, #148]	; (80114ec <netif_add+0x178>)
 8011458:	f009 fce2 	bl	801ae20 <iprintf>
        num_netifs++;
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	3301      	adds	r3, #1
 8011460:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	2bff      	cmp	r3, #255	; 0xff
 8011466:	dd06      	ble.n	8011476 <netif_add+0x102>
 8011468:	4b1e      	ldr	r3, [pc, #120]	; (80114e4 <netif_add+0x170>)
 801146a:	f240 128d 	movw	r2, #397	; 0x18d
 801146e:	4926      	ldr	r1, [pc, #152]	; (8011508 <netif_add+0x194>)
 8011470:	481e      	ldr	r0, [pc, #120]	; (80114ec <netif_add+0x178>)
 8011472:	f009 fcd5 	bl	801ae20 <iprintf>
        if (netif2->num == netif->num) {
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011482:	429a      	cmp	r2, r3
 8011484:	d108      	bne.n	8011498 <netif_add+0x124>
          netif->num++;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801148c:	3301      	adds	r3, #1
 801148e:	b2da      	uxtb	r2, r3
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8011496:	e005      	b.n	80114a4 <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	617b      	str	r3, [r7, #20]
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d1d0      	bne.n	8011446 <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d1be      	bne.n	8011428 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80114b0:	2bfe      	cmp	r3, #254	; 0xfe
 80114b2:	d103      	bne.n	80114bc <netif_add+0x148>
    netif_num = 0;
 80114b4:	4b11      	ldr	r3, [pc, #68]	; (80114fc <netif_add+0x188>)
 80114b6:	2200      	movs	r2, #0
 80114b8:	701a      	strb	r2, [r3, #0]
 80114ba:	e006      	b.n	80114ca <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80114c2:	3301      	adds	r3, #1
 80114c4:	b2da      	uxtb	r2, r3
 80114c6:	4b0d      	ldr	r3, [pc, #52]	; (80114fc <netif_add+0x188>)
 80114c8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80114ca:	4b0d      	ldr	r3, [pc, #52]	; (8011500 <netif_add+0x18c>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80114d2:	4a0b      	ldr	r2, [pc, #44]	; (8011500 <netif_add+0x18c>)
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80114d8:	68fb      	ldr	r3, [r7, #12]
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3718      	adds	r7, #24
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}
 80114e2:	bf00      	nop
 80114e4:	0801c210 	.word	0x0801c210
 80114e8:	0801c2a4 	.word	0x0801c2a4
 80114ec:	0801c260 	.word	0x0801c260
 80114f0:	0801c2c0 	.word	0x0801c2c0
 80114f4:	0801e994 	.word	0x0801e994
 80114f8:	08011831 	.word	0x08011831
 80114fc:	20004560 	.word	0x20004560
 8011500:	2000b4b4 	.word	0x2000b4b4
 8011504:	0801c2e4 	.word	0x0801c2e4
 8011508:	0801c2f8 	.word	0x0801c2f8

0801150c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011516:	6839      	ldr	r1, [r7, #0]
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f002 fc61 	bl	8013de0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801151e:	6839      	ldr	r1, [r7, #0]
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f007 f837 	bl	8018594 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011526:	bf00      	nop
 8011528:	3708      	adds	r7, #8
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
	...

08011530 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b086      	sub	sp, #24
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d106      	bne.n	8011550 <netif_do_set_ipaddr+0x20>
 8011542:	4b1d      	ldr	r3, [pc, #116]	; (80115b8 <netif_do_set_ipaddr+0x88>)
 8011544:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011548:	491c      	ldr	r1, [pc, #112]	; (80115bc <netif_do_set_ipaddr+0x8c>)
 801154a:	481d      	ldr	r0, [pc, #116]	; (80115c0 <netif_do_set_ipaddr+0x90>)
 801154c:	f009 fc68 	bl	801ae20 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d106      	bne.n	8011564 <netif_do_set_ipaddr+0x34>
 8011556:	4b18      	ldr	r3, [pc, #96]	; (80115b8 <netif_do_set_ipaddr+0x88>)
 8011558:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801155c:	4917      	ldr	r1, [pc, #92]	; (80115bc <netif_do_set_ipaddr+0x8c>)
 801155e:	4818      	ldr	r0, [pc, #96]	; (80115c0 <netif_do_set_ipaddr+0x90>)
 8011560:	f009 fc5e 	bl	801ae20 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	3304      	adds	r3, #4
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	429a      	cmp	r2, r3
 8011570:	d01c      	beq.n	80115ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	3304      	adds	r3, #4
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011582:	f107 0314 	add.w	r3, r7, #20
 8011586:	4619      	mov	r1, r3
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f7ff ffbf 	bl	801150c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <netif_do_set_ipaddr+0x6a>
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	e000      	b.n	801159c <netif_do_set_ipaddr+0x6c>
 801159a:	2300      	movs	r3, #0
 801159c:	68fa      	ldr	r2, [r7, #12]
 801159e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80115a0:	2101      	movs	r1, #1
 80115a2:	68f8      	ldr	r0, [r7, #12]
 80115a4:	f000 f8d2 	bl	801174c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80115a8:	2301      	movs	r3, #1
 80115aa:	e000      	b.n	80115ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80115ac:	2300      	movs	r3, #0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3718      	adds	r7, #24
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	0801c210 	.word	0x0801c210
 80115bc:	0801c328 	.word	0x0801c328
 80115c0:	0801c260 	.word	0x0801c260

080115c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	3308      	adds	r3, #8
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	429a      	cmp	r2, r3
 80115dc:	d00a      	beq.n	80115f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <netif_do_set_netmask+0x26>
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	e000      	b.n	80115ec <netif_do_set_netmask+0x28>
 80115ea:	2300      	movs	r3, #0
 80115ec:	68fa      	ldr	r2, [r7, #12]
 80115ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80115f0:	2301      	movs	r3, #1
 80115f2:	e000      	b.n	80115f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80115f4:	2300      	movs	r3, #0
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3714      	adds	r7, #20
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011602:	b480      	push	{r7}
 8011604:	b085      	sub	sp, #20
 8011606:	af00      	add	r7, sp, #0
 8011608:	60f8      	str	r0, [r7, #12]
 801160a:	60b9      	str	r1, [r7, #8]
 801160c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	330c      	adds	r3, #12
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	429a      	cmp	r2, r3
 801161a:	d00a      	beq.n	8011632 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d002      	beq.n	8011628 <netif_do_set_gw+0x26>
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	e000      	b.n	801162a <netif_do_set_gw+0x28>
 8011628:	2300      	movs	r3, #0
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801162e:	2301      	movs	r3, #1
 8011630:	e000      	b.n	8011634 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011632:	2300      	movs	r3, #0
}
 8011634:	4618      	mov	r0, r3
 8011636:	3714      	adds	r7, #20
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b088      	sub	sp, #32
 8011644:	af00      	add	r7, sp, #0
 8011646:	60f8      	str	r0, [r7, #12]
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	607a      	str	r2, [r7, #4]
 801164c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801164e:	2300      	movs	r3, #0
 8011650:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011652:	2300      	movs	r3, #0
 8011654:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d101      	bne.n	8011660 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801165c:	4b1c      	ldr	r3, [pc, #112]	; (80116d0 <netif_set_addr+0x90>)
 801165e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d101      	bne.n	801166a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011666:	4b1a      	ldr	r3, [pc, #104]	; (80116d0 <netif_set_addr+0x90>)
 8011668:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d101      	bne.n	8011674 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011670:	4b17      	ldr	r3, [pc, #92]	; (80116d0 <netif_set_addr+0x90>)
 8011672:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d003      	beq.n	8011682 <netif_set_addr+0x42>
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d101      	bne.n	8011686 <netif_set_addr+0x46>
 8011682:	2301      	movs	r3, #1
 8011684:	e000      	b.n	8011688 <netif_set_addr+0x48>
 8011686:	2300      	movs	r3, #0
 8011688:	617b      	str	r3, [r7, #20]
  if (remove) {
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d006      	beq.n	801169e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011690:	f107 0310 	add.w	r3, r7, #16
 8011694:	461a      	mov	r2, r3
 8011696:	68b9      	ldr	r1, [r7, #8]
 8011698:	68f8      	ldr	r0, [r7, #12]
 801169a:	f7ff ff49 	bl	8011530 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801169e:	69fa      	ldr	r2, [r7, #28]
 80116a0:	6879      	ldr	r1, [r7, #4]
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	f7ff ff8e 	bl	80115c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80116a8:	69ba      	ldr	r2, [r7, #24]
 80116aa:	6839      	ldr	r1, [r7, #0]
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	f7ff ffa8 	bl	8011602 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d106      	bne.n	80116c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80116b8:	f107 0310 	add.w	r3, r7, #16
 80116bc:	461a      	mov	r2, r3
 80116be:	68b9      	ldr	r1, [r7, #8]
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f7ff ff35 	bl	8011530 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80116c6:	bf00      	nop
 80116c8:	3720      	adds	r7, #32
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}
 80116ce:	bf00      	nop
 80116d0:	0801e994 	.word	0x0801e994

080116d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b083      	sub	sp, #12
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80116dc:	4a04      	ldr	r2, [pc, #16]	; (80116f0 <netif_set_default+0x1c>)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80116e2:	bf00      	nop
 80116e4:	370c      	adds	r7, #12
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	2000b4b8 	.word	0x2000b4b8

080116f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d107      	bne.n	8011712 <netif_set_up+0x1e>
 8011702:	4b0f      	ldr	r3, [pc, #60]	; (8011740 <netif_set_up+0x4c>)
 8011704:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011708:	490e      	ldr	r1, [pc, #56]	; (8011744 <netif_set_up+0x50>)
 801170a:	480f      	ldr	r0, [pc, #60]	; (8011748 <netif_set_up+0x54>)
 801170c:	f009 fb88 	bl	801ae20 <iprintf>
 8011710:	e013      	b.n	801173a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011718:	f003 0301 	and.w	r3, r3, #1
 801171c:	2b00      	cmp	r3, #0
 801171e:	d10c      	bne.n	801173a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011726:	f043 0301 	orr.w	r3, r3, #1
 801172a:	b2da      	uxtb	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011732:	2103      	movs	r1, #3
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 f809 	bl	801174c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	0801c210 	.word	0x0801c210
 8011744:	0801c398 	.word	0x0801c398
 8011748:	0801c260 	.word	0x0801c260

0801174c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	460b      	mov	r3, r1
 8011756:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d106      	bne.n	801176c <netif_issue_reports+0x20>
 801175e:	4b18      	ldr	r3, [pc, #96]	; (80117c0 <netif_issue_reports+0x74>)
 8011760:	f240 326d 	movw	r2, #877	; 0x36d
 8011764:	4917      	ldr	r1, [pc, #92]	; (80117c4 <netif_issue_reports+0x78>)
 8011766:	4818      	ldr	r0, [pc, #96]	; (80117c8 <netif_issue_reports+0x7c>)
 8011768:	f009 fb5a 	bl	801ae20 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011772:	f003 0304 	and.w	r3, r3, #4
 8011776:	2b00      	cmp	r3, #0
 8011778:	d01e      	beq.n	80117b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011780:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011784:	2b00      	cmp	r3, #0
 8011786:	d017      	beq.n	80117b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011788:	78fb      	ldrb	r3, [r7, #3]
 801178a:	f003 0301 	and.w	r3, r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	d013      	beq.n	80117ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	3304      	adds	r3, #4
 8011796:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011798:	2b00      	cmp	r3, #0
 801179a:	d00e      	beq.n	80117ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80117a2:	f003 0308 	and.w	r3, r3, #8
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d007      	beq.n	80117ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	3304      	adds	r3, #4
 80117ae:	4619      	mov	r1, r3
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f007 fe59 	bl	8019468 <etharp_request>
 80117b6:	e000      	b.n	80117ba <netif_issue_reports+0x6e>
    return;
 80117b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80117ba:	3708      	adds	r7, #8
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}
 80117c0:	0801c210 	.word	0x0801c210
 80117c4:	0801c3b4 	.word	0x0801c3b4
 80117c8:	0801c260 	.word	0x0801c260

080117cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d107      	bne.n	80117ea <netif_set_down+0x1e>
 80117da:	4b12      	ldr	r3, [pc, #72]	; (8011824 <netif_set_down+0x58>)
 80117dc:	f240 329b 	movw	r2, #923	; 0x39b
 80117e0:	4911      	ldr	r1, [pc, #68]	; (8011828 <netif_set_down+0x5c>)
 80117e2:	4812      	ldr	r0, [pc, #72]	; (801182c <netif_set_down+0x60>)
 80117e4:	f009 fb1c 	bl	801ae20 <iprintf>
 80117e8:	e019      	b.n	801181e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80117f0:	f003 0301 	and.w	r3, r3, #1
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d012      	beq.n	801181e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80117fe:	f023 0301 	bic.w	r3, r3, #1
 8011802:	b2da      	uxtb	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8011810:	f003 0308 	and.w	r3, r3, #8
 8011814:	2b00      	cmp	r3, #0
 8011816:	d002      	beq.n	801181e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f007 f9e3 	bl	8018be4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	0801c210 	.word	0x0801c210
 8011828:	0801c3d8 	.word	0x0801c3d8
 801182c:	0801c260 	.word	0x0801c260

08011830 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801183c:	f06f 030b 	mvn.w	r3, #11
}
 8011840:	4618      	mov	r0, r3
 8011842:	3714      	adds	r7, #20
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801184c:	b480      	push	{r7}
 801184e:	b085      	sub	sp, #20
 8011850:	af00      	add	r7, sp, #0
 8011852:	4603      	mov	r3, r0
 8011854:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011856:	79fb      	ldrb	r3, [r7, #7]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d013      	beq.n	8011884 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801185c:	4b0d      	ldr	r3, [pc, #52]	; (8011894 <netif_get_by_index+0x48>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	60fb      	str	r3, [r7, #12]
 8011862:	e00c      	b.n	801187e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801186a:	3301      	adds	r3, #1
 801186c:	b2db      	uxtb	r3, r3
 801186e:	79fa      	ldrb	r2, [r7, #7]
 8011870:	429a      	cmp	r2, r3
 8011872:	d101      	bne.n	8011878 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	e006      	b.n	8011886 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	60fb      	str	r3, [r7, #12]
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d1ef      	bne.n	8011864 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011884:	2300      	movs	r3, #0
}
 8011886:	4618      	mov	r0, r3
 8011888:	3714      	adds	r7, #20
 801188a:	46bd      	mov	sp, r7
 801188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011890:	4770      	bx	lr
 8011892:	bf00      	nop
 8011894:	2000b4b4 	.word	0x2000b4b4

08011898 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801189e:	f009 fa5b 	bl	801ad58 <sys_arch_protect>
 80118a2:	6038      	str	r0, [r7, #0]
 80118a4:	4b0d      	ldr	r3, [pc, #52]	; (80118dc <pbuf_free_ooseq+0x44>)
 80118a6:	2200      	movs	r2, #0
 80118a8:	701a      	strb	r2, [r3, #0]
 80118aa:	6838      	ldr	r0, [r7, #0]
 80118ac:	f009 fa62 	bl	801ad74 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80118b0:	4b0b      	ldr	r3, [pc, #44]	; (80118e0 <pbuf_free_ooseq+0x48>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	607b      	str	r3, [r7, #4]
 80118b6:	e00a      	b.n	80118ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d003      	beq.n	80118c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f002 facb 	bl	8013e5c <tcp_free_ooseq>
      return;
 80118c6:	e005      	b.n	80118d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	607b      	str	r3, [r7, #4]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1f1      	bne.n	80118b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80118d4:	3708      	adds	r7, #8
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}
 80118da:	bf00      	nop
 80118dc:	2000b4bc 	.word	0x2000b4bc
 80118e0:	2000b4c4 	.word	0x2000b4c4

080118e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80118ec:	f7ff ffd4 	bl	8011898 <pbuf_free_ooseq>
}
 80118f0:	bf00      	nop
 80118f2:	3708      	adds	r7, #8
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80118fe:	f009 fa2b 	bl	801ad58 <sys_arch_protect>
 8011902:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011904:	4b0f      	ldr	r3, [pc, #60]	; (8011944 <pbuf_pool_is_empty+0x4c>)
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801190a:	4b0e      	ldr	r3, [pc, #56]	; (8011944 <pbuf_pool_is_empty+0x4c>)
 801190c:	2201      	movs	r2, #1
 801190e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f009 fa2f 	bl	801ad74 <sys_arch_unprotect>

  if (!queued) {
 8011916:	78fb      	ldrb	r3, [r7, #3]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10f      	bne.n	801193c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801191c:	2100      	movs	r1, #0
 801191e:	480a      	ldr	r0, [pc, #40]	; (8011948 <pbuf_pool_is_empty+0x50>)
 8011920:	f7fe fc98 	bl	8010254 <tcpip_try_callback>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d008      	beq.n	801193c <pbuf_pool_is_empty+0x44>
 801192a:	f009 fa15 	bl	801ad58 <sys_arch_protect>
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	4b04      	ldr	r3, [pc, #16]	; (8011944 <pbuf_pool_is_empty+0x4c>)
 8011932:	2200      	movs	r2, #0
 8011934:	701a      	strb	r2, [r3, #0]
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f009 fa1c 	bl	801ad74 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801193c:	bf00      	nop
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}
 8011944:	2000b4bc 	.word	0x2000b4bc
 8011948:	080118e5 	.word	0x080118e5

0801194c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801194c:	b480      	push	{r7}
 801194e:	b085      	sub	sp, #20
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	4611      	mov	r1, r2
 8011958:	461a      	mov	r2, r3
 801195a:	460b      	mov	r3, r1
 801195c:	80fb      	strh	r3, [r7, #6]
 801195e:	4613      	mov	r3, r2
 8011960:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2200      	movs	r2, #0
 8011966:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	68ba      	ldr	r2, [r7, #8]
 801196c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	88fa      	ldrh	r2, [r7, #6]
 8011972:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	88ba      	ldrh	r2, [r7, #4]
 8011978:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801197a:	8b3b      	ldrh	r3, [r7, #24]
 801197c:	b2da      	uxtb	r2, r3
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	7f3a      	ldrb	r2, [r7, #28]
 8011986:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2201      	movs	r2, #1
 801198c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	2200      	movs	r2, #0
 8011992:	73da      	strb	r2, [r3, #15]
}
 8011994:	bf00      	nop
 8011996:	3714      	adds	r7, #20
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b08c      	sub	sp, #48	; 0x30
 80119a4:	af02      	add	r7, sp, #8
 80119a6:	4603      	mov	r3, r0
 80119a8:	71fb      	strb	r3, [r7, #7]
 80119aa:	460b      	mov	r3, r1
 80119ac:	80bb      	strh	r3, [r7, #4]
 80119ae:	4613      	mov	r3, r2
 80119b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80119b2:	79fb      	ldrb	r3, [r7, #7]
 80119b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80119b6:	887b      	ldrh	r3, [r7, #2]
 80119b8:	2b41      	cmp	r3, #65	; 0x41
 80119ba:	d00b      	beq.n	80119d4 <pbuf_alloc+0x34>
 80119bc:	2b41      	cmp	r3, #65	; 0x41
 80119be:	dc02      	bgt.n	80119c6 <pbuf_alloc+0x26>
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d007      	beq.n	80119d4 <pbuf_alloc+0x34>
 80119c4:	e0c2      	b.n	8011b4c <pbuf_alloc+0x1ac>
 80119c6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80119ca:	d00b      	beq.n	80119e4 <pbuf_alloc+0x44>
 80119cc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80119d0:	d070      	beq.n	8011ab4 <pbuf_alloc+0x114>
 80119d2:	e0bb      	b.n	8011b4c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80119d4:	887a      	ldrh	r2, [r7, #2]
 80119d6:	88bb      	ldrh	r3, [r7, #4]
 80119d8:	4619      	mov	r1, r3
 80119da:	2000      	movs	r0, #0
 80119dc:	f000 f8d2 	bl	8011b84 <pbuf_alloc_reference>
 80119e0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80119e2:	e0bd      	b.n	8011b60 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80119e4:	2300      	movs	r3, #0
 80119e6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80119e8:	2300      	movs	r3, #0
 80119ea:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80119ec:	88bb      	ldrh	r3, [r7, #4]
 80119ee:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80119f0:	200d      	movs	r0, #13
 80119f2:	f7ff fc3b 	bl	801126c <memp_malloc>
 80119f6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d109      	bne.n	8011a12 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80119fe:	f7ff ff7b 	bl	80118f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d002      	beq.n	8011a0e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8011a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a0a:	f000 faa9 	bl	8011f60 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	e0a7      	b.n	8011b62 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011a12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a14:	3303      	adds	r3, #3
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	f023 0303 	bic.w	r3, r3, #3
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8011a22:	b29b      	uxth	r3, r3
 8011a24:	8b7a      	ldrh	r2, [r7, #26]
 8011a26:	4293      	cmp	r3, r2
 8011a28:	bf28      	it	cs
 8011a2a:	4613      	movcs	r3, r2
 8011a2c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011a2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a30:	3310      	adds	r3, #16
 8011a32:	693a      	ldr	r2, [r7, #16]
 8011a34:	4413      	add	r3, r2
 8011a36:	3303      	adds	r3, #3
 8011a38:	f023 0303 	bic.w	r3, r3, #3
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	89f9      	ldrh	r1, [r7, #14]
 8011a40:	8b7a      	ldrh	r2, [r7, #26]
 8011a42:	2300      	movs	r3, #0
 8011a44:	9301      	str	r3, [sp, #4]
 8011a46:	887b      	ldrh	r3, [r7, #2]
 8011a48:	9300      	str	r3, [sp, #0]
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	4601      	mov	r1, r0
 8011a4e:	6938      	ldr	r0, [r7, #16]
 8011a50:	f7ff ff7c 	bl	801194c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8011a54:	693b      	ldr	r3, [r7, #16]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	f003 0303 	and.w	r3, r3, #3
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d006      	beq.n	8011a6e <pbuf_alloc+0xce>
 8011a60:	4b42      	ldr	r3, [pc, #264]	; (8011b6c <pbuf_alloc+0x1cc>)
 8011a62:	f240 1201 	movw	r2, #257	; 0x101
 8011a66:	4942      	ldr	r1, [pc, #264]	; (8011b70 <pbuf_alloc+0x1d0>)
 8011a68:	4842      	ldr	r0, [pc, #264]	; (8011b74 <pbuf_alloc+0x1d4>)
 8011a6a:	f009 f9d9 	bl	801ae20 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011a6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a70:	3303      	adds	r3, #3
 8011a72:	f023 0303 	bic.w	r3, r3, #3
 8011a76:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011a7a:	d106      	bne.n	8011a8a <pbuf_alloc+0xea>
 8011a7c:	4b3b      	ldr	r3, [pc, #236]	; (8011b6c <pbuf_alloc+0x1cc>)
 8011a7e:	f240 1203 	movw	r2, #259	; 0x103
 8011a82:	493d      	ldr	r1, [pc, #244]	; (8011b78 <pbuf_alloc+0x1d8>)
 8011a84:	483b      	ldr	r0, [pc, #236]	; (8011b74 <pbuf_alloc+0x1d4>)
 8011a86:	f009 f9cb 	bl	801ae20 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d102      	bne.n	8011a96 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	627b      	str	r3, [r7, #36]	; 0x24
 8011a94:	e002      	b.n	8011a9c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011a96:	69fb      	ldr	r3, [r7, #28]
 8011a98:	693a      	ldr	r2, [r7, #16]
 8011a9a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011aa0:	8b7a      	ldrh	r2, [r7, #26]
 8011aa2:	89fb      	ldrh	r3, [r7, #14]
 8011aa4:	1ad3      	subs	r3, r2, r3
 8011aa6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011aac:	8b7b      	ldrh	r3, [r7, #26]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d19e      	bne.n	80119f0 <pbuf_alloc+0x50>
      break;
 8011ab2:	e055      	b.n	8011b60 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8011ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ab6:	3303      	adds	r3, #3
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	f023 0303 	bic.w	r3, r3, #3
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	88bb      	ldrh	r3, [r7, #4]
 8011ac2:	3303      	adds	r3, #3
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	f023 0303 	bic.w	r3, r3, #3
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	4413      	add	r3, r2
 8011ace:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011ad0:	8b3b      	ldrh	r3, [r7, #24]
 8011ad2:	3310      	adds	r3, #16
 8011ad4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011ad6:	8b3a      	ldrh	r2, [r7, #24]
 8011ad8:	88bb      	ldrh	r3, [r7, #4]
 8011ada:	3303      	adds	r3, #3
 8011adc:	f023 0303 	bic.w	r3, r3, #3
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d306      	bcc.n	8011af2 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011ae4:	8afa      	ldrh	r2, [r7, #22]
 8011ae6:	88bb      	ldrh	r3, [r7, #4]
 8011ae8:	3303      	adds	r3, #3
 8011aea:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d201      	bcs.n	8011af6 <pbuf_alloc+0x156>
        return NULL;
 8011af2:	2300      	movs	r3, #0
 8011af4:	e035      	b.n	8011b62 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011af6:	8afb      	ldrh	r3, [r7, #22]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7ff fa35 	bl	8010f68 <mem_malloc>
 8011afe:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d101      	bne.n	8011b0a <pbuf_alloc+0x16a>
        return NULL;
 8011b06:	2300      	movs	r3, #0
 8011b08:	e02b      	b.n	8011b62 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011b0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b0c:	3310      	adds	r3, #16
 8011b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b10:	4413      	add	r3, r2
 8011b12:	3303      	adds	r3, #3
 8011b14:	f023 0303 	bic.w	r3, r3, #3
 8011b18:	4618      	mov	r0, r3
 8011b1a:	88b9      	ldrh	r1, [r7, #4]
 8011b1c:	88ba      	ldrh	r2, [r7, #4]
 8011b1e:	2300      	movs	r3, #0
 8011b20:	9301      	str	r3, [sp, #4]
 8011b22:	887b      	ldrh	r3, [r7, #2]
 8011b24:	9300      	str	r3, [sp, #0]
 8011b26:	460b      	mov	r3, r1
 8011b28:	4601      	mov	r1, r0
 8011b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b2c:	f7ff ff0e 	bl	801194c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	f003 0303 	and.w	r3, r3, #3
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d010      	beq.n	8011b5e <pbuf_alloc+0x1be>
 8011b3c:	4b0b      	ldr	r3, [pc, #44]	; (8011b6c <pbuf_alloc+0x1cc>)
 8011b3e:	f240 1223 	movw	r2, #291	; 0x123
 8011b42:	490e      	ldr	r1, [pc, #56]	; (8011b7c <pbuf_alloc+0x1dc>)
 8011b44:	480b      	ldr	r0, [pc, #44]	; (8011b74 <pbuf_alloc+0x1d4>)
 8011b46:	f009 f96b 	bl	801ae20 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011b4a:	e008      	b.n	8011b5e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011b4c:	4b07      	ldr	r3, [pc, #28]	; (8011b6c <pbuf_alloc+0x1cc>)
 8011b4e:	f240 1227 	movw	r2, #295	; 0x127
 8011b52:	490b      	ldr	r1, [pc, #44]	; (8011b80 <pbuf_alloc+0x1e0>)
 8011b54:	4807      	ldr	r0, [pc, #28]	; (8011b74 <pbuf_alloc+0x1d4>)
 8011b56:	f009 f963 	bl	801ae20 <iprintf>
      return NULL;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	e001      	b.n	8011b62 <pbuf_alloc+0x1c2>
      break;
 8011b5e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	3728      	adds	r7, #40	; 0x28
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	0801c440 	.word	0x0801c440
 8011b70:	0801c470 	.word	0x0801c470
 8011b74:	0801c4a0 	.word	0x0801c4a0
 8011b78:	0801c4c8 	.word	0x0801c4c8
 8011b7c:	0801c4fc 	.word	0x0801c4fc
 8011b80:	0801c528 	.word	0x0801c528

08011b84 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af02      	add	r7, sp, #8
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	460b      	mov	r3, r1
 8011b8e:	807b      	strh	r3, [r7, #2]
 8011b90:	4613      	mov	r3, r2
 8011b92:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011b94:	883b      	ldrh	r3, [r7, #0]
 8011b96:	2b41      	cmp	r3, #65	; 0x41
 8011b98:	d009      	beq.n	8011bae <pbuf_alloc_reference+0x2a>
 8011b9a:	883b      	ldrh	r3, [r7, #0]
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d006      	beq.n	8011bae <pbuf_alloc_reference+0x2a>
 8011ba0:	4b0f      	ldr	r3, [pc, #60]	; (8011be0 <pbuf_alloc_reference+0x5c>)
 8011ba2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011ba6:	490f      	ldr	r1, [pc, #60]	; (8011be4 <pbuf_alloc_reference+0x60>)
 8011ba8:	480f      	ldr	r0, [pc, #60]	; (8011be8 <pbuf_alloc_reference+0x64>)
 8011baa:	f009 f939 	bl	801ae20 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011bae:	200c      	movs	r0, #12
 8011bb0:	f7ff fb5c 	bl	801126c <memp_malloc>
 8011bb4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	e00b      	b.n	8011bd8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011bc0:	8879      	ldrh	r1, [r7, #2]
 8011bc2:	887a      	ldrh	r2, [r7, #2]
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	9301      	str	r3, [sp, #4]
 8011bc8:	883b      	ldrh	r3, [r7, #0]
 8011bca:	9300      	str	r3, [sp, #0]
 8011bcc:	460b      	mov	r3, r1
 8011bce:	6879      	ldr	r1, [r7, #4]
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f7ff febb 	bl	801194c <pbuf_init_alloced_pbuf>
  return p;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3710      	adds	r7, #16
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	0801c440 	.word	0x0801c440
 8011be4:	0801c544 	.word	0x0801c544
 8011be8:	0801c4a0 	.word	0x0801c4a0

08011bec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b088      	sub	sp, #32
 8011bf0:	af02      	add	r7, sp, #8
 8011bf2:	607b      	str	r3, [r7, #4]
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	73fb      	strb	r3, [r7, #15]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	81bb      	strh	r3, [r7, #12]
 8011bfc:	4613      	mov	r3, r2
 8011bfe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011c00:	7bfb      	ldrb	r3, [r7, #15]
 8011c02:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011c04:	8a7b      	ldrh	r3, [r7, #18]
 8011c06:	3303      	adds	r3, #3
 8011c08:	f023 0203 	bic.w	r2, r3, #3
 8011c0c:	89bb      	ldrh	r3, [r7, #12]
 8011c0e:	441a      	add	r2, r3
 8011c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d901      	bls.n	8011c1a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011c16:	2300      	movs	r3, #0
 8011c18:	e018      	b.n	8011c4c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011c1a:	6a3b      	ldr	r3, [r7, #32]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d007      	beq.n	8011c30 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011c20:	8a7b      	ldrh	r3, [r7, #18]
 8011c22:	3303      	adds	r3, #3
 8011c24:	f023 0303 	bic.w	r3, r3, #3
 8011c28:	6a3a      	ldr	r2, [r7, #32]
 8011c2a:	4413      	add	r3, r2
 8011c2c:	617b      	str	r3, [r7, #20]
 8011c2e:	e001      	b.n	8011c34 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011c30:	2300      	movs	r3, #0
 8011c32:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	89b9      	ldrh	r1, [r7, #12]
 8011c38:	89ba      	ldrh	r2, [r7, #12]
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	9301      	str	r3, [sp, #4]
 8011c3e:	897b      	ldrh	r3, [r7, #10]
 8011c40:	9300      	str	r3, [sp, #0]
 8011c42:	460b      	mov	r3, r1
 8011c44:	6979      	ldr	r1, [r7, #20]
 8011c46:	f7ff fe81 	bl	801194c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011c4a:	687b      	ldr	r3, [r7, #4]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3718      	adds	r7, #24
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d106      	bne.n	8011c74 <pbuf_realloc+0x20>
 8011c66:	4b3a      	ldr	r3, [pc, #232]	; (8011d50 <pbuf_realloc+0xfc>)
 8011c68:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011c6c:	4939      	ldr	r1, [pc, #228]	; (8011d54 <pbuf_realloc+0x100>)
 8011c6e:	483a      	ldr	r0, [pc, #232]	; (8011d58 <pbuf_realloc+0x104>)
 8011c70:	f009 f8d6 	bl	801ae20 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	891b      	ldrh	r3, [r3, #8]
 8011c78:	887a      	ldrh	r2, [r7, #2]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d264      	bcs.n	8011d48 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	891a      	ldrh	r2, [r3, #8]
 8011c82:	887b      	ldrh	r3, [r7, #2]
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011c88:	887b      	ldrh	r3, [r7, #2]
 8011c8a:	817b      	strh	r3, [r7, #10]
  q = p;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011c90:	e018      	b.n	8011cc4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	895b      	ldrh	r3, [r3, #10]
 8011c96:	897a      	ldrh	r2, [r7, #10]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	891a      	ldrh	r2, [r3, #8]
 8011ca0:	893b      	ldrh	r3, [r7, #8]
 8011ca2:	1ad3      	subs	r3, r2, r3
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d106      	bne.n	8011cc4 <pbuf_realloc+0x70>
 8011cb6:	4b26      	ldr	r3, [pc, #152]	; (8011d50 <pbuf_realloc+0xfc>)
 8011cb8:	f240 12af 	movw	r2, #431	; 0x1af
 8011cbc:	4927      	ldr	r1, [pc, #156]	; (8011d5c <pbuf_realloc+0x108>)
 8011cbe:	4826      	ldr	r0, [pc, #152]	; (8011d58 <pbuf_realloc+0x104>)
 8011cc0:	f009 f8ae 	bl	801ae20 <iprintf>
  while (rem_len > q->len) {
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	895b      	ldrh	r3, [r3, #10]
 8011cc8:	897a      	ldrh	r2, [r7, #10]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d8e1      	bhi.n	8011c92 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	7b1b      	ldrb	r3, [r3, #12]
 8011cd2:	f003 030f 	and.w	r3, r3, #15
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d122      	bne.n	8011d20 <pbuf_realloc+0xcc>
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	895b      	ldrh	r3, [r3, #10]
 8011cde:	897a      	ldrh	r2, [r7, #10]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d01d      	beq.n	8011d20 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	7b5b      	ldrb	r3, [r3, #13]
 8011ce8:	f003 0302 	and.w	r3, r3, #2
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d117      	bne.n	8011d20 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	1ad3      	subs	r3, r2, r3
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	897b      	ldrh	r3, [r7, #10]
 8011cfe:	4413      	add	r3, r2
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	4619      	mov	r1, r3
 8011d04:	68f8      	ldr	r0, [r7, #12]
 8011d06:	f7ff f825 	bl	8010d54 <mem_trim>
 8011d0a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d106      	bne.n	8011d20 <pbuf_realloc+0xcc>
 8011d12:	4b0f      	ldr	r3, [pc, #60]	; (8011d50 <pbuf_realloc+0xfc>)
 8011d14:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011d18:	4911      	ldr	r1, [pc, #68]	; (8011d60 <pbuf_realloc+0x10c>)
 8011d1a:	480f      	ldr	r0, [pc, #60]	; (8011d58 <pbuf_realloc+0x104>)
 8011d1c:	f009 f880 	bl	801ae20 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	897a      	ldrh	r2, [r7, #10]
 8011d24:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	895a      	ldrh	r2, [r3, #10]
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d004      	beq.n	8011d40 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f000 f910 	bl	8011f60 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	2200      	movs	r2, #0
 8011d44:	601a      	str	r2, [r3, #0]
 8011d46:	e000      	b.n	8011d4a <pbuf_realloc+0xf6>
    return;
 8011d48:	bf00      	nop

}
 8011d4a:	3710      	adds	r7, #16
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	0801c440 	.word	0x0801c440
 8011d54:	0801c558 	.word	0x0801c558
 8011d58:	0801c4a0 	.word	0x0801c4a0
 8011d5c:	0801c570 	.word	0x0801c570
 8011d60:	0801c588 	.word	0x0801c588

08011d64 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b086      	sub	sp, #24
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	4613      	mov	r3, r2
 8011d70:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d106      	bne.n	8011d86 <pbuf_add_header_impl+0x22>
 8011d78:	4b2b      	ldr	r3, [pc, #172]	; (8011e28 <pbuf_add_header_impl+0xc4>)
 8011d7a:	f240 12df 	movw	r2, #479	; 0x1df
 8011d7e:	492b      	ldr	r1, [pc, #172]	; (8011e2c <pbuf_add_header_impl+0xc8>)
 8011d80:	482b      	ldr	r0, [pc, #172]	; (8011e30 <pbuf_add_header_impl+0xcc>)
 8011d82:	f009 f84d 	bl	801ae20 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d003      	beq.n	8011d94 <pbuf_add_header_impl+0x30>
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d92:	d301      	bcc.n	8011d98 <pbuf_add_header_impl+0x34>
    return 1;
 8011d94:	2301      	movs	r3, #1
 8011d96:	e043      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d101      	bne.n	8011da2 <pbuf_add_header_impl+0x3e>
    return 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	e03e      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	891a      	ldrh	r2, [r3, #8]
 8011daa:	8a7b      	ldrh	r3, [r7, #18]
 8011dac:	4413      	add	r3, r2
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	8a7a      	ldrh	r2, [r7, #18]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d901      	bls.n	8011dba <pbuf_add_header_impl+0x56>
    return 1;
 8011db6:	2301      	movs	r3, #1
 8011db8:	e032      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	7b1b      	ldrb	r3, [r3, #12]
 8011dbe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011dc0:	8a3b      	ldrh	r3, [r7, #16]
 8011dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d00c      	beq.n	8011de4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	685a      	ldr	r2, [r3, #4]
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	425b      	negs	r3, r3
 8011dd2:	4413      	add	r3, r2
 8011dd4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	3310      	adds	r3, #16
 8011dda:	697a      	ldr	r2, [r7, #20]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d20d      	bcs.n	8011dfc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011de0:	2301      	movs	r3, #1
 8011de2:	e01d      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011de4:	79fb      	ldrb	r3, [r7, #7]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d006      	beq.n	8011df8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	685a      	ldr	r2, [r3, #4]
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	425b      	negs	r3, r3
 8011df2:	4413      	add	r3, r2
 8011df4:	617b      	str	r3, [r7, #20]
 8011df6:	e001      	b.n	8011dfc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e011      	b.n	8011e20 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	697a      	ldr	r2, [r7, #20]
 8011e00:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	895a      	ldrh	r2, [r3, #10]
 8011e06:	8a7b      	ldrh	r3, [r7, #18]
 8011e08:	4413      	add	r3, r2
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	891a      	ldrh	r2, [r3, #8]
 8011e14:	8a7b      	ldrh	r3, [r7, #18]
 8011e16:	4413      	add	r3, r2
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	811a      	strh	r2, [r3, #8]


  return 0;
 8011e1e:	2300      	movs	r3, #0
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3718      	adds	r7, #24
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	0801c440 	.word	0x0801c440
 8011e2c:	0801c5a4 	.word	0x0801c5a4
 8011e30:	0801c4a0 	.word	0x0801c4a0

08011e34 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011e3e:	2200      	movs	r2, #0
 8011e40:	6839      	ldr	r1, [r7, #0]
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f7ff ff8e 	bl	8011d64 <pbuf_add_header_impl>
 8011e48:	4603      	mov	r3, r0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3708      	adds	r7, #8
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
	...

08011e54 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b084      	sub	sp, #16
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d106      	bne.n	8011e72 <pbuf_remove_header+0x1e>
 8011e64:	4b20      	ldr	r3, [pc, #128]	; (8011ee8 <pbuf_remove_header+0x94>)
 8011e66:	f240 224b 	movw	r2, #587	; 0x24b
 8011e6a:	4920      	ldr	r1, [pc, #128]	; (8011eec <pbuf_remove_header+0x98>)
 8011e6c:	4820      	ldr	r0, [pc, #128]	; (8011ef0 <pbuf_remove_header+0x9c>)
 8011e6e:	f008 ffd7 	bl	801ae20 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d003      	beq.n	8011e80 <pbuf_remove_header+0x2c>
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e7e:	d301      	bcc.n	8011e84 <pbuf_remove_header+0x30>
    return 1;
 8011e80:	2301      	movs	r3, #1
 8011e82:	e02c      	b.n	8011ede <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d101      	bne.n	8011e8e <pbuf_remove_header+0x3a>
    return 0;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	e027      	b.n	8011ede <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	895b      	ldrh	r3, [r3, #10]
 8011e96:	89fa      	ldrh	r2, [r7, #14]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d908      	bls.n	8011eae <pbuf_remove_header+0x5a>
 8011e9c:	4b12      	ldr	r3, [pc, #72]	; (8011ee8 <pbuf_remove_header+0x94>)
 8011e9e:	f240 2255 	movw	r2, #597	; 0x255
 8011ea2:	4914      	ldr	r1, [pc, #80]	; (8011ef4 <pbuf_remove_header+0xa0>)
 8011ea4:	4812      	ldr	r0, [pc, #72]	; (8011ef0 <pbuf_remove_header+0x9c>)
 8011ea6:	f008 ffbb 	bl	801ae20 <iprintf>
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e017      	b.n	8011ede <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	685a      	ldr	r2, [r3, #4]
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	441a      	add	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	895a      	ldrh	r2, [r3, #10]
 8011ec4:	89fb      	ldrh	r3, [r7, #14]
 8011ec6:	1ad3      	subs	r3, r2, r3
 8011ec8:	b29a      	uxth	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	891a      	ldrh	r2, [r3, #8]
 8011ed2:	89fb      	ldrh	r3, [r7, #14]
 8011ed4:	1ad3      	subs	r3, r2, r3
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011edc:	2300      	movs	r3, #0
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	0801c440 	.word	0x0801c440
 8011eec:	0801c5a4 	.word	0x0801c5a4
 8011ef0:	0801c4a0 	.word	0x0801c4a0
 8011ef4:	0801c5b0 	.word	0x0801c5b0

08011ef8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	807b      	strh	r3, [r7, #2]
 8011f04:	4613      	mov	r3, r2
 8011f06:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011f08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	da08      	bge.n	8011f22 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011f10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f14:	425b      	negs	r3, r3
 8011f16:	4619      	mov	r1, r3
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff ff9b 	bl	8011e54 <pbuf_remove_header>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	e007      	b.n	8011f32 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011f22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f26:	787a      	ldrb	r2, [r7, #1]
 8011f28:	4619      	mov	r1, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7ff ff1a 	bl	8011d64 <pbuf_add_header_impl>
 8011f30:	4603      	mov	r3, r0
  }
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3708      	adds	r7, #8
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}

08011f3a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011f3a:	b580      	push	{r7, lr}
 8011f3c:	b082      	sub	sp, #8
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
 8011f42:	460b      	mov	r3, r1
 8011f44:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011f46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7ff ffd2 	bl	8011ef8 <pbuf_header_impl>
 8011f54:	4603      	mov	r3, r0
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3708      	adds	r7, #8
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
	...

08011f60 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b088      	sub	sp, #32
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d10b      	bne.n	8011f86 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d106      	bne.n	8011f82 <pbuf_free+0x22>
 8011f74:	4b3b      	ldr	r3, [pc, #236]	; (8012064 <pbuf_free+0x104>)
 8011f76:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011f7a:	493b      	ldr	r1, [pc, #236]	; (8012068 <pbuf_free+0x108>)
 8011f7c:	483b      	ldr	r0, [pc, #236]	; (801206c <pbuf_free+0x10c>)
 8011f7e:	f008 ff4f 	bl	801ae20 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011f82:	2300      	movs	r3, #0
 8011f84:	e069      	b.n	801205a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011f86:	2300      	movs	r3, #0
 8011f88:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011f8a:	e062      	b.n	8012052 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011f8c:	f008 fee4 	bl	801ad58 <sys_arch_protect>
 8011f90:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	7b9b      	ldrb	r3, [r3, #14]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <pbuf_free+0x48>
 8011f9a:	4b32      	ldr	r3, [pc, #200]	; (8012064 <pbuf_free+0x104>)
 8011f9c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011fa0:	4933      	ldr	r1, [pc, #204]	; (8012070 <pbuf_free+0x110>)
 8011fa2:	4832      	ldr	r0, [pc, #200]	; (801206c <pbuf_free+0x10c>)
 8011fa4:	f008 ff3c 	bl	801ae20 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	7b9b      	ldrb	r3, [r3, #14]
 8011fac:	3b01      	subs	r3, #1
 8011fae:	b2da      	uxtb	r2, r3
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	739a      	strb	r2, [r3, #14]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	7b9b      	ldrb	r3, [r3, #14]
 8011fb8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011fba:	69b8      	ldr	r0, [r7, #24]
 8011fbc:	f008 feda 	bl	801ad74 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011fc0:	7dfb      	ldrb	r3, [r7, #23]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d143      	bne.n	801204e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	7b1b      	ldrb	r3, [r3, #12]
 8011fd0:	f003 030f 	and.w	r3, r3, #15
 8011fd4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	7b5b      	ldrb	r3, [r3, #13]
 8011fda:	f003 0302 	and.w	r3, r3, #2
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d011      	beq.n	8012006 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d106      	bne.n	8011ffc <pbuf_free+0x9c>
 8011fee:	4b1d      	ldr	r3, [pc, #116]	; (8012064 <pbuf_free+0x104>)
 8011ff0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011ff4:	491f      	ldr	r1, [pc, #124]	; (8012074 <pbuf_free+0x114>)
 8011ff6:	481d      	ldr	r0, [pc, #116]	; (801206c <pbuf_free+0x10c>)
 8011ff8:	f008 ff12 	bl	801ae20 <iprintf>
        pc->custom_free_function(p);
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	4798      	blx	r3
 8012004:	e01d      	b.n	8012042 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012006:	7bfb      	ldrb	r3, [r7, #15]
 8012008:	2b02      	cmp	r3, #2
 801200a:	d104      	bne.n	8012016 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801200c:	6879      	ldr	r1, [r7, #4]
 801200e:	200d      	movs	r0, #13
 8012010:	f7ff f97e 	bl	8011310 <memp_free>
 8012014:	e015      	b.n	8012042 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012016:	7bfb      	ldrb	r3, [r7, #15]
 8012018:	2b01      	cmp	r3, #1
 801201a:	d104      	bne.n	8012026 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801201c:	6879      	ldr	r1, [r7, #4]
 801201e:	200c      	movs	r0, #12
 8012020:	f7ff f976 	bl	8011310 <memp_free>
 8012024:	e00d      	b.n	8012042 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012026:	7bfb      	ldrb	r3, [r7, #15]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d103      	bne.n	8012034 <pbuf_free+0xd4>
          mem_free(p);
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7fe fe01 	bl	8010c34 <mem_free>
 8012032:	e006      	b.n	8012042 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012034:	4b0b      	ldr	r3, [pc, #44]	; (8012064 <pbuf_free+0x104>)
 8012036:	f240 320f 	movw	r2, #783	; 0x30f
 801203a:	490f      	ldr	r1, [pc, #60]	; (8012078 <pbuf_free+0x118>)
 801203c:	480b      	ldr	r0, [pc, #44]	; (801206c <pbuf_free+0x10c>)
 801203e:	f008 feef 	bl	801ae20 <iprintf>
        }
      }
      count++;
 8012042:	7ffb      	ldrb	r3, [r7, #31]
 8012044:	3301      	adds	r3, #1
 8012046:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	607b      	str	r3, [r7, #4]
 801204c:	e001      	b.n	8012052 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801204e:	2300      	movs	r3, #0
 8012050:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d199      	bne.n	8011f8c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012058:	7ffb      	ldrb	r3, [r7, #31]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3720      	adds	r7, #32
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
 8012062:	bf00      	nop
 8012064:	0801c440 	.word	0x0801c440
 8012068:	0801c5a4 	.word	0x0801c5a4
 801206c:	0801c4a0 	.word	0x0801c4a0
 8012070:	0801c5d0 	.word	0x0801c5d0
 8012074:	0801c5e8 	.word	0x0801c5e8
 8012078:	0801c60c 	.word	0x0801c60c

0801207c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012084:	2300      	movs	r3, #0
 8012086:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012088:	e005      	b.n	8012096 <pbuf_clen+0x1a>
    ++len;
 801208a:	89fb      	ldrh	r3, [r7, #14]
 801208c:	3301      	adds	r3, #1
 801208e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d1f6      	bne.n	801208a <pbuf_clen+0xe>
  }
  return len;
 801209c:	89fb      	ldrh	r3, [r7, #14]
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3714      	adds	r7, #20
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr
	...

080120ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b084      	sub	sp, #16
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d016      	beq.n	80120e8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80120ba:	f008 fe4d 	bl	801ad58 <sys_arch_protect>
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	7b9b      	ldrb	r3, [r3, #14]
 80120c4:	3301      	adds	r3, #1
 80120c6:	b2da      	uxtb	r2, r3
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	739a      	strb	r2, [r3, #14]
 80120cc:	68f8      	ldr	r0, [r7, #12]
 80120ce:	f008 fe51 	bl	801ad74 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	7b9b      	ldrb	r3, [r3, #14]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d106      	bne.n	80120e8 <pbuf_ref+0x3c>
 80120da:	4b05      	ldr	r3, [pc, #20]	; (80120f0 <pbuf_ref+0x44>)
 80120dc:	f240 3242 	movw	r2, #834	; 0x342
 80120e0:	4904      	ldr	r1, [pc, #16]	; (80120f4 <pbuf_ref+0x48>)
 80120e2:	4805      	ldr	r0, [pc, #20]	; (80120f8 <pbuf_ref+0x4c>)
 80120e4:	f008 fe9c 	bl	801ae20 <iprintf>
  }
}
 80120e8:	bf00      	nop
 80120ea:	3710      	adds	r7, #16
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	0801c440 	.word	0x0801c440
 80120f4:	0801c620 	.word	0x0801c620
 80120f8:	0801c4a0 	.word	0x0801c4a0

080120fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d002      	beq.n	8012112 <pbuf_cat+0x16>
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d107      	bne.n	8012122 <pbuf_cat+0x26>
 8012112:	4b20      	ldr	r3, [pc, #128]	; (8012194 <pbuf_cat+0x98>)
 8012114:	f240 325a 	movw	r2, #858	; 0x35a
 8012118:	491f      	ldr	r1, [pc, #124]	; (8012198 <pbuf_cat+0x9c>)
 801211a:	4820      	ldr	r0, [pc, #128]	; (801219c <pbuf_cat+0xa0>)
 801211c:	f008 fe80 	bl	801ae20 <iprintf>
 8012120:	e034      	b.n	801218c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	60fb      	str	r3, [r7, #12]
 8012126:	e00a      	b.n	801213e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	891a      	ldrh	r2, [r3, #8]
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	891b      	ldrh	r3, [r3, #8]
 8012130:	4413      	add	r3, r2
 8012132:	b29a      	uxth	r2, r3
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	60fb      	str	r3, [r7, #12]
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d1f0      	bne.n	8012128 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	891a      	ldrh	r2, [r3, #8]
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	895b      	ldrh	r3, [r3, #10]
 801214e:	429a      	cmp	r2, r3
 8012150:	d006      	beq.n	8012160 <pbuf_cat+0x64>
 8012152:	4b10      	ldr	r3, [pc, #64]	; (8012194 <pbuf_cat+0x98>)
 8012154:	f240 3262 	movw	r2, #866	; 0x362
 8012158:	4911      	ldr	r1, [pc, #68]	; (80121a0 <pbuf_cat+0xa4>)
 801215a:	4810      	ldr	r0, [pc, #64]	; (801219c <pbuf_cat+0xa0>)
 801215c:	f008 fe60 	bl	801ae20 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d006      	beq.n	8012176 <pbuf_cat+0x7a>
 8012168:	4b0a      	ldr	r3, [pc, #40]	; (8012194 <pbuf_cat+0x98>)
 801216a:	f240 3263 	movw	r2, #867	; 0x363
 801216e:	490d      	ldr	r1, [pc, #52]	; (80121a4 <pbuf_cat+0xa8>)
 8012170:	480a      	ldr	r0, [pc, #40]	; (801219c <pbuf_cat+0xa0>)
 8012172:	f008 fe55 	bl	801ae20 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	891a      	ldrh	r2, [r3, #8]
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	891b      	ldrh	r3, [r3, #8]
 801217e:	4413      	add	r3, r2
 8012180:	b29a      	uxth	r2, r3
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	683a      	ldr	r2, [r7, #0]
 801218a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801218c:	3710      	adds	r7, #16
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	0801c440 	.word	0x0801c440
 8012198:	0801c634 	.word	0x0801c634
 801219c:	0801c4a0 	.word	0x0801c4a0
 80121a0:	0801c66c 	.word	0x0801c66c
 80121a4:	0801c69c 	.word	0x0801c69c

080121a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80121b2:	6839      	ldr	r1, [r7, #0]
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7ff ffa1 	bl	80120fc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80121ba:	6838      	ldr	r0, [r7, #0]
 80121bc:	f7ff ff76 	bl	80120ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b086      	sub	sp, #24
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80121d2:	2300      	movs	r3, #0
 80121d4:	617b      	str	r3, [r7, #20]
 80121d6:	2300      	movs	r3, #0
 80121d8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d008      	beq.n	80121f2 <pbuf_copy+0x2a>
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d005      	beq.n	80121f2 <pbuf_copy+0x2a>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	891a      	ldrh	r2, [r3, #8]
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	891b      	ldrh	r3, [r3, #8]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d209      	bcs.n	8012206 <pbuf_copy+0x3e>
 80121f2:	4b57      	ldr	r3, [pc, #348]	; (8012350 <pbuf_copy+0x188>)
 80121f4:	f240 32ca 	movw	r2, #970	; 0x3ca
 80121f8:	4956      	ldr	r1, [pc, #344]	; (8012354 <pbuf_copy+0x18c>)
 80121fa:	4857      	ldr	r0, [pc, #348]	; (8012358 <pbuf_copy+0x190>)
 80121fc:	f008 fe10 	bl	801ae20 <iprintf>
 8012200:	f06f 030f 	mvn.w	r3, #15
 8012204:	e09f      	b.n	8012346 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	895b      	ldrh	r3, [r3, #10]
 801220a:	461a      	mov	r2, r3
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	1ad2      	subs	r2, r2, r3
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	895b      	ldrh	r3, [r3, #10]
 8012214:	4619      	mov	r1, r3
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	1acb      	subs	r3, r1, r3
 801221a:	429a      	cmp	r2, r3
 801221c:	d306      	bcc.n	801222c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	895b      	ldrh	r3, [r3, #10]
 8012222:	461a      	mov	r2, r3
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	1ad3      	subs	r3, r2, r3
 8012228:	60fb      	str	r3, [r7, #12]
 801222a:	e005      	b.n	8012238 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	895b      	ldrh	r3, [r3, #10]
 8012230:	461a      	mov	r2, r3
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	1ad3      	subs	r3, r2, r3
 8012236:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	685a      	ldr	r2, [r3, #4]
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	18d0      	adds	r0, r2, r3
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	685a      	ldr	r2, [r3, #4]
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	4413      	add	r3, r2
 8012248:	68fa      	ldr	r2, [r7, #12]
 801224a:	4619      	mov	r1, r3
 801224c:	f008 fdd5 	bl	801adfa <memcpy>
    offset_to += len;
 8012250:	697a      	ldr	r2, [r7, #20]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	4413      	add	r3, r2
 8012256:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012258:	693a      	ldr	r2, [r7, #16]
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	4413      	add	r3, r2
 801225e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	895b      	ldrh	r3, [r3, #10]
 8012264:	461a      	mov	r2, r3
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	4293      	cmp	r3, r2
 801226a:	d906      	bls.n	801227a <pbuf_copy+0xb2>
 801226c:	4b38      	ldr	r3, [pc, #224]	; (8012350 <pbuf_copy+0x188>)
 801226e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012272:	493a      	ldr	r1, [pc, #232]	; (801235c <pbuf_copy+0x194>)
 8012274:	4838      	ldr	r0, [pc, #224]	; (8012358 <pbuf_copy+0x190>)
 8012276:	f008 fdd3 	bl	801ae20 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	895b      	ldrh	r3, [r3, #10]
 801227e:	461a      	mov	r2, r3
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	4293      	cmp	r3, r2
 8012284:	d906      	bls.n	8012294 <pbuf_copy+0xcc>
 8012286:	4b32      	ldr	r3, [pc, #200]	; (8012350 <pbuf_copy+0x188>)
 8012288:	f240 32da 	movw	r2, #986	; 0x3da
 801228c:	4934      	ldr	r1, [pc, #208]	; (8012360 <pbuf_copy+0x198>)
 801228e:	4832      	ldr	r0, [pc, #200]	; (8012358 <pbuf_copy+0x190>)
 8012290:	f008 fdc6 	bl	801ae20 <iprintf>
    if (offset_from >= p_from->len) {
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	895b      	ldrh	r3, [r3, #10]
 8012298:	461a      	mov	r2, r3
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	4293      	cmp	r3, r2
 801229e:	d304      	bcc.n	80122aa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80122a0:	2300      	movs	r3, #0
 80122a2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	895b      	ldrh	r3, [r3, #10]
 80122ae:	461a      	mov	r2, r3
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	4293      	cmp	r3, r2
 80122b4:	d114      	bne.n	80122e0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80122b6:	2300      	movs	r3, #0
 80122b8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d10c      	bne.n	80122e0 <pbuf_copy+0x118>
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d009      	beq.n	80122e0 <pbuf_copy+0x118>
 80122cc:	4b20      	ldr	r3, [pc, #128]	; (8012350 <pbuf_copy+0x188>)
 80122ce:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80122d2:	4924      	ldr	r1, [pc, #144]	; (8012364 <pbuf_copy+0x19c>)
 80122d4:	4820      	ldr	r0, [pc, #128]	; (8012358 <pbuf_copy+0x190>)
 80122d6:	f008 fda3 	bl	801ae20 <iprintf>
 80122da:	f06f 030f 	mvn.w	r3, #15
 80122de:	e032      	b.n	8012346 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d013      	beq.n	801230e <pbuf_copy+0x146>
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	895a      	ldrh	r2, [r3, #10]
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	891b      	ldrh	r3, [r3, #8]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d10d      	bne.n	801230e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d009      	beq.n	801230e <pbuf_copy+0x146>
 80122fa:	4b15      	ldr	r3, [pc, #84]	; (8012350 <pbuf_copy+0x188>)
 80122fc:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8012300:	4919      	ldr	r1, [pc, #100]	; (8012368 <pbuf_copy+0x1a0>)
 8012302:	4815      	ldr	r0, [pc, #84]	; (8012358 <pbuf_copy+0x190>)
 8012304:	f008 fd8c 	bl	801ae20 <iprintf>
 8012308:	f06f 0305 	mvn.w	r3, #5
 801230c:	e01b      	b.n	8012346 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d013      	beq.n	801233c <pbuf_copy+0x174>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	895a      	ldrh	r2, [r3, #10]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	891b      	ldrh	r3, [r3, #8]
 801231c:	429a      	cmp	r2, r3
 801231e:	d10d      	bne.n	801233c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d009      	beq.n	801233c <pbuf_copy+0x174>
 8012328:	4b09      	ldr	r3, [pc, #36]	; (8012350 <pbuf_copy+0x188>)
 801232a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801232e:	490e      	ldr	r1, [pc, #56]	; (8012368 <pbuf_copy+0x1a0>)
 8012330:	4809      	ldr	r0, [pc, #36]	; (8012358 <pbuf_copy+0x190>)
 8012332:	f008 fd75 	bl	801ae20 <iprintf>
 8012336:	f06f 0305 	mvn.w	r3, #5
 801233a:	e004      	b.n	8012346 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	f47f af61 	bne.w	8012206 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	3718      	adds	r7, #24
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	0801c440 	.word	0x0801c440
 8012354:	0801c6e8 	.word	0x0801c6e8
 8012358:	0801c4a0 	.word	0x0801c4a0
 801235c:	0801c718 	.word	0x0801c718
 8012360:	0801c730 	.word	0x0801c730
 8012364:	0801c74c 	.word	0x0801c74c
 8012368:	0801c75c 	.word	0x0801c75c

0801236c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b088      	sub	sp, #32
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	4611      	mov	r1, r2
 8012378:	461a      	mov	r2, r3
 801237a:	460b      	mov	r3, r1
 801237c:	80fb      	strh	r3, [r7, #6]
 801237e:	4613      	mov	r3, r2
 8012380:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012382:	2300      	movs	r3, #0
 8012384:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012386:	2300      	movs	r3, #0
 8012388:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d108      	bne.n	80123a2 <pbuf_copy_partial+0x36>
 8012390:	4b2b      	ldr	r3, [pc, #172]	; (8012440 <pbuf_copy_partial+0xd4>)
 8012392:	f240 420a 	movw	r2, #1034	; 0x40a
 8012396:	492b      	ldr	r1, [pc, #172]	; (8012444 <pbuf_copy_partial+0xd8>)
 8012398:	482b      	ldr	r0, [pc, #172]	; (8012448 <pbuf_copy_partial+0xdc>)
 801239a:	f008 fd41 	bl	801ae20 <iprintf>
 801239e:	2300      	movs	r3, #0
 80123a0:	e04a      	b.n	8012438 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d108      	bne.n	80123ba <pbuf_copy_partial+0x4e>
 80123a8:	4b25      	ldr	r3, [pc, #148]	; (8012440 <pbuf_copy_partial+0xd4>)
 80123aa:	f240 420b 	movw	r2, #1035	; 0x40b
 80123ae:	4927      	ldr	r1, [pc, #156]	; (801244c <pbuf_copy_partial+0xe0>)
 80123b0:	4825      	ldr	r0, [pc, #148]	; (8012448 <pbuf_copy_partial+0xdc>)
 80123b2:	f008 fd35 	bl	801ae20 <iprintf>
 80123b6:	2300      	movs	r3, #0
 80123b8:	e03e      	b.n	8012438 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	61fb      	str	r3, [r7, #28]
 80123be:	e034      	b.n	801242a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80123c0:	88bb      	ldrh	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d00a      	beq.n	80123dc <pbuf_copy_partial+0x70>
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	895b      	ldrh	r3, [r3, #10]
 80123ca:	88ba      	ldrh	r2, [r7, #4]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d305      	bcc.n	80123dc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	895b      	ldrh	r3, [r3, #10]
 80123d4:	88ba      	ldrh	r2, [r7, #4]
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	80bb      	strh	r3, [r7, #4]
 80123da:	e023      	b.n	8012424 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	895a      	ldrh	r2, [r3, #10]
 80123e0:	88bb      	ldrh	r3, [r7, #4]
 80123e2:	1ad3      	subs	r3, r2, r3
 80123e4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80123e6:	8b3a      	ldrh	r2, [r7, #24]
 80123e8:	88fb      	ldrh	r3, [r7, #6]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d901      	bls.n	80123f2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80123ee:	88fb      	ldrh	r3, [r7, #6]
 80123f0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80123f2:	8b7b      	ldrh	r3, [r7, #26]
 80123f4:	68ba      	ldr	r2, [r7, #8]
 80123f6:	18d0      	adds	r0, r2, r3
 80123f8:	69fb      	ldr	r3, [r7, #28]
 80123fa:	685a      	ldr	r2, [r3, #4]
 80123fc:	88bb      	ldrh	r3, [r7, #4]
 80123fe:	4413      	add	r3, r2
 8012400:	8b3a      	ldrh	r2, [r7, #24]
 8012402:	4619      	mov	r1, r3
 8012404:	f008 fcf9 	bl	801adfa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012408:	8afa      	ldrh	r2, [r7, #22]
 801240a:	8b3b      	ldrh	r3, [r7, #24]
 801240c:	4413      	add	r3, r2
 801240e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012410:	8b7a      	ldrh	r2, [r7, #26]
 8012412:	8b3b      	ldrh	r3, [r7, #24]
 8012414:	4413      	add	r3, r2
 8012416:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012418:	88fa      	ldrh	r2, [r7, #6]
 801241a:	8b3b      	ldrh	r3, [r7, #24]
 801241c:	1ad3      	subs	r3, r2, r3
 801241e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012420:	2300      	movs	r3, #0
 8012422:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	61fb      	str	r3, [r7, #28]
 801242a:	88fb      	ldrh	r3, [r7, #6]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d002      	beq.n	8012436 <pbuf_copy_partial+0xca>
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d1c4      	bne.n	80123c0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012436:	8afb      	ldrh	r3, [r7, #22]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3720      	adds	r7, #32
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	0801c440 	.word	0x0801c440
 8012444:	0801c788 	.word	0x0801c788
 8012448:	0801c4a0 	.word	0x0801c4a0
 801244c:	0801c7a8 	.word	0x0801c7a8

08012450 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8012450:	b480      	push	{r7}
 8012452:	b087      	sub	sp, #28
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	460b      	mov	r3, r1
 801245a:	607a      	str	r2, [r7, #4]
 801245c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801245e:	897b      	ldrh	r3, [r7, #10]
 8012460:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8012466:	e007      	b.n	8012478 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	895b      	ldrh	r3, [r3, #10]
 801246c:	8afa      	ldrh	r2, [r7, #22]
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d004      	beq.n	8012488 <pbuf_skip_const+0x38>
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	895b      	ldrh	r3, [r3, #10]
 8012482:	8afa      	ldrh	r2, [r7, #22]
 8012484:	429a      	cmp	r2, r3
 8012486:	d2ef      	bcs.n	8012468 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d002      	beq.n	8012494 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	8afa      	ldrh	r2, [r7, #22]
 8012492:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8012494:	693b      	ldr	r3, [r7, #16]
}
 8012496:	4618      	mov	r0, r3
 8012498:	371c      	adds	r7, #28
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr

080124a2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80124a2:	b580      	push	{r7, lr}
 80124a4:	b086      	sub	sp, #24
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	60f8      	str	r0, [r7, #12]
 80124aa:	460b      	mov	r3, r1
 80124ac:	607a      	str	r2, [r7, #4]
 80124ae:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80124b0:	897b      	ldrh	r3, [r7, #10]
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	4619      	mov	r1, r3
 80124b6:	68f8      	ldr	r0, [r7, #12]
 80124b8:	f7ff ffca 	bl	8012450 <pbuf_skip_const>
 80124bc:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80124be:	697b      	ldr	r3, [r7, #20]
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3718      	adds	r7, #24
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b088      	sub	sp, #32
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	4613      	mov	r3, r2
 80124d4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80124d6:	88fb      	ldrh	r3, [r7, #6]
 80124d8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80124da:	2300      	movs	r3, #0
 80124dc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d109      	bne.n	80124f8 <pbuf_take+0x30>
 80124e4:	4b3a      	ldr	r3, [pc, #232]	; (80125d0 <pbuf_take+0x108>)
 80124e6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80124ea:	493a      	ldr	r1, [pc, #232]	; (80125d4 <pbuf_take+0x10c>)
 80124ec:	483a      	ldr	r0, [pc, #232]	; (80125d8 <pbuf_take+0x110>)
 80124ee:	f008 fc97 	bl	801ae20 <iprintf>
 80124f2:	f06f 030f 	mvn.w	r3, #15
 80124f6:	e067      	b.n	80125c8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d109      	bne.n	8012512 <pbuf_take+0x4a>
 80124fe:	4b34      	ldr	r3, [pc, #208]	; (80125d0 <pbuf_take+0x108>)
 8012500:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8012504:	4935      	ldr	r1, [pc, #212]	; (80125dc <pbuf_take+0x114>)
 8012506:	4834      	ldr	r0, [pc, #208]	; (80125d8 <pbuf_take+0x110>)
 8012508:	f008 fc8a 	bl	801ae20 <iprintf>
 801250c:	f06f 030f 	mvn.w	r3, #15
 8012510:	e05a      	b.n	80125c8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	891b      	ldrh	r3, [r3, #8]
 8012516:	88fa      	ldrh	r2, [r7, #6]
 8012518:	429a      	cmp	r2, r3
 801251a:	d909      	bls.n	8012530 <pbuf_take+0x68>
 801251c:	4b2c      	ldr	r3, [pc, #176]	; (80125d0 <pbuf_take+0x108>)
 801251e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8012522:	492f      	ldr	r1, [pc, #188]	; (80125e0 <pbuf_take+0x118>)
 8012524:	482c      	ldr	r0, [pc, #176]	; (80125d8 <pbuf_take+0x110>)
 8012526:	f008 fc7b 	bl	801ae20 <iprintf>
 801252a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801252e:	e04b      	b.n	80125c8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d007      	beq.n	8012546 <pbuf_take+0x7e>
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d004      	beq.n	8012546 <pbuf_take+0x7e>
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	891b      	ldrh	r3, [r3, #8]
 8012540:	88fa      	ldrh	r2, [r7, #6]
 8012542:	429a      	cmp	r2, r3
 8012544:	d902      	bls.n	801254c <pbuf_take+0x84>
    return ERR_ARG;
 8012546:	f06f 030f 	mvn.w	r3, #15
 801254a:	e03d      	b.n	80125c8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	61fb      	str	r3, [r7, #28]
 8012550:	e028      	b.n	80125a4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d106      	bne.n	8012566 <pbuf_take+0x9e>
 8012558:	4b1d      	ldr	r3, [pc, #116]	; (80125d0 <pbuf_take+0x108>)
 801255a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801255e:	4921      	ldr	r1, [pc, #132]	; (80125e4 <pbuf_take+0x11c>)
 8012560:	481d      	ldr	r0, [pc, #116]	; (80125d8 <pbuf_take+0x110>)
 8012562:	f008 fc5d 	bl	801ae20 <iprintf>
    buf_copy_len = total_copy_len;
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	895b      	ldrh	r3, [r3, #10]
 801256e:	461a      	mov	r2, r3
 8012570:	69bb      	ldr	r3, [r7, #24]
 8012572:	4293      	cmp	r3, r2
 8012574:	d902      	bls.n	801257c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8012576:	69fb      	ldr	r3, [r7, #28]
 8012578:	895b      	ldrh	r3, [r3, #10]
 801257a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	6858      	ldr	r0, [r3, #4]
 8012580:	68ba      	ldr	r2, [r7, #8]
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	4413      	add	r3, r2
 8012586:	69ba      	ldr	r2, [r7, #24]
 8012588:	4619      	mov	r1, r3
 801258a:	f008 fc36 	bl	801adfa <memcpy>
    total_copy_len -= buf_copy_len;
 801258e:	697a      	ldr	r2, [r7, #20]
 8012590:	69bb      	ldr	r3, [r7, #24]
 8012592:	1ad3      	subs	r3, r2, r3
 8012594:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8012596:	693a      	ldr	r2, [r7, #16]
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	4413      	add	r3, r2
 801259c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	61fb      	str	r3, [r7, #28]
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d1d3      	bne.n	8012552 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d103      	bne.n	80125b8 <pbuf_take+0xf0>
 80125b0:	88fb      	ldrh	r3, [r7, #6]
 80125b2:	693a      	ldr	r2, [r7, #16]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d006      	beq.n	80125c6 <pbuf_take+0xfe>
 80125b8:	4b05      	ldr	r3, [pc, #20]	; (80125d0 <pbuf_take+0x108>)
 80125ba:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80125be:	490a      	ldr	r1, [pc, #40]	; (80125e8 <pbuf_take+0x120>)
 80125c0:	4805      	ldr	r0, [pc, #20]	; (80125d8 <pbuf_take+0x110>)
 80125c2:	f008 fc2d 	bl	801ae20 <iprintf>
  return ERR_OK;
 80125c6:	2300      	movs	r3, #0
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3720      	adds	r7, #32
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	0801c440 	.word	0x0801c440
 80125d4:	0801c818 	.word	0x0801c818
 80125d8:	0801c4a0 	.word	0x0801c4a0
 80125dc:	0801c830 	.word	0x0801c830
 80125e0:	0801c84c 	.word	0x0801c84c
 80125e4:	0801c86c 	.word	0x0801c86c
 80125e8:	0801c884 	.word	0x0801c884

080125ec <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b088      	sub	sp, #32
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	4611      	mov	r1, r2
 80125f8:	461a      	mov	r2, r3
 80125fa:	460b      	mov	r3, r1
 80125fc:	80fb      	strh	r3, [r7, #6]
 80125fe:	4613      	mov	r3, r2
 8012600:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8012602:	f107 0210 	add.w	r2, r7, #16
 8012606:	88bb      	ldrh	r3, [r7, #4]
 8012608:	4619      	mov	r1, r3
 801260a:	68f8      	ldr	r0, [r7, #12]
 801260c:	f7ff ff49 	bl	80124a2 <pbuf_skip>
 8012610:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8012612:	69fb      	ldr	r3, [r7, #28]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d047      	beq.n	80126a8 <pbuf_take_at+0xbc>
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	891b      	ldrh	r3, [r3, #8]
 801261c:	461a      	mov	r2, r3
 801261e:	8a3b      	ldrh	r3, [r7, #16]
 8012620:	4619      	mov	r1, r3
 8012622:	88fb      	ldrh	r3, [r7, #6]
 8012624:	440b      	add	r3, r1
 8012626:	429a      	cmp	r2, r3
 8012628:	db3e      	blt.n	80126a8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 801262a:	88fb      	ldrh	r3, [r7, #6]
 801262c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	895a      	ldrh	r2, [r3, #10]
 8012636:	8a3b      	ldrh	r3, [r7, #16]
 8012638:	429a      	cmp	r2, r3
 801263a:	d806      	bhi.n	801264a <pbuf_take_at+0x5e>
 801263c:	4b1d      	ldr	r3, [pc, #116]	; (80126b4 <pbuf_take_at+0xc8>)
 801263e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012642:	491d      	ldr	r1, [pc, #116]	; (80126b8 <pbuf_take_at+0xcc>)
 8012644:	481d      	ldr	r0, [pc, #116]	; (80126bc <pbuf_take_at+0xd0>)
 8012646:	f008 fbeb 	bl	801ae20 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801264a:	69fb      	ldr	r3, [r7, #28]
 801264c:	895b      	ldrh	r3, [r3, #10]
 801264e:	461a      	mov	r2, r3
 8012650:	8a3b      	ldrh	r3, [r7, #16]
 8012652:	1ad2      	subs	r2, r2, r3
 8012654:	88fb      	ldrh	r3, [r7, #6]
 8012656:	429a      	cmp	r2, r3
 8012658:	da05      	bge.n	8012666 <pbuf_take_at+0x7a>
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	895a      	ldrh	r2, [r3, #10]
 801265e:	8a3b      	ldrh	r3, [r7, #16]
 8012660:	1ad3      	subs	r3, r2, r3
 8012662:	b29b      	uxth	r3, r3
 8012664:	e000      	b.n	8012668 <pbuf_take_at+0x7c>
 8012666:	88fb      	ldrh	r3, [r7, #6]
 8012668:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	8a3a      	ldrh	r2, [r7, #16]
 8012670:	4413      	add	r3, r2
 8012672:	8a7a      	ldrh	r2, [r7, #18]
 8012674:	68b9      	ldr	r1, [r7, #8]
 8012676:	4618      	mov	r0, r3
 8012678:	f008 fbbf 	bl	801adfa <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801267c:	8b7a      	ldrh	r2, [r7, #26]
 801267e:	8a7b      	ldrh	r3, [r7, #18]
 8012680:	1ad3      	subs	r3, r2, r3
 8012682:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8012684:	8a7b      	ldrh	r3, [r7, #18]
 8012686:	697a      	ldr	r2, [r7, #20]
 8012688:	4413      	add	r3, r2
 801268a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 801268c:	8b7b      	ldrh	r3, [r7, #26]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d008      	beq.n	80126a4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8012692:	69fb      	ldr	r3, [r7, #28]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	8b7a      	ldrh	r2, [r7, #26]
 8012698:	6979      	ldr	r1, [r7, #20]
 801269a:	4618      	mov	r0, r3
 801269c:	f7ff ff14 	bl	80124c8 <pbuf_take>
 80126a0:	4603      	mov	r3, r0
 80126a2:	e003      	b.n	80126ac <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80126a4:	2300      	movs	r3, #0
 80126a6:	e001      	b.n	80126ac <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80126a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3720      	adds	r7, #32
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	0801c440 	.word	0x0801c440
 80126b8:	0801c89c 	.word	0x0801c89c
 80126bc:	0801c4a0 	.word	0x0801c4a0

080126c0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b084      	sub	sp, #16
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	4603      	mov	r3, r0
 80126c8:	603a      	str	r2, [r7, #0]
 80126ca:	71fb      	strb	r3, [r7, #7]
 80126cc:	460b      	mov	r3, r1
 80126ce:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	8919      	ldrh	r1, [r3, #8]
 80126d4:	88ba      	ldrh	r2, [r7, #4]
 80126d6:	79fb      	ldrb	r3, [r7, #7]
 80126d8:	4618      	mov	r0, r3
 80126da:	f7ff f961 	bl	80119a0 <pbuf_alloc>
 80126de:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d101      	bne.n	80126ea <pbuf_clone+0x2a>
    return NULL;
 80126e6:	2300      	movs	r3, #0
 80126e8:	e011      	b.n	801270e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80126ea:	6839      	ldr	r1, [r7, #0]
 80126ec:	68f8      	ldr	r0, [r7, #12]
 80126ee:	f7ff fd6b 	bl	80121c8 <pbuf_copy>
 80126f2:	4603      	mov	r3, r0
 80126f4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80126f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d006      	beq.n	801270c <pbuf_clone+0x4c>
 80126fe:	4b06      	ldr	r3, [pc, #24]	; (8012718 <pbuf_clone+0x58>)
 8012700:	f240 5224 	movw	r2, #1316	; 0x524
 8012704:	4905      	ldr	r1, [pc, #20]	; (801271c <pbuf_clone+0x5c>)
 8012706:	4806      	ldr	r0, [pc, #24]	; (8012720 <pbuf_clone+0x60>)
 8012708:	f008 fb8a 	bl	801ae20 <iprintf>
  return q;
 801270c:	68fb      	ldr	r3, [r7, #12]
}
 801270e:	4618      	mov	r0, r3
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	0801c440 	.word	0x0801c440
 801271c:	0801c8b4 	.word	0x0801c8b4
 8012720:	0801c4a0 	.word	0x0801c4a0

08012724 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b084      	sub	sp, #16
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	460b      	mov	r3, r1
 801272e:	807b      	strh	r3, [r7, #2]
 8012730:	4613      	mov	r3, r2
 8012732:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8012734:	f107 020a 	add.w	r2, r7, #10
 8012738:	887b      	ldrh	r3, [r7, #2]
 801273a:	4619      	mov	r1, r3
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7ff feb0 	bl	80124a2 <pbuf_skip>
 8012742:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00a      	beq.n	8012760 <pbuf_put_at+0x3c>
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	895a      	ldrh	r2, [r3, #10]
 801274e:	897b      	ldrh	r3, [r7, #10]
 8012750:	429a      	cmp	r2, r3
 8012752:	d905      	bls.n	8012760 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	897a      	ldrh	r2, [r7, #10]
 801275a:	4413      	add	r3, r2
 801275c:	787a      	ldrb	r2, [r7, #1]
 801275e:	701a      	strb	r2, [r3, #0]
  }
}
 8012760:	bf00      	nop
 8012762:	3710      	adds	r7, #16
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801276c:	f008 fb70 	bl	801ae50 <rand>
 8012770:	4603      	mov	r3, r0
 8012772:	b29b      	uxth	r3, r3
 8012774:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012778:	b29b      	uxth	r3, r3
 801277a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801277e:	b29a      	uxth	r2, r3
 8012780:	4b01      	ldr	r3, [pc, #4]	; (8012788 <tcp_init+0x20>)
 8012782:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012784:	bf00      	nop
 8012786:	bd80      	pop	{r7, pc}
 8012788:	20000050 	.word	0x20000050

0801278c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	7d1b      	ldrb	r3, [r3, #20]
 8012798:	2b01      	cmp	r3, #1
 801279a:	d105      	bne.n	80127a8 <tcp_free+0x1c>
 801279c:	4b06      	ldr	r3, [pc, #24]	; (80127b8 <tcp_free+0x2c>)
 801279e:	22d4      	movs	r2, #212	; 0xd4
 80127a0:	4906      	ldr	r1, [pc, #24]	; (80127bc <tcp_free+0x30>)
 80127a2:	4807      	ldr	r0, [pc, #28]	; (80127c0 <tcp_free+0x34>)
 80127a4:	f008 fb3c 	bl	801ae20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80127a8:	6879      	ldr	r1, [r7, #4]
 80127aa:	2001      	movs	r0, #1
 80127ac:	f7fe fdb0 	bl	8011310 <memp_free>
}
 80127b0:	bf00      	nop
 80127b2:	3708      	adds	r7, #8
 80127b4:	46bd      	mov	sp, r7
 80127b6:	bd80      	pop	{r7, pc}
 80127b8:	0801c940 	.word	0x0801c940
 80127bc:	0801c970 	.word	0x0801c970
 80127c0:	0801c984 	.word	0x0801c984

080127c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b082      	sub	sp, #8
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	7d1b      	ldrb	r3, [r3, #20]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d105      	bne.n	80127e0 <tcp_free_listen+0x1c>
 80127d4:	4b06      	ldr	r3, [pc, #24]	; (80127f0 <tcp_free_listen+0x2c>)
 80127d6:	22df      	movs	r2, #223	; 0xdf
 80127d8:	4906      	ldr	r1, [pc, #24]	; (80127f4 <tcp_free_listen+0x30>)
 80127da:	4807      	ldr	r0, [pc, #28]	; (80127f8 <tcp_free_listen+0x34>)
 80127dc:	f008 fb20 	bl	801ae20 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80127e0:	6879      	ldr	r1, [r7, #4]
 80127e2:	2002      	movs	r0, #2
 80127e4:	f7fe fd94 	bl	8011310 <memp_free>
}
 80127e8:	bf00      	nop
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	0801c940 	.word	0x0801c940
 80127f4:	0801c9ac 	.word	0x0801c9ac
 80127f8:	0801c984 	.word	0x0801c984

080127fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012800:	f000 fe98 	bl	8013534 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012804:	4b07      	ldr	r3, [pc, #28]	; (8012824 <tcp_tmr+0x28>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	3301      	adds	r3, #1
 801280a:	b2da      	uxtb	r2, r3
 801280c:	4b05      	ldr	r3, [pc, #20]	; (8012824 <tcp_tmr+0x28>)
 801280e:	701a      	strb	r2, [r3, #0]
 8012810:	4b04      	ldr	r3, [pc, #16]	; (8012824 <tcp_tmr+0x28>)
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	f003 0301 	and.w	r3, r3, #1
 8012818:	2b00      	cmp	r3, #0
 801281a:	d001      	beq.n	8012820 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801281c:	f000 fb4c 	bl	8012eb8 <tcp_slowtmr>
  }
}
 8012820:	bf00      	nop
 8012822:	bd80      	pop	{r7, pc}
 8012824:	20004561 	.word	0x20004561

08012828 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b084      	sub	sp, #16
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d105      	bne.n	8012844 <tcp_remove_listener+0x1c>
 8012838:	4b0d      	ldr	r3, [pc, #52]	; (8012870 <tcp_remove_listener+0x48>)
 801283a:	22ff      	movs	r2, #255	; 0xff
 801283c:	490d      	ldr	r1, [pc, #52]	; (8012874 <tcp_remove_listener+0x4c>)
 801283e:	480e      	ldr	r0, [pc, #56]	; (8012878 <tcp_remove_listener+0x50>)
 8012840:	f008 faee 	bl	801ae20 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	60fb      	str	r3, [r7, #12]
 8012848:	e00a      	b.n	8012860 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801284e:	683a      	ldr	r2, [r7, #0]
 8012850:	429a      	cmp	r2, r3
 8012852:	d102      	bne.n	801285a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2200      	movs	r2, #0
 8012858:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	68db      	ldr	r3, [r3, #12]
 801285e:	60fb      	str	r3, [r7, #12]
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d1f1      	bne.n	801284a <tcp_remove_listener+0x22>
    }
  }
}
 8012866:	bf00      	nop
 8012868:	3710      	adds	r7, #16
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	0801c940 	.word	0x0801c940
 8012874:	0801c9c8 	.word	0x0801c9c8
 8012878:	0801c984 	.word	0x0801c984

0801287c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d106      	bne.n	8012898 <tcp_listen_closed+0x1c>
 801288a:	4b14      	ldr	r3, [pc, #80]	; (80128dc <tcp_listen_closed+0x60>)
 801288c:	f240 1211 	movw	r2, #273	; 0x111
 8012890:	4913      	ldr	r1, [pc, #76]	; (80128e0 <tcp_listen_closed+0x64>)
 8012892:	4814      	ldr	r0, [pc, #80]	; (80128e4 <tcp_listen_closed+0x68>)
 8012894:	f008 fac4 	bl	801ae20 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	7d1b      	ldrb	r3, [r3, #20]
 801289c:	2b01      	cmp	r3, #1
 801289e:	d006      	beq.n	80128ae <tcp_listen_closed+0x32>
 80128a0:	4b0e      	ldr	r3, [pc, #56]	; (80128dc <tcp_listen_closed+0x60>)
 80128a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80128a6:	4910      	ldr	r1, [pc, #64]	; (80128e8 <tcp_listen_closed+0x6c>)
 80128a8:	480e      	ldr	r0, [pc, #56]	; (80128e4 <tcp_listen_closed+0x68>)
 80128aa:	f008 fab9 	bl	801ae20 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80128ae:	2301      	movs	r3, #1
 80128b0:	60fb      	str	r3, [r7, #12]
 80128b2:	e00b      	b.n	80128cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80128b4:	4a0d      	ldr	r2, [pc, #52]	; (80128ec <tcp_listen_closed+0x70>)
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	6879      	ldr	r1, [r7, #4]
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff ffb1 	bl	8012828 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	3301      	adds	r3, #1
 80128ca:	60fb      	str	r3, [r7, #12]
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2b03      	cmp	r3, #3
 80128d0:	d9f0      	bls.n	80128b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80128d2:	bf00      	nop
 80128d4:	3710      	adds	r7, #16
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	0801c940 	.word	0x0801c940
 80128e0:	0801c9f0 	.word	0x0801c9f0
 80128e4:	0801c984 	.word	0x0801c984
 80128e8:	0801c9fc 	.word	0x0801c9fc
 80128ec:	0801e964 	.word	0x0801e964

080128f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80128f0:	b5b0      	push	{r4, r5, r7, lr}
 80128f2:	b088      	sub	sp, #32
 80128f4:	af04      	add	r7, sp, #16
 80128f6:	6078      	str	r0, [r7, #4]
 80128f8:	460b      	mov	r3, r1
 80128fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d106      	bne.n	8012910 <tcp_close_shutdown+0x20>
 8012902:	4b61      	ldr	r3, [pc, #388]	; (8012a88 <tcp_close_shutdown+0x198>)
 8012904:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012908:	4960      	ldr	r1, [pc, #384]	; (8012a8c <tcp_close_shutdown+0x19c>)
 801290a:	4861      	ldr	r0, [pc, #388]	; (8012a90 <tcp_close_shutdown+0x1a0>)
 801290c:	f008 fa88 	bl	801ae20 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012910:	78fb      	ldrb	r3, [r7, #3]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d066      	beq.n	80129e4 <tcp_close_shutdown+0xf4>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	7d1b      	ldrb	r3, [r3, #20]
 801291a:	2b04      	cmp	r3, #4
 801291c:	d003      	beq.n	8012926 <tcp_close_shutdown+0x36>
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	7d1b      	ldrb	r3, [r3, #20]
 8012922:	2b07      	cmp	r3, #7
 8012924:	d15e      	bne.n	80129e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801292a:	2b00      	cmp	r3, #0
 801292c:	d104      	bne.n	8012938 <tcp_close_shutdown+0x48>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012932:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012936:	d055      	beq.n	80129e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	8b5b      	ldrh	r3, [r3, #26]
 801293c:	f003 0310 	and.w	r3, r3, #16
 8012940:	2b00      	cmp	r3, #0
 8012942:	d106      	bne.n	8012952 <tcp_close_shutdown+0x62>
 8012944:	4b50      	ldr	r3, [pc, #320]	; (8012a88 <tcp_close_shutdown+0x198>)
 8012946:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801294a:	4952      	ldr	r1, [pc, #328]	; (8012a94 <tcp_close_shutdown+0x1a4>)
 801294c:	4850      	ldr	r0, [pc, #320]	; (8012a90 <tcp_close_shutdown+0x1a0>)
 801294e:	f008 fa67 	bl	801ae20 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801295a:	687d      	ldr	r5, [r7, #4]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3304      	adds	r3, #4
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	8ad2      	ldrh	r2, [r2, #22]
 8012964:	6879      	ldr	r1, [r7, #4]
 8012966:	8b09      	ldrh	r1, [r1, #24]
 8012968:	9102      	str	r1, [sp, #8]
 801296a:	9201      	str	r2, [sp, #4]
 801296c:	9300      	str	r3, [sp, #0]
 801296e:	462b      	mov	r3, r5
 8012970:	4622      	mov	r2, r4
 8012972:	4601      	mov	r1, r0
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f004 fe91 	bl	801769c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f001 f8ba 	bl	8013af4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012980:	4b45      	ldr	r3, [pc, #276]	; (8012a98 <tcp_close_shutdown+0x1a8>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	687a      	ldr	r2, [r7, #4]
 8012986:	429a      	cmp	r2, r3
 8012988:	d105      	bne.n	8012996 <tcp_close_shutdown+0xa6>
 801298a:	4b43      	ldr	r3, [pc, #268]	; (8012a98 <tcp_close_shutdown+0x1a8>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	4a41      	ldr	r2, [pc, #260]	; (8012a98 <tcp_close_shutdown+0x1a8>)
 8012992:	6013      	str	r3, [r2, #0]
 8012994:	e013      	b.n	80129be <tcp_close_shutdown+0xce>
 8012996:	4b40      	ldr	r3, [pc, #256]	; (8012a98 <tcp_close_shutdown+0x1a8>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	60fb      	str	r3, [r7, #12]
 801299c:	e00c      	b.n	80129b8 <tcp_close_shutdown+0xc8>
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	429a      	cmp	r2, r3
 80129a6:	d104      	bne.n	80129b2 <tcp_close_shutdown+0xc2>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	68da      	ldr	r2, [r3, #12]
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	60da      	str	r2, [r3, #12]
 80129b0:	e005      	b.n	80129be <tcp_close_shutdown+0xce>
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	60fb      	str	r3, [r7, #12]
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d1ef      	bne.n	801299e <tcp_close_shutdown+0xae>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2200      	movs	r2, #0
 80129c2:	60da      	str	r2, [r3, #12]
 80129c4:	4b35      	ldr	r3, [pc, #212]	; (8012a9c <tcp_close_shutdown+0x1ac>)
 80129c6:	2201      	movs	r2, #1
 80129c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80129ca:	4b35      	ldr	r3, [pc, #212]	; (8012aa0 <tcp_close_shutdown+0x1b0>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d102      	bne.n	80129da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80129d4:	f003 fd4c 	bl	8016470 <tcp_trigger_input_pcb_close>
 80129d8:	e002      	b.n	80129e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f7ff fed6 	bl	801278c <tcp_free>
      }
      return ERR_OK;
 80129e0:	2300      	movs	r3, #0
 80129e2:	e04d      	b.n	8012a80 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	7d1b      	ldrb	r3, [r3, #20]
 80129e8:	2b01      	cmp	r3, #1
 80129ea:	d02d      	beq.n	8012a48 <tcp_close_shutdown+0x158>
 80129ec:	2b02      	cmp	r3, #2
 80129ee:	d036      	beq.n	8012a5e <tcp_close_shutdown+0x16e>
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d13f      	bne.n	8012a74 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	8adb      	ldrh	r3, [r3, #22]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d021      	beq.n	8012a40 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80129fc:	4b29      	ldr	r3, [pc, #164]	; (8012aa4 <tcp_close_shutdown+0x1b4>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	687a      	ldr	r2, [r7, #4]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d105      	bne.n	8012a12 <tcp_close_shutdown+0x122>
 8012a06:	4b27      	ldr	r3, [pc, #156]	; (8012aa4 <tcp_close_shutdown+0x1b4>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	4a25      	ldr	r2, [pc, #148]	; (8012aa4 <tcp_close_shutdown+0x1b4>)
 8012a0e:	6013      	str	r3, [r2, #0]
 8012a10:	e013      	b.n	8012a3a <tcp_close_shutdown+0x14a>
 8012a12:	4b24      	ldr	r3, [pc, #144]	; (8012aa4 <tcp_close_shutdown+0x1b4>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	60bb      	str	r3, [r7, #8]
 8012a18:	e00c      	b.n	8012a34 <tcp_close_shutdown+0x144>
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d104      	bne.n	8012a2e <tcp_close_shutdown+0x13e>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	68da      	ldr	r2, [r3, #12]
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	60da      	str	r2, [r3, #12]
 8012a2c:	e005      	b.n	8012a3a <tcp_close_shutdown+0x14a>
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	60bb      	str	r3, [r7, #8]
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d1ef      	bne.n	8012a1a <tcp_close_shutdown+0x12a>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff fea3 	bl	801278c <tcp_free>
      break;
 8012a46:	e01a      	b.n	8012a7e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f7ff ff17 	bl	801287c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012a4e:	6879      	ldr	r1, [r7, #4]
 8012a50:	4815      	ldr	r0, [pc, #84]	; (8012aa8 <tcp_close_shutdown+0x1b8>)
 8012a52:	f001 f89f 	bl	8013b94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7ff feb4 	bl	80127c4 <tcp_free_listen>
      break;
 8012a5c:	e00f      	b.n	8012a7e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012a5e:	6879      	ldr	r1, [r7, #4]
 8012a60:	480d      	ldr	r0, [pc, #52]	; (8012a98 <tcp_close_shutdown+0x1a8>)
 8012a62:	f001 f897 	bl	8013b94 <tcp_pcb_remove>
 8012a66:	4b0d      	ldr	r3, [pc, #52]	; (8012a9c <tcp_close_shutdown+0x1ac>)
 8012a68:	2201      	movs	r2, #1
 8012a6a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012a6c:	6878      	ldr	r0, [r7, #4]
 8012a6e:	f7ff fe8d 	bl	801278c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012a72:	e004      	b.n	8012a7e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f000 f819 	bl	8012aac <tcp_close_shutdown_fin>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	e000      	b.n	8012a80 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8012a7e:	2300      	movs	r3, #0
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3710      	adds	r7, #16
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bdb0      	pop	{r4, r5, r7, pc}
 8012a88:	0801c940 	.word	0x0801c940
 8012a8c:	0801ca14 	.word	0x0801ca14
 8012a90:	0801c984 	.word	0x0801c984
 8012a94:	0801ca34 	.word	0x0801ca34
 8012a98:	2000b4c4 	.word	0x2000b4c4
 8012a9c:	2000b4c0 	.word	0x2000b4c0
 8012aa0:	2000b4d8 	.word	0x2000b4d8
 8012aa4:	2000b4d0 	.word	0x2000b4d0
 8012aa8:	2000b4cc 	.word	0x2000b4cc

08012aac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b084      	sub	sp, #16
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d106      	bne.n	8012ac8 <tcp_close_shutdown_fin+0x1c>
 8012aba:	4b2c      	ldr	r3, [pc, #176]	; (8012b6c <tcp_close_shutdown_fin+0xc0>)
 8012abc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012ac0:	492b      	ldr	r1, [pc, #172]	; (8012b70 <tcp_close_shutdown_fin+0xc4>)
 8012ac2:	482c      	ldr	r0, [pc, #176]	; (8012b74 <tcp_close_shutdown_fin+0xc8>)
 8012ac4:	f008 f9ac 	bl	801ae20 <iprintf>

  switch (pcb->state) {
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	7d1b      	ldrb	r3, [r3, #20]
 8012acc:	2b04      	cmp	r3, #4
 8012ace:	d010      	beq.n	8012af2 <tcp_close_shutdown_fin+0x46>
 8012ad0:	2b07      	cmp	r3, #7
 8012ad2:	d01b      	beq.n	8012b0c <tcp_close_shutdown_fin+0x60>
 8012ad4:	2b03      	cmp	r3, #3
 8012ad6:	d126      	bne.n	8012b26 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f003 fedb 	bl	8016894 <tcp_send_fin>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d11f      	bne.n	8012b2a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2205      	movs	r2, #5
 8012aee:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012af0:	e01b      	b.n	8012b2a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f003 fece 	bl	8016894 <tcp_send_fin>
 8012af8:	4603      	mov	r3, r0
 8012afa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d114      	bne.n	8012b2e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2205      	movs	r2, #5
 8012b08:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b0a:	e010      	b.n	8012b2e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f003 fec1 	bl	8016894 <tcp_send_fin>
 8012b12:	4603      	mov	r3, r0
 8012b14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d109      	bne.n	8012b32 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2209      	movs	r2, #9
 8012b22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b24:	e005      	b.n	8012b32 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012b26:	2300      	movs	r3, #0
 8012b28:	e01c      	b.n	8012b64 <tcp_close_shutdown_fin+0xb8>
      break;
 8012b2a:	bf00      	nop
 8012b2c:	e002      	b.n	8012b34 <tcp_close_shutdown_fin+0x88>
      break;
 8012b2e:	bf00      	nop
 8012b30:	e000      	b.n	8012b34 <tcp_close_shutdown_fin+0x88>
      break;
 8012b32:	bf00      	nop
  }

  if (err == ERR_OK) {
 8012b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d103      	bne.n	8012b44 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f003 ffe7 	bl	8016b10 <tcp_output>
 8012b42:	e00d      	b.n	8012b60 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8012b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b4c:	d108      	bne.n	8012b60 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	8b5b      	ldrh	r3, [r3, #26]
 8012b52:	f043 0308 	orr.w	r3, r3, #8
 8012b56:	b29a      	uxth	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	e001      	b.n	8012b64 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8012b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3710      	adds	r7, #16
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}
 8012b6c:	0801c940 	.word	0x0801c940
 8012b70:	0801c9f0 	.word	0x0801c9f0
 8012b74:	0801c984 	.word	0x0801c984

08012b78 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b082      	sub	sp, #8
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d109      	bne.n	8012b9a <tcp_close+0x22>
 8012b86:	4b0f      	ldr	r3, [pc, #60]	; (8012bc4 <tcp_close+0x4c>)
 8012b88:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012b8c:	490e      	ldr	r1, [pc, #56]	; (8012bc8 <tcp_close+0x50>)
 8012b8e:	480f      	ldr	r0, [pc, #60]	; (8012bcc <tcp_close+0x54>)
 8012b90:	f008 f946 	bl	801ae20 <iprintf>
 8012b94:	f06f 030f 	mvn.w	r3, #15
 8012b98:	e00f      	b.n	8012bba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	7d1b      	ldrb	r3, [r3, #20]
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	d006      	beq.n	8012bb0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	8b5b      	ldrh	r3, [r3, #26]
 8012ba6:	f043 0310 	orr.w	r3, r3, #16
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012bb0:	2101      	movs	r1, #1
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f7ff fe9c 	bl	80128f0 <tcp_close_shutdown>
 8012bb8:	4603      	mov	r3, r0
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	0801c940 	.word	0x0801c940
 8012bc8:	0801ca50 	.word	0x0801ca50
 8012bcc:	0801c984 	.word	0x0801c984

08012bd0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b08e      	sub	sp, #56	; 0x38
 8012bd4:	af04      	add	r7, sp, #16
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d107      	bne.n	8012bf0 <tcp_abandon+0x20>
 8012be0:	4b52      	ldr	r3, [pc, #328]	; (8012d2c <tcp_abandon+0x15c>)
 8012be2:	f240 223d 	movw	r2, #573	; 0x23d
 8012be6:	4952      	ldr	r1, [pc, #328]	; (8012d30 <tcp_abandon+0x160>)
 8012be8:	4852      	ldr	r0, [pc, #328]	; (8012d34 <tcp_abandon+0x164>)
 8012bea:	f008 f919 	bl	801ae20 <iprintf>
 8012bee:	e099      	b.n	8012d24 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	7d1b      	ldrb	r3, [r3, #20]
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	d106      	bne.n	8012c06 <tcp_abandon+0x36>
 8012bf8:	4b4c      	ldr	r3, [pc, #304]	; (8012d2c <tcp_abandon+0x15c>)
 8012bfa:	f240 2241 	movw	r2, #577	; 0x241
 8012bfe:	494e      	ldr	r1, [pc, #312]	; (8012d38 <tcp_abandon+0x168>)
 8012c00:	484c      	ldr	r0, [pc, #304]	; (8012d34 <tcp_abandon+0x164>)
 8012c02:	f008 f90d 	bl	801ae20 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	7d1b      	ldrb	r3, [r3, #20]
 8012c0a:	2b0a      	cmp	r3, #10
 8012c0c:	d107      	bne.n	8012c1e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012c0e:	6879      	ldr	r1, [r7, #4]
 8012c10:	484a      	ldr	r0, [pc, #296]	; (8012d3c <tcp_abandon+0x16c>)
 8012c12:	f000 ffbf 	bl	8013b94 <tcp_pcb_remove>
    tcp_free(pcb);
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	f7ff fdb8 	bl	801278c <tcp_free>
 8012c1c:	e082      	b.n	8012d24 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012c22:	2300      	movs	r3, #0
 8012c24:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c2a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c30:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c38:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	691b      	ldr	r3, [r3, #16]
 8012c3e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	7d1b      	ldrb	r3, [r3, #20]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d126      	bne.n	8012c96 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	8adb      	ldrh	r3, [r3, #22]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d02e      	beq.n	8012cae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012c50:	4b3b      	ldr	r3, [pc, #236]	; (8012d40 <tcp_abandon+0x170>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	687a      	ldr	r2, [r7, #4]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d105      	bne.n	8012c66 <tcp_abandon+0x96>
 8012c5a:	4b39      	ldr	r3, [pc, #228]	; (8012d40 <tcp_abandon+0x170>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	4a37      	ldr	r2, [pc, #220]	; (8012d40 <tcp_abandon+0x170>)
 8012c62:	6013      	str	r3, [r2, #0]
 8012c64:	e013      	b.n	8012c8e <tcp_abandon+0xbe>
 8012c66:	4b36      	ldr	r3, [pc, #216]	; (8012d40 <tcp_abandon+0x170>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	61fb      	str	r3, [r7, #28]
 8012c6c:	e00c      	b.n	8012c88 <tcp_abandon+0xb8>
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	687a      	ldr	r2, [r7, #4]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d104      	bne.n	8012c82 <tcp_abandon+0xb2>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	68da      	ldr	r2, [r3, #12]
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	60da      	str	r2, [r3, #12]
 8012c80:	e005      	b.n	8012c8e <tcp_abandon+0xbe>
 8012c82:	69fb      	ldr	r3, [r7, #28]
 8012c84:	68db      	ldr	r3, [r3, #12]
 8012c86:	61fb      	str	r3, [r7, #28]
 8012c88:	69fb      	ldr	r3, [r7, #28]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d1ef      	bne.n	8012c6e <tcp_abandon+0x9e>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	60da      	str	r2, [r3, #12]
 8012c94:	e00b      	b.n	8012cae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	8adb      	ldrh	r3, [r3, #22]
 8012c9e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012ca0:	6879      	ldr	r1, [r7, #4]
 8012ca2:	4828      	ldr	r0, [pc, #160]	; (8012d44 <tcp_abandon+0x174>)
 8012ca4:	f000 ff76 	bl	8013b94 <tcp_pcb_remove>
 8012ca8:	4b27      	ldr	r3, [pc, #156]	; (8012d48 <tcp_abandon+0x178>)
 8012caa:	2201      	movs	r2, #1
 8012cac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d004      	beq.n	8012cc0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f000 fd1a 	bl	80136f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d004      	beq.n	8012cd2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 fd11 	bl	80136f4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d004      	beq.n	8012ce4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f000 fd08 	bl	80136f4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00e      	beq.n	8012d08 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012cea:	6879      	ldr	r1, [r7, #4]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	3304      	adds	r3, #4
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	8b12      	ldrh	r2, [r2, #24]
 8012cf4:	9202      	str	r2, [sp, #8]
 8012cf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012cf8:	9201      	str	r2, [sp, #4]
 8012cfa:	9300      	str	r3, [sp, #0]
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	697a      	ldr	r2, [r7, #20]
 8012d00:	69b9      	ldr	r1, [r7, #24]
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f004 fcca 	bl	801769c <tcp_rst>
    }
    last_state = pcb->state;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	7d1b      	ldrb	r3, [r3, #20]
 8012d0c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f7ff fd3c 	bl	801278c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d004      	beq.n	8012d24 <tcp_abandon+0x154>
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	f06f 010c 	mvn.w	r1, #12
 8012d20:	68f8      	ldr	r0, [r7, #12]
 8012d22:	4798      	blx	r3
  }
}
 8012d24:	3728      	adds	r7, #40	; 0x28
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	0801c940 	.word	0x0801c940
 8012d30:	0801ca84 	.word	0x0801ca84
 8012d34:	0801c984 	.word	0x0801c984
 8012d38:	0801caa0 	.word	0x0801caa0
 8012d3c:	2000b4d4 	.word	0x2000b4d4
 8012d40:	2000b4d0 	.word	0x2000b4d0
 8012d44:	2000b4c4 	.word	0x2000b4c4
 8012d48:	2000b4c0 	.word	0x2000b4c0

08012d4c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012d54:	2101      	movs	r1, #1
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f7ff ff3a 	bl	8012bd0 <tcp_abandon>
}
 8012d5c:	bf00      	nop
 8012d5e:	3708      	adds	r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d106      	bne.n	8012d80 <tcp_update_rcv_ann_wnd+0x1c>
 8012d72:	4b25      	ldr	r3, [pc, #148]	; (8012e08 <tcp_update_rcv_ann_wnd+0xa4>)
 8012d74:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012d78:	4924      	ldr	r1, [pc, #144]	; (8012e0c <tcp_update_rcv_ann_wnd+0xa8>)
 8012d7a:	4825      	ldr	r0, [pc, #148]	; (8012e10 <tcp_update_rcv_ann_wnd+0xac>)
 8012d7c:	f008 f850 	bl	801ae20 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012d88:	4413      	add	r3, r2
 8012d8a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d90:	687a      	ldr	r2, [r7, #4]
 8012d92:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012d94:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012d98:	bf28      	it	cs
 8012d9a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012d9e:	b292      	uxth	r2, r2
 8012da0:	4413      	add	r3, r2
 8012da2:	68fa      	ldr	r2, [r7, #12]
 8012da4:	1ad3      	subs	r3, r2, r3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	db08      	blt.n	8012dbc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012db6:	68fa      	ldr	r2, [r7, #12]
 8012db8:	1ad3      	subs	r3, r2, r3
 8012dba:	e020      	b.n	8012dfe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc4:	1ad3      	subs	r3, r2, r3
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	dd03      	ble.n	8012dd2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012dd0:	e014      	b.n	8012dfc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dda:	1ad3      	subs	r3, r2, r3
 8012ddc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012de4:	d306      	bcc.n	8012df4 <tcp_update_rcv_ann_wnd+0x90>
 8012de6:	4b08      	ldr	r3, [pc, #32]	; (8012e08 <tcp_update_rcv_ann_wnd+0xa4>)
 8012de8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012dec:	4909      	ldr	r1, [pc, #36]	; (8012e14 <tcp_update_rcv_ann_wnd+0xb0>)
 8012dee:	4808      	ldr	r0, [pc, #32]	; (8012e10 <tcp_update_rcv_ann_wnd+0xac>)
 8012df0:	f008 f816 	bl	801ae20 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	b29a      	uxth	r2, r3
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012dfc:	2300      	movs	r3, #0
  }
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3710      	adds	r7, #16
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	0801c940 	.word	0x0801c940
 8012e0c:	0801cb9c 	.word	0x0801cb9c
 8012e10:	0801c984 	.word	0x0801c984
 8012e14:	0801cbc0 	.word	0x0801cbc0

08012e18 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
 8012e20:	460b      	mov	r3, r1
 8012e22:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d107      	bne.n	8012e3a <tcp_recved+0x22>
 8012e2a:	4b1f      	ldr	r3, [pc, #124]	; (8012ea8 <tcp_recved+0x90>)
 8012e2c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012e30:	491e      	ldr	r1, [pc, #120]	; (8012eac <tcp_recved+0x94>)
 8012e32:	481f      	ldr	r0, [pc, #124]	; (8012eb0 <tcp_recved+0x98>)
 8012e34:	f007 fff4 	bl	801ae20 <iprintf>
 8012e38:	e032      	b.n	8012ea0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	7d1b      	ldrb	r3, [r3, #20]
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	d106      	bne.n	8012e50 <tcp_recved+0x38>
 8012e42:	4b19      	ldr	r3, [pc, #100]	; (8012ea8 <tcp_recved+0x90>)
 8012e44:	f240 32d3 	movw	r2, #979	; 0x3d3
 8012e48:	491a      	ldr	r1, [pc, #104]	; (8012eb4 <tcp_recved+0x9c>)
 8012e4a:	4819      	ldr	r0, [pc, #100]	; (8012eb0 <tcp_recved+0x98>)
 8012e4c:	f007 ffe8 	bl	801ae20 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e54:	887b      	ldrh	r3, [r7, #2]
 8012e56:	4413      	add	r3, r2
 8012e58:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012e5a:	89fb      	ldrh	r3, [r7, #14]
 8012e5c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012e60:	d804      	bhi.n	8012e6c <tcp_recved+0x54>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e66:	89fa      	ldrh	r2, [r7, #14]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d204      	bcs.n	8012e76 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012e72:	851a      	strh	r2, [r3, #40]	; 0x28
 8012e74:	e002      	b.n	8012e7c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	89fa      	ldrh	r2, [r7, #14]
 8012e7a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f7ff ff71 	bl	8012d64 <tcp_update_rcv_ann_wnd>
 8012e82:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012e8a:	d309      	bcc.n	8012ea0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	8b5b      	ldrh	r3, [r3, #26]
 8012e90:	f043 0302 	orr.w	r3, r3, #2
 8012e94:	b29a      	uxth	r2, r3
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f003 fe38 	bl	8016b10 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012ea0:	3710      	adds	r7, #16
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	0801c940 	.word	0x0801c940
 8012eac:	0801cbdc 	.word	0x0801cbdc
 8012eb0:	0801c984 	.word	0x0801c984
 8012eb4:	0801cbf4 	.word	0x0801cbf4

08012eb8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012eb8:	b5b0      	push	{r4, r5, r7, lr}
 8012eba:	b090      	sub	sp, #64	; 0x40
 8012ebc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012ec4:	4b94      	ldr	r3, [pc, #592]	; (8013118 <tcp_slowtmr+0x260>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	4a93      	ldr	r2, [pc, #588]	; (8013118 <tcp_slowtmr+0x260>)
 8012ecc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012ece:	4b93      	ldr	r3, [pc, #588]	; (801311c <tcp_slowtmr+0x264>)
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	b2da      	uxtb	r2, r3
 8012ed6:	4b91      	ldr	r3, [pc, #580]	; (801311c <tcp_slowtmr+0x264>)
 8012ed8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012eda:	2300      	movs	r3, #0
 8012edc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012ede:	4b90      	ldr	r3, [pc, #576]	; (8013120 <tcp_slowtmr+0x268>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012ee4:	e29d      	b.n	8013422 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee8:	7d1b      	ldrb	r3, [r3, #20]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d106      	bne.n	8012efc <tcp_slowtmr+0x44>
 8012eee:	4b8d      	ldr	r3, [pc, #564]	; (8013124 <tcp_slowtmr+0x26c>)
 8012ef0:	f240 42be 	movw	r2, #1214	; 0x4be
 8012ef4:	498c      	ldr	r1, [pc, #560]	; (8013128 <tcp_slowtmr+0x270>)
 8012ef6:	488d      	ldr	r0, [pc, #564]	; (801312c <tcp_slowtmr+0x274>)
 8012ef8:	f007 ff92 	bl	801ae20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efe:	7d1b      	ldrb	r3, [r3, #20]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	d106      	bne.n	8012f12 <tcp_slowtmr+0x5a>
 8012f04:	4b87      	ldr	r3, [pc, #540]	; (8013124 <tcp_slowtmr+0x26c>)
 8012f06:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012f0a:	4989      	ldr	r1, [pc, #548]	; (8013130 <tcp_slowtmr+0x278>)
 8012f0c:	4887      	ldr	r0, [pc, #540]	; (801312c <tcp_slowtmr+0x274>)
 8012f0e:	f007 ff87 	bl	801ae20 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f14:	7d1b      	ldrb	r3, [r3, #20]
 8012f16:	2b0a      	cmp	r3, #10
 8012f18:	d106      	bne.n	8012f28 <tcp_slowtmr+0x70>
 8012f1a:	4b82      	ldr	r3, [pc, #520]	; (8013124 <tcp_slowtmr+0x26c>)
 8012f1c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012f20:	4984      	ldr	r1, [pc, #528]	; (8013134 <tcp_slowtmr+0x27c>)
 8012f22:	4882      	ldr	r0, [pc, #520]	; (801312c <tcp_slowtmr+0x274>)
 8012f24:	f007 ff7c 	bl	801ae20 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2a:	7f9a      	ldrb	r2, [r3, #30]
 8012f2c:	4b7b      	ldr	r3, [pc, #492]	; (801311c <tcp_slowtmr+0x264>)
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d105      	bne.n	8012f40 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3a:	68db      	ldr	r3, [r3, #12]
 8012f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012f3e:	e270      	b.n	8013422 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012f40:	4b76      	ldr	r3, [pc, #472]	; (801311c <tcp_slowtmr+0x264>)
 8012f42:	781a      	ldrb	r2, [r3, #0]
 8012f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f46:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f56:	7d1b      	ldrb	r3, [r3, #20]
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	d10a      	bne.n	8012f72 <tcp_slowtmr+0xba>
 8012f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f62:	2b05      	cmp	r3, #5
 8012f64:	d905      	bls.n	8012f72 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f6a:	3301      	adds	r3, #1
 8012f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f70:	e11e      	b.n	80131b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f78:	2b0b      	cmp	r3, #11
 8012f7a:	d905      	bls.n	8012f88 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f80:	3301      	adds	r3, #1
 8012f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f86:	e113      	b.n	80131b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d075      	beq.n	801307e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d006      	beq.n	8012fa8 <tcp_slowtmr+0xf0>
 8012f9a:	4b62      	ldr	r3, [pc, #392]	; (8013124 <tcp_slowtmr+0x26c>)
 8012f9c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012fa0:	4965      	ldr	r1, [pc, #404]	; (8013138 <tcp_slowtmr+0x280>)
 8012fa2:	4862      	ldr	r0, [pc, #392]	; (801312c <tcp_slowtmr+0x274>)
 8012fa4:	f007 ff3c 	bl	801ae20 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d106      	bne.n	8012fbe <tcp_slowtmr+0x106>
 8012fb0:	4b5c      	ldr	r3, [pc, #368]	; (8013124 <tcp_slowtmr+0x26c>)
 8012fb2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012fb6:	4961      	ldr	r1, [pc, #388]	; (801313c <tcp_slowtmr+0x284>)
 8012fb8:	485c      	ldr	r0, [pc, #368]	; (801312c <tcp_slowtmr+0x274>)
 8012fba:	f007 ff31 	bl	801ae20 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012fc4:	2b0b      	cmp	r3, #11
 8012fc6:	d905      	bls.n	8012fd4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fcc:	3301      	adds	r3, #1
 8012fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012fd2:	e0ed      	b.n	80131b0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012fda:	3b01      	subs	r3, #1
 8012fdc:	4a58      	ldr	r2, [pc, #352]	; (8013140 <tcp_slowtmr+0x288>)
 8012fde:	5cd3      	ldrb	r3, [r2, r3]
 8012fe0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012fe8:	7c7a      	ldrb	r2, [r7, #17]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d907      	bls.n	8012ffe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	b2da      	uxtb	r2, r3
 8012ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013000:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013004:	7c7a      	ldrb	r2, [r7, #17]
 8013006:	429a      	cmp	r2, r3
 8013008:	f200 80d2 	bhi.w	80131b0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801300c:	2301      	movs	r3, #1
 801300e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013016:	2b00      	cmp	r3, #0
 8013018:	d108      	bne.n	801302c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801301a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801301c:	f004 fc32 	bl	8017884 <tcp_zero_window_probe>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d014      	beq.n	8013050 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013026:	2300      	movs	r3, #0
 8013028:	623b      	str	r3, [r7, #32]
 801302a:	e011      	b.n	8013050 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013032:	4619      	mov	r1, r3
 8013034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013036:	f003 fae5 	bl	8016604 <tcp_split_unsent_seg>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d107      	bne.n	8013050 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013042:	f003 fd65 	bl	8016b10 <tcp_output>
 8013046:	4603      	mov	r3, r0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d101      	bne.n	8013050 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801304c:	2300      	movs	r3, #0
 801304e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013050:	6a3b      	ldr	r3, [r7, #32]
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 80ac 	beq.w	80131b0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305a:	2200      	movs	r2, #0
 801305c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013062:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013066:	2b06      	cmp	r3, #6
 8013068:	f200 80a2 	bhi.w	80131b0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013072:	3301      	adds	r3, #1
 8013074:	b2da      	uxtb	r2, r3
 8013076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013078:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801307c:	e098      	b.n	80131b0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013080:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013084:	2b00      	cmp	r3, #0
 8013086:	db0f      	blt.n	80130a8 <tcp_slowtmr+0x1f0>
 8013088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801308e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013092:	4293      	cmp	r3, r2
 8013094:	d008      	beq.n	80130a8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013098:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801309c:	b29b      	uxth	r3, r3
 801309e:	3301      	adds	r3, #1
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	b21a      	sxth	r2, r3
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80130a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80130ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80130b4:	429a      	cmp	r2, r3
 80130b6:	db7b      	blt.n	80131b0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80130b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130ba:	f004 f821 	bl	8017100 <tcp_rexmit_rto_prepare>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d007      	beq.n	80130d4 <tcp_slowtmr+0x21c>
 80130c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d171      	bne.n	80131b0 <tcp_slowtmr+0x2f8>
 80130cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d06d      	beq.n	80131b0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80130d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d6:	7d1b      	ldrb	r3, [r3, #20]
 80130d8:	2b02      	cmp	r3, #2
 80130da:	d03a      	beq.n	8013152 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80130dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80130e2:	2b0c      	cmp	r3, #12
 80130e4:	bf28      	it	cs
 80130e6:	230c      	movcs	r3, #12
 80130e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80130ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80130f0:	10db      	asrs	r3, r3, #3
 80130f2:	b21b      	sxth	r3, r3
 80130f4:	461a      	mov	r2, r3
 80130f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80130fc:	4413      	add	r3, r2
 80130fe:	7efa      	ldrb	r2, [r7, #27]
 8013100:	4910      	ldr	r1, [pc, #64]	; (8013144 <tcp_slowtmr+0x28c>)
 8013102:	5c8a      	ldrb	r2, [r1, r2]
 8013104:	4093      	lsls	r3, r2
 8013106:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801310e:	4293      	cmp	r3, r2
 8013110:	dc1a      	bgt.n	8013148 <tcp_slowtmr+0x290>
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	b21a      	sxth	r2, r3
 8013116:	e019      	b.n	801314c <tcp_slowtmr+0x294>
 8013118:	2000b4c8 	.word	0x2000b4c8
 801311c:	20004562 	.word	0x20004562
 8013120:	2000b4c4 	.word	0x2000b4c4
 8013124:	0801c940 	.word	0x0801c940
 8013128:	0801cc84 	.word	0x0801cc84
 801312c:	0801c984 	.word	0x0801c984
 8013130:	0801ccb0 	.word	0x0801ccb0
 8013134:	0801ccdc 	.word	0x0801ccdc
 8013138:	0801cd0c 	.word	0x0801cd0c
 801313c:	0801cd40 	.word	0x0801cd40
 8013140:	0801e95c 	.word	0x0801e95c
 8013144:	0801e94c 	.word	0x0801e94c
 8013148:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801314e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013154:	2200      	movs	r2, #0
 8013156:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013164:	4293      	cmp	r3, r2
 8013166:	bf28      	it	cs
 8013168:	4613      	movcs	r3, r2
 801316a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801316c:	8a7b      	ldrh	r3, [r7, #18]
 801316e:	085b      	lsrs	r3, r3, #1
 8013170:	b29a      	uxth	r2, r3
 8013172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013174:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013182:	005b      	lsls	r3, r3, #1
 8013184:	b29b      	uxth	r3, r3
 8013186:	429a      	cmp	r2, r3
 8013188:	d206      	bcs.n	8013198 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801318e:	005b      	lsls	r3, r3, #1
 8013190:	b29a      	uxth	r2, r3
 8013192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013194:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80131a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a4:	2200      	movs	r2, #0
 80131a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80131aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80131ac:	f004 f818 	bl	80171e0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80131b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b2:	7d1b      	ldrb	r3, [r3, #20]
 80131b4:	2b06      	cmp	r3, #6
 80131b6:	d111      	bne.n	80131dc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80131b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ba:	8b5b      	ldrh	r3, [r3, #26]
 80131bc:	f003 0310 	and.w	r3, r3, #16
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d00b      	beq.n	80131dc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80131c4:	4b9c      	ldr	r3, [pc, #624]	; (8013438 <tcp_slowtmr+0x580>)
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ca:	6a1b      	ldr	r3, [r3, #32]
 80131cc:	1ad3      	subs	r3, r2, r3
 80131ce:	2b28      	cmp	r3, #40	; 0x28
 80131d0:	d904      	bls.n	80131dc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80131d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131d6:	3301      	adds	r3, #1
 80131d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80131dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131de:	7a5b      	ldrb	r3, [r3, #9]
 80131e0:	f003 0308 	and.w	r3, r3, #8
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d04a      	beq.n	801327e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80131e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80131ec:	2b04      	cmp	r3, #4
 80131ee:	d003      	beq.n	80131f8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80131f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80131f4:	2b07      	cmp	r3, #7
 80131f6:	d142      	bne.n	801327e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80131f8:	4b8f      	ldr	r3, [pc, #572]	; (8013438 <tcp_slowtmr+0x580>)
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fe:	6a1b      	ldr	r3, [r3, #32]
 8013200:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013204:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013208:	4b8c      	ldr	r3, [pc, #560]	; (801343c <tcp_slowtmr+0x584>)
 801320a:	440b      	add	r3, r1
 801320c:	498c      	ldr	r1, [pc, #560]	; (8013440 <tcp_slowtmr+0x588>)
 801320e:	fba1 1303 	umull	r1, r3, r1, r3
 8013212:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013214:	429a      	cmp	r2, r3
 8013216:	d90a      	bls.n	801322e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801321c:	3301      	adds	r3, #1
 801321e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8013222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013226:	3301      	adds	r3, #1
 8013228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801322c:	e027      	b.n	801327e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801322e:	4b82      	ldr	r3, [pc, #520]	; (8013438 <tcp_slowtmr+0x580>)
 8013230:	681a      	ldr	r2, [r3, #0]
 8013232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013234:	6a1b      	ldr	r3, [r3, #32]
 8013236:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801323a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013240:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013244:	4618      	mov	r0, r3
 8013246:	4b7f      	ldr	r3, [pc, #508]	; (8013444 <tcp_slowtmr+0x58c>)
 8013248:	fb03 f300 	mul.w	r3, r3, r0
 801324c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801324e:	497c      	ldr	r1, [pc, #496]	; (8013440 <tcp_slowtmr+0x588>)
 8013250:	fba1 1303 	umull	r1, r3, r1, r3
 8013254:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013256:	429a      	cmp	r2, r3
 8013258:	d911      	bls.n	801327e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801325a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801325c:	f004 fad2 	bl	8017804 <tcp_keepalive>
 8013260:	4603      	mov	r3, r0
 8013262:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8013266:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801326a:	2b00      	cmp	r3, #0
 801326c:	d107      	bne.n	801327e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013270:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013274:	3301      	adds	r3, #1
 8013276:	b2da      	uxtb	r2, r3
 8013278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013282:	2b00      	cmp	r3, #0
 8013284:	d011      	beq.n	80132aa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013286:	4b6c      	ldr	r3, [pc, #432]	; (8013438 <tcp_slowtmr+0x580>)
 8013288:	681a      	ldr	r2, [r3, #0]
 801328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328c:	6a1b      	ldr	r3, [r3, #32]
 801328e:	1ad2      	subs	r2, r2, r3
 8013290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013292:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013296:	4619      	mov	r1, r3
 8013298:	460b      	mov	r3, r1
 801329a:	005b      	lsls	r3, r3, #1
 801329c:	440b      	add	r3, r1
 801329e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d302      	bcc.n	80132aa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80132a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132a6:	f000 fdd9 	bl	8013e5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80132aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ac:	7d1b      	ldrb	r3, [r3, #20]
 80132ae:	2b03      	cmp	r3, #3
 80132b0:	d10b      	bne.n	80132ca <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80132b2:	4b61      	ldr	r3, [pc, #388]	; (8013438 <tcp_slowtmr+0x580>)
 80132b4:	681a      	ldr	r2, [r3, #0]
 80132b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b8:	6a1b      	ldr	r3, [r3, #32]
 80132ba:	1ad3      	subs	r3, r2, r3
 80132bc:	2b28      	cmp	r3, #40	; 0x28
 80132be:	d904      	bls.n	80132ca <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80132c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132c4:	3301      	adds	r3, #1
 80132c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80132ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132cc:	7d1b      	ldrb	r3, [r3, #20]
 80132ce:	2b09      	cmp	r3, #9
 80132d0:	d10b      	bne.n	80132ea <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80132d2:	4b59      	ldr	r3, [pc, #356]	; (8013438 <tcp_slowtmr+0x580>)
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d8:	6a1b      	ldr	r3, [r3, #32]
 80132da:	1ad3      	subs	r3, r2, r3
 80132dc:	2bf0      	cmp	r3, #240	; 0xf0
 80132de:	d904      	bls.n	80132ea <tcp_slowtmr+0x432>
        ++pcb_remove;
 80132e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132e4:	3301      	adds	r3, #1
 80132e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80132ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d060      	beq.n	80133b4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80132f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80132fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132fc:	f000 fbfa 	bl	8013af4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013302:	2b00      	cmp	r3, #0
 8013304:	d010      	beq.n	8013328 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013306:	4b50      	ldr	r3, [pc, #320]	; (8013448 <tcp_slowtmr+0x590>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801330c:	429a      	cmp	r2, r3
 801330e:	d106      	bne.n	801331e <tcp_slowtmr+0x466>
 8013310:	4b4e      	ldr	r3, [pc, #312]	; (801344c <tcp_slowtmr+0x594>)
 8013312:	f240 526d 	movw	r2, #1389	; 0x56d
 8013316:	494e      	ldr	r1, [pc, #312]	; (8013450 <tcp_slowtmr+0x598>)
 8013318:	484e      	ldr	r0, [pc, #312]	; (8013454 <tcp_slowtmr+0x59c>)
 801331a:	f007 fd81 	bl	801ae20 <iprintf>
        prev->next = pcb->next;
 801331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013320:	68da      	ldr	r2, [r3, #12]
 8013322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013324:	60da      	str	r2, [r3, #12]
 8013326:	e00f      	b.n	8013348 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013328:	4b47      	ldr	r3, [pc, #284]	; (8013448 <tcp_slowtmr+0x590>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801332e:	429a      	cmp	r2, r3
 8013330:	d006      	beq.n	8013340 <tcp_slowtmr+0x488>
 8013332:	4b46      	ldr	r3, [pc, #280]	; (801344c <tcp_slowtmr+0x594>)
 8013334:	f240 5271 	movw	r2, #1393	; 0x571
 8013338:	4947      	ldr	r1, [pc, #284]	; (8013458 <tcp_slowtmr+0x5a0>)
 801333a:	4846      	ldr	r0, [pc, #280]	; (8013454 <tcp_slowtmr+0x59c>)
 801333c:	f007 fd70 	bl	801ae20 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013342:	68db      	ldr	r3, [r3, #12]
 8013344:	4a40      	ldr	r2, [pc, #256]	; (8013448 <tcp_slowtmr+0x590>)
 8013346:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801334c:	2b00      	cmp	r3, #0
 801334e:	d013      	beq.n	8013378 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013352:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013356:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013358:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335c:	3304      	adds	r3, #4
 801335e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013360:	8ad2      	ldrh	r2, [r2, #22]
 8013362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013364:	8b09      	ldrh	r1, [r1, #24]
 8013366:	9102      	str	r1, [sp, #8]
 8013368:	9201      	str	r2, [sp, #4]
 801336a:	9300      	str	r3, [sp, #0]
 801336c:	462b      	mov	r3, r5
 801336e:	4622      	mov	r2, r4
 8013370:	4601      	mov	r1, r0
 8013372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013374:	f004 f992 	bl	801769c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337a:	691b      	ldr	r3, [r3, #16]
 801337c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013380:	7d1b      	ldrb	r3, [r3, #20]
 8013382:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013386:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801338e:	6838      	ldr	r0, [r7, #0]
 8013390:	f7ff f9fc 	bl	801278c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013394:	4b31      	ldr	r3, [pc, #196]	; (801345c <tcp_slowtmr+0x5a4>)
 8013396:	2200      	movs	r2, #0
 8013398:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d004      	beq.n	80133aa <tcp_slowtmr+0x4f2>
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f06f 010c 	mvn.w	r1, #12
 80133a6:	68b8      	ldr	r0, [r7, #8]
 80133a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80133aa:	4b2c      	ldr	r3, [pc, #176]	; (801345c <tcp_slowtmr+0x5a4>)
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d037      	beq.n	8013422 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80133b2:	e592      	b.n	8012eda <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80133b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80133b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	7f1b      	ldrb	r3, [r3, #28]
 80133c2:	3301      	adds	r3, #1
 80133c4:	b2da      	uxtb	r2, r3
 80133c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80133ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133cc:	7f1a      	ldrb	r2, [r3, #28]
 80133ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d0:	7f5b      	ldrb	r3, [r3, #29]
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d325      	bcc.n	8013422 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80133d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d8:	2200      	movs	r2, #0
 80133da:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80133dc:	4b1f      	ldr	r3, [pc, #124]	; (801345c <tcp_slowtmr+0x5a4>)
 80133de:	2200      	movs	r2, #0
 80133e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80133e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d00b      	beq.n	8013404 <tcp_slowtmr+0x54c>
 80133ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133f4:	6912      	ldr	r2, [r2, #16]
 80133f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80133f8:	4610      	mov	r0, r2
 80133fa:	4798      	blx	r3
 80133fc:	4603      	mov	r3, r0
 80133fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8013402:	e002      	b.n	801340a <tcp_slowtmr+0x552>
 8013404:	2300      	movs	r3, #0
 8013406:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801340a:	4b14      	ldr	r3, [pc, #80]	; (801345c <tcp_slowtmr+0x5a4>)
 801340c:	781b      	ldrb	r3, [r3, #0]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d000      	beq.n	8013414 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8013412:	e562      	b.n	8012eda <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013414:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013418:	2b00      	cmp	r3, #0
 801341a:	d102      	bne.n	8013422 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801341c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801341e:	f003 fb77 	bl	8016b10 <tcp_output>
  while (pcb != NULL) {
 8013422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013424:	2b00      	cmp	r3, #0
 8013426:	f47f ad5e 	bne.w	8012ee6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801342a:	2300      	movs	r3, #0
 801342c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801342e:	4b0c      	ldr	r3, [pc, #48]	; (8013460 <tcp_slowtmr+0x5a8>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013434:	e069      	b.n	801350a <tcp_slowtmr+0x652>
 8013436:	bf00      	nop
 8013438:	2000b4c8 	.word	0x2000b4c8
 801343c:	000a4cb8 	.word	0x000a4cb8
 8013440:	10624dd3 	.word	0x10624dd3
 8013444:	000124f8 	.word	0x000124f8
 8013448:	2000b4c4 	.word	0x2000b4c4
 801344c:	0801c940 	.word	0x0801c940
 8013450:	0801cd78 	.word	0x0801cd78
 8013454:	0801c984 	.word	0x0801c984
 8013458:	0801cda4 	.word	0x0801cda4
 801345c:	2000b4c0 	.word	0x2000b4c0
 8013460:	2000b4d4 	.word	0x2000b4d4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013466:	7d1b      	ldrb	r3, [r3, #20]
 8013468:	2b0a      	cmp	r3, #10
 801346a:	d006      	beq.n	801347a <tcp_slowtmr+0x5c2>
 801346c:	4b2a      	ldr	r3, [pc, #168]	; (8013518 <tcp_slowtmr+0x660>)
 801346e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8013472:	492a      	ldr	r1, [pc, #168]	; (801351c <tcp_slowtmr+0x664>)
 8013474:	482a      	ldr	r0, [pc, #168]	; (8013520 <tcp_slowtmr+0x668>)
 8013476:	f007 fcd3 	bl	801ae20 <iprintf>
    pcb_remove = 0;
 801347a:	2300      	movs	r3, #0
 801347c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013480:	4b28      	ldr	r3, [pc, #160]	; (8013524 <tcp_slowtmr+0x66c>)
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013486:	6a1b      	ldr	r3, [r3, #32]
 8013488:	1ad3      	subs	r3, r2, r3
 801348a:	2bf0      	cmp	r3, #240	; 0xf0
 801348c:	d904      	bls.n	8013498 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801348e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013492:	3301      	adds	r3, #1
 8013494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801349c:	2b00      	cmp	r3, #0
 801349e:	d02f      	beq.n	8013500 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80134a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80134a2:	f000 fb27 	bl	8013af4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80134a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d010      	beq.n	80134ce <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80134ac:	4b1e      	ldr	r3, [pc, #120]	; (8013528 <tcp_slowtmr+0x670>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d106      	bne.n	80134c4 <tcp_slowtmr+0x60c>
 80134b6:	4b18      	ldr	r3, [pc, #96]	; (8013518 <tcp_slowtmr+0x660>)
 80134b8:	f240 52af 	movw	r2, #1455	; 0x5af
 80134bc:	491b      	ldr	r1, [pc, #108]	; (801352c <tcp_slowtmr+0x674>)
 80134be:	4818      	ldr	r0, [pc, #96]	; (8013520 <tcp_slowtmr+0x668>)
 80134c0:	f007 fcae 	bl	801ae20 <iprintf>
        prev->next = pcb->next;
 80134c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c6:	68da      	ldr	r2, [r3, #12]
 80134c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ca:	60da      	str	r2, [r3, #12]
 80134cc:	e00f      	b.n	80134ee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80134ce:	4b16      	ldr	r3, [pc, #88]	; (8013528 <tcp_slowtmr+0x670>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d006      	beq.n	80134e6 <tcp_slowtmr+0x62e>
 80134d8:	4b0f      	ldr	r3, [pc, #60]	; (8013518 <tcp_slowtmr+0x660>)
 80134da:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80134de:	4914      	ldr	r1, [pc, #80]	; (8013530 <tcp_slowtmr+0x678>)
 80134e0:	480f      	ldr	r0, [pc, #60]	; (8013520 <tcp_slowtmr+0x668>)
 80134e2:	f007 fc9d 	bl	801ae20 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80134e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e8:	68db      	ldr	r3, [r3, #12]
 80134ea:	4a0f      	ldr	r2, [pc, #60]	; (8013528 <tcp_slowtmr+0x670>)
 80134ec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80134ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80134f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f4:	68db      	ldr	r3, [r3, #12]
 80134f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80134f8:	69f8      	ldr	r0, [r7, #28]
 80134fa:	f7ff f947 	bl	801278c <tcp_free>
 80134fe:	e004      	b.n	801350a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013502:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350c:	2b00      	cmp	r3, #0
 801350e:	d1a9      	bne.n	8013464 <tcp_slowtmr+0x5ac>
    }
  }
}
 8013510:	bf00      	nop
 8013512:	3730      	adds	r7, #48	; 0x30
 8013514:	46bd      	mov	sp, r7
 8013516:	bdb0      	pop	{r4, r5, r7, pc}
 8013518:	0801c940 	.word	0x0801c940
 801351c:	0801cdd0 	.word	0x0801cdd0
 8013520:	0801c984 	.word	0x0801c984
 8013524:	2000b4c8 	.word	0x2000b4c8
 8013528:	2000b4d4 	.word	0x2000b4d4
 801352c:	0801ce00 	.word	0x0801ce00
 8013530:	0801ce28 	.word	0x0801ce28

08013534 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b082      	sub	sp, #8
 8013538:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801353a:	4b2d      	ldr	r3, [pc, #180]	; (80135f0 <tcp_fasttmr+0xbc>)
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	3301      	adds	r3, #1
 8013540:	b2da      	uxtb	r2, r3
 8013542:	4b2b      	ldr	r3, [pc, #172]	; (80135f0 <tcp_fasttmr+0xbc>)
 8013544:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013546:	4b2b      	ldr	r3, [pc, #172]	; (80135f4 <tcp_fasttmr+0xc0>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801354c:	e048      	b.n	80135e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	7f9a      	ldrb	r2, [r3, #30]
 8013552:	4b27      	ldr	r3, [pc, #156]	; (80135f0 <tcp_fasttmr+0xbc>)
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	429a      	cmp	r2, r3
 8013558:	d03f      	beq.n	80135da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801355a:	4b25      	ldr	r3, [pc, #148]	; (80135f0 <tcp_fasttmr+0xbc>)
 801355c:	781a      	ldrb	r2, [r3, #0]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	8b5b      	ldrh	r3, [r3, #26]
 8013566:	f003 0301 	and.w	r3, r3, #1
 801356a:	2b00      	cmp	r3, #0
 801356c:	d010      	beq.n	8013590 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	8b5b      	ldrh	r3, [r3, #26]
 8013572:	f043 0302 	orr.w	r3, r3, #2
 8013576:	b29a      	uxth	r2, r3
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f003 fac7 	bl	8016b10 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	8b5b      	ldrh	r3, [r3, #26]
 8013586:	f023 0303 	bic.w	r3, r3, #3
 801358a:	b29a      	uxth	r2, r3
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	8b5b      	ldrh	r3, [r3, #26]
 8013594:	f003 0308 	and.w	r3, r3, #8
 8013598:	2b00      	cmp	r3, #0
 801359a:	d009      	beq.n	80135b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	8b5b      	ldrh	r3, [r3, #26]
 80135a0:	f023 0308 	bic.w	r3, r3, #8
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f7ff fa7e 	bl	8012aac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	68db      	ldr	r3, [r3, #12]
 80135b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d00a      	beq.n	80135d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80135be:	4b0e      	ldr	r3, [pc, #56]	; (80135f8 <tcp_fasttmr+0xc4>)
 80135c0:	2200      	movs	r2, #0
 80135c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f000 f819 	bl	80135fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80135ca:	4b0b      	ldr	r3, [pc, #44]	; (80135f8 <tcp_fasttmr+0xc4>)
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d000      	beq.n	80135d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80135d2:	e7b8      	b.n	8013546 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	607b      	str	r3, [r7, #4]
 80135d8:	e002      	b.n	80135e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d1b3      	bne.n	801354e <tcp_fasttmr+0x1a>
    }
  }
}
 80135e6:	bf00      	nop
 80135e8:	3708      	adds	r7, #8
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	20004562 	.word	0x20004562
 80135f4:	2000b4c4 	.word	0x2000b4c4
 80135f8:	2000b4c0 	.word	0x2000b4c0

080135fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80135fc:	b590      	push	{r4, r7, lr}
 80135fe:	b085      	sub	sp, #20
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d109      	bne.n	801361e <tcp_process_refused_data+0x22>
 801360a:	4b37      	ldr	r3, [pc, #220]	; (80136e8 <tcp_process_refused_data+0xec>)
 801360c:	f240 6209 	movw	r2, #1545	; 0x609
 8013610:	4936      	ldr	r1, [pc, #216]	; (80136ec <tcp_process_refused_data+0xf0>)
 8013612:	4837      	ldr	r0, [pc, #220]	; (80136f0 <tcp_process_refused_data+0xf4>)
 8013614:	f007 fc04 	bl	801ae20 <iprintf>
 8013618:	f06f 030f 	mvn.w	r3, #15
 801361c:	e060      	b.n	80136e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013622:	7b5b      	ldrb	r3, [r3, #13]
 8013624:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801362a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2200      	movs	r2, #0
 8013630:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013638:	2b00      	cmp	r3, #0
 801363a:	d00b      	beq.n	8013654 <tcp_process_refused_data+0x58>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6918      	ldr	r0, [r3, #16]
 8013646:	2300      	movs	r3, #0
 8013648:	68ba      	ldr	r2, [r7, #8]
 801364a:	6879      	ldr	r1, [r7, #4]
 801364c:	47a0      	blx	r4
 801364e:	4603      	mov	r3, r0
 8013650:	73fb      	strb	r3, [r7, #15]
 8013652:	e007      	b.n	8013664 <tcp_process_refused_data+0x68>
 8013654:	2300      	movs	r3, #0
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	6879      	ldr	r1, [r7, #4]
 801365a:	2000      	movs	r0, #0
 801365c:	f000 f8a2 	bl	80137a4 <tcp_recv_null>
 8013660:	4603      	mov	r3, r0
 8013662:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d12a      	bne.n	80136c2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801366c:	7bbb      	ldrb	r3, [r7, #14]
 801366e:	f003 0320 	and.w	r3, r3, #32
 8013672:	2b00      	cmp	r3, #0
 8013674:	d033      	beq.n	80136de <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801367a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801367e:	d005      	beq.n	801368c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013684:	3301      	adds	r3, #1
 8013686:	b29a      	uxth	r2, r3
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013692:	2b00      	cmp	r3, #0
 8013694:	d00b      	beq.n	80136ae <tcp_process_refused_data+0xb2>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6918      	ldr	r0, [r3, #16]
 80136a0:	2300      	movs	r3, #0
 80136a2:	2200      	movs	r2, #0
 80136a4:	6879      	ldr	r1, [r7, #4]
 80136a6:	47a0      	blx	r4
 80136a8:	4603      	mov	r3, r0
 80136aa:	73fb      	strb	r3, [r7, #15]
 80136ac:	e001      	b.n	80136b2 <tcp_process_refused_data+0xb6>
 80136ae:	2300      	movs	r3, #0
 80136b0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80136b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136b6:	f113 0f0d 	cmn.w	r3, #13
 80136ba:	d110      	bne.n	80136de <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80136bc:	f06f 030c 	mvn.w	r3, #12
 80136c0:	e00e      	b.n	80136e0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80136c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136c6:	f113 0f0d 	cmn.w	r3, #13
 80136ca:	d102      	bne.n	80136d2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80136cc:	f06f 030c 	mvn.w	r3, #12
 80136d0:	e006      	b.n	80136e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	68ba      	ldr	r2, [r7, #8]
 80136d6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80136d8:	f06f 0304 	mvn.w	r3, #4
 80136dc:	e000      	b.n	80136e0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80136de:	2300      	movs	r3, #0
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	3714      	adds	r7, #20
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd90      	pop	{r4, r7, pc}
 80136e8:	0801c940 	.word	0x0801c940
 80136ec:	0801ce50 	.word	0x0801ce50
 80136f0:	0801c984 	.word	0x0801c984

080136f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b084      	sub	sp, #16
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80136fc:	e007      	b.n	801370e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f000 f809 	bl	801371c <tcp_seg_free>
    seg = next;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d1f4      	bne.n	80136fe <tcp_segs_free+0xa>
  }
}
 8013714:	bf00      	nop
 8013716:	3710      	adds	r7, #16
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}

0801371c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d00c      	beq.n	8013744 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d004      	beq.n	801373c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	4618      	mov	r0, r3
 8013738:	f7fe fc12 	bl	8011f60 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801373c:	6879      	ldr	r1, [r7, #4]
 801373e:	2003      	movs	r0, #3
 8013740:	f7fd fde6 	bl	8011310 <memp_free>
  }
}
 8013744:	bf00      	nop
 8013746:	3708      	adds	r7, #8
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b084      	sub	sp, #16
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d106      	bne.n	8013768 <tcp_seg_copy+0x1c>
 801375a:	4b0f      	ldr	r3, [pc, #60]	; (8013798 <tcp_seg_copy+0x4c>)
 801375c:	f240 6282 	movw	r2, #1666	; 0x682
 8013760:	490e      	ldr	r1, [pc, #56]	; (801379c <tcp_seg_copy+0x50>)
 8013762:	480f      	ldr	r0, [pc, #60]	; (80137a0 <tcp_seg_copy+0x54>)
 8013764:	f007 fb5c 	bl	801ae20 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013768:	2003      	movs	r0, #3
 801376a:	f7fd fd7f 	bl	801126c <memp_malloc>
 801376e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d101      	bne.n	801377a <tcp_seg_copy+0x2e>
    return NULL;
 8013776:	2300      	movs	r3, #0
 8013778:	e00a      	b.n	8013790 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801377a:	2210      	movs	r2, #16
 801377c:	6879      	ldr	r1, [r7, #4]
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	f007 fb3b 	bl	801adfa <memcpy>
  pbuf_ref(cseg->p);
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	4618      	mov	r0, r3
 801378a:	f7fe fc8f 	bl	80120ac <pbuf_ref>
  return cseg;
 801378e:	68fb      	ldr	r3, [r7, #12]
}
 8013790:	4618      	mov	r0, r3
 8013792:	3710      	adds	r7, #16
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}
 8013798:	0801c940 	.word	0x0801c940
 801379c:	0801ce94 	.word	0x0801ce94
 80137a0:	0801c984 	.word	0x0801c984

080137a4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
 80137b0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d109      	bne.n	80137cc <tcp_recv_null+0x28>
 80137b8:	4b12      	ldr	r3, [pc, #72]	; (8013804 <tcp_recv_null+0x60>)
 80137ba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80137be:	4912      	ldr	r1, [pc, #72]	; (8013808 <tcp_recv_null+0x64>)
 80137c0:	4812      	ldr	r0, [pc, #72]	; (801380c <tcp_recv_null+0x68>)
 80137c2:	f007 fb2d 	bl	801ae20 <iprintf>
 80137c6:	f06f 030f 	mvn.w	r3, #15
 80137ca:	e016      	b.n	80137fa <tcp_recv_null+0x56>

  if (p != NULL) {
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d009      	beq.n	80137e6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	891b      	ldrh	r3, [r3, #8]
 80137d6:	4619      	mov	r1, r3
 80137d8:	68b8      	ldr	r0, [r7, #8]
 80137da:	f7ff fb1d 	bl	8012e18 <tcp_recved>
    pbuf_free(p);
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f7fe fbbe 	bl	8011f60 <pbuf_free>
 80137e4:	e008      	b.n	80137f8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80137e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d104      	bne.n	80137f8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80137ee:	68b8      	ldr	r0, [r7, #8]
 80137f0:	f7ff f9c2 	bl	8012b78 <tcp_close>
 80137f4:	4603      	mov	r3, r0
 80137f6:	e000      	b.n	80137fa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80137f8:	2300      	movs	r3, #0
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3710      	adds	r7, #16
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
 8013802:	bf00      	nop
 8013804:	0801c940 	.word	0x0801c940
 8013808:	0801ceb0 	.word	0x0801ceb0
 801380c:	0801c984 	.word	0x0801c984

08013810 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b086      	sub	sp, #24
 8013814:	af00      	add	r7, sp, #0
 8013816:	4603      	mov	r3, r0
 8013818:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801381e:	2b00      	cmp	r3, #0
 8013820:	db01      	blt.n	8013826 <tcp_kill_prio+0x16>
 8013822:	79fb      	ldrb	r3, [r7, #7]
 8013824:	e000      	b.n	8013828 <tcp_kill_prio+0x18>
 8013826:	237f      	movs	r3, #127	; 0x7f
 8013828:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801382a:	7afb      	ldrb	r3, [r7, #11]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d034      	beq.n	801389a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013830:	7afb      	ldrb	r3, [r7, #11]
 8013832:	3b01      	subs	r3, #1
 8013834:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801383a:	2300      	movs	r3, #0
 801383c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801383e:	4b19      	ldr	r3, [pc, #100]	; (80138a4 <tcp_kill_prio+0x94>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	617b      	str	r3, [r7, #20]
 8013844:	e01f      	b.n	8013886 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	7d5b      	ldrb	r3, [r3, #21]
 801384a:	7afa      	ldrb	r2, [r7, #11]
 801384c:	429a      	cmp	r2, r3
 801384e:	d80c      	bhi.n	801386a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013854:	7afa      	ldrb	r2, [r7, #11]
 8013856:	429a      	cmp	r2, r3
 8013858:	d112      	bne.n	8013880 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801385a:	4b13      	ldr	r3, [pc, #76]	; (80138a8 <tcp_kill_prio+0x98>)
 801385c:	681a      	ldr	r2, [r3, #0]
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	6a1b      	ldr	r3, [r3, #32]
 8013862:	1ad3      	subs	r3, r2, r3
 8013864:	68fa      	ldr	r2, [r7, #12]
 8013866:	429a      	cmp	r2, r3
 8013868:	d80a      	bhi.n	8013880 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801386a:	4b0f      	ldr	r3, [pc, #60]	; (80138a8 <tcp_kill_prio+0x98>)
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	6a1b      	ldr	r3, [r3, #32]
 8013872:	1ad3      	subs	r3, r2, r3
 8013874:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	7d5b      	ldrb	r3, [r3, #21]
 801387e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	68db      	ldr	r3, [r3, #12]
 8013884:	617b      	str	r3, [r7, #20]
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d1dc      	bne.n	8013846 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d004      	beq.n	801389c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013892:	6938      	ldr	r0, [r7, #16]
 8013894:	f7ff fa5a 	bl	8012d4c <tcp_abort>
 8013898:	e000      	b.n	801389c <tcp_kill_prio+0x8c>
    return;
 801389a:	bf00      	nop
  }
}
 801389c:	3718      	adds	r7, #24
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	2000b4c4 	.word	0x2000b4c4
 80138a8:	2000b4c8 	.word	0x2000b4c8

080138ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b086      	sub	sp, #24
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	4603      	mov	r3, r0
 80138b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80138b6:	79fb      	ldrb	r3, [r7, #7]
 80138b8:	2b08      	cmp	r3, #8
 80138ba:	d009      	beq.n	80138d0 <tcp_kill_state+0x24>
 80138bc:	79fb      	ldrb	r3, [r7, #7]
 80138be:	2b09      	cmp	r3, #9
 80138c0:	d006      	beq.n	80138d0 <tcp_kill_state+0x24>
 80138c2:	4b1a      	ldr	r3, [pc, #104]	; (801392c <tcp_kill_state+0x80>)
 80138c4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80138c8:	4919      	ldr	r1, [pc, #100]	; (8013930 <tcp_kill_state+0x84>)
 80138ca:	481a      	ldr	r0, [pc, #104]	; (8013934 <tcp_kill_state+0x88>)
 80138cc:	f007 faa8 	bl	801ae20 <iprintf>

  inactivity = 0;
 80138d0:	2300      	movs	r3, #0
 80138d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80138d4:	2300      	movs	r3, #0
 80138d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138d8:	4b17      	ldr	r3, [pc, #92]	; (8013938 <tcp_kill_state+0x8c>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	617b      	str	r3, [r7, #20]
 80138de:	e017      	b.n	8013910 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	7d1b      	ldrb	r3, [r3, #20]
 80138e4:	79fa      	ldrb	r2, [r7, #7]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d10f      	bne.n	801390a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80138ea:	4b14      	ldr	r3, [pc, #80]	; (801393c <tcp_kill_state+0x90>)
 80138ec:	681a      	ldr	r2, [r3, #0]
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	6a1b      	ldr	r3, [r3, #32]
 80138f2:	1ad3      	subs	r3, r2, r3
 80138f4:	68fa      	ldr	r2, [r7, #12]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d807      	bhi.n	801390a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80138fa:	4b10      	ldr	r3, [pc, #64]	; (801393c <tcp_kill_state+0x90>)
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	6a1b      	ldr	r3, [r3, #32]
 8013902:	1ad3      	subs	r3, r2, r3
 8013904:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	68db      	ldr	r3, [r3, #12]
 801390e:	617b      	str	r3, [r7, #20]
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d1e4      	bne.n	80138e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d003      	beq.n	8013924 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801391c:	2100      	movs	r1, #0
 801391e:	6938      	ldr	r0, [r7, #16]
 8013920:	f7ff f956 	bl	8012bd0 <tcp_abandon>
  }
}
 8013924:	bf00      	nop
 8013926:	3718      	adds	r7, #24
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}
 801392c:	0801c940 	.word	0x0801c940
 8013930:	0801cecc 	.word	0x0801cecc
 8013934:	0801c984 	.word	0x0801c984
 8013938:	2000b4c4 	.word	0x2000b4c4
 801393c:	2000b4c8 	.word	0x2000b4c8

08013940 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801394a:	2300      	movs	r3, #0
 801394c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801394e:	4b12      	ldr	r3, [pc, #72]	; (8013998 <tcp_kill_timewait+0x58>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	60fb      	str	r3, [r7, #12]
 8013954:	e012      	b.n	801397c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013956:	4b11      	ldr	r3, [pc, #68]	; (801399c <tcp_kill_timewait+0x5c>)
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	6a1b      	ldr	r3, [r3, #32]
 801395e:	1ad3      	subs	r3, r2, r3
 8013960:	687a      	ldr	r2, [r7, #4]
 8013962:	429a      	cmp	r2, r3
 8013964:	d807      	bhi.n	8013976 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013966:	4b0d      	ldr	r3, [pc, #52]	; (801399c <tcp_kill_timewait+0x5c>)
 8013968:	681a      	ldr	r2, [r3, #0]
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	6a1b      	ldr	r3, [r3, #32]
 801396e:	1ad3      	subs	r3, r2, r3
 8013970:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	68db      	ldr	r3, [r3, #12]
 801397a:	60fb      	str	r3, [r7, #12]
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d1e9      	bne.n	8013956 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d002      	beq.n	801398e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013988:	68b8      	ldr	r0, [r7, #8]
 801398a:	f7ff f9df 	bl	8012d4c <tcp_abort>
  }
}
 801398e:	bf00      	nop
 8013990:	3710      	adds	r7, #16
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	2000b4d4 	.word	0x2000b4d4
 801399c:	2000b4c8 	.word	0x2000b4c8

080139a0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b082      	sub	sp, #8
 80139a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80139a6:	4b10      	ldr	r3, [pc, #64]	; (80139e8 <tcp_handle_closepend+0x48>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80139ac:	e014      	b.n	80139d8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	8b5b      	ldrh	r3, [r3, #26]
 80139b8:	f003 0308 	and.w	r3, r3, #8
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d009      	beq.n	80139d4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	8b5b      	ldrh	r3, [r3, #26]
 80139c4:	f023 0308 	bic.w	r3, r3, #8
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f7ff f86c 	bl	8012aac <tcp_close_shutdown_fin>
    }
    pcb = next;
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d1e7      	bne.n	80139ae <tcp_handle_closepend+0xe>
  }
}
 80139de:	bf00      	nop
 80139e0:	3708      	adds	r7, #8
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
 80139e6:	bf00      	nop
 80139e8:	2000b4c4 	.word	0x2000b4c4

080139ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b084      	sub	sp, #16
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	4603      	mov	r3, r0
 80139f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80139f6:	2001      	movs	r0, #1
 80139f8:	f7fd fc38 	bl	801126c <memp_malloc>
 80139fc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d126      	bne.n	8013a52 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013a04:	f7ff ffcc 	bl	80139a0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013a08:	f7ff ff9a 	bl	8013940 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a0c:	2001      	movs	r0, #1
 8013a0e:	f7fd fc2d 	bl	801126c <memp_malloc>
 8013a12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d11b      	bne.n	8013a52 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013a1a:	2009      	movs	r0, #9
 8013a1c:	f7ff ff46 	bl	80138ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a20:	2001      	movs	r0, #1
 8013a22:	f7fd fc23 	bl	801126c <memp_malloc>
 8013a26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d111      	bne.n	8013a52 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013a2e:	2008      	movs	r0, #8
 8013a30:	f7ff ff3c 	bl	80138ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a34:	2001      	movs	r0, #1
 8013a36:	f7fd fc19 	bl	801126c <memp_malloc>
 8013a3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d107      	bne.n	8013a52 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013a42:	79fb      	ldrb	r3, [r7, #7]
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7ff fee3 	bl	8013810 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a4a:	2001      	movs	r0, #1
 8013a4c:	f7fd fc0e 	bl	801126c <memp_malloc>
 8013a50:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d03f      	beq.n	8013ad8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013a58:	229c      	movs	r2, #156	; 0x9c
 8013a5a:	2100      	movs	r1, #0
 8013a5c:	68f8      	ldr	r0, [r7, #12]
 8013a5e:	f007 f9d7 	bl	801ae10 <memset>
    pcb->prio = prio;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	79fa      	ldrb	r2, [r7, #7]
 8013a66:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013a6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013a78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	22ff      	movs	r2, #255	; 0xff
 8013a86:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013a8e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2206      	movs	r2, #6
 8013a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2206      	movs	r2, #6
 8013a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013aa4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	2201      	movs	r2, #1
 8013aaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013aae:	4b0d      	ldr	r3, [pc, #52]	; (8013ae4 <tcp_alloc+0xf8>)
 8013ab0:	681a      	ldr	r2, [r3, #0]
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013ab6:	4b0c      	ldr	r3, [pc, #48]	; (8013ae8 <tcp_alloc+0xfc>)
 8013ab8:	781a      	ldrb	r2, [r3, #0]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013ac4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	4a08      	ldr	r2, [pc, #32]	; (8013aec <tcp_alloc+0x100>)
 8013acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	4a07      	ldr	r2, [pc, #28]	; (8013af0 <tcp_alloc+0x104>)
 8013ad4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
 8013ae2:	bf00      	nop
 8013ae4:	2000b4c8 	.word	0x2000b4c8
 8013ae8:	20004562 	.word	0x20004562
 8013aec:	080137a5 	.word	0x080137a5
 8013af0:	006ddd00 	.word	0x006ddd00

08013af4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d107      	bne.n	8013b12 <tcp_pcb_purge+0x1e>
 8013b02:	4b21      	ldr	r3, [pc, #132]	; (8013b88 <tcp_pcb_purge+0x94>)
 8013b04:	f640 0251 	movw	r2, #2129	; 0x851
 8013b08:	4920      	ldr	r1, [pc, #128]	; (8013b8c <tcp_pcb_purge+0x98>)
 8013b0a:	4821      	ldr	r0, [pc, #132]	; (8013b90 <tcp_pcb_purge+0x9c>)
 8013b0c:	f007 f988 	bl	801ae20 <iprintf>
 8013b10:	e037      	b.n	8013b82 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	7d1b      	ldrb	r3, [r3, #20]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d033      	beq.n	8013b82 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013b1e:	2b0a      	cmp	r3, #10
 8013b20:	d02f      	beq.n	8013b82 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d02b      	beq.n	8013b82 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d007      	beq.n	8013b42 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7fe fa12 	bl	8011f60 <pbuf_free>
      pcb->refused_data = NULL;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2200      	movs	r2, #0
 8013b40:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d002      	beq.n	8013b50 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f000 f986 	bl	8013e5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b56:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7ff fdc9 	bl	80136f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7ff fdc4 	bl	80136f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	66da      	str	r2, [r3, #108]	; 0x6c
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	0801c940 	.word	0x0801c940
 8013b8c:	0801cf8c 	.word	0x0801cf8c
 8013b90:	0801c984 	.word	0x0801c984

08013b94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b084      	sub	sp, #16
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d106      	bne.n	8013bb2 <tcp_pcb_remove+0x1e>
 8013ba4:	4b3e      	ldr	r3, [pc, #248]	; (8013ca0 <tcp_pcb_remove+0x10c>)
 8013ba6:	f640 0283 	movw	r2, #2179	; 0x883
 8013baa:	493e      	ldr	r1, [pc, #248]	; (8013ca4 <tcp_pcb_remove+0x110>)
 8013bac:	483e      	ldr	r0, [pc, #248]	; (8013ca8 <tcp_pcb_remove+0x114>)
 8013bae:	f007 f937 	bl	801ae20 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d106      	bne.n	8013bc6 <tcp_pcb_remove+0x32>
 8013bb8:	4b39      	ldr	r3, [pc, #228]	; (8013ca0 <tcp_pcb_remove+0x10c>)
 8013bba:	f640 0284 	movw	r2, #2180	; 0x884
 8013bbe:	493b      	ldr	r1, [pc, #236]	; (8013cac <tcp_pcb_remove+0x118>)
 8013bc0:	4839      	ldr	r0, [pc, #228]	; (8013ca8 <tcp_pcb_remove+0x114>)
 8013bc2:	f007 f92d 	bl	801ae20 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	683a      	ldr	r2, [r7, #0]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d105      	bne.n	8013bdc <tcp_pcb_remove+0x48>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	68da      	ldr	r2, [r3, #12]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	601a      	str	r2, [r3, #0]
 8013bda:	e013      	b.n	8013c04 <tcp_pcb_remove+0x70>
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	60fb      	str	r3, [r7, #12]
 8013be2:	e00c      	b.n	8013bfe <tcp_pcb_remove+0x6a>
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	68db      	ldr	r3, [r3, #12]
 8013be8:	683a      	ldr	r2, [r7, #0]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d104      	bne.n	8013bf8 <tcp_pcb_remove+0x64>
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	68da      	ldr	r2, [r3, #12]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	60da      	str	r2, [r3, #12]
 8013bf6:	e005      	b.n	8013c04 <tcp_pcb_remove+0x70>
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	68db      	ldr	r3, [r3, #12]
 8013bfc:	60fb      	str	r3, [r7, #12]
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d1ef      	bne.n	8013be4 <tcp_pcb_remove+0x50>
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	2200      	movs	r2, #0
 8013c08:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013c0a:	6838      	ldr	r0, [r7, #0]
 8013c0c:	f7ff ff72 	bl	8013af4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	7d1b      	ldrb	r3, [r3, #20]
 8013c14:	2b0a      	cmp	r3, #10
 8013c16:	d013      	beq.n	8013c40 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d00f      	beq.n	8013c40 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	8b5b      	ldrh	r3, [r3, #26]
 8013c24:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d009      	beq.n	8013c40 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	8b5b      	ldrh	r3, [r3, #26]
 8013c30:	f043 0302 	orr.w	r3, r3, #2
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013c3a:	6838      	ldr	r0, [r7, #0]
 8013c3c:	f002 ff68 	bl	8016b10 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	7d1b      	ldrb	r3, [r3, #20]
 8013c44:	2b01      	cmp	r3, #1
 8013c46:	d020      	beq.n	8013c8a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d006      	beq.n	8013c5e <tcp_pcb_remove+0xca>
 8013c50:	4b13      	ldr	r3, [pc, #76]	; (8013ca0 <tcp_pcb_remove+0x10c>)
 8013c52:	f640 0293 	movw	r2, #2195	; 0x893
 8013c56:	4916      	ldr	r1, [pc, #88]	; (8013cb0 <tcp_pcb_remove+0x11c>)
 8013c58:	4813      	ldr	r0, [pc, #76]	; (8013ca8 <tcp_pcb_remove+0x114>)
 8013c5a:	f007 f8e1 	bl	801ae20 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d006      	beq.n	8013c74 <tcp_pcb_remove+0xe0>
 8013c66:	4b0e      	ldr	r3, [pc, #56]	; (8013ca0 <tcp_pcb_remove+0x10c>)
 8013c68:	f640 0294 	movw	r2, #2196	; 0x894
 8013c6c:	4911      	ldr	r1, [pc, #68]	; (8013cb4 <tcp_pcb_remove+0x120>)
 8013c6e:	480e      	ldr	r0, [pc, #56]	; (8013ca8 <tcp_pcb_remove+0x114>)
 8013c70:	f007 f8d6 	bl	801ae20 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d006      	beq.n	8013c8a <tcp_pcb_remove+0xf6>
 8013c7c:	4b08      	ldr	r3, [pc, #32]	; (8013ca0 <tcp_pcb_remove+0x10c>)
 8013c7e:	f640 0296 	movw	r2, #2198	; 0x896
 8013c82:	490d      	ldr	r1, [pc, #52]	; (8013cb8 <tcp_pcb_remove+0x124>)
 8013c84:	4808      	ldr	r0, [pc, #32]	; (8013ca8 <tcp_pcb_remove+0x114>)
 8013c86:	f007 f8cb 	bl	801ae20 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	2200      	movs	r2, #0
 8013c94:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013c96:	bf00      	nop
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	0801c940 	.word	0x0801c940
 8013ca4:	0801cfa8 	.word	0x0801cfa8
 8013ca8:	0801c984 	.word	0x0801c984
 8013cac:	0801cfc4 	.word	0x0801cfc4
 8013cb0:	0801cfe4 	.word	0x0801cfe4
 8013cb4:	0801cffc 	.word	0x0801cffc
 8013cb8:	0801d018 	.word	0x0801d018

08013cbc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d106      	bne.n	8013cd8 <tcp_next_iss+0x1c>
 8013cca:	4b0a      	ldr	r3, [pc, #40]	; (8013cf4 <tcp_next_iss+0x38>)
 8013ccc:	f640 02af 	movw	r2, #2223	; 0x8af
 8013cd0:	4909      	ldr	r1, [pc, #36]	; (8013cf8 <tcp_next_iss+0x3c>)
 8013cd2:	480a      	ldr	r0, [pc, #40]	; (8013cfc <tcp_next_iss+0x40>)
 8013cd4:	f007 f8a4 	bl	801ae20 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013cd8:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <tcp_next_iss+0x44>)
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	4b09      	ldr	r3, [pc, #36]	; (8013d04 <tcp_next_iss+0x48>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4413      	add	r3, r2
 8013ce2:	4a07      	ldr	r2, [pc, #28]	; (8013d00 <tcp_next_iss+0x44>)
 8013ce4:	6013      	str	r3, [r2, #0]
  return iss;
 8013ce6:	4b06      	ldr	r3, [pc, #24]	; (8013d00 <tcp_next_iss+0x44>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3708      	adds	r7, #8
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	0801c940 	.word	0x0801c940
 8013cf8:	0801d030 	.word	0x0801d030
 8013cfc:	0801c984 	.word	0x0801c984
 8013d00:	20000054 	.word	0x20000054
 8013d04:	2000b4c8 	.word	0x2000b4c8

08013d08 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b086      	sub	sp, #24
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	4603      	mov	r3, r0
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
 8013d14:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d106      	bne.n	8013d2a <tcp_eff_send_mss_netif+0x22>
 8013d1c:	4b14      	ldr	r3, [pc, #80]	; (8013d70 <tcp_eff_send_mss_netif+0x68>)
 8013d1e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013d22:	4914      	ldr	r1, [pc, #80]	; (8013d74 <tcp_eff_send_mss_netif+0x6c>)
 8013d24:	4814      	ldr	r0, [pc, #80]	; (8013d78 <tcp_eff_send_mss_netif+0x70>)
 8013d26:	f007 f87b 	bl	801ae20 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d101      	bne.n	8013d34 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013d30:	89fb      	ldrh	r3, [r7, #14]
 8013d32:	e019      	b.n	8013d68 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	8c1b      	ldrh	r3, [r3, #32]
 8013d38:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013d3a:	8afb      	ldrh	r3, [r7, #22]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d012      	beq.n	8013d66 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013d40:	2328      	movs	r3, #40	; 0x28
 8013d42:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013d44:	8afa      	ldrh	r2, [r7, #22]
 8013d46:	8abb      	ldrh	r3, [r7, #20]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d904      	bls.n	8013d56 <tcp_eff_send_mss_netif+0x4e>
 8013d4c:	8afa      	ldrh	r2, [r7, #22]
 8013d4e:	8abb      	ldrh	r3, [r7, #20]
 8013d50:	1ad3      	subs	r3, r2, r3
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	e000      	b.n	8013d58 <tcp_eff_send_mss_netif+0x50>
 8013d56:	2300      	movs	r3, #0
 8013d58:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013d5a:	8a7a      	ldrh	r2, [r7, #18]
 8013d5c:	89fb      	ldrh	r3, [r7, #14]
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	bf28      	it	cs
 8013d62:	4613      	movcs	r3, r2
 8013d64:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013d66:	89fb      	ldrh	r3, [r7, #14]
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3718      	adds	r7, #24
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	0801c940 	.word	0x0801c940
 8013d74:	0801d04c 	.word	0x0801d04c
 8013d78:	0801c984 	.word	0x0801c984

08013d7c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d119      	bne.n	8013dc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013d90:	4b10      	ldr	r3, [pc, #64]	; (8013dd4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013d92:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013d96:	4910      	ldr	r1, [pc, #64]	; (8013dd8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013d98:	4810      	ldr	r0, [pc, #64]	; (8013ddc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013d9a:	f007 f841 	bl	801ae20 <iprintf>

  while (pcb != NULL) {
 8013d9e:	e011      	b.n	8013dc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	681a      	ldr	r2, [r3, #0]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d108      	bne.n	8013dbe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f7fe ffca 	bl	8012d4c <tcp_abort>
      pcb = next;
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	60fb      	str	r3, [r7, #12]
 8013dbc:	e002      	b.n	8013dc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	68db      	ldr	r3, [r3, #12]
 8013dc2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d1ea      	bne.n	8013da0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013dca:	bf00      	nop
 8013dcc:	3710      	adds	r7, #16
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	0801c940 	.word	0x0801c940
 8013dd8:	0801d074 	.word	0x0801d074
 8013ddc:	0801c984 	.word	0x0801c984

08013de0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d02a      	beq.n	8013e46 <tcp_netif_ip_addr_changed+0x66>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d026      	beq.n	8013e46 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013df8:	4b15      	ldr	r3, [pc, #84]	; (8013e50 <tcp_netif_ip_addr_changed+0x70>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f7ff ffbc 	bl	8013d7c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013e04:	4b13      	ldr	r3, [pc, #76]	; (8013e54 <tcp_netif_ip_addr_changed+0x74>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	4619      	mov	r1, r3
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f7ff ffb6 	bl	8013d7c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d017      	beq.n	8013e46 <tcp_netif_ip_addr_changed+0x66>
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d013      	beq.n	8013e46 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013e1e:	4b0e      	ldr	r3, [pc, #56]	; (8013e58 <tcp_netif_ip_addr_changed+0x78>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	60fb      	str	r3, [r7, #12]
 8013e24:	e00c      	b.n	8013e40 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d103      	bne.n	8013e3a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	681a      	ldr	r2, [r3, #0]
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	60fb      	str	r3, [r7, #12]
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d1ef      	bne.n	8013e26 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013e46:	bf00      	nop
 8013e48:	3710      	adds	r7, #16
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	2000b4c4 	.word	0x2000b4c4
 8013e54:	2000b4d0 	.word	0x2000b4d0
 8013e58:	2000b4cc 	.word	0x2000b4cc

08013e5c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b082      	sub	sp, #8
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d007      	beq.n	8013e7c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7ff fc3f 	bl	80136f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013e7c:	bf00      	nop
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013e84:	b590      	push	{r4, r7, lr}
 8013e86:	b08d      	sub	sp, #52	; 0x34
 8013e88:	af04      	add	r7, sp, #16
 8013e8a:	6078      	str	r0, [r7, #4]
 8013e8c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d105      	bne.n	8013ea0 <tcp_input+0x1c>
 8013e94:	4b9b      	ldr	r3, [pc, #620]	; (8014104 <tcp_input+0x280>)
 8013e96:	2283      	movs	r2, #131	; 0x83
 8013e98:	499b      	ldr	r1, [pc, #620]	; (8014108 <tcp_input+0x284>)
 8013e9a:	489c      	ldr	r0, [pc, #624]	; (801410c <tcp_input+0x288>)
 8013e9c:	f006 ffc0 	bl	801ae20 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	4a9a      	ldr	r2, [pc, #616]	; (8014110 <tcp_input+0x28c>)
 8013ea6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	895b      	ldrh	r3, [r3, #10]
 8013eac:	2b13      	cmp	r3, #19
 8013eae:	f240 83c4 	bls.w	801463a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013eb2:	4b98      	ldr	r3, [pc, #608]	; (8014114 <tcp_input+0x290>)
 8013eb4:	695a      	ldr	r2, [r3, #20]
 8013eb6:	4b97      	ldr	r3, [pc, #604]	; (8014114 <tcp_input+0x290>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	4619      	mov	r1, r3
 8013ebc:	4610      	mov	r0, r2
 8013ebe:	f005 ff07 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f040 83ba 	bne.w	801463e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013eca:	4b92      	ldr	r3, [pc, #584]	; (8014114 <tcp_input+0x290>)
 8013ecc:	695b      	ldr	r3, [r3, #20]
 8013ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013ed2:	2be0      	cmp	r3, #224	; 0xe0
 8013ed4:	f000 83b3 	beq.w	801463e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013ed8:	4b8d      	ldr	r3, [pc, #564]	; (8014110 <tcp_input+0x28c>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	899b      	ldrh	r3, [r3, #12]
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7fc fa41 	bl	8010368 <lwip_htons>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	0b1b      	lsrs	r3, r3, #12
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	009b      	lsls	r3, r3, #2
 8013ef0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013ef2:	7cbb      	ldrb	r3, [r7, #18]
 8013ef4:	2b13      	cmp	r3, #19
 8013ef6:	f240 83a2 	bls.w	801463e <tcp_input+0x7ba>
 8013efa:	7cbb      	ldrb	r3, [r7, #18]
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	891b      	ldrh	r3, [r3, #8]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	f200 839b 	bhi.w	801463e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013f08:	7cbb      	ldrb	r3, [r7, #18]
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	3b14      	subs	r3, #20
 8013f0e:	b29a      	uxth	r2, r3
 8013f10:	4b81      	ldr	r3, [pc, #516]	; (8014118 <tcp_input+0x294>)
 8013f12:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013f14:	4b81      	ldr	r3, [pc, #516]	; (801411c <tcp_input+0x298>)
 8013f16:	2200      	movs	r2, #0
 8013f18:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	895a      	ldrh	r2, [r3, #10]
 8013f1e:	7cbb      	ldrb	r3, [r7, #18]
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d309      	bcc.n	8013f3a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013f26:	4b7c      	ldr	r3, [pc, #496]	; (8014118 <tcp_input+0x294>)
 8013f28:	881a      	ldrh	r2, [r3, #0]
 8013f2a:	4b7d      	ldr	r3, [pc, #500]	; (8014120 <tcp_input+0x29c>)
 8013f2c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013f2e:	7cbb      	ldrb	r3, [r7, #18]
 8013f30:	4619      	mov	r1, r3
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f7fd ff8e 	bl	8011e54 <pbuf_remove_header>
 8013f38:	e04e      	b.n	8013fd8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d105      	bne.n	8013f4e <tcp_input+0xca>
 8013f42:	4b70      	ldr	r3, [pc, #448]	; (8014104 <tcp_input+0x280>)
 8013f44:	22c2      	movs	r2, #194	; 0xc2
 8013f46:	4977      	ldr	r1, [pc, #476]	; (8014124 <tcp_input+0x2a0>)
 8013f48:	4870      	ldr	r0, [pc, #448]	; (801410c <tcp_input+0x288>)
 8013f4a:	f006 ff69 	bl	801ae20 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013f4e:	2114      	movs	r1, #20
 8013f50:	6878      	ldr	r0, [r7, #4]
 8013f52:	f7fd ff7f 	bl	8011e54 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	895a      	ldrh	r2, [r3, #10]
 8013f5a:	4b71      	ldr	r3, [pc, #452]	; (8014120 <tcp_input+0x29c>)
 8013f5c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013f5e:	4b6e      	ldr	r3, [pc, #440]	; (8014118 <tcp_input+0x294>)
 8013f60:	881a      	ldrh	r2, [r3, #0]
 8013f62:	4b6f      	ldr	r3, [pc, #444]	; (8014120 <tcp_input+0x29c>)
 8013f64:	881b      	ldrh	r3, [r3, #0]
 8013f66:	1ad3      	subs	r3, r2, r3
 8013f68:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013f6a:	4b6d      	ldr	r3, [pc, #436]	; (8014120 <tcp_input+0x29c>)
 8013f6c:	881b      	ldrh	r3, [r3, #0]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7fd ff6f 	bl	8011e54 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	895b      	ldrh	r3, [r3, #10]
 8013f7c:	8a3a      	ldrh	r2, [r7, #16]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	f200 835f 	bhi.w	8014642 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	4a64      	ldr	r2, [pc, #400]	; (801411c <tcp_input+0x298>)
 8013f8c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	8a3a      	ldrh	r2, [r7, #16]
 8013f94:	4611      	mov	r1, r2
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7fd ff5c 	bl	8011e54 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	891a      	ldrh	r2, [r3, #8]
 8013fa0:	8a3b      	ldrh	r3, [r7, #16]
 8013fa2:	1ad3      	subs	r3, r2, r3
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	895b      	ldrh	r3, [r3, #10]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d005      	beq.n	8013fbe <tcp_input+0x13a>
 8013fb2:	4b54      	ldr	r3, [pc, #336]	; (8014104 <tcp_input+0x280>)
 8013fb4:	22df      	movs	r2, #223	; 0xdf
 8013fb6:	495c      	ldr	r1, [pc, #368]	; (8014128 <tcp_input+0x2a4>)
 8013fb8:	4854      	ldr	r0, [pc, #336]	; (801410c <tcp_input+0x288>)
 8013fba:	f006 ff31 	bl	801ae20 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	891a      	ldrh	r2, [r3, #8]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	891b      	ldrh	r3, [r3, #8]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d005      	beq.n	8013fd8 <tcp_input+0x154>
 8013fcc:	4b4d      	ldr	r3, [pc, #308]	; (8014104 <tcp_input+0x280>)
 8013fce:	22e0      	movs	r2, #224	; 0xe0
 8013fd0:	4956      	ldr	r1, [pc, #344]	; (801412c <tcp_input+0x2a8>)
 8013fd2:	484e      	ldr	r0, [pc, #312]	; (801410c <tcp_input+0x288>)
 8013fd4:	f006 ff24 	bl	801ae20 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013fd8:	4b4d      	ldr	r3, [pc, #308]	; (8014110 <tcp_input+0x28c>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	881b      	ldrh	r3, [r3, #0]
 8013fde:	b29a      	uxth	r2, r3
 8013fe0:	4b4b      	ldr	r3, [pc, #300]	; (8014110 <tcp_input+0x28c>)
 8013fe2:	681c      	ldr	r4, [r3, #0]
 8013fe4:	4610      	mov	r0, r2
 8013fe6:	f7fc f9bf 	bl	8010368 <lwip_htons>
 8013fea:	4603      	mov	r3, r0
 8013fec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013fee:	4b48      	ldr	r3, [pc, #288]	; (8014110 <tcp_input+0x28c>)
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	885b      	ldrh	r3, [r3, #2]
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	4b46      	ldr	r3, [pc, #280]	; (8014110 <tcp_input+0x28c>)
 8013ff8:	681c      	ldr	r4, [r3, #0]
 8013ffa:	4610      	mov	r0, r2
 8013ffc:	f7fc f9b4 	bl	8010368 <lwip_htons>
 8014000:	4603      	mov	r3, r0
 8014002:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014004:	4b42      	ldr	r3, [pc, #264]	; (8014110 <tcp_input+0x28c>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	685a      	ldr	r2, [r3, #4]
 801400a:	4b41      	ldr	r3, [pc, #260]	; (8014110 <tcp_input+0x28c>)
 801400c:	681c      	ldr	r4, [r3, #0]
 801400e:	4610      	mov	r0, r2
 8014010:	f7fc f9bf 	bl	8010392 <lwip_htonl>
 8014014:	4603      	mov	r3, r0
 8014016:	6063      	str	r3, [r4, #4]
 8014018:	6863      	ldr	r3, [r4, #4]
 801401a:	4a45      	ldr	r2, [pc, #276]	; (8014130 <tcp_input+0x2ac>)
 801401c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801401e:	4b3c      	ldr	r3, [pc, #240]	; (8014110 <tcp_input+0x28c>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	689a      	ldr	r2, [r3, #8]
 8014024:	4b3a      	ldr	r3, [pc, #232]	; (8014110 <tcp_input+0x28c>)
 8014026:	681c      	ldr	r4, [r3, #0]
 8014028:	4610      	mov	r0, r2
 801402a:	f7fc f9b2 	bl	8010392 <lwip_htonl>
 801402e:	4603      	mov	r3, r0
 8014030:	60a3      	str	r3, [r4, #8]
 8014032:	68a3      	ldr	r3, [r4, #8]
 8014034:	4a3f      	ldr	r2, [pc, #252]	; (8014134 <tcp_input+0x2b0>)
 8014036:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014038:	4b35      	ldr	r3, [pc, #212]	; (8014110 <tcp_input+0x28c>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	89db      	ldrh	r3, [r3, #14]
 801403e:	b29a      	uxth	r2, r3
 8014040:	4b33      	ldr	r3, [pc, #204]	; (8014110 <tcp_input+0x28c>)
 8014042:	681c      	ldr	r4, [r3, #0]
 8014044:	4610      	mov	r0, r2
 8014046:	f7fc f98f 	bl	8010368 <lwip_htons>
 801404a:	4603      	mov	r3, r0
 801404c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801404e:	4b30      	ldr	r3, [pc, #192]	; (8014110 <tcp_input+0x28c>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	899b      	ldrh	r3, [r3, #12]
 8014054:	b29b      	uxth	r3, r3
 8014056:	4618      	mov	r0, r3
 8014058:	f7fc f986 	bl	8010368 <lwip_htons>
 801405c:	4603      	mov	r3, r0
 801405e:	b2db      	uxtb	r3, r3
 8014060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014064:	b2da      	uxtb	r2, r3
 8014066:	4b34      	ldr	r3, [pc, #208]	; (8014138 <tcp_input+0x2b4>)
 8014068:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	891a      	ldrh	r2, [r3, #8]
 801406e:	4b33      	ldr	r3, [pc, #204]	; (801413c <tcp_input+0x2b8>)
 8014070:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014072:	4b31      	ldr	r3, [pc, #196]	; (8014138 <tcp_input+0x2b4>)
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	f003 0303 	and.w	r3, r3, #3
 801407a:	2b00      	cmp	r3, #0
 801407c:	d00c      	beq.n	8014098 <tcp_input+0x214>
    tcplen++;
 801407e:	4b2f      	ldr	r3, [pc, #188]	; (801413c <tcp_input+0x2b8>)
 8014080:	881b      	ldrh	r3, [r3, #0]
 8014082:	3301      	adds	r3, #1
 8014084:	b29a      	uxth	r2, r3
 8014086:	4b2d      	ldr	r3, [pc, #180]	; (801413c <tcp_input+0x2b8>)
 8014088:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	891a      	ldrh	r2, [r3, #8]
 801408e:	4b2b      	ldr	r3, [pc, #172]	; (801413c <tcp_input+0x2b8>)
 8014090:	881b      	ldrh	r3, [r3, #0]
 8014092:	429a      	cmp	r2, r3
 8014094:	f200 82d7 	bhi.w	8014646 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014098:	2300      	movs	r3, #0
 801409a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801409c:	4b28      	ldr	r3, [pc, #160]	; (8014140 <tcp_input+0x2bc>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	61fb      	str	r3, [r7, #28]
 80140a2:	e09d      	b.n	80141e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80140a4:	69fb      	ldr	r3, [r7, #28]
 80140a6:	7d1b      	ldrb	r3, [r3, #20]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d105      	bne.n	80140b8 <tcp_input+0x234>
 80140ac:	4b15      	ldr	r3, [pc, #84]	; (8014104 <tcp_input+0x280>)
 80140ae:	22fb      	movs	r2, #251	; 0xfb
 80140b0:	4924      	ldr	r1, [pc, #144]	; (8014144 <tcp_input+0x2c0>)
 80140b2:	4816      	ldr	r0, [pc, #88]	; (801410c <tcp_input+0x288>)
 80140b4:	f006 feb4 	bl	801ae20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	7d1b      	ldrb	r3, [r3, #20]
 80140bc:	2b0a      	cmp	r3, #10
 80140be:	d105      	bne.n	80140cc <tcp_input+0x248>
 80140c0:	4b10      	ldr	r3, [pc, #64]	; (8014104 <tcp_input+0x280>)
 80140c2:	22fc      	movs	r2, #252	; 0xfc
 80140c4:	4920      	ldr	r1, [pc, #128]	; (8014148 <tcp_input+0x2c4>)
 80140c6:	4811      	ldr	r0, [pc, #68]	; (801410c <tcp_input+0x288>)
 80140c8:	f006 feaa 	bl	801ae20 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80140cc:	69fb      	ldr	r3, [r7, #28]
 80140ce:	7d1b      	ldrb	r3, [r3, #20]
 80140d0:	2b01      	cmp	r3, #1
 80140d2:	d105      	bne.n	80140e0 <tcp_input+0x25c>
 80140d4:	4b0b      	ldr	r3, [pc, #44]	; (8014104 <tcp_input+0x280>)
 80140d6:	22fd      	movs	r2, #253	; 0xfd
 80140d8:	491c      	ldr	r1, [pc, #112]	; (801414c <tcp_input+0x2c8>)
 80140da:	480c      	ldr	r0, [pc, #48]	; (801410c <tcp_input+0x288>)
 80140dc:	f006 fea0 	bl	801ae20 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	7a1b      	ldrb	r3, [r3, #8]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d033      	beq.n	8014150 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80140e8:	69fb      	ldr	r3, [r7, #28]
 80140ea:	7a1a      	ldrb	r2, [r3, #8]
 80140ec:	4b09      	ldr	r3, [pc, #36]	; (8014114 <tcp_input+0x290>)
 80140ee:	685b      	ldr	r3, [r3, #4]
 80140f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80140f4:	3301      	adds	r3, #1
 80140f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d029      	beq.n	8014150 <tcp_input+0x2cc>
      prev = pcb;
 80140fc:	69fb      	ldr	r3, [r7, #28]
 80140fe:	61bb      	str	r3, [r7, #24]
      continue;
 8014100:	e06b      	b.n	80141da <tcp_input+0x356>
 8014102:	bf00      	nop
 8014104:	0801d0a8 	.word	0x0801d0a8
 8014108:	0801d0dc 	.word	0x0801d0dc
 801410c:	0801d0f4 	.word	0x0801d0f4
 8014110:	20004574 	.word	0x20004574
 8014114:	20007c68 	.word	0x20007c68
 8014118:	20004578 	.word	0x20004578
 801411c:	2000457c 	.word	0x2000457c
 8014120:	2000457a 	.word	0x2000457a
 8014124:	0801d11c 	.word	0x0801d11c
 8014128:	0801d12c 	.word	0x0801d12c
 801412c:	0801d138 	.word	0x0801d138
 8014130:	20004584 	.word	0x20004584
 8014134:	20004588 	.word	0x20004588
 8014138:	20004590 	.word	0x20004590
 801413c:	2000458e 	.word	0x2000458e
 8014140:	2000b4c4 	.word	0x2000b4c4
 8014144:	0801d158 	.word	0x0801d158
 8014148:	0801d180 	.word	0x0801d180
 801414c:	0801d1ac 	.word	0x0801d1ac
    }

    if (pcb->remote_port == tcphdr->src &&
 8014150:	69fb      	ldr	r3, [r7, #28]
 8014152:	8b1a      	ldrh	r2, [r3, #24]
 8014154:	4b94      	ldr	r3, [pc, #592]	; (80143a8 <tcp_input+0x524>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	b29b      	uxth	r3, r3
 801415c:	429a      	cmp	r2, r3
 801415e:	d13a      	bne.n	80141d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	8ada      	ldrh	r2, [r3, #22]
 8014164:	4b90      	ldr	r3, [pc, #576]	; (80143a8 <tcp_input+0x524>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	885b      	ldrh	r3, [r3, #2]
 801416a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801416c:	429a      	cmp	r2, r3
 801416e:	d132      	bne.n	80141d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	685a      	ldr	r2, [r3, #4]
 8014174:	4b8d      	ldr	r3, [pc, #564]	; (80143ac <tcp_input+0x528>)
 8014176:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014178:	429a      	cmp	r2, r3
 801417a:	d12c      	bne.n	80141d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	4b8a      	ldr	r3, [pc, #552]	; (80143ac <tcp_input+0x528>)
 8014182:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014184:	429a      	cmp	r2, r3
 8014186:	d126      	bne.n	80141d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	68db      	ldr	r3, [r3, #12]
 801418c:	69fa      	ldr	r2, [r7, #28]
 801418e:	429a      	cmp	r2, r3
 8014190:	d106      	bne.n	80141a0 <tcp_input+0x31c>
 8014192:	4b87      	ldr	r3, [pc, #540]	; (80143b0 <tcp_input+0x52c>)
 8014194:	f240 120d 	movw	r2, #269	; 0x10d
 8014198:	4986      	ldr	r1, [pc, #536]	; (80143b4 <tcp_input+0x530>)
 801419a:	4887      	ldr	r0, [pc, #540]	; (80143b8 <tcp_input+0x534>)
 801419c:	f006 fe40 	bl	801ae20 <iprintf>
      if (prev != NULL) {
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00a      	beq.n	80141bc <tcp_input+0x338>
        prev->next = pcb->next;
 80141a6:	69fb      	ldr	r3, [r7, #28]
 80141a8:	68da      	ldr	r2, [r3, #12]
 80141aa:	69bb      	ldr	r3, [r7, #24]
 80141ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80141ae:	4b83      	ldr	r3, [pc, #524]	; (80143bc <tcp_input+0x538>)
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	69fb      	ldr	r3, [r7, #28]
 80141b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80141b6:	4a81      	ldr	r2, [pc, #516]	; (80143bc <tcp_input+0x538>)
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80141bc:	69fb      	ldr	r3, [r7, #28]
 80141be:	68db      	ldr	r3, [r3, #12]
 80141c0:	69fa      	ldr	r2, [r7, #28]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d111      	bne.n	80141ea <tcp_input+0x366>
 80141c6:	4b7a      	ldr	r3, [pc, #488]	; (80143b0 <tcp_input+0x52c>)
 80141c8:	f240 1215 	movw	r2, #277	; 0x115
 80141cc:	497c      	ldr	r1, [pc, #496]	; (80143c0 <tcp_input+0x53c>)
 80141ce:	487a      	ldr	r0, [pc, #488]	; (80143b8 <tcp_input+0x534>)
 80141d0:	f006 fe26 	bl	801ae20 <iprintf>
      break;
 80141d4:	e009      	b.n	80141ea <tcp_input+0x366>
    }
    prev = pcb;
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80141da:	69fb      	ldr	r3, [r7, #28]
 80141dc:	68db      	ldr	r3, [r3, #12]
 80141de:	61fb      	str	r3, [r7, #28]
 80141e0:	69fb      	ldr	r3, [r7, #28]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	f47f af5e 	bne.w	80140a4 <tcp_input+0x220>
 80141e8:	e000      	b.n	80141ec <tcp_input+0x368>
      break;
 80141ea:	bf00      	nop
  }

  if (pcb == NULL) {
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	f040 8095 	bne.w	801431e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80141f4:	4b73      	ldr	r3, [pc, #460]	; (80143c4 <tcp_input+0x540>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	61fb      	str	r3, [r7, #28]
 80141fa:	e03f      	b.n	801427c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	7d1b      	ldrb	r3, [r3, #20]
 8014200:	2b0a      	cmp	r3, #10
 8014202:	d006      	beq.n	8014212 <tcp_input+0x38e>
 8014204:	4b6a      	ldr	r3, [pc, #424]	; (80143b0 <tcp_input+0x52c>)
 8014206:	f240 121f 	movw	r2, #287	; 0x11f
 801420a:	496f      	ldr	r1, [pc, #444]	; (80143c8 <tcp_input+0x544>)
 801420c:	486a      	ldr	r0, [pc, #424]	; (80143b8 <tcp_input+0x534>)
 801420e:	f006 fe07 	bl	801ae20 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	7a1b      	ldrb	r3, [r3, #8]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d009      	beq.n	801422e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801421a:	69fb      	ldr	r3, [r7, #28]
 801421c:	7a1a      	ldrb	r2, [r3, #8]
 801421e:	4b63      	ldr	r3, [pc, #396]	; (80143ac <tcp_input+0x528>)
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014226:	3301      	adds	r3, #1
 8014228:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801422a:	429a      	cmp	r2, r3
 801422c:	d122      	bne.n	8014274 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	8b1a      	ldrh	r2, [r3, #24]
 8014232:	4b5d      	ldr	r3, [pc, #372]	; (80143a8 <tcp_input+0x524>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	881b      	ldrh	r3, [r3, #0]
 8014238:	b29b      	uxth	r3, r3
 801423a:	429a      	cmp	r2, r3
 801423c:	d11b      	bne.n	8014276 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	8ada      	ldrh	r2, [r3, #22]
 8014242:	4b59      	ldr	r3, [pc, #356]	; (80143a8 <tcp_input+0x524>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	885b      	ldrh	r3, [r3, #2]
 8014248:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801424a:	429a      	cmp	r2, r3
 801424c:	d113      	bne.n	8014276 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	685a      	ldr	r2, [r3, #4]
 8014252:	4b56      	ldr	r3, [pc, #344]	; (80143ac <tcp_input+0x528>)
 8014254:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014256:	429a      	cmp	r2, r3
 8014258:	d10d      	bne.n	8014276 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	681a      	ldr	r2, [r3, #0]
 801425e:	4b53      	ldr	r3, [pc, #332]	; (80143ac <tcp_input+0x528>)
 8014260:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014262:	429a      	cmp	r2, r3
 8014264:	d107      	bne.n	8014276 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014266:	69f8      	ldr	r0, [r7, #28]
 8014268:	f000 fb52 	bl	8014910 <tcp_timewait_input>
        }
        pbuf_free(p);
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7fd fe77 	bl	8011f60 <pbuf_free>
        return;
 8014272:	e1ee      	b.n	8014652 <tcp_input+0x7ce>
        continue;
 8014274:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014276:	69fb      	ldr	r3, [r7, #28]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	61fb      	str	r3, [r7, #28]
 801427c:	69fb      	ldr	r3, [r7, #28]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d1bc      	bne.n	80141fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014282:	2300      	movs	r3, #0
 8014284:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014286:	4b51      	ldr	r3, [pc, #324]	; (80143cc <tcp_input+0x548>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	617b      	str	r3, [r7, #20]
 801428c:	e02a      	b.n	80142e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	7a1b      	ldrb	r3, [r3, #8]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d00c      	beq.n	80142b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	7a1a      	ldrb	r2, [r3, #8]
 801429a:	4b44      	ldr	r3, [pc, #272]	; (80143ac <tcp_input+0x528>)
 801429c:	685b      	ldr	r3, [r3, #4]
 801429e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80142a2:	3301      	adds	r3, #1
 80142a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d002      	beq.n	80142b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	61bb      	str	r3, [r7, #24]
        continue;
 80142ae:	e016      	b.n	80142de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	8ada      	ldrh	r2, [r3, #22]
 80142b4:	4b3c      	ldr	r3, [pc, #240]	; (80143a8 <tcp_input+0x524>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	885b      	ldrh	r3, [r3, #2]
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	429a      	cmp	r2, r3
 80142be:	d10c      	bne.n	80142da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	4b39      	ldr	r3, [pc, #228]	; (80143ac <tcp_input+0x528>)
 80142c6:	695b      	ldr	r3, [r3, #20]
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d00f      	beq.n	80142ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80142cc:	697b      	ldr	r3, [r7, #20]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d00d      	beq.n	80142ee <tcp_input+0x46a>
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d009      	beq.n	80142ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	68db      	ldr	r3, [r3, #12]
 80142e2:	617b      	str	r3, [r7, #20]
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d1d1      	bne.n	801428e <tcp_input+0x40a>
 80142ea:	e000      	b.n	80142ee <tcp_input+0x46a>
            break;
 80142ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d014      	beq.n	801431e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d00a      	beq.n	8014310 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	68da      	ldr	r2, [r3, #12]
 80142fe:	69bb      	ldr	r3, [r7, #24]
 8014300:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014302:	4b32      	ldr	r3, [pc, #200]	; (80143cc <tcp_input+0x548>)
 8014304:	681a      	ldr	r2, [r3, #0]
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801430a:	4a30      	ldr	r2, [pc, #192]	; (80143cc <tcp_input+0x548>)
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014310:	6978      	ldr	r0, [r7, #20]
 8014312:	f000 f9ff 	bl	8014714 <tcp_listen_input>
      }
      pbuf_free(p);
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7fd fe22 	bl	8011f60 <pbuf_free>
      return;
 801431c:	e199      	b.n	8014652 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	2b00      	cmp	r3, #0
 8014322:	f000 8160 	beq.w	80145e6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014326:	4b2a      	ldr	r3, [pc, #168]	; (80143d0 <tcp_input+0x54c>)
 8014328:	2200      	movs	r2, #0
 801432a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	891a      	ldrh	r2, [r3, #8]
 8014330:	4b27      	ldr	r3, [pc, #156]	; (80143d0 <tcp_input+0x54c>)
 8014332:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014334:	4a26      	ldr	r2, [pc, #152]	; (80143d0 <tcp_input+0x54c>)
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801433a:	4b1b      	ldr	r3, [pc, #108]	; (80143a8 <tcp_input+0x524>)
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	4a24      	ldr	r2, [pc, #144]	; (80143d0 <tcp_input+0x54c>)
 8014340:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014342:	4b24      	ldr	r3, [pc, #144]	; (80143d4 <tcp_input+0x550>)
 8014344:	2200      	movs	r2, #0
 8014346:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014348:	4b23      	ldr	r3, [pc, #140]	; (80143d8 <tcp_input+0x554>)
 801434a:	2200      	movs	r2, #0
 801434c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801434e:	4b23      	ldr	r3, [pc, #140]	; (80143dc <tcp_input+0x558>)
 8014350:	2200      	movs	r2, #0
 8014352:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014354:	4b22      	ldr	r3, [pc, #136]	; (80143e0 <tcp_input+0x55c>)
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	f003 0308 	and.w	r3, r3, #8
 801435c:	2b00      	cmp	r3, #0
 801435e:	d006      	beq.n	801436e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	7b5b      	ldrb	r3, [r3, #13]
 8014364:	f043 0301 	orr.w	r3, r3, #1
 8014368:	b2da      	uxtb	r2, r3
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014372:	2b00      	cmp	r3, #0
 8014374:	d038      	beq.n	80143e8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014376:	69f8      	ldr	r0, [r7, #28]
 8014378:	f7ff f940 	bl	80135fc <tcp_process_refused_data>
 801437c:	4603      	mov	r3, r0
 801437e:	f113 0f0d 	cmn.w	r3, #13
 8014382:	d007      	beq.n	8014394 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014388:	2b00      	cmp	r3, #0
 801438a:	d02d      	beq.n	80143e8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801438c:	4b15      	ldr	r3, [pc, #84]	; (80143e4 <tcp_input+0x560>)
 801438e:	881b      	ldrh	r3, [r3, #0]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d029      	beq.n	80143e8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014394:	69fb      	ldr	r3, [r7, #28]
 8014396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014398:	2b00      	cmp	r3, #0
 801439a:	f040 8104 	bne.w	80145a6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801439e:	69f8      	ldr	r0, [r7, #28]
 80143a0:	f003 f9ce 	bl	8017740 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80143a4:	e0ff      	b.n	80145a6 <tcp_input+0x722>
 80143a6:	bf00      	nop
 80143a8:	20004574 	.word	0x20004574
 80143ac:	20007c68 	.word	0x20007c68
 80143b0:	0801d0a8 	.word	0x0801d0a8
 80143b4:	0801d1d4 	.word	0x0801d1d4
 80143b8:	0801d0f4 	.word	0x0801d0f4
 80143bc:	2000b4c4 	.word	0x2000b4c4
 80143c0:	0801d200 	.word	0x0801d200
 80143c4:	2000b4d4 	.word	0x2000b4d4
 80143c8:	0801d22c 	.word	0x0801d22c
 80143cc:	2000b4cc 	.word	0x2000b4cc
 80143d0:	20004564 	.word	0x20004564
 80143d4:	20004594 	.word	0x20004594
 80143d8:	20004591 	.word	0x20004591
 80143dc:	2000458c 	.word	0x2000458c
 80143e0:	20004590 	.word	0x20004590
 80143e4:	2000458e 	.word	0x2000458e
      }
    }
    tcp_input_pcb = pcb;
 80143e8:	4a9b      	ldr	r2, [pc, #620]	; (8014658 <tcp_input+0x7d4>)
 80143ea:	69fb      	ldr	r3, [r7, #28]
 80143ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80143ee:	69f8      	ldr	r0, [r7, #28]
 80143f0:	f000 fb0a 	bl	8014a08 <tcp_process>
 80143f4:	4603      	mov	r3, r0
 80143f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80143f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80143fc:	f113 0f0d 	cmn.w	r3, #13
 8014400:	f000 80d3 	beq.w	80145aa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8014404:	4b95      	ldr	r3, [pc, #596]	; (801465c <tcp_input+0x7d8>)
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	f003 0308 	and.w	r3, r3, #8
 801440c:	2b00      	cmp	r3, #0
 801440e:	d015      	beq.n	801443c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014410:	69fb      	ldr	r3, [r7, #28]
 8014412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014416:	2b00      	cmp	r3, #0
 8014418:	d008      	beq.n	801442c <tcp_input+0x5a8>
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014420:	69fa      	ldr	r2, [r7, #28]
 8014422:	6912      	ldr	r2, [r2, #16]
 8014424:	f06f 010d 	mvn.w	r1, #13
 8014428:	4610      	mov	r0, r2
 801442a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801442c:	69f9      	ldr	r1, [r7, #28]
 801442e:	488c      	ldr	r0, [pc, #560]	; (8014660 <tcp_input+0x7dc>)
 8014430:	f7ff fbb0 	bl	8013b94 <tcp_pcb_remove>
        tcp_free(pcb);
 8014434:	69f8      	ldr	r0, [r7, #28]
 8014436:	f7fe f9a9 	bl	801278c <tcp_free>
 801443a:	e0c1      	b.n	80145c0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801443c:	2300      	movs	r3, #0
 801443e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014440:	4b88      	ldr	r3, [pc, #544]	; (8014664 <tcp_input+0x7e0>)
 8014442:	881b      	ldrh	r3, [r3, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d01d      	beq.n	8014484 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014448:	4b86      	ldr	r3, [pc, #536]	; (8014664 <tcp_input+0x7e0>)
 801444a:	881b      	ldrh	r3, [r3, #0]
 801444c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014454:	2b00      	cmp	r3, #0
 8014456:	d00a      	beq.n	801446e <tcp_input+0x5ea>
 8014458:	69fb      	ldr	r3, [r7, #28]
 801445a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801445e:	69fa      	ldr	r2, [r7, #28]
 8014460:	6910      	ldr	r0, [r2, #16]
 8014462:	89fa      	ldrh	r2, [r7, #14]
 8014464:	69f9      	ldr	r1, [r7, #28]
 8014466:	4798      	blx	r3
 8014468:	4603      	mov	r3, r0
 801446a:	74fb      	strb	r3, [r7, #19]
 801446c:	e001      	b.n	8014472 <tcp_input+0x5ee>
 801446e:	2300      	movs	r3, #0
 8014470:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014472:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014476:	f113 0f0d 	cmn.w	r3, #13
 801447a:	f000 8098 	beq.w	80145ae <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801447e:	4b79      	ldr	r3, [pc, #484]	; (8014664 <tcp_input+0x7e0>)
 8014480:	2200      	movs	r2, #0
 8014482:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014484:	69f8      	ldr	r0, [r7, #28]
 8014486:	f000 f905 	bl	8014694 <tcp_input_delayed_close>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	f040 8090 	bne.w	80145b2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014492:	4b75      	ldr	r3, [pc, #468]	; (8014668 <tcp_input+0x7e4>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d041      	beq.n	801451e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d006      	beq.n	80144b0 <tcp_input+0x62c>
 80144a2:	4b72      	ldr	r3, [pc, #456]	; (801466c <tcp_input+0x7e8>)
 80144a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80144a8:	4971      	ldr	r1, [pc, #452]	; (8014670 <tcp_input+0x7ec>)
 80144aa:	4872      	ldr	r0, [pc, #456]	; (8014674 <tcp_input+0x7f0>)
 80144ac:	f006 fcb8 	bl	801ae20 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80144b0:	69fb      	ldr	r3, [r7, #28]
 80144b2:	8b5b      	ldrh	r3, [r3, #26]
 80144b4:	f003 0310 	and.w	r3, r3, #16
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d008      	beq.n	80144ce <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80144bc:	4b6a      	ldr	r3, [pc, #424]	; (8014668 <tcp_input+0x7e4>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7fd fd4d 	bl	8011f60 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80144c6:	69f8      	ldr	r0, [r7, #28]
 80144c8:	f7fe fc40 	bl	8012d4c <tcp_abort>
            goto aborted;
 80144cc:	e078      	b.n	80145c0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80144ce:	69fb      	ldr	r3, [r7, #28]
 80144d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00c      	beq.n	80144f2 <tcp_input+0x66e>
 80144d8:	69fb      	ldr	r3, [r7, #28]
 80144da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80144de:	69fb      	ldr	r3, [r7, #28]
 80144e0:	6918      	ldr	r0, [r3, #16]
 80144e2:	4b61      	ldr	r3, [pc, #388]	; (8014668 <tcp_input+0x7e4>)
 80144e4:	681a      	ldr	r2, [r3, #0]
 80144e6:	2300      	movs	r3, #0
 80144e8:	69f9      	ldr	r1, [r7, #28]
 80144ea:	47a0      	blx	r4
 80144ec:	4603      	mov	r3, r0
 80144ee:	74fb      	strb	r3, [r7, #19]
 80144f0:	e008      	b.n	8014504 <tcp_input+0x680>
 80144f2:	4b5d      	ldr	r3, [pc, #372]	; (8014668 <tcp_input+0x7e4>)
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	2300      	movs	r3, #0
 80144f8:	69f9      	ldr	r1, [r7, #28]
 80144fa:	2000      	movs	r0, #0
 80144fc:	f7ff f952 	bl	80137a4 <tcp_recv_null>
 8014500:	4603      	mov	r3, r0
 8014502:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014508:	f113 0f0d 	cmn.w	r3, #13
 801450c:	d053      	beq.n	80145b6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801450e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d003      	beq.n	801451e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014516:	4b54      	ldr	r3, [pc, #336]	; (8014668 <tcp_input+0x7e4>)
 8014518:	681a      	ldr	r2, [r3, #0]
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801451e:	4b4f      	ldr	r3, [pc, #316]	; (801465c <tcp_input+0x7d8>)
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	f003 0320 	and.w	r3, r3, #32
 8014526:	2b00      	cmp	r3, #0
 8014528:	d030      	beq.n	801458c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801452a:	69fb      	ldr	r3, [r7, #28]
 801452c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801452e:	2b00      	cmp	r3, #0
 8014530:	d009      	beq.n	8014546 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014532:	69fb      	ldr	r3, [r7, #28]
 8014534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014536:	7b5a      	ldrb	r2, [r3, #13]
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801453c:	f042 0220 	orr.w	r2, r2, #32
 8014540:	b2d2      	uxtb	r2, r2
 8014542:	735a      	strb	r2, [r3, #13]
 8014544:	e022      	b.n	801458c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014546:	69fb      	ldr	r3, [r7, #28]
 8014548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801454a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801454e:	d005      	beq.n	801455c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8014550:	69fb      	ldr	r3, [r7, #28]
 8014552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014554:	3301      	adds	r3, #1
 8014556:	b29a      	uxth	r2, r3
 8014558:	69fb      	ldr	r3, [r7, #28]
 801455a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014562:	2b00      	cmp	r3, #0
 8014564:	d00b      	beq.n	801457e <tcp_input+0x6fa>
 8014566:	69fb      	ldr	r3, [r7, #28]
 8014568:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801456c:	69fb      	ldr	r3, [r7, #28]
 801456e:	6918      	ldr	r0, [r3, #16]
 8014570:	2300      	movs	r3, #0
 8014572:	2200      	movs	r2, #0
 8014574:	69f9      	ldr	r1, [r7, #28]
 8014576:	47a0      	blx	r4
 8014578:	4603      	mov	r3, r0
 801457a:	74fb      	strb	r3, [r7, #19]
 801457c:	e001      	b.n	8014582 <tcp_input+0x6fe>
 801457e:	2300      	movs	r3, #0
 8014580:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014582:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014586:	f113 0f0d 	cmn.w	r3, #13
 801458a:	d016      	beq.n	80145ba <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801458c:	4b32      	ldr	r3, [pc, #200]	; (8014658 <tcp_input+0x7d4>)
 801458e:	2200      	movs	r2, #0
 8014590:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014592:	69f8      	ldr	r0, [r7, #28]
 8014594:	f000 f87e 	bl	8014694 <tcp_input_delayed_close>
 8014598:	4603      	mov	r3, r0
 801459a:	2b00      	cmp	r3, #0
 801459c:	d10f      	bne.n	80145be <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801459e:	69f8      	ldr	r0, [r7, #28]
 80145a0:	f002 fab6 	bl	8016b10 <tcp_output>
 80145a4:	e00c      	b.n	80145c0 <tcp_input+0x73c>
        goto aborted;
 80145a6:	bf00      	nop
 80145a8:	e00a      	b.n	80145c0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80145aa:	bf00      	nop
 80145ac:	e008      	b.n	80145c0 <tcp_input+0x73c>
              goto aborted;
 80145ae:	bf00      	nop
 80145b0:	e006      	b.n	80145c0 <tcp_input+0x73c>
          goto aborted;
 80145b2:	bf00      	nop
 80145b4:	e004      	b.n	80145c0 <tcp_input+0x73c>
            goto aborted;
 80145b6:	bf00      	nop
 80145b8:	e002      	b.n	80145c0 <tcp_input+0x73c>
              goto aborted;
 80145ba:	bf00      	nop
 80145bc:	e000      	b.n	80145c0 <tcp_input+0x73c>
          goto aborted;
 80145be:	bf00      	nop
    tcp_input_pcb = NULL;
 80145c0:	4b25      	ldr	r3, [pc, #148]	; (8014658 <tcp_input+0x7d4>)
 80145c2:	2200      	movs	r2, #0
 80145c4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80145c6:	4b28      	ldr	r3, [pc, #160]	; (8014668 <tcp_input+0x7e4>)
 80145c8:	2200      	movs	r2, #0
 80145ca:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80145cc:	4b2a      	ldr	r3, [pc, #168]	; (8014678 <tcp_input+0x7f4>)
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d03d      	beq.n	8014650 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80145d4:	4b28      	ldr	r3, [pc, #160]	; (8014678 <tcp_input+0x7f4>)
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	4618      	mov	r0, r3
 80145da:	f7fd fcc1 	bl	8011f60 <pbuf_free>
      inseg.p = NULL;
 80145de:	4b26      	ldr	r3, [pc, #152]	; (8014678 <tcp_input+0x7f4>)
 80145e0:	2200      	movs	r2, #0
 80145e2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80145e4:	e034      	b.n	8014650 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80145e6:	4b25      	ldr	r3, [pc, #148]	; (801467c <tcp_input+0x7f8>)
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	899b      	ldrh	r3, [r3, #12]
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fb feba 	bl	8010368 <lwip_htons>
 80145f4:	4603      	mov	r3, r0
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	f003 0304 	and.w	r3, r3, #4
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d118      	bne.n	8014632 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014600:	4b1f      	ldr	r3, [pc, #124]	; (8014680 <tcp_input+0x7fc>)
 8014602:	6819      	ldr	r1, [r3, #0]
 8014604:	4b1f      	ldr	r3, [pc, #124]	; (8014684 <tcp_input+0x800>)
 8014606:	881b      	ldrh	r3, [r3, #0]
 8014608:	461a      	mov	r2, r3
 801460a:	4b1f      	ldr	r3, [pc, #124]	; (8014688 <tcp_input+0x804>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014610:	4b1a      	ldr	r3, [pc, #104]	; (801467c <tcp_input+0x7f8>)
 8014612:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014614:	885b      	ldrh	r3, [r3, #2]
 8014616:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014618:	4a18      	ldr	r2, [pc, #96]	; (801467c <tcp_input+0x7f8>)
 801461a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801461c:	8812      	ldrh	r2, [r2, #0]
 801461e:	b292      	uxth	r2, r2
 8014620:	9202      	str	r2, [sp, #8]
 8014622:	9301      	str	r3, [sp, #4]
 8014624:	4b19      	ldr	r3, [pc, #100]	; (801468c <tcp_input+0x808>)
 8014626:	9300      	str	r3, [sp, #0]
 8014628:	4b19      	ldr	r3, [pc, #100]	; (8014690 <tcp_input+0x80c>)
 801462a:	4602      	mov	r2, r0
 801462c:	2000      	movs	r0, #0
 801462e:	f003 f835 	bl	801769c <tcp_rst>
    pbuf_free(p);
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7fd fc94 	bl	8011f60 <pbuf_free>
  return;
 8014638:	e00a      	b.n	8014650 <tcp_input+0x7cc>
    goto dropped;
 801463a:	bf00      	nop
 801463c:	e004      	b.n	8014648 <tcp_input+0x7c4>
dropped:
 801463e:	bf00      	nop
 8014640:	e002      	b.n	8014648 <tcp_input+0x7c4>
      goto dropped;
 8014642:	bf00      	nop
 8014644:	e000      	b.n	8014648 <tcp_input+0x7c4>
      goto dropped;
 8014646:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7fd fc89 	bl	8011f60 <pbuf_free>
 801464e:	e000      	b.n	8014652 <tcp_input+0x7ce>
  return;
 8014650:	bf00      	nop
}
 8014652:	3724      	adds	r7, #36	; 0x24
 8014654:	46bd      	mov	sp, r7
 8014656:	bd90      	pop	{r4, r7, pc}
 8014658:	2000b4d8 	.word	0x2000b4d8
 801465c:	20004591 	.word	0x20004591
 8014660:	2000b4c4 	.word	0x2000b4c4
 8014664:	2000458c 	.word	0x2000458c
 8014668:	20004594 	.word	0x20004594
 801466c:	0801d0a8 	.word	0x0801d0a8
 8014670:	0801d25c 	.word	0x0801d25c
 8014674:	0801d0f4 	.word	0x0801d0f4
 8014678:	20004564 	.word	0x20004564
 801467c:	20004574 	.word	0x20004574
 8014680:	20004588 	.word	0x20004588
 8014684:	2000458e 	.word	0x2000458e
 8014688:	20004584 	.word	0x20004584
 801468c:	20007c78 	.word	0x20007c78
 8014690:	20007c7c 	.word	0x20007c7c

08014694 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b082      	sub	sp, #8
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d106      	bne.n	80146b0 <tcp_input_delayed_close+0x1c>
 80146a2:	4b17      	ldr	r3, [pc, #92]	; (8014700 <tcp_input_delayed_close+0x6c>)
 80146a4:	f240 225a 	movw	r2, #602	; 0x25a
 80146a8:	4916      	ldr	r1, [pc, #88]	; (8014704 <tcp_input_delayed_close+0x70>)
 80146aa:	4817      	ldr	r0, [pc, #92]	; (8014708 <tcp_input_delayed_close+0x74>)
 80146ac:	f006 fbb8 	bl	801ae20 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80146b0:	4b16      	ldr	r3, [pc, #88]	; (801470c <tcp_input_delayed_close+0x78>)
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	f003 0310 	and.w	r3, r3, #16
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d01c      	beq.n	80146f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	8b5b      	ldrh	r3, [r3, #26]
 80146c0:	f003 0310 	and.w	r3, r3, #16
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d10d      	bne.n	80146e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d008      	beq.n	80146e4 <tcp_input_delayed_close+0x50>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	6912      	ldr	r2, [r2, #16]
 80146dc:	f06f 010e 	mvn.w	r1, #14
 80146e0:	4610      	mov	r0, r2
 80146e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80146e4:	6879      	ldr	r1, [r7, #4]
 80146e6:	480a      	ldr	r0, [pc, #40]	; (8014710 <tcp_input_delayed_close+0x7c>)
 80146e8:	f7ff fa54 	bl	8013b94 <tcp_pcb_remove>
    tcp_free(pcb);
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f7fe f84d 	bl	801278c <tcp_free>
    return 1;
 80146f2:	2301      	movs	r3, #1
 80146f4:	e000      	b.n	80146f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80146f6:	2300      	movs	r3, #0
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	0801d0a8 	.word	0x0801d0a8
 8014704:	0801d278 	.word	0x0801d278
 8014708:	0801d0f4 	.word	0x0801d0f4
 801470c:	20004591 	.word	0x20004591
 8014710:	2000b4c4 	.word	0x2000b4c4

08014714 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014714:	b590      	push	{r4, r7, lr}
 8014716:	b08b      	sub	sp, #44	; 0x2c
 8014718:	af04      	add	r7, sp, #16
 801471a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801471c:	4b6f      	ldr	r3, [pc, #444]	; (80148dc <tcp_listen_input+0x1c8>)
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	f003 0304 	and.w	r3, r3, #4
 8014724:	2b00      	cmp	r3, #0
 8014726:	f040 80d3 	bne.w	80148d0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d106      	bne.n	801473e <tcp_listen_input+0x2a>
 8014730:	4b6b      	ldr	r3, [pc, #428]	; (80148e0 <tcp_listen_input+0x1cc>)
 8014732:	f240 2281 	movw	r2, #641	; 0x281
 8014736:	496b      	ldr	r1, [pc, #428]	; (80148e4 <tcp_listen_input+0x1d0>)
 8014738:	486b      	ldr	r0, [pc, #428]	; (80148e8 <tcp_listen_input+0x1d4>)
 801473a:	f006 fb71 	bl	801ae20 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801473e:	4b67      	ldr	r3, [pc, #412]	; (80148dc <tcp_listen_input+0x1c8>)
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	f003 0310 	and.w	r3, r3, #16
 8014746:	2b00      	cmp	r3, #0
 8014748:	d019      	beq.n	801477e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801474a:	4b68      	ldr	r3, [pc, #416]	; (80148ec <tcp_listen_input+0x1d8>)
 801474c:	6819      	ldr	r1, [r3, #0]
 801474e:	4b68      	ldr	r3, [pc, #416]	; (80148f0 <tcp_listen_input+0x1dc>)
 8014750:	881b      	ldrh	r3, [r3, #0]
 8014752:	461a      	mov	r2, r3
 8014754:	4b67      	ldr	r3, [pc, #412]	; (80148f4 <tcp_listen_input+0x1e0>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801475a:	4b67      	ldr	r3, [pc, #412]	; (80148f8 <tcp_listen_input+0x1e4>)
 801475c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801475e:	885b      	ldrh	r3, [r3, #2]
 8014760:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014762:	4a65      	ldr	r2, [pc, #404]	; (80148f8 <tcp_listen_input+0x1e4>)
 8014764:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014766:	8812      	ldrh	r2, [r2, #0]
 8014768:	b292      	uxth	r2, r2
 801476a:	9202      	str	r2, [sp, #8]
 801476c:	9301      	str	r3, [sp, #4]
 801476e:	4b63      	ldr	r3, [pc, #396]	; (80148fc <tcp_listen_input+0x1e8>)
 8014770:	9300      	str	r3, [sp, #0]
 8014772:	4b63      	ldr	r3, [pc, #396]	; (8014900 <tcp_listen_input+0x1ec>)
 8014774:	4602      	mov	r2, r0
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f002 ff90 	bl	801769c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801477c:	e0aa      	b.n	80148d4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801477e:	4b57      	ldr	r3, [pc, #348]	; (80148dc <tcp_listen_input+0x1c8>)
 8014780:	781b      	ldrb	r3, [r3, #0]
 8014782:	f003 0302 	and.w	r3, r3, #2
 8014786:	2b00      	cmp	r3, #0
 8014788:	f000 80a4 	beq.w	80148d4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	7d5b      	ldrb	r3, [r3, #21]
 8014790:	4618      	mov	r0, r3
 8014792:	f7ff f92b 	bl	80139ec <tcp_alloc>
 8014796:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d111      	bne.n	80147c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	699b      	ldr	r3, [r3, #24]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d00a      	beq.n	80147bc <tcp_listen_input+0xa8>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	699b      	ldr	r3, [r3, #24]
 80147aa:	687a      	ldr	r2, [r7, #4]
 80147ac:	6910      	ldr	r0, [r2, #16]
 80147ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147b2:	2100      	movs	r1, #0
 80147b4:	4798      	blx	r3
 80147b6:	4603      	mov	r3, r0
 80147b8:	73bb      	strb	r3, [r7, #14]
      return;
 80147ba:	e08c      	b.n	80148d6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80147bc:	23f0      	movs	r3, #240	; 0xf0
 80147be:	73bb      	strb	r3, [r7, #14]
      return;
 80147c0:	e089      	b.n	80148d6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80147c2:	4b50      	ldr	r3, [pc, #320]	; (8014904 <tcp_listen_input+0x1f0>)
 80147c4:	695a      	ldr	r2, [r3, #20]
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80147ca:	4b4e      	ldr	r3, [pc, #312]	; (8014904 <tcp_listen_input+0x1f0>)
 80147cc:	691a      	ldr	r2, [r3, #16]
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	8ada      	ldrh	r2, [r3, #22]
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80147da:	4b47      	ldr	r3, [pc, #284]	; (80148f8 <tcp_listen_input+0x1e4>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	881b      	ldrh	r3, [r3, #0]
 80147e0:	b29a      	uxth	r2, r3
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80147e6:	697b      	ldr	r3, [r7, #20]
 80147e8:	2203      	movs	r2, #3
 80147ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80147ec:	4b41      	ldr	r3, [pc, #260]	; (80148f4 <tcp_listen_input+0x1e0>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	1c5a      	adds	r2, r3, #1
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80147fe:	6978      	ldr	r0, [r7, #20]
 8014800:	f7ff fa5c 	bl	8013cbc <tcp_next_iss>
 8014804:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	693a      	ldr	r2, [r7, #16]
 801480a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	693a      	ldr	r2, [r7, #16]
 8014810:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	693a      	ldr	r2, [r7, #16]
 8014816:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	693a      	ldr	r2, [r7, #16]
 801481c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801481e:	4b35      	ldr	r3, [pc, #212]	; (80148f4 <tcp_listen_input+0x1e0>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	1e5a      	subs	r2, r3, #1
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	691a      	ldr	r2, [r3, #16]
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014830:	697b      	ldr	r3, [r7, #20]
 8014832:	687a      	ldr	r2, [r7, #4]
 8014834:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	7a5b      	ldrb	r3, [r3, #9]
 801483a:	f003 030c 	and.w	r3, r3, #12
 801483e:	b2da      	uxtb	r2, r3
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	7a1a      	ldrb	r2, [r3, #8]
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801484c:	4b2e      	ldr	r3, [pc, #184]	; (8014908 <tcp_listen_input+0x1f4>)
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	60da      	str	r2, [r3, #12]
 8014854:	4a2c      	ldr	r2, [pc, #176]	; (8014908 <tcp_listen_input+0x1f4>)
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	6013      	str	r3, [r2, #0]
 801485a:	f003 f8e1 	bl	8017a20 <tcp_timer_needed>
 801485e:	4b2b      	ldr	r3, [pc, #172]	; (801490c <tcp_listen_input+0x1f8>)
 8014860:	2201      	movs	r2, #1
 8014862:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014864:	6978      	ldr	r0, [r7, #20]
 8014866:	f001 fd8f 	bl	8016388 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801486a:	4b23      	ldr	r3, [pc, #140]	; (80148f8 <tcp_listen_input+0x1e4>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	89db      	ldrh	r3, [r3, #14]
 8014870:	b29a      	uxth	r2, r3
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	3304      	adds	r3, #4
 801488c:	4618      	mov	r0, r3
 801488e:	f004 ff8b 	bl	80197a8 <ip4_route>
 8014892:	4601      	mov	r1, r0
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	3304      	adds	r3, #4
 8014898:	461a      	mov	r2, r3
 801489a:	4620      	mov	r0, r4
 801489c:	f7ff fa34 	bl	8013d08 <tcp_eff_send_mss_netif>
 80148a0:	4603      	mov	r3, r0
 80148a2:	461a      	mov	r2, r3
 80148a4:	697b      	ldr	r3, [r7, #20]
 80148a6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80148a8:	2112      	movs	r1, #18
 80148aa:	6978      	ldr	r0, [r7, #20]
 80148ac:	f002 f842 	bl	8016934 <tcp_enqueue_flags>
 80148b0:	4603      	mov	r3, r0
 80148b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80148b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d004      	beq.n	80148c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80148bc:	2100      	movs	r1, #0
 80148be:	6978      	ldr	r0, [r7, #20]
 80148c0:	f7fe f986 	bl	8012bd0 <tcp_abandon>
      return;
 80148c4:	e007      	b.n	80148d6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80148c6:	6978      	ldr	r0, [r7, #20]
 80148c8:	f002 f922 	bl	8016b10 <tcp_output>
  return;
 80148cc:	bf00      	nop
 80148ce:	e001      	b.n	80148d4 <tcp_listen_input+0x1c0>
    return;
 80148d0:	bf00      	nop
 80148d2:	e000      	b.n	80148d6 <tcp_listen_input+0x1c2>
  return;
 80148d4:	bf00      	nop
}
 80148d6:	371c      	adds	r7, #28
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd90      	pop	{r4, r7, pc}
 80148dc:	20004590 	.word	0x20004590
 80148e0:	0801d0a8 	.word	0x0801d0a8
 80148e4:	0801d2a0 	.word	0x0801d2a0
 80148e8:	0801d0f4 	.word	0x0801d0f4
 80148ec:	20004588 	.word	0x20004588
 80148f0:	2000458e 	.word	0x2000458e
 80148f4:	20004584 	.word	0x20004584
 80148f8:	20004574 	.word	0x20004574
 80148fc:	20007c78 	.word	0x20007c78
 8014900:	20007c7c 	.word	0x20007c7c
 8014904:	20007c68 	.word	0x20007c68
 8014908:	2000b4c4 	.word	0x2000b4c4
 801490c:	2000b4c0 	.word	0x2000b4c0

08014910 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b086      	sub	sp, #24
 8014914:	af04      	add	r7, sp, #16
 8014916:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014918:	4b30      	ldr	r3, [pc, #192]	; (80149dc <tcp_timewait_input+0xcc>)
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	f003 0304 	and.w	r3, r3, #4
 8014920:	2b00      	cmp	r3, #0
 8014922:	d154      	bne.n	80149ce <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d106      	bne.n	8014938 <tcp_timewait_input+0x28>
 801492a:	4b2d      	ldr	r3, [pc, #180]	; (80149e0 <tcp_timewait_input+0xd0>)
 801492c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014930:	492c      	ldr	r1, [pc, #176]	; (80149e4 <tcp_timewait_input+0xd4>)
 8014932:	482d      	ldr	r0, [pc, #180]	; (80149e8 <tcp_timewait_input+0xd8>)
 8014934:	f006 fa74 	bl	801ae20 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014938:	4b28      	ldr	r3, [pc, #160]	; (80149dc <tcp_timewait_input+0xcc>)
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	f003 0302 	and.w	r3, r3, #2
 8014940:	2b00      	cmp	r3, #0
 8014942:	d02a      	beq.n	801499a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014944:	4b29      	ldr	r3, [pc, #164]	; (80149ec <tcp_timewait_input+0xdc>)
 8014946:	681a      	ldr	r2, [r3, #0]
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	2b00      	cmp	r3, #0
 8014950:	db2d      	blt.n	80149ae <tcp_timewait_input+0x9e>
 8014952:	4b26      	ldr	r3, [pc, #152]	; (80149ec <tcp_timewait_input+0xdc>)
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801495a:	6879      	ldr	r1, [r7, #4]
 801495c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801495e:	440b      	add	r3, r1
 8014960:	1ad3      	subs	r3, r2, r3
 8014962:	2b00      	cmp	r3, #0
 8014964:	dc23      	bgt.n	80149ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014966:	4b22      	ldr	r3, [pc, #136]	; (80149f0 <tcp_timewait_input+0xe0>)
 8014968:	6819      	ldr	r1, [r3, #0]
 801496a:	4b22      	ldr	r3, [pc, #136]	; (80149f4 <tcp_timewait_input+0xe4>)
 801496c:	881b      	ldrh	r3, [r3, #0]
 801496e:	461a      	mov	r2, r3
 8014970:	4b1e      	ldr	r3, [pc, #120]	; (80149ec <tcp_timewait_input+0xdc>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014976:	4b20      	ldr	r3, [pc, #128]	; (80149f8 <tcp_timewait_input+0xe8>)
 8014978:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801497a:	885b      	ldrh	r3, [r3, #2]
 801497c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801497e:	4a1e      	ldr	r2, [pc, #120]	; (80149f8 <tcp_timewait_input+0xe8>)
 8014980:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014982:	8812      	ldrh	r2, [r2, #0]
 8014984:	b292      	uxth	r2, r2
 8014986:	9202      	str	r2, [sp, #8]
 8014988:	9301      	str	r3, [sp, #4]
 801498a:	4b1c      	ldr	r3, [pc, #112]	; (80149fc <tcp_timewait_input+0xec>)
 801498c:	9300      	str	r3, [sp, #0]
 801498e:	4b1c      	ldr	r3, [pc, #112]	; (8014a00 <tcp_timewait_input+0xf0>)
 8014990:	4602      	mov	r2, r0
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f002 fe82 	bl	801769c <tcp_rst>
      return;
 8014998:	e01c      	b.n	80149d4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 801499a:	4b10      	ldr	r3, [pc, #64]	; (80149dc <tcp_timewait_input+0xcc>)
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	f003 0301 	and.w	r3, r3, #1
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d003      	beq.n	80149ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80149a6:	4b17      	ldr	r3, [pc, #92]	; (8014a04 <tcp_timewait_input+0xf4>)
 80149a8:	681a      	ldr	r2, [r3, #0]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80149ae:	4b11      	ldr	r3, [pc, #68]	; (80149f4 <tcp_timewait_input+0xe4>)
 80149b0:	881b      	ldrh	r3, [r3, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d00d      	beq.n	80149d2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	8b5b      	ldrh	r3, [r3, #26]
 80149ba:	f043 0302 	orr.w	r3, r3, #2
 80149be:	b29a      	uxth	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f002 f8a3 	bl	8016b10 <tcp_output>
  }
  return;
 80149ca:	bf00      	nop
 80149cc:	e001      	b.n	80149d2 <tcp_timewait_input+0xc2>
    return;
 80149ce:	bf00      	nop
 80149d0:	e000      	b.n	80149d4 <tcp_timewait_input+0xc4>
  return;
 80149d2:	bf00      	nop
}
 80149d4:	3708      	adds	r7, #8
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
 80149da:	bf00      	nop
 80149dc:	20004590 	.word	0x20004590
 80149e0:	0801d0a8 	.word	0x0801d0a8
 80149e4:	0801d2c0 	.word	0x0801d2c0
 80149e8:	0801d0f4 	.word	0x0801d0f4
 80149ec:	20004584 	.word	0x20004584
 80149f0:	20004588 	.word	0x20004588
 80149f4:	2000458e 	.word	0x2000458e
 80149f8:	20004574 	.word	0x20004574
 80149fc:	20007c78 	.word	0x20007c78
 8014a00:	20007c7c 	.word	0x20007c7c
 8014a04:	2000b4c8 	.word	0x2000b4c8

08014a08 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014a08:	b590      	push	{r4, r7, lr}
 8014a0a:	b08d      	sub	sp, #52	; 0x34
 8014a0c:	af04      	add	r7, sp, #16
 8014a0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014a10:	2300      	movs	r3, #0
 8014a12:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014a14:	2300      	movs	r3, #0
 8014a16:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d106      	bne.n	8014a2c <tcp_process+0x24>
 8014a1e:	4ba5      	ldr	r3, [pc, #660]	; (8014cb4 <tcp_process+0x2ac>)
 8014a20:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014a24:	49a4      	ldr	r1, [pc, #656]	; (8014cb8 <tcp_process+0x2b0>)
 8014a26:	48a5      	ldr	r0, [pc, #660]	; (8014cbc <tcp_process+0x2b4>)
 8014a28:	f006 f9fa 	bl	801ae20 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014a2c:	4ba4      	ldr	r3, [pc, #656]	; (8014cc0 <tcp_process+0x2b8>)
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	f003 0304 	and.w	r3, r3, #4
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d04e      	beq.n	8014ad6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	7d1b      	ldrb	r3, [r3, #20]
 8014a3c:	2b02      	cmp	r3, #2
 8014a3e:	d108      	bne.n	8014a52 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a44:	4b9f      	ldr	r3, [pc, #636]	; (8014cc4 <tcp_process+0x2bc>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d123      	bne.n	8014a94 <tcp_process+0x8c>
        acceptable = 1;
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	76fb      	strb	r3, [r7, #27]
 8014a50:	e020      	b.n	8014a94 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a56:	4b9c      	ldr	r3, [pc, #624]	; (8014cc8 <tcp_process+0x2c0>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d102      	bne.n	8014a64 <tcp_process+0x5c>
        acceptable = 1;
 8014a5e:	2301      	movs	r3, #1
 8014a60:	76fb      	strb	r3, [r7, #27]
 8014a62:	e017      	b.n	8014a94 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014a64:	4b98      	ldr	r3, [pc, #608]	; (8014cc8 <tcp_process+0x2c0>)
 8014a66:	681a      	ldr	r2, [r3, #0]
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a6c:	1ad3      	subs	r3, r2, r3
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	db10      	blt.n	8014a94 <tcp_process+0x8c>
 8014a72:	4b95      	ldr	r3, [pc, #596]	; (8014cc8 <tcp_process+0x2c0>)
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a7a:	6879      	ldr	r1, [r7, #4]
 8014a7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a7e:	440b      	add	r3, r1
 8014a80:	1ad3      	subs	r3, r2, r3
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	dc06      	bgt.n	8014a94 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	8b5b      	ldrh	r3, [r3, #26]
 8014a8a:	f043 0302 	orr.w	r3, r3, #2
 8014a8e:	b29a      	uxth	r2, r3
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014a94:	7efb      	ldrb	r3, [r7, #27]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d01b      	beq.n	8014ad2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	7d1b      	ldrb	r3, [r3, #20]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d106      	bne.n	8014ab0 <tcp_process+0xa8>
 8014aa2:	4b84      	ldr	r3, [pc, #528]	; (8014cb4 <tcp_process+0x2ac>)
 8014aa4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014aa8:	4988      	ldr	r1, [pc, #544]	; (8014ccc <tcp_process+0x2c4>)
 8014aaa:	4884      	ldr	r0, [pc, #528]	; (8014cbc <tcp_process+0x2b4>)
 8014aac:	f006 f9b8 	bl	801ae20 <iprintf>
      recv_flags |= TF_RESET;
 8014ab0:	4b87      	ldr	r3, [pc, #540]	; (8014cd0 <tcp_process+0x2c8>)
 8014ab2:	781b      	ldrb	r3, [r3, #0]
 8014ab4:	f043 0308 	orr.w	r3, r3, #8
 8014ab8:	b2da      	uxtb	r2, r3
 8014aba:	4b85      	ldr	r3, [pc, #532]	; (8014cd0 <tcp_process+0x2c8>)
 8014abc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	8b5b      	ldrh	r3, [r3, #26]
 8014ac2:	f023 0301 	bic.w	r3, r3, #1
 8014ac6:	b29a      	uxth	r2, r3
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014acc:	f06f 030d 	mvn.w	r3, #13
 8014ad0:	e37a      	b.n	80151c8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	e378      	b.n	80151c8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014ad6:	4b7a      	ldr	r3, [pc, #488]	; (8014cc0 <tcp_process+0x2b8>)
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	f003 0302 	and.w	r3, r3, #2
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d010      	beq.n	8014b04 <tcp_process+0xfc>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	7d1b      	ldrb	r3, [r3, #20]
 8014ae6:	2b02      	cmp	r3, #2
 8014ae8:	d00c      	beq.n	8014b04 <tcp_process+0xfc>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	7d1b      	ldrb	r3, [r3, #20]
 8014aee:	2b03      	cmp	r3, #3
 8014af0:	d008      	beq.n	8014b04 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	8b5b      	ldrh	r3, [r3, #26]
 8014af6:	f043 0302 	orr.w	r3, r3, #2
 8014afa:	b29a      	uxth	r2, r3
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014b00:	2300      	movs	r3, #0
 8014b02:	e361      	b.n	80151c8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	8b5b      	ldrh	r3, [r3, #26]
 8014b08:	f003 0310 	and.w	r3, r3, #16
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d103      	bne.n	8014b18 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014b10:	4b70      	ldr	r3, [pc, #448]	; (8014cd4 <tcp_process+0x2cc>)
 8014b12:	681a      	ldr	r2, [r3, #0]
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2200      	movs	r2, #0
 8014b24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f001 fc2d 	bl	8016388 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	7d1b      	ldrb	r3, [r3, #20]
 8014b32:	3b02      	subs	r3, #2
 8014b34:	2b07      	cmp	r3, #7
 8014b36:	f200 8337 	bhi.w	80151a8 <tcp_process+0x7a0>
 8014b3a:	a201      	add	r2, pc, #4	; (adr r2, 8014b40 <tcp_process+0x138>)
 8014b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b40:	08014b61 	.word	0x08014b61
 8014b44:	08014d91 	.word	0x08014d91
 8014b48:	08014f09 	.word	0x08014f09
 8014b4c:	08014f33 	.word	0x08014f33
 8014b50:	08015057 	.word	0x08015057
 8014b54:	08014f09 	.word	0x08014f09
 8014b58:	080150e3 	.word	0x080150e3
 8014b5c:	08015173 	.word	0x08015173
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014b60:	4b57      	ldr	r3, [pc, #348]	; (8014cc0 <tcp_process+0x2b8>)
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	f003 0310 	and.w	r3, r3, #16
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	f000 80e4 	beq.w	8014d36 <tcp_process+0x32e>
 8014b6e:	4b54      	ldr	r3, [pc, #336]	; (8014cc0 <tcp_process+0x2b8>)
 8014b70:	781b      	ldrb	r3, [r3, #0]
 8014b72:	f003 0302 	and.w	r3, r3, #2
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	f000 80dd 	beq.w	8014d36 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b80:	1c5a      	adds	r2, r3, #1
 8014b82:	4b50      	ldr	r3, [pc, #320]	; (8014cc4 <tcp_process+0x2bc>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	f040 80d5 	bne.w	8014d36 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014b8c:	4b4e      	ldr	r3, [pc, #312]	; (8014cc8 <tcp_process+0x2c0>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	1c5a      	adds	r2, r3, #1
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014b9e:	4b49      	ldr	r3, [pc, #292]	; (8014cc4 <tcp_process+0x2bc>)
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014ba6:	4b4c      	ldr	r3, [pc, #304]	; (8014cd8 <tcp_process+0x2d0>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	89db      	ldrh	r3, [r3, #14]
 8014bac:	b29a      	uxth	r2, r3
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014bc0:	4b41      	ldr	r3, [pc, #260]	; (8014cc8 <tcp_process+0x2c0>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	1e5a      	subs	r2, r3, #1
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	2204      	movs	r2, #4
 8014bce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f004 fde5 	bl	80197a8 <ip4_route>
 8014bde:	4601      	mov	r1, r0
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	3304      	adds	r3, #4
 8014be4:	461a      	mov	r2, r3
 8014be6:	4620      	mov	r0, r4
 8014be8:	f7ff f88e 	bl	8013d08 <tcp_eff_send_mss_netif>
 8014bec:	4603      	mov	r3, r0
 8014bee:	461a      	mov	r2, r3
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bf8:	009a      	lsls	r2, r3, #2
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bfe:	005b      	lsls	r3, r3, #1
 8014c00:	f241 111c 	movw	r1, #4380	; 0x111c
 8014c04:	428b      	cmp	r3, r1
 8014c06:	bf38      	it	cc
 8014c08:	460b      	movcc	r3, r1
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d204      	bcs.n	8014c18 <tcp_process+0x210>
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c12:	009b      	lsls	r3, r3, #2
 8014c14:	b29b      	uxth	r3, r3
 8014c16:	e00d      	b.n	8014c34 <tcp_process+0x22c>
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c1c:	005b      	lsls	r3, r3, #1
 8014c1e:	f241 121c 	movw	r2, #4380	; 0x111c
 8014c22:	4293      	cmp	r3, r2
 8014c24:	d904      	bls.n	8014c30 <tcp_process+0x228>
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c2a:	005b      	lsls	r3, r3, #1
 8014c2c:	b29b      	uxth	r3, r3
 8014c2e:	e001      	b.n	8014c34 <tcp_process+0x22c>
 8014c30:	f241 131c 	movw	r3, #4380	; 0x111c
 8014c34:	687a      	ldr	r2, [r7, #4]
 8014c36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d106      	bne.n	8014c52 <tcp_process+0x24a>
 8014c44:	4b1b      	ldr	r3, [pc, #108]	; (8014cb4 <tcp_process+0x2ac>)
 8014c46:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014c4a:	4924      	ldr	r1, [pc, #144]	; (8014cdc <tcp_process+0x2d4>)
 8014c4c:	481b      	ldr	r0, [pc, #108]	; (8014cbc <tcp_process+0x2b4>)
 8014c4e:	f006 f8e7 	bl	801ae20 <iprintf>
        --pcb->snd_queuelen;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c58:	3b01      	subs	r3, #1
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c66:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d111      	bne.n	8014c92 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c72:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014c74:	69fb      	ldr	r3, [r7, #28]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d106      	bne.n	8014c88 <tcp_process+0x280>
 8014c7a:	4b0e      	ldr	r3, [pc, #56]	; (8014cb4 <tcp_process+0x2ac>)
 8014c7c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014c80:	4917      	ldr	r1, [pc, #92]	; (8014ce0 <tcp_process+0x2d8>)
 8014c82:	480e      	ldr	r0, [pc, #56]	; (8014cbc <tcp_process+0x2b4>)
 8014c84:	f006 f8cc 	bl	801ae20 <iprintf>
          pcb->unsent = rseg->next;
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	681a      	ldr	r2, [r3, #0]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	66da      	str	r2, [r3, #108]	; 0x6c
 8014c90:	e003      	b.n	8014c9a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8014c92:	69fb      	ldr	r3, [r7, #28]
 8014c94:	681a      	ldr	r2, [r3, #0]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014c9a:	69f8      	ldr	r0, [r7, #28]
 8014c9c:	f7fe fd3e 	bl	801371c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d11d      	bne.n	8014ce4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014cae:	861a      	strh	r2, [r3, #48]	; 0x30
 8014cb0:	e01f      	b.n	8014cf2 <tcp_process+0x2ea>
 8014cb2:	bf00      	nop
 8014cb4:	0801d0a8 	.word	0x0801d0a8
 8014cb8:	0801d2e0 	.word	0x0801d2e0
 8014cbc:	0801d0f4 	.word	0x0801d0f4
 8014cc0:	20004590 	.word	0x20004590
 8014cc4:	20004588 	.word	0x20004588
 8014cc8:	20004584 	.word	0x20004584
 8014ccc:	0801d2fc 	.word	0x0801d2fc
 8014cd0:	20004591 	.word	0x20004591
 8014cd4:	2000b4c8 	.word	0x2000b4c8
 8014cd8:	20004574 	.word	0x20004574
 8014cdc:	0801d31c 	.word	0x0801d31c
 8014ce0:	0801d334 	.word	0x0801d334
        } else {
          pcb->rtime = 0;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2200      	movs	r2, #0
 8014cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d00a      	beq.n	8014d12 <tcp_process+0x30a>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014d02:	687a      	ldr	r2, [r7, #4]
 8014d04:	6910      	ldr	r0, [r2, #16]
 8014d06:	2200      	movs	r2, #0
 8014d08:	6879      	ldr	r1, [r7, #4]
 8014d0a:	4798      	blx	r3
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	76bb      	strb	r3, [r7, #26]
 8014d10:	e001      	b.n	8014d16 <tcp_process+0x30e>
 8014d12:	2300      	movs	r3, #0
 8014d14:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014d16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014d1a:	f113 0f0d 	cmn.w	r3, #13
 8014d1e:	d102      	bne.n	8014d26 <tcp_process+0x31e>
          return ERR_ABRT;
 8014d20:	f06f 030c 	mvn.w	r3, #12
 8014d24:	e250      	b.n	80151c8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	8b5b      	ldrh	r3, [r3, #26]
 8014d2a:	f043 0302 	orr.w	r3, r3, #2
 8014d2e:	b29a      	uxth	r2, r3
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014d34:	e23a      	b.n	80151ac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014d36:	4b9d      	ldr	r3, [pc, #628]	; (8014fac <tcp_process+0x5a4>)
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	f003 0310 	and.w	r3, r3, #16
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	f000 8234 	beq.w	80151ac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d44:	4b9a      	ldr	r3, [pc, #616]	; (8014fb0 <tcp_process+0x5a8>)
 8014d46:	6819      	ldr	r1, [r3, #0]
 8014d48:	4b9a      	ldr	r3, [pc, #616]	; (8014fb4 <tcp_process+0x5ac>)
 8014d4a:	881b      	ldrh	r3, [r3, #0]
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	4b9a      	ldr	r3, [pc, #616]	; (8014fb8 <tcp_process+0x5b0>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d54:	4b99      	ldr	r3, [pc, #612]	; (8014fbc <tcp_process+0x5b4>)
 8014d56:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d58:	885b      	ldrh	r3, [r3, #2]
 8014d5a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d5c:	4a97      	ldr	r2, [pc, #604]	; (8014fbc <tcp_process+0x5b4>)
 8014d5e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d60:	8812      	ldrh	r2, [r2, #0]
 8014d62:	b292      	uxth	r2, r2
 8014d64:	9202      	str	r2, [sp, #8]
 8014d66:	9301      	str	r3, [sp, #4]
 8014d68:	4b95      	ldr	r3, [pc, #596]	; (8014fc0 <tcp_process+0x5b8>)
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	4b95      	ldr	r3, [pc, #596]	; (8014fc4 <tcp_process+0x5bc>)
 8014d6e:	4602      	mov	r2, r0
 8014d70:	6878      	ldr	r0, [r7, #4]
 8014d72:	f002 fc93 	bl	801769c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014d7c:	2b05      	cmp	r3, #5
 8014d7e:	f200 8215 	bhi.w	80151ac <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2200      	movs	r2, #0
 8014d86:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	f002 fa51 	bl	8017230 <tcp_rexmit_rto>
      break;
 8014d8e:	e20d      	b.n	80151ac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014d90:	4b86      	ldr	r3, [pc, #536]	; (8014fac <tcp_process+0x5a4>)
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	f003 0310 	and.w	r3, r3, #16
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	f000 80a1 	beq.w	8014ee0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014d9e:	4b84      	ldr	r3, [pc, #528]	; (8014fb0 <tcp_process+0x5a8>)
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014da6:	1ad3      	subs	r3, r2, r3
 8014da8:	3b01      	subs	r3, #1
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	db7e      	blt.n	8014eac <tcp_process+0x4a4>
 8014dae:	4b80      	ldr	r3, [pc, #512]	; (8014fb0 <tcp_process+0x5a8>)
 8014db0:	681a      	ldr	r2, [r3, #0]
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014db6:	1ad3      	subs	r3, r2, r3
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	dc77      	bgt.n	8014eac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2204      	movs	r2, #4
 8014dc0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d102      	bne.n	8014dd0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014dca:	23fa      	movs	r3, #250	; 0xfa
 8014dcc:	76bb      	strb	r3, [r7, #26]
 8014dce:	e01d      	b.n	8014e0c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dd4:	699b      	ldr	r3, [r3, #24]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d106      	bne.n	8014de8 <tcp_process+0x3e0>
 8014dda:	4b7b      	ldr	r3, [pc, #492]	; (8014fc8 <tcp_process+0x5c0>)
 8014ddc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014de0:	497a      	ldr	r1, [pc, #488]	; (8014fcc <tcp_process+0x5c4>)
 8014de2:	487b      	ldr	r0, [pc, #492]	; (8014fd0 <tcp_process+0x5c8>)
 8014de4:	f006 f81c 	bl	801ae20 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014dec:	699b      	ldr	r3, [r3, #24]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d00a      	beq.n	8014e08 <tcp_process+0x400>
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014df6:	699b      	ldr	r3, [r3, #24]
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	6910      	ldr	r0, [r2, #16]
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	6879      	ldr	r1, [r7, #4]
 8014e00:	4798      	blx	r3
 8014e02:	4603      	mov	r3, r0
 8014e04:	76bb      	strb	r3, [r7, #26]
 8014e06:	e001      	b.n	8014e0c <tcp_process+0x404>
 8014e08:	23f0      	movs	r3, #240	; 0xf0
 8014e0a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014e0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d00a      	beq.n	8014e2a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014e14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014e18:	f113 0f0d 	cmn.w	r3, #13
 8014e1c:	d002      	beq.n	8014e24 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f7fd ff94 	bl	8012d4c <tcp_abort>
            }
            return ERR_ABRT;
 8014e24:	f06f 030c 	mvn.w	r3, #12
 8014e28:	e1ce      	b.n	80151c8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f000 fae0 	bl	80153f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014e30:	4b68      	ldr	r3, [pc, #416]	; (8014fd4 <tcp_process+0x5cc>)
 8014e32:	881b      	ldrh	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d005      	beq.n	8014e44 <tcp_process+0x43c>
            recv_acked--;
 8014e38:	4b66      	ldr	r3, [pc, #408]	; (8014fd4 <tcp_process+0x5cc>)
 8014e3a:	881b      	ldrh	r3, [r3, #0]
 8014e3c:	3b01      	subs	r3, #1
 8014e3e:	b29a      	uxth	r2, r3
 8014e40:	4b64      	ldr	r3, [pc, #400]	; (8014fd4 <tcp_process+0x5cc>)
 8014e42:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e48:	009a      	lsls	r2, r3, #2
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e4e:	005b      	lsls	r3, r3, #1
 8014e50:	f241 111c 	movw	r1, #4380	; 0x111c
 8014e54:	428b      	cmp	r3, r1
 8014e56:	bf38      	it	cc
 8014e58:	460b      	movcc	r3, r1
 8014e5a:	429a      	cmp	r2, r3
 8014e5c:	d204      	bcs.n	8014e68 <tcp_process+0x460>
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e62:	009b      	lsls	r3, r3, #2
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	e00d      	b.n	8014e84 <tcp_process+0x47c>
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e6c:	005b      	lsls	r3, r3, #1
 8014e6e:	f241 121c 	movw	r2, #4380	; 0x111c
 8014e72:	4293      	cmp	r3, r2
 8014e74:	d904      	bls.n	8014e80 <tcp_process+0x478>
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e7a:	005b      	lsls	r3, r3, #1
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	e001      	b.n	8014e84 <tcp_process+0x47c>
 8014e80:	f241 131c 	movw	r3, #4380	; 0x111c
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014e8a:	4b53      	ldr	r3, [pc, #332]	; (8014fd8 <tcp_process+0x5d0>)
 8014e8c:	781b      	ldrb	r3, [r3, #0]
 8014e8e:	f003 0320 	and.w	r3, r3, #32
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d037      	beq.n	8014f06 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	8b5b      	ldrh	r3, [r3, #26]
 8014e9a:	f043 0302 	orr.w	r3, r3, #2
 8014e9e:	b29a      	uxth	r2, r3
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2207      	movs	r2, #7
 8014ea8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014eaa:	e02c      	b.n	8014f06 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014eac:	4b40      	ldr	r3, [pc, #256]	; (8014fb0 <tcp_process+0x5a8>)
 8014eae:	6819      	ldr	r1, [r3, #0]
 8014eb0:	4b40      	ldr	r3, [pc, #256]	; (8014fb4 <tcp_process+0x5ac>)
 8014eb2:	881b      	ldrh	r3, [r3, #0]
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	4b40      	ldr	r3, [pc, #256]	; (8014fb8 <tcp_process+0x5b0>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ebc:	4b3f      	ldr	r3, [pc, #252]	; (8014fbc <tcp_process+0x5b4>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ec0:	885b      	ldrh	r3, [r3, #2]
 8014ec2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ec4:	4a3d      	ldr	r2, [pc, #244]	; (8014fbc <tcp_process+0x5b4>)
 8014ec6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ec8:	8812      	ldrh	r2, [r2, #0]
 8014eca:	b292      	uxth	r2, r2
 8014ecc:	9202      	str	r2, [sp, #8]
 8014ece:	9301      	str	r3, [sp, #4]
 8014ed0:	4b3b      	ldr	r3, [pc, #236]	; (8014fc0 <tcp_process+0x5b8>)
 8014ed2:	9300      	str	r3, [sp, #0]
 8014ed4:	4b3b      	ldr	r3, [pc, #236]	; (8014fc4 <tcp_process+0x5bc>)
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f002 fbdf 	bl	801769c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014ede:	e167      	b.n	80151b0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014ee0:	4b32      	ldr	r3, [pc, #200]	; (8014fac <tcp_process+0x5a4>)
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	f003 0302 	and.w	r3, r3, #2
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	f000 8161 	beq.w	80151b0 <tcp_process+0x7a8>
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef2:	1e5a      	subs	r2, r3, #1
 8014ef4:	4b30      	ldr	r3, [pc, #192]	; (8014fb8 <tcp_process+0x5b0>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	f040 8159 	bne.w	80151b0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f002 f9b8 	bl	8017274 <tcp_rexmit>
      break;
 8014f04:	e154      	b.n	80151b0 <tcp_process+0x7a8>
 8014f06:	e153      	b.n	80151b0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 fa71 	bl	80153f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014f0e:	4b32      	ldr	r3, [pc, #200]	; (8014fd8 <tcp_process+0x5d0>)
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	f003 0320 	and.w	r3, r3, #32
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	f000 814c 	beq.w	80151b4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	8b5b      	ldrh	r3, [r3, #26]
 8014f20:	f043 0302 	orr.w	r3, r3, #2
 8014f24:	b29a      	uxth	r2, r3
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	2207      	movs	r2, #7
 8014f2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014f30:	e140      	b.n	80151b4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 fa5c 	bl	80153f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014f38:	4b27      	ldr	r3, [pc, #156]	; (8014fd8 <tcp_process+0x5d0>)
 8014f3a:	781b      	ldrb	r3, [r3, #0]
 8014f3c:	f003 0320 	and.w	r3, r3, #32
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d071      	beq.n	8015028 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014f44:	4b19      	ldr	r3, [pc, #100]	; (8014fac <tcp_process+0x5a4>)
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	f003 0310 	and.w	r3, r3, #16
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d060      	beq.n	8015012 <tcp_process+0x60a>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f54:	4b16      	ldr	r3, [pc, #88]	; (8014fb0 <tcp_process+0x5a8>)
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d15a      	bne.n	8015012 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d156      	bne.n	8015012 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	8b5b      	ldrh	r3, [r3, #26]
 8014f68:	f043 0302 	orr.w	r3, r3, #2
 8014f6c:	b29a      	uxth	r2, r3
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f7fe fdbe 	bl	8013af4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014f78:	4b18      	ldr	r3, [pc, #96]	; (8014fdc <tcp_process+0x5d4>)
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	687a      	ldr	r2, [r7, #4]
 8014f7e:	429a      	cmp	r2, r3
 8014f80:	d105      	bne.n	8014f8e <tcp_process+0x586>
 8014f82:	4b16      	ldr	r3, [pc, #88]	; (8014fdc <tcp_process+0x5d4>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	4a14      	ldr	r2, [pc, #80]	; (8014fdc <tcp_process+0x5d4>)
 8014f8a:	6013      	str	r3, [r2, #0]
 8014f8c:	e02e      	b.n	8014fec <tcp_process+0x5e4>
 8014f8e:	4b13      	ldr	r3, [pc, #76]	; (8014fdc <tcp_process+0x5d4>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	617b      	str	r3, [r7, #20]
 8014f94:	e027      	b.n	8014fe6 <tcp_process+0x5de>
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d11f      	bne.n	8014fe0 <tcp_process+0x5d8>
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	68da      	ldr	r2, [r3, #12]
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	60da      	str	r2, [r3, #12]
 8014fa8:	e020      	b.n	8014fec <tcp_process+0x5e4>
 8014faa:	bf00      	nop
 8014fac:	20004590 	.word	0x20004590
 8014fb0:	20004588 	.word	0x20004588
 8014fb4:	2000458e 	.word	0x2000458e
 8014fb8:	20004584 	.word	0x20004584
 8014fbc:	20004574 	.word	0x20004574
 8014fc0:	20007c78 	.word	0x20007c78
 8014fc4:	20007c7c 	.word	0x20007c7c
 8014fc8:	0801d0a8 	.word	0x0801d0a8
 8014fcc:	0801d348 	.word	0x0801d348
 8014fd0:	0801d0f4 	.word	0x0801d0f4
 8014fd4:	2000458c 	.word	0x2000458c
 8014fd8:	20004591 	.word	0x20004591
 8014fdc:	2000b4c4 	.word	0x2000b4c4
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	68db      	ldr	r3, [r3, #12]
 8014fe4:	617b      	str	r3, [r7, #20]
 8014fe6:	697b      	ldr	r3, [r7, #20]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d1d4      	bne.n	8014f96 <tcp_process+0x58e>
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	60da      	str	r2, [r3, #12]
 8014ff2:	4b77      	ldr	r3, [pc, #476]	; (80151d0 <tcp_process+0x7c8>)
 8014ff4:	2201      	movs	r2, #1
 8014ff6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	220a      	movs	r2, #10
 8014ffc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014ffe:	4b75      	ldr	r3, [pc, #468]	; (80151d4 <tcp_process+0x7cc>)
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	60da      	str	r2, [r3, #12]
 8015006:	4a73      	ldr	r2, [pc, #460]	; (80151d4 <tcp_process+0x7cc>)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	6013      	str	r3, [r2, #0]
 801500c:	f002 fd08 	bl	8017a20 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015010:	e0d2      	b.n	80151b8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	8b5b      	ldrh	r3, [r3, #26]
 8015016:	f043 0302 	orr.w	r3, r3, #2
 801501a:	b29a      	uxth	r2, r3
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2208      	movs	r2, #8
 8015024:	751a      	strb	r2, [r3, #20]
      break;
 8015026:	e0c7      	b.n	80151b8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015028:	4b6b      	ldr	r3, [pc, #428]	; (80151d8 <tcp_process+0x7d0>)
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	f003 0310 	and.w	r3, r3, #16
 8015030:	2b00      	cmp	r3, #0
 8015032:	f000 80c1 	beq.w	80151b8 <tcp_process+0x7b0>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801503a:	4b68      	ldr	r3, [pc, #416]	; (80151dc <tcp_process+0x7d4>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	429a      	cmp	r2, r3
 8015040:	f040 80ba 	bne.w	80151b8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015048:	2b00      	cmp	r3, #0
 801504a:	f040 80b5 	bne.w	80151b8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2206      	movs	r2, #6
 8015052:	751a      	strb	r2, [r3, #20]
      break;
 8015054:	e0b0      	b.n	80151b8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f000 f9ca 	bl	80153f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801505c:	4b60      	ldr	r3, [pc, #384]	; (80151e0 <tcp_process+0x7d8>)
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	f003 0320 	and.w	r3, r3, #32
 8015064:	2b00      	cmp	r3, #0
 8015066:	f000 80a9 	beq.w	80151bc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	8b5b      	ldrh	r3, [r3, #26]
 801506e:	f043 0302 	orr.w	r3, r3, #2
 8015072:	b29a      	uxth	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f7fe fd3b 	bl	8013af4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801507e:	4b59      	ldr	r3, [pc, #356]	; (80151e4 <tcp_process+0x7dc>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	429a      	cmp	r2, r3
 8015086:	d105      	bne.n	8015094 <tcp_process+0x68c>
 8015088:	4b56      	ldr	r3, [pc, #344]	; (80151e4 <tcp_process+0x7dc>)
 801508a:	681b      	ldr	r3, [r3, #0]
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	4a55      	ldr	r2, [pc, #340]	; (80151e4 <tcp_process+0x7dc>)
 8015090:	6013      	str	r3, [r2, #0]
 8015092:	e013      	b.n	80150bc <tcp_process+0x6b4>
 8015094:	4b53      	ldr	r3, [pc, #332]	; (80151e4 <tcp_process+0x7dc>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	613b      	str	r3, [r7, #16]
 801509a:	e00c      	b.n	80150b6 <tcp_process+0x6ae>
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d104      	bne.n	80150b0 <tcp_process+0x6a8>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	68da      	ldr	r2, [r3, #12]
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	60da      	str	r2, [r3, #12]
 80150ae:	e005      	b.n	80150bc <tcp_process+0x6b4>
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	68db      	ldr	r3, [r3, #12]
 80150b4:	613b      	str	r3, [r7, #16]
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d1ef      	bne.n	801509c <tcp_process+0x694>
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2200      	movs	r2, #0
 80150c0:	60da      	str	r2, [r3, #12]
 80150c2:	4b43      	ldr	r3, [pc, #268]	; (80151d0 <tcp_process+0x7c8>)
 80150c4:	2201      	movs	r2, #1
 80150c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	220a      	movs	r2, #10
 80150cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80150ce:	4b41      	ldr	r3, [pc, #260]	; (80151d4 <tcp_process+0x7cc>)
 80150d0:	681a      	ldr	r2, [r3, #0]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	60da      	str	r2, [r3, #12]
 80150d6:	4a3f      	ldr	r2, [pc, #252]	; (80151d4 <tcp_process+0x7cc>)
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	6013      	str	r3, [r2, #0]
 80150dc:	f002 fca0 	bl	8017a20 <tcp_timer_needed>
      }
      break;
 80150e0:	e06c      	b.n	80151bc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f000 f984 	bl	80153f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80150e8:	4b3b      	ldr	r3, [pc, #236]	; (80151d8 <tcp_process+0x7d0>)
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	f003 0310 	and.w	r3, r3, #16
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d065      	beq.n	80151c0 <tcp_process+0x7b8>
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80150f8:	4b38      	ldr	r3, [pc, #224]	; (80151dc <tcp_process+0x7d4>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d15f      	bne.n	80151c0 <tcp_process+0x7b8>
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015104:	2b00      	cmp	r3, #0
 8015106:	d15b      	bne.n	80151c0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7fe fcf3 	bl	8013af4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801510e:	4b35      	ldr	r3, [pc, #212]	; (80151e4 <tcp_process+0x7dc>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	429a      	cmp	r2, r3
 8015116:	d105      	bne.n	8015124 <tcp_process+0x71c>
 8015118:	4b32      	ldr	r3, [pc, #200]	; (80151e4 <tcp_process+0x7dc>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	68db      	ldr	r3, [r3, #12]
 801511e:	4a31      	ldr	r2, [pc, #196]	; (80151e4 <tcp_process+0x7dc>)
 8015120:	6013      	str	r3, [r2, #0]
 8015122:	e013      	b.n	801514c <tcp_process+0x744>
 8015124:	4b2f      	ldr	r3, [pc, #188]	; (80151e4 <tcp_process+0x7dc>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	60fb      	str	r3, [r7, #12]
 801512a:	e00c      	b.n	8015146 <tcp_process+0x73e>
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	68db      	ldr	r3, [r3, #12]
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	429a      	cmp	r2, r3
 8015134:	d104      	bne.n	8015140 <tcp_process+0x738>
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	68da      	ldr	r2, [r3, #12]
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	60da      	str	r2, [r3, #12]
 801513e:	e005      	b.n	801514c <tcp_process+0x744>
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	68db      	ldr	r3, [r3, #12]
 8015144:	60fb      	str	r3, [r7, #12]
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d1ef      	bne.n	801512c <tcp_process+0x724>
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2200      	movs	r2, #0
 8015150:	60da      	str	r2, [r3, #12]
 8015152:	4b1f      	ldr	r3, [pc, #124]	; (80151d0 <tcp_process+0x7c8>)
 8015154:	2201      	movs	r2, #1
 8015156:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	220a      	movs	r2, #10
 801515c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801515e:	4b1d      	ldr	r3, [pc, #116]	; (80151d4 <tcp_process+0x7cc>)
 8015160:	681a      	ldr	r2, [r3, #0]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	60da      	str	r2, [r3, #12]
 8015166:	4a1b      	ldr	r2, [pc, #108]	; (80151d4 <tcp_process+0x7cc>)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6013      	str	r3, [r2, #0]
 801516c:	f002 fc58 	bl	8017a20 <tcp_timer_needed>
      }
      break;
 8015170:	e026      	b.n	80151c0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015172:	6878      	ldr	r0, [r7, #4]
 8015174:	f000 f93c 	bl	80153f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015178:	4b17      	ldr	r3, [pc, #92]	; (80151d8 <tcp_process+0x7d0>)
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	f003 0310 	and.w	r3, r3, #16
 8015180:	2b00      	cmp	r3, #0
 8015182:	d01f      	beq.n	80151c4 <tcp_process+0x7bc>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015188:	4b14      	ldr	r3, [pc, #80]	; (80151dc <tcp_process+0x7d4>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	429a      	cmp	r2, r3
 801518e:	d119      	bne.n	80151c4 <tcp_process+0x7bc>
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015194:	2b00      	cmp	r3, #0
 8015196:	d115      	bne.n	80151c4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015198:	4b11      	ldr	r3, [pc, #68]	; (80151e0 <tcp_process+0x7d8>)
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	f043 0310 	orr.w	r3, r3, #16
 80151a0:	b2da      	uxtb	r2, r3
 80151a2:	4b0f      	ldr	r3, [pc, #60]	; (80151e0 <tcp_process+0x7d8>)
 80151a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80151a6:	e00d      	b.n	80151c4 <tcp_process+0x7bc>
    default:
      break;
 80151a8:	bf00      	nop
 80151aa:	e00c      	b.n	80151c6 <tcp_process+0x7be>
      break;
 80151ac:	bf00      	nop
 80151ae:	e00a      	b.n	80151c6 <tcp_process+0x7be>
      break;
 80151b0:	bf00      	nop
 80151b2:	e008      	b.n	80151c6 <tcp_process+0x7be>
      break;
 80151b4:	bf00      	nop
 80151b6:	e006      	b.n	80151c6 <tcp_process+0x7be>
      break;
 80151b8:	bf00      	nop
 80151ba:	e004      	b.n	80151c6 <tcp_process+0x7be>
      break;
 80151bc:	bf00      	nop
 80151be:	e002      	b.n	80151c6 <tcp_process+0x7be>
      break;
 80151c0:	bf00      	nop
 80151c2:	e000      	b.n	80151c6 <tcp_process+0x7be>
      break;
 80151c4:	bf00      	nop
  }
  return ERR_OK;
 80151c6:	2300      	movs	r3, #0
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3724      	adds	r7, #36	; 0x24
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd90      	pop	{r4, r7, pc}
 80151d0:	2000b4c0 	.word	0x2000b4c0
 80151d4:	2000b4d4 	.word	0x2000b4d4
 80151d8:	20004590 	.word	0x20004590
 80151dc:	20004588 	.word	0x20004588
 80151e0:	20004591 	.word	0x20004591
 80151e4:	2000b4c4 	.word	0x2000b4c4

080151e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80151e8:	b590      	push	{r4, r7, lr}
 80151ea:	b085      	sub	sp, #20
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d106      	bne.n	8015206 <tcp_oos_insert_segment+0x1e>
 80151f8:	4b3b      	ldr	r3, [pc, #236]	; (80152e8 <tcp_oos_insert_segment+0x100>)
 80151fa:	f240 421f 	movw	r2, #1055	; 0x41f
 80151fe:	493b      	ldr	r1, [pc, #236]	; (80152ec <tcp_oos_insert_segment+0x104>)
 8015200:	483b      	ldr	r0, [pc, #236]	; (80152f0 <tcp_oos_insert_segment+0x108>)
 8015202:	f005 fe0d 	bl	801ae20 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	68db      	ldr	r3, [r3, #12]
 801520a:	899b      	ldrh	r3, [r3, #12]
 801520c:	b29b      	uxth	r3, r3
 801520e:	4618      	mov	r0, r3
 8015210:	f7fb f8aa 	bl	8010368 <lwip_htons>
 8015214:	4603      	mov	r3, r0
 8015216:	b2db      	uxtb	r3, r3
 8015218:	f003 0301 	and.w	r3, r3, #1
 801521c:	2b00      	cmp	r3, #0
 801521e:	d028      	beq.n	8015272 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015220:	6838      	ldr	r0, [r7, #0]
 8015222:	f7fe fa67 	bl	80136f4 <tcp_segs_free>
    next = NULL;
 8015226:	2300      	movs	r3, #0
 8015228:	603b      	str	r3, [r7, #0]
 801522a:	e056      	b.n	80152da <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	899b      	ldrh	r3, [r3, #12]
 8015232:	b29b      	uxth	r3, r3
 8015234:	4618      	mov	r0, r3
 8015236:	f7fb f897 	bl	8010368 <lwip_htons>
 801523a:	4603      	mov	r3, r0
 801523c:	b2db      	uxtb	r3, r3
 801523e:	f003 0301 	and.w	r3, r3, #1
 8015242:	2b00      	cmp	r3, #0
 8015244:	d00d      	beq.n	8015262 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	68db      	ldr	r3, [r3, #12]
 801524a:	899b      	ldrh	r3, [r3, #12]
 801524c:	b29c      	uxth	r4, r3
 801524e:	2001      	movs	r0, #1
 8015250:	f7fb f88a 	bl	8010368 <lwip_htons>
 8015254:	4603      	mov	r3, r0
 8015256:	461a      	mov	r2, r3
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	68db      	ldr	r3, [r3, #12]
 801525c:	4322      	orrs	r2, r4
 801525e:	b292      	uxth	r2, r2
 8015260:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801526c:	68f8      	ldr	r0, [r7, #12]
 801526e:	f7fe fa55 	bl	801371c <tcp_seg_free>
    while (next &&
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d00e      	beq.n	8015296 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	891b      	ldrh	r3, [r3, #8]
 801527c:	461a      	mov	r2, r3
 801527e:	4b1d      	ldr	r3, [pc, #116]	; (80152f4 <tcp_oos_insert_segment+0x10c>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	441a      	add	r2, r3
 8015284:	683b      	ldr	r3, [r7, #0]
 8015286:	68db      	ldr	r3, [r3, #12]
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	6839      	ldr	r1, [r7, #0]
 801528c:	8909      	ldrh	r1, [r1, #8]
 801528e:	440b      	add	r3, r1
 8015290:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015292:	2b00      	cmp	r3, #0
 8015294:	daca      	bge.n	801522c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d01e      	beq.n	80152da <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	891b      	ldrh	r3, [r3, #8]
 80152a0:	461a      	mov	r2, r3
 80152a2:	4b14      	ldr	r3, [pc, #80]	; (80152f4 <tcp_oos_insert_segment+0x10c>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	441a      	add	r2, r3
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	68db      	ldr	r3, [r3, #12]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	1ad3      	subs	r3, r2, r3
    if (next &&
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	dd12      	ble.n	80152da <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	68db      	ldr	r3, [r3, #12]
 80152b8:	685b      	ldr	r3, [r3, #4]
 80152ba:	b29a      	uxth	r2, r3
 80152bc:	4b0d      	ldr	r3, [pc, #52]	; (80152f4 <tcp_oos_insert_segment+0x10c>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	b29b      	uxth	r3, r3
 80152c2:	1ad3      	subs	r3, r2, r3
 80152c4:	b29a      	uxth	r2, r3
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	685a      	ldr	r2, [r3, #4]
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	891b      	ldrh	r3, [r3, #8]
 80152d2:	4619      	mov	r1, r3
 80152d4:	4610      	mov	r0, r2
 80152d6:	f7fc fcbd 	bl	8011c54 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	683a      	ldr	r2, [r7, #0]
 80152de:	601a      	str	r2, [r3, #0]
}
 80152e0:	bf00      	nop
 80152e2:	3714      	adds	r7, #20
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd90      	pop	{r4, r7, pc}
 80152e8:	0801d0a8 	.word	0x0801d0a8
 80152ec:	0801d368 	.word	0x0801d368
 80152f0:	0801d0f4 	.word	0x0801d0f4
 80152f4:	20004584 	.word	0x20004584

080152f8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80152f8:	b5b0      	push	{r4, r5, r7, lr}
 80152fa:	b086      	sub	sp, #24
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	60f8      	str	r0, [r7, #12]
 8015300:	60b9      	str	r1, [r7, #8]
 8015302:	607a      	str	r2, [r7, #4]
 8015304:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015306:	e03e      	b.n	8015386 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	4618      	mov	r0, r3
 8015318:	f7fc feb0 	bl	801207c <pbuf_clen>
 801531c:	4603      	mov	r3, r0
 801531e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015326:	8a7a      	ldrh	r2, [r7, #18]
 8015328:	429a      	cmp	r2, r3
 801532a:	d906      	bls.n	801533a <tcp_free_acked_segments+0x42>
 801532c:	4b2a      	ldr	r3, [pc, #168]	; (80153d8 <tcp_free_acked_segments+0xe0>)
 801532e:	f240 4257 	movw	r2, #1111	; 0x457
 8015332:	492a      	ldr	r1, [pc, #168]	; (80153dc <tcp_free_acked_segments+0xe4>)
 8015334:	482a      	ldr	r0, [pc, #168]	; (80153e0 <tcp_free_acked_segments+0xe8>)
 8015336:	f005 fd73 	bl	801ae20 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8015340:	8a7b      	ldrh	r3, [r7, #18]
 8015342:	1ad3      	subs	r3, r2, r3
 8015344:	b29a      	uxth	r2, r3
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	891a      	ldrh	r2, [r3, #8]
 8015350:	4b24      	ldr	r3, [pc, #144]	; (80153e4 <tcp_free_acked_segments+0xec>)
 8015352:	881b      	ldrh	r3, [r3, #0]
 8015354:	4413      	add	r3, r2
 8015356:	b29a      	uxth	r2, r3
 8015358:	4b22      	ldr	r3, [pc, #136]	; (80153e4 <tcp_free_acked_segments+0xec>)
 801535a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801535c:	6978      	ldr	r0, [r7, #20]
 801535e:	f7fe f9dd 	bl	801371c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015368:	2b00      	cmp	r3, #0
 801536a:	d00c      	beq.n	8015386 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d109      	bne.n	8015386 <tcp_free_acked_segments+0x8e>
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d106      	bne.n	8015386 <tcp_free_acked_segments+0x8e>
 8015378:	4b17      	ldr	r3, [pc, #92]	; (80153d8 <tcp_free_acked_segments+0xe0>)
 801537a:	f240 4262 	movw	r2, #1122	; 0x462
 801537e:	491a      	ldr	r1, [pc, #104]	; (80153e8 <tcp_free_acked_segments+0xf0>)
 8015380:	4817      	ldr	r0, [pc, #92]	; (80153e0 <tcp_free_acked_segments+0xe8>)
 8015382:	f005 fd4d 	bl	801ae20 <iprintf>
  while (seg_list != NULL &&
 8015386:	68bb      	ldr	r3, [r7, #8]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d020      	beq.n	80153ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	68db      	ldr	r3, [r3, #12]
 8015390:	685b      	ldr	r3, [r3, #4]
 8015392:	4618      	mov	r0, r3
 8015394:	f7fa fffd 	bl	8010392 <lwip_htonl>
 8015398:	4604      	mov	r4, r0
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	891b      	ldrh	r3, [r3, #8]
 801539e:	461d      	mov	r5, r3
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	899b      	ldrh	r3, [r3, #12]
 80153a6:	b29b      	uxth	r3, r3
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7fa ffdd 	bl	8010368 <lwip_htons>
 80153ae:	4603      	mov	r3, r0
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	f003 0303 	and.w	r3, r3, #3
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d001      	beq.n	80153be <tcp_free_acked_segments+0xc6>
 80153ba:	2301      	movs	r3, #1
 80153bc:	e000      	b.n	80153c0 <tcp_free_acked_segments+0xc8>
 80153be:	2300      	movs	r3, #0
 80153c0:	442b      	add	r3, r5
 80153c2:	18e2      	adds	r2, r4, r3
 80153c4:	4b09      	ldr	r3, [pc, #36]	; (80153ec <tcp_free_acked_segments+0xf4>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	dd9c      	ble.n	8015308 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80153ce:	68bb      	ldr	r3, [r7, #8]
}
 80153d0:	4618      	mov	r0, r3
 80153d2:	3718      	adds	r7, #24
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bdb0      	pop	{r4, r5, r7, pc}
 80153d8:	0801d0a8 	.word	0x0801d0a8
 80153dc:	0801d390 	.word	0x0801d390
 80153e0:	0801d0f4 	.word	0x0801d0f4
 80153e4:	2000458c 	.word	0x2000458c
 80153e8:	0801d3b8 	.word	0x0801d3b8
 80153ec:	20004588 	.word	0x20004588

080153f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80153f0:	b5b0      	push	{r4, r5, r7, lr}
 80153f2:	b094      	sub	sp, #80	; 0x50
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80153f8:	2300      	movs	r3, #0
 80153fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d106      	bne.n	8015410 <tcp_receive+0x20>
 8015402:	4ba6      	ldr	r3, [pc, #664]	; (801569c <tcp_receive+0x2ac>)
 8015404:	f240 427b 	movw	r2, #1147	; 0x47b
 8015408:	49a5      	ldr	r1, [pc, #660]	; (80156a0 <tcp_receive+0x2b0>)
 801540a:	48a6      	ldr	r0, [pc, #664]	; (80156a4 <tcp_receive+0x2b4>)
 801540c:	f005 fd08 	bl	801ae20 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	7d1b      	ldrb	r3, [r3, #20]
 8015414:	2b03      	cmp	r3, #3
 8015416:	d806      	bhi.n	8015426 <tcp_receive+0x36>
 8015418:	4ba0      	ldr	r3, [pc, #640]	; (801569c <tcp_receive+0x2ac>)
 801541a:	f240 427c 	movw	r2, #1148	; 0x47c
 801541e:	49a2      	ldr	r1, [pc, #648]	; (80156a8 <tcp_receive+0x2b8>)
 8015420:	48a0      	ldr	r0, [pc, #640]	; (80156a4 <tcp_receive+0x2b4>)
 8015422:	f005 fcfd 	bl	801ae20 <iprintf>

  if (flags & TCP_ACK) {
 8015426:	4ba1      	ldr	r3, [pc, #644]	; (80156ac <tcp_receive+0x2bc>)
 8015428:	781b      	ldrb	r3, [r3, #0]
 801542a:	f003 0310 	and.w	r3, r3, #16
 801542e:	2b00      	cmp	r3, #0
 8015430:	f000 8263 	beq.w	80158fa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801543a:	461a      	mov	r2, r3
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015440:	4413      	add	r3, r2
 8015442:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015448:	4b99      	ldr	r3, [pc, #612]	; (80156b0 <tcp_receive+0x2c0>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	1ad3      	subs	r3, r2, r3
 801544e:	2b00      	cmp	r3, #0
 8015450:	db1b      	blt.n	801548a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015456:	4b96      	ldr	r3, [pc, #600]	; (80156b0 <tcp_receive+0x2c0>)
 8015458:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801545a:	429a      	cmp	r2, r3
 801545c:	d106      	bne.n	801546c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015462:	4b94      	ldr	r3, [pc, #592]	; (80156b4 <tcp_receive+0x2c4>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	1ad3      	subs	r3, r2, r3
 8015468:	2b00      	cmp	r3, #0
 801546a:	db0e      	blt.n	801548a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015470:	4b90      	ldr	r3, [pc, #576]	; (80156b4 <tcp_receive+0x2c4>)
 8015472:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015474:	429a      	cmp	r2, r3
 8015476:	d125      	bne.n	80154c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015478:	4b8f      	ldr	r3, [pc, #572]	; (80156b8 <tcp_receive+0x2c8>)
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	89db      	ldrh	r3, [r3, #14]
 801547e:	b29a      	uxth	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015486:	429a      	cmp	r2, r3
 8015488:	d91c      	bls.n	80154c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801548a:	4b8b      	ldr	r3, [pc, #556]	; (80156b8 <tcp_receive+0x2c8>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	89db      	ldrh	r3, [r3, #14]
 8015490:	b29a      	uxth	r2, r3
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d205      	bcs.n	80154b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80154b4:	4b7e      	ldr	r3, [pc, #504]	; (80156b0 <tcp_receive+0x2c0>)
 80154b6:	681a      	ldr	r2, [r3, #0]
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80154bc:	4b7d      	ldr	r3, [pc, #500]	; (80156b4 <tcp_receive+0x2c4>)
 80154be:	681a      	ldr	r2, [r3, #0]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80154c4:	4b7b      	ldr	r3, [pc, #492]	; (80156b4 <tcp_receive+0x2c4>)
 80154c6:	681a      	ldr	r2, [r3, #0]
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154cc:	1ad3      	subs	r3, r2, r3
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	dc58      	bgt.n	8015584 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80154d2:	4b7a      	ldr	r3, [pc, #488]	; (80156bc <tcp_receive+0x2cc>)
 80154d4:	881b      	ldrh	r3, [r3, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d14b      	bne.n	8015572 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80154de:	687a      	ldr	r2, [r7, #4]
 80154e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80154e4:	4413      	add	r3, r2
 80154e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d142      	bne.n	8015572 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	db3d      	blt.n	8015572 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80154fa:	4b6e      	ldr	r3, [pc, #440]	; (80156b4 <tcp_receive+0x2c4>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	429a      	cmp	r2, r3
 8015500:	d137      	bne.n	8015572 <tcp_receive+0x182>
              found_dupack = 1;
 8015502:	2301      	movs	r3, #1
 8015504:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801550c:	2bff      	cmp	r3, #255	; 0xff
 801550e:	d007      	beq.n	8015520 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015516:	3301      	adds	r3, #1
 8015518:	b2da      	uxtb	r2, r3
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015526:	2b03      	cmp	r3, #3
 8015528:	d91b      	bls.n	8015562 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015534:	4413      	add	r3, r2
 8015536:	b29a      	uxth	r2, r3
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801553e:	429a      	cmp	r2, r3
 8015540:	d30a      	bcc.n	8015558 <tcp_receive+0x168>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801554c:	4413      	add	r3, r2
 801554e:	b29a      	uxth	r2, r3
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015556:	e004      	b.n	8015562 <tcp_receive+0x172>
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801555e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015568:	2b02      	cmp	r3, #2
 801556a:	d902      	bls.n	8015572 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f001 feed 	bl	801734c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015574:	2b00      	cmp	r3, #0
 8015576:	f040 8160 	bne.w	801583a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2200      	movs	r2, #0
 801557e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015582:	e15a      	b.n	801583a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015584:	4b4b      	ldr	r3, [pc, #300]	; (80156b4 <tcp_receive+0x2c4>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801558c:	1ad3      	subs	r3, r2, r3
 801558e:	3b01      	subs	r3, #1
 8015590:	2b00      	cmp	r3, #0
 8015592:	f2c0 814d 	blt.w	8015830 <tcp_receive+0x440>
 8015596:	4b47      	ldr	r3, [pc, #284]	; (80156b4 <tcp_receive+0x2c4>)
 8015598:	681a      	ldr	r2, [r3, #0]
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801559e:	1ad3      	subs	r3, r2, r3
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	f300 8145 	bgt.w	8015830 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	8b5b      	ldrh	r3, [r3, #26]
 80155aa:	f003 0304 	and.w	r3, r3, #4
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d010      	beq.n	80155d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	8b5b      	ldrh	r3, [r3, #26]
 80155b6:	f023 0304 	bic.w	r3, r3, #4
 80155ba:	b29a      	uxth	r2, r3
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	2200      	movs	r2, #0
 80155d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2200      	movs	r2, #0
 80155d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80155e2:	10db      	asrs	r3, r3, #3
 80155e4:	b21b      	sxth	r3, r3
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	4413      	add	r3, r2
 80155f2:	b29b      	uxth	r3, r3
 80155f4:	b21a      	sxth	r2, r3
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80155fc:	4b2d      	ldr	r3, [pc, #180]	; (80156b4 <tcp_receive+0x2c4>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	b29a      	uxth	r2, r3
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015606:	b29b      	uxth	r3, r3
 8015608:	1ad3      	subs	r3, r2, r3
 801560a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	2200      	movs	r2, #0
 8015610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015614:	4b27      	ldr	r3, [pc, #156]	; (80156b4 <tcp_receive+0x2c4>)
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	7d1b      	ldrb	r3, [r3, #20]
 8015620:	2b03      	cmp	r3, #3
 8015622:	f240 8096 	bls.w	8015752 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015632:	429a      	cmp	r2, r3
 8015634:	d244      	bcs.n	80156c0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	8b5b      	ldrh	r3, [r3, #26]
 801563a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801563e:	2b00      	cmp	r3, #0
 8015640:	d001      	beq.n	8015646 <tcp_receive+0x256>
 8015642:	2301      	movs	r3, #1
 8015644:	e000      	b.n	8015648 <tcp_receive+0x258>
 8015646:	2302      	movs	r3, #2
 8015648:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801564c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015650:	b29a      	uxth	r2, r3
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015656:	fb12 f303 	smulbb	r3, r2, r3
 801565a:	b29b      	uxth	r3, r3
 801565c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801565e:	4293      	cmp	r3, r2
 8015660:	bf28      	it	cs
 8015662:	4613      	movcs	r3, r2
 8015664:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801566c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801566e:	4413      	add	r3, r2
 8015670:	b29a      	uxth	r2, r3
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015678:	429a      	cmp	r2, r3
 801567a:	d309      	bcc.n	8015690 <tcp_receive+0x2a0>
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015682:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015684:	4413      	add	r3, r2
 8015686:	b29a      	uxth	r2, r3
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801568e:	e060      	b.n	8015752 <tcp_receive+0x362>
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015696:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801569a:	e05a      	b.n	8015752 <tcp_receive+0x362>
 801569c:	0801d0a8 	.word	0x0801d0a8
 80156a0:	0801d3d8 	.word	0x0801d3d8
 80156a4:	0801d0f4 	.word	0x0801d0f4
 80156a8:	0801d3f4 	.word	0x0801d3f4
 80156ac:	20004590 	.word	0x20004590
 80156b0:	20004584 	.word	0x20004584
 80156b4:	20004588 	.word	0x20004588
 80156b8:	20004574 	.word	0x20004574
 80156bc:	2000458e 	.word	0x2000458e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80156c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80156c8:	4413      	add	r3, r2
 80156ca:	b29a      	uxth	r2, r3
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80156d2:	429a      	cmp	r2, r3
 80156d4:	d309      	bcc.n	80156ea <tcp_receive+0x2fa>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80156dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80156de:	4413      	add	r3, r2
 80156e0:	b29a      	uxth	r2, r3
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80156e8:	e004      	b.n	80156f4 <tcp_receive+0x304>
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015700:	429a      	cmp	r2, r3
 8015702:	d326      	bcc.n	8015752 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015710:	1ad3      	subs	r3, r2, r3
 8015712:	b29a      	uxth	r2, r3
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015724:	4413      	add	r3, r2
 8015726:	b29a      	uxth	r2, r3
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801572e:	429a      	cmp	r2, r3
 8015730:	d30a      	bcc.n	8015748 <tcp_receive+0x358>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801573c:	4413      	add	r3, r2
 801573e:	b29a      	uxth	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015746:	e004      	b.n	8015752 <tcp_receive+0x362>
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801574e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801575a:	4a98      	ldr	r2, [pc, #608]	; (80159bc <tcp_receive+0x5cc>)
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f7ff fdcb 	bl	80152f8 <tcp_free_acked_segments>
 8015762:	4602      	mov	r2, r0
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015770:	4a93      	ldr	r2, [pc, #588]	; (80159c0 <tcp_receive+0x5d0>)
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	f7ff fdc0 	bl	80152f8 <tcp_free_acked_segments>
 8015778:	4602      	mov	r2, r0
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015782:	2b00      	cmp	r3, #0
 8015784:	d104      	bne.n	8015790 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801578c:	861a      	strh	r2, [r3, #48]	; 0x30
 801578e:	e002      	b.n	8015796 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2200      	movs	r2, #0
 8015794:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2200      	movs	r2, #0
 801579a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d103      	bne.n	80157ac <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2200      	movs	r2, #0
 80157a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80157b2:	4b84      	ldr	r3, [pc, #528]	; (80159c4 <tcp_receive+0x5d4>)
 80157b4:	881b      	ldrh	r3, [r3, #0]
 80157b6:	4413      	add	r3, r2
 80157b8:	b29a      	uxth	r2, r3
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	8b5b      	ldrh	r3, [r3, #26]
 80157c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d035      	beq.n	8015838 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d118      	bne.n	8015806 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d00c      	beq.n	80157f6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157e4:	68db      	ldr	r3, [r3, #12]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7fa fdd2 	bl	8010392 <lwip_htonl>
 80157ee:	4603      	mov	r3, r0
 80157f0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	dc20      	bgt.n	8015838 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	8b5b      	ldrh	r3, [r3, #26]
 80157fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80157fe:	b29a      	uxth	r2, r3
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015804:	e018      	b.n	8015838 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801580e:	68db      	ldr	r3, [r3, #12]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	4618      	mov	r0, r3
 8015814:	f7fa fdbd 	bl	8010392 <lwip_htonl>
 8015818:	4603      	mov	r3, r0
 801581a:	1ae3      	subs	r3, r4, r3
 801581c:	2b00      	cmp	r3, #0
 801581e:	dc0b      	bgt.n	8015838 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	8b5b      	ldrh	r3, [r3, #26]
 8015824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015828:	b29a      	uxth	r2, r3
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801582e:	e003      	b.n	8015838 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f001 ff85 	bl	8017740 <tcp_send_empty_ack>
 8015836:	e000      	b.n	801583a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015838:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801583e:	2b00      	cmp	r3, #0
 8015840:	d05b      	beq.n	80158fa <tcp_receive+0x50a>
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015846:	4b60      	ldr	r3, [pc, #384]	; (80159c8 <tcp_receive+0x5d8>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	1ad3      	subs	r3, r2, r3
 801584c:	2b00      	cmp	r3, #0
 801584e:	da54      	bge.n	80158fa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015850:	4b5e      	ldr	r3, [pc, #376]	; (80159cc <tcp_receive+0x5dc>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	b29a      	uxth	r2, r3
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801585a:	b29b      	uxth	r3, r3
 801585c:	1ad3      	subs	r3, r2, r3
 801585e:	b29b      	uxth	r3, r3
 8015860:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015864:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801586e:	10db      	asrs	r3, r3, #3
 8015870:	b21b      	sxth	r3, r3
 8015872:	b29b      	uxth	r3, r3
 8015874:	1ad3      	subs	r3, r2, r3
 8015876:	b29b      	uxth	r3, r3
 8015878:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015882:	b29a      	uxth	r2, r3
 8015884:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015888:	4413      	add	r3, r2
 801588a:	b29b      	uxth	r3, r3
 801588c:	b21a      	sxth	r2, r3
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015892:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015896:	2b00      	cmp	r3, #0
 8015898:	da05      	bge.n	80158a6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801589a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801589e:	425b      	negs	r3, r3
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80158a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80158b0:	109b      	asrs	r3, r3, #2
 80158b2:	b21b      	sxth	r3, r3
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	1ad3      	subs	r3, r2, r3
 80158b8:	b29b      	uxth	r3, r3
 80158ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80158c4:	b29a      	uxth	r2, r3
 80158c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80158ca:	4413      	add	r3, r2
 80158cc:	b29b      	uxth	r3, r3
 80158ce:	b21a      	sxth	r2, r3
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80158da:	10db      	asrs	r3, r3, #3
 80158dc:	b21b      	sxth	r3, r3
 80158de:	b29a      	uxth	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80158e6:	b29b      	uxth	r3, r3
 80158e8:	4413      	add	r3, r2
 80158ea:	b29b      	uxth	r3, r3
 80158ec:	b21a      	sxth	r2, r3
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	2200      	movs	r2, #0
 80158f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80158fa:	4b35      	ldr	r3, [pc, #212]	; (80159d0 <tcp_receive+0x5e0>)
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f000 84e1 	beq.w	80162c6 <tcp_receive+0xed6>
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	7d1b      	ldrb	r3, [r3, #20]
 8015908:	2b06      	cmp	r3, #6
 801590a:	f200 84dc 	bhi.w	80162c6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015912:	4b30      	ldr	r3, [pc, #192]	; (80159d4 <tcp_receive+0x5e4>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	1ad3      	subs	r3, r2, r3
 8015918:	3b01      	subs	r3, #1
 801591a:	2b00      	cmp	r3, #0
 801591c:	f2c0 808e 	blt.w	8015a3c <tcp_receive+0x64c>
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015924:	4b2a      	ldr	r3, [pc, #168]	; (80159d0 <tcp_receive+0x5e0>)
 8015926:	881b      	ldrh	r3, [r3, #0]
 8015928:	4619      	mov	r1, r3
 801592a:	4b2a      	ldr	r3, [pc, #168]	; (80159d4 <tcp_receive+0x5e4>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	440b      	add	r3, r1
 8015930:	1ad3      	subs	r3, r2, r3
 8015932:	3301      	adds	r3, #1
 8015934:	2b00      	cmp	r3, #0
 8015936:	f300 8081 	bgt.w	8015a3c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801593a:	4b27      	ldr	r3, [pc, #156]	; (80159d8 <tcp_receive+0x5e8>)
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015944:	4b23      	ldr	r3, [pc, #140]	; (80159d4 <tcp_receive+0x5e4>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	1ad3      	subs	r3, r2, r3
 801594a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801594c:	4b22      	ldr	r3, [pc, #136]	; (80159d8 <tcp_receive+0x5e8>)
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d106      	bne.n	8015962 <tcp_receive+0x572>
 8015954:	4b21      	ldr	r3, [pc, #132]	; (80159dc <tcp_receive+0x5ec>)
 8015956:	f240 5294 	movw	r2, #1428	; 0x594
 801595a:	4921      	ldr	r1, [pc, #132]	; (80159e0 <tcp_receive+0x5f0>)
 801595c:	4821      	ldr	r0, [pc, #132]	; (80159e4 <tcp_receive+0x5f4>)
 801595e:	f005 fa5f 	bl	801ae20 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015964:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015968:	4293      	cmp	r3, r2
 801596a:	d906      	bls.n	801597a <tcp_receive+0x58a>
 801596c:	4b1b      	ldr	r3, [pc, #108]	; (80159dc <tcp_receive+0x5ec>)
 801596e:	f240 5295 	movw	r2, #1429	; 0x595
 8015972:	491d      	ldr	r1, [pc, #116]	; (80159e8 <tcp_receive+0x5f8>)
 8015974:	481b      	ldr	r0, [pc, #108]	; (80159e4 <tcp_receive+0x5f4>)
 8015976:	f005 fa53 	bl	801ae20 <iprintf>
      off = (u16_t)off32;
 801597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801597c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015980:	4b15      	ldr	r3, [pc, #84]	; (80159d8 <tcp_receive+0x5e8>)
 8015982:	685b      	ldr	r3, [r3, #4]
 8015984:	891b      	ldrh	r3, [r3, #8]
 8015986:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801598a:	429a      	cmp	r2, r3
 801598c:	d906      	bls.n	801599c <tcp_receive+0x5ac>
 801598e:	4b13      	ldr	r3, [pc, #76]	; (80159dc <tcp_receive+0x5ec>)
 8015990:	f240 5297 	movw	r2, #1431	; 0x597
 8015994:	4915      	ldr	r1, [pc, #84]	; (80159ec <tcp_receive+0x5fc>)
 8015996:	4813      	ldr	r0, [pc, #76]	; (80159e4 <tcp_receive+0x5f4>)
 8015998:	f005 fa42 	bl	801ae20 <iprintf>
      inseg.len -= off;
 801599c:	4b0e      	ldr	r3, [pc, #56]	; (80159d8 <tcp_receive+0x5e8>)
 801599e:	891a      	ldrh	r2, [r3, #8]
 80159a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159a4:	1ad3      	subs	r3, r2, r3
 80159a6:	b29a      	uxth	r2, r3
 80159a8:	4b0b      	ldr	r3, [pc, #44]	; (80159d8 <tcp_receive+0x5e8>)
 80159aa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80159ac:	4b0a      	ldr	r3, [pc, #40]	; (80159d8 <tcp_receive+0x5e8>)
 80159ae:	685b      	ldr	r3, [r3, #4]
 80159b0:	891a      	ldrh	r2, [r3, #8]
 80159b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159b6:	1ad3      	subs	r3, r2, r3
 80159b8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80159ba:	e029      	b.n	8015a10 <tcp_receive+0x620>
 80159bc:	0801d410 	.word	0x0801d410
 80159c0:	0801d418 	.word	0x0801d418
 80159c4:	2000458c 	.word	0x2000458c
 80159c8:	20004588 	.word	0x20004588
 80159cc:	2000b4c8 	.word	0x2000b4c8
 80159d0:	2000458e 	.word	0x2000458e
 80159d4:	20004584 	.word	0x20004584
 80159d8:	20004564 	.word	0x20004564
 80159dc:	0801d0a8 	.word	0x0801d0a8
 80159e0:	0801d420 	.word	0x0801d420
 80159e4:	0801d0f4 	.word	0x0801d0f4
 80159e8:	0801d430 	.word	0x0801d430
 80159ec:	0801d440 	.word	0x0801d440
        off -= p->len;
 80159f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159f2:	895b      	ldrh	r3, [r3, #10]
 80159f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80159f8:	1ad3      	subs	r3, r2, r3
 80159fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80159fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015a02:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a06:	2200      	movs	r2, #0
 8015a08:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a12:	895b      	ldrh	r3, [r3, #10]
 8015a14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d8e9      	bhi.n	80159f0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015a1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a20:	4619      	mov	r1, r3
 8015a22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a24:	f7fc fa16 	bl	8011e54 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a2c:	4a91      	ldr	r2, [pc, #580]	; (8015c74 <tcp_receive+0x884>)
 8015a2e:	6013      	str	r3, [r2, #0]
 8015a30:	4b91      	ldr	r3, [pc, #580]	; (8015c78 <tcp_receive+0x888>)
 8015a32:	68db      	ldr	r3, [r3, #12]
 8015a34:	4a8f      	ldr	r2, [pc, #572]	; (8015c74 <tcp_receive+0x884>)
 8015a36:	6812      	ldr	r2, [r2, #0]
 8015a38:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015a3a:	e00d      	b.n	8015a58 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015a3c:	4b8d      	ldr	r3, [pc, #564]	; (8015c74 <tcp_receive+0x884>)
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a44:	1ad3      	subs	r3, r2, r3
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	da06      	bge.n	8015a58 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	8b5b      	ldrh	r3, [r3, #26]
 8015a4e:	f043 0302 	orr.w	r3, r3, #2
 8015a52:	b29a      	uxth	r2, r3
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015a58:	4b86      	ldr	r3, [pc, #536]	; (8015c74 <tcp_receive+0x884>)
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a60:	1ad3      	subs	r3, r2, r3
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	f2c0 842a 	blt.w	80162bc <tcp_receive+0xecc>
 8015a68:	4b82      	ldr	r3, [pc, #520]	; (8015c74 <tcp_receive+0x884>)
 8015a6a:	681a      	ldr	r2, [r3, #0]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a70:	6879      	ldr	r1, [r7, #4]
 8015a72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015a74:	440b      	add	r3, r1
 8015a76:	1ad3      	subs	r3, r2, r3
 8015a78:	3301      	adds	r3, #1
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	f300 841e 	bgt.w	80162bc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a84:	4b7b      	ldr	r3, [pc, #492]	; (8015c74 <tcp_receive+0x884>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	f040 829a 	bne.w	8015fc2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015a8e:	4b7a      	ldr	r3, [pc, #488]	; (8015c78 <tcp_receive+0x888>)
 8015a90:	891c      	ldrh	r4, [r3, #8]
 8015a92:	4b79      	ldr	r3, [pc, #484]	; (8015c78 <tcp_receive+0x888>)
 8015a94:	68db      	ldr	r3, [r3, #12]
 8015a96:	899b      	ldrh	r3, [r3, #12]
 8015a98:	b29b      	uxth	r3, r3
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7fa fc64 	bl	8010368 <lwip_htons>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	f003 0303 	and.w	r3, r3, #3
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d001      	beq.n	8015ab0 <tcp_receive+0x6c0>
 8015aac:	2301      	movs	r3, #1
 8015aae:	e000      	b.n	8015ab2 <tcp_receive+0x6c2>
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	4423      	add	r3, r4
 8015ab4:	b29a      	uxth	r2, r3
 8015ab6:	4b71      	ldr	r3, [pc, #452]	; (8015c7c <tcp_receive+0x88c>)
 8015ab8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015abe:	4b6f      	ldr	r3, [pc, #444]	; (8015c7c <tcp_receive+0x88c>)
 8015ac0:	881b      	ldrh	r3, [r3, #0]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d275      	bcs.n	8015bb2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015ac6:	4b6c      	ldr	r3, [pc, #432]	; (8015c78 <tcp_receive+0x888>)
 8015ac8:	68db      	ldr	r3, [r3, #12]
 8015aca:	899b      	ldrh	r3, [r3, #12]
 8015acc:	b29b      	uxth	r3, r3
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7fa fc4a 	bl	8010368 <lwip_htons>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	b2db      	uxtb	r3, r3
 8015ad8:	f003 0301 	and.w	r3, r3, #1
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d01f      	beq.n	8015b20 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015ae0:	4b65      	ldr	r3, [pc, #404]	; (8015c78 <tcp_receive+0x888>)
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	899b      	ldrh	r3, [r3, #12]
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	b21b      	sxth	r3, r3
 8015aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015aee:	b21c      	sxth	r4, r3
 8015af0:	4b61      	ldr	r3, [pc, #388]	; (8015c78 <tcp_receive+0x888>)
 8015af2:	68db      	ldr	r3, [r3, #12]
 8015af4:	899b      	ldrh	r3, [r3, #12]
 8015af6:	b29b      	uxth	r3, r3
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7fa fc35 	bl	8010368 <lwip_htons>
 8015afe:	4603      	mov	r3, r0
 8015b00:	b2db      	uxtb	r3, r3
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7fa fc2c 	bl	8010368 <lwip_htons>
 8015b10:	4603      	mov	r3, r0
 8015b12:	b21b      	sxth	r3, r3
 8015b14:	4323      	orrs	r3, r4
 8015b16:	b21a      	sxth	r2, r3
 8015b18:	4b57      	ldr	r3, [pc, #348]	; (8015c78 <tcp_receive+0x888>)
 8015b1a:	68db      	ldr	r3, [r3, #12]
 8015b1c:	b292      	uxth	r2, r2
 8015b1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015b24:	4b54      	ldr	r3, [pc, #336]	; (8015c78 <tcp_receive+0x888>)
 8015b26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015b28:	4b53      	ldr	r3, [pc, #332]	; (8015c78 <tcp_receive+0x888>)
 8015b2a:	68db      	ldr	r3, [r3, #12]
 8015b2c:	899b      	ldrh	r3, [r3, #12]
 8015b2e:	b29b      	uxth	r3, r3
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7fa fc19 	bl	8010368 <lwip_htons>
 8015b36:	4603      	mov	r3, r0
 8015b38:	b2db      	uxtb	r3, r3
 8015b3a:	f003 0302 	and.w	r3, r3, #2
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d005      	beq.n	8015b4e <tcp_receive+0x75e>
            inseg.len -= 1;
 8015b42:	4b4d      	ldr	r3, [pc, #308]	; (8015c78 <tcp_receive+0x888>)
 8015b44:	891b      	ldrh	r3, [r3, #8]
 8015b46:	3b01      	subs	r3, #1
 8015b48:	b29a      	uxth	r2, r3
 8015b4a:	4b4b      	ldr	r3, [pc, #300]	; (8015c78 <tcp_receive+0x888>)
 8015b4c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015b4e:	4b4a      	ldr	r3, [pc, #296]	; (8015c78 <tcp_receive+0x888>)
 8015b50:	685a      	ldr	r2, [r3, #4]
 8015b52:	4b49      	ldr	r3, [pc, #292]	; (8015c78 <tcp_receive+0x888>)
 8015b54:	891b      	ldrh	r3, [r3, #8]
 8015b56:	4619      	mov	r1, r3
 8015b58:	4610      	mov	r0, r2
 8015b5a:	f7fc f87b 	bl	8011c54 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015b5e:	4b46      	ldr	r3, [pc, #280]	; (8015c78 <tcp_receive+0x888>)
 8015b60:	891c      	ldrh	r4, [r3, #8]
 8015b62:	4b45      	ldr	r3, [pc, #276]	; (8015c78 <tcp_receive+0x888>)
 8015b64:	68db      	ldr	r3, [r3, #12]
 8015b66:	899b      	ldrh	r3, [r3, #12]
 8015b68:	b29b      	uxth	r3, r3
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	f7fa fbfc 	bl	8010368 <lwip_htons>
 8015b70:	4603      	mov	r3, r0
 8015b72:	b2db      	uxtb	r3, r3
 8015b74:	f003 0303 	and.w	r3, r3, #3
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d001      	beq.n	8015b80 <tcp_receive+0x790>
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	e000      	b.n	8015b82 <tcp_receive+0x792>
 8015b80:	2300      	movs	r3, #0
 8015b82:	4423      	add	r3, r4
 8015b84:	b29a      	uxth	r2, r3
 8015b86:	4b3d      	ldr	r3, [pc, #244]	; (8015c7c <tcp_receive+0x88c>)
 8015b88:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015b8a:	4b3c      	ldr	r3, [pc, #240]	; (8015c7c <tcp_receive+0x88c>)
 8015b8c:	881b      	ldrh	r3, [r3, #0]
 8015b8e:	461a      	mov	r2, r3
 8015b90:	4b38      	ldr	r3, [pc, #224]	; (8015c74 <tcp_receive+0x884>)
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	441a      	add	r2, r3
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b9a:	6879      	ldr	r1, [r7, #4]
 8015b9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b9e:	440b      	add	r3, r1
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d006      	beq.n	8015bb2 <tcp_receive+0x7c2>
 8015ba4:	4b36      	ldr	r3, [pc, #216]	; (8015c80 <tcp_receive+0x890>)
 8015ba6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8015baa:	4936      	ldr	r1, [pc, #216]	; (8015c84 <tcp_receive+0x894>)
 8015bac:	4836      	ldr	r0, [pc, #216]	; (8015c88 <tcp_receive+0x898>)
 8015bae:	f005 f937 	bl	801ae20 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	f000 80e7 	beq.w	8015d8a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015bbc:	4b2e      	ldr	r3, [pc, #184]	; (8015c78 <tcp_receive+0x888>)
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	899b      	ldrh	r3, [r3, #12]
 8015bc2:	b29b      	uxth	r3, r3
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7fa fbcf 	bl	8010368 <lwip_htons>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	b2db      	uxtb	r3, r3
 8015bce:	f003 0301 	and.w	r3, r3, #1
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d010      	beq.n	8015bf8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015bd6:	e00a      	b.n	8015bee <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bdc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015be2:	681a      	ldr	r2, [r3, #0]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015be8:	68f8      	ldr	r0, [r7, #12]
 8015bea:	f7fd fd97 	bl	801371c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d1f0      	bne.n	8015bd8 <tcp_receive+0x7e8>
 8015bf6:	e0c8      	b.n	8015d8a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015bfe:	e052      	b.n	8015ca6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	899b      	ldrh	r3, [r3, #12]
 8015c06:	b29b      	uxth	r3, r3
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f7fa fbad 	bl	8010368 <lwip_htons>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	f003 0301 	and.w	r3, r3, #1
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d03d      	beq.n	8015c96 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015c1a:	4b17      	ldr	r3, [pc, #92]	; (8015c78 <tcp_receive+0x888>)
 8015c1c:	68db      	ldr	r3, [r3, #12]
 8015c1e:	899b      	ldrh	r3, [r3, #12]
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7fa fba0 	bl	8010368 <lwip_htons>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	b2db      	uxtb	r3, r3
 8015c2c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d130      	bne.n	8015c96 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015c34:	4b10      	ldr	r3, [pc, #64]	; (8015c78 <tcp_receive+0x888>)
 8015c36:	68db      	ldr	r3, [r3, #12]
 8015c38:	899b      	ldrh	r3, [r3, #12]
 8015c3a:	b29c      	uxth	r4, r3
 8015c3c:	2001      	movs	r0, #1
 8015c3e:	f7fa fb93 	bl	8010368 <lwip_htons>
 8015c42:	4603      	mov	r3, r0
 8015c44:	461a      	mov	r2, r3
 8015c46:	4b0c      	ldr	r3, [pc, #48]	; (8015c78 <tcp_receive+0x888>)
 8015c48:	68db      	ldr	r3, [r3, #12]
 8015c4a:	4322      	orrs	r2, r4
 8015c4c:	b292      	uxth	r2, r2
 8015c4e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015c50:	4b09      	ldr	r3, [pc, #36]	; (8015c78 <tcp_receive+0x888>)
 8015c52:	891c      	ldrh	r4, [r3, #8]
 8015c54:	4b08      	ldr	r3, [pc, #32]	; (8015c78 <tcp_receive+0x888>)
 8015c56:	68db      	ldr	r3, [r3, #12]
 8015c58:	899b      	ldrh	r3, [r3, #12]
 8015c5a:	b29b      	uxth	r3, r3
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7fa fb83 	bl	8010368 <lwip_htons>
 8015c62:	4603      	mov	r3, r0
 8015c64:	b2db      	uxtb	r3, r3
 8015c66:	f003 0303 	and.w	r3, r3, #3
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d00e      	beq.n	8015c8c <tcp_receive+0x89c>
 8015c6e:	2301      	movs	r3, #1
 8015c70:	e00d      	b.n	8015c8e <tcp_receive+0x89e>
 8015c72:	bf00      	nop
 8015c74:	20004584 	.word	0x20004584
 8015c78:	20004564 	.word	0x20004564
 8015c7c:	2000458e 	.word	0x2000458e
 8015c80:	0801d0a8 	.word	0x0801d0a8
 8015c84:	0801d450 	.word	0x0801d450
 8015c88:	0801d0f4 	.word	0x0801d0f4
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	4423      	add	r3, r4
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	4b98      	ldr	r3, [pc, #608]	; (8015ef4 <tcp_receive+0xb04>)
 8015c94:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c98:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015ca0:	6938      	ldr	r0, [r7, #16]
 8015ca2:	f7fd fd3b 	bl	801371c <tcp_seg_free>
            while (next &&
 8015ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d00e      	beq.n	8015cca <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015cac:	4b91      	ldr	r3, [pc, #580]	; (8015ef4 <tcp_receive+0xb04>)
 8015cae:	881b      	ldrh	r3, [r3, #0]
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	4b91      	ldr	r3, [pc, #580]	; (8015ef8 <tcp_receive+0xb08>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	441a      	add	r2, r3
 8015cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cba:	68db      	ldr	r3, [r3, #12]
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015cc0:	8909      	ldrh	r1, [r1, #8]
 8015cc2:	440b      	add	r3, r1
 8015cc4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	da9a      	bge.n	8015c00 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d059      	beq.n	8015d84 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015cd0:	4b88      	ldr	r3, [pc, #544]	; (8015ef4 <tcp_receive+0xb04>)
 8015cd2:	881b      	ldrh	r3, [r3, #0]
 8015cd4:	461a      	mov	r2, r3
 8015cd6:	4b88      	ldr	r3, [pc, #544]	; (8015ef8 <tcp_receive+0xb08>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	441a      	add	r2, r3
 8015cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cde:	68db      	ldr	r3, [r3, #12]
 8015ce0:	685b      	ldr	r3, [r3, #4]
 8015ce2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	dd4d      	ble.n	8015d84 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cea:	68db      	ldr	r3, [r3, #12]
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	b29a      	uxth	r2, r3
 8015cf0:	4b81      	ldr	r3, [pc, #516]	; (8015ef8 <tcp_receive+0xb08>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	1ad3      	subs	r3, r2, r3
 8015cf8:	b29a      	uxth	r2, r3
 8015cfa:	4b80      	ldr	r3, [pc, #512]	; (8015efc <tcp_receive+0xb0c>)
 8015cfc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015cfe:	4b7f      	ldr	r3, [pc, #508]	; (8015efc <tcp_receive+0xb0c>)
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	899b      	ldrh	r3, [r3, #12]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7fa fb2e 	bl	8010368 <lwip_htons>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	f003 0302 	and.w	r3, r3, #2
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d005      	beq.n	8015d24 <tcp_receive+0x934>
                inseg.len -= 1;
 8015d18:	4b78      	ldr	r3, [pc, #480]	; (8015efc <tcp_receive+0xb0c>)
 8015d1a:	891b      	ldrh	r3, [r3, #8]
 8015d1c:	3b01      	subs	r3, #1
 8015d1e:	b29a      	uxth	r2, r3
 8015d20:	4b76      	ldr	r3, [pc, #472]	; (8015efc <tcp_receive+0xb0c>)
 8015d22:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015d24:	4b75      	ldr	r3, [pc, #468]	; (8015efc <tcp_receive+0xb0c>)
 8015d26:	685a      	ldr	r2, [r3, #4]
 8015d28:	4b74      	ldr	r3, [pc, #464]	; (8015efc <tcp_receive+0xb0c>)
 8015d2a:	891b      	ldrh	r3, [r3, #8]
 8015d2c:	4619      	mov	r1, r3
 8015d2e:	4610      	mov	r0, r2
 8015d30:	f7fb ff90 	bl	8011c54 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015d34:	4b71      	ldr	r3, [pc, #452]	; (8015efc <tcp_receive+0xb0c>)
 8015d36:	891c      	ldrh	r4, [r3, #8]
 8015d38:	4b70      	ldr	r3, [pc, #448]	; (8015efc <tcp_receive+0xb0c>)
 8015d3a:	68db      	ldr	r3, [r3, #12]
 8015d3c:	899b      	ldrh	r3, [r3, #12]
 8015d3e:	b29b      	uxth	r3, r3
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7fa fb11 	bl	8010368 <lwip_htons>
 8015d46:	4603      	mov	r3, r0
 8015d48:	b2db      	uxtb	r3, r3
 8015d4a:	f003 0303 	and.w	r3, r3, #3
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d001      	beq.n	8015d56 <tcp_receive+0x966>
 8015d52:	2301      	movs	r3, #1
 8015d54:	e000      	b.n	8015d58 <tcp_receive+0x968>
 8015d56:	2300      	movs	r3, #0
 8015d58:	4423      	add	r3, r4
 8015d5a:	b29a      	uxth	r2, r3
 8015d5c:	4b65      	ldr	r3, [pc, #404]	; (8015ef4 <tcp_receive+0xb04>)
 8015d5e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015d60:	4b64      	ldr	r3, [pc, #400]	; (8015ef4 <tcp_receive+0xb04>)
 8015d62:	881b      	ldrh	r3, [r3, #0]
 8015d64:	461a      	mov	r2, r3
 8015d66:	4b64      	ldr	r3, [pc, #400]	; (8015ef8 <tcp_receive+0xb08>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	441a      	add	r2, r3
 8015d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d6e:	68db      	ldr	r3, [r3, #12]
 8015d70:	685b      	ldr	r3, [r3, #4]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d006      	beq.n	8015d84 <tcp_receive+0x994>
 8015d76:	4b62      	ldr	r3, [pc, #392]	; (8015f00 <tcp_receive+0xb10>)
 8015d78:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8015d7c:	4961      	ldr	r1, [pc, #388]	; (8015f04 <tcp_receive+0xb14>)
 8015d7e:	4862      	ldr	r0, [pc, #392]	; (8015f08 <tcp_receive+0xb18>)
 8015d80:	f005 f84e 	bl	801ae20 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015d88:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015d8a:	4b5a      	ldr	r3, [pc, #360]	; (8015ef4 <tcp_receive+0xb04>)
 8015d8c:	881b      	ldrh	r3, [r3, #0]
 8015d8e:	461a      	mov	r2, r3
 8015d90:	4b59      	ldr	r3, [pc, #356]	; (8015ef8 <tcp_receive+0xb08>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	441a      	add	r2, r3
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015d9e:	4b55      	ldr	r3, [pc, #340]	; (8015ef4 <tcp_receive+0xb04>)
 8015da0:	881b      	ldrh	r3, [r3, #0]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d206      	bcs.n	8015db4 <tcp_receive+0x9c4>
 8015da6:	4b56      	ldr	r3, [pc, #344]	; (8015f00 <tcp_receive+0xb10>)
 8015da8:	f240 6207 	movw	r2, #1543	; 0x607
 8015dac:	4957      	ldr	r1, [pc, #348]	; (8015f0c <tcp_receive+0xb1c>)
 8015dae:	4856      	ldr	r0, [pc, #344]	; (8015f08 <tcp_receive+0xb18>)
 8015db0:	f005 f836 	bl	801ae20 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015db8:	4b4e      	ldr	r3, [pc, #312]	; (8015ef4 <tcp_receive+0xb04>)
 8015dba:	881b      	ldrh	r3, [r3, #0]
 8015dbc:	1ad3      	subs	r3, r2, r3
 8015dbe:	b29a      	uxth	r2, r3
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015dc4:	6878      	ldr	r0, [r7, #4]
 8015dc6:	f7fc ffcd 	bl	8012d64 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015dca:	4b4c      	ldr	r3, [pc, #304]	; (8015efc <tcp_receive+0xb0c>)
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	891b      	ldrh	r3, [r3, #8]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d006      	beq.n	8015de2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015dd4:	4b49      	ldr	r3, [pc, #292]	; (8015efc <tcp_receive+0xb0c>)
 8015dd6:	685b      	ldr	r3, [r3, #4]
 8015dd8:	4a4d      	ldr	r2, [pc, #308]	; (8015f10 <tcp_receive+0xb20>)
 8015dda:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015ddc:	4b47      	ldr	r3, [pc, #284]	; (8015efc <tcp_receive+0xb0c>)
 8015dde:	2200      	movs	r2, #0
 8015de0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015de2:	4b46      	ldr	r3, [pc, #280]	; (8015efc <tcp_receive+0xb0c>)
 8015de4:	68db      	ldr	r3, [r3, #12]
 8015de6:	899b      	ldrh	r3, [r3, #12]
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7fa fabc 	bl	8010368 <lwip_htons>
 8015df0:	4603      	mov	r3, r0
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	f003 0301 	and.w	r3, r3, #1
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	f000 80b8 	beq.w	8015f6e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015dfe:	4b45      	ldr	r3, [pc, #276]	; (8015f14 <tcp_receive+0xb24>)
 8015e00:	781b      	ldrb	r3, [r3, #0]
 8015e02:	f043 0320 	orr.w	r3, r3, #32
 8015e06:	b2da      	uxtb	r2, r3
 8015e08:	4b42      	ldr	r3, [pc, #264]	; (8015f14 <tcp_receive+0xb24>)
 8015e0a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015e0c:	e0af      	b.n	8015f6e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e12:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e18:	68db      	ldr	r3, [r3, #12]
 8015e1a:	685b      	ldr	r3, [r3, #4]
 8015e1c:	4a36      	ldr	r2, [pc, #216]	; (8015ef8 <tcp_receive+0xb08>)
 8015e1e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	891b      	ldrh	r3, [r3, #8]
 8015e24:	461c      	mov	r4, r3
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	68db      	ldr	r3, [r3, #12]
 8015e2a:	899b      	ldrh	r3, [r3, #12]
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7fa fa9a 	bl	8010368 <lwip_htons>
 8015e34:	4603      	mov	r3, r0
 8015e36:	b2db      	uxtb	r3, r3
 8015e38:	f003 0303 	and.w	r3, r3, #3
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d001      	beq.n	8015e44 <tcp_receive+0xa54>
 8015e40:	2301      	movs	r3, #1
 8015e42:	e000      	b.n	8015e46 <tcp_receive+0xa56>
 8015e44:	2300      	movs	r3, #0
 8015e46:	191a      	adds	r2, r3, r4
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e4c:	441a      	add	r2, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e56:	461c      	mov	r4, r3
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	891b      	ldrh	r3, [r3, #8]
 8015e5c:	461d      	mov	r5, r3
 8015e5e:	68bb      	ldr	r3, [r7, #8]
 8015e60:	68db      	ldr	r3, [r3, #12]
 8015e62:	899b      	ldrh	r3, [r3, #12]
 8015e64:	b29b      	uxth	r3, r3
 8015e66:	4618      	mov	r0, r3
 8015e68:	f7fa fa7e 	bl	8010368 <lwip_htons>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	f003 0303 	and.w	r3, r3, #3
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d001      	beq.n	8015e7c <tcp_receive+0xa8c>
 8015e78:	2301      	movs	r3, #1
 8015e7a:	e000      	b.n	8015e7e <tcp_receive+0xa8e>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	442b      	add	r3, r5
 8015e80:	429c      	cmp	r4, r3
 8015e82:	d206      	bcs.n	8015e92 <tcp_receive+0xaa2>
 8015e84:	4b1e      	ldr	r3, [pc, #120]	; (8015f00 <tcp_receive+0xb10>)
 8015e86:	f240 622c 	movw	r2, #1580	; 0x62c
 8015e8a:	4923      	ldr	r1, [pc, #140]	; (8015f18 <tcp_receive+0xb28>)
 8015e8c:	481e      	ldr	r0, [pc, #120]	; (8015f08 <tcp_receive+0xb18>)
 8015e8e:	f004 ffc7 	bl	801ae20 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	891b      	ldrh	r3, [r3, #8]
 8015e96:	461c      	mov	r4, r3
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	899b      	ldrh	r3, [r3, #12]
 8015e9e:	b29b      	uxth	r3, r3
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7fa fa61 	bl	8010368 <lwip_htons>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	f003 0303 	and.w	r3, r3, #3
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d001      	beq.n	8015eb6 <tcp_receive+0xac6>
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	e000      	b.n	8015eb8 <tcp_receive+0xac8>
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	1919      	adds	r1, r3, r4
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015ebe:	b28b      	uxth	r3, r1
 8015ec0:	1ad3      	subs	r3, r2, r3
 8015ec2:	b29a      	uxth	r2, r3
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f7fc ff4b 	bl	8012d64 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	685b      	ldr	r3, [r3, #4]
 8015ed2:	891b      	ldrh	r3, [r3, #8]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d028      	beq.n	8015f2a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015ed8:	4b0d      	ldr	r3, [pc, #52]	; (8015f10 <tcp_receive+0xb20>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d01d      	beq.n	8015f1c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015ee0:	4b0b      	ldr	r3, [pc, #44]	; (8015f10 <tcp_receive+0xb20>)
 8015ee2:	681a      	ldr	r2, [r3, #0]
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	685b      	ldr	r3, [r3, #4]
 8015ee8:	4619      	mov	r1, r3
 8015eea:	4610      	mov	r0, r2
 8015eec:	f7fc f906 	bl	80120fc <pbuf_cat>
 8015ef0:	e018      	b.n	8015f24 <tcp_receive+0xb34>
 8015ef2:	bf00      	nop
 8015ef4:	2000458e 	.word	0x2000458e
 8015ef8:	20004584 	.word	0x20004584
 8015efc:	20004564 	.word	0x20004564
 8015f00:	0801d0a8 	.word	0x0801d0a8
 8015f04:	0801d488 	.word	0x0801d488
 8015f08:	0801d0f4 	.word	0x0801d0f4
 8015f0c:	0801d4c4 	.word	0x0801d4c4
 8015f10:	20004594 	.word	0x20004594
 8015f14:	20004591 	.word	0x20004591
 8015f18:	0801d4e4 	.word	0x0801d4e4
            } else {
              recv_data = cseg->p;
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	4a70      	ldr	r2, [pc, #448]	; (80160e4 <tcp_receive+0xcf4>)
 8015f22:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	2200      	movs	r2, #0
 8015f28:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	68db      	ldr	r3, [r3, #12]
 8015f2e:	899b      	ldrh	r3, [r3, #12]
 8015f30:	b29b      	uxth	r3, r3
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7fa fa18 	bl	8010368 <lwip_htons>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	f003 0301 	and.w	r3, r3, #1
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d00d      	beq.n	8015f60 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015f44:	4b68      	ldr	r3, [pc, #416]	; (80160e8 <tcp_receive+0xcf8>)
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	f043 0320 	orr.w	r3, r3, #32
 8015f4c:	b2da      	uxtb	r2, r3
 8015f4e:	4b66      	ldr	r3, [pc, #408]	; (80160e8 <tcp_receive+0xcf8>)
 8015f50:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	7d1b      	ldrb	r3, [r3, #20]
 8015f56:	2b04      	cmp	r3, #4
 8015f58:	d102      	bne.n	8015f60 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	2207      	movs	r2, #7
 8015f5e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015f68:	68b8      	ldr	r0, [r7, #8]
 8015f6a:	f7fd fbd7 	bl	801371c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d008      	beq.n	8015f88 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f7a:	68db      	ldr	r3, [r3, #12]
 8015f7c:	685a      	ldr	r2, [r3, #4]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015f82:	429a      	cmp	r2, r3
 8015f84:	f43f af43 	beq.w	8015e0e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	8b5b      	ldrh	r3, [r3, #26]
 8015f8c:	f003 0301 	and.w	r3, r3, #1
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d00e      	beq.n	8015fb2 <tcp_receive+0xbc2>
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	8b5b      	ldrh	r3, [r3, #26]
 8015f98:	f023 0301 	bic.w	r3, r3, #1
 8015f9c:	b29a      	uxth	r2, r3
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	835a      	strh	r2, [r3, #26]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	8b5b      	ldrh	r3, [r3, #26]
 8015fa6:	f043 0302 	orr.w	r3, r3, #2
 8015faa:	b29a      	uxth	r2, r3
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015fb0:	e188      	b.n	80162c4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	8b5b      	ldrh	r3, [r3, #26]
 8015fb6:	f043 0301 	orr.w	r3, r3, #1
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015fc0:	e180      	b.n	80162c4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d106      	bne.n	8015fd8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015fca:	4848      	ldr	r0, [pc, #288]	; (80160ec <tcp_receive+0xcfc>)
 8015fcc:	f7fd fbbe 	bl	801374c <tcp_seg_copy>
 8015fd0:	4602      	mov	r2, r0
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	675a      	str	r2, [r3, #116]	; 0x74
 8015fd6:	e16d      	b.n	80162b4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8015fe2:	e157      	b.n	8016294 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8015fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fe6:	68db      	ldr	r3, [r3, #12]
 8015fe8:	685a      	ldr	r2, [r3, #4]
 8015fea:	4b41      	ldr	r3, [pc, #260]	; (80160f0 <tcp_receive+0xd00>)
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d11d      	bne.n	801602e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015ff2:	4b3e      	ldr	r3, [pc, #248]	; (80160ec <tcp_receive+0xcfc>)
 8015ff4:	891a      	ldrh	r2, [r3, #8]
 8015ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ff8:	891b      	ldrh	r3, [r3, #8]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	f240 814f 	bls.w	801629e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016000:	483a      	ldr	r0, [pc, #232]	; (80160ec <tcp_receive+0xcfc>)
 8016002:	f7fd fba3 	bl	801374c <tcp_seg_copy>
 8016006:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016008:	697b      	ldr	r3, [r7, #20]
 801600a:	2b00      	cmp	r3, #0
 801600c:	f000 8149 	beq.w	80162a2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8016010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016012:	2b00      	cmp	r3, #0
 8016014:	d003      	beq.n	801601e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8016016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016018:	697a      	ldr	r2, [r7, #20]
 801601a:	601a      	str	r2, [r3, #0]
 801601c:	e002      	b.n	8016024 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	697a      	ldr	r2, [r7, #20]
 8016022:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016024:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016026:	6978      	ldr	r0, [r7, #20]
 8016028:	f7ff f8de 	bl	80151e8 <tcp_oos_insert_segment>
                }
                break;
 801602c:	e139      	b.n	80162a2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016030:	2b00      	cmp	r3, #0
 8016032:	d117      	bne.n	8016064 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016034:	4b2e      	ldr	r3, [pc, #184]	; (80160f0 <tcp_receive+0xd00>)
 8016036:	681a      	ldr	r2, [r3, #0]
 8016038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801603a:	68db      	ldr	r3, [r3, #12]
 801603c:	685b      	ldr	r3, [r3, #4]
 801603e:	1ad3      	subs	r3, r2, r3
 8016040:	2b00      	cmp	r3, #0
 8016042:	da57      	bge.n	80160f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016044:	4829      	ldr	r0, [pc, #164]	; (80160ec <tcp_receive+0xcfc>)
 8016046:	f7fd fb81 	bl	801374c <tcp_seg_copy>
 801604a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	2b00      	cmp	r3, #0
 8016050:	f000 8129 	beq.w	80162a6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	69ba      	ldr	r2, [r7, #24]
 8016058:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801605a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801605c:	69b8      	ldr	r0, [r7, #24]
 801605e:	f7ff f8c3 	bl	80151e8 <tcp_oos_insert_segment>
                  }
                  break;
 8016062:	e120      	b.n	80162a6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016064:	4b22      	ldr	r3, [pc, #136]	; (80160f0 <tcp_receive+0xd00>)
 8016066:	681a      	ldr	r2, [r3, #0]
 8016068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	1ad3      	subs	r3, r2, r3
 8016070:	3b01      	subs	r3, #1
 8016072:	2b00      	cmp	r3, #0
 8016074:	db3e      	blt.n	80160f4 <tcp_receive+0xd04>
 8016076:	4b1e      	ldr	r3, [pc, #120]	; (80160f0 <tcp_receive+0xd00>)
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801607c:	68db      	ldr	r3, [r3, #12]
 801607e:	685b      	ldr	r3, [r3, #4]
 8016080:	1ad3      	subs	r3, r2, r3
 8016082:	3301      	adds	r3, #1
 8016084:	2b00      	cmp	r3, #0
 8016086:	dc35      	bgt.n	80160f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016088:	4818      	ldr	r0, [pc, #96]	; (80160ec <tcp_receive+0xcfc>)
 801608a:	f7fd fb5f 	bl	801374c <tcp_seg_copy>
 801608e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016090:	69fb      	ldr	r3, [r7, #28]
 8016092:	2b00      	cmp	r3, #0
 8016094:	f000 8109 	beq.w	80162aa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801609a:	68db      	ldr	r3, [r3, #12]
 801609c:	685b      	ldr	r3, [r3, #4]
 801609e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80160a0:	8912      	ldrh	r2, [r2, #8]
 80160a2:	441a      	add	r2, r3
 80160a4:	4b12      	ldr	r3, [pc, #72]	; (80160f0 <tcp_receive+0xd00>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	1ad3      	subs	r3, r2, r3
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	dd12      	ble.n	80160d4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80160ae:	4b10      	ldr	r3, [pc, #64]	; (80160f0 <tcp_receive+0xd00>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	b29a      	uxth	r2, r3
 80160b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160b6:	68db      	ldr	r3, [r3, #12]
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	1ad3      	subs	r3, r2, r3
 80160be:	b29a      	uxth	r2, r3
 80160c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80160c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160c6:	685a      	ldr	r2, [r3, #4]
 80160c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ca:	891b      	ldrh	r3, [r3, #8]
 80160cc:	4619      	mov	r1, r3
 80160ce:	4610      	mov	r0, r2
 80160d0:	f7fb fdc0 	bl	8011c54 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80160d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d6:	69fa      	ldr	r2, [r7, #28]
 80160d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80160da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80160dc:	69f8      	ldr	r0, [r7, #28]
 80160de:	f7ff f883 	bl	80151e8 <tcp_oos_insert_segment>
                  }
                  break;
 80160e2:	e0e2      	b.n	80162aa <tcp_receive+0xeba>
 80160e4:	20004594 	.word	0x20004594
 80160e8:	20004591 	.word	0x20004591
 80160ec:	20004564 	.word	0x20004564
 80160f0:	20004584 	.word	0x20004584
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80160f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80160f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	f040 80c6 	bne.w	801628e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016102:	4b80      	ldr	r3, [pc, #512]	; (8016304 <tcp_receive+0xf14>)
 8016104:	681a      	ldr	r2, [r3, #0]
 8016106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016108:	68db      	ldr	r3, [r3, #12]
 801610a:	685b      	ldr	r3, [r3, #4]
 801610c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801610e:	2b00      	cmp	r3, #0
 8016110:	f340 80bd 	ble.w	801628e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016116:	68db      	ldr	r3, [r3, #12]
 8016118:	899b      	ldrh	r3, [r3, #12]
 801611a:	b29b      	uxth	r3, r3
 801611c:	4618      	mov	r0, r3
 801611e:	f7fa f923 	bl	8010368 <lwip_htons>
 8016122:	4603      	mov	r3, r0
 8016124:	b2db      	uxtb	r3, r3
 8016126:	f003 0301 	and.w	r3, r3, #1
 801612a:	2b00      	cmp	r3, #0
 801612c:	f040 80bf 	bne.w	80162ae <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016130:	4875      	ldr	r0, [pc, #468]	; (8016308 <tcp_receive+0xf18>)
 8016132:	f7fd fb0b 	bl	801374c <tcp_seg_copy>
 8016136:	4602      	mov	r2, r0
 8016138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801613a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	2b00      	cmp	r3, #0
 8016142:	f000 80b6 	beq.w	80162b2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016148:	68db      	ldr	r3, [r3, #12]
 801614a:	685b      	ldr	r3, [r3, #4]
 801614c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801614e:	8912      	ldrh	r2, [r2, #8]
 8016150:	441a      	add	r2, r3
 8016152:	4b6c      	ldr	r3, [pc, #432]	; (8016304 <tcp_receive+0xf14>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	1ad3      	subs	r3, r2, r3
 8016158:	2b00      	cmp	r3, #0
 801615a:	dd12      	ble.n	8016182 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801615c:	4b69      	ldr	r3, [pc, #420]	; (8016304 <tcp_receive+0xf14>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	b29a      	uxth	r2, r3
 8016162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016164:	68db      	ldr	r3, [r3, #12]
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	b29b      	uxth	r3, r3
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	b29a      	uxth	r2, r3
 801616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016170:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016174:	685a      	ldr	r2, [r3, #4]
 8016176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016178:	891b      	ldrh	r3, [r3, #8]
 801617a:	4619      	mov	r1, r3
 801617c:	4610      	mov	r0, r2
 801617e:	f7fb fd69 	bl	8011c54 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016182:	4b62      	ldr	r3, [pc, #392]	; (801630c <tcp_receive+0xf1c>)
 8016184:	881b      	ldrh	r3, [r3, #0]
 8016186:	461a      	mov	r2, r3
 8016188:	4b5e      	ldr	r3, [pc, #376]	; (8016304 <tcp_receive+0xf14>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	441a      	add	r2, r3
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016192:	6879      	ldr	r1, [r7, #4]
 8016194:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016196:	440b      	add	r3, r1
 8016198:	1ad3      	subs	r3, r2, r3
 801619a:	2b00      	cmp	r3, #0
 801619c:	f340 8089 	ble.w	80162b2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80161a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	68db      	ldr	r3, [r3, #12]
 80161a6:	899b      	ldrh	r3, [r3, #12]
 80161a8:	b29b      	uxth	r3, r3
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7fa f8dc 	bl	8010368 <lwip_htons>
 80161b0:	4603      	mov	r3, r0
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	f003 0301 	and.w	r3, r3, #1
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d022      	beq.n	8016202 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80161bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	68db      	ldr	r3, [r3, #12]
 80161c2:	899b      	ldrh	r3, [r3, #12]
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	b21b      	sxth	r3, r3
 80161c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80161cc:	b21c      	sxth	r4, r3
 80161ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	68db      	ldr	r3, [r3, #12]
 80161d4:	899b      	ldrh	r3, [r3, #12]
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	4618      	mov	r0, r3
 80161da:	f7fa f8c5 	bl	8010368 <lwip_htons>
 80161de:	4603      	mov	r3, r0
 80161e0:	b2db      	uxtb	r3, r3
 80161e2:	b29b      	uxth	r3, r3
 80161e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80161e8:	b29b      	uxth	r3, r3
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7fa f8bc 	bl	8010368 <lwip_htons>
 80161f0:	4603      	mov	r3, r0
 80161f2:	b21b      	sxth	r3, r3
 80161f4:	4323      	orrs	r3, r4
 80161f6:	b21a      	sxth	r2, r3
 80161f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	68db      	ldr	r3, [r3, #12]
 80161fe:	b292      	uxth	r2, r2
 8016200:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016206:	b29a      	uxth	r2, r3
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801620c:	4413      	add	r3, r2
 801620e:	b299      	uxth	r1, r3
 8016210:	4b3c      	ldr	r3, [pc, #240]	; (8016304 <tcp_receive+0xf14>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	b29a      	uxth	r2, r3
 8016216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	1a8a      	subs	r2, r1, r2
 801621c:	b292      	uxth	r2, r2
 801621e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	685a      	ldr	r2, [r3, #4]
 8016226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	891b      	ldrh	r3, [r3, #8]
 801622c:	4619      	mov	r1, r3
 801622e:	4610      	mov	r0, r2
 8016230:	f7fb fd10 	bl	8011c54 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	891c      	ldrh	r4, [r3, #8]
 801623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	899b      	ldrh	r3, [r3, #12]
 8016242:	b29b      	uxth	r3, r3
 8016244:	4618      	mov	r0, r3
 8016246:	f7fa f88f 	bl	8010368 <lwip_htons>
 801624a:	4603      	mov	r3, r0
 801624c:	b2db      	uxtb	r3, r3
 801624e:	f003 0303 	and.w	r3, r3, #3
 8016252:	2b00      	cmp	r3, #0
 8016254:	d001      	beq.n	801625a <tcp_receive+0xe6a>
 8016256:	2301      	movs	r3, #1
 8016258:	e000      	b.n	801625c <tcp_receive+0xe6c>
 801625a:	2300      	movs	r3, #0
 801625c:	4423      	add	r3, r4
 801625e:	b29a      	uxth	r2, r3
 8016260:	4b2a      	ldr	r3, [pc, #168]	; (801630c <tcp_receive+0xf1c>)
 8016262:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016264:	4b29      	ldr	r3, [pc, #164]	; (801630c <tcp_receive+0xf1c>)
 8016266:	881b      	ldrh	r3, [r3, #0]
 8016268:	461a      	mov	r2, r3
 801626a:	4b26      	ldr	r3, [pc, #152]	; (8016304 <tcp_receive+0xf14>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	441a      	add	r2, r3
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016274:	6879      	ldr	r1, [r7, #4]
 8016276:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016278:	440b      	add	r3, r1
 801627a:	429a      	cmp	r2, r3
 801627c:	d019      	beq.n	80162b2 <tcp_receive+0xec2>
 801627e:	4b24      	ldr	r3, [pc, #144]	; (8016310 <tcp_receive+0xf20>)
 8016280:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016284:	4923      	ldr	r1, [pc, #140]	; (8016314 <tcp_receive+0xf24>)
 8016286:	4824      	ldr	r0, [pc, #144]	; (8016318 <tcp_receive+0xf28>)
 8016288:	f004 fdca 	bl	801ae20 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801628c:	e011      	b.n	80162b2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	63bb      	str	r3, [r7, #56]	; 0x38
 8016294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016296:	2b00      	cmp	r3, #0
 8016298:	f47f aea4 	bne.w	8015fe4 <tcp_receive+0xbf4>
 801629c:	e00a      	b.n	80162b4 <tcp_receive+0xec4>
                break;
 801629e:	bf00      	nop
 80162a0:	e008      	b.n	80162b4 <tcp_receive+0xec4>
                break;
 80162a2:	bf00      	nop
 80162a4:	e006      	b.n	80162b4 <tcp_receive+0xec4>
                  break;
 80162a6:	bf00      	nop
 80162a8:	e004      	b.n	80162b4 <tcp_receive+0xec4>
                  break;
 80162aa:	bf00      	nop
 80162ac:	e002      	b.n	80162b4 <tcp_receive+0xec4>
                  break;
 80162ae:	bf00      	nop
 80162b0:	e000      	b.n	80162b4 <tcp_receive+0xec4>
                break;
 80162b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f001 fa43 	bl	8017740 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80162ba:	e003      	b.n	80162c4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f001 fa3f 	bl	8017740 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80162c2:	e01a      	b.n	80162fa <tcp_receive+0xf0a>
 80162c4:	e019      	b.n	80162fa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80162c6:	4b0f      	ldr	r3, [pc, #60]	; (8016304 <tcp_receive+0xf14>)
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ce:	1ad3      	subs	r3, r2, r3
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	db0a      	blt.n	80162ea <tcp_receive+0xefa>
 80162d4:	4b0b      	ldr	r3, [pc, #44]	; (8016304 <tcp_receive+0xf14>)
 80162d6:	681a      	ldr	r2, [r3, #0]
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162dc:	6879      	ldr	r1, [r7, #4]
 80162de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80162e0:	440b      	add	r3, r1
 80162e2:	1ad3      	subs	r3, r2, r3
 80162e4:	3301      	adds	r3, #1
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	dd07      	ble.n	80162fa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	8b5b      	ldrh	r3, [r3, #26]
 80162ee:	f043 0302 	orr.w	r3, r3, #2
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80162f8:	e7ff      	b.n	80162fa <tcp_receive+0xf0a>
 80162fa:	bf00      	nop
 80162fc:	3750      	adds	r7, #80	; 0x50
 80162fe:	46bd      	mov	sp, r7
 8016300:	bdb0      	pop	{r4, r5, r7, pc}
 8016302:	bf00      	nop
 8016304:	20004584 	.word	0x20004584
 8016308:	20004564 	.word	0x20004564
 801630c:	2000458e 	.word	0x2000458e
 8016310:	0801d0a8 	.word	0x0801d0a8
 8016314:	0801d450 	.word	0x0801d450
 8016318:	0801d0f4 	.word	0x0801d0f4

0801631c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801631c:	b480      	push	{r7}
 801631e:	b083      	sub	sp, #12
 8016320:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016322:	4b15      	ldr	r3, [pc, #84]	; (8016378 <tcp_get_next_optbyte+0x5c>)
 8016324:	881b      	ldrh	r3, [r3, #0]
 8016326:	1c5a      	adds	r2, r3, #1
 8016328:	b291      	uxth	r1, r2
 801632a:	4a13      	ldr	r2, [pc, #76]	; (8016378 <tcp_get_next_optbyte+0x5c>)
 801632c:	8011      	strh	r1, [r2, #0]
 801632e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016330:	4b12      	ldr	r3, [pc, #72]	; (801637c <tcp_get_next_optbyte+0x60>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d004      	beq.n	8016342 <tcp_get_next_optbyte+0x26>
 8016338:	4b11      	ldr	r3, [pc, #68]	; (8016380 <tcp_get_next_optbyte+0x64>)
 801633a:	881b      	ldrh	r3, [r3, #0]
 801633c:	88fa      	ldrh	r2, [r7, #6]
 801633e:	429a      	cmp	r2, r3
 8016340:	d208      	bcs.n	8016354 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016342:	4b10      	ldr	r3, [pc, #64]	; (8016384 <tcp_get_next_optbyte+0x68>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	3314      	adds	r3, #20
 8016348:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801634a:	88fb      	ldrh	r3, [r7, #6]
 801634c:	683a      	ldr	r2, [r7, #0]
 801634e:	4413      	add	r3, r2
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	e00b      	b.n	801636c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016354:	88fb      	ldrh	r3, [r7, #6]
 8016356:	b2da      	uxtb	r2, r3
 8016358:	4b09      	ldr	r3, [pc, #36]	; (8016380 <tcp_get_next_optbyte+0x64>)
 801635a:	881b      	ldrh	r3, [r3, #0]
 801635c:	b2db      	uxtb	r3, r3
 801635e:	1ad3      	subs	r3, r2, r3
 8016360:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016362:	4b06      	ldr	r3, [pc, #24]	; (801637c <tcp_get_next_optbyte+0x60>)
 8016364:	681a      	ldr	r2, [r3, #0]
 8016366:	797b      	ldrb	r3, [r7, #5]
 8016368:	4413      	add	r3, r2
 801636a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801636c:	4618      	mov	r0, r3
 801636e:	370c      	adds	r7, #12
 8016370:	46bd      	mov	sp, r7
 8016372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016376:	4770      	bx	lr
 8016378:	20004580 	.word	0x20004580
 801637c:	2000457c 	.word	0x2000457c
 8016380:	2000457a 	.word	0x2000457a
 8016384:	20004574 	.word	0x20004574

08016388 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d106      	bne.n	80163a4 <tcp_parseopt+0x1c>
 8016396:	4b31      	ldr	r3, [pc, #196]	; (801645c <tcp_parseopt+0xd4>)
 8016398:	f240 727d 	movw	r2, #1917	; 0x77d
 801639c:	4930      	ldr	r1, [pc, #192]	; (8016460 <tcp_parseopt+0xd8>)
 801639e:	4831      	ldr	r0, [pc, #196]	; (8016464 <tcp_parseopt+0xdc>)
 80163a0:	f004 fd3e 	bl	801ae20 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80163a4:	4b30      	ldr	r3, [pc, #192]	; (8016468 <tcp_parseopt+0xe0>)
 80163a6:	881b      	ldrh	r3, [r3, #0]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d053      	beq.n	8016454 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80163ac:	4b2f      	ldr	r3, [pc, #188]	; (801646c <tcp_parseopt+0xe4>)
 80163ae:	2200      	movs	r2, #0
 80163b0:	801a      	strh	r2, [r3, #0]
 80163b2:	e043      	b.n	801643c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80163b4:	f7ff ffb2 	bl	801631c <tcp_get_next_optbyte>
 80163b8:	4603      	mov	r3, r0
 80163ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80163bc:	7bfb      	ldrb	r3, [r7, #15]
 80163be:	2b01      	cmp	r3, #1
 80163c0:	d03c      	beq.n	801643c <tcp_parseopt+0xb4>
 80163c2:	2b02      	cmp	r3, #2
 80163c4:	d002      	beq.n	80163cc <tcp_parseopt+0x44>
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d03f      	beq.n	801644a <tcp_parseopt+0xc2>
 80163ca:	e026      	b.n	801641a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80163cc:	f7ff ffa6 	bl	801631c <tcp_get_next_optbyte>
 80163d0:	4603      	mov	r3, r0
 80163d2:	2b04      	cmp	r3, #4
 80163d4:	d13b      	bne.n	801644e <tcp_parseopt+0xc6>
 80163d6:	4b25      	ldr	r3, [pc, #148]	; (801646c <tcp_parseopt+0xe4>)
 80163d8:	881b      	ldrh	r3, [r3, #0]
 80163da:	3302      	adds	r3, #2
 80163dc:	4a22      	ldr	r2, [pc, #136]	; (8016468 <tcp_parseopt+0xe0>)
 80163de:	8812      	ldrh	r2, [r2, #0]
 80163e0:	4293      	cmp	r3, r2
 80163e2:	dc34      	bgt.n	801644e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80163e4:	f7ff ff9a 	bl	801631c <tcp_get_next_optbyte>
 80163e8:	4603      	mov	r3, r0
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	021b      	lsls	r3, r3, #8
 80163ee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80163f0:	f7ff ff94 	bl	801631c <tcp_get_next_optbyte>
 80163f4:	4603      	mov	r3, r0
 80163f6:	b29a      	uxth	r2, r3
 80163f8:	89bb      	ldrh	r3, [r7, #12]
 80163fa:	4313      	orrs	r3, r2
 80163fc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80163fe:	89bb      	ldrh	r3, [r7, #12]
 8016400:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016404:	d804      	bhi.n	8016410 <tcp_parseopt+0x88>
 8016406:	89bb      	ldrh	r3, [r7, #12]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d001      	beq.n	8016410 <tcp_parseopt+0x88>
 801640c:	89ba      	ldrh	r2, [r7, #12]
 801640e:	e001      	b.n	8016414 <tcp_parseopt+0x8c>
 8016410:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016418:	e010      	b.n	801643c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801641a:	f7ff ff7f 	bl	801631c <tcp_get_next_optbyte>
 801641e:	4603      	mov	r3, r0
 8016420:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016422:	7afb      	ldrb	r3, [r7, #11]
 8016424:	2b01      	cmp	r3, #1
 8016426:	d914      	bls.n	8016452 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016428:	7afb      	ldrb	r3, [r7, #11]
 801642a:	b29a      	uxth	r2, r3
 801642c:	4b0f      	ldr	r3, [pc, #60]	; (801646c <tcp_parseopt+0xe4>)
 801642e:	881b      	ldrh	r3, [r3, #0]
 8016430:	4413      	add	r3, r2
 8016432:	b29b      	uxth	r3, r3
 8016434:	3b02      	subs	r3, #2
 8016436:	b29a      	uxth	r2, r3
 8016438:	4b0c      	ldr	r3, [pc, #48]	; (801646c <tcp_parseopt+0xe4>)
 801643a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801643c:	4b0b      	ldr	r3, [pc, #44]	; (801646c <tcp_parseopt+0xe4>)
 801643e:	881a      	ldrh	r2, [r3, #0]
 8016440:	4b09      	ldr	r3, [pc, #36]	; (8016468 <tcp_parseopt+0xe0>)
 8016442:	881b      	ldrh	r3, [r3, #0]
 8016444:	429a      	cmp	r2, r3
 8016446:	d3b5      	bcc.n	80163b4 <tcp_parseopt+0x2c>
 8016448:	e004      	b.n	8016454 <tcp_parseopt+0xcc>
          return;
 801644a:	bf00      	nop
 801644c:	e002      	b.n	8016454 <tcp_parseopt+0xcc>
            return;
 801644e:	bf00      	nop
 8016450:	e000      	b.n	8016454 <tcp_parseopt+0xcc>
            return;
 8016452:	bf00      	nop
      }
    }
  }
}
 8016454:	3710      	adds	r7, #16
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	0801d0a8 	.word	0x0801d0a8
 8016460:	0801d50c 	.word	0x0801d50c
 8016464:	0801d0f4 	.word	0x0801d0f4
 8016468:	20004578 	.word	0x20004578
 801646c:	20004580 	.word	0x20004580

08016470 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016470:	b480      	push	{r7}
 8016472:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016474:	4b05      	ldr	r3, [pc, #20]	; (801648c <tcp_trigger_input_pcb_close+0x1c>)
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	f043 0310 	orr.w	r3, r3, #16
 801647c:	b2da      	uxtb	r2, r3
 801647e:	4b03      	ldr	r3, [pc, #12]	; (801648c <tcp_trigger_input_pcb_close+0x1c>)
 8016480:	701a      	strb	r2, [r3, #0]
}
 8016482:	bf00      	nop
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr
 801648c:	20004591 	.word	0x20004591

08016490 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b084      	sub	sp, #16
 8016494:	af00      	add	r7, sp, #0
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	60b9      	str	r1, [r7, #8]
 801649a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d00a      	beq.n	80164b8 <tcp_route+0x28>
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	7a1b      	ldrb	r3, [r3, #8]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d006      	beq.n	80164b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	7a1b      	ldrb	r3, [r3, #8]
 80164ae:	4618      	mov	r0, r3
 80164b0:	f7fb f9cc 	bl	801184c <netif_get_by_index>
 80164b4:	4603      	mov	r3, r0
 80164b6:	e003      	b.n	80164c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f003 f975 	bl	80197a8 <ip4_route>
 80164be:	4603      	mov	r3, r0
  }
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	3710      	adds	r7, #16
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}

080164c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80164c8:	b590      	push	{r4, r7, lr}
 80164ca:	b087      	sub	sp, #28
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	603b      	str	r3, [r7, #0]
 80164d4:	4613      	mov	r3, r2
 80164d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d105      	bne.n	80164ea <tcp_create_segment+0x22>
 80164de:	4b44      	ldr	r3, [pc, #272]	; (80165f0 <tcp_create_segment+0x128>)
 80164e0:	22a3      	movs	r2, #163	; 0xa3
 80164e2:	4944      	ldr	r1, [pc, #272]	; (80165f4 <tcp_create_segment+0x12c>)
 80164e4:	4844      	ldr	r0, [pc, #272]	; (80165f8 <tcp_create_segment+0x130>)
 80164e6:	f004 fc9b 	bl	801ae20 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80164ea:	68bb      	ldr	r3, [r7, #8]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d105      	bne.n	80164fc <tcp_create_segment+0x34>
 80164f0:	4b3f      	ldr	r3, [pc, #252]	; (80165f0 <tcp_create_segment+0x128>)
 80164f2:	22a4      	movs	r2, #164	; 0xa4
 80164f4:	4941      	ldr	r1, [pc, #260]	; (80165fc <tcp_create_segment+0x134>)
 80164f6:	4840      	ldr	r0, [pc, #256]	; (80165f8 <tcp_create_segment+0x130>)
 80164f8:	f004 fc92 	bl	801ae20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80164fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016500:	009b      	lsls	r3, r3, #2
 8016502:	b2db      	uxtb	r3, r3
 8016504:	f003 0304 	and.w	r3, r3, #4
 8016508:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801650a:	2003      	movs	r0, #3
 801650c:	f7fa feae 	bl	801126c <memp_malloc>
 8016510:	6138      	str	r0, [r7, #16]
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d104      	bne.n	8016522 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016518:	68b8      	ldr	r0, [r7, #8]
 801651a:	f7fb fd21 	bl	8011f60 <pbuf_free>
    return NULL;
 801651e:	2300      	movs	r3, #0
 8016520:	e061      	b.n	80165e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016528:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801652a:	693b      	ldr	r3, [r7, #16]
 801652c:	2200      	movs	r2, #0
 801652e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	68ba      	ldr	r2, [r7, #8]
 8016534:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	891a      	ldrh	r2, [r3, #8]
 801653a:	7dfb      	ldrb	r3, [r7, #23]
 801653c:	b29b      	uxth	r3, r3
 801653e:	429a      	cmp	r2, r3
 8016540:	d205      	bcs.n	801654e <tcp_create_segment+0x86>
 8016542:	4b2b      	ldr	r3, [pc, #172]	; (80165f0 <tcp_create_segment+0x128>)
 8016544:	22b0      	movs	r2, #176	; 0xb0
 8016546:	492e      	ldr	r1, [pc, #184]	; (8016600 <tcp_create_segment+0x138>)
 8016548:	482b      	ldr	r0, [pc, #172]	; (80165f8 <tcp_create_segment+0x130>)
 801654a:	f004 fc69 	bl	801ae20 <iprintf>
  seg->len = p->tot_len - optlen;
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	891a      	ldrh	r2, [r3, #8]
 8016552:	7dfb      	ldrb	r3, [r7, #23]
 8016554:	b29b      	uxth	r3, r3
 8016556:	1ad3      	subs	r3, r2, r3
 8016558:	b29a      	uxth	r2, r3
 801655a:	693b      	ldr	r3, [r7, #16]
 801655c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801655e:	2114      	movs	r1, #20
 8016560:	68b8      	ldr	r0, [r7, #8]
 8016562:	f7fb fc67 	bl	8011e34 <pbuf_add_header>
 8016566:	4603      	mov	r3, r0
 8016568:	2b00      	cmp	r3, #0
 801656a:	d004      	beq.n	8016576 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801656c:	6938      	ldr	r0, [r7, #16]
 801656e:	f7fd f8d5 	bl	801371c <tcp_seg_free>
    return NULL;
 8016572:	2300      	movs	r3, #0
 8016574:	e037      	b.n	80165e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	685b      	ldr	r3, [r3, #4]
 801657a:	685a      	ldr	r2, [r3, #4]
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	8ada      	ldrh	r2, [r3, #22]
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	68dc      	ldr	r4, [r3, #12]
 8016588:	4610      	mov	r0, r2
 801658a:	f7f9 feed 	bl	8010368 <lwip_htons>
 801658e:	4603      	mov	r3, r0
 8016590:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	8b1a      	ldrh	r2, [r3, #24]
 8016596:	693b      	ldr	r3, [r7, #16]
 8016598:	68dc      	ldr	r4, [r3, #12]
 801659a:	4610      	mov	r0, r2
 801659c:	f7f9 fee4 	bl	8010368 <lwip_htons>
 80165a0:	4603      	mov	r3, r0
 80165a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80165a4:	693b      	ldr	r3, [r7, #16]
 80165a6:	68dc      	ldr	r4, [r3, #12]
 80165a8:	6838      	ldr	r0, [r7, #0]
 80165aa:	f7f9 fef2 	bl	8010392 <lwip_htonl>
 80165ae:	4603      	mov	r3, r0
 80165b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80165b2:	7dfb      	ldrb	r3, [r7, #23]
 80165b4:	089b      	lsrs	r3, r3, #2
 80165b6:	b2db      	uxtb	r3, r3
 80165b8:	b29b      	uxth	r3, r3
 80165ba:	3305      	adds	r3, #5
 80165bc:	b29b      	uxth	r3, r3
 80165be:	031b      	lsls	r3, r3, #12
 80165c0:	b29a      	uxth	r2, r3
 80165c2:	79fb      	ldrb	r3, [r7, #7]
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	4313      	orrs	r3, r2
 80165c8:	b29a      	uxth	r2, r3
 80165ca:	693b      	ldr	r3, [r7, #16]
 80165cc:	68dc      	ldr	r4, [r3, #12]
 80165ce:	4610      	mov	r0, r2
 80165d0:	f7f9 feca 	bl	8010368 <lwip_htons>
 80165d4:	4603      	mov	r3, r0
 80165d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80165d8:	693b      	ldr	r3, [r7, #16]
 80165da:	68db      	ldr	r3, [r3, #12]
 80165dc:	2200      	movs	r2, #0
 80165de:	749a      	strb	r2, [r3, #18]
 80165e0:	2200      	movs	r2, #0
 80165e2:	74da      	strb	r2, [r3, #19]
  return seg;
 80165e4:	693b      	ldr	r3, [r7, #16]
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	371c      	adds	r7, #28
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd90      	pop	{r4, r7, pc}
 80165ee:	bf00      	nop
 80165f0:	0801d528 	.word	0x0801d528
 80165f4:	0801d55c 	.word	0x0801d55c
 80165f8:	0801d57c 	.word	0x0801d57c
 80165fc:	0801d5a4 	.word	0x0801d5a4
 8016600:	0801d5c8 	.word	0x0801d5c8

08016604 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016604:	b590      	push	{r4, r7, lr}
 8016606:	b08b      	sub	sp, #44	; 0x2c
 8016608:	af02      	add	r7, sp, #8
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	460b      	mov	r3, r1
 801660e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016610:	2300      	movs	r3, #0
 8016612:	61fb      	str	r3, [r7, #28]
 8016614:	2300      	movs	r3, #0
 8016616:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016618:	2300      	movs	r3, #0
 801661a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d106      	bne.n	8016630 <tcp_split_unsent_seg+0x2c>
 8016622:	4b95      	ldr	r3, [pc, #596]	; (8016878 <tcp_split_unsent_seg+0x274>)
 8016624:	f240 324b 	movw	r2, #843	; 0x34b
 8016628:	4994      	ldr	r1, [pc, #592]	; (801687c <tcp_split_unsent_seg+0x278>)
 801662a:	4895      	ldr	r0, [pc, #596]	; (8016880 <tcp_split_unsent_seg+0x27c>)
 801662c:	f004 fbf8 	bl	801ae20 <iprintf>

  useg = pcb->unsent;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016634:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016636:	697b      	ldr	r3, [r7, #20]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d102      	bne.n	8016642 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801663c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016640:	e116      	b.n	8016870 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016642:	887b      	ldrh	r3, [r7, #2]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d109      	bne.n	801665c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016648:	4b8b      	ldr	r3, [pc, #556]	; (8016878 <tcp_split_unsent_seg+0x274>)
 801664a:	f240 3253 	movw	r2, #851	; 0x353
 801664e:	498d      	ldr	r1, [pc, #564]	; (8016884 <tcp_split_unsent_seg+0x280>)
 8016650:	488b      	ldr	r0, [pc, #556]	; (8016880 <tcp_split_unsent_seg+0x27c>)
 8016652:	f004 fbe5 	bl	801ae20 <iprintf>
    return ERR_VAL;
 8016656:	f06f 0305 	mvn.w	r3, #5
 801665a:	e109      	b.n	8016870 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	891b      	ldrh	r3, [r3, #8]
 8016660:	887a      	ldrh	r2, [r7, #2]
 8016662:	429a      	cmp	r2, r3
 8016664:	d301      	bcc.n	801666a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016666:	2300      	movs	r3, #0
 8016668:	e102      	b.n	8016870 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801666e:	887a      	ldrh	r2, [r7, #2]
 8016670:	429a      	cmp	r2, r3
 8016672:	d906      	bls.n	8016682 <tcp_split_unsent_seg+0x7e>
 8016674:	4b80      	ldr	r3, [pc, #512]	; (8016878 <tcp_split_unsent_seg+0x274>)
 8016676:	f240 325b 	movw	r2, #859	; 0x35b
 801667a:	4983      	ldr	r1, [pc, #524]	; (8016888 <tcp_split_unsent_seg+0x284>)
 801667c:	4880      	ldr	r0, [pc, #512]	; (8016880 <tcp_split_unsent_seg+0x27c>)
 801667e:	f004 fbcf 	bl	801ae20 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	891b      	ldrh	r3, [r3, #8]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d106      	bne.n	8016698 <tcp_split_unsent_seg+0x94>
 801668a:	4b7b      	ldr	r3, [pc, #492]	; (8016878 <tcp_split_unsent_seg+0x274>)
 801668c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016690:	497e      	ldr	r1, [pc, #504]	; (801688c <tcp_split_unsent_seg+0x288>)
 8016692:	487b      	ldr	r0, [pc, #492]	; (8016880 <tcp_split_unsent_seg+0x27c>)
 8016694:	f004 fbc4 	bl	801ae20 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016698:	697b      	ldr	r3, [r7, #20]
 801669a:	7a9b      	ldrb	r3, [r3, #10]
 801669c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801669e:	7bfb      	ldrb	r3, [r7, #15]
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	f003 0304 	and.w	r3, r3, #4
 80166a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80166aa:	697b      	ldr	r3, [r7, #20]
 80166ac:	891a      	ldrh	r2, [r3, #8]
 80166ae:	887b      	ldrh	r3, [r7, #2]
 80166b0:	1ad3      	subs	r3, r2, r3
 80166b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80166b4:	7bbb      	ldrb	r3, [r7, #14]
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	89bb      	ldrh	r3, [r7, #12]
 80166ba:	4413      	add	r3, r2
 80166bc:	b29b      	uxth	r3, r3
 80166be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166c2:	4619      	mov	r1, r3
 80166c4:	2036      	movs	r0, #54	; 0x36
 80166c6:	f7fb f96b 	bl	80119a0 <pbuf_alloc>
 80166ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	f000 80b7 	beq.w	8016842 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	685b      	ldr	r3, [r3, #4]
 80166d8:	891a      	ldrh	r2, [r3, #8]
 80166da:	697b      	ldr	r3, [r7, #20]
 80166dc:	891b      	ldrh	r3, [r3, #8]
 80166de:	1ad3      	subs	r3, r2, r3
 80166e0:	b29a      	uxth	r2, r3
 80166e2:	887b      	ldrh	r3, [r7, #2]
 80166e4:	4413      	add	r3, r2
 80166e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80166e8:	697b      	ldr	r3, [r7, #20]
 80166ea:	6858      	ldr	r0, [r3, #4]
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	685a      	ldr	r2, [r3, #4]
 80166f0:	7bbb      	ldrb	r3, [r7, #14]
 80166f2:	18d1      	adds	r1, r2, r3
 80166f4:	897b      	ldrh	r3, [r7, #10]
 80166f6:	89ba      	ldrh	r2, [r7, #12]
 80166f8:	f7fb fe38 	bl	801236c <pbuf_copy_partial>
 80166fc:	4603      	mov	r3, r0
 80166fe:	461a      	mov	r2, r3
 8016700:	89bb      	ldrh	r3, [r7, #12]
 8016702:	4293      	cmp	r3, r2
 8016704:	f040 809f 	bne.w	8016846 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016708:	697b      	ldr	r3, [r7, #20]
 801670a:	68db      	ldr	r3, [r3, #12]
 801670c:	899b      	ldrh	r3, [r3, #12]
 801670e:	b29b      	uxth	r3, r3
 8016710:	4618      	mov	r0, r3
 8016712:	f7f9 fe29 	bl	8010368 <lwip_htons>
 8016716:	4603      	mov	r3, r0
 8016718:	b2db      	uxtb	r3, r3
 801671a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801671e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016720:	2300      	movs	r3, #0
 8016722:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016724:	7efb      	ldrb	r3, [r7, #27]
 8016726:	f003 0308 	and.w	r3, r3, #8
 801672a:	2b00      	cmp	r3, #0
 801672c:	d007      	beq.n	801673e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801672e:	7efb      	ldrb	r3, [r7, #27]
 8016730:	f023 0308 	bic.w	r3, r3, #8
 8016734:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016736:	7ebb      	ldrb	r3, [r7, #26]
 8016738:	f043 0308 	orr.w	r3, r3, #8
 801673c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801673e:	7efb      	ldrb	r3, [r7, #27]
 8016740:	f003 0301 	and.w	r3, r3, #1
 8016744:	2b00      	cmp	r3, #0
 8016746:	d007      	beq.n	8016758 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016748:	7efb      	ldrb	r3, [r7, #27]
 801674a:	f023 0301 	bic.w	r3, r3, #1
 801674e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016750:	7ebb      	ldrb	r3, [r7, #26]
 8016752:	f043 0301 	orr.w	r3, r3, #1
 8016756:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	68db      	ldr	r3, [r3, #12]
 801675c:	685b      	ldr	r3, [r3, #4]
 801675e:	4618      	mov	r0, r3
 8016760:	f7f9 fe17 	bl	8010392 <lwip_htonl>
 8016764:	4602      	mov	r2, r0
 8016766:	887b      	ldrh	r3, [r7, #2]
 8016768:	18d1      	adds	r1, r2, r3
 801676a:	7eba      	ldrb	r2, [r7, #26]
 801676c:	7bfb      	ldrb	r3, [r7, #15]
 801676e:	9300      	str	r3, [sp, #0]
 8016770:	460b      	mov	r3, r1
 8016772:	6939      	ldr	r1, [r7, #16]
 8016774:	6878      	ldr	r0, [r7, #4]
 8016776:	f7ff fea7 	bl	80164c8 <tcp_create_segment>
 801677a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d063      	beq.n	801684a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	685b      	ldr	r3, [r3, #4]
 8016786:	4618      	mov	r0, r3
 8016788:	f7fb fc78 	bl	801207c <pbuf_clen>
 801678c:	4603      	mov	r3, r0
 801678e:	461a      	mov	r2, r3
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016796:	1a9b      	subs	r3, r3, r2
 8016798:	b29a      	uxth	r2, r3
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	6858      	ldr	r0, [r3, #4]
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	891a      	ldrh	r2, [r3, #8]
 80167aa:	89bb      	ldrh	r3, [r7, #12]
 80167ac:	1ad3      	subs	r3, r2, r3
 80167ae:	b29b      	uxth	r3, r3
 80167b0:	4619      	mov	r1, r3
 80167b2:	f7fb fa4f 	bl	8011c54 <pbuf_realloc>
  useg->len -= remainder;
 80167b6:	697b      	ldr	r3, [r7, #20]
 80167b8:	891a      	ldrh	r2, [r3, #8]
 80167ba:	89bb      	ldrh	r3, [r7, #12]
 80167bc:	1ad3      	subs	r3, r2, r3
 80167be:	b29a      	uxth	r2, r3
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	68db      	ldr	r3, [r3, #12]
 80167c8:	899b      	ldrh	r3, [r3, #12]
 80167ca:	b29c      	uxth	r4, r3
 80167cc:	7efb      	ldrb	r3, [r7, #27]
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	4618      	mov	r0, r3
 80167d2:	f7f9 fdc9 	bl	8010368 <lwip_htons>
 80167d6:	4603      	mov	r3, r0
 80167d8:	461a      	mov	r2, r3
 80167da:	697b      	ldr	r3, [r7, #20]
 80167dc:	68db      	ldr	r3, [r3, #12]
 80167de:	4322      	orrs	r2, r4
 80167e0:	b292      	uxth	r2, r2
 80167e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	685b      	ldr	r3, [r3, #4]
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7fb fc47 	bl	801207c <pbuf_clen>
 80167ee:	4603      	mov	r3, r0
 80167f0:	461a      	mov	r2, r3
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80167f8:	4413      	add	r3, r2
 80167fa:	b29a      	uxth	r2, r3
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016802:	69fb      	ldr	r3, [r7, #28]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	4618      	mov	r0, r3
 8016808:	f7fb fc38 	bl	801207c <pbuf_clen>
 801680c:	4603      	mov	r3, r0
 801680e:	461a      	mov	r2, r3
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016816:	4413      	add	r3, r2
 8016818:	b29a      	uxth	r2, r3
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	681a      	ldr	r2, [r3, #0]
 8016824:	69fb      	ldr	r3, [r7, #28]
 8016826:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016828:	697b      	ldr	r3, [r7, #20]
 801682a:	69fa      	ldr	r2, [r7, #28]
 801682c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801682e:	69fb      	ldr	r3, [r7, #28]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d103      	bne.n	801683e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2200      	movs	r2, #0
 801683a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801683e:	2300      	movs	r3, #0
 8016840:	e016      	b.n	8016870 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016842:	bf00      	nop
 8016844:	e002      	b.n	801684c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016846:	bf00      	nop
 8016848:	e000      	b.n	801684c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801684a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d006      	beq.n	8016860 <tcp_split_unsent_seg+0x25c>
 8016852:	4b09      	ldr	r3, [pc, #36]	; (8016878 <tcp_split_unsent_seg+0x274>)
 8016854:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016858:	490d      	ldr	r1, [pc, #52]	; (8016890 <tcp_split_unsent_seg+0x28c>)
 801685a:	4809      	ldr	r0, [pc, #36]	; (8016880 <tcp_split_unsent_seg+0x27c>)
 801685c:	f004 fae0 	bl	801ae20 <iprintf>
  if (p != NULL) {
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d002      	beq.n	801686c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016866:	6938      	ldr	r0, [r7, #16]
 8016868:	f7fb fb7a 	bl	8011f60 <pbuf_free>
  }

  return ERR_MEM;
 801686c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016870:	4618      	mov	r0, r3
 8016872:	3724      	adds	r7, #36	; 0x24
 8016874:	46bd      	mov	sp, r7
 8016876:	bd90      	pop	{r4, r7, pc}
 8016878:	0801d528 	.word	0x0801d528
 801687c:	0801d8bc 	.word	0x0801d8bc
 8016880:	0801d57c 	.word	0x0801d57c
 8016884:	0801d8e0 	.word	0x0801d8e0
 8016888:	0801d904 	.word	0x0801d904
 801688c:	0801d914 	.word	0x0801d914
 8016890:	0801d924 	.word	0x0801d924

08016894 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016894:	b590      	push	{r4, r7, lr}
 8016896:	b085      	sub	sp, #20
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d106      	bne.n	80168b0 <tcp_send_fin+0x1c>
 80168a2:	4b21      	ldr	r3, [pc, #132]	; (8016928 <tcp_send_fin+0x94>)
 80168a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80168a8:	4920      	ldr	r1, [pc, #128]	; (801692c <tcp_send_fin+0x98>)
 80168aa:	4821      	ldr	r0, [pc, #132]	; (8016930 <tcp_send_fin+0x9c>)
 80168ac:	f004 fab8 	bl	801ae20 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d02e      	beq.n	8016916 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168bc:	60fb      	str	r3, [r7, #12]
 80168be:	e002      	b.n	80168c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d1f8      	bne.n	80168c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	68db      	ldr	r3, [r3, #12]
 80168d2:	899b      	ldrh	r3, [r3, #12]
 80168d4:	b29b      	uxth	r3, r3
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7f9 fd46 	bl	8010368 <lwip_htons>
 80168dc:	4603      	mov	r3, r0
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	f003 0307 	and.w	r3, r3, #7
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d116      	bne.n	8016916 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	68db      	ldr	r3, [r3, #12]
 80168ec:	899b      	ldrh	r3, [r3, #12]
 80168ee:	b29c      	uxth	r4, r3
 80168f0:	2001      	movs	r0, #1
 80168f2:	f7f9 fd39 	bl	8010368 <lwip_htons>
 80168f6:	4603      	mov	r3, r0
 80168f8:	461a      	mov	r2, r3
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	68db      	ldr	r3, [r3, #12]
 80168fe:	4322      	orrs	r2, r4
 8016900:	b292      	uxth	r2, r2
 8016902:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	8b5b      	ldrh	r3, [r3, #26]
 8016908:	f043 0320 	orr.w	r3, r3, #32
 801690c:	b29a      	uxth	r2, r3
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016912:	2300      	movs	r3, #0
 8016914:	e004      	b.n	8016920 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016916:	2101      	movs	r1, #1
 8016918:	6878      	ldr	r0, [r7, #4]
 801691a:	f000 f80b 	bl	8016934 <tcp_enqueue_flags>
 801691e:	4603      	mov	r3, r0
}
 8016920:	4618      	mov	r0, r3
 8016922:	3714      	adds	r7, #20
 8016924:	46bd      	mov	sp, r7
 8016926:	bd90      	pop	{r4, r7, pc}
 8016928:	0801d528 	.word	0x0801d528
 801692c:	0801d930 	.word	0x0801d930
 8016930:	0801d57c 	.word	0x0801d57c

08016934 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b08a      	sub	sp, #40	; 0x28
 8016938:	af02      	add	r7, sp, #8
 801693a:	6078      	str	r0, [r7, #4]
 801693c:	460b      	mov	r3, r1
 801693e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016940:	2300      	movs	r3, #0
 8016942:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016944:	2300      	movs	r3, #0
 8016946:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016948:	78fb      	ldrb	r3, [r7, #3]
 801694a:	f003 0303 	and.w	r3, r3, #3
 801694e:	2b00      	cmp	r3, #0
 8016950:	d106      	bne.n	8016960 <tcp_enqueue_flags+0x2c>
 8016952:	4b67      	ldr	r3, [pc, #412]	; (8016af0 <tcp_enqueue_flags+0x1bc>)
 8016954:	f240 4212 	movw	r2, #1042	; 0x412
 8016958:	4966      	ldr	r1, [pc, #408]	; (8016af4 <tcp_enqueue_flags+0x1c0>)
 801695a:	4867      	ldr	r0, [pc, #412]	; (8016af8 <tcp_enqueue_flags+0x1c4>)
 801695c:	f004 fa60 	bl	801ae20 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d106      	bne.n	8016974 <tcp_enqueue_flags+0x40>
 8016966:	4b62      	ldr	r3, [pc, #392]	; (8016af0 <tcp_enqueue_flags+0x1bc>)
 8016968:	f240 4213 	movw	r2, #1043	; 0x413
 801696c:	4963      	ldr	r1, [pc, #396]	; (8016afc <tcp_enqueue_flags+0x1c8>)
 801696e:	4862      	ldr	r0, [pc, #392]	; (8016af8 <tcp_enqueue_flags+0x1c4>)
 8016970:	f004 fa56 	bl	801ae20 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016974:	78fb      	ldrb	r3, [r7, #3]
 8016976:	f003 0302 	and.w	r3, r3, #2
 801697a:	2b00      	cmp	r3, #0
 801697c:	d001      	beq.n	8016982 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801697e:	2301      	movs	r3, #1
 8016980:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016982:	7ffb      	ldrb	r3, [r7, #31]
 8016984:	009b      	lsls	r3, r3, #2
 8016986:	b2db      	uxtb	r3, r3
 8016988:	f003 0304 	and.w	r3, r3, #4
 801698c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801698e:	7dfb      	ldrb	r3, [r7, #23]
 8016990:	b29b      	uxth	r3, r3
 8016992:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016996:	4619      	mov	r1, r3
 8016998:	2036      	movs	r0, #54	; 0x36
 801699a:	f7fb f801 	bl	80119a0 <pbuf_alloc>
 801699e:	6138      	str	r0, [r7, #16]
 80169a0:	693b      	ldr	r3, [r7, #16]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d109      	bne.n	80169ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	8b5b      	ldrh	r3, [r3, #26]
 80169aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169ae:	b29a      	uxth	r2, r3
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80169b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80169b8:	e095      	b.n	8016ae6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80169ba:	693b      	ldr	r3, [r7, #16]
 80169bc:	895a      	ldrh	r2, [r3, #10]
 80169be:	7dfb      	ldrb	r3, [r7, #23]
 80169c0:	b29b      	uxth	r3, r3
 80169c2:	429a      	cmp	r2, r3
 80169c4:	d206      	bcs.n	80169d4 <tcp_enqueue_flags+0xa0>
 80169c6:	4b4a      	ldr	r3, [pc, #296]	; (8016af0 <tcp_enqueue_flags+0x1bc>)
 80169c8:	f240 423a 	movw	r2, #1082	; 0x43a
 80169cc:	494c      	ldr	r1, [pc, #304]	; (8016b00 <tcp_enqueue_flags+0x1cc>)
 80169ce:	484a      	ldr	r0, [pc, #296]	; (8016af8 <tcp_enqueue_flags+0x1c4>)
 80169d0:	f004 fa26 	bl	801ae20 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80169d8:	78fa      	ldrb	r2, [r7, #3]
 80169da:	7ffb      	ldrb	r3, [r7, #31]
 80169dc:	9300      	str	r3, [sp, #0]
 80169de:	460b      	mov	r3, r1
 80169e0:	6939      	ldr	r1, [r7, #16]
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f7ff fd70 	bl	80164c8 <tcp_create_segment>
 80169e8:	60f8      	str	r0, [r7, #12]
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d109      	bne.n	8016a04 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	8b5b      	ldrh	r3, [r3, #26]
 80169f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169f8:	b29a      	uxth	r2, r3
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80169fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a02:	e070      	b.n	8016ae6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	68db      	ldr	r3, [r3, #12]
 8016a08:	f003 0303 	and.w	r3, r3, #3
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d006      	beq.n	8016a1e <tcp_enqueue_flags+0xea>
 8016a10:	4b37      	ldr	r3, [pc, #220]	; (8016af0 <tcp_enqueue_flags+0x1bc>)
 8016a12:	f240 4242 	movw	r2, #1090	; 0x442
 8016a16:	493b      	ldr	r1, [pc, #236]	; (8016b04 <tcp_enqueue_flags+0x1d0>)
 8016a18:	4837      	ldr	r0, [pc, #220]	; (8016af8 <tcp_enqueue_flags+0x1c4>)
 8016a1a:	f004 fa01 	bl	801ae20 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	891b      	ldrh	r3, [r3, #8]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d006      	beq.n	8016a34 <tcp_enqueue_flags+0x100>
 8016a26:	4b32      	ldr	r3, [pc, #200]	; (8016af0 <tcp_enqueue_flags+0x1bc>)
 8016a28:	f240 4243 	movw	r2, #1091	; 0x443
 8016a2c:	4936      	ldr	r1, [pc, #216]	; (8016b08 <tcp_enqueue_flags+0x1d4>)
 8016a2e:	4832      	ldr	r0, [pc, #200]	; (8016af8 <tcp_enqueue_flags+0x1c4>)
 8016a30:	f004 f9f6 	bl	801ae20 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d103      	bne.n	8016a44 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	68fa      	ldr	r2, [r7, #12]
 8016a40:	66da      	str	r2, [r3, #108]	; 0x6c
 8016a42:	e00d      	b.n	8016a60 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a48:	61bb      	str	r3, [r7, #24]
 8016a4a:	e002      	b.n	8016a52 <tcp_enqueue_flags+0x11e>
 8016a4c:	69bb      	ldr	r3, [r7, #24]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	61bb      	str	r3, [r7, #24]
 8016a52:	69bb      	ldr	r3, [r7, #24]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d1f8      	bne.n	8016a4c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	68fa      	ldr	r2, [r7, #12]
 8016a5e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	2200      	movs	r2, #0
 8016a64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016a68:	78fb      	ldrb	r3, [r7, #3]
 8016a6a:	f003 0302 	and.w	r3, r3, #2
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d104      	bne.n	8016a7c <tcp_enqueue_flags+0x148>
 8016a72:	78fb      	ldrb	r3, [r7, #3]
 8016a74:	f003 0301 	and.w	r3, r3, #1
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d004      	beq.n	8016a86 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a80:	1c5a      	adds	r2, r3, #1
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016a86:	78fb      	ldrb	r3, [r7, #3]
 8016a88:	f003 0301 	and.w	r3, r3, #1
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d006      	beq.n	8016a9e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	8b5b      	ldrh	r3, [r3, #26]
 8016a94:	f043 0320 	orr.w	r3, r3, #32
 8016a98:	b29a      	uxth	r2, r3
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f7fb faea 	bl	801207c <pbuf_clen>
 8016aa8:	4603      	mov	r3, r0
 8016aaa:	461a      	mov	r2, r3
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016ab2:	4413      	add	r3, r2
 8016ab4:	b29a      	uxth	r2, r3
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d00e      	beq.n	8016ae4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d10a      	bne.n	8016ae4 <tcp_enqueue_flags+0x1b0>
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d106      	bne.n	8016ae4 <tcp_enqueue_flags+0x1b0>
 8016ad6:	4b06      	ldr	r3, [pc, #24]	; (8016af0 <tcp_enqueue_flags+0x1bc>)
 8016ad8:	f240 4266 	movw	r2, #1126	; 0x466
 8016adc:	490b      	ldr	r1, [pc, #44]	; (8016b0c <tcp_enqueue_flags+0x1d8>)
 8016ade:	4806      	ldr	r0, [pc, #24]	; (8016af8 <tcp_enqueue_flags+0x1c4>)
 8016ae0:	f004 f99e 	bl	801ae20 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016ae4:	2300      	movs	r3, #0
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3720      	adds	r7, #32
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	0801d528 	.word	0x0801d528
 8016af4:	0801d94c 	.word	0x0801d94c
 8016af8:	0801d57c 	.word	0x0801d57c
 8016afc:	0801d9a4 	.word	0x0801d9a4
 8016b00:	0801d9c4 	.word	0x0801d9c4
 8016b04:	0801da00 	.word	0x0801da00
 8016b08:	0801da18 	.word	0x0801da18
 8016b0c:	0801da44 	.word	0x0801da44

08016b10 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016b10:	b5b0      	push	{r4, r5, r7, lr}
 8016b12:	b08a      	sub	sp, #40	; 0x28
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d106      	bne.n	8016b2c <tcp_output+0x1c>
 8016b1e:	4ba0      	ldr	r3, [pc, #640]	; (8016da0 <tcp_output+0x290>)
 8016b20:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016b24:	499f      	ldr	r1, [pc, #636]	; (8016da4 <tcp_output+0x294>)
 8016b26:	48a0      	ldr	r0, [pc, #640]	; (8016da8 <tcp_output+0x298>)
 8016b28:	f004 f97a 	bl	801ae20 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	7d1b      	ldrb	r3, [r3, #20]
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	d106      	bne.n	8016b42 <tcp_output+0x32>
 8016b34:	4b9a      	ldr	r3, [pc, #616]	; (8016da0 <tcp_output+0x290>)
 8016b36:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8016b3a:	499c      	ldr	r1, [pc, #624]	; (8016dac <tcp_output+0x29c>)
 8016b3c:	489a      	ldr	r0, [pc, #616]	; (8016da8 <tcp_output+0x298>)
 8016b3e:	f004 f96f 	bl	801ae20 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016b42:	4b9b      	ldr	r3, [pc, #620]	; (8016db0 <tcp_output+0x2a0>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d101      	bne.n	8016b50 <tcp_output+0x40>
    return ERR_OK;
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	e1d2      	b.n	8016ef6 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	d203      	bcs.n	8016b68 <tcp_output+0x58>
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016b66:	e002      	b.n	8016b6e <tcp_output+0x5e>
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016b6e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b74:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d10b      	bne.n	8016b94 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	8b5b      	ldrh	r3, [r3, #26]
 8016b80:	f003 0302 	and.w	r3, r3, #2
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	f000 81a9 	beq.w	8016edc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f000 fdd8 	bl	8017740 <tcp_send_empty_ack>
 8016b90:	4603      	mov	r3, r0
 8016b92:	e1b0      	b.n	8016ef6 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016b94:	6879      	ldr	r1, [r7, #4]
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	3304      	adds	r3, #4
 8016b9a:	461a      	mov	r2, r3
 8016b9c:	6878      	ldr	r0, [r7, #4]
 8016b9e:	f7ff fc77 	bl	8016490 <tcp_route>
 8016ba2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d102      	bne.n	8016bb0 <tcp_output+0xa0>
    return ERR_RTE;
 8016baa:	f06f 0303 	mvn.w	r3, #3
 8016bae:	e1a2      	b.n	8016ef6 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d003      	beq.n	8016bbe <tcp_output+0xae>
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d111      	bne.n	8016be2 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d002      	beq.n	8016bca <tcp_output+0xba>
 8016bc4:	697b      	ldr	r3, [r7, #20]
 8016bc6:	3304      	adds	r3, #4
 8016bc8:	e000      	b.n	8016bcc <tcp_output+0xbc>
 8016bca:	2300      	movs	r3, #0
 8016bcc:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016bce:	693b      	ldr	r3, [r7, #16]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d102      	bne.n	8016bda <tcp_output+0xca>
      return ERR_RTE;
 8016bd4:	f06f 0303 	mvn.w	r3, #3
 8016bd8:	e18d      	b.n	8016ef6 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	681a      	ldr	r2, [r3, #0]
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be4:	68db      	ldr	r3, [r3, #12]
 8016be6:	685b      	ldr	r3, [r3, #4]
 8016be8:	4618      	mov	r0, r3
 8016bea:	f7f9 fbd2 	bl	8010392 <lwip_htonl>
 8016bee:	4602      	mov	r2, r0
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016bf4:	1ad3      	subs	r3, r2, r3
 8016bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bf8:	8912      	ldrh	r2, [r2, #8]
 8016bfa:	4413      	add	r3, r2
 8016bfc:	69ba      	ldr	r2, [r7, #24]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d227      	bcs.n	8016c52 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c08:	461a      	mov	r2, r3
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	4293      	cmp	r3, r2
 8016c0e:	d114      	bne.n	8016c3a <tcp_output+0x12a>
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d110      	bne.n	8016c3a <tcp_output+0x12a>
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d10b      	bne.n	8016c3a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2200      	movs	r2, #0
 8016c26:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2201      	movs	r2, #1
 8016c2e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2200      	movs	r2, #0
 8016c36:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	8b5b      	ldrh	r3, [r3, #26]
 8016c3e:	f003 0302 	and.w	r3, r3, #2
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	f000 814c 	beq.w	8016ee0 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8016c48:	6878      	ldr	r0, [r7, #4]
 8016c4a:	f000 fd79 	bl	8017740 <tcp_send_empty_ack>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	e151      	b.n	8016ef6 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	2200      	movs	r2, #0
 8016c56:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c5e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016c60:	6a3b      	ldr	r3, [r7, #32]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	f000 811b 	beq.w	8016e9e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8016c68:	e002      	b.n	8016c70 <tcp_output+0x160>
 8016c6a:	6a3b      	ldr	r3, [r7, #32]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	623b      	str	r3, [r7, #32]
 8016c70:	6a3b      	ldr	r3, [r7, #32]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d1f8      	bne.n	8016c6a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016c78:	e111      	b.n	8016e9e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7c:	68db      	ldr	r3, [r3, #12]
 8016c7e:	899b      	ldrh	r3, [r3, #12]
 8016c80:	b29b      	uxth	r3, r3
 8016c82:	4618      	mov	r0, r3
 8016c84:	f7f9 fb70 	bl	8010368 <lwip_htons>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	b2db      	uxtb	r3, r3
 8016c8c:	f003 0304 	and.w	r3, r3, #4
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d006      	beq.n	8016ca2 <tcp_output+0x192>
 8016c94:	4b42      	ldr	r3, [pc, #264]	; (8016da0 <tcp_output+0x290>)
 8016c96:	f240 5237 	movw	r2, #1335	; 0x537
 8016c9a:	4946      	ldr	r1, [pc, #280]	; (8016db4 <tcp_output+0x2a4>)
 8016c9c:	4842      	ldr	r0, [pc, #264]	; (8016da8 <tcp_output+0x298>)
 8016c9e:	f004 f8bf 	bl	801ae20 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d01f      	beq.n	8016cea <tcp_output+0x1da>
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	8b5b      	ldrh	r3, [r3, #26]
 8016cae:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d119      	bne.n	8016cea <tcp_output+0x1da>
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d00b      	beq.n	8016cd6 <tcp_output+0x1c6>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d110      	bne.n	8016cea <tcp_output+0x1da>
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ccc:	891a      	ldrh	r2, [r3, #8]
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d209      	bcs.n	8016cea <tcp_output+0x1da>
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d004      	beq.n	8016cea <tcp_output+0x1da>
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016ce6:	2b08      	cmp	r3, #8
 8016ce8:	d901      	bls.n	8016cee <tcp_output+0x1de>
 8016cea:	2301      	movs	r3, #1
 8016cec:	e000      	b.n	8016cf0 <tcp_output+0x1e0>
 8016cee:	2300      	movs	r3, #0
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d106      	bne.n	8016d02 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	8b5b      	ldrh	r3, [r3, #26]
 8016cf8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	f000 80e3 	beq.w	8016ec8 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	7d1b      	ldrb	r3, [r3, #20]
 8016d06:	2b02      	cmp	r3, #2
 8016d08:	d00d      	beq.n	8016d26 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0c:	68db      	ldr	r3, [r3, #12]
 8016d0e:	899b      	ldrh	r3, [r3, #12]
 8016d10:	b29c      	uxth	r4, r3
 8016d12:	2010      	movs	r0, #16
 8016d14:	f7f9 fb28 	bl	8010368 <lwip_htons>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	461a      	mov	r2, r3
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1e:	68db      	ldr	r3, [r3, #12]
 8016d20:	4322      	orrs	r2, r4
 8016d22:	b292      	uxth	r2, r2
 8016d24:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016d26:	697a      	ldr	r2, [r7, #20]
 8016d28:	6879      	ldr	r1, [r7, #4]
 8016d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d2c:	f000 f908 	bl	8016f40 <tcp_output_segment>
 8016d30:	4603      	mov	r3, r0
 8016d32:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d009      	beq.n	8016d50 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	8b5b      	ldrh	r3, [r3, #26]
 8016d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d44:	b29a      	uxth	r2, r3
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	835a      	strh	r2, [r3, #26]
      return err;
 8016d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d4e:	e0d2      	b.n	8016ef6 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d52:	681a      	ldr	r2, [r3, #0]
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	7d1b      	ldrb	r3, [r3, #20]
 8016d5c:	2b02      	cmp	r3, #2
 8016d5e:	d006      	beq.n	8016d6e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	8b5b      	ldrh	r3, [r3, #26]
 8016d64:	f023 0303 	bic.w	r3, r3, #3
 8016d68:	b29a      	uxth	r2, r3
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	685b      	ldr	r3, [r3, #4]
 8016d74:	4618      	mov	r0, r3
 8016d76:	f7f9 fb0c 	bl	8010392 <lwip_htonl>
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7e:	891b      	ldrh	r3, [r3, #8]
 8016d80:	461d      	mov	r5, r3
 8016d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d84:	68db      	ldr	r3, [r3, #12]
 8016d86:	899b      	ldrh	r3, [r3, #12]
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7f9 faec 	bl	8010368 <lwip_htons>
 8016d90:	4603      	mov	r3, r0
 8016d92:	b2db      	uxtb	r3, r3
 8016d94:	f003 0303 	and.w	r3, r3, #3
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d00d      	beq.n	8016db8 <tcp_output+0x2a8>
 8016d9c:	2301      	movs	r3, #1
 8016d9e:	e00c      	b.n	8016dba <tcp_output+0x2aa>
 8016da0:	0801d528 	.word	0x0801d528
 8016da4:	0801da6c 	.word	0x0801da6c
 8016da8:	0801d57c 	.word	0x0801d57c
 8016dac:	0801da84 	.word	0x0801da84
 8016db0:	2000b4d8 	.word	0x2000b4d8
 8016db4:	0801daac 	.word	0x0801daac
 8016db8:	2300      	movs	r3, #0
 8016dba:	442b      	add	r3, r5
 8016dbc:	4423      	add	r3, r4
 8016dbe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016dc4:	68bb      	ldr	r3, [r7, #8]
 8016dc6:	1ad3      	subs	r3, r2, r3
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	da02      	bge.n	8016dd2 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	68ba      	ldr	r2, [r7, #8]
 8016dd0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dd4:	891b      	ldrh	r3, [r3, #8]
 8016dd6:	461c      	mov	r4, r3
 8016dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dda:	68db      	ldr	r3, [r3, #12]
 8016ddc:	899b      	ldrh	r3, [r3, #12]
 8016dde:	b29b      	uxth	r3, r3
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7f9 fac1 	bl	8010368 <lwip_htons>
 8016de6:	4603      	mov	r3, r0
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	f003 0303 	and.w	r3, r3, #3
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d001      	beq.n	8016df6 <tcp_output+0x2e6>
 8016df2:	2301      	movs	r3, #1
 8016df4:	e000      	b.n	8016df8 <tcp_output+0x2e8>
 8016df6:	2300      	movs	r3, #0
 8016df8:	4423      	add	r3, r4
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d049      	beq.n	8016e92 <tcp_output+0x382>
      seg->next = NULL;
 8016dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e00:	2200      	movs	r2, #0
 8016e02:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d105      	bne.n	8016e18 <tcp_output+0x308>
        pcb->unacked = seg;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e10:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e14:	623b      	str	r3, [r7, #32]
 8016e16:	e03f      	b.n	8016e98 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1a:	68db      	ldr	r3, [r3, #12]
 8016e1c:	685b      	ldr	r3, [r3, #4]
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7f9 fab7 	bl	8010392 <lwip_htonl>
 8016e24:	4604      	mov	r4, r0
 8016e26:	6a3b      	ldr	r3, [r7, #32]
 8016e28:	68db      	ldr	r3, [r3, #12]
 8016e2a:	685b      	ldr	r3, [r3, #4]
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f7f9 fab0 	bl	8010392 <lwip_htonl>
 8016e32:	4603      	mov	r3, r0
 8016e34:	1ae3      	subs	r3, r4, r3
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	da24      	bge.n	8016e84 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	3370      	adds	r3, #112	; 0x70
 8016e3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016e40:	e002      	b.n	8016e48 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016e42:	69fb      	ldr	r3, [r7, #28]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016e48:	69fb      	ldr	r3, [r7, #28]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d011      	beq.n	8016e74 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016e50:	69fb      	ldr	r3, [r7, #28]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	68db      	ldr	r3, [r3, #12]
 8016e56:	685b      	ldr	r3, [r3, #4]
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7f9 fa9a 	bl	8010392 <lwip_htonl>
 8016e5e:	4604      	mov	r4, r0
 8016e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e62:	68db      	ldr	r3, [r3, #12]
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7f9 fa93 	bl	8010392 <lwip_htonl>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	dbe6      	blt.n	8016e42 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8016e74:	69fb      	ldr	r3, [r7, #28]
 8016e76:	681a      	ldr	r2, [r3, #0]
 8016e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e7a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016e7c:	69fb      	ldr	r3, [r7, #28]
 8016e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e80:	601a      	str	r2, [r3, #0]
 8016e82:	e009      	b.n	8016e98 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016e84:	6a3b      	ldr	r3, [r7, #32]
 8016e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e88:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016e8a:	6a3b      	ldr	r3, [r7, #32]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	623b      	str	r3, [r7, #32]
 8016e90:	e002      	b.n	8016e98 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e94:	f7fc fc42 	bl	801371c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d012      	beq.n	8016eca <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea6:	68db      	ldr	r3, [r3, #12]
 8016ea8:	685b      	ldr	r3, [r3, #4]
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7f9 fa71 	bl	8010392 <lwip_htonl>
 8016eb0:	4602      	mov	r2, r0
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016eb6:	1ad3      	subs	r3, r2, r3
 8016eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016eba:	8912      	ldrh	r2, [r2, #8]
 8016ebc:	4413      	add	r3, r2
  while (seg != NULL &&
 8016ebe:	69ba      	ldr	r2, [r7, #24]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	f4bf aeda 	bcs.w	8016c7a <tcp_output+0x16a>
 8016ec6:	e000      	b.n	8016eca <tcp_output+0x3ba>
      break;
 8016ec8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d108      	bne.n	8016ee4 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016eda:	e004      	b.n	8016ee6 <tcp_output+0x3d6>
    goto output_done;
 8016edc:	bf00      	nop
 8016ede:	e002      	b.n	8016ee6 <tcp_output+0x3d6>
    goto output_done;
 8016ee0:	bf00      	nop
 8016ee2:	e000      	b.n	8016ee6 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016ee4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	8b5b      	ldrh	r3, [r3, #26]
 8016eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016ef4:	2300      	movs	r3, #0
}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	3728      	adds	r7, #40	; 0x28
 8016efa:	46bd      	mov	sp, r7
 8016efc:	bdb0      	pop	{r4, r5, r7, pc}
 8016efe:	bf00      	nop

08016f00 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b082      	sub	sp, #8
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d106      	bne.n	8016f1c <tcp_output_segment_busy+0x1c>
 8016f0e:	4b09      	ldr	r3, [pc, #36]	; (8016f34 <tcp_output_segment_busy+0x34>)
 8016f10:	f240 529a 	movw	r2, #1434	; 0x59a
 8016f14:	4908      	ldr	r1, [pc, #32]	; (8016f38 <tcp_output_segment_busy+0x38>)
 8016f16:	4809      	ldr	r0, [pc, #36]	; (8016f3c <tcp_output_segment_busy+0x3c>)
 8016f18:	f003 ff82 	bl	801ae20 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	7b9b      	ldrb	r3, [r3, #14]
 8016f22:	2b01      	cmp	r3, #1
 8016f24:	d001      	beq.n	8016f2a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016f26:	2301      	movs	r3, #1
 8016f28:	e000      	b.n	8016f2c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016f2a:	2300      	movs	r3, #0
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3708      	adds	r7, #8
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}
 8016f34:	0801d528 	.word	0x0801d528
 8016f38:	0801dac4 	.word	0x0801dac4
 8016f3c:	0801d57c 	.word	0x0801d57c

08016f40 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016f40:	b5b0      	push	{r4, r5, r7, lr}
 8016f42:	b08c      	sub	sp, #48	; 0x30
 8016f44:	af04      	add	r7, sp, #16
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d106      	bne.n	8016f60 <tcp_output_segment+0x20>
 8016f52:	4b64      	ldr	r3, [pc, #400]	; (80170e4 <tcp_output_segment+0x1a4>)
 8016f54:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016f58:	4963      	ldr	r1, [pc, #396]	; (80170e8 <tcp_output_segment+0x1a8>)
 8016f5a:	4864      	ldr	r0, [pc, #400]	; (80170ec <tcp_output_segment+0x1ac>)
 8016f5c:	f003 ff60 	bl	801ae20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d106      	bne.n	8016f74 <tcp_output_segment+0x34>
 8016f66:	4b5f      	ldr	r3, [pc, #380]	; (80170e4 <tcp_output_segment+0x1a4>)
 8016f68:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016f6c:	4960      	ldr	r1, [pc, #384]	; (80170f0 <tcp_output_segment+0x1b0>)
 8016f6e:	485f      	ldr	r0, [pc, #380]	; (80170ec <tcp_output_segment+0x1ac>)
 8016f70:	f003 ff56 	bl	801ae20 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d106      	bne.n	8016f88 <tcp_output_segment+0x48>
 8016f7a:	4b5a      	ldr	r3, [pc, #360]	; (80170e4 <tcp_output_segment+0x1a4>)
 8016f7c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016f80:	495c      	ldr	r1, [pc, #368]	; (80170f4 <tcp_output_segment+0x1b4>)
 8016f82:	485a      	ldr	r0, [pc, #360]	; (80170ec <tcp_output_segment+0x1ac>)
 8016f84:	f003 ff4c 	bl	801ae20 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016f88:	68f8      	ldr	r0, [r7, #12]
 8016f8a:	f7ff ffb9 	bl	8016f00 <tcp_output_segment_busy>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d001      	beq.n	8016f98 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016f94:	2300      	movs	r3, #0
 8016f96:	e0a0      	b.n	80170da <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	68dc      	ldr	r4, [r3, #12]
 8016fa0:	4610      	mov	r0, r2
 8016fa2:	f7f9 f9f6 	bl	8010392 <lwip_htonl>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	68dc      	ldr	r4, [r3, #12]
 8016fb2:	4610      	mov	r0, r2
 8016fb4:	f7f9 f9d8 	bl	8010368 <lwip_htons>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fc0:	68ba      	ldr	r2, [r7, #8]
 8016fc2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016fc4:	441a      	add	r2, r3
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	68db      	ldr	r3, [r3, #12]
 8016fce:	3314      	adds	r3, #20
 8016fd0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	7a9b      	ldrb	r3, [r3, #10]
 8016fd6:	f003 0301 	and.w	r3, r3, #1
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d015      	beq.n	801700a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	3304      	adds	r3, #4
 8016fe2:	461a      	mov	r2, r3
 8016fe4:	6879      	ldr	r1, [r7, #4]
 8016fe6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016fea:	f7fc fe8d 	bl	8013d08 <tcp_eff_send_mss_netif>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016ff2:	8b7b      	ldrh	r3, [r7, #26]
 8016ff4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f7f9 f9ca 	bl	8010392 <lwip_htonl>
 8016ffe:	4602      	mov	r2, r0
 8017000:	69fb      	ldr	r3, [r7, #28]
 8017002:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	3304      	adds	r3, #4
 8017008:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017010:	2b00      	cmp	r3, #0
 8017012:	da02      	bge.n	801701a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	2200      	movs	r2, #0
 8017018:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801701e:	2b00      	cmp	r3, #0
 8017020:	d10c      	bne.n	801703c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017022:	4b35      	ldr	r3, [pc, #212]	; (80170f8 <tcp_output_segment+0x1b8>)
 8017024:	681a      	ldr	r2, [r3, #0]
 8017026:	68bb      	ldr	r3, [r7, #8]
 8017028:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	685b      	ldr	r3, [r3, #4]
 8017030:	4618      	mov	r0, r3
 8017032:	f7f9 f9ae 	bl	8010392 <lwip_htonl>
 8017036:	4602      	mov	r2, r0
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	68db      	ldr	r3, [r3, #12]
 8017040:	461a      	mov	r2, r3
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	1ad3      	subs	r3, r2, r3
 801704a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	685b      	ldr	r3, [r3, #4]
 8017050:	8959      	ldrh	r1, [r3, #10]
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	685b      	ldr	r3, [r3, #4]
 8017056:	8b3a      	ldrh	r2, [r7, #24]
 8017058:	1a8a      	subs	r2, r1, r2
 801705a:	b292      	uxth	r2, r2
 801705c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	685b      	ldr	r3, [r3, #4]
 8017062:	8919      	ldrh	r1, [r3, #8]
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	685b      	ldr	r3, [r3, #4]
 8017068:	8b3a      	ldrh	r2, [r7, #24]
 801706a:	1a8a      	subs	r2, r1, r2
 801706c:	b292      	uxth	r2, r2
 801706e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	685b      	ldr	r3, [r3, #4]
 8017074:	68fa      	ldr	r2, [r7, #12]
 8017076:	68d2      	ldr	r2, [r2, #12]
 8017078:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	68db      	ldr	r3, [r3, #12]
 801707e:	2200      	movs	r2, #0
 8017080:	741a      	strb	r2, [r3, #16]
 8017082:	2200      	movs	r2, #0
 8017084:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	f103 0214 	add.w	r2, r3, #20
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	7a9b      	ldrb	r3, [r3, #10]
 8017092:	009b      	lsls	r3, r3, #2
 8017094:	f003 0304 	and.w	r3, r3, #4
 8017098:	4413      	add	r3, r2
 801709a:	69fa      	ldr	r2, [r7, #28]
 801709c:	429a      	cmp	r2, r3
 801709e:	d006      	beq.n	80170ae <tcp_output_segment+0x16e>
 80170a0:	4b10      	ldr	r3, [pc, #64]	; (80170e4 <tcp_output_segment+0x1a4>)
 80170a2:	f240 621c 	movw	r2, #1564	; 0x61c
 80170a6:	4915      	ldr	r1, [pc, #84]	; (80170fc <tcp_output_segment+0x1bc>)
 80170a8:	4810      	ldr	r0, [pc, #64]	; (80170ec <tcp_output_segment+0x1ac>)
 80170aa:	f003 feb9 	bl	801ae20 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	6858      	ldr	r0, [r3, #4]
 80170b2:	68b9      	ldr	r1, [r7, #8]
 80170b4:	68bb      	ldr	r3, [r7, #8]
 80170b6:	1d1c      	adds	r4, r3, #4
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	7add      	ldrb	r5, [r3, #11]
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	7a9b      	ldrb	r3, [r3, #10]
 80170c0:	687a      	ldr	r2, [r7, #4]
 80170c2:	9202      	str	r2, [sp, #8]
 80170c4:	2206      	movs	r2, #6
 80170c6:	9201      	str	r2, [sp, #4]
 80170c8:	9300      	str	r3, [sp, #0]
 80170ca:	462b      	mov	r3, r5
 80170cc:	4622      	mov	r2, r4
 80170ce:	f002 fd27 	bl	8019b20 <ip4_output_if>
 80170d2:	4603      	mov	r3, r0
 80170d4:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80170d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80170da:	4618      	mov	r0, r3
 80170dc:	3720      	adds	r7, #32
 80170de:	46bd      	mov	sp, r7
 80170e0:	bdb0      	pop	{r4, r5, r7, pc}
 80170e2:	bf00      	nop
 80170e4:	0801d528 	.word	0x0801d528
 80170e8:	0801daec 	.word	0x0801daec
 80170ec:	0801d57c 	.word	0x0801d57c
 80170f0:	0801db0c 	.word	0x0801db0c
 80170f4:	0801db2c 	.word	0x0801db2c
 80170f8:	2000b4c8 	.word	0x2000b4c8
 80170fc:	0801db50 	.word	0x0801db50

08017100 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017100:	b5b0      	push	{r4, r5, r7, lr}
 8017102:	b084      	sub	sp, #16
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d106      	bne.n	801711c <tcp_rexmit_rto_prepare+0x1c>
 801710e:	4b31      	ldr	r3, [pc, #196]	; (80171d4 <tcp_rexmit_rto_prepare+0xd4>)
 8017110:	f240 6263 	movw	r2, #1635	; 0x663
 8017114:	4930      	ldr	r1, [pc, #192]	; (80171d8 <tcp_rexmit_rto_prepare+0xd8>)
 8017116:	4831      	ldr	r0, [pc, #196]	; (80171dc <tcp_rexmit_rto_prepare+0xdc>)
 8017118:	f003 fe82 	bl	801ae20 <iprintf>

  if (pcb->unacked == NULL) {
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017120:	2b00      	cmp	r3, #0
 8017122:	d102      	bne.n	801712a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017124:	f06f 0305 	mvn.w	r3, #5
 8017128:	e050      	b.n	80171cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801712e:	60fb      	str	r3, [r7, #12]
 8017130:	e00b      	b.n	801714a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017132:	68f8      	ldr	r0, [r7, #12]
 8017134:	f7ff fee4 	bl	8016f00 <tcp_output_segment_busy>
 8017138:	4603      	mov	r3, r0
 801713a:	2b00      	cmp	r3, #0
 801713c:	d002      	beq.n	8017144 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801713e:	f06f 0305 	mvn.w	r3, #5
 8017142:	e043      	b.n	80171cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	60fb      	str	r3, [r7, #12]
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d1ef      	bne.n	8017132 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017152:	68f8      	ldr	r0, [r7, #12]
 8017154:	f7ff fed4 	bl	8016f00 <tcp_output_segment_busy>
 8017158:	4603      	mov	r3, r0
 801715a:	2b00      	cmp	r3, #0
 801715c:	d002      	beq.n	8017164 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801715e:	f06f 0305 	mvn.w	r3, #5
 8017162:	e033      	b.n	80171cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2200      	movs	r2, #0
 8017178:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	8b5b      	ldrh	r3, [r3, #26]
 801717e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017182:	b29a      	uxth	r2, r3
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	685b      	ldr	r3, [r3, #4]
 801718e:	4618      	mov	r0, r3
 8017190:	f7f9 f8ff 	bl	8010392 <lwip_htonl>
 8017194:	4604      	mov	r4, r0
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	891b      	ldrh	r3, [r3, #8]
 801719a:	461d      	mov	r5, r3
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	68db      	ldr	r3, [r3, #12]
 80171a0:	899b      	ldrh	r3, [r3, #12]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7f9 f8df 	bl	8010368 <lwip_htons>
 80171aa:	4603      	mov	r3, r0
 80171ac:	b2db      	uxtb	r3, r3
 80171ae:	f003 0303 	and.w	r3, r3, #3
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d001      	beq.n	80171ba <tcp_rexmit_rto_prepare+0xba>
 80171b6:	2301      	movs	r3, #1
 80171b8:	e000      	b.n	80171bc <tcp_rexmit_rto_prepare+0xbc>
 80171ba:	2300      	movs	r3, #0
 80171bc:	442b      	add	r3, r5
 80171be:	18e2      	adds	r2, r4, r3
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	2200      	movs	r2, #0
 80171c8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80171ca:	2300      	movs	r3, #0
}
 80171cc:	4618      	mov	r0, r3
 80171ce:	3710      	adds	r7, #16
 80171d0:	46bd      	mov	sp, r7
 80171d2:	bdb0      	pop	{r4, r5, r7, pc}
 80171d4:	0801d528 	.word	0x0801d528
 80171d8:	0801db64 	.word	0x0801db64
 80171dc:	0801d57c 	.word	0x0801d57c

080171e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b082      	sub	sp, #8
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d106      	bne.n	80171fc <tcp_rexmit_rto_commit+0x1c>
 80171ee:	4b0d      	ldr	r3, [pc, #52]	; (8017224 <tcp_rexmit_rto_commit+0x44>)
 80171f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80171f4:	490c      	ldr	r1, [pc, #48]	; (8017228 <tcp_rexmit_rto_commit+0x48>)
 80171f6:	480d      	ldr	r0, [pc, #52]	; (801722c <tcp_rexmit_rto_commit+0x4c>)
 80171f8:	f003 fe12 	bl	801ae20 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017202:	2bff      	cmp	r3, #255	; 0xff
 8017204:	d007      	beq.n	8017216 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801720c:	3301      	adds	r3, #1
 801720e:	b2da      	uxtb	r2, r3
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f7ff fc7a 	bl	8016b10 <tcp_output>
}
 801721c:	bf00      	nop
 801721e:	3708      	adds	r7, #8
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}
 8017224:	0801d528 	.word	0x0801d528
 8017228:	0801db88 	.word	0x0801db88
 801722c:	0801d57c 	.word	0x0801d57c

08017230 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b082      	sub	sp, #8
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d106      	bne.n	801724c <tcp_rexmit_rto+0x1c>
 801723e:	4b0a      	ldr	r3, [pc, #40]	; (8017268 <tcp_rexmit_rto+0x38>)
 8017240:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017244:	4909      	ldr	r1, [pc, #36]	; (801726c <tcp_rexmit_rto+0x3c>)
 8017246:	480a      	ldr	r0, [pc, #40]	; (8017270 <tcp_rexmit_rto+0x40>)
 8017248:	f003 fdea 	bl	801ae20 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801724c:	6878      	ldr	r0, [r7, #4]
 801724e:	f7ff ff57 	bl	8017100 <tcp_rexmit_rto_prepare>
 8017252:	4603      	mov	r3, r0
 8017254:	2b00      	cmp	r3, #0
 8017256:	d102      	bne.n	801725e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017258:	6878      	ldr	r0, [r7, #4]
 801725a:	f7ff ffc1 	bl	80171e0 <tcp_rexmit_rto_commit>
  }
}
 801725e:	bf00      	nop
 8017260:	3708      	adds	r7, #8
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	0801d528 	.word	0x0801d528
 801726c:	0801dbac 	.word	0x0801dbac
 8017270:	0801d57c 	.word	0x0801d57c

08017274 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017274:	b590      	push	{r4, r7, lr}
 8017276:	b085      	sub	sp, #20
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d106      	bne.n	8017290 <tcp_rexmit+0x1c>
 8017282:	4b2f      	ldr	r3, [pc, #188]	; (8017340 <tcp_rexmit+0xcc>)
 8017284:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017288:	492e      	ldr	r1, [pc, #184]	; (8017344 <tcp_rexmit+0xd0>)
 801728a:	482f      	ldr	r0, [pc, #188]	; (8017348 <tcp_rexmit+0xd4>)
 801728c:	f003 fdc8 	bl	801ae20 <iprintf>

  if (pcb->unacked == NULL) {
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017294:	2b00      	cmp	r3, #0
 8017296:	d102      	bne.n	801729e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017298:	f06f 0305 	mvn.w	r3, #5
 801729c:	e04c      	b.n	8017338 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80172a4:	68b8      	ldr	r0, [r7, #8]
 80172a6:	f7ff fe2b 	bl	8016f00 <tcp_output_segment_busy>
 80172aa:	4603      	mov	r3, r0
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d002      	beq.n	80172b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80172b0:	f06f 0305 	mvn.w	r3, #5
 80172b4:	e040      	b.n	8017338 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	681a      	ldr	r2, [r3, #0]
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	336c      	adds	r3, #108	; 0x6c
 80172c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80172c4:	e002      	b.n	80172cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d011      	beq.n	80172f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	68db      	ldr	r3, [r3, #12]
 80172da:	685b      	ldr	r3, [r3, #4]
 80172dc:	4618      	mov	r0, r3
 80172de:	f7f9 f858 	bl	8010392 <lwip_htonl>
 80172e2:	4604      	mov	r4, r0
 80172e4:	68bb      	ldr	r3, [r7, #8]
 80172e6:	68db      	ldr	r3, [r3, #12]
 80172e8:	685b      	ldr	r3, [r3, #4]
 80172ea:	4618      	mov	r0, r3
 80172ec:	f7f9 f851 	bl	8010392 <lwip_htonl>
 80172f0:	4603      	mov	r3, r0
 80172f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	dbe6      	blt.n	80172c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	681a      	ldr	r2, [r3, #0]
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	68ba      	ldr	r2, [r7, #8]
 8017304:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017306:	68bb      	ldr	r3, [r7, #8]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d103      	bne.n	8017316 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2200      	movs	r2, #0
 8017312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801731c:	2bff      	cmp	r3, #255	; 0xff
 801731e:	d007      	beq.n	8017330 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017326:	3301      	adds	r3, #1
 8017328:	b2da      	uxtb	r2, r3
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	2200      	movs	r2, #0
 8017334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017336:	2300      	movs	r3, #0
}
 8017338:	4618      	mov	r0, r3
 801733a:	3714      	adds	r7, #20
 801733c:	46bd      	mov	sp, r7
 801733e:	bd90      	pop	{r4, r7, pc}
 8017340:	0801d528 	.word	0x0801d528
 8017344:	0801dbc8 	.word	0x0801dbc8
 8017348:	0801d57c 	.word	0x0801d57c

0801734c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d106      	bne.n	8017368 <tcp_rexmit_fast+0x1c>
 801735a:	4b2f      	ldr	r3, [pc, #188]	; (8017418 <tcp_rexmit_fast+0xcc>)
 801735c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017360:	492e      	ldr	r1, [pc, #184]	; (801741c <tcp_rexmit_fast+0xd0>)
 8017362:	482f      	ldr	r0, [pc, #188]	; (8017420 <tcp_rexmit_fast+0xd4>)
 8017364:	f003 fd5c 	bl	801ae20 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801736c:	2b00      	cmp	r3, #0
 801736e:	d04f      	beq.n	8017410 <tcp_rexmit_fast+0xc4>
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	8b5b      	ldrh	r3, [r3, #26]
 8017374:	f003 0304 	and.w	r3, r3, #4
 8017378:	2b00      	cmp	r3, #0
 801737a:	d149      	bne.n	8017410 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7ff ff79 	bl	8017274 <tcp_rexmit>
 8017382:	4603      	mov	r3, r0
 8017384:	2b00      	cmp	r3, #0
 8017386:	d143      	bne.n	8017410 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017394:	429a      	cmp	r2, r3
 8017396:	d208      	bcs.n	80173aa <tcp_rexmit_fast+0x5e>
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801739e:	2b00      	cmp	r3, #0
 80173a0:	da00      	bge.n	80173a4 <tcp_rexmit_fast+0x58>
 80173a2:	3301      	adds	r3, #1
 80173a4:	105b      	asrs	r3, r3, #1
 80173a6:	b29b      	uxth	r3, r3
 80173a8:	e007      	b.n	80173ba <tcp_rexmit_fast+0x6e>
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	da00      	bge.n	80173b6 <tcp_rexmit_fast+0x6a>
 80173b4:	3301      	adds	r3, #1
 80173b6:	105b      	asrs	r3, r3, #1
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	687a      	ldr	r2, [r7, #4]
 80173bc:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80173c6:	461a      	mov	r2, r3
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173cc:	005b      	lsls	r3, r3, #1
 80173ce:	429a      	cmp	r2, r3
 80173d0:	d206      	bcs.n	80173e0 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173d6:	005b      	lsls	r3, r3, #1
 80173d8:	b29a      	uxth	r2, r3
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173ea:	4619      	mov	r1, r3
 80173ec:	0049      	lsls	r1, r1, #1
 80173ee:	440b      	add	r3, r1
 80173f0:	b29b      	uxth	r3, r3
 80173f2:	4413      	add	r3, r2
 80173f4:	b29a      	uxth	r2, r3
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	8b5b      	ldrh	r3, [r3, #26]
 8017400:	f043 0304 	orr.w	r3, r3, #4
 8017404:	b29a      	uxth	r2, r3
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	2200      	movs	r2, #0
 801740e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017410:	bf00      	nop
 8017412:	3708      	adds	r7, #8
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}
 8017418:	0801d528 	.word	0x0801d528
 801741c:	0801dbe0 	.word	0x0801dbe0
 8017420:	0801d57c 	.word	0x0801d57c

08017424 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b086      	sub	sp, #24
 8017428:	af00      	add	r7, sp, #0
 801742a:	60f8      	str	r0, [r7, #12]
 801742c:	607b      	str	r3, [r7, #4]
 801742e:	460b      	mov	r3, r1
 8017430:	817b      	strh	r3, [r7, #10]
 8017432:	4613      	mov	r3, r2
 8017434:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017436:	897a      	ldrh	r2, [r7, #10]
 8017438:	893b      	ldrh	r3, [r7, #8]
 801743a:	4413      	add	r3, r2
 801743c:	b29b      	uxth	r3, r3
 801743e:	3314      	adds	r3, #20
 8017440:	b29b      	uxth	r3, r3
 8017442:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017446:	4619      	mov	r1, r3
 8017448:	2022      	movs	r0, #34	; 0x22
 801744a:	f7fa faa9 	bl	80119a0 <pbuf_alloc>
 801744e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017450:	697b      	ldr	r3, [r7, #20]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d04e      	beq.n	80174f4 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017456:	697b      	ldr	r3, [r7, #20]
 8017458:	895b      	ldrh	r3, [r3, #10]
 801745a:	461a      	mov	r2, r3
 801745c:	897b      	ldrh	r3, [r7, #10]
 801745e:	3314      	adds	r3, #20
 8017460:	429a      	cmp	r2, r3
 8017462:	da06      	bge.n	8017472 <tcp_output_alloc_header_common+0x4e>
 8017464:	4b26      	ldr	r3, [pc, #152]	; (8017500 <tcp_output_alloc_header_common+0xdc>)
 8017466:	f240 7224 	movw	r2, #1828	; 0x724
 801746a:	4926      	ldr	r1, [pc, #152]	; (8017504 <tcp_output_alloc_header_common+0xe0>)
 801746c:	4826      	ldr	r0, [pc, #152]	; (8017508 <tcp_output_alloc_header_common+0xe4>)
 801746e:	f003 fcd7 	bl	801ae20 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017478:	8c3b      	ldrh	r3, [r7, #32]
 801747a:	4618      	mov	r0, r3
 801747c:	f7f8 ff74 	bl	8010368 <lwip_htons>
 8017480:	4603      	mov	r3, r0
 8017482:	461a      	mov	r2, r3
 8017484:	693b      	ldr	r3, [r7, #16]
 8017486:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801748a:	4618      	mov	r0, r3
 801748c:	f7f8 ff6c 	bl	8010368 <lwip_htons>
 8017490:	4603      	mov	r3, r0
 8017492:	461a      	mov	r2, r3
 8017494:	693b      	ldr	r3, [r7, #16]
 8017496:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	687a      	ldr	r2, [r7, #4]
 801749c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801749e:	68f8      	ldr	r0, [r7, #12]
 80174a0:	f7f8 ff77 	bl	8010392 <lwip_htonl>
 80174a4:	4602      	mov	r2, r0
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80174aa:	897b      	ldrh	r3, [r7, #10]
 80174ac:	089b      	lsrs	r3, r3, #2
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	3305      	adds	r3, #5
 80174b2:	b29b      	uxth	r3, r3
 80174b4:	031b      	lsls	r3, r3, #12
 80174b6:	b29a      	uxth	r2, r3
 80174b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80174bc:	b29b      	uxth	r3, r3
 80174be:	4313      	orrs	r3, r2
 80174c0:	b29b      	uxth	r3, r3
 80174c2:	4618      	mov	r0, r3
 80174c4:	f7f8 ff50 	bl	8010368 <lwip_htons>
 80174c8:	4603      	mov	r3, r0
 80174ca:	461a      	mov	r2, r3
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80174d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7f8 ff48 	bl	8010368 <lwip_htons>
 80174d8:	4603      	mov	r3, r0
 80174da:	461a      	mov	r2, r3
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	2200      	movs	r2, #0
 80174e4:	741a      	strb	r2, [r3, #16]
 80174e6:	2200      	movs	r2, #0
 80174e8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	2200      	movs	r2, #0
 80174ee:	749a      	strb	r2, [r3, #18]
 80174f0:	2200      	movs	r2, #0
 80174f2:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80174f4:	697b      	ldr	r3, [r7, #20]
}
 80174f6:	4618      	mov	r0, r3
 80174f8:	3718      	adds	r7, #24
 80174fa:	46bd      	mov	sp, r7
 80174fc:	bd80      	pop	{r7, pc}
 80174fe:	bf00      	nop
 8017500:	0801d528 	.word	0x0801d528
 8017504:	0801dc00 	.word	0x0801dc00
 8017508:	0801d57c 	.word	0x0801d57c

0801750c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801750c:	b5b0      	push	{r4, r5, r7, lr}
 801750e:	b08a      	sub	sp, #40	; 0x28
 8017510:	af04      	add	r7, sp, #16
 8017512:	60f8      	str	r0, [r7, #12]
 8017514:	607b      	str	r3, [r7, #4]
 8017516:	460b      	mov	r3, r1
 8017518:	817b      	strh	r3, [r7, #10]
 801751a:	4613      	mov	r3, r2
 801751c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d106      	bne.n	8017532 <tcp_output_alloc_header+0x26>
 8017524:	4b15      	ldr	r3, [pc, #84]	; (801757c <tcp_output_alloc_header+0x70>)
 8017526:	f240 7242 	movw	r2, #1858	; 0x742
 801752a:	4915      	ldr	r1, [pc, #84]	; (8017580 <tcp_output_alloc_header+0x74>)
 801752c:	4815      	ldr	r0, [pc, #84]	; (8017584 <tcp_output_alloc_header+0x78>)
 801752e:	f003 fc77 	bl	801ae20 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	8adb      	ldrh	r3, [r3, #22]
 801753a:	68fa      	ldr	r2, [r7, #12]
 801753c:	8b12      	ldrh	r2, [r2, #24]
 801753e:	68f9      	ldr	r1, [r7, #12]
 8017540:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017542:	893d      	ldrh	r5, [r7, #8]
 8017544:	897c      	ldrh	r4, [r7, #10]
 8017546:	9103      	str	r1, [sp, #12]
 8017548:	2110      	movs	r1, #16
 801754a:	9102      	str	r1, [sp, #8]
 801754c:	9201      	str	r2, [sp, #4]
 801754e:	9300      	str	r3, [sp, #0]
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	462a      	mov	r2, r5
 8017554:	4621      	mov	r1, r4
 8017556:	f7ff ff65 	bl	8017424 <tcp_output_alloc_header_common>
 801755a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801755c:	697b      	ldr	r3, [r7, #20]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d006      	beq.n	8017570 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017566:	68fa      	ldr	r2, [r7, #12]
 8017568:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801756a:	441a      	add	r2, r3
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017570:	697b      	ldr	r3, [r7, #20]
}
 8017572:	4618      	mov	r0, r3
 8017574:	3718      	adds	r7, #24
 8017576:	46bd      	mov	sp, r7
 8017578:	bdb0      	pop	{r4, r5, r7, pc}
 801757a:	bf00      	nop
 801757c:	0801d528 	.word	0x0801d528
 8017580:	0801dc30 	.word	0x0801dc30
 8017584:	0801d57c 	.word	0x0801d57c

08017588 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b088      	sub	sp, #32
 801758c:	af00      	add	r7, sp, #0
 801758e:	60f8      	str	r0, [r7, #12]
 8017590:	60b9      	str	r1, [r7, #8]
 8017592:	4611      	mov	r1, r2
 8017594:	461a      	mov	r2, r3
 8017596:	460b      	mov	r3, r1
 8017598:	71fb      	strb	r3, [r7, #7]
 801759a:	4613      	mov	r3, r2
 801759c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801759e:	2300      	movs	r3, #0
 80175a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d106      	bne.n	80175b6 <tcp_output_fill_options+0x2e>
 80175a8:	4b13      	ldr	r3, [pc, #76]	; (80175f8 <tcp_output_fill_options+0x70>)
 80175aa:	f240 7256 	movw	r2, #1878	; 0x756
 80175ae:	4913      	ldr	r1, [pc, #76]	; (80175fc <tcp_output_fill_options+0x74>)
 80175b0:	4813      	ldr	r0, [pc, #76]	; (8017600 <tcp_output_fill_options+0x78>)
 80175b2:	f003 fc35 	bl	801ae20 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	685b      	ldr	r3, [r3, #4]
 80175ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80175bc:	69bb      	ldr	r3, [r7, #24]
 80175be:	3314      	adds	r3, #20
 80175c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80175c2:	69bb      	ldr	r3, [r7, #24]
 80175c4:	f103 0214 	add.w	r2, r3, #20
 80175c8:	8bfb      	ldrh	r3, [r7, #30]
 80175ca:	009b      	lsls	r3, r3, #2
 80175cc:	4619      	mov	r1, r3
 80175ce:	79fb      	ldrb	r3, [r7, #7]
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	f003 0304 	and.w	r3, r3, #4
 80175d6:	440b      	add	r3, r1
 80175d8:	4413      	add	r3, r2
 80175da:	697a      	ldr	r2, [r7, #20]
 80175dc:	429a      	cmp	r2, r3
 80175de:	d006      	beq.n	80175ee <tcp_output_fill_options+0x66>
 80175e0:	4b05      	ldr	r3, [pc, #20]	; (80175f8 <tcp_output_fill_options+0x70>)
 80175e2:	f240 7275 	movw	r2, #1909	; 0x775
 80175e6:	4907      	ldr	r1, [pc, #28]	; (8017604 <tcp_output_fill_options+0x7c>)
 80175e8:	4805      	ldr	r0, [pc, #20]	; (8017600 <tcp_output_fill_options+0x78>)
 80175ea:	f003 fc19 	bl	801ae20 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80175ee:	bf00      	nop
 80175f0:	3720      	adds	r7, #32
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}
 80175f6:	bf00      	nop
 80175f8:	0801d528 	.word	0x0801d528
 80175fc:	0801dc58 	.word	0x0801dc58
 8017600:	0801d57c 	.word	0x0801d57c
 8017604:	0801db50 	.word	0x0801db50

08017608 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b08a      	sub	sp, #40	; 0x28
 801760c:	af04      	add	r7, sp, #16
 801760e:	60f8      	str	r0, [r7, #12]
 8017610:	60b9      	str	r1, [r7, #8]
 8017612:	607a      	str	r2, [r7, #4]
 8017614:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017616:	68bb      	ldr	r3, [r7, #8]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d106      	bne.n	801762a <tcp_output_control_segment+0x22>
 801761c:	4b1c      	ldr	r3, [pc, #112]	; (8017690 <tcp_output_control_segment+0x88>)
 801761e:	f240 7287 	movw	r2, #1927	; 0x787
 8017622:	491c      	ldr	r1, [pc, #112]	; (8017694 <tcp_output_control_segment+0x8c>)
 8017624:	481c      	ldr	r0, [pc, #112]	; (8017698 <tcp_output_control_segment+0x90>)
 8017626:	f003 fbfb 	bl	801ae20 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801762a:	683a      	ldr	r2, [r7, #0]
 801762c:	6879      	ldr	r1, [r7, #4]
 801762e:	68f8      	ldr	r0, [r7, #12]
 8017630:	f7fe ff2e 	bl	8016490 <tcp_route>
 8017634:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d102      	bne.n	8017642 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801763c:	23fc      	movs	r3, #252	; 0xfc
 801763e:	75fb      	strb	r3, [r7, #23]
 8017640:	e01c      	b.n	801767c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d006      	beq.n	8017656 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017648:	68fb      	ldr	r3, [r7, #12]
 801764a:	7adb      	ldrb	r3, [r3, #11]
 801764c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	7a9b      	ldrb	r3, [r3, #10]
 8017652:	757b      	strb	r3, [r7, #21]
 8017654:	e003      	b.n	801765e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017656:	23ff      	movs	r3, #255	; 0xff
 8017658:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801765a:	2300      	movs	r3, #0
 801765c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801765e:	7dba      	ldrb	r2, [r7, #22]
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	9302      	str	r3, [sp, #8]
 8017664:	2306      	movs	r3, #6
 8017666:	9301      	str	r3, [sp, #4]
 8017668:	7d7b      	ldrb	r3, [r7, #21]
 801766a:	9300      	str	r3, [sp, #0]
 801766c:	4613      	mov	r3, r2
 801766e:	683a      	ldr	r2, [r7, #0]
 8017670:	6879      	ldr	r1, [r7, #4]
 8017672:	68b8      	ldr	r0, [r7, #8]
 8017674:	f002 fa54 	bl	8019b20 <ip4_output_if>
 8017678:	4603      	mov	r3, r0
 801767a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801767c:	68b8      	ldr	r0, [r7, #8]
 801767e:	f7fa fc6f 	bl	8011f60 <pbuf_free>
  return err;
 8017682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017686:	4618      	mov	r0, r3
 8017688:	3718      	adds	r7, #24
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}
 801768e:	bf00      	nop
 8017690:	0801d528 	.word	0x0801d528
 8017694:	0801dc80 	.word	0x0801dc80
 8017698:	0801d57c 	.word	0x0801d57c

0801769c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801769c:	b590      	push	{r4, r7, lr}
 801769e:	b08b      	sub	sp, #44	; 0x2c
 80176a0:	af04      	add	r7, sp, #16
 80176a2:	60f8      	str	r0, [r7, #12]
 80176a4:	60b9      	str	r1, [r7, #8]
 80176a6:	607a      	str	r2, [r7, #4]
 80176a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d106      	bne.n	80176be <tcp_rst+0x22>
 80176b0:	4b1f      	ldr	r3, [pc, #124]	; (8017730 <tcp_rst+0x94>)
 80176b2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80176b6:	491f      	ldr	r1, [pc, #124]	; (8017734 <tcp_rst+0x98>)
 80176b8:	481f      	ldr	r0, [pc, #124]	; (8017738 <tcp_rst+0x9c>)
 80176ba:	f003 fbb1 	bl	801ae20 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80176be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d106      	bne.n	80176d2 <tcp_rst+0x36>
 80176c4:	4b1a      	ldr	r3, [pc, #104]	; (8017730 <tcp_rst+0x94>)
 80176c6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80176ca:	491c      	ldr	r1, [pc, #112]	; (801773c <tcp_rst+0xa0>)
 80176cc:	481a      	ldr	r0, [pc, #104]	; (8017738 <tcp_rst+0x9c>)
 80176ce:	f003 fba7 	bl	801ae20 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80176d2:	2300      	movs	r3, #0
 80176d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80176d6:	f246 0308 	movw	r3, #24584	; 0x6008
 80176da:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80176dc:	7dfb      	ldrb	r3, [r7, #23]
 80176de:	b29c      	uxth	r4, r3
 80176e0:	68b8      	ldr	r0, [r7, #8]
 80176e2:	f7f8 fe56 	bl	8010392 <lwip_htonl>
 80176e6:	4602      	mov	r2, r0
 80176e8:	8abb      	ldrh	r3, [r7, #20]
 80176ea:	9303      	str	r3, [sp, #12]
 80176ec:	2314      	movs	r3, #20
 80176ee:	9302      	str	r3, [sp, #8]
 80176f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80176f2:	9301      	str	r3, [sp, #4]
 80176f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80176f6:	9300      	str	r3, [sp, #0]
 80176f8:	4613      	mov	r3, r2
 80176fa:	2200      	movs	r2, #0
 80176fc:	4621      	mov	r1, r4
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f7ff fe90 	bl	8017424 <tcp_output_alloc_header_common>
 8017704:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d00c      	beq.n	8017726 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801770c:	7dfb      	ldrb	r3, [r7, #23]
 801770e:	2200      	movs	r2, #0
 8017710:	6939      	ldr	r1, [r7, #16]
 8017712:	68f8      	ldr	r0, [r7, #12]
 8017714:	f7ff ff38 	bl	8017588 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771a:	683a      	ldr	r2, [r7, #0]
 801771c:	6939      	ldr	r1, [r7, #16]
 801771e:	68f8      	ldr	r0, [r7, #12]
 8017720:	f7ff ff72 	bl	8017608 <tcp_output_control_segment>
 8017724:	e000      	b.n	8017728 <tcp_rst+0x8c>
    return;
 8017726:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017728:	371c      	adds	r7, #28
 801772a:	46bd      	mov	sp, r7
 801772c:	bd90      	pop	{r4, r7, pc}
 801772e:	bf00      	nop
 8017730:	0801d528 	.word	0x0801d528
 8017734:	0801dcac 	.word	0x0801dcac
 8017738:	0801d57c 	.word	0x0801d57c
 801773c:	0801dcc8 	.word	0x0801dcc8

08017740 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017740:	b590      	push	{r4, r7, lr}
 8017742:	b087      	sub	sp, #28
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017748:	2300      	movs	r3, #0
 801774a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801774c:	2300      	movs	r3, #0
 801774e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d106      	bne.n	8017764 <tcp_send_empty_ack+0x24>
 8017756:	4b28      	ldr	r3, [pc, #160]	; (80177f8 <tcp_send_empty_ack+0xb8>)
 8017758:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801775c:	4927      	ldr	r1, [pc, #156]	; (80177fc <tcp_send_empty_ack+0xbc>)
 801775e:	4828      	ldr	r0, [pc, #160]	; (8017800 <tcp_send_empty_ack+0xc0>)
 8017760:	f003 fb5e 	bl	801ae20 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017764:	7dfb      	ldrb	r3, [r7, #23]
 8017766:	009b      	lsls	r3, r3, #2
 8017768:	b2db      	uxtb	r3, r3
 801776a:	f003 0304 	and.w	r3, r3, #4
 801776e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017770:	7d7b      	ldrb	r3, [r7, #21]
 8017772:	b29c      	uxth	r4, r3
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017778:	4618      	mov	r0, r3
 801777a:	f7f8 fe0a 	bl	8010392 <lwip_htonl>
 801777e:	4603      	mov	r3, r0
 8017780:	2200      	movs	r2, #0
 8017782:	4621      	mov	r1, r4
 8017784:	6878      	ldr	r0, [r7, #4]
 8017786:	f7ff fec1 	bl	801750c <tcp_output_alloc_header>
 801778a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d109      	bne.n	80177a6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	8b5b      	ldrh	r3, [r3, #26]
 8017796:	f043 0303 	orr.w	r3, r3, #3
 801779a:	b29a      	uxth	r2, r3
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80177a0:	f06f 0301 	mvn.w	r3, #1
 80177a4:	e023      	b.n	80177ee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80177a6:	7dbb      	ldrb	r3, [r7, #22]
 80177a8:	7dfa      	ldrb	r2, [r7, #23]
 80177aa:	6939      	ldr	r1, [r7, #16]
 80177ac:	6878      	ldr	r0, [r7, #4]
 80177ae:	f7ff feeb 	bl	8017588 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80177b2:	687a      	ldr	r2, [r7, #4]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	3304      	adds	r3, #4
 80177b8:	6939      	ldr	r1, [r7, #16]
 80177ba:	6878      	ldr	r0, [r7, #4]
 80177bc:	f7ff ff24 	bl	8017608 <tcp_output_control_segment>
 80177c0:	4603      	mov	r3, r0
 80177c2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80177c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d007      	beq.n	80177dc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	8b5b      	ldrh	r3, [r3, #26]
 80177d0:	f043 0303 	orr.w	r3, r3, #3
 80177d4:	b29a      	uxth	r2, r3
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	835a      	strh	r2, [r3, #26]
 80177da:	e006      	b.n	80177ea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	8b5b      	ldrh	r3, [r3, #26]
 80177e0:	f023 0303 	bic.w	r3, r3, #3
 80177e4:	b29a      	uxth	r2, r3
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80177ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80177ee:	4618      	mov	r0, r3
 80177f0:	371c      	adds	r7, #28
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd90      	pop	{r4, r7, pc}
 80177f6:	bf00      	nop
 80177f8:	0801d528 	.word	0x0801d528
 80177fc:	0801dce4 	.word	0x0801dce4
 8017800:	0801d57c 	.word	0x0801d57c

08017804 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017804:	b590      	push	{r4, r7, lr}
 8017806:	b087      	sub	sp, #28
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801780c:	2300      	movs	r3, #0
 801780e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d106      	bne.n	8017824 <tcp_keepalive+0x20>
 8017816:	4b18      	ldr	r3, [pc, #96]	; (8017878 <tcp_keepalive+0x74>)
 8017818:	f640 0224 	movw	r2, #2084	; 0x824
 801781c:	4917      	ldr	r1, [pc, #92]	; (801787c <tcp_keepalive+0x78>)
 801781e:	4818      	ldr	r0, [pc, #96]	; (8017880 <tcp_keepalive+0x7c>)
 8017820:	f003 fafe 	bl	801ae20 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017824:	7dfb      	ldrb	r3, [r7, #23]
 8017826:	b29c      	uxth	r4, r3
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801782c:	3b01      	subs	r3, #1
 801782e:	4618      	mov	r0, r3
 8017830:	f7f8 fdaf 	bl	8010392 <lwip_htonl>
 8017834:	4603      	mov	r3, r0
 8017836:	2200      	movs	r2, #0
 8017838:	4621      	mov	r1, r4
 801783a:	6878      	ldr	r0, [r7, #4]
 801783c:	f7ff fe66 	bl	801750c <tcp_output_alloc_header>
 8017840:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017842:	693b      	ldr	r3, [r7, #16]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d102      	bne.n	801784e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801784c:	e010      	b.n	8017870 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801784e:	7dfb      	ldrb	r3, [r7, #23]
 8017850:	2200      	movs	r2, #0
 8017852:	6939      	ldr	r1, [r7, #16]
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f7ff fe97 	bl	8017588 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801785a:	687a      	ldr	r2, [r7, #4]
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	3304      	adds	r3, #4
 8017860:	6939      	ldr	r1, [r7, #16]
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f7ff fed0 	bl	8017608 <tcp_output_control_segment>
 8017868:	4603      	mov	r3, r0
 801786a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801786c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017870:	4618      	mov	r0, r3
 8017872:	371c      	adds	r7, #28
 8017874:	46bd      	mov	sp, r7
 8017876:	bd90      	pop	{r4, r7, pc}
 8017878:	0801d528 	.word	0x0801d528
 801787c:	0801dd04 	.word	0x0801dd04
 8017880:	0801d57c 	.word	0x0801d57c

08017884 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017884:	b590      	push	{r4, r7, lr}
 8017886:	b08b      	sub	sp, #44	; 0x2c
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801788c:	2300      	movs	r3, #0
 801788e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	2b00      	cmp	r3, #0
 8017896:	d106      	bne.n	80178a6 <tcp_zero_window_probe+0x22>
 8017898:	4b4c      	ldr	r3, [pc, #304]	; (80179cc <tcp_zero_window_probe+0x148>)
 801789a:	f640 024f 	movw	r2, #2127	; 0x84f
 801789e:	494c      	ldr	r1, [pc, #304]	; (80179d0 <tcp_zero_window_probe+0x14c>)
 80178a0:	484c      	ldr	r0, [pc, #304]	; (80179d4 <tcp_zero_window_probe+0x150>)
 80178a2:	f003 fabd 	bl	801ae20 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178aa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80178ac:	6a3b      	ldr	r3, [r7, #32]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d101      	bne.n	80178b6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80178b2:	2300      	movs	r3, #0
 80178b4:	e086      	b.n	80179c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80178bc:	2bff      	cmp	r3, #255	; 0xff
 80178be:	d007      	beq.n	80178d0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80178c6:	3301      	adds	r3, #1
 80178c8:	b2da      	uxtb	r2, r3
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80178d0:	6a3b      	ldr	r3, [r7, #32]
 80178d2:	68db      	ldr	r3, [r3, #12]
 80178d4:	899b      	ldrh	r3, [r3, #12]
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	4618      	mov	r0, r3
 80178da:	f7f8 fd45 	bl	8010368 <lwip_htons>
 80178de:	4603      	mov	r3, r0
 80178e0:	b2db      	uxtb	r3, r3
 80178e2:	f003 0301 	and.w	r3, r3, #1
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d005      	beq.n	80178f6 <tcp_zero_window_probe+0x72>
 80178ea:	6a3b      	ldr	r3, [r7, #32]
 80178ec:	891b      	ldrh	r3, [r3, #8]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d101      	bne.n	80178f6 <tcp_zero_window_probe+0x72>
 80178f2:	2301      	movs	r3, #1
 80178f4:	e000      	b.n	80178f8 <tcp_zero_window_probe+0x74>
 80178f6:	2300      	movs	r3, #0
 80178f8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80178fa:	7ffb      	ldrb	r3, [r7, #31]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	bf0c      	ite	eq
 8017900:	2301      	moveq	r3, #1
 8017902:	2300      	movne	r3, #0
 8017904:	b2db      	uxtb	r3, r3
 8017906:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801790c:	b299      	uxth	r1, r3
 801790e:	6a3b      	ldr	r3, [r7, #32]
 8017910:	68db      	ldr	r3, [r3, #12]
 8017912:	685b      	ldr	r3, [r3, #4]
 8017914:	8bba      	ldrh	r2, [r7, #28]
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f7ff fdf8 	bl	801750c <tcp_output_alloc_header>
 801791c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801791e:	69bb      	ldr	r3, [r7, #24]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d102      	bne.n	801792a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017928:	e04c      	b.n	80179c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801792a:	69bb      	ldr	r3, [r7, #24]
 801792c:	685b      	ldr	r3, [r3, #4]
 801792e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017930:	7ffb      	ldrb	r3, [r7, #31]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d011      	beq.n	801795a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017936:	697b      	ldr	r3, [r7, #20]
 8017938:	899b      	ldrh	r3, [r3, #12]
 801793a:	b29b      	uxth	r3, r3
 801793c:	b21b      	sxth	r3, r3
 801793e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017942:	b21c      	sxth	r4, r3
 8017944:	2011      	movs	r0, #17
 8017946:	f7f8 fd0f 	bl	8010368 <lwip_htons>
 801794a:	4603      	mov	r3, r0
 801794c:	b21b      	sxth	r3, r3
 801794e:	4323      	orrs	r3, r4
 8017950:	b21b      	sxth	r3, r3
 8017952:	b29a      	uxth	r2, r3
 8017954:	697b      	ldr	r3, [r7, #20]
 8017956:	819a      	strh	r2, [r3, #12]
 8017958:	e010      	b.n	801797c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801795a:	69bb      	ldr	r3, [r7, #24]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	3314      	adds	r3, #20
 8017960:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017962:	6a3b      	ldr	r3, [r7, #32]
 8017964:	6858      	ldr	r0, [r3, #4]
 8017966:	6a3b      	ldr	r3, [r7, #32]
 8017968:	685b      	ldr	r3, [r3, #4]
 801796a:	891a      	ldrh	r2, [r3, #8]
 801796c:	6a3b      	ldr	r3, [r7, #32]
 801796e:	891b      	ldrh	r3, [r3, #8]
 8017970:	1ad3      	subs	r3, r2, r3
 8017972:	b29b      	uxth	r3, r3
 8017974:	2201      	movs	r2, #1
 8017976:	6939      	ldr	r1, [r7, #16]
 8017978:	f7fa fcf8 	bl	801236c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801797c:	6a3b      	ldr	r3, [r7, #32]
 801797e:	68db      	ldr	r3, [r3, #12]
 8017980:	685b      	ldr	r3, [r3, #4]
 8017982:	4618      	mov	r0, r3
 8017984:	f7f8 fd05 	bl	8010392 <lwip_htonl>
 8017988:	4603      	mov	r3, r0
 801798a:	3301      	adds	r3, #1
 801798c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	1ad3      	subs	r3, r2, r3
 8017996:	2b00      	cmp	r3, #0
 8017998:	da02      	bge.n	80179a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	68fa      	ldr	r2, [r7, #12]
 801799e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80179a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179a4:	2200      	movs	r2, #0
 80179a6:	69b9      	ldr	r1, [r7, #24]
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f7ff fded 	bl	8017588 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80179ae:	687a      	ldr	r2, [r7, #4]
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	3304      	adds	r3, #4
 80179b4:	69b9      	ldr	r1, [r7, #24]
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7ff fe26 	bl	8017608 <tcp_output_control_segment>
 80179bc:	4603      	mov	r3, r0
 80179be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80179c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80179c4:	4618      	mov	r0, r3
 80179c6:	372c      	adds	r7, #44	; 0x2c
 80179c8:	46bd      	mov	sp, r7
 80179ca:	bd90      	pop	{r4, r7, pc}
 80179cc:	0801d528 	.word	0x0801d528
 80179d0:	0801dd20 	.word	0x0801dd20
 80179d4:	0801d57c 	.word	0x0801d57c

080179d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80179e0:	f7fa ff0c 	bl	80127fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80179e4:	4b0a      	ldr	r3, [pc, #40]	; (8017a10 <tcpip_tcp_timer+0x38>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d103      	bne.n	80179f4 <tcpip_tcp_timer+0x1c>
 80179ec:	4b09      	ldr	r3, [pc, #36]	; (8017a14 <tcpip_tcp_timer+0x3c>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d005      	beq.n	8017a00 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80179f4:	2200      	movs	r2, #0
 80179f6:	4908      	ldr	r1, [pc, #32]	; (8017a18 <tcpip_tcp_timer+0x40>)
 80179f8:	20fa      	movs	r0, #250	; 0xfa
 80179fa:	f000 f8f1 	bl	8017be0 <sys_timeout>
 80179fe:	e002      	b.n	8017a06 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017a00:	4b06      	ldr	r3, [pc, #24]	; (8017a1c <tcpip_tcp_timer+0x44>)
 8017a02:	2200      	movs	r2, #0
 8017a04:	601a      	str	r2, [r3, #0]
  }
}
 8017a06:	bf00      	nop
 8017a08:	3708      	adds	r7, #8
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}
 8017a0e:	bf00      	nop
 8017a10:	2000b4c4 	.word	0x2000b4c4
 8017a14:	2000b4d4 	.word	0x2000b4d4
 8017a18:	080179d9 	.word	0x080179d9
 8017a1c:	200045a0 	.word	0x200045a0

08017a20 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017a24:	4b0a      	ldr	r3, [pc, #40]	; (8017a50 <tcp_timer_needed+0x30>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d10f      	bne.n	8017a4c <tcp_timer_needed+0x2c>
 8017a2c:	4b09      	ldr	r3, [pc, #36]	; (8017a54 <tcp_timer_needed+0x34>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d103      	bne.n	8017a3c <tcp_timer_needed+0x1c>
 8017a34:	4b08      	ldr	r3, [pc, #32]	; (8017a58 <tcp_timer_needed+0x38>)
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d007      	beq.n	8017a4c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017a3c:	4b04      	ldr	r3, [pc, #16]	; (8017a50 <tcp_timer_needed+0x30>)
 8017a3e:	2201      	movs	r2, #1
 8017a40:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a42:	2200      	movs	r2, #0
 8017a44:	4905      	ldr	r1, [pc, #20]	; (8017a5c <tcp_timer_needed+0x3c>)
 8017a46:	20fa      	movs	r0, #250	; 0xfa
 8017a48:	f000 f8ca 	bl	8017be0 <sys_timeout>
  }
}
 8017a4c:	bf00      	nop
 8017a4e:	bd80      	pop	{r7, pc}
 8017a50:	200045a0 	.word	0x200045a0
 8017a54:	2000b4c4 	.word	0x2000b4c4
 8017a58:	2000b4d4 	.word	0x2000b4d4
 8017a5c:	080179d9 	.word	0x080179d9

08017a60 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b086      	sub	sp, #24
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	60f8      	str	r0, [r7, #12]
 8017a68:	60b9      	str	r1, [r7, #8]
 8017a6a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017a6c:	200a      	movs	r0, #10
 8017a6e:	f7f9 fbfd 	bl	801126c <memp_malloc>
 8017a72:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017a74:	693b      	ldr	r3, [r7, #16]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d109      	bne.n	8017a8e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017a7a:	693b      	ldr	r3, [r7, #16]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d151      	bne.n	8017b24 <sys_timeout_abs+0xc4>
 8017a80:	4b2a      	ldr	r3, [pc, #168]	; (8017b2c <sys_timeout_abs+0xcc>)
 8017a82:	22be      	movs	r2, #190	; 0xbe
 8017a84:	492a      	ldr	r1, [pc, #168]	; (8017b30 <sys_timeout_abs+0xd0>)
 8017a86:	482b      	ldr	r0, [pc, #172]	; (8017b34 <sys_timeout_abs+0xd4>)
 8017a88:	f003 f9ca 	bl	801ae20 <iprintf>
    return;
 8017a8c:	e04a      	b.n	8017b24 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017a8e:	693b      	ldr	r3, [r7, #16]
 8017a90:	2200      	movs	r2, #0
 8017a92:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017a94:	693b      	ldr	r3, [r7, #16]
 8017a96:	68ba      	ldr	r2, [r7, #8]
 8017a98:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	687a      	ldr	r2, [r7, #4]
 8017a9e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017aa0:	693b      	ldr	r3, [r7, #16]
 8017aa2:	68fa      	ldr	r2, [r7, #12]
 8017aa4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017aa6:	4b24      	ldr	r3, [pc, #144]	; (8017b38 <sys_timeout_abs+0xd8>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d103      	bne.n	8017ab6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017aae:	4a22      	ldr	r2, [pc, #136]	; (8017b38 <sys_timeout_abs+0xd8>)
 8017ab0:	693b      	ldr	r3, [r7, #16]
 8017ab2:	6013      	str	r3, [r2, #0]
    return;
 8017ab4:	e037      	b.n	8017b26 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017ab6:	693b      	ldr	r3, [r7, #16]
 8017ab8:	685a      	ldr	r2, [r3, #4]
 8017aba:	4b1f      	ldr	r3, [pc, #124]	; (8017b38 <sys_timeout_abs+0xd8>)
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	685b      	ldr	r3, [r3, #4]
 8017ac0:	1ad3      	subs	r3, r2, r3
 8017ac2:	0fdb      	lsrs	r3, r3, #31
 8017ac4:	f003 0301 	and.w	r3, r3, #1
 8017ac8:	b2db      	uxtb	r3, r3
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d007      	beq.n	8017ade <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017ace:	4b1a      	ldr	r3, [pc, #104]	; (8017b38 <sys_timeout_abs+0xd8>)
 8017ad0:	681a      	ldr	r2, [r3, #0]
 8017ad2:	693b      	ldr	r3, [r7, #16]
 8017ad4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017ad6:	4a18      	ldr	r2, [pc, #96]	; (8017b38 <sys_timeout_abs+0xd8>)
 8017ad8:	693b      	ldr	r3, [r7, #16]
 8017ada:	6013      	str	r3, [r2, #0]
 8017adc:	e023      	b.n	8017b26 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017ade:	4b16      	ldr	r3, [pc, #88]	; (8017b38 <sys_timeout_abs+0xd8>)
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	617b      	str	r3, [r7, #20]
 8017ae4:	e01a      	b.n	8017b1c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017ae6:	697b      	ldr	r3, [r7, #20]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d00b      	beq.n	8017b06 <sys_timeout_abs+0xa6>
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	685a      	ldr	r2, [r3, #4]
 8017af2:	697b      	ldr	r3, [r7, #20]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	685b      	ldr	r3, [r3, #4]
 8017af8:	1ad3      	subs	r3, r2, r3
 8017afa:	0fdb      	lsrs	r3, r3, #31
 8017afc:	f003 0301 	and.w	r3, r3, #1
 8017b00:	b2db      	uxtb	r3, r3
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d007      	beq.n	8017b16 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017b06:	697b      	ldr	r3, [r7, #20]
 8017b08:	681a      	ldr	r2, [r3, #0]
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017b0e:	697b      	ldr	r3, [r7, #20]
 8017b10:	693a      	ldr	r2, [r7, #16]
 8017b12:	601a      	str	r2, [r3, #0]
        break;
 8017b14:	e007      	b.n	8017b26 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	617b      	str	r3, [r7, #20]
 8017b1c:	697b      	ldr	r3, [r7, #20]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d1e1      	bne.n	8017ae6 <sys_timeout_abs+0x86>
 8017b22:	e000      	b.n	8017b26 <sys_timeout_abs+0xc6>
    return;
 8017b24:	bf00      	nop
      }
    }
  }
}
 8017b26:	3718      	adds	r7, #24
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	bd80      	pop	{r7, pc}
 8017b2c:	0801dd44 	.word	0x0801dd44
 8017b30:	0801dd78 	.word	0x0801dd78
 8017b34:	0801ddb8 	.word	0x0801ddb8
 8017b38:	20004598 	.word	0x20004598

08017b3c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b086      	sub	sp, #24
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017b48:	697b      	ldr	r3, [r7, #20]
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	4798      	blx	r3

  now = sys_now();
 8017b4e:	f7f5 fb87 	bl	800d260 <sys_now>
 8017b52:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017b54:	697b      	ldr	r3, [r7, #20]
 8017b56:	681a      	ldr	r2, [r3, #0]
 8017b58:	4b0f      	ldr	r3, [pc, #60]	; (8017b98 <lwip_cyclic_timer+0x5c>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	4413      	add	r3, r2
 8017b5e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017b60:	68fa      	ldr	r2, [r7, #12]
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	1ad3      	subs	r3, r2, r3
 8017b66:	0fdb      	lsrs	r3, r3, #31
 8017b68:	f003 0301 	and.w	r3, r3, #1
 8017b6c:	b2db      	uxtb	r3, r3
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d009      	beq.n	8017b86 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017b72:	697b      	ldr	r3, [r7, #20]
 8017b74:	681a      	ldr	r2, [r3, #0]
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	4413      	add	r3, r2
 8017b7a:	687a      	ldr	r2, [r7, #4]
 8017b7c:	4907      	ldr	r1, [pc, #28]	; (8017b9c <lwip_cyclic_timer+0x60>)
 8017b7e:	4618      	mov	r0, r3
 8017b80:	f7ff ff6e 	bl	8017a60 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017b84:	e004      	b.n	8017b90 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017b86:	687a      	ldr	r2, [r7, #4]
 8017b88:	4904      	ldr	r1, [pc, #16]	; (8017b9c <lwip_cyclic_timer+0x60>)
 8017b8a:	68f8      	ldr	r0, [r7, #12]
 8017b8c:	f7ff ff68 	bl	8017a60 <sys_timeout_abs>
}
 8017b90:	bf00      	nop
 8017b92:	3718      	adds	r7, #24
 8017b94:	46bd      	mov	sp, r7
 8017b96:	bd80      	pop	{r7, pc}
 8017b98:	2000459c 	.word	0x2000459c
 8017b9c:	08017b3d 	.word	0x08017b3d

08017ba0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b082      	sub	sp, #8
 8017ba4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	607b      	str	r3, [r7, #4]
 8017baa:	e00e      	b.n	8017bca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017bac:	4a0a      	ldr	r2, [pc, #40]	; (8017bd8 <sys_timeouts_init+0x38>)
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	00db      	lsls	r3, r3, #3
 8017bb8:	4a07      	ldr	r2, [pc, #28]	; (8017bd8 <sys_timeouts_init+0x38>)
 8017bba:	4413      	add	r3, r2
 8017bbc:	461a      	mov	r2, r3
 8017bbe:	4907      	ldr	r1, [pc, #28]	; (8017bdc <sys_timeouts_init+0x3c>)
 8017bc0:	f000 f80e 	bl	8017be0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	607b      	str	r3, [r7, #4]
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2b03      	cmp	r3, #3
 8017bce:	d9ed      	bls.n	8017bac <sys_timeouts_init+0xc>
  }
}
 8017bd0:	bf00      	nop
 8017bd2:	3708      	adds	r7, #8
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	0801e974 	.word	0x0801e974
 8017bdc:	08017b3d 	.word	0x08017b3d

08017be0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b086      	sub	sp, #24
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017bf2:	d306      	bcc.n	8017c02 <sys_timeout+0x22>
 8017bf4:	4b0a      	ldr	r3, [pc, #40]	; (8017c20 <sys_timeout+0x40>)
 8017bf6:	f240 1229 	movw	r2, #297	; 0x129
 8017bfa:	490a      	ldr	r1, [pc, #40]	; (8017c24 <sys_timeout+0x44>)
 8017bfc:	480a      	ldr	r0, [pc, #40]	; (8017c28 <sys_timeout+0x48>)
 8017bfe:	f003 f90f 	bl	801ae20 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017c02:	f7f5 fb2d 	bl	800d260 <sys_now>
 8017c06:	4602      	mov	r2, r0
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	4413      	add	r3, r2
 8017c0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017c0e:	687a      	ldr	r2, [r7, #4]
 8017c10:	68b9      	ldr	r1, [r7, #8]
 8017c12:	6978      	ldr	r0, [r7, #20]
 8017c14:	f7ff ff24 	bl	8017a60 <sys_timeout_abs>
#endif
}
 8017c18:	bf00      	nop
 8017c1a:	3718      	adds	r7, #24
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}
 8017c20:	0801dd44 	.word	0x0801dd44
 8017c24:	0801dde0 	.word	0x0801dde0
 8017c28:	0801ddb8 	.word	0x0801ddb8

08017c2c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017c2c:	b580      	push	{r7, lr}
 8017c2e:	b084      	sub	sp, #16
 8017c30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017c32:	f7f5 fb15 	bl	800d260 <sys_now>
 8017c36:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017c38:	4b17      	ldr	r3, [pc, #92]	; (8017c98 <sys_check_timeouts+0x6c>)
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d022      	beq.n	8017c8a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017c44:	68bb      	ldr	r3, [r7, #8]
 8017c46:	685b      	ldr	r3, [r3, #4]
 8017c48:	68fa      	ldr	r2, [r7, #12]
 8017c4a:	1ad3      	subs	r3, r2, r3
 8017c4c:	0fdb      	lsrs	r3, r3, #31
 8017c4e:	f003 0301 	and.w	r3, r3, #1
 8017c52:	b2db      	uxtb	r3, r3
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d11a      	bne.n	8017c8e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017c58:	68bb      	ldr	r3, [r7, #8]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	4a0e      	ldr	r2, [pc, #56]	; (8017c98 <sys_check_timeouts+0x6c>)
 8017c5e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017c60:	68bb      	ldr	r3, [r7, #8]
 8017c62:	689b      	ldr	r3, [r3, #8]
 8017c64:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017c66:	68bb      	ldr	r3, [r7, #8]
 8017c68:	68db      	ldr	r3, [r3, #12]
 8017c6a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	4a0a      	ldr	r2, [pc, #40]	; (8017c9c <sys_check_timeouts+0x70>)
 8017c72:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017c74:	68b9      	ldr	r1, [r7, #8]
 8017c76:	200a      	movs	r0, #10
 8017c78:	f7f9 fb4a 	bl	8011310 <memp_free>
    if (handler != NULL) {
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d0da      	beq.n	8017c38 <sys_check_timeouts+0xc>
      handler(arg);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	6838      	ldr	r0, [r7, #0]
 8017c86:	4798      	blx	r3
  do {
 8017c88:	e7d6      	b.n	8017c38 <sys_check_timeouts+0xc>
      return;
 8017c8a:	bf00      	nop
 8017c8c:	e000      	b.n	8017c90 <sys_check_timeouts+0x64>
      return;
 8017c8e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017c90:	3710      	adds	r7, #16
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd80      	pop	{r7, pc}
 8017c96:	bf00      	nop
 8017c98:	20004598 	.word	0x20004598
 8017c9c:	2000459c 	.word	0x2000459c

08017ca0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b082      	sub	sp, #8
 8017ca4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017ca6:	4b16      	ldr	r3, [pc, #88]	; (8017d00 <sys_timeouts_sleeptime+0x60>)
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d102      	bne.n	8017cb4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017cb2:	e020      	b.n	8017cf6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017cb4:	f7f5 fad4 	bl	800d260 <sys_now>
 8017cb8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017cba:	4b11      	ldr	r3, [pc, #68]	; (8017d00 <sys_timeouts_sleeptime+0x60>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	685a      	ldr	r2, [r3, #4]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	1ad3      	subs	r3, r2, r3
 8017cc4:	0fdb      	lsrs	r3, r3, #31
 8017cc6:	f003 0301 	and.w	r3, r3, #1
 8017cca:	b2db      	uxtb	r3, r3
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d001      	beq.n	8017cd4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	e010      	b.n	8017cf6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017cd4:	4b0a      	ldr	r3, [pc, #40]	; (8017d00 <sys_timeouts_sleeptime+0x60>)
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	685a      	ldr	r2, [r3, #4]
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	1ad3      	subs	r3, r2, r3
 8017cde:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	da06      	bge.n	8017cf4 <sys_timeouts_sleeptime+0x54>
 8017ce6:	4b07      	ldr	r3, [pc, #28]	; (8017d04 <sys_timeouts_sleeptime+0x64>)
 8017ce8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017cec:	4906      	ldr	r1, [pc, #24]	; (8017d08 <sys_timeouts_sleeptime+0x68>)
 8017cee:	4807      	ldr	r0, [pc, #28]	; (8017d0c <sys_timeouts_sleeptime+0x6c>)
 8017cf0:	f003 f896 	bl	801ae20 <iprintf>
    return ret;
 8017cf4:	683b      	ldr	r3, [r7, #0]
  }
}
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	3708      	adds	r7, #8
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	bd80      	pop	{r7, pc}
 8017cfe:	bf00      	nop
 8017d00:	20004598 	.word	0x20004598
 8017d04:	0801dd44 	.word	0x0801dd44
 8017d08:	0801de18 	.word	0x0801de18
 8017d0c:	0801ddb8 	.word	0x0801ddb8

08017d10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017d14:	f003 f89c 	bl	801ae50 <rand>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	b29b      	uxth	r3, r3
 8017d1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017d20:	b29b      	uxth	r3, r3
 8017d22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017d26:	b29a      	uxth	r2, r3
 8017d28:	4b01      	ldr	r3, [pc, #4]	; (8017d30 <udp_init+0x20>)
 8017d2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017d2c:	bf00      	nop
 8017d2e:	bd80      	pop	{r7, pc}
 8017d30:	20000058 	.word	0x20000058

08017d34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017d34:	b480      	push	{r7}
 8017d36:	b083      	sub	sp, #12
 8017d38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017d3e:	4b17      	ldr	r3, [pc, #92]	; (8017d9c <udp_new_port+0x68>)
 8017d40:	881b      	ldrh	r3, [r3, #0]
 8017d42:	1c5a      	adds	r2, r3, #1
 8017d44:	b291      	uxth	r1, r2
 8017d46:	4a15      	ldr	r2, [pc, #84]	; (8017d9c <udp_new_port+0x68>)
 8017d48:	8011      	strh	r1, [r2, #0]
 8017d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d4e:	4293      	cmp	r3, r2
 8017d50:	d103      	bne.n	8017d5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017d52:	4b12      	ldr	r3, [pc, #72]	; (8017d9c <udp_new_port+0x68>)
 8017d54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017d58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d5a:	4b11      	ldr	r3, [pc, #68]	; (8017da0 <udp_new_port+0x6c>)
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	603b      	str	r3, [r7, #0]
 8017d60:	e011      	b.n	8017d86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017d62:	683b      	ldr	r3, [r7, #0]
 8017d64:	8a5a      	ldrh	r2, [r3, #18]
 8017d66:	4b0d      	ldr	r3, [pc, #52]	; (8017d9c <udp_new_port+0x68>)
 8017d68:	881b      	ldrh	r3, [r3, #0]
 8017d6a:	429a      	cmp	r2, r3
 8017d6c:	d108      	bne.n	8017d80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017d6e:	88fb      	ldrh	r3, [r7, #6]
 8017d70:	3301      	adds	r3, #1
 8017d72:	80fb      	strh	r3, [r7, #6]
 8017d74:	88fb      	ldrh	r3, [r7, #6]
 8017d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017d7a:	d3e0      	bcc.n	8017d3e <udp_new_port+0xa>
        return 0;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	e007      	b.n	8017d90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	68db      	ldr	r3, [r3, #12]
 8017d84:	603b      	str	r3, [r7, #0]
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d1ea      	bne.n	8017d62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017d8c:	4b03      	ldr	r3, [pc, #12]	; (8017d9c <udp_new_port+0x68>)
 8017d8e:	881b      	ldrh	r3, [r3, #0]
}
 8017d90:	4618      	mov	r0, r3
 8017d92:	370c      	adds	r7, #12
 8017d94:	46bd      	mov	sp, r7
 8017d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9a:	4770      	bx	lr
 8017d9c:	20000058 	.word	0x20000058
 8017da0:	2000b4dc 	.word	0x2000b4dc

08017da4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b084      	sub	sp, #16
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	60f8      	str	r0, [r7, #12]
 8017dac:	60b9      	str	r1, [r7, #8]
 8017dae:	4613      	mov	r3, r2
 8017db0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d105      	bne.n	8017dc4 <udp_input_local_match+0x20>
 8017db8:	4b27      	ldr	r3, [pc, #156]	; (8017e58 <udp_input_local_match+0xb4>)
 8017dba:	2287      	movs	r2, #135	; 0x87
 8017dbc:	4927      	ldr	r1, [pc, #156]	; (8017e5c <udp_input_local_match+0xb8>)
 8017dbe:	4828      	ldr	r0, [pc, #160]	; (8017e60 <udp_input_local_match+0xbc>)
 8017dc0:	f003 f82e 	bl	801ae20 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d105      	bne.n	8017dd6 <udp_input_local_match+0x32>
 8017dca:	4b23      	ldr	r3, [pc, #140]	; (8017e58 <udp_input_local_match+0xb4>)
 8017dcc:	2288      	movs	r2, #136	; 0x88
 8017dce:	4925      	ldr	r1, [pc, #148]	; (8017e64 <udp_input_local_match+0xc0>)
 8017dd0:	4823      	ldr	r0, [pc, #140]	; (8017e60 <udp_input_local_match+0xbc>)
 8017dd2:	f003 f825 	bl	801ae20 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	7a1b      	ldrb	r3, [r3, #8]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d00b      	beq.n	8017df6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	7a1a      	ldrb	r2, [r3, #8]
 8017de2:	4b21      	ldr	r3, [pc, #132]	; (8017e68 <udp_input_local_match+0xc4>)
 8017de4:	685b      	ldr	r3, [r3, #4]
 8017de6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017dea:	3301      	adds	r3, #1
 8017dec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d001      	beq.n	8017df6 <udp_input_local_match+0x52>
    return 0;
 8017df2:	2300      	movs	r3, #0
 8017df4:	e02b      	b.n	8017e4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017df6:	79fb      	ldrb	r3, [r7, #7]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d018      	beq.n	8017e2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d013      	beq.n	8017e2a <udp_input_local_match+0x86>
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d00f      	beq.n	8017e2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e0a:	4b17      	ldr	r3, [pc, #92]	; (8017e68 <udp_input_local_match+0xc4>)
 8017e0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017e12:	d00a      	beq.n	8017e2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	681a      	ldr	r2, [r3, #0]
 8017e18:	4b13      	ldr	r3, [pc, #76]	; (8017e68 <udp_input_local_match+0xc4>)
 8017e1a:	695b      	ldr	r3, [r3, #20]
 8017e1c:	405a      	eors	r2, r3
 8017e1e:	68bb      	ldr	r3, [r7, #8]
 8017e20:	3308      	adds	r3, #8
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d110      	bne.n	8017e4c <udp_input_local_match+0xa8>
          return 1;
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	e00f      	b.n	8017e4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d009      	beq.n	8017e48 <udp_input_local_match+0xa4>
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d005      	beq.n	8017e48 <udp_input_local_match+0xa4>
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	681a      	ldr	r2, [r3, #0]
 8017e40:	4b09      	ldr	r3, [pc, #36]	; (8017e68 <udp_input_local_match+0xc4>)
 8017e42:	695b      	ldr	r3, [r3, #20]
 8017e44:	429a      	cmp	r2, r3
 8017e46:	d101      	bne.n	8017e4c <udp_input_local_match+0xa8>
        return 1;
 8017e48:	2301      	movs	r3, #1
 8017e4a:	e000      	b.n	8017e4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017e4c:	2300      	movs	r3, #0
}
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3710      	adds	r7, #16
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	0801de2c 	.word	0x0801de2c
 8017e5c:	0801de5c 	.word	0x0801de5c
 8017e60:	0801de80 	.word	0x0801de80
 8017e64:	0801dea8 	.word	0x0801dea8
 8017e68:	20007c68 	.word	0x20007c68

08017e6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017e6c:	b590      	push	{r4, r7, lr}
 8017e6e:	b08d      	sub	sp, #52	; 0x34
 8017e70:	af02      	add	r7, sp, #8
 8017e72:	6078      	str	r0, [r7, #4]
 8017e74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017e76:	2300      	movs	r3, #0
 8017e78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d105      	bne.n	8017e8c <udp_input+0x20>
 8017e80:	4b7c      	ldr	r3, [pc, #496]	; (8018074 <udp_input+0x208>)
 8017e82:	22cf      	movs	r2, #207	; 0xcf
 8017e84:	497c      	ldr	r1, [pc, #496]	; (8018078 <udp_input+0x20c>)
 8017e86:	487d      	ldr	r0, [pc, #500]	; (801807c <udp_input+0x210>)
 8017e88:	f002 ffca 	bl	801ae20 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d105      	bne.n	8017e9e <udp_input+0x32>
 8017e92:	4b78      	ldr	r3, [pc, #480]	; (8018074 <udp_input+0x208>)
 8017e94:	22d0      	movs	r2, #208	; 0xd0
 8017e96:	497a      	ldr	r1, [pc, #488]	; (8018080 <udp_input+0x214>)
 8017e98:	4878      	ldr	r0, [pc, #480]	; (801807c <udp_input+0x210>)
 8017e9a:	f002 ffc1 	bl	801ae20 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	895b      	ldrh	r3, [r3, #10]
 8017ea2:	2b07      	cmp	r3, #7
 8017ea4:	d803      	bhi.n	8017eae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017ea6:	6878      	ldr	r0, [r7, #4]
 8017ea8:	f7fa f85a 	bl	8011f60 <pbuf_free>
    goto end;
 8017eac:	e0de      	b.n	801806c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	685b      	ldr	r3, [r3, #4]
 8017eb2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017eb4:	4b73      	ldr	r3, [pc, #460]	; (8018084 <udp_input+0x218>)
 8017eb6:	695a      	ldr	r2, [r3, #20]
 8017eb8:	4b72      	ldr	r3, [pc, #456]	; (8018084 <udp_input+0x218>)
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	4619      	mov	r1, r3
 8017ebe:	4610      	mov	r0, r2
 8017ec0:	f001 ff06 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	881b      	ldrh	r3, [r3, #0]
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f7f8 fa4a 	bl	8010368 <lwip_htons>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017ed8:	697b      	ldr	r3, [r7, #20]
 8017eda:	885b      	ldrh	r3, [r3, #2]
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f7f8 fa42 	bl	8010368 <lwip_htons>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017ee8:	2300      	movs	r3, #0
 8017eea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017eec:	2300      	movs	r3, #0
 8017eee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ef4:	4b64      	ldr	r3, [pc, #400]	; (8018088 <udp_input+0x21c>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8017efa:	e054      	b.n	8017fa6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017efe:	8a5b      	ldrh	r3, [r3, #18]
 8017f00:	89fa      	ldrh	r2, [r7, #14]
 8017f02:	429a      	cmp	r2, r3
 8017f04:	d14a      	bne.n	8017f9c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f06:	7cfb      	ldrb	r3, [r7, #19]
 8017f08:	461a      	mov	r2, r3
 8017f0a:	6839      	ldr	r1, [r7, #0]
 8017f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f0e:	f7ff ff49 	bl	8017da4 <udp_input_local_match>
 8017f12:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d041      	beq.n	8017f9c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1a:	7c1b      	ldrb	r3, [r3, #16]
 8017f1c:	f003 0304 	and.w	r3, r3, #4
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d11d      	bne.n	8017f60 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017f24:	69fb      	ldr	r3, [r7, #28]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d102      	bne.n	8017f30 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f2c:	61fb      	str	r3, [r7, #28]
 8017f2e:	e017      	b.n	8017f60 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017f30:	7cfb      	ldrb	r3, [r7, #19]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d014      	beq.n	8017f60 <udp_input+0xf4>
 8017f36:	4b53      	ldr	r3, [pc, #332]	; (8018084 <udp_input+0x218>)
 8017f38:	695b      	ldr	r3, [r3, #20]
 8017f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f3e:	d10f      	bne.n	8017f60 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017f40:	69fb      	ldr	r3, [r7, #28]
 8017f42:	681a      	ldr	r2, [r3, #0]
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	3304      	adds	r3, #4
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	429a      	cmp	r2, r3
 8017f4c:	d008      	beq.n	8017f60 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f50:	681a      	ldr	r2, [r3, #0]
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	3304      	adds	r3, #4
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d101      	bne.n	8017f60 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f5e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f62:	8a9b      	ldrh	r3, [r3, #20]
 8017f64:	8a3a      	ldrh	r2, [r7, #16]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d118      	bne.n	8017f9c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f6c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d005      	beq.n	8017f7e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f74:	685a      	ldr	r2, [r3, #4]
 8017f76:	4b43      	ldr	r3, [pc, #268]	; (8018084 <udp_input+0x218>)
 8017f78:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d10e      	bne.n	8017f9c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017f7e:	6a3b      	ldr	r3, [r7, #32]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d014      	beq.n	8017fae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f86:	68da      	ldr	r2, [r3, #12]
 8017f88:	6a3b      	ldr	r3, [r7, #32]
 8017f8a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017f8c:	4b3e      	ldr	r3, [pc, #248]	; (8018088 <udp_input+0x21c>)
 8017f8e:	681a      	ldr	r2, [r3, #0]
 8017f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f92:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017f94:	4a3c      	ldr	r2, [pc, #240]	; (8018088 <udp_input+0x21c>)
 8017f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f98:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017f9a:	e008      	b.n	8017fae <udp_input+0x142>
      }
    }

    prev = pcb;
 8017f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f9e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa2:	68db      	ldr	r3, [r3, #12]
 8017fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8017fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d1a7      	bne.n	8017efc <udp_input+0x90>
 8017fac:	e000      	b.n	8017fb0 <udp_input+0x144>
        break;
 8017fae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d101      	bne.n	8017fba <udp_input+0x14e>
    pcb = uncon_pcb;
 8017fb6:	69fb      	ldr	r3, [r7, #28]
 8017fb8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d002      	beq.n	8017fc6 <udp_input+0x15a>
    for_us = 1;
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	76fb      	strb	r3, [r7, #27]
 8017fc4:	e00a      	b.n	8017fdc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	3304      	adds	r3, #4
 8017fca:	681a      	ldr	r2, [r3, #0]
 8017fcc:	4b2d      	ldr	r3, [pc, #180]	; (8018084 <udp_input+0x218>)
 8017fce:	695b      	ldr	r3, [r3, #20]
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	bf0c      	ite	eq
 8017fd4:	2301      	moveq	r3, #1
 8017fd6:	2300      	movne	r3, #0
 8017fd8:	b2db      	uxtb	r3, r3
 8017fda:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017fdc:	7efb      	ldrb	r3, [r7, #27]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d041      	beq.n	8018066 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017fe2:	2108      	movs	r1, #8
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f7f9 ff35 	bl	8011e54 <pbuf_remove_header>
 8017fea:	4603      	mov	r3, r0
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d00a      	beq.n	8018006 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017ff0:	4b20      	ldr	r3, [pc, #128]	; (8018074 <udp_input+0x208>)
 8017ff2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017ff6:	4925      	ldr	r1, [pc, #148]	; (801808c <udp_input+0x220>)
 8017ff8:	4820      	ldr	r0, [pc, #128]	; (801807c <udp_input+0x210>)
 8017ffa:	f002 ff11 	bl	801ae20 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f7f9 ffae 	bl	8011f60 <pbuf_free>
      goto end;
 8018004:	e032      	b.n	801806c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018008:	2b00      	cmp	r3, #0
 801800a:	d012      	beq.n	8018032 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800e:	699b      	ldr	r3, [r3, #24]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d00a      	beq.n	801802a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018016:	699c      	ldr	r4, [r3, #24]
 8018018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801a:	69d8      	ldr	r0, [r3, #28]
 801801c:	8a3b      	ldrh	r3, [r7, #16]
 801801e:	9300      	str	r3, [sp, #0]
 8018020:	4b1b      	ldr	r3, [pc, #108]	; (8018090 <udp_input+0x224>)
 8018022:	687a      	ldr	r2, [r7, #4]
 8018024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018026:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018028:	e021      	b.n	801806e <udp_input+0x202>
        pbuf_free(p);
 801802a:	6878      	ldr	r0, [r7, #4]
 801802c:	f7f9 ff98 	bl	8011f60 <pbuf_free>
        goto end;
 8018030:	e01c      	b.n	801806c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018032:	7cfb      	ldrb	r3, [r7, #19]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d112      	bne.n	801805e <udp_input+0x1f2>
 8018038:	4b12      	ldr	r3, [pc, #72]	; (8018084 <udp_input+0x218>)
 801803a:	695b      	ldr	r3, [r3, #20]
 801803c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018040:	2be0      	cmp	r3, #224	; 0xe0
 8018042:	d00c      	beq.n	801805e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018044:	4b0f      	ldr	r3, [pc, #60]	; (8018084 <udp_input+0x218>)
 8018046:	899b      	ldrh	r3, [r3, #12]
 8018048:	3308      	adds	r3, #8
 801804a:	b29b      	uxth	r3, r3
 801804c:	b21b      	sxth	r3, r3
 801804e:	4619      	mov	r1, r3
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f7f9 ff72 	bl	8011f3a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018056:	2103      	movs	r1, #3
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f001 fb1b 	bl	8019694 <icmp_dest_unreach>
      pbuf_free(p);
 801805e:	6878      	ldr	r0, [r7, #4]
 8018060:	f7f9 ff7e 	bl	8011f60 <pbuf_free>
  return;
 8018064:	e003      	b.n	801806e <udp_input+0x202>
    pbuf_free(p);
 8018066:	6878      	ldr	r0, [r7, #4]
 8018068:	f7f9 ff7a 	bl	8011f60 <pbuf_free>
  return;
 801806c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801806e:	372c      	adds	r7, #44	; 0x2c
 8018070:	46bd      	mov	sp, r7
 8018072:	bd90      	pop	{r4, r7, pc}
 8018074:	0801de2c 	.word	0x0801de2c
 8018078:	0801ded0 	.word	0x0801ded0
 801807c:	0801de80 	.word	0x0801de80
 8018080:	0801dee8 	.word	0x0801dee8
 8018084:	20007c68 	.word	0x20007c68
 8018088:	2000b4dc 	.word	0x2000b4dc
 801808c:	0801df04 	.word	0x0801df04
 8018090:	20007c78 	.word	0x20007c78

08018094 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b088      	sub	sp, #32
 8018098:	af02      	add	r7, sp, #8
 801809a:	60f8      	str	r0, [r7, #12]
 801809c:	60b9      	str	r1, [r7, #8]
 801809e:	607a      	str	r2, [r7, #4]
 80180a0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d109      	bne.n	80180bc <udp_sendto+0x28>
 80180a8:	4b23      	ldr	r3, [pc, #140]	; (8018138 <udp_sendto+0xa4>)
 80180aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80180ae:	4923      	ldr	r1, [pc, #140]	; (801813c <udp_sendto+0xa8>)
 80180b0:	4823      	ldr	r0, [pc, #140]	; (8018140 <udp_sendto+0xac>)
 80180b2:	f002 feb5 	bl	801ae20 <iprintf>
 80180b6:	f06f 030f 	mvn.w	r3, #15
 80180ba:	e038      	b.n	801812e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d109      	bne.n	80180d6 <udp_sendto+0x42>
 80180c2:	4b1d      	ldr	r3, [pc, #116]	; (8018138 <udp_sendto+0xa4>)
 80180c4:	f240 2219 	movw	r2, #537	; 0x219
 80180c8:	491e      	ldr	r1, [pc, #120]	; (8018144 <udp_sendto+0xb0>)
 80180ca:	481d      	ldr	r0, [pc, #116]	; (8018140 <udp_sendto+0xac>)
 80180cc:	f002 fea8 	bl	801ae20 <iprintf>
 80180d0:	f06f 030f 	mvn.w	r3, #15
 80180d4:	e02b      	b.n	801812e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d109      	bne.n	80180f0 <udp_sendto+0x5c>
 80180dc:	4b16      	ldr	r3, [pc, #88]	; (8018138 <udp_sendto+0xa4>)
 80180de:	f240 221a 	movw	r2, #538	; 0x21a
 80180e2:	4919      	ldr	r1, [pc, #100]	; (8018148 <udp_sendto+0xb4>)
 80180e4:	4816      	ldr	r0, [pc, #88]	; (8018140 <udp_sendto+0xac>)
 80180e6:	f002 fe9b 	bl	801ae20 <iprintf>
 80180ea:	f06f 030f 	mvn.w	r3, #15
 80180ee:	e01e      	b.n	801812e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	7a1b      	ldrb	r3, [r3, #8]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d006      	beq.n	8018106 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	7a1b      	ldrb	r3, [r3, #8]
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7f9 fba5 	bl	801184c <netif_get_by_index>
 8018102:	6178      	str	r0, [r7, #20]
 8018104:	e003      	b.n	801810e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018106:	6878      	ldr	r0, [r7, #4]
 8018108:	f001 fb4e 	bl	80197a8 <ip4_route>
 801810c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801810e:	697b      	ldr	r3, [r7, #20]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d102      	bne.n	801811a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018114:	f06f 0303 	mvn.w	r3, #3
 8018118:	e009      	b.n	801812e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801811a:	887a      	ldrh	r2, [r7, #2]
 801811c:	697b      	ldr	r3, [r7, #20]
 801811e:	9300      	str	r3, [sp, #0]
 8018120:	4613      	mov	r3, r2
 8018122:	687a      	ldr	r2, [r7, #4]
 8018124:	68b9      	ldr	r1, [r7, #8]
 8018126:	68f8      	ldr	r0, [r7, #12]
 8018128:	f000 f810 	bl	801814c <udp_sendto_if>
 801812c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801812e:	4618      	mov	r0, r3
 8018130:	3718      	adds	r7, #24
 8018132:	46bd      	mov	sp, r7
 8018134:	bd80      	pop	{r7, pc}
 8018136:	bf00      	nop
 8018138:	0801de2c 	.word	0x0801de2c
 801813c:	0801df50 	.word	0x0801df50
 8018140:	0801de80 	.word	0x0801de80
 8018144:	0801df68 	.word	0x0801df68
 8018148:	0801df84 	.word	0x0801df84

0801814c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b088      	sub	sp, #32
 8018150:	af02      	add	r7, sp, #8
 8018152:	60f8      	str	r0, [r7, #12]
 8018154:	60b9      	str	r1, [r7, #8]
 8018156:	607a      	str	r2, [r7, #4]
 8018158:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d109      	bne.n	8018174 <udp_sendto_if+0x28>
 8018160:	4b2e      	ldr	r3, [pc, #184]	; (801821c <udp_sendto_if+0xd0>)
 8018162:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018166:	492e      	ldr	r1, [pc, #184]	; (8018220 <udp_sendto_if+0xd4>)
 8018168:	482e      	ldr	r0, [pc, #184]	; (8018224 <udp_sendto_if+0xd8>)
 801816a:	f002 fe59 	bl	801ae20 <iprintf>
 801816e:	f06f 030f 	mvn.w	r3, #15
 8018172:	e04f      	b.n	8018214 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d109      	bne.n	801818e <udp_sendto_if+0x42>
 801817a:	4b28      	ldr	r3, [pc, #160]	; (801821c <udp_sendto_if+0xd0>)
 801817c:	f240 2281 	movw	r2, #641	; 0x281
 8018180:	4929      	ldr	r1, [pc, #164]	; (8018228 <udp_sendto_if+0xdc>)
 8018182:	4828      	ldr	r0, [pc, #160]	; (8018224 <udp_sendto_if+0xd8>)
 8018184:	f002 fe4c 	bl	801ae20 <iprintf>
 8018188:	f06f 030f 	mvn.w	r3, #15
 801818c:	e042      	b.n	8018214 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d109      	bne.n	80181a8 <udp_sendto_if+0x5c>
 8018194:	4b21      	ldr	r3, [pc, #132]	; (801821c <udp_sendto_if+0xd0>)
 8018196:	f240 2282 	movw	r2, #642	; 0x282
 801819a:	4924      	ldr	r1, [pc, #144]	; (801822c <udp_sendto_if+0xe0>)
 801819c:	4821      	ldr	r0, [pc, #132]	; (8018224 <udp_sendto_if+0xd8>)
 801819e:	f002 fe3f 	bl	801ae20 <iprintf>
 80181a2:	f06f 030f 	mvn.w	r3, #15
 80181a6:	e035      	b.n	8018214 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80181a8:	6a3b      	ldr	r3, [r7, #32]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d109      	bne.n	80181c2 <udp_sendto_if+0x76>
 80181ae:	4b1b      	ldr	r3, [pc, #108]	; (801821c <udp_sendto_if+0xd0>)
 80181b0:	f240 2283 	movw	r2, #643	; 0x283
 80181b4:	491e      	ldr	r1, [pc, #120]	; (8018230 <udp_sendto_if+0xe4>)
 80181b6:	481b      	ldr	r0, [pc, #108]	; (8018224 <udp_sendto_if+0xd8>)
 80181b8:	f002 fe32 	bl	801ae20 <iprintf>
 80181bc:	f06f 030f 	mvn.w	r3, #15
 80181c0:	e028      	b.n	8018214 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d009      	beq.n	80181dc <udp_sendto_if+0x90>
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d005      	beq.n	80181dc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80181d8:	2be0      	cmp	r3, #224	; 0xe0
 80181da:	d103      	bne.n	80181e4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80181dc:	6a3b      	ldr	r3, [r7, #32]
 80181de:	3304      	adds	r3, #4
 80181e0:	617b      	str	r3, [r7, #20]
 80181e2:	e00b      	b.n	80181fc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	681a      	ldr	r2, [r3, #0]
 80181e8:	6a3b      	ldr	r3, [r7, #32]
 80181ea:	3304      	adds	r3, #4
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d002      	beq.n	80181f8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80181f2:	f06f 0303 	mvn.w	r3, #3
 80181f6:	e00d      	b.n	8018214 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80181fc:	887a      	ldrh	r2, [r7, #2]
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	9301      	str	r3, [sp, #4]
 8018202:	6a3b      	ldr	r3, [r7, #32]
 8018204:	9300      	str	r3, [sp, #0]
 8018206:	4613      	mov	r3, r2
 8018208:	687a      	ldr	r2, [r7, #4]
 801820a:	68b9      	ldr	r1, [r7, #8]
 801820c:	68f8      	ldr	r0, [r7, #12]
 801820e:	f000 f811 	bl	8018234 <udp_sendto_if_src>
 8018212:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018214:	4618      	mov	r0, r3
 8018216:	3718      	adds	r7, #24
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	0801de2c 	.word	0x0801de2c
 8018220:	0801dfa0 	.word	0x0801dfa0
 8018224:	0801de80 	.word	0x0801de80
 8018228:	0801dfbc 	.word	0x0801dfbc
 801822c:	0801dfd8 	.word	0x0801dfd8
 8018230:	0801dff8 	.word	0x0801dff8

08018234 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b08c      	sub	sp, #48	; 0x30
 8018238:	af04      	add	r7, sp, #16
 801823a:	60f8      	str	r0, [r7, #12]
 801823c:	60b9      	str	r1, [r7, #8]
 801823e:	607a      	str	r2, [r7, #4]
 8018240:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d109      	bne.n	801825c <udp_sendto_if_src+0x28>
 8018248:	4b65      	ldr	r3, [pc, #404]	; (80183e0 <udp_sendto_if_src+0x1ac>)
 801824a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801824e:	4965      	ldr	r1, [pc, #404]	; (80183e4 <udp_sendto_if_src+0x1b0>)
 8018250:	4865      	ldr	r0, [pc, #404]	; (80183e8 <udp_sendto_if_src+0x1b4>)
 8018252:	f002 fde5 	bl	801ae20 <iprintf>
 8018256:	f06f 030f 	mvn.w	r3, #15
 801825a:	e0bc      	b.n	80183d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d109      	bne.n	8018276 <udp_sendto_if_src+0x42>
 8018262:	4b5f      	ldr	r3, [pc, #380]	; (80183e0 <udp_sendto_if_src+0x1ac>)
 8018264:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018268:	4960      	ldr	r1, [pc, #384]	; (80183ec <udp_sendto_if_src+0x1b8>)
 801826a:	485f      	ldr	r0, [pc, #380]	; (80183e8 <udp_sendto_if_src+0x1b4>)
 801826c:	f002 fdd8 	bl	801ae20 <iprintf>
 8018270:	f06f 030f 	mvn.w	r3, #15
 8018274:	e0af      	b.n	80183d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d109      	bne.n	8018290 <udp_sendto_if_src+0x5c>
 801827c:	4b58      	ldr	r3, [pc, #352]	; (80183e0 <udp_sendto_if_src+0x1ac>)
 801827e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8018282:	495b      	ldr	r1, [pc, #364]	; (80183f0 <udp_sendto_if_src+0x1bc>)
 8018284:	4858      	ldr	r0, [pc, #352]	; (80183e8 <udp_sendto_if_src+0x1b4>)
 8018286:	f002 fdcb 	bl	801ae20 <iprintf>
 801828a:	f06f 030f 	mvn.w	r3, #15
 801828e:	e0a2      	b.n	80183d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018292:	2b00      	cmp	r3, #0
 8018294:	d109      	bne.n	80182aa <udp_sendto_if_src+0x76>
 8018296:	4b52      	ldr	r3, [pc, #328]	; (80183e0 <udp_sendto_if_src+0x1ac>)
 8018298:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801829c:	4955      	ldr	r1, [pc, #340]	; (80183f4 <udp_sendto_if_src+0x1c0>)
 801829e:	4852      	ldr	r0, [pc, #328]	; (80183e8 <udp_sendto_if_src+0x1b4>)
 80182a0:	f002 fdbe 	bl	801ae20 <iprintf>
 80182a4:	f06f 030f 	mvn.w	r3, #15
 80182a8:	e095      	b.n	80183d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80182aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d109      	bne.n	80182c4 <udp_sendto_if_src+0x90>
 80182b0:	4b4b      	ldr	r3, [pc, #300]	; (80183e0 <udp_sendto_if_src+0x1ac>)
 80182b2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80182b6:	4950      	ldr	r1, [pc, #320]	; (80183f8 <udp_sendto_if_src+0x1c4>)
 80182b8:	484b      	ldr	r0, [pc, #300]	; (80183e8 <udp_sendto_if_src+0x1b4>)
 80182ba:	f002 fdb1 	bl	801ae20 <iprintf>
 80182be:	f06f 030f 	mvn.w	r3, #15
 80182c2:	e088      	b.n	80183d6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	8a5b      	ldrh	r3, [r3, #18]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d10f      	bne.n	80182ec <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80182cc:	68f9      	ldr	r1, [r7, #12]
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	8a5b      	ldrh	r3, [r3, #18]
 80182d2:	461a      	mov	r2, r3
 80182d4:	68f8      	ldr	r0, [r7, #12]
 80182d6:	f000 f893 	bl	8018400 <udp_bind>
 80182da:	4603      	mov	r3, r0
 80182dc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80182de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d002      	beq.n	80182ec <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80182e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80182ea:	e074      	b.n	80183d6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	891b      	ldrh	r3, [r3, #8]
 80182f0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80182f4:	4293      	cmp	r3, r2
 80182f6:	d902      	bls.n	80182fe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80182f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80182fc:	e06b      	b.n	80183d6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80182fe:	2108      	movs	r1, #8
 8018300:	68b8      	ldr	r0, [r7, #8]
 8018302:	f7f9 fd97 	bl	8011e34 <pbuf_add_header>
 8018306:	4603      	mov	r3, r0
 8018308:	2b00      	cmp	r3, #0
 801830a:	d015      	beq.n	8018338 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801830c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018310:	2108      	movs	r1, #8
 8018312:	2022      	movs	r0, #34	; 0x22
 8018314:	f7f9 fb44 	bl	80119a0 <pbuf_alloc>
 8018318:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801831a:	69fb      	ldr	r3, [r7, #28]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d102      	bne.n	8018326 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018324:	e057      	b.n	80183d6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	891b      	ldrh	r3, [r3, #8]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d006      	beq.n	801833c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801832e:	68b9      	ldr	r1, [r7, #8]
 8018330:	69f8      	ldr	r0, [r7, #28]
 8018332:	f7f9 ff39 	bl	80121a8 <pbuf_chain>
 8018336:	e001      	b.n	801833c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801833c:	69fb      	ldr	r3, [r7, #28]
 801833e:	895b      	ldrh	r3, [r3, #10]
 8018340:	2b07      	cmp	r3, #7
 8018342:	d806      	bhi.n	8018352 <udp_sendto_if_src+0x11e>
 8018344:	4b26      	ldr	r3, [pc, #152]	; (80183e0 <udp_sendto_if_src+0x1ac>)
 8018346:	f240 320e 	movw	r2, #782	; 0x30e
 801834a:	492c      	ldr	r1, [pc, #176]	; (80183fc <udp_sendto_if_src+0x1c8>)
 801834c:	4826      	ldr	r0, [pc, #152]	; (80183e8 <udp_sendto_if_src+0x1b4>)
 801834e:	f002 fd67 	bl	801ae20 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018352:	69fb      	ldr	r3, [r7, #28]
 8018354:	685b      	ldr	r3, [r3, #4]
 8018356:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	8a5b      	ldrh	r3, [r3, #18]
 801835c:	4618      	mov	r0, r3
 801835e:	f7f8 f803 	bl	8010368 <lwip_htons>
 8018362:	4603      	mov	r3, r0
 8018364:	461a      	mov	r2, r3
 8018366:	697b      	ldr	r3, [r7, #20]
 8018368:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801836a:	887b      	ldrh	r3, [r7, #2]
 801836c:	4618      	mov	r0, r3
 801836e:	f7f7 fffb 	bl	8010368 <lwip_htons>
 8018372:	4603      	mov	r3, r0
 8018374:	461a      	mov	r2, r3
 8018376:	697b      	ldr	r3, [r7, #20]
 8018378:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	2200      	movs	r2, #0
 801837e:	719a      	strb	r2, [r3, #6]
 8018380:	2200      	movs	r2, #0
 8018382:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018384:	69fb      	ldr	r3, [r7, #28]
 8018386:	891b      	ldrh	r3, [r3, #8]
 8018388:	4618      	mov	r0, r3
 801838a:	f7f7 ffed 	bl	8010368 <lwip_htons>
 801838e:	4603      	mov	r3, r0
 8018390:	461a      	mov	r2, r3
 8018392:	697b      	ldr	r3, [r7, #20]
 8018394:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018396:	2311      	movs	r3, #17
 8018398:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	7adb      	ldrb	r3, [r3, #11]
 801839e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	7a9b      	ldrb	r3, [r3, #10]
 80183a4:	7cb9      	ldrb	r1, [r7, #18]
 80183a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183a8:	9202      	str	r2, [sp, #8]
 80183aa:	7cfa      	ldrb	r2, [r7, #19]
 80183ac:	9201      	str	r2, [sp, #4]
 80183ae:	9300      	str	r3, [sp, #0]
 80183b0:	460b      	mov	r3, r1
 80183b2:	687a      	ldr	r2, [r7, #4]
 80183b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80183b6:	69f8      	ldr	r0, [r7, #28]
 80183b8:	f001 fbdc 	bl	8019b74 <ip4_output_if_src>
 80183bc:	4603      	mov	r3, r0
 80183be:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80183c0:	69fa      	ldr	r2, [r7, #28]
 80183c2:	68bb      	ldr	r3, [r7, #8]
 80183c4:	429a      	cmp	r2, r3
 80183c6:	d004      	beq.n	80183d2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80183c8:	69f8      	ldr	r0, [r7, #28]
 80183ca:	f7f9 fdc9 	bl	8011f60 <pbuf_free>
    q = NULL;
 80183ce:	2300      	movs	r3, #0
 80183d0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80183d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80183d6:	4618      	mov	r0, r3
 80183d8:	3720      	adds	r7, #32
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}
 80183de:	bf00      	nop
 80183e0:	0801de2c 	.word	0x0801de2c
 80183e4:	0801e018 	.word	0x0801e018
 80183e8:	0801de80 	.word	0x0801de80
 80183ec:	0801e038 	.word	0x0801e038
 80183f0:	0801e058 	.word	0x0801e058
 80183f4:	0801e07c 	.word	0x0801e07c
 80183f8:	0801e0a0 	.word	0x0801e0a0
 80183fc:	0801e0c4 	.word	0x0801e0c4

08018400 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b086      	sub	sp, #24
 8018404:	af00      	add	r7, sp, #0
 8018406:	60f8      	str	r0, [r7, #12]
 8018408:	60b9      	str	r1, [r7, #8]
 801840a:	4613      	mov	r3, r2
 801840c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801840e:	68bb      	ldr	r3, [r7, #8]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d101      	bne.n	8018418 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018414:	4b39      	ldr	r3, [pc, #228]	; (80184fc <udp_bind+0xfc>)
 8018416:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d109      	bne.n	8018432 <udp_bind+0x32>
 801841e:	4b38      	ldr	r3, [pc, #224]	; (8018500 <udp_bind+0x100>)
 8018420:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018424:	4937      	ldr	r1, [pc, #220]	; (8018504 <udp_bind+0x104>)
 8018426:	4838      	ldr	r0, [pc, #224]	; (8018508 <udp_bind+0x108>)
 8018428:	f002 fcfa 	bl	801ae20 <iprintf>
 801842c:	f06f 030f 	mvn.w	r3, #15
 8018430:	e060      	b.n	80184f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018432:	2300      	movs	r3, #0
 8018434:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018436:	4b35      	ldr	r3, [pc, #212]	; (801850c <udp_bind+0x10c>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	617b      	str	r3, [r7, #20]
 801843c:	e009      	b.n	8018452 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801843e:	68fa      	ldr	r2, [r7, #12]
 8018440:	697b      	ldr	r3, [r7, #20]
 8018442:	429a      	cmp	r2, r3
 8018444:	d102      	bne.n	801844c <udp_bind+0x4c>
      rebind = 1;
 8018446:	2301      	movs	r3, #1
 8018448:	74fb      	strb	r3, [r7, #19]
      break;
 801844a:	e005      	b.n	8018458 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801844c:	697b      	ldr	r3, [r7, #20]
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	617b      	str	r3, [r7, #20]
 8018452:	697b      	ldr	r3, [r7, #20]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d1f2      	bne.n	801843e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018458:	88fb      	ldrh	r3, [r7, #6]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d109      	bne.n	8018472 <udp_bind+0x72>
    port = udp_new_port();
 801845e:	f7ff fc69 	bl	8017d34 <udp_new_port>
 8018462:	4603      	mov	r3, r0
 8018464:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018466:	88fb      	ldrh	r3, [r7, #6]
 8018468:	2b00      	cmp	r3, #0
 801846a:	d12c      	bne.n	80184c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801846c:	f06f 0307 	mvn.w	r3, #7
 8018470:	e040      	b.n	80184f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018472:	4b26      	ldr	r3, [pc, #152]	; (801850c <udp_bind+0x10c>)
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	617b      	str	r3, [r7, #20]
 8018478:	e022      	b.n	80184c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801847a:	68fa      	ldr	r2, [r7, #12]
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	429a      	cmp	r2, r3
 8018480:	d01b      	beq.n	80184ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018482:	697b      	ldr	r3, [r7, #20]
 8018484:	8a5b      	ldrh	r3, [r3, #18]
 8018486:	88fa      	ldrh	r2, [r7, #6]
 8018488:	429a      	cmp	r2, r3
 801848a:	d116      	bne.n	80184ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801848c:	697b      	ldr	r3, [r7, #20]
 801848e:	681a      	ldr	r2, [r3, #0]
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018494:	429a      	cmp	r2, r3
 8018496:	d00d      	beq.n	80184b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d00a      	beq.n	80184b4 <udp_bind+0xb4>
 801849e:	68bb      	ldr	r3, [r7, #8]
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d006      	beq.n	80184b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80184a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d003      	beq.n	80184b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80184ac:	697b      	ldr	r3, [r7, #20]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d102      	bne.n	80184ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80184b4:	f06f 0307 	mvn.w	r3, #7
 80184b8:	e01c      	b.n	80184f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80184ba:	697b      	ldr	r3, [r7, #20]
 80184bc:	68db      	ldr	r3, [r3, #12]
 80184be:	617b      	str	r3, [r7, #20]
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d1d9      	bne.n	801847a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80184c6:	68bb      	ldr	r3, [r7, #8]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d002      	beq.n	80184d2 <udp_bind+0xd2>
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	e000      	b.n	80184d4 <udp_bind+0xd4>
 80184d2:	2300      	movs	r3, #0
 80184d4:	68fa      	ldr	r2, [r7, #12]
 80184d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	88fa      	ldrh	r2, [r7, #6]
 80184dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80184de:	7cfb      	ldrb	r3, [r7, #19]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d106      	bne.n	80184f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80184e4:	4b09      	ldr	r3, [pc, #36]	; (801850c <udp_bind+0x10c>)
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80184ec:	4a07      	ldr	r2, [pc, #28]	; (801850c <udp_bind+0x10c>)
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80184f2:	2300      	movs	r3, #0
}
 80184f4:	4618      	mov	r0, r3
 80184f6:	3718      	adds	r7, #24
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}
 80184fc:	0801e994 	.word	0x0801e994
 8018500:	0801de2c 	.word	0x0801de2c
 8018504:	0801e0f4 	.word	0x0801e0f4
 8018508:	0801de80 	.word	0x0801de80
 801850c:	2000b4dc 	.word	0x2000b4dc

08018510 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b084      	sub	sp, #16
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d107      	bne.n	801852e <udp_remove+0x1e>
 801851e:	4b19      	ldr	r3, [pc, #100]	; (8018584 <udp_remove+0x74>)
 8018520:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018524:	4918      	ldr	r1, [pc, #96]	; (8018588 <udp_remove+0x78>)
 8018526:	4819      	ldr	r0, [pc, #100]	; (801858c <udp_remove+0x7c>)
 8018528:	f002 fc7a 	bl	801ae20 <iprintf>
 801852c:	e026      	b.n	801857c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801852e:	4b18      	ldr	r3, [pc, #96]	; (8018590 <udp_remove+0x80>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	687a      	ldr	r2, [r7, #4]
 8018534:	429a      	cmp	r2, r3
 8018536:	d105      	bne.n	8018544 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018538:	4b15      	ldr	r3, [pc, #84]	; (8018590 <udp_remove+0x80>)
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	68db      	ldr	r3, [r3, #12]
 801853e:	4a14      	ldr	r2, [pc, #80]	; (8018590 <udp_remove+0x80>)
 8018540:	6013      	str	r3, [r2, #0]
 8018542:	e017      	b.n	8018574 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018544:	4b12      	ldr	r3, [pc, #72]	; (8018590 <udp_remove+0x80>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	60fb      	str	r3, [r7, #12]
 801854a:	e010      	b.n	801856e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	68db      	ldr	r3, [r3, #12]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d009      	beq.n	8018568 <udp_remove+0x58>
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	68db      	ldr	r3, [r3, #12]
 8018558:	687a      	ldr	r2, [r7, #4]
 801855a:	429a      	cmp	r2, r3
 801855c:	d104      	bne.n	8018568 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	68da      	ldr	r2, [r3, #12]
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	60da      	str	r2, [r3, #12]
        break;
 8018566:	e005      	b.n	8018574 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	68db      	ldr	r3, [r3, #12]
 801856c:	60fb      	str	r3, [r7, #12]
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d1eb      	bne.n	801854c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018574:	6879      	ldr	r1, [r7, #4]
 8018576:	2000      	movs	r0, #0
 8018578:	f7f8 feca 	bl	8011310 <memp_free>
}
 801857c:	3710      	adds	r7, #16
 801857e:	46bd      	mov	sp, r7
 8018580:	bd80      	pop	{r7, pc}
 8018582:	bf00      	nop
 8018584:	0801de2c 	.word	0x0801de2c
 8018588:	0801e178 	.word	0x0801e178
 801858c:	0801de80 	.word	0x0801de80
 8018590:	2000b4dc 	.word	0x2000b4dc

08018594 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018594:	b480      	push	{r7}
 8018596:	b085      	sub	sp, #20
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
 801859c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d01e      	beq.n	80185e2 <udp_netif_ip_addr_changed+0x4e>
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d01a      	beq.n	80185e2 <udp_netif_ip_addr_changed+0x4e>
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d017      	beq.n	80185e2 <udp_netif_ip_addr_changed+0x4e>
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d013      	beq.n	80185e2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80185ba:	4b0d      	ldr	r3, [pc, #52]	; (80185f0 <udp_netif_ip_addr_changed+0x5c>)
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	60fb      	str	r3, [r7, #12]
 80185c0:	e00c      	b.n	80185dc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	681a      	ldr	r2, [r3, #0]
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d103      	bne.n	80185d6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	681a      	ldr	r2, [r3, #0]
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	68db      	ldr	r3, [r3, #12]
 80185da:	60fb      	str	r3, [r7, #12]
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d1ef      	bne.n	80185c2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80185e2:	bf00      	nop
 80185e4:	3714      	adds	r7, #20
 80185e6:	46bd      	mov	sp, r7
 80185e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ec:	4770      	bx	lr
 80185ee:	bf00      	nop
 80185f0:	2000b4dc 	.word	0x2000b4dc

080185f4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b082      	sub	sp, #8
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80185fc:	4915      	ldr	r1, [pc, #84]	; (8018654 <etharp_free_entry+0x60>)
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	4613      	mov	r3, r2
 8018602:	005b      	lsls	r3, r3, #1
 8018604:	4413      	add	r3, r2
 8018606:	00db      	lsls	r3, r3, #3
 8018608:	440b      	add	r3, r1
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d013      	beq.n	8018638 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018610:	4910      	ldr	r1, [pc, #64]	; (8018654 <etharp_free_entry+0x60>)
 8018612:	687a      	ldr	r2, [r7, #4]
 8018614:	4613      	mov	r3, r2
 8018616:	005b      	lsls	r3, r3, #1
 8018618:	4413      	add	r3, r2
 801861a:	00db      	lsls	r3, r3, #3
 801861c:	440b      	add	r3, r1
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	4618      	mov	r0, r3
 8018622:	f7f9 fc9d 	bl	8011f60 <pbuf_free>
    arp_table[i].q = NULL;
 8018626:	490b      	ldr	r1, [pc, #44]	; (8018654 <etharp_free_entry+0x60>)
 8018628:	687a      	ldr	r2, [r7, #4]
 801862a:	4613      	mov	r3, r2
 801862c:	005b      	lsls	r3, r3, #1
 801862e:	4413      	add	r3, r2
 8018630:	00db      	lsls	r3, r3, #3
 8018632:	440b      	add	r3, r1
 8018634:	2200      	movs	r2, #0
 8018636:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018638:	4906      	ldr	r1, [pc, #24]	; (8018654 <etharp_free_entry+0x60>)
 801863a:	687a      	ldr	r2, [r7, #4]
 801863c:	4613      	mov	r3, r2
 801863e:	005b      	lsls	r3, r3, #1
 8018640:	4413      	add	r3, r2
 8018642:	00db      	lsls	r3, r3, #3
 8018644:	440b      	add	r3, r1
 8018646:	3314      	adds	r3, #20
 8018648:	2200      	movs	r2, #0
 801864a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801864c:	bf00      	nop
 801864e:	3708      	adds	r7, #8
 8018650:	46bd      	mov	sp, r7
 8018652:	bd80      	pop	{r7, pc}
 8018654:	200045a4 	.word	0x200045a4

08018658 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b082      	sub	sp, #8
 801865c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801865e:	2300      	movs	r3, #0
 8018660:	607b      	str	r3, [r7, #4]
 8018662:	e096      	b.n	8018792 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018664:	494f      	ldr	r1, [pc, #316]	; (80187a4 <etharp_tmr+0x14c>)
 8018666:	687a      	ldr	r2, [r7, #4]
 8018668:	4613      	mov	r3, r2
 801866a:	005b      	lsls	r3, r3, #1
 801866c:	4413      	add	r3, r2
 801866e:	00db      	lsls	r3, r3, #3
 8018670:	440b      	add	r3, r1
 8018672:	3314      	adds	r3, #20
 8018674:	781b      	ldrb	r3, [r3, #0]
 8018676:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018678:	78fb      	ldrb	r3, [r7, #3]
 801867a:	2b00      	cmp	r3, #0
 801867c:	f000 8086 	beq.w	801878c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018680:	4948      	ldr	r1, [pc, #288]	; (80187a4 <etharp_tmr+0x14c>)
 8018682:	687a      	ldr	r2, [r7, #4]
 8018684:	4613      	mov	r3, r2
 8018686:	005b      	lsls	r3, r3, #1
 8018688:	4413      	add	r3, r2
 801868a:	00db      	lsls	r3, r3, #3
 801868c:	440b      	add	r3, r1
 801868e:	3312      	adds	r3, #18
 8018690:	881b      	ldrh	r3, [r3, #0]
 8018692:	3301      	adds	r3, #1
 8018694:	b298      	uxth	r0, r3
 8018696:	4943      	ldr	r1, [pc, #268]	; (80187a4 <etharp_tmr+0x14c>)
 8018698:	687a      	ldr	r2, [r7, #4]
 801869a:	4613      	mov	r3, r2
 801869c:	005b      	lsls	r3, r3, #1
 801869e:	4413      	add	r3, r2
 80186a0:	00db      	lsls	r3, r3, #3
 80186a2:	440b      	add	r3, r1
 80186a4:	3312      	adds	r3, #18
 80186a6:	4602      	mov	r2, r0
 80186a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80186aa:	493e      	ldr	r1, [pc, #248]	; (80187a4 <etharp_tmr+0x14c>)
 80186ac:	687a      	ldr	r2, [r7, #4]
 80186ae:	4613      	mov	r3, r2
 80186b0:	005b      	lsls	r3, r3, #1
 80186b2:	4413      	add	r3, r2
 80186b4:	00db      	lsls	r3, r3, #3
 80186b6:	440b      	add	r3, r1
 80186b8:	3312      	adds	r3, #18
 80186ba:	881b      	ldrh	r3, [r3, #0]
 80186bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80186c0:	d215      	bcs.n	80186ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80186c2:	4938      	ldr	r1, [pc, #224]	; (80187a4 <etharp_tmr+0x14c>)
 80186c4:	687a      	ldr	r2, [r7, #4]
 80186c6:	4613      	mov	r3, r2
 80186c8:	005b      	lsls	r3, r3, #1
 80186ca:	4413      	add	r3, r2
 80186cc:	00db      	lsls	r3, r3, #3
 80186ce:	440b      	add	r3, r1
 80186d0:	3314      	adds	r3, #20
 80186d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80186d4:	2b01      	cmp	r3, #1
 80186d6:	d10e      	bne.n	80186f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80186d8:	4932      	ldr	r1, [pc, #200]	; (80187a4 <etharp_tmr+0x14c>)
 80186da:	687a      	ldr	r2, [r7, #4]
 80186dc:	4613      	mov	r3, r2
 80186de:	005b      	lsls	r3, r3, #1
 80186e0:	4413      	add	r3, r2
 80186e2:	00db      	lsls	r3, r3, #3
 80186e4:	440b      	add	r3, r1
 80186e6:	3312      	adds	r3, #18
 80186e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80186ea:	2b04      	cmp	r3, #4
 80186ec:	d903      	bls.n	80186f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80186ee:	6878      	ldr	r0, [r7, #4]
 80186f0:	f7ff ff80 	bl	80185f4 <etharp_free_entry>
 80186f4:	e04a      	b.n	801878c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80186f6:	492b      	ldr	r1, [pc, #172]	; (80187a4 <etharp_tmr+0x14c>)
 80186f8:	687a      	ldr	r2, [r7, #4]
 80186fa:	4613      	mov	r3, r2
 80186fc:	005b      	lsls	r3, r3, #1
 80186fe:	4413      	add	r3, r2
 8018700:	00db      	lsls	r3, r3, #3
 8018702:	440b      	add	r3, r1
 8018704:	3314      	adds	r3, #20
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	2b03      	cmp	r3, #3
 801870a:	d10a      	bne.n	8018722 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801870c:	4925      	ldr	r1, [pc, #148]	; (80187a4 <etharp_tmr+0x14c>)
 801870e:	687a      	ldr	r2, [r7, #4]
 8018710:	4613      	mov	r3, r2
 8018712:	005b      	lsls	r3, r3, #1
 8018714:	4413      	add	r3, r2
 8018716:	00db      	lsls	r3, r3, #3
 8018718:	440b      	add	r3, r1
 801871a:	3314      	adds	r3, #20
 801871c:	2204      	movs	r2, #4
 801871e:	701a      	strb	r2, [r3, #0]
 8018720:	e034      	b.n	801878c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018722:	4920      	ldr	r1, [pc, #128]	; (80187a4 <etharp_tmr+0x14c>)
 8018724:	687a      	ldr	r2, [r7, #4]
 8018726:	4613      	mov	r3, r2
 8018728:	005b      	lsls	r3, r3, #1
 801872a:	4413      	add	r3, r2
 801872c:	00db      	lsls	r3, r3, #3
 801872e:	440b      	add	r3, r1
 8018730:	3314      	adds	r3, #20
 8018732:	781b      	ldrb	r3, [r3, #0]
 8018734:	2b04      	cmp	r3, #4
 8018736:	d10a      	bne.n	801874e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018738:	491a      	ldr	r1, [pc, #104]	; (80187a4 <etharp_tmr+0x14c>)
 801873a:	687a      	ldr	r2, [r7, #4]
 801873c:	4613      	mov	r3, r2
 801873e:	005b      	lsls	r3, r3, #1
 8018740:	4413      	add	r3, r2
 8018742:	00db      	lsls	r3, r3, #3
 8018744:	440b      	add	r3, r1
 8018746:	3314      	adds	r3, #20
 8018748:	2202      	movs	r2, #2
 801874a:	701a      	strb	r2, [r3, #0]
 801874c:	e01e      	b.n	801878c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801874e:	4915      	ldr	r1, [pc, #84]	; (80187a4 <etharp_tmr+0x14c>)
 8018750:	687a      	ldr	r2, [r7, #4]
 8018752:	4613      	mov	r3, r2
 8018754:	005b      	lsls	r3, r3, #1
 8018756:	4413      	add	r3, r2
 8018758:	00db      	lsls	r3, r3, #3
 801875a:	440b      	add	r3, r1
 801875c:	3314      	adds	r3, #20
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	2b01      	cmp	r3, #1
 8018762:	d113      	bne.n	801878c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018764:	490f      	ldr	r1, [pc, #60]	; (80187a4 <etharp_tmr+0x14c>)
 8018766:	687a      	ldr	r2, [r7, #4]
 8018768:	4613      	mov	r3, r2
 801876a:	005b      	lsls	r3, r3, #1
 801876c:	4413      	add	r3, r2
 801876e:	00db      	lsls	r3, r3, #3
 8018770:	440b      	add	r3, r1
 8018772:	3308      	adds	r3, #8
 8018774:	6818      	ldr	r0, [r3, #0]
 8018776:	687a      	ldr	r2, [r7, #4]
 8018778:	4613      	mov	r3, r2
 801877a:	005b      	lsls	r3, r3, #1
 801877c:	4413      	add	r3, r2
 801877e:	00db      	lsls	r3, r3, #3
 8018780:	4a08      	ldr	r2, [pc, #32]	; (80187a4 <etharp_tmr+0x14c>)
 8018782:	4413      	add	r3, r2
 8018784:	3304      	adds	r3, #4
 8018786:	4619      	mov	r1, r3
 8018788:	f000 fe6e 	bl	8019468 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	3301      	adds	r3, #1
 8018790:	607b      	str	r3, [r7, #4]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	2b09      	cmp	r3, #9
 8018796:	f77f af65 	ble.w	8018664 <etharp_tmr+0xc>
      }
    }
  }
}
 801879a:	bf00      	nop
 801879c:	3708      	adds	r7, #8
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}
 80187a2:	bf00      	nop
 80187a4:	200045a4 	.word	0x200045a4

080187a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b08a      	sub	sp, #40	; 0x28
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	60f8      	str	r0, [r7, #12]
 80187b0:	460b      	mov	r3, r1
 80187b2:	607a      	str	r2, [r7, #4]
 80187b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80187b6:	230a      	movs	r3, #10
 80187b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80187ba:	230a      	movs	r3, #10
 80187bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80187be:	230a      	movs	r3, #10
 80187c0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80187c2:	2300      	movs	r3, #0
 80187c4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80187c6:	230a      	movs	r3, #10
 80187c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80187ca:	2300      	movs	r3, #0
 80187cc:	83bb      	strh	r3, [r7, #28]
 80187ce:	2300      	movs	r3, #0
 80187d0:	837b      	strh	r3, [r7, #26]
 80187d2:	2300      	movs	r3, #0
 80187d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80187d6:	2300      	movs	r3, #0
 80187d8:	843b      	strh	r3, [r7, #32]
 80187da:	e0ae      	b.n	801893a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80187dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80187e0:	49a6      	ldr	r1, [pc, #664]	; (8018a7c <etharp_find_entry+0x2d4>)
 80187e2:	4613      	mov	r3, r2
 80187e4:	005b      	lsls	r3, r3, #1
 80187e6:	4413      	add	r3, r2
 80187e8:	00db      	lsls	r3, r3, #3
 80187ea:	440b      	add	r3, r1
 80187ec:	3314      	adds	r3, #20
 80187ee:	781b      	ldrb	r3, [r3, #0]
 80187f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80187f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80187f6:	2b0a      	cmp	r3, #10
 80187f8:	d105      	bne.n	8018806 <etharp_find_entry+0x5e>
 80187fa:	7dfb      	ldrb	r3, [r7, #23]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d102      	bne.n	8018806 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018800:	8c3b      	ldrh	r3, [r7, #32]
 8018802:	847b      	strh	r3, [r7, #34]	; 0x22
 8018804:	e095      	b.n	8018932 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018806:	7dfb      	ldrb	r3, [r7, #23]
 8018808:	2b00      	cmp	r3, #0
 801880a:	f000 8092 	beq.w	8018932 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801880e:	7dfb      	ldrb	r3, [r7, #23]
 8018810:	2b01      	cmp	r3, #1
 8018812:	d009      	beq.n	8018828 <etharp_find_entry+0x80>
 8018814:	7dfb      	ldrb	r3, [r7, #23]
 8018816:	2b01      	cmp	r3, #1
 8018818:	d806      	bhi.n	8018828 <etharp_find_entry+0x80>
 801881a:	4b99      	ldr	r3, [pc, #612]	; (8018a80 <etharp_find_entry+0x2d8>)
 801881c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8018820:	4998      	ldr	r1, [pc, #608]	; (8018a84 <etharp_find_entry+0x2dc>)
 8018822:	4899      	ldr	r0, [pc, #612]	; (8018a88 <etharp_find_entry+0x2e0>)
 8018824:	f002 fafc 	bl	801ae20 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d020      	beq.n	8018870 <etharp_find_entry+0xc8>
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	6819      	ldr	r1, [r3, #0]
 8018832:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018836:	4891      	ldr	r0, [pc, #580]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018838:	4613      	mov	r3, r2
 801883a:	005b      	lsls	r3, r3, #1
 801883c:	4413      	add	r3, r2
 801883e:	00db      	lsls	r3, r3, #3
 8018840:	4403      	add	r3, r0
 8018842:	3304      	adds	r3, #4
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	4299      	cmp	r1, r3
 8018848:	d112      	bne.n	8018870 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d00c      	beq.n	801886a <etharp_find_entry+0xc2>
 8018850:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018854:	4989      	ldr	r1, [pc, #548]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018856:	4613      	mov	r3, r2
 8018858:	005b      	lsls	r3, r3, #1
 801885a:	4413      	add	r3, r2
 801885c:	00db      	lsls	r3, r3, #3
 801885e:	440b      	add	r3, r1
 8018860:	3308      	adds	r3, #8
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	687a      	ldr	r2, [r7, #4]
 8018866:	429a      	cmp	r2, r3
 8018868:	d102      	bne.n	8018870 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801886a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801886e:	e100      	b.n	8018a72 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018870:	7dfb      	ldrb	r3, [r7, #23]
 8018872:	2b01      	cmp	r3, #1
 8018874:	d140      	bne.n	80188f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018876:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801887a:	4980      	ldr	r1, [pc, #512]	; (8018a7c <etharp_find_entry+0x2d4>)
 801887c:	4613      	mov	r3, r2
 801887e:	005b      	lsls	r3, r3, #1
 8018880:	4413      	add	r3, r2
 8018882:	00db      	lsls	r3, r3, #3
 8018884:	440b      	add	r3, r1
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d01a      	beq.n	80188c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801888c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018890:	497a      	ldr	r1, [pc, #488]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018892:	4613      	mov	r3, r2
 8018894:	005b      	lsls	r3, r3, #1
 8018896:	4413      	add	r3, r2
 8018898:	00db      	lsls	r3, r3, #3
 801889a:	440b      	add	r3, r1
 801889c:	3312      	adds	r3, #18
 801889e:	881b      	ldrh	r3, [r3, #0]
 80188a0:	8bba      	ldrh	r2, [r7, #28]
 80188a2:	429a      	cmp	r2, r3
 80188a4:	d845      	bhi.n	8018932 <etharp_find_entry+0x18a>
            old_queue = i;
 80188a6:	8c3b      	ldrh	r3, [r7, #32]
 80188a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80188aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188ae:	4973      	ldr	r1, [pc, #460]	; (8018a7c <etharp_find_entry+0x2d4>)
 80188b0:	4613      	mov	r3, r2
 80188b2:	005b      	lsls	r3, r3, #1
 80188b4:	4413      	add	r3, r2
 80188b6:	00db      	lsls	r3, r3, #3
 80188b8:	440b      	add	r3, r1
 80188ba:	3312      	adds	r3, #18
 80188bc:	881b      	ldrh	r3, [r3, #0]
 80188be:	83bb      	strh	r3, [r7, #28]
 80188c0:	e037      	b.n	8018932 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80188c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188c6:	496d      	ldr	r1, [pc, #436]	; (8018a7c <etharp_find_entry+0x2d4>)
 80188c8:	4613      	mov	r3, r2
 80188ca:	005b      	lsls	r3, r3, #1
 80188cc:	4413      	add	r3, r2
 80188ce:	00db      	lsls	r3, r3, #3
 80188d0:	440b      	add	r3, r1
 80188d2:	3312      	adds	r3, #18
 80188d4:	881b      	ldrh	r3, [r3, #0]
 80188d6:	8b7a      	ldrh	r2, [r7, #26]
 80188d8:	429a      	cmp	r2, r3
 80188da:	d82a      	bhi.n	8018932 <etharp_find_entry+0x18a>
            old_pending = i;
 80188dc:	8c3b      	ldrh	r3, [r7, #32]
 80188de:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80188e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80188e4:	4965      	ldr	r1, [pc, #404]	; (8018a7c <etharp_find_entry+0x2d4>)
 80188e6:	4613      	mov	r3, r2
 80188e8:	005b      	lsls	r3, r3, #1
 80188ea:	4413      	add	r3, r2
 80188ec:	00db      	lsls	r3, r3, #3
 80188ee:	440b      	add	r3, r1
 80188f0:	3312      	adds	r3, #18
 80188f2:	881b      	ldrh	r3, [r3, #0]
 80188f4:	837b      	strh	r3, [r7, #26]
 80188f6:	e01c      	b.n	8018932 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80188f8:	7dfb      	ldrb	r3, [r7, #23]
 80188fa:	2b01      	cmp	r3, #1
 80188fc:	d919      	bls.n	8018932 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80188fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018902:	495e      	ldr	r1, [pc, #376]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018904:	4613      	mov	r3, r2
 8018906:	005b      	lsls	r3, r3, #1
 8018908:	4413      	add	r3, r2
 801890a:	00db      	lsls	r3, r3, #3
 801890c:	440b      	add	r3, r1
 801890e:	3312      	adds	r3, #18
 8018910:	881b      	ldrh	r3, [r3, #0]
 8018912:	8b3a      	ldrh	r2, [r7, #24]
 8018914:	429a      	cmp	r2, r3
 8018916:	d80c      	bhi.n	8018932 <etharp_find_entry+0x18a>
            old_stable = i;
 8018918:	8c3b      	ldrh	r3, [r7, #32]
 801891a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801891c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018920:	4956      	ldr	r1, [pc, #344]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018922:	4613      	mov	r3, r2
 8018924:	005b      	lsls	r3, r3, #1
 8018926:	4413      	add	r3, r2
 8018928:	00db      	lsls	r3, r3, #3
 801892a:	440b      	add	r3, r1
 801892c:	3312      	adds	r3, #18
 801892e:	881b      	ldrh	r3, [r3, #0]
 8018930:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018932:	8c3b      	ldrh	r3, [r7, #32]
 8018934:	3301      	adds	r3, #1
 8018936:	b29b      	uxth	r3, r3
 8018938:	843b      	strh	r3, [r7, #32]
 801893a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801893e:	2b09      	cmp	r3, #9
 8018940:	f77f af4c 	ble.w	80187dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018944:	7afb      	ldrb	r3, [r7, #11]
 8018946:	f003 0302 	and.w	r3, r3, #2
 801894a:	2b00      	cmp	r3, #0
 801894c:	d108      	bne.n	8018960 <etharp_find_entry+0x1b8>
 801894e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018952:	2b0a      	cmp	r3, #10
 8018954:	d107      	bne.n	8018966 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018956:	7afb      	ldrb	r3, [r7, #11]
 8018958:	f003 0301 	and.w	r3, r3, #1
 801895c:	2b00      	cmp	r3, #0
 801895e:	d102      	bne.n	8018966 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018964:	e085      	b.n	8018a72 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018966:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801896a:	2b09      	cmp	r3, #9
 801896c:	dc02      	bgt.n	8018974 <etharp_find_entry+0x1cc>
    i = empty;
 801896e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018970:	843b      	strh	r3, [r7, #32]
 8018972:	e039      	b.n	80189e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018974:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018978:	2b09      	cmp	r3, #9
 801897a:	dc14      	bgt.n	80189a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801897c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801897e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018980:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018984:	493d      	ldr	r1, [pc, #244]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018986:	4613      	mov	r3, r2
 8018988:	005b      	lsls	r3, r3, #1
 801898a:	4413      	add	r3, r2
 801898c:	00db      	lsls	r3, r3, #3
 801898e:	440b      	add	r3, r1
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d018      	beq.n	80189c8 <etharp_find_entry+0x220>
 8018996:	4b3a      	ldr	r3, [pc, #232]	; (8018a80 <etharp_find_entry+0x2d8>)
 8018998:	f240 126d 	movw	r2, #365	; 0x16d
 801899c:	493b      	ldr	r1, [pc, #236]	; (8018a8c <etharp_find_entry+0x2e4>)
 801899e:	483a      	ldr	r0, [pc, #232]	; (8018a88 <etharp_find_entry+0x2e0>)
 80189a0:	f002 fa3e 	bl	801ae20 <iprintf>
 80189a4:	e010      	b.n	80189c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80189a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80189aa:	2b09      	cmp	r3, #9
 80189ac:	dc02      	bgt.n	80189b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80189ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80189b0:	843b      	strh	r3, [r7, #32]
 80189b2:	e009      	b.n	80189c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80189b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80189b8:	2b09      	cmp	r3, #9
 80189ba:	dc02      	bgt.n	80189c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80189bc:	8bfb      	ldrh	r3, [r7, #30]
 80189be:	843b      	strh	r3, [r7, #32]
 80189c0:	e002      	b.n	80189c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80189c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80189c6:	e054      	b.n	8018a72 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80189c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80189cc:	2b09      	cmp	r3, #9
 80189ce:	dd06      	ble.n	80189de <etharp_find_entry+0x236>
 80189d0:	4b2b      	ldr	r3, [pc, #172]	; (8018a80 <etharp_find_entry+0x2d8>)
 80189d2:	f240 127f 	movw	r2, #383	; 0x17f
 80189d6:	492e      	ldr	r1, [pc, #184]	; (8018a90 <etharp_find_entry+0x2e8>)
 80189d8:	482b      	ldr	r0, [pc, #172]	; (8018a88 <etharp_find_entry+0x2e0>)
 80189da:	f002 fa21 	bl	801ae20 <iprintf>
    etharp_free_entry(i);
 80189de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7ff fe06 	bl	80185f4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80189e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80189ec:	2b09      	cmp	r3, #9
 80189ee:	dd06      	ble.n	80189fe <etharp_find_entry+0x256>
 80189f0:	4b23      	ldr	r3, [pc, #140]	; (8018a80 <etharp_find_entry+0x2d8>)
 80189f2:	f240 1283 	movw	r2, #387	; 0x183
 80189f6:	4926      	ldr	r1, [pc, #152]	; (8018a90 <etharp_find_entry+0x2e8>)
 80189f8:	4823      	ldr	r0, [pc, #140]	; (8018a88 <etharp_find_entry+0x2e0>)
 80189fa:	f002 fa11 	bl	801ae20 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80189fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a02:	491e      	ldr	r1, [pc, #120]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018a04:	4613      	mov	r3, r2
 8018a06:	005b      	lsls	r3, r3, #1
 8018a08:	4413      	add	r3, r2
 8018a0a:	00db      	lsls	r3, r3, #3
 8018a0c:	440b      	add	r3, r1
 8018a0e:	3314      	adds	r3, #20
 8018a10:	781b      	ldrb	r3, [r3, #0]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d006      	beq.n	8018a24 <etharp_find_entry+0x27c>
 8018a16:	4b1a      	ldr	r3, [pc, #104]	; (8018a80 <etharp_find_entry+0x2d8>)
 8018a18:	f240 1285 	movw	r2, #389	; 0x185
 8018a1c:	491d      	ldr	r1, [pc, #116]	; (8018a94 <etharp_find_entry+0x2ec>)
 8018a1e:	481a      	ldr	r0, [pc, #104]	; (8018a88 <etharp_find_entry+0x2e0>)
 8018a20:	f002 f9fe 	bl	801ae20 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d00b      	beq.n	8018a42 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018a2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	6819      	ldr	r1, [r3, #0]
 8018a32:	4812      	ldr	r0, [pc, #72]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018a34:	4613      	mov	r3, r2
 8018a36:	005b      	lsls	r3, r3, #1
 8018a38:	4413      	add	r3, r2
 8018a3a:	00db      	lsls	r3, r3, #3
 8018a3c:	4403      	add	r3, r0
 8018a3e:	3304      	adds	r3, #4
 8018a40:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018a42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a46:	490d      	ldr	r1, [pc, #52]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018a48:	4613      	mov	r3, r2
 8018a4a:	005b      	lsls	r3, r3, #1
 8018a4c:	4413      	add	r3, r2
 8018a4e:	00db      	lsls	r3, r3, #3
 8018a50:	440b      	add	r3, r1
 8018a52:	3312      	adds	r3, #18
 8018a54:	2200      	movs	r2, #0
 8018a56:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018a58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a5c:	4907      	ldr	r1, [pc, #28]	; (8018a7c <etharp_find_entry+0x2d4>)
 8018a5e:	4613      	mov	r3, r2
 8018a60:	005b      	lsls	r3, r3, #1
 8018a62:	4413      	add	r3, r2
 8018a64:	00db      	lsls	r3, r3, #3
 8018a66:	440b      	add	r3, r1
 8018a68:	3308      	adds	r3, #8
 8018a6a:	687a      	ldr	r2, [r7, #4]
 8018a6c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018a6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018a72:	4618      	mov	r0, r3
 8018a74:	3728      	adds	r7, #40	; 0x28
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}
 8018a7a:	bf00      	nop
 8018a7c:	200045a4 	.word	0x200045a4
 8018a80:	0801e190 	.word	0x0801e190
 8018a84:	0801e1c8 	.word	0x0801e1c8
 8018a88:	0801e208 	.word	0x0801e208
 8018a8c:	0801e230 	.word	0x0801e230
 8018a90:	0801e248 	.word	0x0801e248
 8018a94:	0801e25c 	.word	0x0801e25c

08018a98 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b088      	sub	sp, #32
 8018a9c:	af02      	add	r7, sp, #8
 8018a9e:	60f8      	str	r0, [r7, #12]
 8018aa0:	60b9      	str	r1, [r7, #8]
 8018aa2:	607a      	str	r2, [r7, #4]
 8018aa4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018aac:	2b06      	cmp	r3, #6
 8018aae:	d006      	beq.n	8018abe <etharp_update_arp_entry+0x26>
 8018ab0:	4b48      	ldr	r3, [pc, #288]	; (8018bd4 <etharp_update_arp_entry+0x13c>)
 8018ab2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018ab6:	4948      	ldr	r1, [pc, #288]	; (8018bd8 <etharp_update_arp_entry+0x140>)
 8018ab8:	4848      	ldr	r0, [pc, #288]	; (8018bdc <etharp_update_arp_entry+0x144>)
 8018aba:	f002 f9b1 	bl	801ae20 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018abe:	68bb      	ldr	r3, [r7, #8]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d012      	beq.n	8018aea <etharp_update_arp_entry+0x52>
 8018ac4:	68bb      	ldr	r3, [r7, #8]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d00e      	beq.n	8018aea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018acc:	68bb      	ldr	r3, [r7, #8]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	68f9      	ldr	r1, [r7, #12]
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f001 f8fc 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 8018ad8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d105      	bne.n	8018aea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018ade:	68bb      	ldr	r3, [r7, #8]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018ae6:	2be0      	cmp	r3, #224	; 0xe0
 8018ae8:	d102      	bne.n	8018af0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018aea:	f06f 030f 	mvn.w	r3, #15
 8018aee:	e06c      	b.n	8018bca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018af0:	78fb      	ldrb	r3, [r7, #3]
 8018af2:	68fa      	ldr	r2, [r7, #12]
 8018af4:	4619      	mov	r1, r3
 8018af6:	68b8      	ldr	r0, [r7, #8]
 8018af8:	f7ff fe56 	bl	80187a8 <etharp_find_entry>
 8018afc:	4603      	mov	r3, r0
 8018afe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018b00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	da02      	bge.n	8018b0e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018b08:	8afb      	ldrh	r3, [r7, #22]
 8018b0a:	b25b      	sxtb	r3, r3
 8018b0c:	e05d      	b.n	8018bca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018b0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b12:	4933      	ldr	r1, [pc, #204]	; (8018be0 <etharp_update_arp_entry+0x148>)
 8018b14:	4613      	mov	r3, r2
 8018b16:	005b      	lsls	r3, r3, #1
 8018b18:	4413      	add	r3, r2
 8018b1a:	00db      	lsls	r3, r3, #3
 8018b1c:	440b      	add	r3, r1
 8018b1e:	3314      	adds	r3, #20
 8018b20:	2202      	movs	r2, #2
 8018b22:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018b24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b28:	492d      	ldr	r1, [pc, #180]	; (8018be0 <etharp_update_arp_entry+0x148>)
 8018b2a:	4613      	mov	r3, r2
 8018b2c:	005b      	lsls	r3, r3, #1
 8018b2e:	4413      	add	r3, r2
 8018b30:	00db      	lsls	r3, r3, #3
 8018b32:	440b      	add	r3, r1
 8018b34:	3308      	adds	r3, #8
 8018b36:	68fa      	ldr	r2, [r7, #12]
 8018b38:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018b3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b3e:	4613      	mov	r3, r2
 8018b40:	005b      	lsls	r3, r3, #1
 8018b42:	4413      	add	r3, r2
 8018b44:	00db      	lsls	r3, r3, #3
 8018b46:	3308      	adds	r3, #8
 8018b48:	4a25      	ldr	r2, [pc, #148]	; (8018be0 <etharp_update_arp_entry+0x148>)
 8018b4a:	4413      	add	r3, r2
 8018b4c:	3304      	adds	r3, #4
 8018b4e:	2206      	movs	r2, #6
 8018b50:	6879      	ldr	r1, [r7, #4]
 8018b52:	4618      	mov	r0, r3
 8018b54:	f002 f951 	bl	801adfa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018b58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b5c:	4920      	ldr	r1, [pc, #128]	; (8018be0 <etharp_update_arp_entry+0x148>)
 8018b5e:	4613      	mov	r3, r2
 8018b60:	005b      	lsls	r3, r3, #1
 8018b62:	4413      	add	r3, r2
 8018b64:	00db      	lsls	r3, r3, #3
 8018b66:	440b      	add	r3, r1
 8018b68:	3312      	adds	r3, #18
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018b6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b72:	491b      	ldr	r1, [pc, #108]	; (8018be0 <etharp_update_arp_entry+0x148>)
 8018b74:	4613      	mov	r3, r2
 8018b76:	005b      	lsls	r3, r3, #1
 8018b78:	4413      	add	r3, r2
 8018b7a:	00db      	lsls	r3, r3, #3
 8018b7c:	440b      	add	r3, r1
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d021      	beq.n	8018bc8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018b84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b88:	4915      	ldr	r1, [pc, #84]	; (8018be0 <etharp_update_arp_entry+0x148>)
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	005b      	lsls	r3, r3, #1
 8018b8e:	4413      	add	r3, r2
 8018b90:	00db      	lsls	r3, r3, #3
 8018b92:	440b      	add	r3, r1
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018b98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018b9c:	4910      	ldr	r1, [pc, #64]	; (8018be0 <etharp_update_arp_entry+0x148>)
 8018b9e:	4613      	mov	r3, r2
 8018ba0:	005b      	lsls	r3, r3, #1
 8018ba2:	4413      	add	r3, r2
 8018ba4:	00db      	lsls	r3, r3, #3
 8018ba6:	440b      	add	r3, r1
 8018ba8:	2200      	movs	r2, #0
 8018baa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8018bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018bb6:	9300      	str	r3, [sp, #0]
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	6939      	ldr	r1, [r7, #16]
 8018bbc:	68f8      	ldr	r0, [r7, #12]
 8018bbe:	f001 ff8b 	bl	801aad8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018bc2:	6938      	ldr	r0, [r7, #16]
 8018bc4:	f7f9 f9cc 	bl	8011f60 <pbuf_free>
  }
  return ERR_OK;
 8018bc8:	2300      	movs	r3, #0
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3718      	adds	r7, #24
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}
 8018bd2:	bf00      	nop
 8018bd4:	0801e190 	.word	0x0801e190
 8018bd8:	0801e288 	.word	0x0801e288
 8018bdc:	0801e208 	.word	0x0801e208
 8018be0:	200045a4 	.word	0x200045a4

08018be4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b084      	sub	sp, #16
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018bec:	2300      	movs	r3, #0
 8018bee:	60fb      	str	r3, [r7, #12]
 8018bf0:	e01e      	b.n	8018c30 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018bf2:	4913      	ldr	r1, [pc, #76]	; (8018c40 <etharp_cleanup_netif+0x5c>)
 8018bf4:	68fa      	ldr	r2, [r7, #12]
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	005b      	lsls	r3, r3, #1
 8018bfa:	4413      	add	r3, r2
 8018bfc:	00db      	lsls	r3, r3, #3
 8018bfe:	440b      	add	r3, r1
 8018c00:	3314      	adds	r3, #20
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018c06:	7afb      	ldrb	r3, [r7, #11]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d00e      	beq.n	8018c2a <etharp_cleanup_netif+0x46>
 8018c0c:	490c      	ldr	r1, [pc, #48]	; (8018c40 <etharp_cleanup_netif+0x5c>)
 8018c0e:	68fa      	ldr	r2, [r7, #12]
 8018c10:	4613      	mov	r3, r2
 8018c12:	005b      	lsls	r3, r3, #1
 8018c14:	4413      	add	r3, r2
 8018c16:	00db      	lsls	r3, r3, #3
 8018c18:	440b      	add	r3, r1
 8018c1a:	3308      	adds	r3, #8
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	687a      	ldr	r2, [r7, #4]
 8018c20:	429a      	cmp	r2, r3
 8018c22:	d102      	bne.n	8018c2a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018c24:	68f8      	ldr	r0, [r7, #12]
 8018c26:	f7ff fce5 	bl	80185f4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	3301      	adds	r3, #1
 8018c2e:	60fb      	str	r3, [r7, #12]
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	2b09      	cmp	r3, #9
 8018c34:	dddd      	ble.n	8018bf2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018c36:	bf00      	nop
 8018c38:	3710      	adds	r7, #16
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	200045a4 	.word	0x200045a4

08018c44 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018c44:	b5b0      	push	{r4, r5, r7, lr}
 8018c46:	b08a      	sub	sp, #40	; 0x28
 8018c48:	af04      	add	r7, sp, #16
 8018c4a:	6078      	str	r0, [r7, #4]
 8018c4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d107      	bne.n	8018c64 <etharp_input+0x20>
 8018c54:	4b3d      	ldr	r3, [pc, #244]	; (8018d4c <etharp_input+0x108>)
 8018c56:	f240 228a 	movw	r2, #650	; 0x28a
 8018c5a:	493d      	ldr	r1, [pc, #244]	; (8018d50 <etharp_input+0x10c>)
 8018c5c:	483d      	ldr	r0, [pc, #244]	; (8018d54 <etharp_input+0x110>)
 8018c5e:	f002 f8df 	bl	801ae20 <iprintf>
 8018c62:	e06f      	b.n	8018d44 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	685b      	ldr	r3, [r3, #4]
 8018c68:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018c6a:	693b      	ldr	r3, [r7, #16]
 8018c6c:	881b      	ldrh	r3, [r3, #0]
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c74:	d10c      	bne.n	8018c90 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018c76:	693b      	ldr	r3, [r7, #16]
 8018c78:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018c7a:	2b06      	cmp	r3, #6
 8018c7c:	d108      	bne.n	8018c90 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018c7e:	693b      	ldr	r3, [r7, #16]
 8018c80:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018c82:	2b04      	cmp	r3, #4
 8018c84:	d104      	bne.n	8018c90 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	885b      	ldrh	r3, [r3, #2]
 8018c8a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018c8c:	2b08      	cmp	r3, #8
 8018c8e:	d003      	beq.n	8018c98 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018c90:	6878      	ldr	r0, [r7, #4]
 8018c92:	f7f9 f965 	bl	8011f60 <pbuf_free>
    return;
 8018c96:	e055      	b.n	8018d44 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018c98:	693b      	ldr	r3, [r7, #16]
 8018c9a:	330e      	adds	r3, #14
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018ca0:	693b      	ldr	r3, [r7, #16]
 8018ca2:	3318      	adds	r3, #24
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	3304      	adds	r3, #4
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d102      	bne.n	8018cb8 <etharp_input+0x74>
    for_us = 0;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	75fb      	strb	r3, [r7, #23]
 8018cb6:	e009      	b.n	8018ccc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018cb8:	68ba      	ldr	r2, [r7, #8]
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	3304      	adds	r3, #4
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	bf0c      	ite	eq
 8018cc4:	2301      	moveq	r3, #1
 8018cc6:	2300      	movne	r3, #0
 8018cc8:	b2db      	uxtb	r3, r3
 8018cca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018ccc:	693b      	ldr	r3, [r7, #16]
 8018cce:	f103 0208 	add.w	r2, r3, #8
 8018cd2:	7dfb      	ldrb	r3, [r7, #23]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d001      	beq.n	8018cdc <etharp_input+0x98>
 8018cd8:	2301      	movs	r3, #1
 8018cda:	e000      	b.n	8018cde <etharp_input+0x9a>
 8018cdc:	2302      	movs	r3, #2
 8018cde:	f107 010c 	add.w	r1, r7, #12
 8018ce2:	6838      	ldr	r0, [r7, #0]
 8018ce4:	f7ff fed8 	bl	8018a98 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018ce8:	693b      	ldr	r3, [r7, #16]
 8018cea:	88db      	ldrh	r3, [r3, #6]
 8018cec:	b29b      	uxth	r3, r3
 8018cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018cf2:	d003      	beq.n	8018cfc <etharp_input+0xb8>
 8018cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018cf8:	d01e      	beq.n	8018d38 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018cfa:	e020      	b.n	8018d3e <etharp_input+0xfa>
      if (for_us) {
 8018cfc:	7dfb      	ldrb	r3, [r7, #23]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d01c      	beq.n	8018d3c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018d02:	683b      	ldr	r3, [r7, #0]
 8018d04:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018d0e:	683b      	ldr	r3, [r7, #0]
 8018d10:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018d18:	693a      	ldr	r2, [r7, #16]
 8018d1a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018d1c:	2102      	movs	r1, #2
 8018d1e:	9103      	str	r1, [sp, #12]
 8018d20:	f107 010c 	add.w	r1, r7, #12
 8018d24:	9102      	str	r1, [sp, #8]
 8018d26:	9201      	str	r2, [sp, #4]
 8018d28:	9300      	str	r3, [sp, #0]
 8018d2a:	462b      	mov	r3, r5
 8018d2c:	4622      	mov	r2, r4
 8018d2e:	4601      	mov	r1, r0
 8018d30:	6838      	ldr	r0, [r7, #0]
 8018d32:	f000 faeb 	bl	801930c <etharp_raw>
      break;
 8018d36:	e001      	b.n	8018d3c <etharp_input+0xf8>
      break;
 8018d38:	bf00      	nop
 8018d3a:	e000      	b.n	8018d3e <etharp_input+0xfa>
      break;
 8018d3c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018d3e:	6878      	ldr	r0, [r7, #4]
 8018d40:	f7f9 f90e 	bl	8011f60 <pbuf_free>
}
 8018d44:	3718      	adds	r7, #24
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bdb0      	pop	{r4, r5, r7, pc}
 8018d4a:	bf00      	nop
 8018d4c:	0801e190 	.word	0x0801e190
 8018d50:	0801e2e0 	.word	0x0801e2e0
 8018d54:	0801e208 	.word	0x0801e208

08018d58 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b086      	sub	sp, #24
 8018d5c:	af02      	add	r7, sp, #8
 8018d5e:	60f8      	str	r0, [r7, #12]
 8018d60:	60b9      	str	r1, [r7, #8]
 8018d62:	4613      	mov	r3, r2
 8018d64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018d66:	79fa      	ldrb	r2, [r7, #7]
 8018d68:	4944      	ldr	r1, [pc, #272]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018d6a:	4613      	mov	r3, r2
 8018d6c:	005b      	lsls	r3, r3, #1
 8018d6e:	4413      	add	r3, r2
 8018d70:	00db      	lsls	r3, r3, #3
 8018d72:	440b      	add	r3, r1
 8018d74:	3314      	adds	r3, #20
 8018d76:	781b      	ldrb	r3, [r3, #0]
 8018d78:	2b01      	cmp	r3, #1
 8018d7a:	d806      	bhi.n	8018d8a <etharp_output_to_arp_index+0x32>
 8018d7c:	4b40      	ldr	r3, [pc, #256]	; (8018e80 <etharp_output_to_arp_index+0x128>)
 8018d7e:	f240 22ef 	movw	r2, #751	; 0x2ef
 8018d82:	4940      	ldr	r1, [pc, #256]	; (8018e84 <etharp_output_to_arp_index+0x12c>)
 8018d84:	4840      	ldr	r0, [pc, #256]	; (8018e88 <etharp_output_to_arp_index+0x130>)
 8018d86:	f002 f84b 	bl	801ae20 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018d8a:	79fa      	ldrb	r2, [r7, #7]
 8018d8c:	493b      	ldr	r1, [pc, #236]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018d8e:	4613      	mov	r3, r2
 8018d90:	005b      	lsls	r3, r3, #1
 8018d92:	4413      	add	r3, r2
 8018d94:	00db      	lsls	r3, r3, #3
 8018d96:	440b      	add	r3, r1
 8018d98:	3314      	adds	r3, #20
 8018d9a:	781b      	ldrb	r3, [r3, #0]
 8018d9c:	2b02      	cmp	r3, #2
 8018d9e:	d153      	bne.n	8018e48 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018da0:	79fa      	ldrb	r2, [r7, #7]
 8018da2:	4936      	ldr	r1, [pc, #216]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018da4:	4613      	mov	r3, r2
 8018da6:	005b      	lsls	r3, r3, #1
 8018da8:	4413      	add	r3, r2
 8018daa:	00db      	lsls	r3, r3, #3
 8018dac:	440b      	add	r3, r1
 8018dae:	3312      	adds	r3, #18
 8018db0:	881b      	ldrh	r3, [r3, #0]
 8018db2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018db6:	d919      	bls.n	8018dec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018db8:	79fa      	ldrb	r2, [r7, #7]
 8018dba:	4613      	mov	r3, r2
 8018dbc:	005b      	lsls	r3, r3, #1
 8018dbe:	4413      	add	r3, r2
 8018dc0:	00db      	lsls	r3, r3, #3
 8018dc2:	4a2e      	ldr	r2, [pc, #184]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018dc4:	4413      	add	r3, r2
 8018dc6:	3304      	adds	r3, #4
 8018dc8:	4619      	mov	r1, r3
 8018dca:	68f8      	ldr	r0, [r7, #12]
 8018dcc:	f000 fb4c 	bl	8019468 <etharp_request>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d138      	bne.n	8018e48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018dd6:	79fa      	ldrb	r2, [r7, #7]
 8018dd8:	4928      	ldr	r1, [pc, #160]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018dda:	4613      	mov	r3, r2
 8018ddc:	005b      	lsls	r3, r3, #1
 8018dde:	4413      	add	r3, r2
 8018de0:	00db      	lsls	r3, r3, #3
 8018de2:	440b      	add	r3, r1
 8018de4:	3314      	adds	r3, #20
 8018de6:	2203      	movs	r2, #3
 8018de8:	701a      	strb	r2, [r3, #0]
 8018dea:	e02d      	b.n	8018e48 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018dec:	79fa      	ldrb	r2, [r7, #7]
 8018dee:	4923      	ldr	r1, [pc, #140]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018df0:	4613      	mov	r3, r2
 8018df2:	005b      	lsls	r3, r3, #1
 8018df4:	4413      	add	r3, r2
 8018df6:	00db      	lsls	r3, r3, #3
 8018df8:	440b      	add	r3, r1
 8018dfa:	3312      	adds	r3, #18
 8018dfc:	881b      	ldrh	r3, [r3, #0]
 8018dfe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018e02:	d321      	bcc.n	8018e48 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018e04:	79fa      	ldrb	r2, [r7, #7]
 8018e06:	4613      	mov	r3, r2
 8018e08:	005b      	lsls	r3, r3, #1
 8018e0a:	4413      	add	r3, r2
 8018e0c:	00db      	lsls	r3, r3, #3
 8018e0e:	4a1b      	ldr	r2, [pc, #108]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018e10:	4413      	add	r3, r2
 8018e12:	1d19      	adds	r1, r3, #4
 8018e14:	79fa      	ldrb	r2, [r7, #7]
 8018e16:	4613      	mov	r3, r2
 8018e18:	005b      	lsls	r3, r3, #1
 8018e1a:	4413      	add	r3, r2
 8018e1c:	00db      	lsls	r3, r3, #3
 8018e1e:	3308      	adds	r3, #8
 8018e20:	4a16      	ldr	r2, [pc, #88]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018e22:	4413      	add	r3, r2
 8018e24:	3304      	adds	r3, #4
 8018e26:	461a      	mov	r2, r3
 8018e28:	68f8      	ldr	r0, [r7, #12]
 8018e2a:	f000 fafb 	bl	8019424 <etharp_request_dst>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d109      	bne.n	8018e48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018e34:	79fa      	ldrb	r2, [r7, #7]
 8018e36:	4911      	ldr	r1, [pc, #68]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018e38:	4613      	mov	r3, r2
 8018e3a:	005b      	lsls	r3, r3, #1
 8018e3c:	4413      	add	r3, r2
 8018e3e:	00db      	lsls	r3, r3, #3
 8018e40:	440b      	add	r3, r1
 8018e42:	3314      	adds	r3, #20
 8018e44:	2203      	movs	r2, #3
 8018e46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8018e4e:	79fa      	ldrb	r2, [r7, #7]
 8018e50:	4613      	mov	r3, r2
 8018e52:	005b      	lsls	r3, r3, #1
 8018e54:	4413      	add	r3, r2
 8018e56:	00db      	lsls	r3, r3, #3
 8018e58:	3308      	adds	r3, #8
 8018e5a:	4a08      	ldr	r2, [pc, #32]	; (8018e7c <etharp_output_to_arp_index+0x124>)
 8018e5c:	4413      	add	r3, r2
 8018e5e:	1d1a      	adds	r2, r3, #4
 8018e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018e64:	9300      	str	r3, [sp, #0]
 8018e66:	4613      	mov	r3, r2
 8018e68:	460a      	mov	r2, r1
 8018e6a:	68b9      	ldr	r1, [r7, #8]
 8018e6c:	68f8      	ldr	r0, [r7, #12]
 8018e6e:	f001 fe33 	bl	801aad8 <ethernet_output>
 8018e72:	4603      	mov	r3, r0
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	3710      	adds	r7, #16
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	200045a4 	.word	0x200045a4
 8018e80:	0801e190 	.word	0x0801e190
 8018e84:	0801e300 	.word	0x0801e300
 8018e88:	0801e208 	.word	0x0801e208

08018e8c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b08a      	sub	sp, #40	; 0x28
 8018e90:	af02      	add	r7, sp, #8
 8018e92:	60f8      	str	r0, [r7, #12]
 8018e94:	60b9      	str	r1, [r7, #8]
 8018e96:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018e9c:	68fb      	ldr	r3, [r7, #12]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d106      	bne.n	8018eb0 <etharp_output+0x24>
 8018ea2:	4b73      	ldr	r3, [pc, #460]	; (8019070 <etharp_output+0x1e4>)
 8018ea4:	f240 321e 	movw	r2, #798	; 0x31e
 8018ea8:	4972      	ldr	r1, [pc, #456]	; (8019074 <etharp_output+0x1e8>)
 8018eaa:	4873      	ldr	r0, [pc, #460]	; (8019078 <etharp_output+0x1ec>)
 8018eac:	f001 ffb8 	bl	801ae20 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018eb0:	68bb      	ldr	r3, [r7, #8]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d106      	bne.n	8018ec4 <etharp_output+0x38>
 8018eb6:	4b6e      	ldr	r3, [pc, #440]	; (8019070 <etharp_output+0x1e4>)
 8018eb8:	f240 321f 	movw	r2, #799	; 0x31f
 8018ebc:	496f      	ldr	r1, [pc, #444]	; (801907c <etharp_output+0x1f0>)
 8018ebe:	486e      	ldr	r0, [pc, #440]	; (8019078 <etharp_output+0x1ec>)
 8018ec0:	f001 ffae 	bl	801ae20 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d106      	bne.n	8018ed8 <etharp_output+0x4c>
 8018eca:	4b69      	ldr	r3, [pc, #420]	; (8019070 <etharp_output+0x1e4>)
 8018ecc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018ed0:	496b      	ldr	r1, [pc, #428]	; (8019080 <etharp_output+0x1f4>)
 8018ed2:	4869      	ldr	r0, [pc, #420]	; (8019078 <etharp_output+0x1ec>)
 8018ed4:	f001 ffa4 	bl	801ae20 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	68f9      	ldr	r1, [r7, #12]
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f000 fef6 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d002      	beq.n	8018ef0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018eea:	4b66      	ldr	r3, [pc, #408]	; (8019084 <etharp_output+0x1f8>)
 8018eec:	61fb      	str	r3, [r7, #28]
 8018eee:	e0af      	b.n	8019050 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ef8:	2be0      	cmp	r3, #224	; 0xe0
 8018efa:	d118      	bne.n	8018f2e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018efc:	2301      	movs	r3, #1
 8018efe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018f00:	2300      	movs	r3, #0
 8018f02:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018f04:	235e      	movs	r3, #94	; 0x5e
 8018f06:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	3301      	adds	r3, #1
 8018f0c:	781b      	ldrb	r3, [r3, #0]
 8018f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	3302      	adds	r3, #2
 8018f1a:	781b      	ldrb	r3, [r3, #0]
 8018f1c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	3303      	adds	r3, #3
 8018f22:	781b      	ldrb	r3, [r3, #0]
 8018f24:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018f26:	f107 0310 	add.w	r3, r7, #16
 8018f2a:	61fb      	str	r3, [r7, #28]
 8018f2c:	e090      	b.n	8019050 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681a      	ldr	r2, [r3, #0]
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	3304      	adds	r3, #4
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	405a      	eors	r2, r3
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	3308      	adds	r3, #8
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	4013      	ands	r3, r2
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d012      	beq.n	8018f6c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018f4c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018f50:	4293      	cmp	r3, r2
 8018f52:	d00b      	beq.n	8018f6c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	330c      	adds	r3, #12
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d003      	beq.n	8018f66 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	330c      	adds	r3, #12
 8018f62:	61bb      	str	r3, [r7, #24]
 8018f64:	e002      	b.n	8018f6c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018f66:	f06f 0303 	mvn.w	r3, #3
 8018f6a:	e07d      	b.n	8019068 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018f6c:	4b46      	ldr	r3, [pc, #280]	; (8019088 <etharp_output+0x1fc>)
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	4619      	mov	r1, r3
 8018f72:	4a46      	ldr	r2, [pc, #280]	; (801908c <etharp_output+0x200>)
 8018f74:	460b      	mov	r3, r1
 8018f76:	005b      	lsls	r3, r3, #1
 8018f78:	440b      	add	r3, r1
 8018f7a:	00db      	lsls	r3, r3, #3
 8018f7c:	4413      	add	r3, r2
 8018f7e:	3314      	adds	r3, #20
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	2b01      	cmp	r3, #1
 8018f84:	d925      	bls.n	8018fd2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018f86:	4b40      	ldr	r3, [pc, #256]	; (8019088 <etharp_output+0x1fc>)
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	4619      	mov	r1, r3
 8018f8c:	4a3f      	ldr	r2, [pc, #252]	; (801908c <etharp_output+0x200>)
 8018f8e:	460b      	mov	r3, r1
 8018f90:	005b      	lsls	r3, r3, #1
 8018f92:	440b      	add	r3, r1
 8018f94:	00db      	lsls	r3, r3, #3
 8018f96:	4413      	add	r3, r2
 8018f98:	3308      	adds	r3, #8
 8018f9a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018f9c:	68fa      	ldr	r2, [r7, #12]
 8018f9e:	429a      	cmp	r2, r3
 8018fa0:	d117      	bne.n	8018fd2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018fa2:	69bb      	ldr	r3, [r7, #24]
 8018fa4:	681a      	ldr	r2, [r3, #0]
 8018fa6:	4b38      	ldr	r3, [pc, #224]	; (8019088 <etharp_output+0x1fc>)
 8018fa8:	781b      	ldrb	r3, [r3, #0]
 8018faa:	4618      	mov	r0, r3
 8018fac:	4937      	ldr	r1, [pc, #220]	; (801908c <etharp_output+0x200>)
 8018fae:	4603      	mov	r3, r0
 8018fb0:	005b      	lsls	r3, r3, #1
 8018fb2:	4403      	add	r3, r0
 8018fb4:	00db      	lsls	r3, r3, #3
 8018fb6:	440b      	add	r3, r1
 8018fb8:	3304      	adds	r3, #4
 8018fba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018fbc:	429a      	cmp	r2, r3
 8018fbe:	d108      	bne.n	8018fd2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018fc0:	4b31      	ldr	r3, [pc, #196]	; (8019088 <etharp_output+0x1fc>)
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	461a      	mov	r2, r3
 8018fc6:	68b9      	ldr	r1, [r7, #8]
 8018fc8:	68f8      	ldr	r0, [r7, #12]
 8018fca:	f7ff fec5 	bl	8018d58 <etharp_output_to_arp_index>
 8018fce:	4603      	mov	r3, r0
 8018fd0:	e04a      	b.n	8019068 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	75fb      	strb	r3, [r7, #23]
 8018fd6:	e031      	b.n	801903c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018fd8:	7dfa      	ldrb	r2, [r7, #23]
 8018fda:	492c      	ldr	r1, [pc, #176]	; (801908c <etharp_output+0x200>)
 8018fdc:	4613      	mov	r3, r2
 8018fde:	005b      	lsls	r3, r3, #1
 8018fe0:	4413      	add	r3, r2
 8018fe2:	00db      	lsls	r3, r3, #3
 8018fe4:	440b      	add	r3, r1
 8018fe6:	3314      	adds	r3, #20
 8018fe8:	781b      	ldrb	r3, [r3, #0]
 8018fea:	2b01      	cmp	r3, #1
 8018fec:	d923      	bls.n	8019036 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018fee:	7dfa      	ldrb	r2, [r7, #23]
 8018ff0:	4926      	ldr	r1, [pc, #152]	; (801908c <etharp_output+0x200>)
 8018ff2:	4613      	mov	r3, r2
 8018ff4:	005b      	lsls	r3, r3, #1
 8018ff6:	4413      	add	r3, r2
 8018ff8:	00db      	lsls	r3, r3, #3
 8018ffa:	440b      	add	r3, r1
 8018ffc:	3308      	adds	r3, #8
 8018ffe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019000:	68fa      	ldr	r2, [r7, #12]
 8019002:	429a      	cmp	r2, r3
 8019004:	d117      	bne.n	8019036 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019006:	69bb      	ldr	r3, [r7, #24]
 8019008:	6819      	ldr	r1, [r3, #0]
 801900a:	7dfa      	ldrb	r2, [r7, #23]
 801900c:	481f      	ldr	r0, [pc, #124]	; (801908c <etharp_output+0x200>)
 801900e:	4613      	mov	r3, r2
 8019010:	005b      	lsls	r3, r3, #1
 8019012:	4413      	add	r3, r2
 8019014:	00db      	lsls	r3, r3, #3
 8019016:	4403      	add	r3, r0
 8019018:	3304      	adds	r3, #4
 801901a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801901c:	4299      	cmp	r1, r3
 801901e:	d10a      	bne.n	8019036 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019020:	4a19      	ldr	r2, [pc, #100]	; (8019088 <etharp_output+0x1fc>)
 8019022:	7dfb      	ldrb	r3, [r7, #23]
 8019024:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019026:	7dfb      	ldrb	r3, [r7, #23]
 8019028:	461a      	mov	r2, r3
 801902a:	68b9      	ldr	r1, [r7, #8]
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	f7ff fe93 	bl	8018d58 <etharp_output_to_arp_index>
 8019032:	4603      	mov	r3, r0
 8019034:	e018      	b.n	8019068 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019036:	7dfb      	ldrb	r3, [r7, #23]
 8019038:	3301      	adds	r3, #1
 801903a:	75fb      	strb	r3, [r7, #23]
 801903c:	7dfb      	ldrb	r3, [r7, #23]
 801903e:	2b09      	cmp	r3, #9
 8019040:	d9ca      	bls.n	8018fd8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019042:	68ba      	ldr	r2, [r7, #8]
 8019044:	69b9      	ldr	r1, [r7, #24]
 8019046:	68f8      	ldr	r0, [r7, #12]
 8019048:	f000 f822 	bl	8019090 <etharp_query>
 801904c:	4603      	mov	r3, r0
 801904e:	e00b      	b.n	8019068 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8019056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801905a:	9300      	str	r3, [sp, #0]
 801905c:	69fb      	ldr	r3, [r7, #28]
 801905e:	68b9      	ldr	r1, [r7, #8]
 8019060:	68f8      	ldr	r0, [r7, #12]
 8019062:	f001 fd39 	bl	801aad8 <ethernet_output>
 8019066:	4603      	mov	r3, r0
}
 8019068:	4618      	mov	r0, r3
 801906a:	3720      	adds	r7, #32
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}
 8019070:	0801e190 	.word	0x0801e190
 8019074:	0801e2e0 	.word	0x0801e2e0
 8019078:	0801e208 	.word	0x0801e208
 801907c:	0801e330 	.word	0x0801e330
 8019080:	0801e2d0 	.word	0x0801e2d0
 8019084:	0801e998 	.word	0x0801e998
 8019088:	20004694 	.word	0x20004694
 801908c:	200045a4 	.word	0x200045a4

08019090 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019090:	b580      	push	{r7, lr}
 8019092:	b08c      	sub	sp, #48	; 0x30
 8019094:	af02      	add	r7, sp, #8
 8019096:	60f8      	str	r0, [r7, #12]
 8019098:	60b9      	str	r1, [r7, #8]
 801909a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	3322      	adds	r3, #34	; 0x22
 80190a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80190a2:	23ff      	movs	r3, #255	; 0xff
 80190a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80190a8:	2300      	movs	r3, #0
 80190aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	68f9      	ldr	r1, [r7, #12]
 80190b2:	4618      	mov	r0, r3
 80190b4:	f000 fe0c 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 80190b8:	4603      	mov	r3, r0
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d10c      	bne.n	80190d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80190be:	68bb      	ldr	r3, [r7, #8]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80190c6:	2be0      	cmp	r3, #224	; 0xe0
 80190c8:	d006      	beq.n	80190d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80190ca:	68bb      	ldr	r3, [r7, #8]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d003      	beq.n	80190d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d102      	bne.n	80190de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80190d8:	f06f 030f 	mvn.w	r3, #15
 80190dc:	e102      	b.n	80192e4 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80190de:	68fa      	ldr	r2, [r7, #12]
 80190e0:	2101      	movs	r1, #1
 80190e2:	68b8      	ldr	r0, [r7, #8]
 80190e4:	f7ff fb60 	bl	80187a8 <etharp_find_entry>
 80190e8:	4603      	mov	r3, r0
 80190ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80190ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	da02      	bge.n	80190fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80190f4:	8a7b      	ldrh	r3, [r7, #18]
 80190f6:	b25b      	sxtb	r3, r3
 80190f8:	e0f4      	b.n	80192e4 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80190fa:	8a7b      	ldrh	r3, [r7, #18]
 80190fc:	2b7e      	cmp	r3, #126	; 0x7e
 80190fe:	d906      	bls.n	801910e <etharp_query+0x7e>
 8019100:	4b7a      	ldr	r3, [pc, #488]	; (80192ec <etharp_query+0x25c>)
 8019102:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019106:	497a      	ldr	r1, [pc, #488]	; (80192f0 <etharp_query+0x260>)
 8019108:	487a      	ldr	r0, [pc, #488]	; (80192f4 <etharp_query+0x264>)
 801910a:	f001 fe89 	bl	801ae20 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801910e:	8a7b      	ldrh	r3, [r7, #18]
 8019110:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019112:	7c7a      	ldrb	r2, [r7, #17]
 8019114:	4978      	ldr	r1, [pc, #480]	; (80192f8 <etharp_query+0x268>)
 8019116:	4613      	mov	r3, r2
 8019118:	005b      	lsls	r3, r3, #1
 801911a:	4413      	add	r3, r2
 801911c:	00db      	lsls	r3, r3, #3
 801911e:	440b      	add	r3, r1
 8019120:	3314      	adds	r3, #20
 8019122:	781b      	ldrb	r3, [r3, #0]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d115      	bne.n	8019154 <etharp_query+0xc4>
    is_new_entry = 1;
 8019128:	2301      	movs	r3, #1
 801912a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801912c:	7c7a      	ldrb	r2, [r7, #17]
 801912e:	4972      	ldr	r1, [pc, #456]	; (80192f8 <etharp_query+0x268>)
 8019130:	4613      	mov	r3, r2
 8019132:	005b      	lsls	r3, r3, #1
 8019134:	4413      	add	r3, r2
 8019136:	00db      	lsls	r3, r3, #3
 8019138:	440b      	add	r3, r1
 801913a:	3314      	adds	r3, #20
 801913c:	2201      	movs	r2, #1
 801913e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019140:	7c7a      	ldrb	r2, [r7, #17]
 8019142:	496d      	ldr	r1, [pc, #436]	; (80192f8 <etharp_query+0x268>)
 8019144:	4613      	mov	r3, r2
 8019146:	005b      	lsls	r3, r3, #1
 8019148:	4413      	add	r3, r2
 801914a:	00db      	lsls	r3, r3, #3
 801914c:	440b      	add	r3, r1
 801914e:	3308      	adds	r3, #8
 8019150:	68fa      	ldr	r2, [r7, #12]
 8019152:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019154:	7c7a      	ldrb	r2, [r7, #17]
 8019156:	4968      	ldr	r1, [pc, #416]	; (80192f8 <etharp_query+0x268>)
 8019158:	4613      	mov	r3, r2
 801915a:	005b      	lsls	r3, r3, #1
 801915c:	4413      	add	r3, r2
 801915e:	00db      	lsls	r3, r3, #3
 8019160:	440b      	add	r3, r1
 8019162:	3314      	adds	r3, #20
 8019164:	781b      	ldrb	r3, [r3, #0]
 8019166:	2b01      	cmp	r3, #1
 8019168:	d011      	beq.n	801918e <etharp_query+0xfe>
 801916a:	7c7a      	ldrb	r2, [r7, #17]
 801916c:	4962      	ldr	r1, [pc, #392]	; (80192f8 <etharp_query+0x268>)
 801916e:	4613      	mov	r3, r2
 8019170:	005b      	lsls	r3, r3, #1
 8019172:	4413      	add	r3, r2
 8019174:	00db      	lsls	r3, r3, #3
 8019176:	440b      	add	r3, r1
 8019178:	3314      	adds	r3, #20
 801917a:	781b      	ldrb	r3, [r3, #0]
 801917c:	2b01      	cmp	r3, #1
 801917e:	d806      	bhi.n	801918e <etharp_query+0xfe>
 8019180:	4b5a      	ldr	r3, [pc, #360]	; (80192ec <etharp_query+0x25c>)
 8019182:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019186:	495d      	ldr	r1, [pc, #372]	; (80192fc <etharp_query+0x26c>)
 8019188:	485a      	ldr	r0, [pc, #360]	; (80192f4 <etharp_query+0x264>)
 801918a:	f001 fe49 	bl	801ae20 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801918e:	6a3b      	ldr	r3, [r7, #32]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d102      	bne.n	801919a <etharp_query+0x10a>
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d10c      	bne.n	80191b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801919a:	68b9      	ldr	r1, [r7, #8]
 801919c:	68f8      	ldr	r0, [r7, #12]
 801919e:	f000 f963 	bl	8019468 <etharp_request>
 80191a2:	4603      	mov	r3, r0
 80191a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d102      	bne.n	80191b4 <etharp_query+0x124>
      return result;
 80191ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80191b2:	e097      	b.n	80192e4 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d106      	bne.n	80191c8 <etharp_query+0x138>
 80191ba:	4b4c      	ldr	r3, [pc, #304]	; (80192ec <etharp_query+0x25c>)
 80191bc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80191c0:	494f      	ldr	r1, [pc, #316]	; (8019300 <etharp_query+0x270>)
 80191c2:	484c      	ldr	r0, [pc, #304]	; (80192f4 <etharp_query+0x264>)
 80191c4:	f001 fe2c 	bl	801ae20 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80191c8:	7c7a      	ldrb	r2, [r7, #17]
 80191ca:	494b      	ldr	r1, [pc, #300]	; (80192f8 <etharp_query+0x268>)
 80191cc:	4613      	mov	r3, r2
 80191ce:	005b      	lsls	r3, r3, #1
 80191d0:	4413      	add	r3, r2
 80191d2:	00db      	lsls	r3, r3, #3
 80191d4:	440b      	add	r3, r1
 80191d6:	3314      	adds	r3, #20
 80191d8:	781b      	ldrb	r3, [r3, #0]
 80191da:	2b01      	cmp	r3, #1
 80191dc:	d918      	bls.n	8019210 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80191de:	4a49      	ldr	r2, [pc, #292]	; (8019304 <etharp_query+0x274>)
 80191e0:	7c7b      	ldrb	r3, [r7, #17]
 80191e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80191e4:	7c7a      	ldrb	r2, [r7, #17]
 80191e6:	4613      	mov	r3, r2
 80191e8:	005b      	lsls	r3, r3, #1
 80191ea:	4413      	add	r3, r2
 80191ec:	00db      	lsls	r3, r3, #3
 80191ee:	3308      	adds	r3, #8
 80191f0:	4a41      	ldr	r2, [pc, #260]	; (80192f8 <etharp_query+0x268>)
 80191f2:	4413      	add	r3, r2
 80191f4:	1d1a      	adds	r2, r3, #4
 80191f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80191fa:	9300      	str	r3, [sp, #0]
 80191fc:	4613      	mov	r3, r2
 80191fe:	697a      	ldr	r2, [r7, #20]
 8019200:	6879      	ldr	r1, [r7, #4]
 8019202:	68f8      	ldr	r0, [r7, #12]
 8019204:	f001 fc68 	bl	801aad8 <ethernet_output>
 8019208:	4603      	mov	r3, r0
 801920a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801920e:	e067      	b.n	80192e0 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019210:	7c7a      	ldrb	r2, [r7, #17]
 8019212:	4939      	ldr	r1, [pc, #228]	; (80192f8 <etharp_query+0x268>)
 8019214:	4613      	mov	r3, r2
 8019216:	005b      	lsls	r3, r3, #1
 8019218:	4413      	add	r3, r2
 801921a:	00db      	lsls	r3, r3, #3
 801921c:	440b      	add	r3, r1
 801921e:	3314      	adds	r3, #20
 8019220:	781b      	ldrb	r3, [r3, #0]
 8019222:	2b01      	cmp	r3, #1
 8019224:	d15c      	bne.n	80192e0 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019226:	2300      	movs	r3, #0
 8019228:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801922e:	e01c      	b.n	801926a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019230:	69fb      	ldr	r3, [r7, #28]
 8019232:	895a      	ldrh	r2, [r3, #10]
 8019234:	69fb      	ldr	r3, [r7, #28]
 8019236:	891b      	ldrh	r3, [r3, #8]
 8019238:	429a      	cmp	r2, r3
 801923a:	d10a      	bne.n	8019252 <etharp_query+0x1c2>
 801923c:	69fb      	ldr	r3, [r7, #28]
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d006      	beq.n	8019252 <etharp_query+0x1c2>
 8019244:	4b29      	ldr	r3, [pc, #164]	; (80192ec <etharp_query+0x25c>)
 8019246:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801924a:	492f      	ldr	r1, [pc, #188]	; (8019308 <etharp_query+0x278>)
 801924c:	4829      	ldr	r0, [pc, #164]	; (80192f4 <etharp_query+0x264>)
 801924e:	f001 fde7 	bl	801ae20 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019252:	69fb      	ldr	r3, [r7, #28]
 8019254:	7b1b      	ldrb	r3, [r3, #12]
 8019256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801925a:	2b00      	cmp	r3, #0
 801925c:	d002      	beq.n	8019264 <etharp_query+0x1d4>
        copy_needed = 1;
 801925e:	2301      	movs	r3, #1
 8019260:	61bb      	str	r3, [r7, #24]
        break;
 8019262:	e005      	b.n	8019270 <etharp_query+0x1e0>
      }
      p = p->next;
 8019264:	69fb      	ldr	r3, [r7, #28]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	61fb      	str	r3, [r7, #28]
    while (p) {
 801926a:	69fb      	ldr	r3, [r7, #28]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d1df      	bne.n	8019230 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8019270:	69bb      	ldr	r3, [r7, #24]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d007      	beq.n	8019286 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	f44f 7120 	mov.w	r1, #640	; 0x280
 801927c:	200e      	movs	r0, #14
 801927e:	f7f9 fa1f 	bl	80126c0 <pbuf_clone>
 8019282:	61f8      	str	r0, [r7, #28]
 8019284:	e004      	b.n	8019290 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801928a:	69f8      	ldr	r0, [r7, #28]
 801928c:	f7f8 ff0e 	bl	80120ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019290:	69fb      	ldr	r3, [r7, #28]
 8019292:	2b00      	cmp	r3, #0
 8019294:	d021      	beq.n	80192da <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019296:	7c7a      	ldrb	r2, [r7, #17]
 8019298:	4917      	ldr	r1, [pc, #92]	; (80192f8 <etharp_query+0x268>)
 801929a:	4613      	mov	r3, r2
 801929c:	005b      	lsls	r3, r3, #1
 801929e:	4413      	add	r3, r2
 80192a0:	00db      	lsls	r3, r3, #3
 80192a2:	440b      	add	r3, r1
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d00a      	beq.n	80192c0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80192aa:	7c7a      	ldrb	r2, [r7, #17]
 80192ac:	4912      	ldr	r1, [pc, #72]	; (80192f8 <etharp_query+0x268>)
 80192ae:	4613      	mov	r3, r2
 80192b0:	005b      	lsls	r3, r3, #1
 80192b2:	4413      	add	r3, r2
 80192b4:	00db      	lsls	r3, r3, #3
 80192b6:	440b      	add	r3, r1
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7f8 fe50 	bl	8011f60 <pbuf_free>
      }
      arp_table[i].q = p;
 80192c0:	7c7a      	ldrb	r2, [r7, #17]
 80192c2:	490d      	ldr	r1, [pc, #52]	; (80192f8 <etharp_query+0x268>)
 80192c4:	4613      	mov	r3, r2
 80192c6:	005b      	lsls	r3, r3, #1
 80192c8:	4413      	add	r3, r2
 80192ca:	00db      	lsls	r3, r3, #3
 80192cc:	440b      	add	r3, r1
 80192ce:	69fa      	ldr	r2, [r7, #28]
 80192d0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80192d2:	2300      	movs	r3, #0
 80192d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80192d8:	e002      	b.n	80192e0 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80192da:	23ff      	movs	r3, #255	; 0xff
 80192dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80192e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80192e4:	4618      	mov	r0, r3
 80192e6:	3728      	adds	r7, #40	; 0x28
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	0801e190 	.word	0x0801e190
 80192f0:	0801e33c 	.word	0x0801e33c
 80192f4:	0801e208 	.word	0x0801e208
 80192f8:	200045a4 	.word	0x200045a4
 80192fc:	0801e34c 	.word	0x0801e34c
 8019300:	0801e330 	.word	0x0801e330
 8019304:	20004694 	.word	0x20004694
 8019308:	0801e374 	.word	0x0801e374

0801930c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b08a      	sub	sp, #40	; 0x28
 8019310:	af02      	add	r7, sp, #8
 8019312:	60f8      	str	r0, [r7, #12]
 8019314:	60b9      	str	r1, [r7, #8]
 8019316:	607a      	str	r2, [r7, #4]
 8019318:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801931a:	2300      	movs	r3, #0
 801931c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d106      	bne.n	8019332 <etharp_raw+0x26>
 8019324:	4b3a      	ldr	r3, [pc, #232]	; (8019410 <etharp_raw+0x104>)
 8019326:	f240 4257 	movw	r2, #1111	; 0x457
 801932a:	493a      	ldr	r1, [pc, #232]	; (8019414 <etharp_raw+0x108>)
 801932c:	483a      	ldr	r0, [pc, #232]	; (8019418 <etharp_raw+0x10c>)
 801932e:	f001 fd77 	bl	801ae20 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019332:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019336:	211c      	movs	r1, #28
 8019338:	200e      	movs	r0, #14
 801933a:	f7f8 fb31 	bl	80119a0 <pbuf_alloc>
 801933e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019340:	69bb      	ldr	r3, [r7, #24]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d102      	bne.n	801934c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801934a:	e05d      	b.n	8019408 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801934c:	69bb      	ldr	r3, [r7, #24]
 801934e:	895b      	ldrh	r3, [r3, #10]
 8019350:	2b1b      	cmp	r3, #27
 8019352:	d806      	bhi.n	8019362 <etharp_raw+0x56>
 8019354:	4b2e      	ldr	r3, [pc, #184]	; (8019410 <etharp_raw+0x104>)
 8019356:	f240 4263 	movw	r2, #1123	; 0x463
 801935a:	4930      	ldr	r1, [pc, #192]	; (801941c <etharp_raw+0x110>)
 801935c:	482e      	ldr	r0, [pc, #184]	; (8019418 <etharp_raw+0x10c>)
 801935e:	f001 fd5f 	bl	801ae20 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019362:	69bb      	ldr	r3, [r7, #24]
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019368:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801936a:	4618      	mov	r0, r3
 801936c:	f7f6 fffc 	bl	8010368 <lwip_htons>
 8019370:	4603      	mov	r3, r0
 8019372:	461a      	mov	r2, r3
 8019374:	697b      	ldr	r3, [r7, #20]
 8019376:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801937e:	2b06      	cmp	r3, #6
 8019380:	d006      	beq.n	8019390 <etharp_raw+0x84>
 8019382:	4b23      	ldr	r3, [pc, #140]	; (8019410 <etharp_raw+0x104>)
 8019384:	f240 426a 	movw	r2, #1130	; 0x46a
 8019388:	4925      	ldr	r1, [pc, #148]	; (8019420 <etharp_raw+0x114>)
 801938a:	4823      	ldr	r0, [pc, #140]	; (8019418 <etharp_raw+0x10c>)
 801938c:	f001 fd48 	bl	801ae20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019390:	697b      	ldr	r3, [r7, #20]
 8019392:	3308      	adds	r3, #8
 8019394:	2206      	movs	r2, #6
 8019396:	6839      	ldr	r1, [r7, #0]
 8019398:	4618      	mov	r0, r3
 801939a:	f001 fd2e 	bl	801adfa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801939e:	697b      	ldr	r3, [r7, #20]
 80193a0:	3312      	adds	r3, #18
 80193a2:	2206      	movs	r2, #6
 80193a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80193a6:	4618      	mov	r0, r3
 80193a8:	f001 fd27 	bl	801adfa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80193ac:	697b      	ldr	r3, [r7, #20]
 80193ae:	330e      	adds	r3, #14
 80193b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80193b2:	6812      	ldr	r2, [r2, #0]
 80193b4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	3318      	adds	r3, #24
 80193ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80193bc:	6812      	ldr	r2, [r2, #0]
 80193be:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80193c0:	697b      	ldr	r3, [r7, #20]
 80193c2:	2200      	movs	r2, #0
 80193c4:	701a      	strb	r2, [r3, #0]
 80193c6:	2200      	movs	r2, #0
 80193c8:	f042 0201 	orr.w	r2, r2, #1
 80193cc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80193ce:	697b      	ldr	r3, [r7, #20]
 80193d0:	2200      	movs	r2, #0
 80193d2:	f042 0208 	orr.w	r2, r2, #8
 80193d6:	709a      	strb	r2, [r3, #2]
 80193d8:	2200      	movs	r2, #0
 80193da:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80193dc:	697b      	ldr	r3, [r7, #20]
 80193de:	2206      	movs	r2, #6
 80193e0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80193e2:	697b      	ldr	r3, [r7, #20]
 80193e4:	2204      	movs	r2, #4
 80193e6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80193e8:	f640 0306 	movw	r3, #2054	; 0x806
 80193ec:	9300      	str	r3, [sp, #0]
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	68ba      	ldr	r2, [r7, #8]
 80193f2:	69b9      	ldr	r1, [r7, #24]
 80193f4:	68f8      	ldr	r0, [r7, #12]
 80193f6:	f001 fb6f 	bl	801aad8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80193fa:	69b8      	ldr	r0, [r7, #24]
 80193fc:	f7f8 fdb0 	bl	8011f60 <pbuf_free>
  p = NULL;
 8019400:	2300      	movs	r3, #0
 8019402:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019404:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019408:	4618      	mov	r0, r3
 801940a:	3720      	adds	r7, #32
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	0801e190 	.word	0x0801e190
 8019414:	0801e2e0 	.word	0x0801e2e0
 8019418:	0801e208 	.word	0x0801e208
 801941c:	0801e390 	.word	0x0801e390
 8019420:	0801e3c4 	.word	0x0801e3c4

08019424 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b088      	sub	sp, #32
 8019428:	af04      	add	r7, sp, #16
 801942a:	60f8      	str	r0, [r7, #12]
 801942c:	60b9      	str	r1, [r7, #8]
 801942e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019440:	2201      	movs	r2, #1
 8019442:	9203      	str	r2, [sp, #12]
 8019444:	68ba      	ldr	r2, [r7, #8]
 8019446:	9202      	str	r2, [sp, #8]
 8019448:	4a06      	ldr	r2, [pc, #24]	; (8019464 <etharp_request_dst+0x40>)
 801944a:	9201      	str	r2, [sp, #4]
 801944c:	9300      	str	r3, [sp, #0]
 801944e:	4603      	mov	r3, r0
 8019450:	687a      	ldr	r2, [r7, #4]
 8019452:	68f8      	ldr	r0, [r7, #12]
 8019454:	f7ff ff5a 	bl	801930c <etharp_raw>
 8019458:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801945a:	4618      	mov	r0, r3
 801945c:	3710      	adds	r7, #16
 801945e:	46bd      	mov	sp, r7
 8019460:	bd80      	pop	{r7, pc}
 8019462:	bf00      	nop
 8019464:	0801e9a0 	.word	0x0801e9a0

08019468 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b082      	sub	sp, #8
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
 8019470:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019472:	4a05      	ldr	r2, [pc, #20]	; (8019488 <etharp_request+0x20>)
 8019474:	6839      	ldr	r1, [r7, #0]
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	f7ff ffd4 	bl	8019424 <etharp_request_dst>
 801947c:	4603      	mov	r3, r0
}
 801947e:	4618      	mov	r0, r3
 8019480:	3708      	adds	r7, #8
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}
 8019486:	bf00      	nop
 8019488:	0801e998 	.word	0x0801e998

0801948c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b08e      	sub	sp, #56	; 0x38
 8019490:	af04      	add	r7, sp, #16
 8019492:	6078      	str	r0, [r7, #4]
 8019494:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019496:	4b79      	ldr	r3, [pc, #484]	; (801967c <icmp_input+0x1f0>)
 8019498:	689b      	ldr	r3, [r3, #8]
 801949a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801949e:	781b      	ldrb	r3, [r3, #0]
 80194a0:	f003 030f 	and.w	r3, r3, #15
 80194a4:	b2db      	uxtb	r3, r3
 80194a6:	009b      	lsls	r3, r3, #2
 80194a8:	b2db      	uxtb	r3, r3
 80194aa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80194ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80194ae:	2b13      	cmp	r3, #19
 80194b0:	f240 80cd 	bls.w	801964e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	895b      	ldrh	r3, [r3, #10]
 80194b8:	2b03      	cmp	r3, #3
 80194ba:	f240 80ca 	bls.w	8019652 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	685b      	ldr	r3, [r3, #4]
 80194c2:	781b      	ldrb	r3, [r3, #0]
 80194c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80194c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	f000 80b7 	beq.w	8019640 <icmp_input+0x1b4>
 80194d2:	2b08      	cmp	r3, #8
 80194d4:	f040 80b7 	bne.w	8019646 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80194d8:	4b69      	ldr	r3, [pc, #420]	; (8019680 <icmp_input+0x1f4>)
 80194da:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80194dc:	4b67      	ldr	r3, [pc, #412]	; (801967c <icmp_input+0x1f0>)
 80194de:	695b      	ldr	r3, [r3, #20]
 80194e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80194e4:	2be0      	cmp	r3, #224	; 0xe0
 80194e6:	f000 80bb 	beq.w	8019660 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80194ea:	4b64      	ldr	r3, [pc, #400]	; (801967c <icmp_input+0x1f0>)
 80194ec:	695a      	ldr	r2, [r3, #20]
 80194ee:	4b63      	ldr	r3, [pc, #396]	; (801967c <icmp_input+0x1f0>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	4619      	mov	r1, r3
 80194f4:	4610      	mov	r0, r2
 80194f6:	f000 fbeb 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 80194fa:	4603      	mov	r3, r0
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	f040 80b1 	bne.w	8019664 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	891b      	ldrh	r3, [r3, #8]
 8019506:	2b07      	cmp	r3, #7
 8019508:	f240 80a5 	bls.w	8019656 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801950c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801950e:	330e      	adds	r3, #14
 8019510:	4619      	mov	r1, r3
 8019512:	6878      	ldr	r0, [r7, #4]
 8019514:	f7f8 fc8e 	bl	8011e34 <pbuf_add_header>
 8019518:	4603      	mov	r3, r0
 801951a:	2b00      	cmp	r3, #0
 801951c:	d04b      	beq.n	80195b6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	891a      	ldrh	r2, [r3, #8]
 8019522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019524:	4413      	add	r3, r2
 8019526:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	891b      	ldrh	r3, [r3, #8]
 801952c:	8b7a      	ldrh	r2, [r7, #26]
 801952e:	429a      	cmp	r2, r3
 8019530:	f0c0 809a 	bcc.w	8019668 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019534:	8b7b      	ldrh	r3, [r7, #26]
 8019536:	f44f 7220 	mov.w	r2, #640	; 0x280
 801953a:	4619      	mov	r1, r3
 801953c:	200e      	movs	r0, #14
 801953e:	f7f8 fa2f 	bl	80119a0 <pbuf_alloc>
 8019542:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019544:	697b      	ldr	r3, [r7, #20]
 8019546:	2b00      	cmp	r3, #0
 8019548:	f000 8090 	beq.w	801966c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801954c:	697b      	ldr	r3, [r7, #20]
 801954e:	895b      	ldrh	r3, [r3, #10]
 8019550:	461a      	mov	r2, r3
 8019552:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019554:	3308      	adds	r3, #8
 8019556:	429a      	cmp	r2, r3
 8019558:	d203      	bcs.n	8019562 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801955a:	6978      	ldr	r0, [r7, #20]
 801955c:	f7f8 fd00 	bl	8011f60 <pbuf_free>
          goto icmperr;
 8019560:	e085      	b.n	801966e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	685b      	ldr	r3, [r3, #4]
 8019566:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801956a:	4618      	mov	r0, r3
 801956c:	f001 fc45 	bl	801adfa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019572:	4619      	mov	r1, r3
 8019574:	6978      	ldr	r0, [r7, #20]
 8019576:	f7f8 fc6d 	bl	8011e54 <pbuf_remove_header>
 801957a:	4603      	mov	r3, r0
 801957c:	2b00      	cmp	r3, #0
 801957e:	d009      	beq.n	8019594 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019580:	4b40      	ldr	r3, [pc, #256]	; (8019684 <icmp_input+0x1f8>)
 8019582:	22b6      	movs	r2, #182	; 0xb6
 8019584:	4940      	ldr	r1, [pc, #256]	; (8019688 <icmp_input+0x1fc>)
 8019586:	4841      	ldr	r0, [pc, #260]	; (801968c <icmp_input+0x200>)
 8019588:	f001 fc4a 	bl	801ae20 <iprintf>
          pbuf_free(r);
 801958c:	6978      	ldr	r0, [r7, #20]
 801958e:	f7f8 fce7 	bl	8011f60 <pbuf_free>
          goto icmperr;
 8019592:	e06c      	b.n	801966e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019594:	6879      	ldr	r1, [r7, #4]
 8019596:	6978      	ldr	r0, [r7, #20]
 8019598:	f7f8 fe16 	bl	80121c8 <pbuf_copy>
 801959c:	4603      	mov	r3, r0
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d003      	beq.n	80195aa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80195a2:	6978      	ldr	r0, [r7, #20]
 80195a4:	f7f8 fcdc 	bl	8011f60 <pbuf_free>
          goto icmperr;
 80195a8:	e061      	b.n	801966e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80195aa:	6878      	ldr	r0, [r7, #4]
 80195ac:	f7f8 fcd8 	bl	8011f60 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80195b0:	697b      	ldr	r3, [r7, #20]
 80195b2:	607b      	str	r3, [r7, #4]
 80195b4:	e00f      	b.n	80195d6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80195b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80195b8:	330e      	adds	r3, #14
 80195ba:	4619      	mov	r1, r3
 80195bc:	6878      	ldr	r0, [r7, #4]
 80195be:	f7f8 fc49 	bl	8011e54 <pbuf_remove_header>
 80195c2:	4603      	mov	r3, r0
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d006      	beq.n	80195d6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80195c8:	4b2e      	ldr	r3, [pc, #184]	; (8019684 <icmp_input+0x1f8>)
 80195ca:	22c7      	movs	r2, #199	; 0xc7
 80195cc:	4930      	ldr	r1, [pc, #192]	; (8019690 <icmp_input+0x204>)
 80195ce:	482f      	ldr	r0, [pc, #188]	; (801968c <icmp_input+0x200>)
 80195d0:	f001 fc26 	bl	801ae20 <iprintf>
          goto icmperr;
 80195d4:	e04b      	b.n	801966e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	685b      	ldr	r3, [r3, #4]
 80195da:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80195dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80195de:	4619      	mov	r1, r3
 80195e0:	6878      	ldr	r0, [r7, #4]
 80195e2:	f7f8 fc27 	bl	8011e34 <pbuf_add_header>
 80195e6:	4603      	mov	r3, r0
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d12b      	bne.n	8019644 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	685b      	ldr	r3, [r3, #4]
 80195f0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80195f2:	69fb      	ldr	r3, [r7, #28]
 80195f4:	681a      	ldr	r2, [r3, #0]
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80195fa:	4b20      	ldr	r3, [pc, #128]	; (801967c <icmp_input+0x1f0>)
 80195fc:	691a      	ldr	r2, [r3, #16]
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019602:	693b      	ldr	r3, [r7, #16]
 8019604:	2200      	movs	r2, #0
 8019606:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019608:	693b      	ldr	r3, [r7, #16]
 801960a:	2200      	movs	r2, #0
 801960c:	709a      	strb	r2, [r3, #2]
 801960e:	2200      	movs	r2, #0
 8019610:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	22ff      	movs	r2, #255	; 0xff
 8019616:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	2200      	movs	r2, #0
 801961c:	729a      	strb	r2, [r3, #10]
 801961e:	2200      	movs	r2, #0
 8019620:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	9302      	str	r3, [sp, #8]
 8019626:	2301      	movs	r3, #1
 8019628:	9301      	str	r3, [sp, #4]
 801962a:	2300      	movs	r3, #0
 801962c:	9300      	str	r3, [sp, #0]
 801962e:	23ff      	movs	r3, #255	; 0xff
 8019630:	2200      	movs	r2, #0
 8019632:	69f9      	ldr	r1, [r7, #28]
 8019634:	6878      	ldr	r0, [r7, #4]
 8019636:	f000 fa73 	bl	8019b20 <ip4_output_if>
 801963a:	4603      	mov	r3, r0
 801963c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801963e:	e001      	b.n	8019644 <icmp_input+0x1b8>
      break;
 8019640:	bf00      	nop
 8019642:	e000      	b.n	8019646 <icmp_input+0x1ba>
      break;
 8019644:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019646:	6878      	ldr	r0, [r7, #4]
 8019648:	f7f8 fc8a 	bl	8011f60 <pbuf_free>
  return;
 801964c:	e013      	b.n	8019676 <icmp_input+0x1ea>
    goto lenerr;
 801964e:	bf00      	nop
 8019650:	e002      	b.n	8019658 <icmp_input+0x1cc>
    goto lenerr;
 8019652:	bf00      	nop
 8019654:	e000      	b.n	8019658 <icmp_input+0x1cc>
        goto lenerr;
 8019656:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019658:	6878      	ldr	r0, [r7, #4]
 801965a:	f7f8 fc81 	bl	8011f60 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801965e:	e00a      	b.n	8019676 <icmp_input+0x1ea>
        goto icmperr;
 8019660:	bf00      	nop
 8019662:	e004      	b.n	801966e <icmp_input+0x1e2>
        goto icmperr;
 8019664:	bf00      	nop
 8019666:	e002      	b.n	801966e <icmp_input+0x1e2>
          goto icmperr;
 8019668:	bf00      	nop
 801966a:	e000      	b.n	801966e <icmp_input+0x1e2>
          goto icmperr;
 801966c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801966e:	6878      	ldr	r0, [r7, #4]
 8019670:	f7f8 fc76 	bl	8011f60 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019674:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019676:	3728      	adds	r7, #40	; 0x28
 8019678:	46bd      	mov	sp, r7
 801967a:	bd80      	pop	{r7, pc}
 801967c:	20007c68 	.word	0x20007c68
 8019680:	20007c7c 	.word	0x20007c7c
 8019684:	0801e408 	.word	0x0801e408
 8019688:	0801e440 	.word	0x0801e440
 801968c:	0801e478 	.word	0x0801e478
 8019690:	0801e4a0 	.word	0x0801e4a0

08019694 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b082      	sub	sp, #8
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
 801969c:	460b      	mov	r3, r1
 801969e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80196a0:	78fb      	ldrb	r3, [r7, #3]
 80196a2:	461a      	mov	r2, r3
 80196a4:	2103      	movs	r1, #3
 80196a6:	6878      	ldr	r0, [r7, #4]
 80196a8:	f000 f814 	bl	80196d4 <icmp_send_response>
}
 80196ac:	bf00      	nop
 80196ae:	3708      	adds	r7, #8
 80196b0:	46bd      	mov	sp, r7
 80196b2:	bd80      	pop	{r7, pc}

080196b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b082      	sub	sp, #8
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
 80196bc:	460b      	mov	r3, r1
 80196be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80196c0:	78fb      	ldrb	r3, [r7, #3]
 80196c2:	461a      	mov	r2, r3
 80196c4:	210b      	movs	r1, #11
 80196c6:	6878      	ldr	r0, [r7, #4]
 80196c8:	f000 f804 	bl	80196d4 <icmp_send_response>
}
 80196cc:	bf00      	nop
 80196ce:	3708      	adds	r7, #8
 80196d0:	46bd      	mov	sp, r7
 80196d2:	bd80      	pop	{r7, pc}

080196d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b08c      	sub	sp, #48	; 0x30
 80196d8:	af04      	add	r7, sp, #16
 80196da:	6078      	str	r0, [r7, #4]
 80196dc:	460b      	mov	r3, r1
 80196de:	70fb      	strb	r3, [r7, #3]
 80196e0:	4613      	mov	r3, r2
 80196e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80196e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80196e8:	2124      	movs	r1, #36	; 0x24
 80196ea:	2022      	movs	r0, #34	; 0x22
 80196ec:	f7f8 f958 	bl	80119a0 <pbuf_alloc>
 80196f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80196f2:	69fb      	ldr	r3, [r7, #28]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d04c      	beq.n	8019792 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80196f8:	69fb      	ldr	r3, [r7, #28]
 80196fa:	895b      	ldrh	r3, [r3, #10]
 80196fc:	2b23      	cmp	r3, #35	; 0x23
 80196fe:	d806      	bhi.n	801970e <icmp_send_response+0x3a>
 8019700:	4b26      	ldr	r3, [pc, #152]	; (801979c <icmp_send_response+0xc8>)
 8019702:	f240 1269 	movw	r2, #361	; 0x169
 8019706:	4926      	ldr	r1, [pc, #152]	; (80197a0 <icmp_send_response+0xcc>)
 8019708:	4826      	ldr	r0, [pc, #152]	; (80197a4 <icmp_send_response+0xd0>)
 801970a:	f001 fb89 	bl	801ae20 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019714:	69fb      	ldr	r3, [r7, #28]
 8019716:	685b      	ldr	r3, [r3, #4]
 8019718:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801971a:	697b      	ldr	r3, [r7, #20]
 801971c:	78fa      	ldrb	r2, [r7, #3]
 801971e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019720:	697b      	ldr	r3, [r7, #20]
 8019722:	78ba      	ldrb	r2, [r7, #2]
 8019724:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019726:	697b      	ldr	r3, [r7, #20]
 8019728:	2200      	movs	r2, #0
 801972a:	711a      	strb	r2, [r3, #4]
 801972c:	2200      	movs	r2, #0
 801972e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019730:	697b      	ldr	r3, [r7, #20]
 8019732:	2200      	movs	r2, #0
 8019734:	719a      	strb	r2, [r3, #6]
 8019736:	2200      	movs	r2, #0
 8019738:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801973a:	69fb      	ldr	r3, [r7, #28]
 801973c:	685b      	ldr	r3, [r3, #4]
 801973e:	f103 0008 	add.w	r0, r3, #8
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	685b      	ldr	r3, [r3, #4]
 8019746:	221c      	movs	r2, #28
 8019748:	4619      	mov	r1, r3
 801974a:	f001 fb56 	bl	801adfa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801974e:	69bb      	ldr	r3, [r7, #24]
 8019750:	68db      	ldr	r3, [r3, #12]
 8019752:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019754:	f107 030c 	add.w	r3, r7, #12
 8019758:	4618      	mov	r0, r3
 801975a:	f000 f825 	bl	80197a8 <ip4_route>
 801975e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019760:	693b      	ldr	r3, [r7, #16]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d011      	beq.n	801978a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019766:	697b      	ldr	r3, [r7, #20]
 8019768:	2200      	movs	r2, #0
 801976a:	709a      	strb	r2, [r3, #2]
 801976c:	2200      	movs	r2, #0
 801976e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019770:	f107 020c 	add.w	r2, r7, #12
 8019774:	693b      	ldr	r3, [r7, #16]
 8019776:	9302      	str	r3, [sp, #8]
 8019778:	2301      	movs	r3, #1
 801977a:	9301      	str	r3, [sp, #4]
 801977c:	2300      	movs	r3, #0
 801977e:	9300      	str	r3, [sp, #0]
 8019780:	23ff      	movs	r3, #255	; 0xff
 8019782:	2100      	movs	r1, #0
 8019784:	69f8      	ldr	r0, [r7, #28]
 8019786:	f000 f9cb 	bl	8019b20 <ip4_output_if>
  }
  pbuf_free(q);
 801978a:	69f8      	ldr	r0, [r7, #28]
 801978c:	f7f8 fbe8 	bl	8011f60 <pbuf_free>
 8019790:	e000      	b.n	8019794 <icmp_send_response+0xc0>
    return;
 8019792:	bf00      	nop
}
 8019794:	3720      	adds	r7, #32
 8019796:	46bd      	mov	sp, r7
 8019798:	bd80      	pop	{r7, pc}
 801979a:	bf00      	nop
 801979c:	0801e408 	.word	0x0801e408
 80197a0:	0801e4d4 	.word	0x0801e4d4
 80197a4:	0801e478 	.word	0x0801e478

080197a8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80197a8:	b480      	push	{r7}
 80197aa:	b085      	sub	sp, #20
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80197b0:	4b33      	ldr	r3, [pc, #204]	; (8019880 <ip4_route+0xd8>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	60fb      	str	r3, [r7, #12]
 80197b6:	e036      	b.n	8019826 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197be:	f003 0301 	and.w	r3, r3, #1
 80197c2:	b2db      	uxtb	r3, r3
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d02b      	beq.n	8019820 <ip4_route+0x78>
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80197ce:	089b      	lsrs	r3, r3, #2
 80197d0:	f003 0301 	and.w	r3, r3, #1
 80197d4:	b2db      	uxtb	r3, r3
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d022      	beq.n	8019820 <ip4_route+0x78>
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	3304      	adds	r3, #4
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d01d      	beq.n	8019820 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681a      	ldr	r2, [r3, #0]
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	3304      	adds	r3, #4
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	405a      	eors	r2, r3
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	3308      	adds	r3, #8
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	4013      	ands	r3, r2
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d101      	bne.n	8019800 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	e038      	b.n	8019872 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019806:	f003 0302 	and.w	r3, r3, #2
 801980a:	2b00      	cmp	r3, #0
 801980c:	d108      	bne.n	8019820 <ip4_route+0x78>
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	681a      	ldr	r2, [r3, #0]
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	330c      	adds	r3, #12
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	429a      	cmp	r2, r3
 801981a:	d101      	bne.n	8019820 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	e028      	b.n	8019872 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	60fb      	str	r3, [r7, #12]
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d1c5      	bne.n	80197b8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801982c:	4b15      	ldr	r3, [pc, #84]	; (8019884 <ip4_route+0xdc>)
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d01a      	beq.n	801986a <ip4_route+0xc2>
 8019834:	4b13      	ldr	r3, [pc, #76]	; (8019884 <ip4_route+0xdc>)
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801983c:	f003 0301 	and.w	r3, r3, #1
 8019840:	2b00      	cmp	r3, #0
 8019842:	d012      	beq.n	801986a <ip4_route+0xc2>
 8019844:	4b0f      	ldr	r3, [pc, #60]	; (8019884 <ip4_route+0xdc>)
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801984c:	f003 0304 	and.w	r3, r3, #4
 8019850:	2b00      	cmp	r3, #0
 8019852:	d00a      	beq.n	801986a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019854:	4b0b      	ldr	r3, [pc, #44]	; (8019884 <ip4_route+0xdc>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	3304      	adds	r3, #4
 801985a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801985c:	2b00      	cmp	r3, #0
 801985e:	d004      	beq.n	801986a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	b2db      	uxtb	r3, r3
 8019866:	2b7f      	cmp	r3, #127	; 0x7f
 8019868:	d101      	bne.n	801986e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801986a:	2300      	movs	r3, #0
 801986c:	e001      	b.n	8019872 <ip4_route+0xca>
  }

  return netif_default;
 801986e:	4b05      	ldr	r3, [pc, #20]	; (8019884 <ip4_route+0xdc>)
 8019870:	681b      	ldr	r3, [r3, #0]
}
 8019872:	4618      	mov	r0, r3
 8019874:	3714      	adds	r7, #20
 8019876:	46bd      	mov	sp, r7
 8019878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801987c:	4770      	bx	lr
 801987e:	bf00      	nop
 8019880:	2000b4b4 	.word	0x2000b4b4
 8019884:	2000b4b8 	.word	0x2000b4b8

08019888 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019888:	b580      	push	{r7, lr}
 801988a:	b082      	sub	sp, #8
 801988c:	af00      	add	r7, sp, #0
 801988e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019896:	f003 0301 	and.w	r3, r3, #1
 801989a:	b2db      	uxtb	r3, r3
 801989c:	2b00      	cmp	r3, #0
 801989e:	d016      	beq.n	80198ce <ip4_input_accept+0x46>
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	3304      	adds	r3, #4
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d011      	beq.n	80198ce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80198aa:	4b0b      	ldr	r3, [pc, #44]	; (80198d8 <ip4_input_accept+0x50>)
 80198ac:	695a      	ldr	r2, [r3, #20]
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	3304      	adds	r3, #4
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	429a      	cmp	r2, r3
 80198b6:	d008      	beq.n	80198ca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80198b8:	4b07      	ldr	r3, [pc, #28]	; (80198d8 <ip4_input_accept+0x50>)
 80198ba:	695b      	ldr	r3, [r3, #20]
 80198bc:	6879      	ldr	r1, [r7, #4]
 80198be:	4618      	mov	r0, r3
 80198c0:	f000 fa06 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 80198c4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d001      	beq.n	80198ce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80198ca:	2301      	movs	r3, #1
 80198cc:	e000      	b.n	80198d0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80198ce:	2300      	movs	r3, #0
}
 80198d0:	4618      	mov	r0, r3
 80198d2:	3708      	adds	r7, #8
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}
 80198d8:	20007c68 	.word	0x20007c68

080198dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80198dc:	b580      	push	{r7, lr}
 80198de:	b086      	sub	sp, #24
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	6078      	str	r0, [r7, #4]
 80198e4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	685b      	ldr	r3, [r3, #4]
 80198ea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80198ec:	697b      	ldr	r3, [r7, #20]
 80198ee:	781b      	ldrb	r3, [r3, #0]
 80198f0:	091b      	lsrs	r3, r3, #4
 80198f2:	b2db      	uxtb	r3, r3
 80198f4:	2b04      	cmp	r3, #4
 80198f6:	d004      	beq.n	8019902 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80198f8:	6878      	ldr	r0, [r7, #4]
 80198fa:	f7f8 fb31 	bl	8011f60 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80198fe:	2300      	movs	r3, #0
 8019900:	e105      	b.n	8019b0e <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019902:	697b      	ldr	r3, [r7, #20]
 8019904:	781b      	ldrb	r3, [r3, #0]
 8019906:	f003 030f 	and.w	r3, r3, #15
 801990a:	b2db      	uxtb	r3, r3
 801990c:	009b      	lsls	r3, r3, #2
 801990e:	b2db      	uxtb	r3, r3
 8019910:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	885b      	ldrh	r3, [r3, #2]
 8019916:	b29b      	uxth	r3, r3
 8019918:	4618      	mov	r0, r3
 801991a:	f7f6 fd25 	bl	8010368 <lwip_htons>
 801991e:	4603      	mov	r3, r0
 8019920:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	891b      	ldrh	r3, [r3, #8]
 8019926:	89ba      	ldrh	r2, [r7, #12]
 8019928:	429a      	cmp	r2, r3
 801992a:	d204      	bcs.n	8019936 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801992c:	89bb      	ldrh	r3, [r7, #12]
 801992e:	4619      	mov	r1, r3
 8019930:	6878      	ldr	r0, [r7, #4]
 8019932:	f7f8 f98f 	bl	8011c54 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	895b      	ldrh	r3, [r3, #10]
 801993a:	89fa      	ldrh	r2, [r7, #14]
 801993c:	429a      	cmp	r2, r3
 801993e:	d807      	bhi.n	8019950 <ip4_input+0x74>
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	891b      	ldrh	r3, [r3, #8]
 8019944:	89ba      	ldrh	r2, [r7, #12]
 8019946:	429a      	cmp	r2, r3
 8019948:	d802      	bhi.n	8019950 <ip4_input+0x74>
 801994a:	89fb      	ldrh	r3, [r7, #14]
 801994c:	2b13      	cmp	r3, #19
 801994e:	d804      	bhi.n	801995a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019950:	6878      	ldr	r0, [r7, #4]
 8019952:	f7f8 fb05 	bl	8011f60 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019956:	2300      	movs	r3, #0
 8019958:	e0d9      	b.n	8019b0e <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801995a:	697b      	ldr	r3, [r7, #20]
 801995c:	691b      	ldr	r3, [r3, #16]
 801995e:	4a6e      	ldr	r2, [pc, #440]	; (8019b18 <ip4_input+0x23c>)
 8019960:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019962:	697b      	ldr	r3, [r7, #20]
 8019964:	68db      	ldr	r3, [r3, #12]
 8019966:	4a6c      	ldr	r2, [pc, #432]	; (8019b18 <ip4_input+0x23c>)
 8019968:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801996a:	4b6b      	ldr	r3, [pc, #428]	; (8019b18 <ip4_input+0x23c>)
 801996c:	695b      	ldr	r3, [r3, #20]
 801996e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019972:	2be0      	cmp	r3, #224	; 0xe0
 8019974:	d112      	bne.n	801999c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019976:	683b      	ldr	r3, [r7, #0]
 8019978:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801997c:	f003 0301 	and.w	r3, r3, #1
 8019980:	b2db      	uxtb	r3, r3
 8019982:	2b00      	cmp	r3, #0
 8019984:	d007      	beq.n	8019996 <ip4_input+0xba>
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	3304      	adds	r3, #4
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d002      	beq.n	8019996 <ip4_input+0xba>
      netif = inp;
 8019990:	683b      	ldr	r3, [r7, #0]
 8019992:	613b      	str	r3, [r7, #16]
 8019994:	e02a      	b.n	80199ec <ip4_input+0x110>
    } else {
      netif = NULL;
 8019996:	2300      	movs	r3, #0
 8019998:	613b      	str	r3, [r7, #16]
 801999a:	e027      	b.n	80199ec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801999c:	6838      	ldr	r0, [r7, #0]
 801999e:	f7ff ff73 	bl	8019888 <ip4_input_accept>
 80199a2:	4603      	mov	r3, r0
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d002      	beq.n	80199ae <ip4_input+0xd2>
      netif = inp;
 80199a8:	683b      	ldr	r3, [r7, #0]
 80199aa:	613b      	str	r3, [r7, #16]
 80199ac:	e01e      	b.n	80199ec <ip4_input+0x110>
    } else {
      netif = NULL;
 80199ae:	2300      	movs	r3, #0
 80199b0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80199b2:	4b59      	ldr	r3, [pc, #356]	; (8019b18 <ip4_input+0x23c>)
 80199b4:	695b      	ldr	r3, [r3, #20]
 80199b6:	b2db      	uxtb	r3, r3
 80199b8:	2b7f      	cmp	r3, #127	; 0x7f
 80199ba:	d017      	beq.n	80199ec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80199bc:	4b57      	ldr	r3, [pc, #348]	; (8019b1c <ip4_input+0x240>)
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	613b      	str	r3, [r7, #16]
 80199c2:	e00e      	b.n	80199e2 <ip4_input+0x106>
          if (netif == inp) {
 80199c4:	693a      	ldr	r2, [r7, #16]
 80199c6:	683b      	ldr	r3, [r7, #0]
 80199c8:	429a      	cmp	r2, r3
 80199ca:	d006      	beq.n	80199da <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80199cc:	6938      	ldr	r0, [r7, #16]
 80199ce:	f7ff ff5b 	bl	8019888 <ip4_input_accept>
 80199d2:	4603      	mov	r3, r0
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d108      	bne.n	80199ea <ip4_input+0x10e>
 80199d8:	e000      	b.n	80199dc <ip4_input+0x100>
            continue;
 80199da:	bf00      	nop
        NETIF_FOREACH(netif) {
 80199dc:	693b      	ldr	r3, [r7, #16]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	613b      	str	r3, [r7, #16]
 80199e2:	693b      	ldr	r3, [r7, #16]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d1ed      	bne.n	80199c4 <ip4_input+0xe8>
 80199e8:	e000      	b.n	80199ec <ip4_input+0x110>
            break;
 80199ea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80199ec:	4b4a      	ldr	r3, [pc, #296]	; (8019b18 <ip4_input+0x23c>)
 80199ee:	691b      	ldr	r3, [r3, #16]
 80199f0:	6839      	ldr	r1, [r7, #0]
 80199f2:	4618      	mov	r0, r3
 80199f4:	f000 f96c 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 80199f8:	4603      	mov	r3, r0
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d105      	bne.n	8019a0a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80199fe:	4b46      	ldr	r3, [pc, #280]	; (8019b18 <ip4_input+0x23c>)
 8019a00:	691b      	ldr	r3, [r3, #16]
 8019a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019a06:	2be0      	cmp	r3, #224	; 0xe0
 8019a08:	d104      	bne.n	8019a14 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019a0a:	6878      	ldr	r0, [r7, #4]
 8019a0c:	f7f8 faa8 	bl	8011f60 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019a10:	2300      	movs	r3, #0
 8019a12:	e07c      	b.n	8019b0e <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019a14:	693b      	ldr	r3, [r7, #16]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d104      	bne.n	8019a24 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019a1a:	6878      	ldr	r0, [r7, #4]
 8019a1c:	f7f8 faa0 	bl	8011f60 <pbuf_free>
    return ERR_OK;
 8019a20:	2300      	movs	r3, #0
 8019a22:	e074      	b.n	8019b0e <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019a24:	697b      	ldr	r3, [r7, #20]
 8019a26:	88db      	ldrh	r3, [r3, #6]
 8019a28:	b29b      	uxth	r3, r3
 8019a2a:	461a      	mov	r2, r3
 8019a2c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019a30:	4013      	ands	r3, r2
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d00b      	beq.n	8019a4e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019a36:	6878      	ldr	r0, [r7, #4]
 8019a38:	f000 fc90 	bl	801a35c <ip4_reass>
 8019a3c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d101      	bne.n	8019a48 <ip4_input+0x16c>
      return ERR_OK;
 8019a44:	2300      	movs	r3, #0
 8019a46:	e062      	b.n	8019b0e <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	685b      	ldr	r3, [r3, #4]
 8019a4c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019a4e:	4a32      	ldr	r2, [pc, #200]	; (8019b18 <ip4_input+0x23c>)
 8019a50:	693b      	ldr	r3, [r7, #16]
 8019a52:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019a54:	4a30      	ldr	r2, [pc, #192]	; (8019b18 <ip4_input+0x23c>)
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019a5a:	4a2f      	ldr	r2, [pc, #188]	; (8019b18 <ip4_input+0x23c>)
 8019a5c:	697b      	ldr	r3, [r7, #20]
 8019a5e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019a60:	697b      	ldr	r3, [r7, #20]
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	f003 030f 	and.w	r3, r3, #15
 8019a68:	b2db      	uxtb	r3, r3
 8019a6a:	009b      	lsls	r3, r3, #2
 8019a6c:	b2db      	uxtb	r3, r3
 8019a6e:	b29a      	uxth	r2, r3
 8019a70:	4b29      	ldr	r3, [pc, #164]	; (8019b18 <ip4_input+0x23c>)
 8019a72:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019a74:	89fb      	ldrh	r3, [r7, #14]
 8019a76:	4619      	mov	r1, r3
 8019a78:	6878      	ldr	r0, [r7, #4]
 8019a7a:	f7f8 f9eb 	bl	8011e54 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019a7e:	697b      	ldr	r3, [r7, #20]
 8019a80:	7a5b      	ldrb	r3, [r3, #9]
 8019a82:	2b06      	cmp	r3, #6
 8019a84:	d009      	beq.n	8019a9a <ip4_input+0x1be>
 8019a86:	2b11      	cmp	r3, #17
 8019a88:	d002      	beq.n	8019a90 <ip4_input+0x1b4>
 8019a8a:	2b01      	cmp	r3, #1
 8019a8c:	d00a      	beq.n	8019aa4 <ip4_input+0x1c8>
 8019a8e:	e00e      	b.n	8019aae <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019a90:	6839      	ldr	r1, [r7, #0]
 8019a92:	6878      	ldr	r0, [r7, #4]
 8019a94:	f7fe f9ea 	bl	8017e6c <udp_input>
        break;
 8019a98:	e026      	b.n	8019ae8 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019a9a:	6839      	ldr	r1, [r7, #0]
 8019a9c:	6878      	ldr	r0, [r7, #4]
 8019a9e:	f7fa f9f1 	bl	8013e84 <tcp_input>
        break;
 8019aa2:	e021      	b.n	8019ae8 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019aa4:	6839      	ldr	r1, [r7, #0]
 8019aa6:	6878      	ldr	r0, [r7, #4]
 8019aa8:	f7ff fcf0 	bl	801948c <icmp_input>
        break;
 8019aac:	e01c      	b.n	8019ae8 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019aae:	4b1a      	ldr	r3, [pc, #104]	; (8019b18 <ip4_input+0x23c>)
 8019ab0:	695b      	ldr	r3, [r3, #20]
 8019ab2:	6939      	ldr	r1, [r7, #16]
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f000 f90b 	bl	8019cd0 <ip4_addr_isbroadcast_u32>
 8019aba:	4603      	mov	r3, r0
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d10f      	bne.n	8019ae0 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019ac0:	4b15      	ldr	r3, [pc, #84]	; (8019b18 <ip4_input+0x23c>)
 8019ac2:	695b      	ldr	r3, [r3, #20]
 8019ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019ac8:	2be0      	cmp	r3, #224	; 0xe0
 8019aca:	d009      	beq.n	8019ae0 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019ad0:	4619      	mov	r1, r3
 8019ad2:	6878      	ldr	r0, [r7, #4]
 8019ad4:	f7f8 fa31 	bl	8011f3a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019ad8:	2102      	movs	r1, #2
 8019ada:	6878      	ldr	r0, [r7, #4]
 8019adc:	f7ff fdda 	bl	8019694 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	f7f8 fa3d 	bl	8011f60 <pbuf_free>
        break;
 8019ae6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019ae8:	4b0b      	ldr	r3, [pc, #44]	; (8019b18 <ip4_input+0x23c>)
 8019aea:	2200      	movs	r2, #0
 8019aec:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019aee:	4b0a      	ldr	r3, [pc, #40]	; (8019b18 <ip4_input+0x23c>)
 8019af0:	2200      	movs	r2, #0
 8019af2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019af4:	4b08      	ldr	r3, [pc, #32]	; (8019b18 <ip4_input+0x23c>)
 8019af6:	2200      	movs	r2, #0
 8019af8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019afa:	4b07      	ldr	r3, [pc, #28]	; (8019b18 <ip4_input+0x23c>)
 8019afc:	2200      	movs	r2, #0
 8019afe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019b00:	4b05      	ldr	r3, [pc, #20]	; (8019b18 <ip4_input+0x23c>)
 8019b02:	2200      	movs	r2, #0
 8019b04:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019b06:	4b04      	ldr	r3, [pc, #16]	; (8019b18 <ip4_input+0x23c>)
 8019b08:	2200      	movs	r2, #0
 8019b0a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019b0c:	2300      	movs	r3, #0
}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	3718      	adds	r7, #24
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}
 8019b16:	bf00      	nop
 8019b18:	20007c68 	.word	0x20007c68
 8019b1c:	2000b4b4 	.word	0x2000b4b4

08019b20 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b08a      	sub	sp, #40	; 0x28
 8019b24:	af04      	add	r7, sp, #16
 8019b26:	60f8      	str	r0, [r7, #12]
 8019b28:	60b9      	str	r1, [r7, #8]
 8019b2a:	607a      	str	r2, [r7, #4]
 8019b2c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019b2e:	68bb      	ldr	r3, [r7, #8]
 8019b30:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d009      	beq.n	8019b4c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019b38:	68bb      	ldr	r3, [r7, #8]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d003      	beq.n	8019b46 <ip4_output_if+0x26>
 8019b3e:	68bb      	ldr	r3, [r7, #8]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d102      	bne.n	8019b4c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b48:	3304      	adds	r3, #4
 8019b4a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019b4c:	78fa      	ldrb	r2, [r7, #3]
 8019b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b50:	9302      	str	r3, [sp, #8]
 8019b52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b56:	9301      	str	r3, [sp, #4]
 8019b58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019b5c:	9300      	str	r3, [sp, #0]
 8019b5e:	4613      	mov	r3, r2
 8019b60:	687a      	ldr	r2, [r7, #4]
 8019b62:	6979      	ldr	r1, [r7, #20]
 8019b64:	68f8      	ldr	r0, [r7, #12]
 8019b66:	f000 f805 	bl	8019b74 <ip4_output_if_src>
 8019b6a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3718      	adds	r7, #24
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}

08019b74 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b088      	sub	sp, #32
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	60f8      	str	r0, [r7, #12]
 8019b7c:	60b9      	str	r1, [r7, #8]
 8019b7e:	607a      	str	r2, [r7, #4]
 8019b80:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	7b9b      	ldrb	r3, [r3, #14]
 8019b86:	2b01      	cmp	r3, #1
 8019b88:	d006      	beq.n	8019b98 <ip4_output_if_src+0x24>
 8019b8a:	4b4b      	ldr	r3, [pc, #300]	; (8019cb8 <ip4_output_if_src+0x144>)
 8019b8c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019b90:	494a      	ldr	r1, [pc, #296]	; (8019cbc <ip4_output_if_src+0x148>)
 8019b92:	484b      	ldr	r0, [pc, #300]	; (8019cc0 <ip4_output_if_src+0x14c>)
 8019b94:	f001 f944 	bl	801ae20 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d060      	beq.n	8019c60 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019b9e:	2314      	movs	r3, #20
 8019ba0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019ba2:	2114      	movs	r1, #20
 8019ba4:	68f8      	ldr	r0, [r7, #12]
 8019ba6:	f7f8 f945 	bl	8011e34 <pbuf_add_header>
 8019baa:	4603      	mov	r3, r0
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d002      	beq.n	8019bb6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019bb0:	f06f 0301 	mvn.w	r3, #1
 8019bb4:	e07c      	b.n	8019cb0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	685b      	ldr	r3, [r3, #4]
 8019bba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019bbc:	68fb      	ldr	r3, [r7, #12]
 8019bbe:	895b      	ldrh	r3, [r3, #10]
 8019bc0:	2b13      	cmp	r3, #19
 8019bc2:	d806      	bhi.n	8019bd2 <ip4_output_if_src+0x5e>
 8019bc4:	4b3c      	ldr	r3, [pc, #240]	; (8019cb8 <ip4_output_if_src+0x144>)
 8019bc6:	f240 3289 	movw	r2, #905	; 0x389
 8019bca:	493e      	ldr	r1, [pc, #248]	; (8019cc4 <ip4_output_if_src+0x150>)
 8019bcc:	483c      	ldr	r0, [pc, #240]	; (8019cc0 <ip4_output_if_src+0x14c>)
 8019bce:	f001 f927 	bl	801ae20 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019bd2:	69fb      	ldr	r3, [r7, #28]
 8019bd4:	78fa      	ldrb	r2, [r7, #3]
 8019bd6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019bd8:	69fb      	ldr	r3, [r7, #28]
 8019bda:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019bde:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	681a      	ldr	r2, [r3, #0]
 8019be4:	69fb      	ldr	r3, [r7, #28]
 8019be6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019be8:	8b7b      	ldrh	r3, [r7, #26]
 8019bea:	089b      	lsrs	r3, r3, #2
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	b2db      	uxtb	r3, r3
 8019bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019bf4:	b2da      	uxtb	r2, r3
 8019bf6:	69fb      	ldr	r3, [r7, #28]
 8019bf8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019bfa:	69fb      	ldr	r3, [r7, #28]
 8019bfc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019c00:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	891b      	ldrh	r3, [r3, #8]
 8019c06:	4618      	mov	r0, r3
 8019c08:	f7f6 fbae 	bl	8010368 <lwip_htons>
 8019c0c:	4603      	mov	r3, r0
 8019c0e:	461a      	mov	r2, r3
 8019c10:	69fb      	ldr	r3, [r7, #28]
 8019c12:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019c14:	69fb      	ldr	r3, [r7, #28]
 8019c16:	2200      	movs	r2, #0
 8019c18:	719a      	strb	r2, [r3, #6]
 8019c1a:	2200      	movs	r2, #0
 8019c1c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019c1e:	4b2a      	ldr	r3, [pc, #168]	; (8019cc8 <ip4_output_if_src+0x154>)
 8019c20:	881b      	ldrh	r3, [r3, #0]
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7f6 fba0 	bl	8010368 <lwip_htons>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	461a      	mov	r2, r3
 8019c2c:	69fb      	ldr	r3, [r7, #28]
 8019c2e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019c30:	4b25      	ldr	r3, [pc, #148]	; (8019cc8 <ip4_output_if_src+0x154>)
 8019c32:	881b      	ldrh	r3, [r3, #0]
 8019c34:	3301      	adds	r3, #1
 8019c36:	b29a      	uxth	r2, r3
 8019c38:	4b23      	ldr	r3, [pc, #140]	; (8019cc8 <ip4_output_if_src+0x154>)
 8019c3a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d104      	bne.n	8019c4c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019c42:	4b22      	ldr	r3, [pc, #136]	; (8019ccc <ip4_output_if_src+0x158>)
 8019c44:	681a      	ldr	r2, [r3, #0]
 8019c46:	69fb      	ldr	r3, [r7, #28]
 8019c48:	60da      	str	r2, [r3, #12]
 8019c4a:	e003      	b.n	8019c54 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019c4c:	68bb      	ldr	r3, [r7, #8]
 8019c4e:	681a      	ldr	r2, [r3, #0]
 8019c50:	69fb      	ldr	r3, [r7, #28]
 8019c52:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019c54:	69fb      	ldr	r3, [r7, #28]
 8019c56:	2200      	movs	r2, #0
 8019c58:	729a      	strb	r2, [r3, #10]
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	72da      	strb	r2, [r3, #11]
 8019c5e:	e00f      	b.n	8019c80 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	895b      	ldrh	r3, [r3, #10]
 8019c64:	2b13      	cmp	r3, #19
 8019c66:	d802      	bhi.n	8019c6e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019c68:	f06f 0301 	mvn.w	r3, #1
 8019c6c:	e020      	b.n	8019cb0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	685b      	ldr	r3, [r3, #4]
 8019c72:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019c74:	69fb      	ldr	r3, [r7, #28]
 8019c76:	691b      	ldr	r3, [r3, #16]
 8019c78:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019c7a:	f107 0314 	add.w	r3, r7, #20
 8019c7e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c82:	8c1b      	ldrh	r3, [r3, #32]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d00c      	beq.n	8019ca2 <ip4_output_if_src+0x12e>
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	891a      	ldrh	r2, [r3, #8]
 8019c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c8e:	8c1b      	ldrh	r3, [r3, #32]
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d906      	bls.n	8019ca2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019c94:	687a      	ldr	r2, [r7, #4]
 8019c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019c98:	68f8      	ldr	r0, [r7, #12]
 8019c9a:	f000 fd4b 	bl	801a734 <ip4_frag>
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	e006      	b.n	8019cb0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ca4:	695b      	ldr	r3, [r3, #20]
 8019ca6:	687a      	ldr	r2, [r7, #4]
 8019ca8:	68f9      	ldr	r1, [r7, #12]
 8019caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019cac:	4798      	blx	r3
 8019cae:	4603      	mov	r3, r0
}
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	3720      	adds	r7, #32
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	bd80      	pop	{r7, pc}
 8019cb8:	0801e500 	.word	0x0801e500
 8019cbc:	0801e534 	.word	0x0801e534
 8019cc0:	0801e540 	.word	0x0801e540
 8019cc4:	0801e568 	.word	0x0801e568
 8019cc8:	20004696 	.word	0x20004696
 8019ccc:	0801e994 	.word	0x0801e994

08019cd0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019cd0:	b480      	push	{r7}
 8019cd2:	b085      	sub	sp, #20
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
 8019cd8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019ce4:	d002      	beq.n	8019cec <ip4_addr_isbroadcast_u32+0x1c>
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d101      	bne.n	8019cf0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019cec:	2301      	movs	r3, #1
 8019cee:	e02a      	b.n	8019d46 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019cf0:	683b      	ldr	r3, [r7, #0]
 8019cf2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8019cf6:	f003 0302 	and.w	r3, r3, #2
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d101      	bne.n	8019d02 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019cfe:	2300      	movs	r3, #0
 8019d00:	e021      	b.n	8019d46 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019d02:	683b      	ldr	r3, [r7, #0]
 8019d04:	3304      	adds	r3, #4
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	687a      	ldr	r2, [r7, #4]
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d101      	bne.n	8019d12 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019d0e:	2300      	movs	r3, #0
 8019d10:	e019      	b.n	8019d46 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019d12:	68fa      	ldr	r2, [r7, #12]
 8019d14:	683b      	ldr	r3, [r7, #0]
 8019d16:	3304      	adds	r3, #4
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	405a      	eors	r2, r3
 8019d1c:	683b      	ldr	r3, [r7, #0]
 8019d1e:	3308      	adds	r3, #8
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	4013      	ands	r3, r2
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d10d      	bne.n	8019d44 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	3308      	adds	r3, #8
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	43da      	mvns	r2, r3
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	3308      	adds	r3, #8
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	d101      	bne.n	8019d44 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019d40:	2301      	movs	r3, #1
 8019d42:	e000      	b.n	8019d46 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019d44:	2300      	movs	r3, #0
  }
}
 8019d46:	4618      	mov	r0, r3
 8019d48:	3714      	adds	r7, #20
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d50:	4770      	bx	lr
	...

08019d54 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	b084      	sub	sp, #16
 8019d58:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019d5a:	2300      	movs	r3, #0
 8019d5c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019d5e:	4b12      	ldr	r3, [pc, #72]	; (8019da8 <ip_reass_tmr+0x54>)
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019d64:	e018      	b.n	8019d98 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	7fdb      	ldrb	r3, [r3, #31]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d00b      	beq.n	8019d86 <ip_reass_tmr+0x32>
      r->timer--;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	7fdb      	ldrb	r3, [r3, #31]
 8019d72:	3b01      	subs	r3, #1
 8019d74:	b2da      	uxtb	r2, r3
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	60fb      	str	r3, [r7, #12]
 8019d84:	e008      	b.n	8019d98 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019d90:	68b9      	ldr	r1, [r7, #8]
 8019d92:	6878      	ldr	r0, [r7, #4]
 8019d94:	f000 f80a 	bl	8019dac <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d1e3      	bne.n	8019d66 <ip_reass_tmr+0x12>
    }
  }
}
 8019d9e:	bf00      	nop
 8019da0:	3710      	adds	r7, #16
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	bf00      	nop
 8019da8:	20004698 	.word	0x20004698

08019dac <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b088      	sub	sp, #32
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	6078      	str	r0, [r7, #4]
 8019db4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019db6:	2300      	movs	r3, #0
 8019db8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019dba:	683a      	ldr	r2, [r7, #0]
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	429a      	cmp	r2, r3
 8019dc0:	d105      	bne.n	8019dce <ip_reass_free_complete_datagram+0x22>
 8019dc2:	4b45      	ldr	r3, [pc, #276]	; (8019ed8 <ip_reass_free_complete_datagram+0x12c>)
 8019dc4:	22ab      	movs	r2, #171	; 0xab
 8019dc6:	4945      	ldr	r1, [pc, #276]	; (8019edc <ip_reass_free_complete_datagram+0x130>)
 8019dc8:	4845      	ldr	r0, [pc, #276]	; (8019ee0 <ip_reass_free_complete_datagram+0x134>)
 8019dca:	f001 f829 	bl	801ae20 <iprintf>
  if (prev != NULL) {
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d00a      	beq.n	8019dea <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019dd4:	683b      	ldr	r3, [r7, #0]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	687a      	ldr	r2, [r7, #4]
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	d005      	beq.n	8019dea <ip_reass_free_complete_datagram+0x3e>
 8019dde:	4b3e      	ldr	r3, [pc, #248]	; (8019ed8 <ip_reass_free_complete_datagram+0x12c>)
 8019de0:	22ad      	movs	r2, #173	; 0xad
 8019de2:	4940      	ldr	r1, [pc, #256]	; (8019ee4 <ip_reass_free_complete_datagram+0x138>)
 8019de4:	483e      	ldr	r0, [pc, #248]	; (8019ee0 <ip_reass_free_complete_datagram+0x134>)
 8019de6:	f001 f81b 	bl	801ae20 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	685b      	ldr	r3, [r3, #4]
 8019dee:	685b      	ldr	r3, [r3, #4]
 8019df0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	889b      	ldrh	r3, [r3, #4]
 8019df6:	b29b      	uxth	r3, r3
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d12a      	bne.n	8019e52 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	685b      	ldr	r3, [r3, #4]
 8019e00:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019e02:	697b      	ldr	r3, [r7, #20]
 8019e04:	681a      	ldr	r2, [r3, #0]
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019e0a:	69bb      	ldr	r3, [r7, #24]
 8019e0c:	6858      	ldr	r0, [r3, #4]
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	3308      	adds	r3, #8
 8019e12:	2214      	movs	r2, #20
 8019e14:	4619      	mov	r1, r3
 8019e16:	f000 fff0 	bl	801adfa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019e1a:	2101      	movs	r1, #1
 8019e1c:	69b8      	ldr	r0, [r7, #24]
 8019e1e:	f7ff fc49 	bl	80196b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019e22:	69b8      	ldr	r0, [r7, #24]
 8019e24:	f7f8 f92a 	bl	801207c <pbuf_clen>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019e2c:	8bfa      	ldrh	r2, [r7, #30]
 8019e2e:	8a7b      	ldrh	r3, [r7, #18]
 8019e30:	4413      	add	r3, r2
 8019e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019e36:	db05      	blt.n	8019e44 <ip_reass_free_complete_datagram+0x98>
 8019e38:	4b27      	ldr	r3, [pc, #156]	; (8019ed8 <ip_reass_free_complete_datagram+0x12c>)
 8019e3a:	22bc      	movs	r2, #188	; 0xbc
 8019e3c:	492a      	ldr	r1, [pc, #168]	; (8019ee8 <ip_reass_free_complete_datagram+0x13c>)
 8019e3e:	4828      	ldr	r0, [pc, #160]	; (8019ee0 <ip_reass_free_complete_datagram+0x134>)
 8019e40:	f000 ffee 	bl	801ae20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019e44:	8bfa      	ldrh	r2, [r7, #30]
 8019e46:	8a7b      	ldrh	r3, [r7, #18]
 8019e48:	4413      	add	r3, r2
 8019e4a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019e4c:	69b8      	ldr	r0, [r7, #24]
 8019e4e:	f7f8 f887 	bl	8011f60 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	685b      	ldr	r3, [r3, #4]
 8019e56:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019e58:	e01f      	b.n	8019e9a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019e5a:	69bb      	ldr	r3, [r7, #24]
 8019e5c:	685b      	ldr	r3, [r3, #4]
 8019e5e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019e60:	69bb      	ldr	r3, [r7, #24]
 8019e62:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019e64:	697b      	ldr	r3, [r7, #20]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019e6a:	68f8      	ldr	r0, [r7, #12]
 8019e6c:	f7f8 f906 	bl	801207c <pbuf_clen>
 8019e70:	4603      	mov	r3, r0
 8019e72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019e74:	8bfa      	ldrh	r2, [r7, #30]
 8019e76:	8a7b      	ldrh	r3, [r7, #18]
 8019e78:	4413      	add	r3, r2
 8019e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019e7e:	db05      	blt.n	8019e8c <ip_reass_free_complete_datagram+0xe0>
 8019e80:	4b15      	ldr	r3, [pc, #84]	; (8019ed8 <ip_reass_free_complete_datagram+0x12c>)
 8019e82:	22cc      	movs	r2, #204	; 0xcc
 8019e84:	4918      	ldr	r1, [pc, #96]	; (8019ee8 <ip_reass_free_complete_datagram+0x13c>)
 8019e86:	4816      	ldr	r0, [pc, #88]	; (8019ee0 <ip_reass_free_complete_datagram+0x134>)
 8019e88:	f000 ffca 	bl	801ae20 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019e8c:	8bfa      	ldrh	r2, [r7, #30]
 8019e8e:	8a7b      	ldrh	r3, [r7, #18]
 8019e90:	4413      	add	r3, r2
 8019e92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019e94:	68f8      	ldr	r0, [r7, #12]
 8019e96:	f7f8 f863 	bl	8011f60 <pbuf_free>
  while (p != NULL) {
 8019e9a:	69bb      	ldr	r3, [r7, #24]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d1dc      	bne.n	8019e5a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019ea0:	6839      	ldr	r1, [r7, #0]
 8019ea2:	6878      	ldr	r0, [r7, #4]
 8019ea4:	f000 f8c2 	bl	801a02c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019ea8:	4b10      	ldr	r3, [pc, #64]	; (8019eec <ip_reass_free_complete_datagram+0x140>)
 8019eaa:	881b      	ldrh	r3, [r3, #0]
 8019eac:	8bfa      	ldrh	r2, [r7, #30]
 8019eae:	429a      	cmp	r2, r3
 8019eb0:	d905      	bls.n	8019ebe <ip_reass_free_complete_datagram+0x112>
 8019eb2:	4b09      	ldr	r3, [pc, #36]	; (8019ed8 <ip_reass_free_complete_datagram+0x12c>)
 8019eb4:	22d2      	movs	r2, #210	; 0xd2
 8019eb6:	490e      	ldr	r1, [pc, #56]	; (8019ef0 <ip_reass_free_complete_datagram+0x144>)
 8019eb8:	4809      	ldr	r0, [pc, #36]	; (8019ee0 <ip_reass_free_complete_datagram+0x134>)
 8019eba:	f000 ffb1 	bl	801ae20 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019ebe:	4b0b      	ldr	r3, [pc, #44]	; (8019eec <ip_reass_free_complete_datagram+0x140>)
 8019ec0:	881a      	ldrh	r2, [r3, #0]
 8019ec2:	8bfb      	ldrh	r3, [r7, #30]
 8019ec4:	1ad3      	subs	r3, r2, r3
 8019ec6:	b29a      	uxth	r2, r3
 8019ec8:	4b08      	ldr	r3, [pc, #32]	; (8019eec <ip_reass_free_complete_datagram+0x140>)
 8019eca:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019ecc:	8bfb      	ldrh	r3, [r7, #30]
}
 8019ece:	4618      	mov	r0, r3
 8019ed0:	3720      	adds	r7, #32
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd80      	pop	{r7, pc}
 8019ed6:	bf00      	nop
 8019ed8:	0801e598 	.word	0x0801e598
 8019edc:	0801e5d4 	.word	0x0801e5d4
 8019ee0:	0801e5e0 	.word	0x0801e5e0
 8019ee4:	0801e608 	.word	0x0801e608
 8019ee8:	0801e61c 	.word	0x0801e61c
 8019eec:	2000469c 	.word	0x2000469c
 8019ef0:	0801e63c 	.word	0x0801e63c

08019ef4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b08a      	sub	sp, #40	; 0x28
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
 8019efc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019efe:	2300      	movs	r3, #0
 8019f00:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019f02:	2300      	movs	r3, #0
 8019f04:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019f06:	2300      	movs	r3, #0
 8019f08:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019f0e:	2300      	movs	r3, #0
 8019f10:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019f12:	4b28      	ldr	r3, [pc, #160]	; (8019fb4 <ip_reass_remove_oldest_datagram+0xc0>)
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019f18:	e030      	b.n	8019f7c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f1c:	695a      	ldr	r2, [r3, #20]
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	68db      	ldr	r3, [r3, #12]
 8019f22:	429a      	cmp	r2, r3
 8019f24:	d10c      	bne.n	8019f40 <ip_reass_remove_oldest_datagram+0x4c>
 8019f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f28:	699a      	ldr	r2, [r3, #24]
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	691b      	ldr	r3, [r3, #16]
 8019f2e:	429a      	cmp	r2, r3
 8019f30:	d106      	bne.n	8019f40 <ip_reass_remove_oldest_datagram+0x4c>
 8019f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f34:	899a      	ldrh	r2, [r3, #12]
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	889b      	ldrh	r3, [r3, #4]
 8019f3a:	b29b      	uxth	r3, r3
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	d014      	beq.n	8019f6a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019f40:	693b      	ldr	r3, [r7, #16]
 8019f42:	3301      	adds	r3, #1
 8019f44:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019f46:	6a3b      	ldr	r3, [r7, #32]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d104      	bne.n	8019f56 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f4e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019f50:	69fb      	ldr	r3, [r7, #28]
 8019f52:	61bb      	str	r3, [r7, #24]
 8019f54:	e009      	b.n	8019f6a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f58:	7fda      	ldrb	r2, [r3, #31]
 8019f5a:	6a3b      	ldr	r3, [r7, #32]
 8019f5c:	7fdb      	ldrb	r3, [r3, #31]
 8019f5e:	429a      	cmp	r2, r3
 8019f60:	d803      	bhi.n	8019f6a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f64:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019f66:	69fb      	ldr	r3, [r7, #28]
 8019f68:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d001      	beq.n	8019f76 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f74:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d1cb      	bne.n	8019f1a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019f82:	6a3b      	ldr	r3, [r7, #32]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d008      	beq.n	8019f9a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019f88:	69b9      	ldr	r1, [r7, #24]
 8019f8a:	6a38      	ldr	r0, [r7, #32]
 8019f8c:	f7ff ff0e 	bl	8019dac <ip_reass_free_complete_datagram>
 8019f90:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019f92:	697a      	ldr	r2, [r7, #20]
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	4413      	add	r3, r2
 8019f98:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019f9a:	697a      	ldr	r2, [r7, #20]
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	429a      	cmp	r2, r3
 8019fa0:	da02      	bge.n	8019fa8 <ip_reass_remove_oldest_datagram+0xb4>
 8019fa2:	693b      	ldr	r3, [r7, #16]
 8019fa4:	2b01      	cmp	r3, #1
 8019fa6:	dcac      	bgt.n	8019f02 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019fa8:	697b      	ldr	r3, [r7, #20]
}
 8019faa:	4618      	mov	r0, r3
 8019fac:	3728      	adds	r7, #40	; 0x28
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}
 8019fb2:	bf00      	nop
 8019fb4:	20004698 	.word	0x20004698

08019fb8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b084      	sub	sp, #16
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	6078      	str	r0, [r7, #4]
 8019fc0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019fc2:	2004      	movs	r0, #4
 8019fc4:	f7f7 f952 	bl	801126c <memp_malloc>
 8019fc8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d110      	bne.n	8019ff2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019fd0:	6839      	ldr	r1, [r7, #0]
 8019fd2:	6878      	ldr	r0, [r7, #4]
 8019fd4:	f7ff ff8e 	bl	8019ef4 <ip_reass_remove_oldest_datagram>
 8019fd8:	4602      	mov	r2, r0
 8019fda:	683b      	ldr	r3, [r7, #0]
 8019fdc:	4293      	cmp	r3, r2
 8019fde:	dc03      	bgt.n	8019fe8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019fe0:	2004      	movs	r0, #4
 8019fe2:	f7f7 f943 	bl	801126c <memp_malloc>
 8019fe6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d101      	bne.n	8019ff2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019fee:	2300      	movs	r3, #0
 8019ff0:	e016      	b.n	801a020 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019ff2:	2220      	movs	r2, #32
 8019ff4:	2100      	movs	r1, #0
 8019ff6:	68f8      	ldr	r0, [r7, #12]
 8019ff8:	f000 ff0a 	bl	801ae10 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	220f      	movs	r2, #15
 801a000:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a002:	4b09      	ldr	r3, [pc, #36]	; (801a028 <ip_reass_enqueue_new_datagram+0x70>)
 801a004:	681a      	ldr	r2, [r3, #0]
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a00a:	4a07      	ldr	r2, [pc, #28]	; (801a028 <ip_reass_enqueue_new_datagram+0x70>)
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	3308      	adds	r3, #8
 801a014:	2214      	movs	r2, #20
 801a016:	6879      	ldr	r1, [r7, #4]
 801a018:	4618      	mov	r0, r3
 801a01a:	f000 feee 	bl	801adfa <memcpy>
  return ipr;
 801a01e:	68fb      	ldr	r3, [r7, #12]
}
 801a020:	4618      	mov	r0, r3
 801a022:	3710      	adds	r7, #16
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}
 801a028:	20004698 	.word	0x20004698

0801a02c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b082      	sub	sp, #8
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
 801a034:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a036:	4b10      	ldr	r3, [pc, #64]	; (801a078 <ip_reass_dequeue_datagram+0x4c>)
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	687a      	ldr	r2, [r7, #4]
 801a03c:	429a      	cmp	r2, r3
 801a03e:	d104      	bne.n	801a04a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	4a0c      	ldr	r2, [pc, #48]	; (801a078 <ip_reass_dequeue_datagram+0x4c>)
 801a046:	6013      	str	r3, [r2, #0]
 801a048:	e00d      	b.n	801a066 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a04a:	683b      	ldr	r3, [r7, #0]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d106      	bne.n	801a05e <ip_reass_dequeue_datagram+0x32>
 801a050:	4b0a      	ldr	r3, [pc, #40]	; (801a07c <ip_reass_dequeue_datagram+0x50>)
 801a052:	f240 1245 	movw	r2, #325	; 0x145
 801a056:	490a      	ldr	r1, [pc, #40]	; (801a080 <ip_reass_dequeue_datagram+0x54>)
 801a058:	480a      	ldr	r0, [pc, #40]	; (801a084 <ip_reass_dequeue_datagram+0x58>)
 801a05a:	f000 fee1 	bl	801ae20 <iprintf>
    prev->next = ipr->next;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	681a      	ldr	r2, [r3, #0]
 801a062:	683b      	ldr	r3, [r7, #0]
 801a064:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a066:	6879      	ldr	r1, [r7, #4]
 801a068:	2004      	movs	r0, #4
 801a06a:	f7f7 f951 	bl	8011310 <memp_free>
}
 801a06e:	bf00      	nop
 801a070:	3708      	adds	r7, #8
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}
 801a076:	bf00      	nop
 801a078:	20004698 	.word	0x20004698
 801a07c:	0801e598 	.word	0x0801e598
 801a080:	0801e660 	.word	0x0801e660
 801a084:	0801e5e0 	.word	0x0801e5e0

0801a088 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b08c      	sub	sp, #48	; 0x30
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	60f8      	str	r0, [r7, #12]
 801a090:	60b9      	str	r1, [r7, #8]
 801a092:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a094:	2300      	movs	r3, #0
 801a096:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a098:	2301      	movs	r3, #1
 801a09a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a09c:	68bb      	ldr	r3, [r7, #8]
 801a09e:	685b      	ldr	r3, [r3, #4]
 801a0a0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a0a2:	69fb      	ldr	r3, [r7, #28]
 801a0a4:	885b      	ldrh	r3, [r3, #2]
 801a0a6:	b29b      	uxth	r3, r3
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f7f6 f95d 	bl	8010368 <lwip_htons>
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a0b2:	69fb      	ldr	r3, [r7, #28]
 801a0b4:	781b      	ldrb	r3, [r3, #0]
 801a0b6:	f003 030f 	and.w	r3, r3, #15
 801a0ba:	b2db      	uxtb	r3, r3
 801a0bc:	009b      	lsls	r3, r3, #2
 801a0be:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a0c0:	7e7b      	ldrb	r3, [r7, #25]
 801a0c2:	b29b      	uxth	r3, r3
 801a0c4:	8b7a      	ldrh	r2, [r7, #26]
 801a0c6:	429a      	cmp	r2, r3
 801a0c8:	d202      	bcs.n	801a0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a0ce:	e135      	b.n	801a33c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a0d0:	7e7b      	ldrb	r3, [r7, #25]
 801a0d2:	b29b      	uxth	r3, r3
 801a0d4:	8b7a      	ldrh	r2, [r7, #26]
 801a0d6:	1ad3      	subs	r3, r2, r3
 801a0d8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a0da:	69fb      	ldr	r3, [r7, #28]
 801a0dc:	88db      	ldrh	r3, [r3, #6]
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	f7f6 f941 	bl	8010368 <lwip_htons>
 801a0e6:	4603      	mov	r3, r0
 801a0e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a0ec:	b29b      	uxth	r3, r3
 801a0ee:	00db      	lsls	r3, r3, #3
 801a0f0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	685b      	ldr	r3, [r3, #4]
 801a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	701a      	strb	r2, [r3, #0]
 801a0fe:	2200      	movs	r2, #0
 801a100:	705a      	strb	r2, [r3, #1]
 801a102:	2200      	movs	r2, #0
 801a104:	709a      	strb	r2, [r3, #2]
 801a106:	2200      	movs	r2, #0
 801a108:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a10c:	8afa      	ldrh	r2, [r7, #22]
 801a10e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a110:	8afa      	ldrh	r2, [r7, #22]
 801a112:	8b7b      	ldrh	r3, [r7, #26]
 801a114:	4413      	add	r3, r2
 801a116:	b29a      	uxth	r2, r3
 801a118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a11a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a11e:	88db      	ldrh	r3, [r3, #6]
 801a120:	b29b      	uxth	r3, r3
 801a122:	8afa      	ldrh	r2, [r7, #22]
 801a124:	429a      	cmp	r2, r3
 801a126:	d902      	bls.n	801a12e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a12c:	e106      	b.n	801a33c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	685b      	ldr	r3, [r3, #4]
 801a132:	627b      	str	r3, [r7, #36]	; 0x24
 801a134:	e068      	b.n	801a208 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a138:	685b      	ldr	r3, [r3, #4]
 801a13a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a13e:	889b      	ldrh	r3, [r3, #4]
 801a140:	b29a      	uxth	r2, r3
 801a142:	693b      	ldr	r3, [r7, #16]
 801a144:	889b      	ldrh	r3, [r3, #4]
 801a146:	b29b      	uxth	r3, r3
 801a148:	429a      	cmp	r2, r3
 801a14a:	d235      	bcs.n	801a1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a150:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a154:	2b00      	cmp	r3, #0
 801a156:	d020      	beq.n	801a19a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a15a:	889b      	ldrh	r3, [r3, #4]
 801a15c:	b29a      	uxth	r2, r3
 801a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a160:	88db      	ldrh	r3, [r3, #6]
 801a162:	b29b      	uxth	r3, r3
 801a164:	429a      	cmp	r2, r3
 801a166:	d307      	bcc.n	801a178 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a16a:	88db      	ldrh	r3, [r3, #6]
 801a16c:	b29a      	uxth	r2, r3
 801a16e:	693b      	ldr	r3, [r7, #16]
 801a170:	889b      	ldrh	r3, [r3, #4]
 801a172:	b29b      	uxth	r3, r3
 801a174:	429a      	cmp	r2, r3
 801a176:	d902      	bls.n	801a17e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a17c:	e0de      	b.n	801a33c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a180:	68ba      	ldr	r2, [r7, #8]
 801a182:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a186:	88db      	ldrh	r3, [r3, #6]
 801a188:	b29a      	uxth	r2, r3
 801a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a18c:	889b      	ldrh	r3, [r3, #4]
 801a18e:	b29b      	uxth	r3, r3
 801a190:	429a      	cmp	r2, r3
 801a192:	d03d      	beq.n	801a210 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a194:	2300      	movs	r3, #0
 801a196:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a198:	e03a      	b.n	801a210 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a19c:	88db      	ldrh	r3, [r3, #6]
 801a19e:	b29a      	uxth	r2, r3
 801a1a0:	693b      	ldr	r3, [r7, #16]
 801a1a2:	889b      	ldrh	r3, [r3, #4]
 801a1a4:	b29b      	uxth	r3, r3
 801a1a6:	429a      	cmp	r2, r3
 801a1a8:	d902      	bls.n	801a1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1ae:	e0c5      	b.n	801a33c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	68ba      	ldr	r2, [r7, #8]
 801a1b4:	605a      	str	r2, [r3, #4]
      break;
 801a1b6:	e02b      	b.n	801a210 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ba:	889b      	ldrh	r3, [r3, #4]
 801a1bc:	b29a      	uxth	r2, r3
 801a1be:	693b      	ldr	r3, [r7, #16]
 801a1c0:	889b      	ldrh	r3, [r3, #4]
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	429a      	cmp	r2, r3
 801a1c6:	d102      	bne.n	801a1ce <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a1c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1cc:	e0b6      	b.n	801a33c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1d0:	889b      	ldrh	r3, [r3, #4]
 801a1d2:	b29a      	uxth	r2, r3
 801a1d4:	693b      	ldr	r3, [r7, #16]
 801a1d6:	88db      	ldrh	r3, [r3, #6]
 801a1d8:	b29b      	uxth	r3, r3
 801a1da:	429a      	cmp	r2, r3
 801a1dc:	d202      	bcs.n	801a1e4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a1de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1e2:	e0ab      	b.n	801a33c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d009      	beq.n	801a1fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ec:	88db      	ldrh	r3, [r3, #6]
 801a1ee:	b29a      	uxth	r2, r3
 801a1f0:	693b      	ldr	r3, [r7, #16]
 801a1f2:	889b      	ldrh	r3, [r3, #4]
 801a1f4:	b29b      	uxth	r3, r3
 801a1f6:	429a      	cmp	r2, r3
 801a1f8:	d001      	beq.n	801a1fe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a1fe:	693b      	ldr	r3, [r7, #16]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a204:	693b      	ldr	r3, [r7, #16]
 801a206:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d193      	bne.n	801a136 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a20e:	e000      	b.n	801a212 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a210:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a214:	2b00      	cmp	r3, #0
 801a216:	d12d      	bne.n	801a274 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d01c      	beq.n	801a258 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a220:	88db      	ldrh	r3, [r3, #6]
 801a222:	b29a      	uxth	r2, r3
 801a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a226:	889b      	ldrh	r3, [r3, #4]
 801a228:	b29b      	uxth	r3, r3
 801a22a:	429a      	cmp	r2, r3
 801a22c:	d906      	bls.n	801a23c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a22e:	4b45      	ldr	r3, [pc, #276]	; (801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a230:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a234:	4944      	ldr	r1, [pc, #272]	; (801a348 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a236:	4845      	ldr	r0, [pc, #276]	; (801a34c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a238:	f000 fdf2 	bl	801ae20 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a23e:	68ba      	ldr	r2, [r7, #8]
 801a240:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a244:	88db      	ldrh	r3, [r3, #6]
 801a246:	b29a      	uxth	r2, r3
 801a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24a:	889b      	ldrh	r3, [r3, #4]
 801a24c:	b29b      	uxth	r3, r3
 801a24e:	429a      	cmp	r2, r3
 801a250:	d010      	beq.n	801a274 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a252:	2300      	movs	r3, #0
 801a254:	623b      	str	r3, [r7, #32]
 801a256:	e00d      	b.n	801a274 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	685b      	ldr	r3, [r3, #4]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d006      	beq.n	801a26e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a260:	4b38      	ldr	r3, [pc, #224]	; (801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a262:	f240 12bf 	movw	r2, #447	; 0x1bf
 801a266:	493a      	ldr	r1, [pc, #232]	; (801a350 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a268:	4838      	ldr	r0, [pc, #224]	; (801a34c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a26a:	f000 fdd9 	bl	801ae20 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	68ba      	ldr	r2, [r7, #8]
 801a272:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2b00      	cmp	r3, #0
 801a278:	d105      	bne.n	801a286 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	7f9b      	ldrb	r3, [r3, #30]
 801a27e:	f003 0301 	and.w	r3, r3, #1
 801a282:	2b00      	cmp	r3, #0
 801a284:	d059      	beq.n	801a33a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a286:	6a3b      	ldr	r3, [r7, #32]
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d04f      	beq.n	801a32c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	685b      	ldr	r3, [r3, #4]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d006      	beq.n	801a2a2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	685b      	ldr	r3, [r3, #4]
 801a298:	685b      	ldr	r3, [r3, #4]
 801a29a:	889b      	ldrh	r3, [r3, #4]
 801a29c:	b29b      	uxth	r3, r3
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d002      	beq.n	801a2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	623b      	str	r3, [r7, #32]
 801a2a6:	e041      	b.n	801a32c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2aa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a2b2:	e012      	b.n	801a2da <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2b6:	685b      	ldr	r3, [r3, #4]
 801a2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2bc:	88db      	ldrh	r3, [r3, #6]
 801a2be:	b29a      	uxth	r2, r3
 801a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2c2:	889b      	ldrh	r3, [r3, #4]
 801a2c4:	b29b      	uxth	r3, r3
 801a2c6:	429a      	cmp	r2, r3
 801a2c8:	d002      	beq.n	801a2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	623b      	str	r3, [r7, #32]
            break;
 801a2ce:	e007      	b.n	801a2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d1e9      	bne.n	801a2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a2e0:	6a3b      	ldr	r3, [r7, #32]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d022      	beq.n	801a32c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	685b      	ldr	r3, [r3, #4]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d106      	bne.n	801a2fc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a2ee:	4b15      	ldr	r3, [pc, #84]	; (801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a2f0:	f240 12df 	movw	r2, #479	; 0x1df
 801a2f4:	4917      	ldr	r1, [pc, #92]	; (801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a2f6:	4815      	ldr	r0, [pc, #84]	; (801a34c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a2f8:	f000 fd92 	bl	801ae20 <iprintf>
          LWIP_ASSERT("sanity check",
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	685b      	ldr	r3, [r3, #4]
 801a300:	685b      	ldr	r3, [r3, #4]
 801a302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a304:	429a      	cmp	r2, r3
 801a306:	d106      	bne.n	801a316 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a308:	4b0e      	ldr	r3, [pc, #56]	; (801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a30a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801a30e:	4911      	ldr	r1, [pc, #68]	; (801a354 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a310:	480e      	ldr	r0, [pc, #56]	; (801a34c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a312:	f000 fd85 	bl	801ae20 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d006      	beq.n	801a32c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a31e:	4b09      	ldr	r3, [pc, #36]	; (801a344 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a320:	f240 12e3 	movw	r2, #483	; 0x1e3
 801a324:	490c      	ldr	r1, [pc, #48]	; (801a358 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a326:	4809      	ldr	r0, [pc, #36]	; (801a34c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a328:	f000 fd7a 	bl	801ae20 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a32c:	6a3b      	ldr	r3, [r7, #32]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	bf14      	ite	ne
 801a332:	2301      	movne	r3, #1
 801a334:	2300      	moveq	r3, #0
 801a336:	b2db      	uxtb	r3, r3
 801a338:	e000      	b.n	801a33c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a33a:	2300      	movs	r3, #0
}
 801a33c:	4618      	mov	r0, r3
 801a33e:	3730      	adds	r7, #48	; 0x30
 801a340:	46bd      	mov	sp, r7
 801a342:	bd80      	pop	{r7, pc}
 801a344:	0801e598 	.word	0x0801e598
 801a348:	0801e67c 	.word	0x0801e67c
 801a34c:	0801e5e0 	.word	0x0801e5e0
 801a350:	0801e69c 	.word	0x0801e69c
 801a354:	0801e6d4 	.word	0x0801e6d4
 801a358:	0801e6e4 	.word	0x0801e6e4

0801a35c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b08e      	sub	sp, #56	; 0x38
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	685b      	ldr	r3, [r3, #4]
 801a368:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a36c:	781b      	ldrb	r3, [r3, #0]
 801a36e:	f003 030f 	and.w	r3, r3, #15
 801a372:	b2db      	uxtb	r3, r3
 801a374:	009b      	lsls	r3, r3, #2
 801a376:	b2db      	uxtb	r3, r3
 801a378:	2b14      	cmp	r3, #20
 801a37a:	f040 8167 	bne.w	801a64c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a380:	88db      	ldrh	r3, [r3, #6]
 801a382:	b29b      	uxth	r3, r3
 801a384:	4618      	mov	r0, r3
 801a386:	f7f5 ffef 	bl	8010368 <lwip_htons>
 801a38a:	4603      	mov	r3, r0
 801a38c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a390:	b29b      	uxth	r3, r3
 801a392:	00db      	lsls	r3, r3, #3
 801a394:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a398:	885b      	ldrh	r3, [r3, #2]
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	4618      	mov	r0, r3
 801a39e:	f7f5 ffe3 	bl	8010368 <lwip_htons>
 801a3a2:	4603      	mov	r3, r0
 801a3a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	f003 030f 	and.w	r3, r3, #15
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	009b      	lsls	r3, r3, #2
 801a3b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a3b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a3ba:	b29b      	uxth	r3, r3
 801a3bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a3be:	429a      	cmp	r2, r3
 801a3c0:	f0c0 8146 	bcc.w	801a650 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a3c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a3c8:	b29b      	uxth	r3, r3
 801a3ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a3cc:	1ad3      	subs	r3, r2, r3
 801a3ce:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a3d0:	6878      	ldr	r0, [r7, #4]
 801a3d2:	f7f7 fe53 	bl	801207c <pbuf_clen>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a3da:	4ba3      	ldr	r3, [pc, #652]	; (801a668 <ip4_reass+0x30c>)
 801a3dc:	881b      	ldrh	r3, [r3, #0]
 801a3de:	461a      	mov	r2, r3
 801a3e0:	8c3b      	ldrh	r3, [r7, #32]
 801a3e2:	4413      	add	r3, r2
 801a3e4:	2b0a      	cmp	r3, #10
 801a3e6:	dd10      	ble.n	801a40a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a3e8:	8c3b      	ldrh	r3, [r7, #32]
 801a3ea:	4619      	mov	r1, r3
 801a3ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a3ee:	f7ff fd81 	bl	8019ef4 <ip_reass_remove_oldest_datagram>
 801a3f2:	4603      	mov	r3, r0
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	f000 812d 	beq.w	801a654 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a3fa:	4b9b      	ldr	r3, [pc, #620]	; (801a668 <ip4_reass+0x30c>)
 801a3fc:	881b      	ldrh	r3, [r3, #0]
 801a3fe:	461a      	mov	r2, r3
 801a400:	8c3b      	ldrh	r3, [r7, #32]
 801a402:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a404:	2b0a      	cmp	r3, #10
 801a406:	f300 8125 	bgt.w	801a654 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a40a:	4b98      	ldr	r3, [pc, #608]	; (801a66c <ip4_reass+0x310>)
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	633b      	str	r3, [r7, #48]	; 0x30
 801a410:	e015      	b.n	801a43e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a414:	695a      	ldr	r2, [r3, #20]
 801a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a418:	68db      	ldr	r3, [r3, #12]
 801a41a:	429a      	cmp	r2, r3
 801a41c:	d10c      	bne.n	801a438 <ip4_reass+0xdc>
 801a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a420:	699a      	ldr	r2, [r3, #24]
 801a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a424:	691b      	ldr	r3, [r3, #16]
 801a426:	429a      	cmp	r2, r3
 801a428:	d106      	bne.n	801a438 <ip4_reass+0xdc>
 801a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a42c:	899a      	ldrh	r2, [r3, #12]
 801a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a430:	889b      	ldrh	r3, [r3, #4]
 801a432:	b29b      	uxth	r3, r3
 801a434:	429a      	cmp	r2, r3
 801a436:	d006      	beq.n	801a446 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	633b      	str	r3, [r7, #48]	; 0x30
 801a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a440:	2b00      	cmp	r3, #0
 801a442:	d1e6      	bne.n	801a412 <ip4_reass+0xb6>
 801a444:	e000      	b.n	801a448 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a446:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d109      	bne.n	801a462 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a44e:	8c3b      	ldrh	r3, [r7, #32]
 801a450:	4619      	mov	r1, r3
 801a452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a454:	f7ff fdb0 	bl	8019fb8 <ip_reass_enqueue_new_datagram>
 801a458:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d11c      	bne.n	801a49a <ip4_reass+0x13e>
      goto nullreturn;
 801a460:	e0f9      	b.n	801a656 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a464:	88db      	ldrh	r3, [r3, #6]
 801a466:	b29b      	uxth	r3, r3
 801a468:	4618      	mov	r0, r3
 801a46a:	f7f5 ff7d 	bl	8010368 <lwip_htons>
 801a46e:	4603      	mov	r3, r0
 801a470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a474:	2b00      	cmp	r3, #0
 801a476:	d110      	bne.n	801a49a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a47a:	89db      	ldrh	r3, [r3, #14]
 801a47c:	4618      	mov	r0, r3
 801a47e:	f7f5 ff73 	bl	8010368 <lwip_htons>
 801a482:	4603      	mov	r3, r0
 801a484:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d006      	beq.n	801a49a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a48e:	3308      	adds	r3, #8
 801a490:	2214      	movs	r2, #20
 801a492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a494:	4618      	mov	r0, r3
 801a496:	f000 fcb0 	bl	801adfa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a49c:	88db      	ldrh	r3, [r3, #6]
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	f003 0320 	and.w	r3, r3, #32
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	bf0c      	ite	eq
 801a4a8:	2301      	moveq	r3, #1
 801a4aa:	2300      	movne	r3, #0
 801a4ac:	b2db      	uxtb	r3, r3
 801a4ae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a4b0:	69fb      	ldr	r3, [r7, #28]
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d00e      	beq.n	801a4d4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a4b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a4b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4ba:	4413      	add	r3, r2
 801a4bc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a4be:	8b7a      	ldrh	r2, [r7, #26]
 801a4c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a4c2:	429a      	cmp	r2, r3
 801a4c4:	f0c0 80a0 	bcc.w	801a608 <ip4_reass+0x2ac>
 801a4c8:	8b7b      	ldrh	r3, [r7, #26]
 801a4ca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a4ce:	4293      	cmp	r3, r2
 801a4d0:	f200 809a 	bhi.w	801a608 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a4d4:	69fa      	ldr	r2, [r7, #28]
 801a4d6:	6879      	ldr	r1, [r7, #4]
 801a4d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4da:	f7ff fdd5 	bl	801a088 <ip_reass_chain_frag_into_datagram_and_validate>
 801a4de:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a4e0:	697b      	ldr	r3, [r7, #20]
 801a4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a4e6:	f000 8091 	beq.w	801a60c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a4ea:	4b5f      	ldr	r3, [pc, #380]	; (801a668 <ip4_reass+0x30c>)
 801a4ec:	881a      	ldrh	r2, [r3, #0]
 801a4ee:	8c3b      	ldrh	r3, [r7, #32]
 801a4f0:	4413      	add	r3, r2
 801a4f2:	b29a      	uxth	r2, r3
 801a4f4:	4b5c      	ldr	r3, [pc, #368]	; (801a668 <ip4_reass+0x30c>)
 801a4f6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a4f8:	69fb      	ldr	r3, [r7, #28]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d00d      	beq.n	801a51a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a4fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a502:	4413      	add	r3, r2
 801a504:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a508:	8a7a      	ldrh	r2, [r7, #18]
 801a50a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a50e:	7f9b      	ldrb	r3, [r3, #30]
 801a510:	f043 0301 	orr.w	r3, r3, #1
 801a514:	b2da      	uxtb	r2, r3
 801a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a518:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a51a:	697b      	ldr	r3, [r7, #20]
 801a51c:	2b01      	cmp	r3, #1
 801a51e:	d171      	bne.n	801a604 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a522:	8b9b      	ldrh	r3, [r3, #28]
 801a524:	3314      	adds	r3, #20
 801a526:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a52a:	685b      	ldr	r3, [r3, #4]
 801a52c:	685b      	ldr	r3, [r3, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a534:	685b      	ldr	r3, [r3, #4]
 801a536:	685b      	ldr	r3, [r3, #4]
 801a538:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a53c:	3308      	adds	r3, #8
 801a53e:	2214      	movs	r2, #20
 801a540:	4619      	mov	r1, r3
 801a542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a544:	f000 fc59 	bl	801adfa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a548:	8a3b      	ldrh	r3, [r7, #16]
 801a54a:	4618      	mov	r0, r3
 801a54c:	f7f5 ff0c 	bl	8010368 <lwip_htons>
 801a550:	4603      	mov	r3, r0
 801a552:	461a      	mov	r2, r3
 801a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a556:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a55a:	2200      	movs	r2, #0
 801a55c:	719a      	strb	r2, [r3, #6]
 801a55e:	2200      	movs	r2, #0
 801a560:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a564:	2200      	movs	r2, #0
 801a566:	729a      	strb	r2, [r3, #10]
 801a568:	2200      	movs	r2, #0
 801a56a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a56e:	685b      	ldr	r3, [r3, #4]
 801a570:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a572:	e00d      	b.n	801a590 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a576:	685b      	ldr	r3, [r3, #4]
 801a578:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a57a:	2114      	movs	r1, #20
 801a57c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a57e:	f7f7 fc69 	bl	8011e54 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a584:	6878      	ldr	r0, [r7, #4]
 801a586:	f7f7 fdb9 	bl	80120fc <pbuf_cat>
      r = iprh->next_pbuf;
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a592:	2b00      	cmp	r3, #0
 801a594:	d1ee      	bne.n	801a574 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a596:	4b35      	ldr	r3, [pc, #212]	; (801a66c <ip4_reass+0x310>)
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a59c:	429a      	cmp	r2, r3
 801a59e:	d102      	bne.n	801a5a6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5a4:	e010      	b.n	801a5c8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a5a6:	4b31      	ldr	r3, [pc, #196]	; (801a66c <ip4_reass+0x310>)
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5ac:	e007      	b.n	801a5be <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a5b4:	429a      	cmp	r2, r3
 801a5b6:	d006      	beq.n	801a5c6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d1f4      	bne.n	801a5ae <ip4_reass+0x252>
 801a5c4:	e000      	b.n	801a5c8 <ip4_reass+0x26c>
          break;
 801a5c6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a5c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a5ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5cc:	f7ff fd2e 	bl	801a02c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a5d0:	6878      	ldr	r0, [r7, #4]
 801a5d2:	f7f7 fd53 	bl	801207c <pbuf_clen>
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a5da:	4b23      	ldr	r3, [pc, #140]	; (801a668 <ip4_reass+0x30c>)
 801a5dc:	881b      	ldrh	r3, [r3, #0]
 801a5de:	8c3a      	ldrh	r2, [r7, #32]
 801a5e0:	429a      	cmp	r2, r3
 801a5e2:	d906      	bls.n	801a5f2 <ip4_reass+0x296>
 801a5e4:	4b22      	ldr	r3, [pc, #136]	; (801a670 <ip4_reass+0x314>)
 801a5e6:	f240 229b 	movw	r2, #667	; 0x29b
 801a5ea:	4922      	ldr	r1, [pc, #136]	; (801a674 <ip4_reass+0x318>)
 801a5ec:	4822      	ldr	r0, [pc, #136]	; (801a678 <ip4_reass+0x31c>)
 801a5ee:	f000 fc17 	bl	801ae20 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a5f2:	4b1d      	ldr	r3, [pc, #116]	; (801a668 <ip4_reass+0x30c>)
 801a5f4:	881a      	ldrh	r2, [r3, #0]
 801a5f6:	8c3b      	ldrh	r3, [r7, #32]
 801a5f8:	1ad3      	subs	r3, r2, r3
 801a5fa:	b29a      	uxth	r2, r3
 801a5fc:	4b1a      	ldr	r3, [pc, #104]	; (801a668 <ip4_reass+0x30c>)
 801a5fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	e02c      	b.n	801a65e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a604:	2300      	movs	r3, #0
 801a606:	e02a      	b.n	801a65e <ip4_reass+0x302>

nullreturn_ipr:
 801a608:	bf00      	nop
 801a60a:	e000      	b.n	801a60e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801a60c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a610:	2b00      	cmp	r3, #0
 801a612:	d106      	bne.n	801a622 <ip4_reass+0x2c6>
 801a614:	4b16      	ldr	r3, [pc, #88]	; (801a670 <ip4_reass+0x314>)
 801a616:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a61a:	4918      	ldr	r1, [pc, #96]	; (801a67c <ip4_reass+0x320>)
 801a61c:	4816      	ldr	r0, [pc, #88]	; (801a678 <ip4_reass+0x31c>)
 801a61e:	f000 fbff 	bl	801ae20 <iprintf>
  if (ipr->p == NULL) {
 801a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a624:	685b      	ldr	r3, [r3, #4]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d114      	bne.n	801a654 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a62a:	4b10      	ldr	r3, [pc, #64]	; (801a66c <ip4_reass+0x310>)
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a630:	429a      	cmp	r2, r3
 801a632:	d006      	beq.n	801a642 <ip4_reass+0x2e6>
 801a634:	4b0e      	ldr	r3, [pc, #56]	; (801a670 <ip4_reass+0x314>)
 801a636:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a63a:	4911      	ldr	r1, [pc, #68]	; (801a680 <ip4_reass+0x324>)
 801a63c:	480e      	ldr	r0, [pc, #56]	; (801a678 <ip4_reass+0x31c>)
 801a63e:	f000 fbef 	bl	801ae20 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a642:	2100      	movs	r1, #0
 801a644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a646:	f7ff fcf1 	bl	801a02c <ip_reass_dequeue_datagram>
 801a64a:	e004      	b.n	801a656 <ip4_reass+0x2fa>
    goto nullreturn;
 801a64c:	bf00      	nop
 801a64e:	e002      	b.n	801a656 <ip4_reass+0x2fa>
    goto nullreturn;
 801a650:	bf00      	nop
 801a652:	e000      	b.n	801a656 <ip4_reass+0x2fa>
  }

nullreturn:
 801a654:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a656:	6878      	ldr	r0, [r7, #4]
 801a658:	f7f7 fc82 	bl	8011f60 <pbuf_free>
  return NULL;
 801a65c:	2300      	movs	r3, #0
}
 801a65e:	4618      	mov	r0, r3
 801a660:	3738      	adds	r7, #56	; 0x38
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}
 801a666:	bf00      	nop
 801a668:	2000469c 	.word	0x2000469c
 801a66c:	20004698 	.word	0x20004698
 801a670:	0801e598 	.word	0x0801e598
 801a674:	0801e708 	.word	0x0801e708
 801a678:	0801e5e0 	.word	0x0801e5e0
 801a67c:	0801e724 	.word	0x0801e724
 801a680:	0801e730 	.word	0x0801e730

0801a684 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a684:	b580      	push	{r7, lr}
 801a686:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a688:	2005      	movs	r0, #5
 801a68a:	f7f6 fdef 	bl	801126c <memp_malloc>
 801a68e:	4603      	mov	r3, r0
}
 801a690:	4618      	mov	r0, r3
 801a692:	bd80      	pop	{r7, pc}

0801a694 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b082      	sub	sp, #8
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d106      	bne.n	801a6b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a6a2:	4b07      	ldr	r3, [pc, #28]	; (801a6c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a6a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a6a8:	4906      	ldr	r1, [pc, #24]	; (801a6c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a6aa:	4807      	ldr	r0, [pc, #28]	; (801a6c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a6ac:	f000 fbb8 	bl	801ae20 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a6b0:	6879      	ldr	r1, [r7, #4]
 801a6b2:	2005      	movs	r0, #5
 801a6b4:	f7f6 fe2c 	bl	8011310 <memp_free>
}
 801a6b8:	bf00      	nop
 801a6ba:	3708      	adds	r7, #8
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	bd80      	pop	{r7, pc}
 801a6c0:	0801e598 	.word	0x0801e598
 801a6c4:	0801e750 	.word	0x0801e750
 801a6c8:	0801e5e0 	.word	0x0801e5e0

0801a6cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b084      	sub	sp, #16
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d106      	bne.n	801a6ec <ipfrag_free_pbuf_custom+0x20>
 801a6de:	4b11      	ldr	r3, [pc, #68]	; (801a724 <ipfrag_free_pbuf_custom+0x58>)
 801a6e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a6e4:	4910      	ldr	r1, [pc, #64]	; (801a728 <ipfrag_free_pbuf_custom+0x5c>)
 801a6e6:	4811      	ldr	r0, [pc, #68]	; (801a72c <ipfrag_free_pbuf_custom+0x60>)
 801a6e8:	f000 fb9a 	bl	801ae20 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a6ec:	68fa      	ldr	r2, [r7, #12]
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	429a      	cmp	r2, r3
 801a6f2:	d006      	beq.n	801a702 <ipfrag_free_pbuf_custom+0x36>
 801a6f4:	4b0b      	ldr	r3, [pc, #44]	; (801a724 <ipfrag_free_pbuf_custom+0x58>)
 801a6f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a6fa:	490d      	ldr	r1, [pc, #52]	; (801a730 <ipfrag_free_pbuf_custom+0x64>)
 801a6fc:	480b      	ldr	r0, [pc, #44]	; (801a72c <ipfrag_free_pbuf_custom+0x60>)
 801a6fe:	f000 fb8f 	bl	801ae20 <iprintf>
  if (pcr->original != NULL) {
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	695b      	ldr	r3, [r3, #20]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d004      	beq.n	801a714 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	695b      	ldr	r3, [r3, #20]
 801a70e:	4618      	mov	r0, r3
 801a710:	f7f7 fc26 	bl	8011f60 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a714:	68f8      	ldr	r0, [r7, #12]
 801a716:	f7ff ffbd 	bl	801a694 <ip_frag_free_pbuf_custom_ref>
}
 801a71a:	bf00      	nop
 801a71c:	3710      	adds	r7, #16
 801a71e:	46bd      	mov	sp, r7
 801a720:	bd80      	pop	{r7, pc}
 801a722:	bf00      	nop
 801a724:	0801e598 	.word	0x0801e598
 801a728:	0801e75c 	.word	0x0801e75c
 801a72c:	0801e5e0 	.word	0x0801e5e0
 801a730:	0801e768 	.word	0x0801e768

0801a734 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a734:	b580      	push	{r7, lr}
 801a736:	b094      	sub	sp, #80	; 0x50
 801a738:	af02      	add	r7, sp, #8
 801a73a:	60f8      	str	r0, [r7, #12]
 801a73c:	60b9      	str	r1, [r7, #8]
 801a73e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a740:	2300      	movs	r3, #0
 801a742:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a746:	68bb      	ldr	r3, [r7, #8]
 801a748:	8c1b      	ldrh	r3, [r3, #32]
 801a74a:	3b14      	subs	r3, #20
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	da00      	bge.n	801a752 <ip4_frag+0x1e>
 801a750:	3307      	adds	r3, #7
 801a752:	10db      	asrs	r3, r3, #3
 801a754:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a756:	2314      	movs	r3, #20
 801a758:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	685b      	ldr	r3, [r3, #4]
 801a75e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a762:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a766:	781b      	ldrb	r3, [r3, #0]
 801a768:	f003 030f 	and.w	r3, r3, #15
 801a76c:	b2db      	uxtb	r3, r3
 801a76e:	009b      	lsls	r3, r3, #2
 801a770:	b2db      	uxtb	r3, r3
 801a772:	2b14      	cmp	r3, #20
 801a774:	d002      	beq.n	801a77c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a776:	f06f 0305 	mvn.w	r3, #5
 801a77a:	e10f      	b.n	801a99c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	895b      	ldrh	r3, [r3, #10]
 801a780:	2b13      	cmp	r3, #19
 801a782:	d809      	bhi.n	801a798 <ip4_frag+0x64>
 801a784:	4b87      	ldr	r3, [pc, #540]	; (801a9a4 <ip4_frag+0x270>)
 801a786:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a78a:	4987      	ldr	r1, [pc, #540]	; (801a9a8 <ip4_frag+0x274>)
 801a78c:	4887      	ldr	r0, [pc, #540]	; (801a9ac <ip4_frag+0x278>)
 801a78e:	f000 fb47 	bl	801ae20 <iprintf>
 801a792:	f06f 0305 	mvn.w	r3, #5
 801a796:	e101      	b.n	801a99c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a79a:	88db      	ldrh	r3, [r3, #6]
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f7f5 fde2 	bl	8010368 <lwip_htons>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a7a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a7aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a7ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a7b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a7b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	891b      	ldrh	r3, [r3, #8]
 801a7be:	3b14      	subs	r3, #20
 801a7c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a7c4:	e0e0      	b.n	801a988 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a7c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a7c8:	00db      	lsls	r3, r3, #3
 801a7ca:	b29b      	uxth	r3, r3
 801a7cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a7d0:	4293      	cmp	r3, r2
 801a7d2:	bf28      	it	cs
 801a7d4:	4613      	movcs	r3, r2
 801a7d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a7d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a7dc:	2114      	movs	r1, #20
 801a7de:	200e      	movs	r0, #14
 801a7e0:	f7f7 f8de 	bl	80119a0 <pbuf_alloc>
 801a7e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	f000 80d4 	beq.w	801a996 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7f0:	895b      	ldrh	r3, [r3, #10]
 801a7f2:	2b13      	cmp	r3, #19
 801a7f4:	d806      	bhi.n	801a804 <ip4_frag+0xd0>
 801a7f6:	4b6b      	ldr	r3, [pc, #428]	; (801a9a4 <ip4_frag+0x270>)
 801a7f8:	f240 3225 	movw	r2, #805	; 0x325
 801a7fc:	496c      	ldr	r1, [pc, #432]	; (801a9b0 <ip4_frag+0x27c>)
 801a7fe:	486b      	ldr	r0, [pc, #428]	; (801a9ac <ip4_frag+0x278>)
 801a800:	f000 fb0e 	bl	801ae20 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a806:	685b      	ldr	r3, [r3, #4]
 801a808:	2214      	movs	r2, #20
 801a80a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a80c:	4618      	mov	r0, r3
 801a80e:	f000 faf4 	bl	801adfa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a814:	685b      	ldr	r3, [r3, #4]
 801a816:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a818:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a81a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a81e:	e064      	b.n	801a8ea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	895a      	ldrh	r2, [r3, #10]
 801a824:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a826:	1ad3      	subs	r3, r2, r3
 801a828:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	895b      	ldrh	r3, [r3, #10]
 801a82e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a830:	429a      	cmp	r2, r3
 801a832:	d906      	bls.n	801a842 <ip4_frag+0x10e>
 801a834:	4b5b      	ldr	r3, [pc, #364]	; (801a9a4 <ip4_frag+0x270>)
 801a836:	f240 322d 	movw	r2, #813	; 0x32d
 801a83a:	495e      	ldr	r1, [pc, #376]	; (801a9b4 <ip4_frag+0x280>)
 801a83c:	485b      	ldr	r0, [pc, #364]	; (801a9ac <ip4_frag+0x278>)
 801a83e:	f000 faef 	bl	801ae20 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a842:	8bfa      	ldrh	r2, [r7, #30]
 801a844:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a848:	4293      	cmp	r3, r2
 801a84a:	bf28      	it	cs
 801a84c:	4613      	movcs	r3, r2
 801a84e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a852:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a856:	2b00      	cmp	r3, #0
 801a858:	d105      	bne.n	801a866 <ip4_frag+0x132>
        poff = 0;
 801a85a:	2300      	movs	r3, #0
 801a85c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a85e:	68fb      	ldr	r3, [r7, #12]
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	60fb      	str	r3, [r7, #12]
        continue;
 801a864:	e041      	b.n	801a8ea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a866:	f7ff ff0d 	bl	801a684 <ip_frag_alloc_pbuf_custom_ref>
 801a86a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a86c:	69bb      	ldr	r3, [r7, #24]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d103      	bne.n	801a87a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a874:	f7f7 fb74 	bl	8011f60 <pbuf_free>
        goto memerr;
 801a878:	e08e      	b.n	801a998 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a87a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a880:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a882:	4413      	add	r3, r2
 801a884:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a888:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a88c:	9201      	str	r2, [sp, #4]
 801a88e:	9300      	str	r3, [sp, #0]
 801a890:	4603      	mov	r3, r0
 801a892:	2241      	movs	r2, #65	; 0x41
 801a894:	2000      	movs	r0, #0
 801a896:	f7f7 f9a9 	bl	8011bec <pbuf_alloced_custom>
 801a89a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a89c:	697b      	ldr	r3, [r7, #20]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d106      	bne.n	801a8b0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a8a2:	69b8      	ldr	r0, [r7, #24]
 801a8a4:	f7ff fef6 	bl	801a694 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a8a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a8aa:	f7f7 fb59 	bl	8011f60 <pbuf_free>
        goto memerr;
 801a8ae:	e073      	b.n	801a998 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801a8b0:	68f8      	ldr	r0, [r7, #12]
 801a8b2:	f7f7 fbfb 	bl	80120ac <pbuf_ref>
      pcr->original = p;
 801a8b6:	69bb      	ldr	r3, [r7, #24]
 801a8b8:	68fa      	ldr	r2, [r7, #12]
 801a8ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a8bc:	69bb      	ldr	r3, [r7, #24]
 801a8be:	4a3e      	ldr	r2, [pc, #248]	; (801a9b8 <ip4_frag+0x284>)
 801a8c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a8c2:	6979      	ldr	r1, [r7, #20]
 801a8c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a8c6:	f7f7 fc19 	bl	80120fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a8ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a8ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8d2:	1ad3      	subs	r3, r2, r3
 801a8d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a8d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d004      	beq.n	801a8ea <ip4_frag+0x1b6>
        poff = 0;
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a8ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d196      	bne.n	801a820 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a8f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a8f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a8f8:	4413      	add	r3, r2
 801a8fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a8fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a900:	68bb      	ldr	r3, [r7, #8]
 801a902:	8c1b      	ldrh	r3, [r3, #32]
 801a904:	3b14      	subs	r3, #20
 801a906:	429a      	cmp	r2, r3
 801a908:	bfd4      	ite	le
 801a90a:	2301      	movle	r3, #1
 801a90c:	2300      	movgt	r3, #0
 801a90e:	b2db      	uxtb	r3, r3
 801a910:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a91a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a91c:	6a3b      	ldr	r3, [r7, #32]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d002      	beq.n	801a928 <ip4_frag+0x1f4>
 801a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a924:	2b00      	cmp	r3, #0
 801a926:	d003      	beq.n	801a930 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a928:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a92a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a92e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a930:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a932:	4618      	mov	r0, r3
 801a934:	f7f5 fd18 	bl	8010368 <lwip_htons>
 801a938:	4603      	mov	r3, r0
 801a93a:	461a      	mov	r2, r3
 801a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a93e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a940:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a942:	3314      	adds	r3, #20
 801a944:	b29b      	uxth	r3, r3
 801a946:	4618      	mov	r0, r3
 801a948:	f7f5 fd0e 	bl	8010368 <lwip_htons>
 801a94c:	4603      	mov	r3, r0
 801a94e:	461a      	mov	r2, r3
 801a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a952:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a956:	2200      	movs	r2, #0
 801a958:	729a      	strb	r2, [r3, #10]
 801a95a:	2200      	movs	r2, #0
 801a95c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	695b      	ldr	r3, [r3, #20]
 801a962:	687a      	ldr	r2, [r7, #4]
 801a964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a966:	68b8      	ldr	r0, [r7, #8]
 801a968:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a96a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a96c:	f7f7 faf8 	bl	8011f60 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a970:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a976:	1ad3      	subs	r3, r2, r3
 801a978:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a97c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a980:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a982:	4413      	add	r3, r2
 801a984:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a988:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	f47f af1a 	bne.w	801a7c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a992:	2300      	movs	r3, #0
 801a994:	e002      	b.n	801a99c <ip4_frag+0x268>
      goto memerr;
 801a996:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801a99c:	4618      	mov	r0, r3
 801a99e:	3748      	adds	r7, #72	; 0x48
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	0801e598 	.word	0x0801e598
 801a9a8:	0801e774 	.word	0x0801e774
 801a9ac:	0801e5e0 	.word	0x0801e5e0
 801a9b0:	0801e790 	.word	0x0801e790
 801a9b4:	0801e7b0 	.word	0x0801e7b0
 801a9b8:	0801a6cd 	.word	0x0801a6cd

0801a9bc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b086      	sub	sp, #24
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	6078      	str	r0, [r7, #4]
 801a9c4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a9c6:	230e      	movs	r3, #14
 801a9c8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	895b      	ldrh	r3, [r3, #10]
 801a9ce:	2b0e      	cmp	r3, #14
 801a9d0:	d96e      	bls.n	801aab0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	7bdb      	ldrb	r3, [r3, #15]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d106      	bne.n	801a9e8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a9da:	683b      	ldr	r3, [r7, #0]
 801a9dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a9e0:	3301      	adds	r3, #1
 801a9e2:	b2da      	uxtb	r2, r3
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	685b      	ldr	r3, [r3, #4]
 801a9ec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a9ee:	693b      	ldr	r3, [r7, #16]
 801a9f0:	7b1a      	ldrb	r2, [r3, #12]
 801a9f2:	7b5b      	ldrb	r3, [r3, #13]
 801a9f4:	021b      	lsls	r3, r3, #8
 801a9f6:	4313      	orrs	r3, r2
 801a9f8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a9fa:	693b      	ldr	r3, [r7, #16]
 801a9fc:	781b      	ldrb	r3, [r3, #0]
 801a9fe:	f003 0301 	and.w	r3, r3, #1
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d023      	beq.n	801aa4e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801aa06:	693b      	ldr	r3, [r7, #16]
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	2b01      	cmp	r3, #1
 801aa0c:	d10f      	bne.n	801aa2e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aa0e:	693b      	ldr	r3, [r7, #16]
 801aa10:	785b      	ldrb	r3, [r3, #1]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d11b      	bne.n	801aa4e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801aa16:	693b      	ldr	r3, [r7, #16]
 801aa18:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aa1a:	2b5e      	cmp	r3, #94	; 0x5e
 801aa1c:	d117      	bne.n	801aa4e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	7b5b      	ldrb	r3, [r3, #13]
 801aa22:	f043 0310 	orr.w	r3, r3, #16
 801aa26:	b2da      	uxtb	r2, r3
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	735a      	strb	r2, [r3, #13]
 801aa2c:	e00f      	b.n	801aa4e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801aa2e:	693b      	ldr	r3, [r7, #16]
 801aa30:	2206      	movs	r2, #6
 801aa32:	4928      	ldr	r1, [pc, #160]	; (801aad4 <ethernet_input+0x118>)
 801aa34:	4618      	mov	r0, r3
 801aa36:	f000 f9d1 	bl	801addc <memcmp>
 801aa3a:	4603      	mov	r3, r0
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	d106      	bne.n	801aa4e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	7b5b      	ldrb	r3, [r3, #13]
 801aa44:	f043 0308 	orr.w	r3, r3, #8
 801aa48:	b2da      	uxtb	r2, r3
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801aa4e:	89fb      	ldrh	r3, [r7, #14]
 801aa50:	2b08      	cmp	r3, #8
 801aa52:	d003      	beq.n	801aa5c <ethernet_input+0xa0>
 801aa54:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801aa58:	d014      	beq.n	801aa84 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801aa5a:	e032      	b.n	801aac2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aa5c:	683b      	ldr	r3, [r7, #0]
 801aa5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801aa62:	f003 0308 	and.w	r3, r3, #8
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d024      	beq.n	801aab4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aa6a:	8afb      	ldrh	r3, [r7, #22]
 801aa6c:	4619      	mov	r1, r3
 801aa6e:	6878      	ldr	r0, [r7, #4]
 801aa70:	f7f7 f9f0 	bl	8011e54 <pbuf_remove_header>
 801aa74:	4603      	mov	r3, r0
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d11e      	bne.n	801aab8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801aa7a:	6839      	ldr	r1, [r7, #0]
 801aa7c:	6878      	ldr	r0, [r7, #4]
 801aa7e:	f7fe ff2d 	bl	80198dc <ip4_input>
      break;
 801aa82:	e013      	b.n	801aaac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aa84:	683b      	ldr	r3, [r7, #0]
 801aa86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801aa8a:	f003 0308 	and.w	r3, r3, #8
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d014      	beq.n	801aabc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aa92:	8afb      	ldrh	r3, [r7, #22]
 801aa94:	4619      	mov	r1, r3
 801aa96:	6878      	ldr	r0, [r7, #4]
 801aa98:	f7f7 f9dc 	bl	8011e54 <pbuf_remove_header>
 801aa9c:	4603      	mov	r3, r0
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d10e      	bne.n	801aac0 <ethernet_input+0x104>
        etharp_input(p, netif);
 801aaa2:	6839      	ldr	r1, [r7, #0]
 801aaa4:	6878      	ldr	r0, [r7, #4]
 801aaa6:	f7fe f8cd 	bl	8018c44 <etharp_input>
      break;
 801aaaa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801aaac:	2300      	movs	r3, #0
 801aaae:	e00c      	b.n	801aaca <ethernet_input+0x10e>
    goto free_and_return;
 801aab0:	bf00      	nop
 801aab2:	e006      	b.n	801aac2 <ethernet_input+0x106>
        goto free_and_return;
 801aab4:	bf00      	nop
 801aab6:	e004      	b.n	801aac2 <ethernet_input+0x106>
        goto free_and_return;
 801aab8:	bf00      	nop
 801aaba:	e002      	b.n	801aac2 <ethernet_input+0x106>
        goto free_and_return;
 801aabc:	bf00      	nop
 801aabe:	e000      	b.n	801aac2 <ethernet_input+0x106>
        goto free_and_return;
 801aac0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801aac2:	6878      	ldr	r0, [r7, #4]
 801aac4:	f7f7 fa4c 	bl	8011f60 <pbuf_free>
  return ERR_OK;
 801aac8:	2300      	movs	r3, #0
}
 801aaca:	4618      	mov	r0, r3
 801aacc:	3718      	adds	r7, #24
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd80      	pop	{r7, pc}
 801aad2:	bf00      	nop
 801aad4:	0801e998 	.word	0x0801e998

0801aad8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801aad8:	b580      	push	{r7, lr}
 801aada:	b086      	sub	sp, #24
 801aadc:	af00      	add	r7, sp, #0
 801aade:	60f8      	str	r0, [r7, #12]
 801aae0:	60b9      	str	r1, [r7, #8]
 801aae2:	607a      	str	r2, [r7, #4]
 801aae4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801aae6:	8c3b      	ldrh	r3, [r7, #32]
 801aae8:	4618      	mov	r0, r3
 801aaea:	f7f5 fc3d 	bl	8010368 <lwip_htons>
 801aaee:	4603      	mov	r3, r0
 801aaf0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801aaf2:	210e      	movs	r1, #14
 801aaf4:	68b8      	ldr	r0, [r7, #8]
 801aaf6:	f7f7 f99d 	bl	8011e34 <pbuf_add_header>
 801aafa:	4603      	mov	r3, r0
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d125      	bne.n	801ab4c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ab00:	68bb      	ldr	r3, [r7, #8]
 801ab02:	685b      	ldr	r3, [r3, #4]
 801ab04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ab06:	693b      	ldr	r3, [r7, #16]
 801ab08:	8afa      	ldrh	r2, [r7, #22]
 801ab0a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ab0c:	693b      	ldr	r3, [r7, #16]
 801ab0e:	2206      	movs	r2, #6
 801ab10:	6839      	ldr	r1, [r7, #0]
 801ab12:	4618      	mov	r0, r3
 801ab14:	f000 f971 	bl	801adfa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ab18:	693b      	ldr	r3, [r7, #16]
 801ab1a:	3306      	adds	r3, #6
 801ab1c:	2206      	movs	r2, #6
 801ab1e:	6879      	ldr	r1, [r7, #4]
 801ab20:	4618      	mov	r0, r3
 801ab22:	f000 f96a 	bl	801adfa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ab2c:	2b06      	cmp	r3, #6
 801ab2e:	d006      	beq.n	801ab3e <ethernet_output+0x66>
 801ab30:	4b0a      	ldr	r3, [pc, #40]	; (801ab5c <ethernet_output+0x84>)
 801ab32:	f240 1233 	movw	r2, #307	; 0x133
 801ab36:	490a      	ldr	r1, [pc, #40]	; (801ab60 <ethernet_output+0x88>)
 801ab38:	480a      	ldr	r0, [pc, #40]	; (801ab64 <ethernet_output+0x8c>)
 801ab3a:	f000 f971 	bl	801ae20 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	699b      	ldr	r3, [r3, #24]
 801ab42:	68b9      	ldr	r1, [r7, #8]
 801ab44:	68f8      	ldr	r0, [r7, #12]
 801ab46:	4798      	blx	r3
 801ab48:	4603      	mov	r3, r0
 801ab4a:	e002      	b.n	801ab52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ab4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ab4e:	f06f 0301 	mvn.w	r3, #1
}
 801ab52:	4618      	mov	r0, r3
 801ab54:	3718      	adds	r7, #24
 801ab56:	46bd      	mov	sp, r7
 801ab58:	bd80      	pop	{r7, pc}
 801ab5a:	bf00      	nop
 801ab5c:	0801e7c0 	.word	0x0801e7c0
 801ab60:	0801e7f8 	.word	0x0801e7f8
 801ab64:	0801e82c 	.word	0x0801e82c

0801ab68 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	b086      	sub	sp, #24
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
 801ab70:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	60bb      	str	r3, [r7, #8]
 801ab76:	2304      	movs	r3, #4
 801ab78:	60fb      	str	r3, [r7, #12]
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	613b      	str	r3, [r7, #16]
 801ab7e:	2300      	movs	r3, #0
 801ab80:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ab82:	f107 0308 	add.w	r3, r7, #8
 801ab86:	2100      	movs	r1, #0
 801ab88:	4618      	mov	r0, r3
 801ab8a:	f7f2 fd51 	bl	800d630 <osMessageCreate>
 801ab8e:	4602      	mov	r2, r0
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d102      	bne.n	801aba2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801ab9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aba0:	e000      	b.n	801aba4 <sys_mbox_new+0x3c>

  return ERR_OK;
 801aba2:	2300      	movs	r3, #0
}
 801aba4:	4618      	mov	r0, r3
 801aba6:	3718      	adds	r7, #24
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}

0801abac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b084      	sub	sp, #16
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
 801abb4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	6839      	ldr	r1, [r7, #0]
 801abbc:	2200      	movs	r2, #0
 801abbe:	4618      	mov	r0, r3
 801abc0:	f7f2 fd60 	bl	800d684 <osMessagePut>
 801abc4:	4603      	mov	r3, r0
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d102      	bne.n	801abd0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801abca:	2300      	movs	r3, #0
 801abcc:	73fb      	strb	r3, [r7, #15]
 801abce:	e001      	b.n	801abd4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801abd0:	23ff      	movs	r3, #255	; 0xff
 801abd2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801abd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801abd8:	4618      	mov	r0, r3
 801abda:	3710      	adds	r7, #16
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}

0801abe0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b08c      	sub	sp, #48	; 0x30
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	61f8      	str	r0, [r7, #28]
 801abe8:	61b9      	str	r1, [r7, #24]
 801abea:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801abec:	f7f2 fb70 	bl	800d2d0 <osKernelSysTick>
 801abf0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801abf2:	697b      	ldr	r3, [r7, #20]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d017      	beq.n	801ac28 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801abf8:	69fb      	ldr	r3, [r7, #28]
 801abfa:	6819      	ldr	r1, [r3, #0]
 801abfc:	f107 0320 	add.w	r3, r7, #32
 801ac00:	697a      	ldr	r2, [r7, #20]
 801ac02:	4618      	mov	r0, r3
 801ac04:	f7f2 fd7e 	bl	800d704 <osMessageGet>

    if(event.status == osEventMessage)
 801ac08:	6a3b      	ldr	r3, [r7, #32]
 801ac0a:	2b10      	cmp	r3, #16
 801ac0c:	d109      	bne.n	801ac22 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac10:	461a      	mov	r2, r3
 801ac12:	69bb      	ldr	r3, [r7, #24]
 801ac14:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ac16:	f7f2 fb5b 	bl	800d2d0 <osKernelSysTick>
 801ac1a:	4602      	mov	r2, r0
 801ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac1e:	1ad3      	subs	r3, r2, r3
 801ac20:	e019      	b.n	801ac56 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ac22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac26:	e016      	b.n	801ac56 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ac28:	69fb      	ldr	r3, [r7, #28]
 801ac2a:	6819      	ldr	r1, [r3, #0]
 801ac2c:	463b      	mov	r3, r7
 801ac2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ac32:	4618      	mov	r0, r3
 801ac34:	f7f2 fd66 	bl	800d704 <osMessageGet>
 801ac38:	f107 0320 	add.w	r3, r7, #32
 801ac3c:	463a      	mov	r2, r7
 801ac3e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ac40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac46:	461a      	mov	r2, r3
 801ac48:	69bb      	ldr	r3, [r7, #24]
 801ac4a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ac4c:	f7f2 fb40 	bl	800d2d0 <osKernelSysTick>
 801ac50:	4602      	mov	r2, r0
 801ac52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac54:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ac56:	4618      	mov	r0, r3
 801ac58:	3730      	adds	r7, #48	; 0x30
 801ac5a:	46bd      	mov	sp, r7
 801ac5c:	bd80      	pop	{r7, pc}

0801ac5e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ac5e:	b480      	push	{r7}
 801ac60:	b083      	sub	sp, #12
 801ac62:	af00      	add	r7, sp, #0
 801ac64:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d101      	bne.n	801ac72 <sys_mbox_valid+0x14>
    return 0;
 801ac6e:	2300      	movs	r3, #0
 801ac70:	e000      	b.n	801ac74 <sys_mbox_valid+0x16>
  else
    return 1;
 801ac72:	2301      	movs	r3, #1
}
 801ac74:	4618      	mov	r0, r3
 801ac76:	370c      	adds	r7, #12
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac7e:	4770      	bx	lr

0801ac80 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ac80:	b580      	push	{r7, lr}
 801ac82:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ac84:	4803      	ldr	r0, [pc, #12]	; (801ac94 <sys_init+0x14>)
 801ac86:	f7f2 fb7f 	bl	800d388 <osMutexCreate>
 801ac8a:	4602      	mov	r2, r0
 801ac8c:	4b02      	ldr	r3, [pc, #8]	; (801ac98 <sys_init+0x18>)
 801ac8e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801ac90:	bf00      	nop
 801ac92:	bd80      	pop	{r7, pc}
 801ac94:	0801e9a8 	.word	0x0801e9a8
 801ac98:	2000b4e4 	.word	0x2000b4e4

0801ac9c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b084      	sub	sp, #16
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801aca4:	2300      	movs	r3, #0
 801aca6:	60bb      	str	r3, [r7, #8]
 801aca8:	2300      	movs	r3, #0
 801acaa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801acac:	f107 0308 	add.w	r3, r7, #8
 801acb0:	4618      	mov	r0, r3
 801acb2:	f7f2 fb69 	bl	800d388 <osMutexCreate>
 801acb6:	4602      	mov	r2, r0
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d102      	bne.n	801acca <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801acc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801acc8:	e000      	b.n	801accc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801acca:	2300      	movs	r3, #0
}
 801accc:	4618      	mov	r0, r3
 801acce:	3710      	adds	r7, #16
 801acd0:	46bd      	mov	sp, r7
 801acd2:	bd80      	pop	{r7, pc}

0801acd4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b082      	sub	sp, #8
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ace4:	4618      	mov	r0, r3
 801ace6:	f7f2 fb67 	bl	800d3b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801acea:	bf00      	nop
 801acec:	3708      	adds	r7, #8
 801acee:	46bd      	mov	sp, r7
 801acf0:	bd80      	pop	{r7, pc}

0801acf2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801acf2:	b580      	push	{r7, lr}
 801acf4:	b082      	sub	sp, #8
 801acf6:	af00      	add	r7, sp, #0
 801acf8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	4618      	mov	r0, r3
 801ad00:	f7f2 fba8 	bl	800d454 <osMutexRelease>
}
 801ad04:	bf00      	nop
 801ad06:	3708      	adds	r7, #8
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd80      	pop	{r7, pc}

0801ad0c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b08c      	sub	sp, #48	; 0x30
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	60f8      	str	r0, [r7, #12]
 801ad14:	60b9      	str	r1, [r7, #8]
 801ad16:	607a      	str	r2, [r7, #4]
 801ad18:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801ad1a:	f107 0314 	add.w	r3, r7, #20
 801ad1e:	2200      	movs	r2, #0
 801ad20:	601a      	str	r2, [r3, #0]
 801ad22:	605a      	str	r2, [r3, #4]
 801ad24:	609a      	str	r2, [r3, #8]
 801ad26:	60da      	str	r2, [r3, #12]
 801ad28:	611a      	str	r2, [r3, #16]
 801ad2a:	615a      	str	r2, [r3, #20]
 801ad2c:	619a      	str	r2, [r3, #24]
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	617b      	str	r3, [r7, #20]
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	61bb      	str	r3, [r7, #24]
 801ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ad38:	b21b      	sxth	r3, r3
 801ad3a:	83bb      	strh	r3, [r7, #28]
 801ad3c:	683b      	ldr	r3, [r7, #0]
 801ad3e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801ad40:	f107 0314 	add.w	r3, r7, #20
 801ad44:	6879      	ldr	r1, [r7, #4]
 801ad46:	4618      	mov	r0, r3
 801ad48:	f7f2 fad2 	bl	800d2f0 <osThreadCreate>
 801ad4c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801ad4e:	4618      	mov	r0, r3
 801ad50:	3730      	adds	r7, #48	; 0x30
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}
	...

0801ad58 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801ad5c:	4b04      	ldr	r3, [pc, #16]	; (801ad70 <sys_arch_protect+0x18>)
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801ad64:	4618      	mov	r0, r3
 801ad66:	f7f2 fb27 	bl	800d3b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801ad6a:	2301      	movs	r3, #1
}
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	bd80      	pop	{r7, pc}
 801ad70:	2000b4e4 	.word	0x2000b4e4

0801ad74 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b082      	sub	sp, #8
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ad7c:	4b04      	ldr	r3, [pc, #16]	; (801ad90 <sys_arch_unprotect+0x1c>)
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	4618      	mov	r0, r3
 801ad82:	f7f2 fb67 	bl	800d454 <osMutexRelease>
}
 801ad86:	bf00      	nop
 801ad88:	3708      	adds	r7, #8
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	bd80      	pop	{r7, pc}
 801ad8e:	bf00      	nop
 801ad90:	2000b4e4 	.word	0x2000b4e4

0801ad94 <__libc_init_array>:
 801ad94:	b570      	push	{r4, r5, r6, lr}
 801ad96:	4e0d      	ldr	r6, [pc, #52]	; (801adcc <__libc_init_array+0x38>)
 801ad98:	4c0d      	ldr	r4, [pc, #52]	; (801add0 <__libc_init_array+0x3c>)
 801ad9a:	1ba4      	subs	r4, r4, r6
 801ad9c:	10a4      	asrs	r4, r4, #2
 801ad9e:	2500      	movs	r5, #0
 801ada0:	42a5      	cmp	r5, r4
 801ada2:	d109      	bne.n	801adb8 <__libc_init_array+0x24>
 801ada4:	4e0b      	ldr	r6, [pc, #44]	; (801add4 <__libc_init_array+0x40>)
 801ada6:	4c0c      	ldr	r4, [pc, #48]	; (801add8 <__libc_init_array+0x44>)
 801ada8:	f000 ff5a 	bl	801bc60 <_init>
 801adac:	1ba4      	subs	r4, r4, r6
 801adae:	10a4      	asrs	r4, r4, #2
 801adb0:	2500      	movs	r5, #0
 801adb2:	42a5      	cmp	r5, r4
 801adb4:	d105      	bne.n	801adc2 <__libc_init_array+0x2e>
 801adb6:	bd70      	pop	{r4, r5, r6, pc}
 801adb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801adbc:	4798      	blx	r3
 801adbe:	3501      	adds	r5, #1
 801adc0:	e7ee      	b.n	801ada0 <__libc_init_array+0xc>
 801adc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801adc6:	4798      	blx	r3
 801adc8:	3501      	adds	r5, #1
 801adca:	e7f2      	b.n	801adb2 <__libc_init_array+0x1e>
 801adcc:	0801ea50 	.word	0x0801ea50
 801add0:	0801ea50 	.word	0x0801ea50
 801add4:	0801ea50 	.word	0x0801ea50
 801add8:	0801ea54 	.word	0x0801ea54

0801addc <memcmp>:
 801addc:	b530      	push	{r4, r5, lr}
 801adde:	2400      	movs	r4, #0
 801ade0:	42a2      	cmp	r2, r4
 801ade2:	d101      	bne.n	801ade8 <memcmp+0xc>
 801ade4:	2000      	movs	r0, #0
 801ade6:	e007      	b.n	801adf8 <memcmp+0x1c>
 801ade8:	5d03      	ldrb	r3, [r0, r4]
 801adea:	3401      	adds	r4, #1
 801adec:	190d      	adds	r5, r1, r4
 801adee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801adf2:	42ab      	cmp	r3, r5
 801adf4:	d0f4      	beq.n	801ade0 <memcmp+0x4>
 801adf6:	1b58      	subs	r0, r3, r5
 801adf8:	bd30      	pop	{r4, r5, pc}

0801adfa <memcpy>:
 801adfa:	b510      	push	{r4, lr}
 801adfc:	1e43      	subs	r3, r0, #1
 801adfe:	440a      	add	r2, r1
 801ae00:	4291      	cmp	r1, r2
 801ae02:	d100      	bne.n	801ae06 <memcpy+0xc>
 801ae04:	bd10      	pop	{r4, pc}
 801ae06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ae0e:	e7f7      	b.n	801ae00 <memcpy+0x6>

0801ae10 <memset>:
 801ae10:	4402      	add	r2, r0
 801ae12:	4603      	mov	r3, r0
 801ae14:	4293      	cmp	r3, r2
 801ae16:	d100      	bne.n	801ae1a <memset+0xa>
 801ae18:	4770      	bx	lr
 801ae1a:	f803 1b01 	strb.w	r1, [r3], #1
 801ae1e:	e7f9      	b.n	801ae14 <memset+0x4>

0801ae20 <iprintf>:
 801ae20:	b40f      	push	{r0, r1, r2, r3}
 801ae22:	4b0a      	ldr	r3, [pc, #40]	; (801ae4c <iprintf+0x2c>)
 801ae24:	b513      	push	{r0, r1, r4, lr}
 801ae26:	681c      	ldr	r4, [r3, #0]
 801ae28:	b124      	cbz	r4, 801ae34 <iprintf+0x14>
 801ae2a:	69a3      	ldr	r3, [r4, #24]
 801ae2c:	b913      	cbnz	r3, 801ae34 <iprintf+0x14>
 801ae2e:	4620      	mov	r0, r4
 801ae30:	f000 f882 	bl	801af38 <__sinit>
 801ae34:	ab05      	add	r3, sp, #20
 801ae36:	9a04      	ldr	r2, [sp, #16]
 801ae38:	68a1      	ldr	r1, [r4, #8]
 801ae3a:	9301      	str	r3, [sp, #4]
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	f000 f9df 	bl	801b200 <_vfiprintf_r>
 801ae42:	b002      	add	sp, #8
 801ae44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae48:	b004      	add	sp, #16
 801ae4a:	4770      	bx	lr
 801ae4c:	2000005c 	.word	0x2000005c

0801ae50 <rand>:
 801ae50:	b538      	push	{r3, r4, r5, lr}
 801ae52:	4b13      	ldr	r3, [pc, #76]	; (801aea0 <rand+0x50>)
 801ae54:	681c      	ldr	r4, [r3, #0]
 801ae56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ae58:	b97b      	cbnz	r3, 801ae7a <rand+0x2a>
 801ae5a:	2018      	movs	r0, #24
 801ae5c:	f000 f8f6 	bl	801b04c <malloc>
 801ae60:	4a10      	ldr	r2, [pc, #64]	; (801aea4 <rand+0x54>)
 801ae62:	4b11      	ldr	r3, [pc, #68]	; (801aea8 <rand+0x58>)
 801ae64:	63a0      	str	r0, [r4, #56]	; 0x38
 801ae66:	e9c0 2300 	strd	r2, r3, [r0]
 801ae6a:	4b10      	ldr	r3, [pc, #64]	; (801aeac <rand+0x5c>)
 801ae6c:	6083      	str	r3, [r0, #8]
 801ae6e:	230b      	movs	r3, #11
 801ae70:	8183      	strh	r3, [r0, #12]
 801ae72:	2201      	movs	r2, #1
 801ae74:	2300      	movs	r3, #0
 801ae76:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ae7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ae7c:	480c      	ldr	r0, [pc, #48]	; (801aeb0 <rand+0x60>)
 801ae7e:	690a      	ldr	r2, [r1, #16]
 801ae80:	694b      	ldr	r3, [r1, #20]
 801ae82:	4c0c      	ldr	r4, [pc, #48]	; (801aeb4 <rand+0x64>)
 801ae84:	4350      	muls	r0, r2
 801ae86:	fb04 0003 	mla	r0, r4, r3, r0
 801ae8a:	fba2 2304 	umull	r2, r3, r2, r4
 801ae8e:	4403      	add	r3, r0
 801ae90:	1c54      	adds	r4, r2, #1
 801ae92:	f143 0500 	adc.w	r5, r3, #0
 801ae96:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801ae9a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801ae9e:	bd38      	pop	{r3, r4, r5, pc}
 801aea0:	2000005c 	.word	0x2000005c
 801aea4:	abcd330e 	.word	0xabcd330e
 801aea8:	e66d1234 	.word	0xe66d1234
 801aeac:	0005deec 	.word	0x0005deec
 801aeb0:	5851f42d 	.word	0x5851f42d
 801aeb4:	4c957f2d 	.word	0x4c957f2d

0801aeb8 <std>:
 801aeb8:	2300      	movs	r3, #0
 801aeba:	b510      	push	{r4, lr}
 801aebc:	4604      	mov	r4, r0
 801aebe:	e9c0 3300 	strd	r3, r3, [r0]
 801aec2:	6083      	str	r3, [r0, #8]
 801aec4:	8181      	strh	r1, [r0, #12]
 801aec6:	6643      	str	r3, [r0, #100]	; 0x64
 801aec8:	81c2      	strh	r2, [r0, #14]
 801aeca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aece:	6183      	str	r3, [r0, #24]
 801aed0:	4619      	mov	r1, r3
 801aed2:	2208      	movs	r2, #8
 801aed4:	305c      	adds	r0, #92	; 0x5c
 801aed6:	f7ff ff9b 	bl	801ae10 <memset>
 801aeda:	4b05      	ldr	r3, [pc, #20]	; (801aef0 <std+0x38>)
 801aedc:	6263      	str	r3, [r4, #36]	; 0x24
 801aede:	4b05      	ldr	r3, [pc, #20]	; (801aef4 <std+0x3c>)
 801aee0:	62a3      	str	r3, [r4, #40]	; 0x28
 801aee2:	4b05      	ldr	r3, [pc, #20]	; (801aef8 <std+0x40>)
 801aee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aee6:	4b05      	ldr	r3, [pc, #20]	; (801aefc <std+0x44>)
 801aee8:	6224      	str	r4, [r4, #32]
 801aeea:	6323      	str	r3, [r4, #48]	; 0x30
 801aeec:	bd10      	pop	{r4, pc}
 801aeee:	bf00      	nop
 801aef0:	0801b75d 	.word	0x0801b75d
 801aef4:	0801b77f 	.word	0x0801b77f
 801aef8:	0801b7b7 	.word	0x0801b7b7
 801aefc:	0801b7db 	.word	0x0801b7db

0801af00 <_cleanup_r>:
 801af00:	4901      	ldr	r1, [pc, #4]	; (801af08 <_cleanup_r+0x8>)
 801af02:	f000 b885 	b.w	801b010 <_fwalk_reent>
 801af06:	bf00      	nop
 801af08:	0801bab5 	.word	0x0801bab5

0801af0c <__sfmoreglue>:
 801af0c:	b570      	push	{r4, r5, r6, lr}
 801af0e:	1e4a      	subs	r2, r1, #1
 801af10:	2568      	movs	r5, #104	; 0x68
 801af12:	4355      	muls	r5, r2
 801af14:	460e      	mov	r6, r1
 801af16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801af1a:	f000 f8ed 	bl	801b0f8 <_malloc_r>
 801af1e:	4604      	mov	r4, r0
 801af20:	b140      	cbz	r0, 801af34 <__sfmoreglue+0x28>
 801af22:	2100      	movs	r1, #0
 801af24:	e9c0 1600 	strd	r1, r6, [r0]
 801af28:	300c      	adds	r0, #12
 801af2a:	60a0      	str	r0, [r4, #8]
 801af2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801af30:	f7ff ff6e 	bl	801ae10 <memset>
 801af34:	4620      	mov	r0, r4
 801af36:	bd70      	pop	{r4, r5, r6, pc}

0801af38 <__sinit>:
 801af38:	6983      	ldr	r3, [r0, #24]
 801af3a:	b510      	push	{r4, lr}
 801af3c:	4604      	mov	r4, r0
 801af3e:	bb33      	cbnz	r3, 801af8e <__sinit+0x56>
 801af40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801af44:	6503      	str	r3, [r0, #80]	; 0x50
 801af46:	4b12      	ldr	r3, [pc, #72]	; (801af90 <__sinit+0x58>)
 801af48:	4a12      	ldr	r2, [pc, #72]	; (801af94 <__sinit+0x5c>)
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	6282      	str	r2, [r0, #40]	; 0x28
 801af4e:	4298      	cmp	r0, r3
 801af50:	bf04      	itt	eq
 801af52:	2301      	moveq	r3, #1
 801af54:	6183      	streq	r3, [r0, #24]
 801af56:	f000 f81f 	bl	801af98 <__sfp>
 801af5a:	6060      	str	r0, [r4, #4]
 801af5c:	4620      	mov	r0, r4
 801af5e:	f000 f81b 	bl	801af98 <__sfp>
 801af62:	60a0      	str	r0, [r4, #8]
 801af64:	4620      	mov	r0, r4
 801af66:	f000 f817 	bl	801af98 <__sfp>
 801af6a:	2200      	movs	r2, #0
 801af6c:	60e0      	str	r0, [r4, #12]
 801af6e:	2104      	movs	r1, #4
 801af70:	6860      	ldr	r0, [r4, #4]
 801af72:	f7ff ffa1 	bl	801aeb8 <std>
 801af76:	2201      	movs	r2, #1
 801af78:	2109      	movs	r1, #9
 801af7a:	68a0      	ldr	r0, [r4, #8]
 801af7c:	f7ff ff9c 	bl	801aeb8 <std>
 801af80:	2202      	movs	r2, #2
 801af82:	2112      	movs	r1, #18
 801af84:	68e0      	ldr	r0, [r4, #12]
 801af86:	f7ff ff97 	bl	801aeb8 <std>
 801af8a:	2301      	movs	r3, #1
 801af8c:	61a3      	str	r3, [r4, #24]
 801af8e:	bd10      	pop	{r4, pc}
 801af90:	0801e9b0 	.word	0x0801e9b0
 801af94:	0801af01 	.word	0x0801af01

0801af98 <__sfp>:
 801af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af9a:	4b1b      	ldr	r3, [pc, #108]	; (801b008 <__sfp+0x70>)
 801af9c:	681e      	ldr	r6, [r3, #0]
 801af9e:	69b3      	ldr	r3, [r6, #24]
 801afa0:	4607      	mov	r7, r0
 801afa2:	b913      	cbnz	r3, 801afaa <__sfp+0x12>
 801afa4:	4630      	mov	r0, r6
 801afa6:	f7ff ffc7 	bl	801af38 <__sinit>
 801afaa:	3648      	adds	r6, #72	; 0x48
 801afac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801afb0:	3b01      	subs	r3, #1
 801afb2:	d503      	bpl.n	801afbc <__sfp+0x24>
 801afb4:	6833      	ldr	r3, [r6, #0]
 801afb6:	b133      	cbz	r3, 801afc6 <__sfp+0x2e>
 801afb8:	6836      	ldr	r6, [r6, #0]
 801afba:	e7f7      	b.n	801afac <__sfp+0x14>
 801afbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801afc0:	b16d      	cbz	r5, 801afde <__sfp+0x46>
 801afc2:	3468      	adds	r4, #104	; 0x68
 801afc4:	e7f4      	b.n	801afb0 <__sfp+0x18>
 801afc6:	2104      	movs	r1, #4
 801afc8:	4638      	mov	r0, r7
 801afca:	f7ff ff9f 	bl	801af0c <__sfmoreglue>
 801afce:	6030      	str	r0, [r6, #0]
 801afd0:	2800      	cmp	r0, #0
 801afd2:	d1f1      	bne.n	801afb8 <__sfp+0x20>
 801afd4:	230c      	movs	r3, #12
 801afd6:	603b      	str	r3, [r7, #0]
 801afd8:	4604      	mov	r4, r0
 801afda:	4620      	mov	r0, r4
 801afdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afde:	4b0b      	ldr	r3, [pc, #44]	; (801b00c <__sfp+0x74>)
 801afe0:	6665      	str	r5, [r4, #100]	; 0x64
 801afe2:	e9c4 5500 	strd	r5, r5, [r4]
 801afe6:	60a5      	str	r5, [r4, #8]
 801afe8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801afec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801aff0:	2208      	movs	r2, #8
 801aff2:	4629      	mov	r1, r5
 801aff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aff8:	f7ff ff0a 	bl	801ae10 <memset>
 801affc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b004:	e7e9      	b.n	801afda <__sfp+0x42>
 801b006:	bf00      	nop
 801b008:	0801e9b0 	.word	0x0801e9b0
 801b00c:	ffff0001 	.word	0xffff0001

0801b010 <_fwalk_reent>:
 801b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b014:	4680      	mov	r8, r0
 801b016:	4689      	mov	r9, r1
 801b018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b01c:	2600      	movs	r6, #0
 801b01e:	b914      	cbnz	r4, 801b026 <_fwalk_reent+0x16>
 801b020:	4630      	mov	r0, r6
 801b022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b026:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801b02a:	3f01      	subs	r7, #1
 801b02c:	d501      	bpl.n	801b032 <_fwalk_reent+0x22>
 801b02e:	6824      	ldr	r4, [r4, #0]
 801b030:	e7f5      	b.n	801b01e <_fwalk_reent+0xe>
 801b032:	89ab      	ldrh	r3, [r5, #12]
 801b034:	2b01      	cmp	r3, #1
 801b036:	d907      	bls.n	801b048 <_fwalk_reent+0x38>
 801b038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b03c:	3301      	adds	r3, #1
 801b03e:	d003      	beq.n	801b048 <_fwalk_reent+0x38>
 801b040:	4629      	mov	r1, r5
 801b042:	4640      	mov	r0, r8
 801b044:	47c8      	blx	r9
 801b046:	4306      	orrs	r6, r0
 801b048:	3568      	adds	r5, #104	; 0x68
 801b04a:	e7ee      	b.n	801b02a <_fwalk_reent+0x1a>

0801b04c <malloc>:
 801b04c:	4b02      	ldr	r3, [pc, #8]	; (801b058 <malloc+0xc>)
 801b04e:	4601      	mov	r1, r0
 801b050:	6818      	ldr	r0, [r3, #0]
 801b052:	f000 b851 	b.w	801b0f8 <_malloc_r>
 801b056:	bf00      	nop
 801b058:	2000005c 	.word	0x2000005c

0801b05c <_free_r>:
 801b05c:	b538      	push	{r3, r4, r5, lr}
 801b05e:	4605      	mov	r5, r0
 801b060:	2900      	cmp	r1, #0
 801b062:	d045      	beq.n	801b0f0 <_free_r+0x94>
 801b064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b068:	1f0c      	subs	r4, r1, #4
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	bfb8      	it	lt
 801b06e:	18e4      	addlt	r4, r4, r3
 801b070:	f000 fdc0 	bl	801bbf4 <__malloc_lock>
 801b074:	4a1f      	ldr	r2, [pc, #124]	; (801b0f4 <_free_r+0x98>)
 801b076:	6813      	ldr	r3, [r2, #0]
 801b078:	4610      	mov	r0, r2
 801b07a:	b933      	cbnz	r3, 801b08a <_free_r+0x2e>
 801b07c:	6063      	str	r3, [r4, #4]
 801b07e:	6014      	str	r4, [r2, #0]
 801b080:	4628      	mov	r0, r5
 801b082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b086:	f000 bdb6 	b.w	801bbf6 <__malloc_unlock>
 801b08a:	42a3      	cmp	r3, r4
 801b08c:	d90c      	bls.n	801b0a8 <_free_r+0x4c>
 801b08e:	6821      	ldr	r1, [r4, #0]
 801b090:	1862      	adds	r2, r4, r1
 801b092:	4293      	cmp	r3, r2
 801b094:	bf04      	itt	eq
 801b096:	681a      	ldreq	r2, [r3, #0]
 801b098:	685b      	ldreq	r3, [r3, #4]
 801b09a:	6063      	str	r3, [r4, #4]
 801b09c:	bf04      	itt	eq
 801b09e:	1852      	addeq	r2, r2, r1
 801b0a0:	6022      	streq	r2, [r4, #0]
 801b0a2:	6004      	str	r4, [r0, #0]
 801b0a4:	e7ec      	b.n	801b080 <_free_r+0x24>
 801b0a6:	4613      	mov	r3, r2
 801b0a8:	685a      	ldr	r2, [r3, #4]
 801b0aa:	b10a      	cbz	r2, 801b0b0 <_free_r+0x54>
 801b0ac:	42a2      	cmp	r2, r4
 801b0ae:	d9fa      	bls.n	801b0a6 <_free_r+0x4a>
 801b0b0:	6819      	ldr	r1, [r3, #0]
 801b0b2:	1858      	adds	r0, r3, r1
 801b0b4:	42a0      	cmp	r0, r4
 801b0b6:	d10b      	bne.n	801b0d0 <_free_r+0x74>
 801b0b8:	6820      	ldr	r0, [r4, #0]
 801b0ba:	4401      	add	r1, r0
 801b0bc:	1858      	adds	r0, r3, r1
 801b0be:	4282      	cmp	r2, r0
 801b0c0:	6019      	str	r1, [r3, #0]
 801b0c2:	d1dd      	bne.n	801b080 <_free_r+0x24>
 801b0c4:	6810      	ldr	r0, [r2, #0]
 801b0c6:	6852      	ldr	r2, [r2, #4]
 801b0c8:	605a      	str	r2, [r3, #4]
 801b0ca:	4401      	add	r1, r0
 801b0cc:	6019      	str	r1, [r3, #0]
 801b0ce:	e7d7      	b.n	801b080 <_free_r+0x24>
 801b0d0:	d902      	bls.n	801b0d8 <_free_r+0x7c>
 801b0d2:	230c      	movs	r3, #12
 801b0d4:	602b      	str	r3, [r5, #0]
 801b0d6:	e7d3      	b.n	801b080 <_free_r+0x24>
 801b0d8:	6820      	ldr	r0, [r4, #0]
 801b0da:	1821      	adds	r1, r4, r0
 801b0dc:	428a      	cmp	r2, r1
 801b0de:	bf04      	itt	eq
 801b0e0:	6811      	ldreq	r1, [r2, #0]
 801b0e2:	6852      	ldreq	r2, [r2, #4]
 801b0e4:	6062      	str	r2, [r4, #4]
 801b0e6:	bf04      	itt	eq
 801b0e8:	1809      	addeq	r1, r1, r0
 801b0ea:	6021      	streq	r1, [r4, #0]
 801b0ec:	605c      	str	r4, [r3, #4]
 801b0ee:	e7c7      	b.n	801b080 <_free_r+0x24>
 801b0f0:	bd38      	pop	{r3, r4, r5, pc}
 801b0f2:	bf00      	nop
 801b0f4:	200046a0 	.word	0x200046a0

0801b0f8 <_malloc_r>:
 801b0f8:	b570      	push	{r4, r5, r6, lr}
 801b0fa:	1ccd      	adds	r5, r1, #3
 801b0fc:	f025 0503 	bic.w	r5, r5, #3
 801b100:	3508      	adds	r5, #8
 801b102:	2d0c      	cmp	r5, #12
 801b104:	bf38      	it	cc
 801b106:	250c      	movcc	r5, #12
 801b108:	2d00      	cmp	r5, #0
 801b10a:	4606      	mov	r6, r0
 801b10c:	db01      	blt.n	801b112 <_malloc_r+0x1a>
 801b10e:	42a9      	cmp	r1, r5
 801b110:	d903      	bls.n	801b11a <_malloc_r+0x22>
 801b112:	230c      	movs	r3, #12
 801b114:	6033      	str	r3, [r6, #0]
 801b116:	2000      	movs	r0, #0
 801b118:	bd70      	pop	{r4, r5, r6, pc}
 801b11a:	f000 fd6b 	bl	801bbf4 <__malloc_lock>
 801b11e:	4a21      	ldr	r2, [pc, #132]	; (801b1a4 <_malloc_r+0xac>)
 801b120:	6814      	ldr	r4, [r2, #0]
 801b122:	4621      	mov	r1, r4
 801b124:	b991      	cbnz	r1, 801b14c <_malloc_r+0x54>
 801b126:	4c20      	ldr	r4, [pc, #128]	; (801b1a8 <_malloc_r+0xb0>)
 801b128:	6823      	ldr	r3, [r4, #0]
 801b12a:	b91b      	cbnz	r3, 801b134 <_malloc_r+0x3c>
 801b12c:	4630      	mov	r0, r6
 801b12e:	f000 fb05 	bl	801b73c <_sbrk_r>
 801b132:	6020      	str	r0, [r4, #0]
 801b134:	4629      	mov	r1, r5
 801b136:	4630      	mov	r0, r6
 801b138:	f000 fb00 	bl	801b73c <_sbrk_r>
 801b13c:	1c43      	adds	r3, r0, #1
 801b13e:	d124      	bne.n	801b18a <_malloc_r+0x92>
 801b140:	230c      	movs	r3, #12
 801b142:	6033      	str	r3, [r6, #0]
 801b144:	4630      	mov	r0, r6
 801b146:	f000 fd56 	bl	801bbf6 <__malloc_unlock>
 801b14a:	e7e4      	b.n	801b116 <_malloc_r+0x1e>
 801b14c:	680b      	ldr	r3, [r1, #0]
 801b14e:	1b5b      	subs	r3, r3, r5
 801b150:	d418      	bmi.n	801b184 <_malloc_r+0x8c>
 801b152:	2b0b      	cmp	r3, #11
 801b154:	d90f      	bls.n	801b176 <_malloc_r+0x7e>
 801b156:	600b      	str	r3, [r1, #0]
 801b158:	50cd      	str	r5, [r1, r3]
 801b15a:	18cc      	adds	r4, r1, r3
 801b15c:	4630      	mov	r0, r6
 801b15e:	f000 fd4a 	bl	801bbf6 <__malloc_unlock>
 801b162:	f104 000b 	add.w	r0, r4, #11
 801b166:	1d23      	adds	r3, r4, #4
 801b168:	f020 0007 	bic.w	r0, r0, #7
 801b16c:	1ac3      	subs	r3, r0, r3
 801b16e:	d0d3      	beq.n	801b118 <_malloc_r+0x20>
 801b170:	425a      	negs	r2, r3
 801b172:	50e2      	str	r2, [r4, r3]
 801b174:	e7d0      	b.n	801b118 <_malloc_r+0x20>
 801b176:	428c      	cmp	r4, r1
 801b178:	684b      	ldr	r3, [r1, #4]
 801b17a:	bf16      	itet	ne
 801b17c:	6063      	strne	r3, [r4, #4]
 801b17e:	6013      	streq	r3, [r2, #0]
 801b180:	460c      	movne	r4, r1
 801b182:	e7eb      	b.n	801b15c <_malloc_r+0x64>
 801b184:	460c      	mov	r4, r1
 801b186:	6849      	ldr	r1, [r1, #4]
 801b188:	e7cc      	b.n	801b124 <_malloc_r+0x2c>
 801b18a:	1cc4      	adds	r4, r0, #3
 801b18c:	f024 0403 	bic.w	r4, r4, #3
 801b190:	42a0      	cmp	r0, r4
 801b192:	d005      	beq.n	801b1a0 <_malloc_r+0xa8>
 801b194:	1a21      	subs	r1, r4, r0
 801b196:	4630      	mov	r0, r6
 801b198:	f000 fad0 	bl	801b73c <_sbrk_r>
 801b19c:	3001      	adds	r0, #1
 801b19e:	d0cf      	beq.n	801b140 <_malloc_r+0x48>
 801b1a0:	6025      	str	r5, [r4, #0]
 801b1a2:	e7db      	b.n	801b15c <_malloc_r+0x64>
 801b1a4:	200046a0 	.word	0x200046a0
 801b1a8:	200046a4 	.word	0x200046a4

0801b1ac <__sfputc_r>:
 801b1ac:	6893      	ldr	r3, [r2, #8]
 801b1ae:	3b01      	subs	r3, #1
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	b410      	push	{r4}
 801b1b4:	6093      	str	r3, [r2, #8]
 801b1b6:	da08      	bge.n	801b1ca <__sfputc_r+0x1e>
 801b1b8:	6994      	ldr	r4, [r2, #24]
 801b1ba:	42a3      	cmp	r3, r4
 801b1bc:	db01      	blt.n	801b1c2 <__sfputc_r+0x16>
 801b1be:	290a      	cmp	r1, #10
 801b1c0:	d103      	bne.n	801b1ca <__sfputc_r+0x1e>
 801b1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b1c6:	f000 bb0d 	b.w	801b7e4 <__swbuf_r>
 801b1ca:	6813      	ldr	r3, [r2, #0]
 801b1cc:	1c58      	adds	r0, r3, #1
 801b1ce:	6010      	str	r0, [r2, #0]
 801b1d0:	7019      	strb	r1, [r3, #0]
 801b1d2:	4608      	mov	r0, r1
 801b1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b1d8:	4770      	bx	lr

0801b1da <__sfputs_r>:
 801b1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1dc:	4606      	mov	r6, r0
 801b1de:	460f      	mov	r7, r1
 801b1e0:	4614      	mov	r4, r2
 801b1e2:	18d5      	adds	r5, r2, r3
 801b1e4:	42ac      	cmp	r4, r5
 801b1e6:	d101      	bne.n	801b1ec <__sfputs_r+0x12>
 801b1e8:	2000      	movs	r0, #0
 801b1ea:	e007      	b.n	801b1fc <__sfputs_r+0x22>
 801b1ec:	463a      	mov	r2, r7
 801b1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1f2:	4630      	mov	r0, r6
 801b1f4:	f7ff ffda 	bl	801b1ac <__sfputc_r>
 801b1f8:	1c43      	adds	r3, r0, #1
 801b1fa:	d1f3      	bne.n	801b1e4 <__sfputs_r+0xa>
 801b1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b200 <_vfiprintf_r>:
 801b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b204:	460c      	mov	r4, r1
 801b206:	b09d      	sub	sp, #116	; 0x74
 801b208:	4617      	mov	r7, r2
 801b20a:	461d      	mov	r5, r3
 801b20c:	4606      	mov	r6, r0
 801b20e:	b118      	cbz	r0, 801b218 <_vfiprintf_r+0x18>
 801b210:	6983      	ldr	r3, [r0, #24]
 801b212:	b90b      	cbnz	r3, 801b218 <_vfiprintf_r+0x18>
 801b214:	f7ff fe90 	bl	801af38 <__sinit>
 801b218:	4b7c      	ldr	r3, [pc, #496]	; (801b40c <_vfiprintf_r+0x20c>)
 801b21a:	429c      	cmp	r4, r3
 801b21c:	d158      	bne.n	801b2d0 <_vfiprintf_r+0xd0>
 801b21e:	6874      	ldr	r4, [r6, #4]
 801b220:	89a3      	ldrh	r3, [r4, #12]
 801b222:	0718      	lsls	r0, r3, #28
 801b224:	d55e      	bpl.n	801b2e4 <_vfiprintf_r+0xe4>
 801b226:	6923      	ldr	r3, [r4, #16]
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d05b      	beq.n	801b2e4 <_vfiprintf_r+0xe4>
 801b22c:	2300      	movs	r3, #0
 801b22e:	9309      	str	r3, [sp, #36]	; 0x24
 801b230:	2320      	movs	r3, #32
 801b232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b236:	2330      	movs	r3, #48	; 0x30
 801b238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b23c:	9503      	str	r5, [sp, #12]
 801b23e:	f04f 0b01 	mov.w	fp, #1
 801b242:	46b8      	mov	r8, r7
 801b244:	4645      	mov	r5, r8
 801b246:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b24a:	b10b      	cbz	r3, 801b250 <_vfiprintf_r+0x50>
 801b24c:	2b25      	cmp	r3, #37	; 0x25
 801b24e:	d154      	bne.n	801b2fa <_vfiprintf_r+0xfa>
 801b250:	ebb8 0a07 	subs.w	sl, r8, r7
 801b254:	d00b      	beq.n	801b26e <_vfiprintf_r+0x6e>
 801b256:	4653      	mov	r3, sl
 801b258:	463a      	mov	r2, r7
 801b25a:	4621      	mov	r1, r4
 801b25c:	4630      	mov	r0, r6
 801b25e:	f7ff ffbc 	bl	801b1da <__sfputs_r>
 801b262:	3001      	adds	r0, #1
 801b264:	f000 80c2 	beq.w	801b3ec <_vfiprintf_r+0x1ec>
 801b268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b26a:	4453      	add	r3, sl
 801b26c:	9309      	str	r3, [sp, #36]	; 0x24
 801b26e:	f898 3000 	ldrb.w	r3, [r8]
 801b272:	2b00      	cmp	r3, #0
 801b274:	f000 80ba 	beq.w	801b3ec <_vfiprintf_r+0x1ec>
 801b278:	2300      	movs	r3, #0
 801b27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b282:	9304      	str	r3, [sp, #16]
 801b284:	9307      	str	r3, [sp, #28]
 801b286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b28a:	931a      	str	r3, [sp, #104]	; 0x68
 801b28c:	46a8      	mov	r8, r5
 801b28e:	2205      	movs	r2, #5
 801b290:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b294:	485e      	ldr	r0, [pc, #376]	; (801b410 <_vfiprintf_r+0x210>)
 801b296:	f7ec ffdb 	bl	8008250 <memchr>
 801b29a:	9b04      	ldr	r3, [sp, #16]
 801b29c:	bb78      	cbnz	r0, 801b2fe <_vfiprintf_r+0xfe>
 801b29e:	06d9      	lsls	r1, r3, #27
 801b2a0:	bf44      	itt	mi
 801b2a2:	2220      	movmi	r2, #32
 801b2a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b2a8:	071a      	lsls	r2, r3, #28
 801b2aa:	bf44      	itt	mi
 801b2ac:	222b      	movmi	r2, #43	; 0x2b
 801b2ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b2b2:	782a      	ldrb	r2, [r5, #0]
 801b2b4:	2a2a      	cmp	r2, #42	; 0x2a
 801b2b6:	d02a      	beq.n	801b30e <_vfiprintf_r+0x10e>
 801b2b8:	9a07      	ldr	r2, [sp, #28]
 801b2ba:	46a8      	mov	r8, r5
 801b2bc:	2000      	movs	r0, #0
 801b2be:	250a      	movs	r5, #10
 801b2c0:	4641      	mov	r1, r8
 801b2c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b2c6:	3b30      	subs	r3, #48	; 0x30
 801b2c8:	2b09      	cmp	r3, #9
 801b2ca:	d969      	bls.n	801b3a0 <_vfiprintf_r+0x1a0>
 801b2cc:	b360      	cbz	r0, 801b328 <_vfiprintf_r+0x128>
 801b2ce:	e024      	b.n	801b31a <_vfiprintf_r+0x11a>
 801b2d0:	4b50      	ldr	r3, [pc, #320]	; (801b414 <_vfiprintf_r+0x214>)
 801b2d2:	429c      	cmp	r4, r3
 801b2d4:	d101      	bne.n	801b2da <_vfiprintf_r+0xda>
 801b2d6:	68b4      	ldr	r4, [r6, #8]
 801b2d8:	e7a2      	b.n	801b220 <_vfiprintf_r+0x20>
 801b2da:	4b4f      	ldr	r3, [pc, #316]	; (801b418 <_vfiprintf_r+0x218>)
 801b2dc:	429c      	cmp	r4, r3
 801b2de:	bf08      	it	eq
 801b2e0:	68f4      	ldreq	r4, [r6, #12]
 801b2e2:	e79d      	b.n	801b220 <_vfiprintf_r+0x20>
 801b2e4:	4621      	mov	r1, r4
 801b2e6:	4630      	mov	r0, r6
 801b2e8:	f000 fae0 	bl	801b8ac <__swsetup_r>
 801b2ec:	2800      	cmp	r0, #0
 801b2ee:	d09d      	beq.n	801b22c <_vfiprintf_r+0x2c>
 801b2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2f4:	b01d      	add	sp, #116	; 0x74
 801b2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2fa:	46a8      	mov	r8, r5
 801b2fc:	e7a2      	b.n	801b244 <_vfiprintf_r+0x44>
 801b2fe:	4a44      	ldr	r2, [pc, #272]	; (801b410 <_vfiprintf_r+0x210>)
 801b300:	1a80      	subs	r0, r0, r2
 801b302:	fa0b f000 	lsl.w	r0, fp, r0
 801b306:	4318      	orrs	r0, r3
 801b308:	9004      	str	r0, [sp, #16]
 801b30a:	4645      	mov	r5, r8
 801b30c:	e7be      	b.n	801b28c <_vfiprintf_r+0x8c>
 801b30e:	9a03      	ldr	r2, [sp, #12]
 801b310:	1d11      	adds	r1, r2, #4
 801b312:	6812      	ldr	r2, [r2, #0]
 801b314:	9103      	str	r1, [sp, #12]
 801b316:	2a00      	cmp	r2, #0
 801b318:	db01      	blt.n	801b31e <_vfiprintf_r+0x11e>
 801b31a:	9207      	str	r2, [sp, #28]
 801b31c:	e004      	b.n	801b328 <_vfiprintf_r+0x128>
 801b31e:	4252      	negs	r2, r2
 801b320:	f043 0302 	orr.w	r3, r3, #2
 801b324:	9207      	str	r2, [sp, #28]
 801b326:	9304      	str	r3, [sp, #16]
 801b328:	f898 3000 	ldrb.w	r3, [r8]
 801b32c:	2b2e      	cmp	r3, #46	; 0x2e
 801b32e:	d10e      	bne.n	801b34e <_vfiprintf_r+0x14e>
 801b330:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b334:	2b2a      	cmp	r3, #42	; 0x2a
 801b336:	d138      	bne.n	801b3aa <_vfiprintf_r+0x1aa>
 801b338:	9b03      	ldr	r3, [sp, #12]
 801b33a:	1d1a      	adds	r2, r3, #4
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	9203      	str	r2, [sp, #12]
 801b340:	2b00      	cmp	r3, #0
 801b342:	bfb8      	it	lt
 801b344:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b348:	f108 0802 	add.w	r8, r8, #2
 801b34c:	9305      	str	r3, [sp, #20]
 801b34e:	4d33      	ldr	r5, [pc, #204]	; (801b41c <_vfiprintf_r+0x21c>)
 801b350:	f898 1000 	ldrb.w	r1, [r8]
 801b354:	2203      	movs	r2, #3
 801b356:	4628      	mov	r0, r5
 801b358:	f7ec ff7a 	bl	8008250 <memchr>
 801b35c:	b140      	cbz	r0, 801b370 <_vfiprintf_r+0x170>
 801b35e:	2340      	movs	r3, #64	; 0x40
 801b360:	1b40      	subs	r0, r0, r5
 801b362:	fa03 f000 	lsl.w	r0, r3, r0
 801b366:	9b04      	ldr	r3, [sp, #16]
 801b368:	4303      	orrs	r3, r0
 801b36a:	f108 0801 	add.w	r8, r8, #1
 801b36e:	9304      	str	r3, [sp, #16]
 801b370:	f898 1000 	ldrb.w	r1, [r8]
 801b374:	482a      	ldr	r0, [pc, #168]	; (801b420 <_vfiprintf_r+0x220>)
 801b376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b37a:	2206      	movs	r2, #6
 801b37c:	f108 0701 	add.w	r7, r8, #1
 801b380:	f7ec ff66 	bl	8008250 <memchr>
 801b384:	2800      	cmp	r0, #0
 801b386:	d037      	beq.n	801b3f8 <_vfiprintf_r+0x1f8>
 801b388:	4b26      	ldr	r3, [pc, #152]	; (801b424 <_vfiprintf_r+0x224>)
 801b38a:	bb1b      	cbnz	r3, 801b3d4 <_vfiprintf_r+0x1d4>
 801b38c:	9b03      	ldr	r3, [sp, #12]
 801b38e:	3307      	adds	r3, #7
 801b390:	f023 0307 	bic.w	r3, r3, #7
 801b394:	3308      	adds	r3, #8
 801b396:	9303      	str	r3, [sp, #12]
 801b398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b39a:	444b      	add	r3, r9
 801b39c:	9309      	str	r3, [sp, #36]	; 0x24
 801b39e:	e750      	b.n	801b242 <_vfiprintf_r+0x42>
 801b3a0:	fb05 3202 	mla	r2, r5, r2, r3
 801b3a4:	2001      	movs	r0, #1
 801b3a6:	4688      	mov	r8, r1
 801b3a8:	e78a      	b.n	801b2c0 <_vfiprintf_r+0xc0>
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	f108 0801 	add.w	r8, r8, #1
 801b3b0:	9305      	str	r3, [sp, #20]
 801b3b2:	4619      	mov	r1, r3
 801b3b4:	250a      	movs	r5, #10
 801b3b6:	4640      	mov	r0, r8
 801b3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b3bc:	3a30      	subs	r2, #48	; 0x30
 801b3be:	2a09      	cmp	r2, #9
 801b3c0:	d903      	bls.n	801b3ca <_vfiprintf_r+0x1ca>
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d0c3      	beq.n	801b34e <_vfiprintf_r+0x14e>
 801b3c6:	9105      	str	r1, [sp, #20]
 801b3c8:	e7c1      	b.n	801b34e <_vfiprintf_r+0x14e>
 801b3ca:	fb05 2101 	mla	r1, r5, r1, r2
 801b3ce:	2301      	movs	r3, #1
 801b3d0:	4680      	mov	r8, r0
 801b3d2:	e7f0      	b.n	801b3b6 <_vfiprintf_r+0x1b6>
 801b3d4:	ab03      	add	r3, sp, #12
 801b3d6:	9300      	str	r3, [sp, #0]
 801b3d8:	4622      	mov	r2, r4
 801b3da:	4b13      	ldr	r3, [pc, #76]	; (801b428 <_vfiprintf_r+0x228>)
 801b3dc:	a904      	add	r1, sp, #16
 801b3de:	4630      	mov	r0, r6
 801b3e0:	f3af 8000 	nop.w
 801b3e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801b3e8:	4681      	mov	r9, r0
 801b3ea:	d1d5      	bne.n	801b398 <_vfiprintf_r+0x198>
 801b3ec:	89a3      	ldrh	r3, [r4, #12]
 801b3ee:	065b      	lsls	r3, r3, #25
 801b3f0:	f53f af7e 	bmi.w	801b2f0 <_vfiprintf_r+0xf0>
 801b3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b3f6:	e77d      	b.n	801b2f4 <_vfiprintf_r+0xf4>
 801b3f8:	ab03      	add	r3, sp, #12
 801b3fa:	9300      	str	r3, [sp, #0]
 801b3fc:	4622      	mov	r2, r4
 801b3fe:	4b0a      	ldr	r3, [pc, #40]	; (801b428 <_vfiprintf_r+0x228>)
 801b400:	a904      	add	r1, sp, #16
 801b402:	4630      	mov	r0, r6
 801b404:	f000 f888 	bl	801b518 <_printf_i>
 801b408:	e7ec      	b.n	801b3e4 <_vfiprintf_r+0x1e4>
 801b40a:	bf00      	nop
 801b40c:	0801e9d4 	.word	0x0801e9d4
 801b410:	0801ea14 	.word	0x0801ea14
 801b414:	0801e9f4 	.word	0x0801e9f4
 801b418:	0801e9b4 	.word	0x0801e9b4
 801b41c:	0801ea1a 	.word	0x0801ea1a
 801b420:	0801ea1e 	.word	0x0801ea1e
 801b424:	00000000 	.word	0x00000000
 801b428:	0801b1db 	.word	0x0801b1db

0801b42c <_printf_common>:
 801b42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b430:	4691      	mov	r9, r2
 801b432:	461f      	mov	r7, r3
 801b434:	688a      	ldr	r2, [r1, #8]
 801b436:	690b      	ldr	r3, [r1, #16]
 801b438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b43c:	4293      	cmp	r3, r2
 801b43e:	bfb8      	it	lt
 801b440:	4613      	movlt	r3, r2
 801b442:	f8c9 3000 	str.w	r3, [r9]
 801b446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b44a:	4606      	mov	r6, r0
 801b44c:	460c      	mov	r4, r1
 801b44e:	b112      	cbz	r2, 801b456 <_printf_common+0x2a>
 801b450:	3301      	adds	r3, #1
 801b452:	f8c9 3000 	str.w	r3, [r9]
 801b456:	6823      	ldr	r3, [r4, #0]
 801b458:	0699      	lsls	r1, r3, #26
 801b45a:	bf42      	ittt	mi
 801b45c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b460:	3302      	addmi	r3, #2
 801b462:	f8c9 3000 	strmi.w	r3, [r9]
 801b466:	6825      	ldr	r5, [r4, #0]
 801b468:	f015 0506 	ands.w	r5, r5, #6
 801b46c:	d107      	bne.n	801b47e <_printf_common+0x52>
 801b46e:	f104 0a19 	add.w	sl, r4, #25
 801b472:	68e3      	ldr	r3, [r4, #12]
 801b474:	f8d9 2000 	ldr.w	r2, [r9]
 801b478:	1a9b      	subs	r3, r3, r2
 801b47a:	42ab      	cmp	r3, r5
 801b47c:	dc28      	bgt.n	801b4d0 <_printf_common+0xa4>
 801b47e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801b482:	6822      	ldr	r2, [r4, #0]
 801b484:	3300      	adds	r3, #0
 801b486:	bf18      	it	ne
 801b488:	2301      	movne	r3, #1
 801b48a:	0692      	lsls	r2, r2, #26
 801b48c:	d42d      	bmi.n	801b4ea <_printf_common+0xbe>
 801b48e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b492:	4639      	mov	r1, r7
 801b494:	4630      	mov	r0, r6
 801b496:	47c0      	blx	r8
 801b498:	3001      	adds	r0, #1
 801b49a:	d020      	beq.n	801b4de <_printf_common+0xb2>
 801b49c:	6823      	ldr	r3, [r4, #0]
 801b49e:	68e5      	ldr	r5, [r4, #12]
 801b4a0:	f8d9 2000 	ldr.w	r2, [r9]
 801b4a4:	f003 0306 	and.w	r3, r3, #6
 801b4a8:	2b04      	cmp	r3, #4
 801b4aa:	bf08      	it	eq
 801b4ac:	1aad      	subeq	r5, r5, r2
 801b4ae:	68a3      	ldr	r3, [r4, #8]
 801b4b0:	6922      	ldr	r2, [r4, #16]
 801b4b2:	bf0c      	ite	eq
 801b4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b4b8:	2500      	movne	r5, #0
 801b4ba:	4293      	cmp	r3, r2
 801b4bc:	bfc4      	itt	gt
 801b4be:	1a9b      	subgt	r3, r3, r2
 801b4c0:	18ed      	addgt	r5, r5, r3
 801b4c2:	f04f 0900 	mov.w	r9, #0
 801b4c6:	341a      	adds	r4, #26
 801b4c8:	454d      	cmp	r5, r9
 801b4ca:	d11a      	bne.n	801b502 <_printf_common+0xd6>
 801b4cc:	2000      	movs	r0, #0
 801b4ce:	e008      	b.n	801b4e2 <_printf_common+0xb6>
 801b4d0:	2301      	movs	r3, #1
 801b4d2:	4652      	mov	r2, sl
 801b4d4:	4639      	mov	r1, r7
 801b4d6:	4630      	mov	r0, r6
 801b4d8:	47c0      	blx	r8
 801b4da:	3001      	adds	r0, #1
 801b4dc:	d103      	bne.n	801b4e6 <_printf_common+0xba>
 801b4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4e6:	3501      	adds	r5, #1
 801b4e8:	e7c3      	b.n	801b472 <_printf_common+0x46>
 801b4ea:	18e1      	adds	r1, r4, r3
 801b4ec:	1c5a      	adds	r2, r3, #1
 801b4ee:	2030      	movs	r0, #48	; 0x30
 801b4f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b4f4:	4422      	add	r2, r4
 801b4f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b4fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b4fe:	3302      	adds	r3, #2
 801b500:	e7c5      	b.n	801b48e <_printf_common+0x62>
 801b502:	2301      	movs	r3, #1
 801b504:	4622      	mov	r2, r4
 801b506:	4639      	mov	r1, r7
 801b508:	4630      	mov	r0, r6
 801b50a:	47c0      	blx	r8
 801b50c:	3001      	adds	r0, #1
 801b50e:	d0e6      	beq.n	801b4de <_printf_common+0xb2>
 801b510:	f109 0901 	add.w	r9, r9, #1
 801b514:	e7d8      	b.n	801b4c8 <_printf_common+0x9c>
	...

0801b518 <_printf_i>:
 801b518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b51c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b520:	460c      	mov	r4, r1
 801b522:	7e09      	ldrb	r1, [r1, #24]
 801b524:	b085      	sub	sp, #20
 801b526:	296e      	cmp	r1, #110	; 0x6e
 801b528:	4617      	mov	r7, r2
 801b52a:	4606      	mov	r6, r0
 801b52c:	4698      	mov	r8, r3
 801b52e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b530:	f000 80b3 	beq.w	801b69a <_printf_i+0x182>
 801b534:	d822      	bhi.n	801b57c <_printf_i+0x64>
 801b536:	2963      	cmp	r1, #99	; 0x63
 801b538:	d036      	beq.n	801b5a8 <_printf_i+0x90>
 801b53a:	d80a      	bhi.n	801b552 <_printf_i+0x3a>
 801b53c:	2900      	cmp	r1, #0
 801b53e:	f000 80b9 	beq.w	801b6b4 <_printf_i+0x19c>
 801b542:	2958      	cmp	r1, #88	; 0x58
 801b544:	f000 8083 	beq.w	801b64e <_printf_i+0x136>
 801b548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b54c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b550:	e032      	b.n	801b5b8 <_printf_i+0xa0>
 801b552:	2964      	cmp	r1, #100	; 0x64
 801b554:	d001      	beq.n	801b55a <_printf_i+0x42>
 801b556:	2969      	cmp	r1, #105	; 0x69
 801b558:	d1f6      	bne.n	801b548 <_printf_i+0x30>
 801b55a:	6820      	ldr	r0, [r4, #0]
 801b55c:	6813      	ldr	r3, [r2, #0]
 801b55e:	0605      	lsls	r5, r0, #24
 801b560:	f103 0104 	add.w	r1, r3, #4
 801b564:	d52a      	bpl.n	801b5bc <_printf_i+0xa4>
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	6011      	str	r1, [r2, #0]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	da03      	bge.n	801b576 <_printf_i+0x5e>
 801b56e:	222d      	movs	r2, #45	; 0x2d
 801b570:	425b      	negs	r3, r3
 801b572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b576:	486f      	ldr	r0, [pc, #444]	; (801b734 <_printf_i+0x21c>)
 801b578:	220a      	movs	r2, #10
 801b57a:	e039      	b.n	801b5f0 <_printf_i+0xd8>
 801b57c:	2973      	cmp	r1, #115	; 0x73
 801b57e:	f000 809d 	beq.w	801b6bc <_printf_i+0x1a4>
 801b582:	d808      	bhi.n	801b596 <_printf_i+0x7e>
 801b584:	296f      	cmp	r1, #111	; 0x6f
 801b586:	d020      	beq.n	801b5ca <_printf_i+0xb2>
 801b588:	2970      	cmp	r1, #112	; 0x70
 801b58a:	d1dd      	bne.n	801b548 <_printf_i+0x30>
 801b58c:	6823      	ldr	r3, [r4, #0]
 801b58e:	f043 0320 	orr.w	r3, r3, #32
 801b592:	6023      	str	r3, [r4, #0]
 801b594:	e003      	b.n	801b59e <_printf_i+0x86>
 801b596:	2975      	cmp	r1, #117	; 0x75
 801b598:	d017      	beq.n	801b5ca <_printf_i+0xb2>
 801b59a:	2978      	cmp	r1, #120	; 0x78
 801b59c:	d1d4      	bne.n	801b548 <_printf_i+0x30>
 801b59e:	2378      	movs	r3, #120	; 0x78
 801b5a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b5a4:	4864      	ldr	r0, [pc, #400]	; (801b738 <_printf_i+0x220>)
 801b5a6:	e055      	b.n	801b654 <_printf_i+0x13c>
 801b5a8:	6813      	ldr	r3, [r2, #0]
 801b5aa:	1d19      	adds	r1, r3, #4
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	6011      	str	r1, [r2, #0]
 801b5b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b5b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b5b8:	2301      	movs	r3, #1
 801b5ba:	e08c      	b.n	801b6d6 <_printf_i+0x1be>
 801b5bc:	681b      	ldr	r3, [r3, #0]
 801b5be:	6011      	str	r1, [r2, #0]
 801b5c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b5c4:	bf18      	it	ne
 801b5c6:	b21b      	sxthne	r3, r3
 801b5c8:	e7cf      	b.n	801b56a <_printf_i+0x52>
 801b5ca:	6813      	ldr	r3, [r2, #0]
 801b5cc:	6825      	ldr	r5, [r4, #0]
 801b5ce:	1d18      	adds	r0, r3, #4
 801b5d0:	6010      	str	r0, [r2, #0]
 801b5d2:	0628      	lsls	r0, r5, #24
 801b5d4:	d501      	bpl.n	801b5da <_printf_i+0xc2>
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	e002      	b.n	801b5e0 <_printf_i+0xc8>
 801b5da:	0668      	lsls	r0, r5, #25
 801b5dc:	d5fb      	bpl.n	801b5d6 <_printf_i+0xbe>
 801b5de:	881b      	ldrh	r3, [r3, #0]
 801b5e0:	4854      	ldr	r0, [pc, #336]	; (801b734 <_printf_i+0x21c>)
 801b5e2:	296f      	cmp	r1, #111	; 0x6f
 801b5e4:	bf14      	ite	ne
 801b5e6:	220a      	movne	r2, #10
 801b5e8:	2208      	moveq	r2, #8
 801b5ea:	2100      	movs	r1, #0
 801b5ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b5f0:	6865      	ldr	r5, [r4, #4]
 801b5f2:	60a5      	str	r5, [r4, #8]
 801b5f4:	2d00      	cmp	r5, #0
 801b5f6:	f2c0 8095 	blt.w	801b724 <_printf_i+0x20c>
 801b5fa:	6821      	ldr	r1, [r4, #0]
 801b5fc:	f021 0104 	bic.w	r1, r1, #4
 801b600:	6021      	str	r1, [r4, #0]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d13d      	bne.n	801b682 <_printf_i+0x16a>
 801b606:	2d00      	cmp	r5, #0
 801b608:	f040 808e 	bne.w	801b728 <_printf_i+0x210>
 801b60c:	4665      	mov	r5, ip
 801b60e:	2a08      	cmp	r2, #8
 801b610:	d10b      	bne.n	801b62a <_printf_i+0x112>
 801b612:	6823      	ldr	r3, [r4, #0]
 801b614:	07db      	lsls	r3, r3, #31
 801b616:	d508      	bpl.n	801b62a <_printf_i+0x112>
 801b618:	6923      	ldr	r3, [r4, #16]
 801b61a:	6862      	ldr	r2, [r4, #4]
 801b61c:	429a      	cmp	r2, r3
 801b61e:	bfde      	ittt	le
 801b620:	2330      	movle	r3, #48	; 0x30
 801b622:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b626:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b62a:	ebac 0305 	sub.w	r3, ip, r5
 801b62e:	6123      	str	r3, [r4, #16]
 801b630:	f8cd 8000 	str.w	r8, [sp]
 801b634:	463b      	mov	r3, r7
 801b636:	aa03      	add	r2, sp, #12
 801b638:	4621      	mov	r1, r4
 801b63a:	4630      	mov	r0, r6
 801b63c:	f7ff fef6 	bl	801b42c <_printf_common>
 801b640:	3001      	adds	r0, #1
 801b642:	d14d      	bne.n	801b6e0 <_printf_i+0x1c8>
 801b644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b648:	b005      	add	sp, #20
 801b64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b64e:	4839      	ldr	r0, [pc, #228]	; (801b734 <_printf_i+0x21c>)
 801b650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b654:	6813      	ldr	r3, [r2, #0]
 801b656:	6821      	ldr	r1, [r4, #0]
 801b658:	1d1d      	adds	r5, r3, #4
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	6015      	str	r5, [r2, #0]
 801b65e:	060a      	lsls	r2, r1, #24
 801b660:	d50b      	bpl.n	801b67a <_printf_i+0x162>
 801b662:	07ca      	lsls	r2, r1, #31
 801b664:	bf44      	itt	mi
 801b666:	f041 0120 	orrmi.w	r1, r1, #32
 801b66a:	6021      	strmi	r1, [r4, #0]
 801b66c:	b91b      	cbnz	r3, 801b676 <_printf_i+0x15e>
 801b66e:	6822      	ldr	r2, [r4, #0]
 801b670:	f022 0220 	bic.w	r2, r2, #32
 801b674:	6022      	str	r2, [r4, #0]
 801b676:	2210      	movs	r2, #16
 801b678:	e7b7      	b.n	801b5ea <_printf_i+0xd2>
 801b67a:	064d      	lsls	r5, r1, #25
 801b67c:	bf48      	it	mi
 801b67e:	b29b      	uxthmi	r3, r3
 801b680:	e7ef      	b.n	801b662 <_printf_i+0x14a>
 801b682:	4665      	mov	r5, ip
 801b684:	fbb3 f1f2 	udiv	r1, r3, r2
 801b688:	fb02 3311 	mls	r3, r2, r1, r3
 801b68c:	5cc3      	ldrb	r3, [r0, r3]
 801b68e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b692:	460b      	mov	r3, r1
 801b694:	2900      	cmp	r1, #0
 801b696:	d1f5      	bne.n	801b684 <_printf_i+0x16c>
 801b698:	e7b9      	b.n	801b60e <_printf_i+0xf6>
 801b69a:	6813      	ldr	r3, [r2, #0]
 801b69c:	6825      	ldr	r5, [r4, #0]
 801b69e:	6961      	ldr	r1, [r4, #20]
 801b6a0:	1d18      	adds	r0, r3, #4
 801b6a2:	6010      	str	r0, [r2, #0]
 801b6a4:	0628      	lsls	r0, r5, #24
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	d501      	bpl.n	801b6ae <_printf_i+0x196>
 801b6aa:	6019      	str	r1, [r3, #0]
 801b6ac:	e002      	b.n	801b6b4 <_printf_i+0x19c>
 801b6ae:	066a      	lsls	r2, r5, #25
 801b6b0:	d5fb      	bpl.n	801b6aa <_printf_i+0x192>
 801b6b2:	8019      	strh	r1, [r3, #0]
 801b6b4:	2300      	movs	r3, #0
 801b6b6:	6123      	str	r3, [r4, #16]
 801b6b8:	4665      	mov	r5, ip
 801b6ba:	e7b9      	b.n	801b630 <_printf_i+0x118>
 801b6bc:	6813      	ldr	r3, [r2, #0]
 801b6be:	1d19      	adds	r1, r3, #4
 801b6c0:	6011      	str	r1, [r2, #0]
 801b6c2:	681d      	ldr	r5, [r3, #0]
 801b6c4:	6862      	ldr	r2, [r4, #4]
 801b6c6:	2100      	movs	r1, #0
 801b6c8:	4628      	mov	r0, r5
 801b6ca:	f7ec fdc1 	bl	8008250 <memchr>
 801b6ce:	b108      	cbz	r0, 801b6d4 <_printf_i+0x1bc>
 801b6d0:	1b40      	subs	r0, r0, r5
 801b6d2:	6060      	str	r0, [r4, #4]
 801b6d4:	6863      	ldr	r3, [r4, #4]
 801b6d6:	6123      	str	r3, [r4, #16]
 801b6d8:	2300      	movs	r3, #0
 801b6da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6de:	e7a7      	b.n	801b630 <_printf_i+0x118>
 801b6e0:	6923      	ldr	r3, [r4, #16]
 801b6e2:	462a      	mov	r2, r5
 801b6e4:	4639      	mov	r1, r7
 801b6e6:	4630      	mov	r0, r6
 801b6e8:	47c0      	blx	r8
 801b6ea:	3001      	adds	r0, #1
 801b6ec:	d0aa      	beq.n	801b644 <_printf_i+0x12c>
 801b6ee:	6823      	ldr	r3, [r4, #0]
 801b6f0:	079b      	lsls	r3, r3, #30
 801b6f2:	d413      	bmi.n	801b71c <_printf_i+0x204>
 801b6f4:	68e0      	ldr	r0, [r4, #12]
 801b6f6:	9b03      	ldr	r3, [sp, #12]
 801b6f8:	4298      	cmp	r0, r3
 801b6fa:	bfb8      	it	lt
 801b6fc:	4618      	movlt	r0, r3
 801b6fe:	e7a3      	b.n	801b648 <_printf_i+0x130>
 801b700:	2301      	movs	r3, #1
 801b702:	464a      	mov	r2, r9
 801b704:	4639      	mov	r1, r7
 801b706:	4630      	mov	r0, r6
 801b708:	47c0      	blx	r8
 801b70a:	3001      	adds	r0, #1
 801b70c:	d09a      	beq.n	801b644 <_printf_i+0x12c>
 801b70e:	3501      	adds	r5, #1
 801b710:	68e3      	ldr	r3, [r4, #12]
 801b712:	9a03      	ldr	r2, [sp, #12]
 801b714:	1a9b      	subs	r3, r3, r2
 801b716:	42ab      	cmp	r3, r5
 801b718:	dcf2      	bgt.n	801b700 <_printf_i+0x1e8>
 801b71a:	e7eb      	b.n	801b6f4 <_printf_i+0x1dc>
 801b71c:	2500      	movs	r5, #0
 801b71e:	f104 0919 	add.w	r9, r4, #25
 801b722:	e7f5      	b.n	801b710 <_printf_i+0x1f8>
 801b724:	2b00      	cmp	r3, #0
 801b726:	d1ac      	bne.n	801b682 <_printf_i+0x16a>
 801b728:	7803      	ldrb	r3, [r0, #0]
 801b72a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b72e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b732:	e76c      	b.n	801b60e <_printf_i+0xf6>
 801b734:	0801ea25 	.word	0x0801ea25
 801b738:	0801ea36 	.word	0x0801ea36

0801b73c <_sbrk_r>:
 801b73c:	b538      	push	{r3, r4, r5, lr}
 801b73e:	4c06      	ldr	r4, [pc, #24]	; (801b758 <_sbrk_r+0x1c>)
 801b740:	2300      	movs	r3, #0
 801b742:	4605      	mov	r5, r0
 801b744:	4608      	mov	r0, r1
 801b746:	6023      	str	r3, [r4, #0]
 801b748:	f7ed fbc0 	bl	8008ecc <_sbrk>
 801b74c:	1c43      	adds	r3, r0, #1
 801b74e:	d102      	bne.n	801b756 <_sbrk_r+0x1a>
 801b750:	6823      	ldr	r3, [r4, #0]
 801b752:	b103      	cbz	r3, 801b756 <_sbrk_r+0x1a>
 801b754:	602b      	str	r3, [r5, #0]
 801b756:	bd38      	pop	{r3, r4, r5, pc}
 801b758:	2000b4e0 	.word	0x2000b4e0

0801b75c <__sread>:
 801b75c:	b510      	push	{r4, lr}
 801b75e:	460c      	mov	r4, r1
 801b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b764:	f000 fa48 	bl	801bbf8 <_read_r>
 801b768:	2800      	cmp	r0, #0
 801b76a:	bfab      	itete	ge
 801b76c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b76e:	89a3      	ldrhlt	r3, [r4, #12]
 801b770:	181b      	addge	r3, r3, r0
 801b772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b776:	bfac      	ite	ge
 801b778:	6563      	strge	r3, [r4, #84]	; 0x54
 801b77a:	81a3      	strhlt	r3, [r4, #12]
 801b77c:	bd10      	pop	{r4, pc}

0801b77e <__swrite>:
 801b77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b782:	461f      	mov	r7, r3
 801b784:	898b      	ldrh	r3, [r1, #12]
 801b786:	05db      	lsls	r3, r3, #23
 801b788:	4605      	mov	r5, r0
 801b78a:	460c      	mov	r4, r1
 801b78c:	4616      	mov	r6, r2
 801b78e:	d505      	bpl.n	801b79c <__swrite+0x1e>
 801b790:	2302      	movs	r3, #2
 801b792:	2200      	movs	r2, #0
 801b794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b798:	f000 f9b6 	bl	801bb08 <_lseek_r>
 801b79c:	89a3      	ldrh	r3, [r4, #12]
 801b79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b7a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b7a6:	81a3      	strh	r3, [r4, #12]
 801b7a8:	4632      	mov	r2, r6
 801b7aa:	463b      	mov	r3, r7
 801b7ac:	4628      	mov	r0, r5
 801b7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7b2:	f000 b869 	b.w	801b888 <_write_r>

0801b7b6 <__sseek>:
 801b7b6:	b510      	push	{r4, lr}
 801b7b8:	460c      	mov	r4, r1
 801b7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7be:	f000 f9a3 	bl	801bb08 <_lseek_r>
 801b7c2:	1c43      	adds	r3, r0, #1
 801b7c4:	89a3      	ldrh	r3, [r4, #12]
 801b7c6:	bf15      	itete	ne
 801b7c8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b7ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b7ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b7d2:	81a3      	strheq	r3, [r4, #12]
 801b7d4:	bf18      	it	ne
 801b7d6:	81a3      	strhne	r3, [r4, #12]
 801b7d8:	bd10      	pop	{r4, pc}

0801b7da <__sclose>:
 801b7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7de:	f000 b8d3 	b.w	801b988 <_close_r>
	...

0801b7e4 <__swbuf_r>:
 801b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7e6:	460e      	mov	r6, r1
 801b7e8:	4614      	mov	r4, r2
 801b7ea:	4605      	mov	r5, r0
 801b7ec:	b118      	cbz	r0, 801b7f6 <__swbuf_r+0x12>
 801b7ee:	6983      	ldr	r3, [r0, #24]
 801b7f0:	b90b      	cbnz	r3, 801b7f6 <__swbuf_r+0x12>
 801b7f2:	f7ff fba1 	bl	801af38 <__sinit>
 801b7f6:	4b21      	ldr	r3, [pc, #132]	; (801b87c <__swbuf_r+0x98>)
 801b7f8:	429c      	cmp	r4, r3
 801b7fa:	d12a      	bne.n	801b852 <__swbuf_r+0x6e>
 801b7fc:	686c      	ldr	r4, [r5, #4]
 801b7fe:	69a3      	ldr	r3, [r4, #24]
 801b800:	60a3      	str	r3, [r4, #8]
 801b802:	89a3      	ldrh	r3, [r4, #12]
 801b804:	071a      	lsls	r2, r3, #28
 801b806:	d52e      	bpl.n	801b866 <__swbuf_r+0x82>
 801b808:	6923      	ldr	r3, [r4, #16]
 801b80a:	b363      	cbz	r3, 801b866 <__swbuf_r+0x82>
 801b80c:	6923      	ldr	r3, [r4, #16]
 801b80e:	6820      	ldr	r0, [r4, #0]
 801b810:	1ac0      	subs	r0, r0, r3
 801b812:	6963      	ldr	r3, [r4, #20]
 801b814:	b2f6      	uxtb	r6, r6
 801b816:	4283      	cmp	r3, r0
 801b818:	4637      	mov	r7, r6
 801b81a:	dc04      	bgt.n	801b826 <__swbuf_r+0x42>
 801b81c:	4621      	mov	r1, r4
 801b81e:	4628      	mov	r0, r5
 801b820:	f000 f948 	bl	801bab4 <_fflush_r>
 801b824:	bb28      	cbnz	r0, 801b872 <__swbuf_r+0x8e>
 801b826:	68a3      	ldr	r3, [r4, #8]
 801b828:	3b01      	subs	r3, #1
 801b82a:	60a3      	str	r3, [r4, #8]
 801b82c:	6823      	ldr	r3, [r4, #0]
 801b82e:	1c5a      	adds	r2, r3, #1
 801b830:	6022      	str	r2, [r4, #0]
 801b832:	701e      	strb	r6, [r3, #0]
 801b834:	6963      	ldr	r3, [r4, #20]
 801b836:	3001      	adds	r0, #1
 801b838:	4283      	cmp	r3, r0
 801b83a:	d004      	beq.n	801b846 <__swbuf_r+0x62>
 801b83c:	89a3      	ldrh	r3, [r4, #12]
 801b83e:	07db      	lsls	r3, r3, #31
 801b840:	d519      	bpl.n	801b876 <__swbuf_r+0x92>
 801b842:	2e0a      	cmp	r6, #10
 801b844:	d117      	bne.n	801b876 <__swbuf_r+0x92>
 801b846:	4621      	mov	r1, r4
 801b848:	4628      	mov	r0, r5
 801b84a:	f000 f933 	bl	801bab4 <_fflush_r>
 801b84e:	b190      	cbz	r0, 801b876 <__swbuf_r+0x92>
 801b850:	e00f      	b.n	801b872 <__swbuf_r+0x8e>
 801b852:	4b0b      	ldr	r3, [pc, #44]	; (801b880 <__swbuf_r+0x9c>)
 801b854:	429c      	cmp	r4, r3
 801b856:	d101      	bne.n	801b85c <__swbuf_r+0x78>
 801b858:	68ac      	ldr	r4, [r5, #8]
 801b85a:	e7d0      	b.n	801b7fe <__swbuf_r+0x1a>
 801b85c:	4b09      	ldr	r3, [pc, #36]	; (801b884 <__swbuf_r+0xa0>)
 801b85e:	429c      	cmp	r4, r3
 801b860:	bf08      	it	eq
 801b862:	68ec      	ldreq	r4, [r5, #12]
 801b864:	e7cb      	b.n	801b7fe <__swbuf_r+0x1a>
 801b866:	4621      	mov	r1, r4
 801b868:	4628      	mov	r0, r5
 801b86a:	f000 f81f 	bl	801b8ac <__swsetup_r>
 801b86e:	2800      	cmp	r0, #0
 801b870:	d0cc      	beq.n	801b80c <__swbuf_r+0x28>
 801b872:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b876:	4638      	mov	r0, r7
 801b878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b87a:	bf00      	nop
 801b87c:	0801e9d4 	.word	0x0801e9d4
 801b880:	0801e9f4 	.word	0x0801e9f4
 801b884:	0801e9b4 	.word	0x0801e9b4

0801b888 <_write_r>:
 801b888:	b538      	push	{r3, r4, r5, lr}
 801b88a:	4c07      	ldr	r4, [pc, #28]	; (801b8a8 <_write_r+0x20>)
 801b88c:	4605      	mov	r5, r0
 801b88e:	4608      	mov	r0, r1
 801b890:	4611      	mov	r1, r2
 801b892:	2200      	movs	r2, #0
 801b894:	6022      	str	r2, [r4, #0]
 801b896:	461a      	mov	r2, r3
 801b898:	f7ed fac7 	bl	8008e2a <_write>
 801b89c:	1c43      	adds	r3, r0, #1
 801b89e:	d102      	bne.n	801b8a6 <_write_r+0x1e>
 801b8a0:	6823      	ldr	r3, [r4, #0]
 801b8a2:	b103      	cbz	r3, 801b8a6 <_write_r+0x1e>
 801b8a4:	602b      	str	r3, [r5, #0]
 801b8a6:	bd38      	pop	{r3, r4, r5, pc}
 801b8a8:	2000b4e0 	.word	0x2000b4e0

0801b8ac <__swsetup_r>:
 801b8ac:	4b32      	ldr	r3, [pc, #200]	; (801b978 <__swsetup_r+0xcc>)
 801b8ae:	b570      	push	{r4, r5, r6, lr}
 801b8b0:	681d      	ldr	r5, [r3, #0]
 801b8b2:	4606      	mov	r6, r0
 801b8b4:	460c      	mov	r4, r1
 801b8b6:	b125      	cbz	r5, 801b8c2 <__swsetup_r+0x16>
 801b8b8:	69ab      	ldr	r3, [r5, #24]
 801b8ba:	b913      	cbnz	r3, 801b8c2 <__swsetup_r+0x16>
 801b8bc:	4628      	mov	r0, r5
 801b8be:	f7ff fb3b 	bl	801af38 <__sinit>
 801b8c2:	4b2e      	ldr	r3, [pc, #184]	; (801b97c <__swsetup_r+0xd0>)
 801b8c4:	429c      	cmp	r4, r3
 801b8c6:	d10f      	bne.n	801b8e8 <__swsetup_r+0x3c>
 801b8c8:	686c      	ldr	r4, [r5, #4]
 801b8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b8ce:	b29a      	uxth	r2, r3
 801b8d0:	0715      	lsls	r5, r2, #28
 801b8d2:	d42c      	bmi.n	801b92e <__swsetup_r+0x82>
 801b8d4:	06d0      	lsls	r0, r2, #27
 801b8d6:	d411      	bmi.n	801b8fc <__swsetup_r+0x50>
 801b8d8:	2209      	movs	r2, #9
 801b8da:	6032      	str	r2, [r6, #0]
 801b8dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b8e0:	81a3      	strh	r3, [r4, #12]
 801b8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b8e6:	e03e      	b.n	801b966 <__swsetup_r+0xba>
 801b8e8:	4b25      	ldr	r3, [pc, #148]	; (801b980 <__swsetup_r+0xd4>)
 801b8ea:	429c      	cmp	r4, r3
 801b8ec:	d101      	bne.n	801b8f2 <__swsetup_r+0x46>
 801b8ee:	68ac      	ldr	r4, [r5, #8]
 801b8f0:	e7eb      	b.n	801b8ca <__swsetup_r+0x1e>
 801b8f2:	4b24      	ldr	r3, [pc, #144]	; (801b984 <__swsetup_r+0xd8>)
 801b8f4:	429c      	cmp	r4, r3
 801b8f6:	bf08      	it	eq
 801b8f8:	68ec      	ldreq	r4, [r5, #12]
 801b8fa:	e7e6      	b.n	801b8ca <__swsetup_r+0x1e>
 801b8fc:	0751      	lsls	r1, r2, #29
 801b8fe:	d512      	bpl.n	801b926 <__swsetup_r+0x7a>
 801b900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b902:	b141      	cbz	r1, 801b916 <__swsetup_r+0x6a>
 801b904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b908:	4299      	cmp	r1, r3
 801b90a:	d002      	beq.n	801b912 <__swsetup_r+0x66>
 801b90c:	4630      	mov	r0, r6
 801b90e:	f7ff fba5 	bl	801b05c <_free_r>
 801b912:	2300      	movs	r3, #0
 801b914:	6363      	str	r3, [r4, #52]	; 0x34
 801b916:	89a3      	ldrh	r3, [r4, #12]
 801b918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b91c:	81a3      	strh	r3, [r4, #12]
 801b91e:	2300      	movs	r3, #0
 801b920:	6063      	str	r3, [r4, #4]
 801b922:	6923      	ldr	r3, [r4, #16]
 801b924:	6023      	str	r3, [r4, #0]
 801b926:	89a3      	ldrh	r3, [r4, #12]
 801b928:	f043 0308 	orr.w	r3, r3, #8
 801b92c:	81a3      	strh	r3, [r4, #12]
 801b92e:	6923      	ldr	r3, [r4, #16]
 801b930:	b94b      	cbnz	r3, 801b946 <__swsetup_r+0x9a>
 801b932:	89a3      	ldrh	r3, [r4, #12]
 801b934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b93c:	d003      	beq.n	801b946 <__swsetup_r+0x9a>
 801b93e:	4621      	mov	r1, r4
 801b940:	4630      	mov	r0, r6
 801b942:	f000 f917 	bl	801bb74 <__smakebuf_r>
 801b946:	89a2      	ldrh	r2, [r4, #12]
 801b948:	f012 0301 	ands.w	r3, r2, #1
 801b94c:	d00c      	beq.n	801b968 <__swsetup_r+0xbc>
 801b94e:	2300      	movs	r3, #0
 801b950:	60a3      	str	r3, [r4, #8]
 801b952:	6963      	ldr	r3, [r4, #20]
 801b954:	425b      	negs	r3, r3
 801b956:	61a3      	str	r3, [r4, #24]
 801b958:	6923      	ldr	r3, [r4, #16]
 801b95a:	b953      	cbnz	r3, 801b972 <__swsetup_r+0xc6>
 801b95c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b960:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b964:	d1ba      	bne.n	801b8dc <__swsetup_r+0x30>
 801b966:	bd70      	pop	{r4, r5, r6, pc}
 801b968:	0792      	lsls	r2, r2, #30
 801b96a:	bf58      	it	pl
 801b96c:	6963      	ldrpl	r3, [r4, #20]
 801b96e:	60a3      	str	r3, [r4, #8]
 801b970:	e7f2      	b.n	801b958 <__swsetup_r+0xac>
 801b972:	2000      	movs	r0, #0
 801b974:	e7f7      	b.n	801b966 <__swsetup_r+0xba>
 801b976:	bf00      	nop
 801b978:	2000005c 	.word	0x2000005c
 801b97c:	0801e9d4 	.word	0x0801e9d4
 801b980:	0801e9f4 	.word	0x0801e9f4
 801b984:	0801e9b4 	.word	0x0801e9b4

0801b988 <_close_r>:
 801b988:	b538      	push	{r3, r4, r5, lr}
 801b98a:	4c06      	ldr	r4, [pc, #24]	; (801b9a4 <_close_r+0x1c>)
 801b98c:	2300      	movs	r3, #0
 801b98e:	4605      	mov	r5, r0
 801b990:	4608      	mov	r0, r1
 801b992:	6023      	str	r3, [r4, #0]
 801b994:	f7ed fa65 	bl	8008e62 <_close>
 801b998:	1c43      	adds	r3, r0, #1
 801b99a:	d102      	bne.n	801b9a2 <_close_r+0x1a>
 801b99c:	6823      	ldr	r3, [r4, #0]
 801b99e:	b103      	cbz	r3, 801b9a2 <_close_r+0x1a>
 801b9a0:	602b      	str	r3, [r5, #0]
 801b9a2:	bd38      	pop	{r3, r4, r5, pc}
 801b9a4:	2000b4e0 	.word	0x2000b4e0

0801b9a8 <__sflush_r>:
 801b9a8:	898a      	ldrh	r2, [r1, #12]
 801b9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9ae:	4605      	mov	r5, r0
 801b9b0:	0710      	lsls	r0, r2, #28
 801b9b2:	460c      	mov	r4, r1
 801b9b4:	d458      	bmi.n	801ba68 <__sflush_r+0xc0>
 801b9b6:	684b      	ldr	r3, [r1, #4]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	dc05      	bgt.n	801b9c8 <__sflush_r+0x20>
 801b9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	dc02      	bgt.n	801b9c8 <__sflush_r+0x20>
 801b9c2:	2000      	movs	r0, #0
 801b9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b9ca:	2e00      	cmp	r6, #0
 801b9cc:	d0f9      	beq.n	801b9c2 <__sflush_r+0x1a>
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b9d4:	682f      	ldr	r7, [r5, #0]
 801b9d6:	6a21      	ldr	r1, [r4, #32]
 801b9d8:	602b      	str	r3, [r5, #0]
 801b9da:	d032      	beq.n	801ba42 <__sflush_r+0x9a>
 801b9dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b9de:	89a3      	ldrh	r3, [r4, #12]
 801b9e0:	075a      	lsls	r2, r3, #29
 801b9e2:	d505      	bpl.n	801b9f0 <__sflush_r+0x48>
 801b9e4:	6863      	ldr	r3, [r4, #4]
 801b9e6:	1ac0      	subs	r0, r0, r3
 801b9e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b9ea:	b10b      	cbz	r3, 801b9f0 <__sflush_r+0x48>
 801b9ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b9ee:	1ac0      	subs	r0, r0, r3
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	4602      	mov	r2, r0
 801b9f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b9f6:	6a21      	ldr	r1, [r4, #32]
 801b9f8:	4628      	mov	r0, r5
 801b9fa:	47b0      	blx	r6
 801b9fc:	1c43      	adds	r3, r0, #1
 801b9fe:	89a3      	ldrh	r3, [r4, #12]
 801ba00:	d106      	bne.n	801ba10 <__sflush_r+0x68>
 801ba02:	6829      	ldr	r1, [r5, #0]
 801ba04:	291d      	cmp	r1, #29
 801ba06:	d848      	bhi.n	801ba9a <__sflush_r+0xf2>
 801ba08:	4a29      	ldr	r2, [pc, #164]	; (801bab0 <__sflush_r+0x108>)
 801ba0a:	40ca      	lsrs	r2, r1
 801ba0c:	07d6      	lsls	r6, r2, #31
 801ba0e:	d544      	bpl.n	801ba9a <__sflush_r+0xf2>
 801ba10:	2200      	movs	r2, #0
 801ba12:	6062      	str	r2, [r4, #4]
 801ba14:	04d9      	lsls	r1, r3, #19
 801ba16:	6922      	ldr	r2, [r4, #16]
 801ba18:	6022      	str	r2, [r4, #0]
 801ba1a:	d504      	bpl.n	801ba26 <__sflush_r+0x7e>
 801ba1c:	1c42      	adds	r2, r0, #1
 801ba1e:	d101      	bne.n	801ba24 <__sflush_r+0x7c>
 801ba20:	682b      	ldr	r3, [r5, #0]
 801ba22:	b903      	cbnz	r3, 801ba26 <__sflush_r+0x7e>
 801ba24:	6560      	str	r0, [r4, #84]	; 0x54
 801ba26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba28:	602f      	str	r7, [r5, #0]
 801ba2a:	2900      	cmp	r1, #0
 801ba2c:	d0c9      	beq.n	801b9c2 <__sflush_r+0x1a>
 801ba2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ba32:	4299      	cmp	r1, r3
 801ba34:	d002      	beq.n	801ba3c <__sflush_r+0x94>
 801ba36:	4628      	mov	r0, r5
 801ba38:	f7ff fb10 	bl	801b05c <_free_r>
 801ba3c:	2000      	movs	r0, #0
 801ba3e:	6360      	str	r0, [r4, #52]	; 0x34
 801ba40:	e7c0      	b.n	801b9c4 <__sflush_r+0x1c>
 801ba42:	2301      	movs	r3, #1
 801ba44:	4628      	mov	r0, r5
 801ba46:	47b0      	blx	r6
 801ba48:	1c41      	adds	r1, r0, #1
 801ba4a:	d1c8      	bne.n	801b9de <__sflush_r+0x36>
 801ba4c:	682b      	ldr	r3, [r5, #0]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d0c5      	beq.n	801b9de <__sflush_r+0x36>
 801ba52:	2b1d      	cmp	r3, #29
 801ba54:	d001      	beq.n	801ba5a <__sflush_r+0xb2>
 801ba56:	2b16      	cmp	r3, #22
 801ba58:	d101      	bne.n	801ba5e <__sflush_r+0xb6>
 801ba5a:	602f      	str	r7, [r5, #0]
 801ba5c:	e7b1      	b.n	801b9c2 <__sflush_r+0x1a>
 801ba5e:	89a3      	ldrh	r3, [r4, #12]
 801ba60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba64:	81a3      	strh	r3, [r4, #12]
 801ba66:	e7ad      	b.n	801b9c4 <__sflush_r+0x1c>
 801ba68:	690f      	ldr	r7, [r1, #16]
 801ba6a:	2f00      	cmp	r7, #0
 801ba6c:	d0a9      	beq.n	801b9c2 <__sflush_r+0x1a>
 801ba6e:	0793      	lsls	r3, r2, #30
 801ba70:	680e      	ldr	r6, [r1, #0]
 801ba72:	bf08      	it	eq
 801ba74:	694b      	ldreq	r3, [r1, #20]
 801ba76:	600f      	str	r7, [r1, #0]
 801ba78:	bf18      	it	ne
 801ba7a:	2300      	movne	r3, #0
 801ba7c:	eba6 0807 	sub.w	r8, r6, r7
 801ba80:	608b      	str	r3, [r1, #8]
 801ba82:	f1b8 0f00 	cmp.w	r8, #0
 801ba86:	dd9c      	ble.n	801b9c2 <__sflush_r+0x1a>
 801ba88:	4643      	mov	r3, r8
 801ba8a:	463a      	mov	r2, r7
 801ba8c:	6a21      	ldr	r1, [r4, #32]
 801ba8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ba90:	4628      	mov	r0, r5
 801ba92:	47b0      	blx	r6
 801ba94:	2800      	cmp	r0, #0
 801ba96:	dc06      	bgt.n	801baa6 <__sflush_r+0xfe>
 801ba98:	89a3      	ldrh	r3, [r4, #12]
 801ba9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba9e:	81a3      	strh	r3, [r4, #12]
 801baa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801baa4:	e78e      	b.n	801b9c4 <__sflush_r+0x1c>
 801baa6:	4407      	add	r7, r0
 801baa8:	eba8 0800 	sub.w	r8, r8, r0
 801baac:	e7e9      	b.n	801ba82 <__sflush_r+0xda>
 801baae:	bf00      	nop
 801bab0:	20400001 	.word	0x20400001

0801bab4 <_fflush_r>:
 801bab4:	b538      	push	{r3, r4, r5, lr}
 801bab6:	690b      	ldr	r3, [r1, #16]
 801bab8:	4605      	mov	r5, r0
 801baba:	460c      	mov	r4, r1
 801babc:	b1db      	cbz	r3, 801baf6 <_fflush_r+0x42>
 801babe:	b118      	cbz	r0, 801bac8 <_fflush_r+0x14>
 801bac0:	6983      	ldr	r3, [r0, #24]
 801bac2:	b90b      	cbnz	r3, 801bac8 <_fflush_r+0x14>
 801bac4:	f7ff fa38 	bl	801af38 <__sinit>
 801bac8:	4b0c      	ldr	r3, [pc, #48]	; (801bafc <_fflush_r+0x48>)
 801baca:	429c      	cmp	r4, r3
 801bacc:	d109      	bne.n	801bae2 <_fflush_r+0x2e>
 801bace:	686c      	ldr	r4, [r5, #4]
 801bad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bad4:	b17b      	cbz	r3, 801baf6 <_fflush_r+0x42>
 801bad6:	4621      	mov	r1, r4
 801bad8:	4628      	mov	r0, r5
 801bada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bade:	f7ff bf63 	b.w	801b9a8 <__sflush_r>
 801bae2:	4b07      	ldr	r3, [pc, #28]	; (801bb00 <_fflush_r+0x4c>)
 801bae4:	429c      	cmp	r4, r3
 801bae6:	d101      	bne.n	801baec <_fflush_r+0x38>
 801bae8:	68ac      	ldr	r4, [r5, #8]
 801baea:	e7f1      	b.n	801bad0 <_fflush_r+0x1c>
 801baec:	4b05      	ldr	r3, [pc, #20]	; (801bb04 <_fflush_r+0x50>)
 801baee:	429c      	cmp	r4, r3
 801baf0:	bf08      	it	eq
 801baf2:	68ec      	ldreq	r4, [r5, #12]
 801baf4:	e7ec      	b.n	801bad0 <_fflush_r+0x1c>
 801baf6:	2000      	movs	r0, #0
 801baf8:	bd38      	pop	{r3, r4, r5, pc}
 801bafa:	bf00      	nop
 801bafc:	0801e9d4 	.word	0x0801e9d4
 801bb00:	0801e9f4 	.word	0x0801e9f4
 801bb04:	0801e9b4 	.word	0x0801e9b4

0801bb08 <_lseek_r>:
 801bb08:	b538      	push	{r3, r4, r5, lr}
 801bb0a:	4c07      	ldr	r4, [pc, #28]	; (801bb28 <_lseek_r+0x20>)
 801bb0c:	4605      	mov	r5, r0
 801bb0e:	4608      	mov	r0, r1
 801bb10:	4611      	mov	r1, r2
 801bb12:	2200      	movs	r2, #0
 801bb14:	6022      	str	r2, [r4, #0]
 801bb16:	461a      	mov	r2, r3
 801bb18:	f7ed f9ca 	bl	8008eb0 <_lseek>
 801bb1c:	1c43      	adds	r3, r0, #1
 801bb1e:	d102      	bne.n	801bb26 <_lseek_r+0x1e>
 801bb20:	6823      	ldr	r3, [r4, #0]
 801bb22:	b103      	cbz	r3, 801bb26 <_lseek_r+0x1e>
 801bb24:	602b      	str	r3, [r5, #0]
 801bb26:	bd38      	pop	{r3, r4, r5, pc}
 801bb28:	2000b4e0 	.word	0x2000b4e0

0801bb2c <__swhatbuf_r>:
 801bb2c:	b570      	push	{r4, r5, r6, lr}
 801bb2e:	460e      	mov	r6, r1
 801bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb34:	2900      	cmp	r1, #0
 801bb36:	b096      	sub	sp, #88	; 0x58
 801bb38:	4614      	mov	r4, r2
 801bb3a:	461d      	mov	r5, r3
 801bb3c:	da07      	bge.n	801bb4e <__swhatbuf_r+0x22>
 801bb3e:	2300      	movs	r3, #0
 801bb40:	602b      	str	r3, [r5, #0]
 801bb42:	89b3      	ldrh	r3, [r6, #12]
 801bb44:	061a      	lsls	r2, r3, #24
 801bb46:	d410      	bmi.n	801bb6a <__swhatbuf_r+0x3e>
 801bb48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bb4c:	e00e      	b.n	801bb6c <__swhatbuf_r+0x40>
 801bb4e:	466a      	mov	r2, sp
 801bb50:	f000 f864 	bl	801bc1c <_fstat_r>
 801bb54:	2800      	cmp	r0, #0
 801bb56:	dbf2      	blt.n	801bb3e <__swhatbuf_r+0x12>
 801bb58:	9a01      	ldr	r2, [sp, #4]
 801bb5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bb5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bb62:	425a      	negs	r2, r3
 801bb64:	415a      	adcs	r2, r3
 801bb66:	602a      	str	r2, [r5, #0]
 801bb68:	e7ee      	b.n	801bb48 <__swhatbuf_r+0x1c>
 801bb6a:	2340      	movs	r3, #64	; 0x40
 801bb6c:	2000      	movs	r0, #0
 801bb6e:	6023      	str	r3, [r4, #0]
 801bb70:	b016      	add	sp, #88	; 0x58
 801bb72:	bd70      	pop	{r4, r5, r6, pc}

0801bb74 <__smakebuf_r>:
 801bb74:	898b      	ldrh	r3, [r1, #12]
 801bb76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bb78:	079d      	lsls	r5, r3, #30
 801bb7a:	4606      	mov	r6, r0
 801bb7c:	460c      	mov	r4, r1
 801bb7e:	d507      	bpl.n	801bb90 <__smakebuf_r+0x1c>
 801bb80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bb84:	6023      	str	r3, [r4, #0]
 801bb86:	6123      	str	r3, [r4, #16]
 801bb88:	2301      	movs	r3, #1
 801bb8a:	6163      	str	r3, [r4, #20]
 801bb8c:	b002      	add	sp, #8
 801bb8e:	bd70      	pop	{r4, r5, r6, pc}
 801bb90:	ab01      	add	r3, sp, #4
 801bb92:	466a      	mov	r2, sp
 801bb94:	f7ff ffca 	bl	801bb2c <__swhatbuf_r>
 801bb98:	9900      	ldr	r1, [sp, #0]
 801bb9a:	4605      	mov	r5, r0
 801bb9c:	4630      	mov	r0, r6
 801bb9e:	f7ff faab 	bl	801b0f8 <_malloc_r>
 801bba2:	b948      	cbnz	r0, 801bbb8 <__smakebuf_r+0x44>
 801bba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bba8:	059a      	lsls	r2, r3, #22
 801bbaa:	d4ef      	bmi.n	801bb8c <__smakebuf_r+0x18>
 801bbac:	f023 0303 	bic.w	r3, r3, #3
 801bbb0:	f043 0302 	orr.w	r3, r3, #2
 801bbb4:	81a3      	strh	r3, [r4, #12]
 801bbb6:	e7e3      	b.n	801bb80 <__smakebuf_r+0xc>
 801bbb8:	4b0d      	ldr	r3, [pc, #52]	; (801bbf0 <__smakebuf_r+0x7c>)
 801bbba:	62b3      	str	r3, [r6, #40]	; 0x28
 801bbbc:	89a3      	ldrh	r3, [r4, #12]
 801bbbe:	6020      	str	r0, [r4, #0]
 801bbc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bbc4:	81a3      	strh	r3, [r4, #12]
 801bbc6:	9b00      	ldr	r3, [sp, #0]
 801bbc8:	6163      	str	r3, [r4, #20]
 801bbca:	9b01      	ldr	r3, [sp, #4]
 801bbcc:	6120      	str	r0, [r4, #16]
 801bbce:	b15b      	cbz	r3, 801bbe8 <__smakebuf_r+0x74>
 801bbd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bbd4:	4630      	mov	r0, r6
 801bbd6:	f000 f833 	bl	801bc40 <_isatty_r>
 801bbda:	b128      	cbz	r0, 801bbe8 <__smakebuf_r+0x74>
 801bbdc:	89a3      	ldrh	r3, [r4, #12]
 801bbde:	f023 0303 	bic.w	r3, r3, #3
 801bbe2:	f043 0301 	orr.w	r3, r3, #1
 801bbe6:	81a3      	strh	r3, [r4, #12]
 801bbe8:	89a3      	ldrh	r3, [r4, #12]
 801bbea:	431d      	orrs	r5, r3
 801bbec:	81a5      	strh	r5, [r4, #12]
 801bbee:	e7cd      	b.n	801bb8c <__smakebuf_r+0x18>
 801bbf0:	0801af01 	.word	0x0801af01

0801bbf4 <__malloc_lock>:
 801bbf4:	4770      	bx	lr

0801bbf6 <__malloc_unlock>:
 801bbf6:	4770      	bx	lr

0801bbf8 <_read_r>:
 801bbf8:	b538      	push	{r3, r4, r5, lr}
 801bbfa:	4c07      	ldr	r4, [pc, #28]	; (801bc18 <_read_r+0x20>)
 801bbfc:	4605      	mov	r5, r0
 801bbfe:	4608      	mov	r0, r1
 801bc00:	4611      	mov	r1, r2
 801bc02:	2200      	movs	r2, #0
 801bc04:	6022      	str	r2, [r4, #0]
 801bc06:	461a      	mov	r2, r3
 801bc08:	f7ed f8f2 	bl	8008df0 <_read>
 801bc0c:	1c43      	adds	r3, r0, #1
 801bc0e:	d102      	bne.n	801bc16 <_read_r+0x1e>
 801bc10:	6823      	ldr	r3, [r4, #0]
 801bc12:	b103      	cbz	r3, 801bc16 <_read_r+0x1e>
 801bc14:	602b      	str	r3, [r5, #0]
 801bc16:	bd38      	pop	{r3, r4, r5, pc}
 801bc18:	2000b4e0 	.word	0x2000b4e0

0801bc1c <_fstat_r>:
 801bc1c:	b538      	push	{r3, r4, r5, lr}
 801bc1e:	4c07      	ldr	r4, [pc, #28]	; (801bc3c <_fstat_r+0x20>)
 801bc20:	2300      	movs	r3, #0
 801bc22:	4605      	mov	r5, r0
 801bc24:	4608      	mov	r0, r1
 801bc26:	4611      	mov	r1, r2
 801bc28:	6023      	str	r3, [r4, #0]
 801bc2a:	f7ed f926 	bl	8008e7a <_fstat>
 801bc2e:	1c43      	adds	r3, r0, #1
 801bc30:	d102      	bne.n	801bc38 <_fstat_r+0x1c>
 801bc32:	6823      	ldr	r3, [r4, #0]
 801bc34:	b103      	cbz	r3, 801bc38 <_fstat_r+0x1c>
 801bc36:	602b      	str	r3, [r5, #0]
 801bc38:	bd38      	pop	{r3, r4, r5, pc}
 801bc3a:	bf00      	nop
 801bc3c:	2000b4e0 	.word	0x2000b4e0

0801bc40 <_isatty_r>:
 801bc40:	b538      	push	{r3, r4, r5, lr}
 801bc42:	4c06      	ldr	r4, [pc, #24]	; (801bc5c <_isatty_r+0x1c>)
 801bc44:	2300      	movs	r3, #0
 801bc46:	4605      	mov	r5, r0
 801bc48:	4608      	mov	r0, r1
 801bc4a:	6023      	str	r3, [r4, #0]
 801bc4c:	f7ed f925 	bl	8008e9a <_isatty>
 801bc50:	1c43      	adds	r3, r0, #1
 801bc52:	d102      	bne.n	801bc5a <_isatty_r+0x1a>
 801bc54:	6823      	ldr	r3, [r4, #0]
 801bc56:	b103      	cbz	r3, 801bc5a <_isatty_r+0x1a>
 801bc58:	602b      	str	r3, [r5, #0]
 801bc5a:	bd38      	pop	{r3, r4, r5, pc}
 801bc5c:	2000b4e0 	.word	0x2000b4e0

0801bc60 <_init>:
 801bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc62:	bf00      	nop
 801bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc66:	bc08      	pop	{r3}
 801bc68:	469e      	mov	lr, r3
 801bc6a:	4770      	bx	lr

0801bc6c <_fini>:
 801bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc6e:	bf00      	nop
 801bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc72:	bc08      	pop	{r3}
 801bc74:	469e      	mov	lr, r3
 801bc76:	4770      	bx	lr
