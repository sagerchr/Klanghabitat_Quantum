
updating_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .shared       00000040  20000000  20000000  00020000  2**2
                  ALLOC
  1 .isr_vector   000001fc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003fa8  080081fc  080081fc  000081fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0800c1a4  0800c1a4  0000c1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800c1bc  0800c1bc  0000c1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800c1c4  0800c1c4  0000c1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800c1c8  0800c1c8  0000c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000000c  20000040  0800c1cc  00010040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000004ec  2000004c  0800c1d8  0001004c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000538  0800c1d8  00010538  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001004c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f0ef  00000000  00000000  0001007a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000022b8  00000000  00000000  0001f169  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ca8  00000000  00000000  00021428  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b80  00000000  00000000  000220d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00027c66  00000000  00000000  00022c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000b3a6  00000000  00000000  0004a8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000f8847  00000000  00000000  00055c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0014e4a3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003338  00000000  00000000  0014e520  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080081fc <__do_global_dtors_aux>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4c05      	ldr	r4, [pc, #20]	; (8008214 <__do_global_dtors_aux+0x18>)
 8008200:	7823      	ldrb	r3, [r4, #0]
 8008202:	b933      	cbnz	r3, 8008212 <__do_global_dtors_aux+0x16>
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <__do_global_dtors_aux+0x1c>)
 8008206:	b113      	cbz	r3, 800820e <__do_global_dtors_aux+0x12>
 8008208:	4804      	ldr	r0, [pc, #16]	; (800821c <__do_global_dtors_aux+0x20>)
 800820a:	f3af 8000 	nop.w
 800820e:	2301      	movs	r3, #1
 8008210:	7023      	strb	r3, [r4, #0]
 8008212:	bd10      	pop	{r4, pc}
 8008214:	2000004c 	.word	0x2000004c
 8008218:	00000000 	.word	0x00000000
 800821c:	0800c18c 	.word	0x0800c18c

08008220 <frame_dummy>:
 8008220:	b508      	push	{r3, lr}
 8008222:	4b03      	ldr	r3, [pc, #12]	; (8008230 <frame_dummy+0x10>)
 8008224:	b11b      	cbz	r3, 800822e <frame_dummy+0xe>
 8008226:	4903      	ldr	r1, [pc, #12]	; (8008234 <frame_dummy+0x14>)
 8008228:	4803      	ldr	r0, [pc, #12]	; (8008238 <frame_dummy+0x18>)
 800822a:	f3af 8000 	nop.w
 800822e:	bd08      	pop	{r3, pc}
 8008230:	00000000 	.word	0x00000000
 8008234:	20000050 	.word	0x20000050
 8008238:	0800c18c 	.word	0x0800c18c

0800823c <__aeabi_uldivmod>:
 800823c:	b953      	cbnz	r3, 8008254 <__aeabi_uldivmod+0x18>
 800823e:	b94a      	cbnz	r2, 8008254 <__aeabi_uldivmod+0x18>
 8008240:	2900      	cmp	r1, #0
 8008242:	bf08      	it	eq
 8008244:	2800      	cmpeq	r0, #0
 8008246:	bf1c      	itt	ne
 8008248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800824c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008250:	f000 b972 	b.w	8008538 <__aeabi_idiv0>
 8008254:	f1ad 0c08 	sub.w	ip, sp, #8
 8008258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800825c:	f000 f806 	bl	800826c <__udivmoddi4>
 8008260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008268:	b004      	add	sp, #16
 800826a:	4770      	bx	lr

0800826c <__udivmoddi4>:
 800826c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	9e08      	ldr	r6, [sp, #32]
 8008272:	4604      	mov	r4, r0
 8008274:	4688      	mov	r8, r1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d14b      	bne.n	8008312 <__udivmoddi4+0xa6>
 800827a:	428a      	cmp	r2, r1
 800827c:	4615      	mov	r5, r2
 800827e:	d967      	bls.n	8008350 <__udivmoddi4+0xe4>
 8008280:	fab2 f282 	clz	r2, r2
 8008284:	b14a      	cbz	r2, 800829a <__udivmoddi4+0x2e>
 8008286:	f1c2 0720 	rsb	r7, r2, #32
 800828a:	fa01 f302 	lsl.w	r3, r1, r2
 800828e:	fa20 f707 	lsr.w	r7, r0, r7
 8008292:	4095      	lsls	r5, r2
 8008294:	ea47 0803 	orr.w	r8, r7, r3
 8008298:	4094      	lsls	r4, r2
 800829a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800829e:	0c23      	lsrs	r3, r4, #16
 80082a0:	fbb8 f7fe 	udiv	r7, r8, lr
 80082a4:	fa1f fc85 	uxth.w	ip, r5
 80082a8:	fb0e 8817 	mls	r8, lr, r7, r8
 80082ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80082b0:	fb07 f10c 	mul.w	r1, r7, ip
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d909      	bls.n	80082cc <__udivmoddi4+0x60>
 80082b8:	18eb      	adds	r3, r5, r3
 80082ba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80082be:	f080 811b 	bcs.w	80084f8 <__udivmoddi4+0x28c>
 80082c2:	4299      	cmp	r1, r3
 80082c4:	f240 8118 	bls.w	80084f8 <__udivmoddi4+0x28c>
 80082c8:	3f02      	subs	r7, #2
 80082ca:	442b      	add	r3, r5
 80082cc:	1a5b      	subs	r3, r3, r1
 80082ce:	b2a4      	uxth	r4, r4
 80082d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80082d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80082d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80082dc:	fb00 fc0c 	mul.w	ip, r0, ip
 80082e0:	45a4      	cmp	ip, r4
 80082e2:	d909      	bls.n	80082f8 <__udivmoddi4+0x8c>
 80082e4:	192c      	adds	r4, r5, r4
 80082e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80082ea:	f080 8107 	bcs.w	80084fc <__udivmoddi4+0x290>
 80082ee:	45a4      	cmp	ip, r4
 80082f0:	f240 8104 	bls.w	80084fc <__udivmoddi4+0x290>
 80082f4:	3802      	subs	r0, #2
 80082f6:	442c      	add	r4, r5
 80082f8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80082fc:	eba4 040c 	sub.w	r4, r4, ip
 8008300:	2700      	movs	r7, #0
 8008302:	b11e      	cbz	r6, 800830c <__udivmoddi4+0xa0>
 8008304:	40d4      	lsrs	r4, r2
 8008306:	2300      	movs	r3, #0
 8008308:	e9c6 4300 	strd	r4, r3, [r6]
 800830c:	4639      	mov	r1, r7
 800830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008312:	428b      	cmp	r3, r1
 8008314:	d909      	bls.n	800832a <__udivmoddi4+0xbe>
 8008316:	2e00      	cmp	r6, #0
 8008318:	f000 80eb 	beq.w	80084f2 <__udivmoddi4+0x286>
 800831c:	2700      	movs	r7, #0
 800831e:	e9c6 0100 	strd	r0, r1, [r6]
 8008322:	4638      	mov	r0, r7
 8008324:	4639      	mov	r1, r7
 8008326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832a:	fab3 f783 	clz	r7, r3
 800832e:	2f00      	cmp	r7, #0
 8008330:	d147      	bne.n	80083c2 <__udivmoddi4+0x156>
 8008332:	428b      	cmp	r3, r1
 8008334:	d302      	bcc.n	800833c <__udivmoddi4+0xd0>
 8008336:	4282      	cmp	r2, r0
 8008338:	f200 80fa 	bhi.w	8008530 <__udivmoddi4+0x2c4>
 800833c:	1a84      	subs	r4, r0, r2
 800833e:	eb61 0303 	sbc.w	r3, r1, r3
 8008342:	2001      	movs	r0, #1
 8008344:	4698      	mov	r8, r3
 8008346:	2e00      	cmp	r6, #0
 8008348:	d0e0      	beq.n	800830c <__udivmoddi4+0xa0>
 800834a:	e9c6 4800 	strd	r4, r8, [r6]
 800834e:	e7dd      	b.n	800830c <__udivmoddi4+0xa0>
 8008350:	b902      	cbnz	r2, 8008354 <__udivmoddi4+0xe8>
 8008352:	deff      	udf	#255	; 0xff
 8008354:	fab2 f282 	clz	r2, r2
 8008358:	2a00      	cmp	r2, #0
 800835a:	f040 808f 	bne.w	800847c <__udivmoddi4+0x210>
 800835e:	1b49      	subs	r1, r1, r5
 8008360:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008364:	fa1f f885 	uxth.w	r8, r5
 8008368:	2701      	movs	r7, #1
 800836a:	fbb1 fcfe 	udiv	ip, r1, lr
 800836e:	0c23      	lsrs	r3, r4, #16
 8008370:	fb0e 111c 	mls	r1, lr, ip, r1
 8008374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008378:	fb08 f10c 	mul.w	r1, r8, ip
 800837c:	4299      	cmp	r1, r3
 800837e:	d907      	bls.n	8008390 <__udivmoddi4+0x124>
 8008380:	18eb      	adds	r3, r5, r3
 8008382:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8008386:	d202      	bcs.n	800838e <__udivmoddi4+0x122>
 8008388:	4299      	cmp	r1, r3
 800838a:	f200 80cd 	bhi.w	8008528 <__udivmoddi4+0x2bc>
 800838e:	4684      	mov	ip, r0
 8008390:	1a59      	subs	r1, r3, r1
 8008392:	b2a3      	uxth	r3, r4
 8008394:	fbb1 f0fe 	udiv	r0, r1, lr
 8008398:	fb0e 1410 	mls	r4, lr, r0, r1
 800839c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80083a0:	fb08 f800 	mul.w	r8, r8, r0
 80083a4:	45a0      	cmp	r8, r4
 80083a6:	d907      	bls.n	80083b8 <__udivmoddi4+0x14c>
 80083a8:	192c      	adds	r4, r5, r4
 80083aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083ae:	d202      	bcs.n	80083b6 <__udivmoddi4+0x14a>
 80083b0:	45a0      	cmp	r8, r4
 80083b2:	f200 80b6 	bhi.w	8008522 <__udivmoddi4+0x2b6>
 80083b6:	4618      	mov	r0, r3
 80083b8:	eba4 0408 	sub.w	r4, r4, r8
 80083bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80083c0:	e79f      	b.n	8008302 <__udivmoddi4+0x96>
 80083c2:	f1c7 0c20 	rsb	ip, r7, #32
 80083c6:	40bb      	lsls	r3, r7
 80083c8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80083cc:	ea4e 0e03 	orr.w	lr, lr, r3
 80083d0:	fa01 f407 	lsl.w	r4, r1, r7
 80083d4:	fa20 f50c 	lsr.w	r5, r0, ip
 80083d8:	fa21 f30c 	lsr.w	r3, r1, ip
 80083dc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80083e0:	4325      	orrs	r5, r4
 80083e2:	fbb3 f9f8 	udiv	r9, r3, r8
 80083e6:	0c2c      	lsrs	r4, r5, #16
 80083e8:	fb08 3319 	mls	r3, r8, r9, r3
 80083ec:	fa1f fa8e 	uxth.w	sl, lr
 80083f0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80083f4:	fb09 f40a 	mul.w	r4, r9, sl
 80083f8:	429c      	cmp	r4, r3
 80083fa:	fa02 f207 	lsl.w	r2, r2, r7
 80083fe:	fa00 f107 	lsl.w	r1, r0, r7
 8008402:	d90b      	bls.n	800841c <__udivmoddi4+0x1b0>
 8008404:	eb1e 0303 	adds.w	r3, lr, r3
 8008408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800840c:	f080 8087 	bcs.w	800851e <__udivmoddi4+0x2b2>
 8008410:	429c      	cmp	r4, r3
 8008412:	f240 8084 	bls.w	800851e <__udivmoddi4+0x2b2>
 8008416:	f1a9 0902 	sub.w	r9, r9, #2
 800841a:	4473      	add	r3, lr
 800841c:	1b1b      	subs	r3, r3, r4
 800841e:	b2ad      	uxth	r5, r5
 8008420:	fbb3 f0f8 	udiv	r0, r3, r8
 8008424:	fb08 3310 	mls	r3, r8, r0, r3
 8008428:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800842c:	fb00 fa0a 	mul.w	sl, r0, sl
 8008430:	45a2      	cmp	sl, r4
 8008432:	d908      	bls.n	8008446 <__udivmoddi4+0x1da>
 8008434:	eb1e 0404 	adds.w	r4, lr, r4
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800843c:	d26b      	bcs.n	8008516 <__udivmoddi4+0x2aa>
 800843e:	45a2      	cmp	sl, r4
 8008440:	d969      	bls.n	8008516 <__udivmoddi4+0x2aa>
 8008442:	3802      	subs	r0, #2
 8008444:	4474      	add	r4, lr
 8008446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800844a:	fba0 8902 	umull	r8, r9, r0, r2
 800844e:	eba4 040a 	sub.w	r4, r4, sl
 8008452:	454c      	cmp	r4, r9
 8008454:	46c2      	mov	sl, r8
 8008456:	464b      	mov	r3, r9
 8008458:	d354      	bcc.n	8008504 <__udivmoddi4+0x298>
 800845a:	d051      	beq.n	8008500 <__udivmoddi4+0x294>
 800845c:	2e00      	cmp	r6, #0
 800845e:	d069      	beq.n	8008534 <__udivmoddi4+0x2c8>
 8008460:	ebb1 050a 	subs.w	r5, r1, sl
 8008464:	eb64 0403 	sbc.w	r4, r4, r3
 8008468:	fa04 fc0c 	lsl.w	ip, r4, ip
 800846c:	40fd      	lsrs	r5, r7
 800846e:	40fc      	lsrs	r4, r7
 8008470:	ea4c 0505 	orr.w	r5, ip, r5
 8008474:	e9c6 5400 	strd	r5, r4, [r6]
 8008478:	2700      	movs	r7, #0
 800847a:	e747      	b.n	800830c <__udivmoddi4+0xa0>
 800847c:	f1c2 0320 	rsb	r3, r2, #32
 8008480:	fa20 f703 	lsr.w	r7, r0, r3
 8008484:	4095      	lsls	r5, r2
 8008486:	fa01 f002 	lsl.w	r0, r1, r2
 800848a:	fa21 f303 	lsr.w	r3, r1, r3
 800848e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008492:	4338      	orrs	r0, r7
 8008494:	0c01      	lsrs	r1, r0, #16
 8008496:	fbb3 f7fe 	udiv	r7, r3, lr
 800849a:	fa1f f885 	uxth.w	r8, r5
 800849e:	fb0e 3317 	mls	r3, lr, r7, r3
 80084a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084a6:	fb07 f308 	mul.w	r3, r7, r8
 80084aa:	428b      	cmp	r3, r1
 80084ac:	fa04 f402 	lsl.w	r4, r4, r2
 80084b0:	d907      	bls.n	80084c2 <__udivmoddi4+0x256>
 80084b2:	1869      	adds	r1, r5, r1
 80084b4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80084b8:	d22f      	bcs.n	800851a <__udivmoddi4+0x2ae>
 80084ba:	428b      	cmp	r3, r1
 80084bc:	d92d      	bls.n	800851a <__udivmoddi4+0x2ae>
 80084be:	3f02      	subs	r7, #2
 80084c0:	4429      	add	r1, r5
 80084c2:	1acb      	subs	r3, r1, r3
 80084c4:	b281      	uxth	r1, r0
 80084c6:	fbb3 f0fe 	udiv	r0, r3, lr
 80084ca:	fb0e 3310 	mls	r3, lr, r0, r3
 80084ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084d2:	fb00 f308 	mul.w	r3, r0, r8
 80084d6:	428b      	cmp	r3, r1
 80084d8:	d907      	bls.n	80084ea <__udivmoddi4+0x27e>
 80084da:	1869      	adds	r1, r5, r1
 80084dc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80084e0:	d217      	bcs.n	8008512 <__udivmoddi4+0x2a6>
 80084e2:	428b      	cmp	r3, r1
 80084e4:	d915      	bls.n	8008512 <__udivmoddi4+0x2a6>
 80084e6:	3802      	subs	r0, #2
 80084e8:	4429      	add	r1, r5
 80084ea:	1ac9      	subs	r1, r1, r3
 80084ec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80084f0:	e73b      	b.n	800836a <__udivmoddi4+0xfe>
 80084f2:	4637      	mov	r7, r6
 80084f4:	4630      	mov	r0, r6
 80084f6:	e709      	b.n	800830c <__udivmoddi4+0xa0>
 80084f8:	4607      	mov	r7, r0
 80084fa:	e6e7      	b.n	80082cc <__udivmoddi4+0x60>
 80084fc:	4618      	mov	r0, r3
 80084fe:	e6fb      	b.n	80082f8 <__udivmoddi4+0x8c>
 8008500:	4541      	cmp	r1, r8
 8008502:	d2ab      	bcs.n	800845c <__udivmoddi4+0x1f0>
 8008504:	ebb8 0a02 	subs.w	sl, r8, r2
 8008508:	eb69 020e 	sbc.w	r2, r9, lr
 800850c:	3801      	subs	r0, #1
 800850e:	4613      	mov	r3, r2
 8008510:	e7a4      	b.n	800845c <__udivmoddi4+0x1f0>
 8008512:	4660      	mov	r0, ip
 8008514:	e7e9      	b.n	80084ea <__udivmoddi4+0x27e>
 8008516:	4618      	mov	r0, r3
 8008518:	e795      	b.n	8008446 <__udivmoddi4+0x1da>
 800851a:	4667      	mov	r7, ip
 800851c:	e7d1      	b.n	80084c2 <__udivmoddi4+0x256>
 800851e:	4681      	mov	r9, r0
 8008520:	e77c      	b.n	800841c <__udivmoddi4+0x1b0>
 8008522:	3802      	subs	r0, #2
 8008524:	442c      	add	r4, r5
 8008526:	e747      	b.n	80083b8 <__udivmoddi4+0x14c>
 8008528:	f1ac 0c02 	sub.w	ip, ip, #2
 800852c:	442b      	add	r3, r5
 800852e:	e72f      	b.n	8008390 <__udivmoddi4+0x124>
 8008530:	4638      	mov	r0, r7
 8008532:	e708      	b.n	8008346 <__udivmoddi4+0xda>
 8008534:	4637      	mov	r7, r6
 8008536:	e6e9      	b.n	800830c <__udivmoddi4+0xa0>

08008538 <__aeabi_idiv0>:
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop

0800853c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008540:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <__NVIC_SystemReset+0x20>)
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800854c:	4903      	ldr	r1, [pc, #12]	; (800855c <__NVIC_SystemReset+0x20>)
 800854e:	4b04      	ldr	r3, [pc, #16]	; (8008560 <__NVIC_SystemReset+0x24>)
 8008550:	4313      	orrs	r3, r2
 8008552:	60cb      	str	r3, [r1, #12]
 8008554:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008558:	bf00      	nop
 800855a:	e7fd      	b.n	8008558 <__NVIC_SystemReset+0x1c>
 800855c:	e000ed00 	.word	0xe000ed00
 8008560:	05fa0004 	.word	0x05fa0004

08008564 <BootActivate>:
** \brief     Bootloader activation function.
** \return    none.
**
****************************************************************************************/
void BootActivate(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* perform software reset to activate the bootoader again */
  NVIC_SystemReset();
 8008568:	f7ff ffe8 	bl	800853c <__NVIC_SystemReset>

0800856c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	VectorBase_Config();
 8008572:	f000 fa0f 	bl	8008994 <VectorBase_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008576:	f000 fcb0 	bl	8008eda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800857a:	f000 f835 	bl	80085e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800857e:	f000 f967 	bl	8008850 <MX_GPIO_Init>
  MX_ETH_Init();
 8008582:	f000 f8c7 	bl	8008714 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8008586:	f000 f905 	bl	8008794 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800858a:	f000 f933 	bl	80087f4 <MX_USB_OTG_FS_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i= 0; i <10 ; i++){
 800858e:	2300      	movs	r3, #0
 8008590:	607b      	str	r3, [r7, #4]
 8008592:	e00b      	b.n	80085ac <main+0x40>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 8008594:	f244 0181 	movw	r1, #16513	; 0x4081
 8008598:	4812      	ldr	r0, [pc, #72]	; (80085e4 <main+0x78>)
 800859a:	f001 fc32 	bl	8009e02 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 800859e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085a2:	f000 fcf7 	bl	8008f94 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3301      	adds	r3, #1
 80085aa:	607b      	str	r3, [r7, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b09      	cmp	r3, #9
 80085b0:	ddf0      	ble.n	8008594 <main+0x28>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 80085b2:	2300      	movs	r3, #0
 80085b4:	603b      	str	r3, [r7, #0]
 80085b6:	e00a      	b.n	80085ce <main+0x62>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin);
 80085b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80085bc:	4809      	ldr	r0, [pc, #36]	; (80085e4 <main+0x78>)
 80085be:	f001 fc20 	bl	8009e02 <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 80085c2:	2032      	movs	r0, #50	; 0x32
 80085c4:	f000 fce6 	bl	8008f94 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	603b      	str	r3, [r7, #0]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	ddf1      	ble.n	80085b8 <main+0x4c>
	  }
      SharedParamsWriteByIndex(0, 1);
 80085d4:	2101      	movs	r1, #1
 80085d6:	2000      	movs	r0, #0
 80085d8:	f000 f9f2 	bl	80089c0 <SharedParamsWriteByIndex>
      /* connection request received so start the bootloader */
      BootActivate();
 80085dc:	f7ff ffc2 	bl	8008564 <BootActivate>
	  for(int i= 0; i <10 ; i++){
 80085e0:	e7d5      	b.n	800858e <main+0x22>
 80085e2:	bf00      	nop
 80085e4:	40020400 	.word	0x40020400

080085e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b0b8      	sub	sp, #224	; 0xe0
 80085ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80085f2:	2234      	movs	r2, #52	; 0x34
 80085f4:	2100      	movs	r1, #0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f003 fdc0 	bl	800c17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	605a      	str	r2, [r3, #4]
 8008606:	609a      	str	r2, [r3, #8]
 8008608:	60da      	str	r2, [r3, #12]
 800860a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800860c:	f107 0308 	add.w	r3, r7, #8
 8008610:	2290      	movs	r2, #144	; 0x90
 8008612:	2100      	movs	r1, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f003 fdb1 	bl	800c17c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800861a:	f001 fd55 	bl	800a0c8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800861e:	4b3a      	ldr	r3, [pc, #232]	; (8008708 <SystemClock_Config+0x120>)
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	4a39      	ldr	r2, [pc, #228]	; (8008708 <SystemClock_Config+0x120>)
 8008624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008628:	6413      	str	r3, [r2, #64]	; 0x40
 800862a:	4b37      	ldr	r3, [pc, #220]	; (8008708 <SystemClock_Config+0x120>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008632:	607b      	str	r3, [r7, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008636:	4b35      	ldr	r3, [pc, #212]	; (800870c <SystemClock_Config+0x124>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800863e:	4a33      	ldr	r2, [pc, #204]	; (800870c <SystemClock_Config+0x124>)
 8008640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	4b31      	ldr	r3, [pc, #196]	; (800870c <SystemClock_Config+0x124>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008652:	2301      	movs	r3, #1
 8008654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8008658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800865c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008660:	2302      	movs	r3, #2
 8008662:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800866a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800866e:	2304      	movs	r3, #4
 8008670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8008674:	2360      	movs	r3, #96	; 0x60
 8008676:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800867a:	2302      	movs	r3, #2
 800867c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008680:	2304      	movs	r3, #4
 8008682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008686:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800868a:	4618      	mov	r0, r3
 800868c:	f001 fd7c 	bl	800a188 <HAL_RCC_OscConfig>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8008696:	f000 f98b 	bl	80089b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800869a:	f001 fd25 	bl	800a0e8 <HAL_PWREx_EnableOverDrive>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80086a4:	f000 f984 	bl	80089b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086a8:	230f      	movs	r3, #15
 80086aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80086ae:	2302      	movs	r3, #2
 80086b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80086ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80086c2:	2300      	movs	r3, #0
 80086c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80086c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80086cc:	2103      	movs	r1, #3
 80086ce:	4618      	mov	r0, r3
 80086d0:	f002 f808 	bl	800a6e4 <HAL_RCC_ClockConfig>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80086da:	f000 f969 	bl	80089b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80086de:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <SystemClock_Config+0x128>)
 80086e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80086e2:	2300      	movs	r3, #0
 80086e4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80086ec:	f107 0308 	add.w	r3, r7, #8
 80086f0:	4618      	mov	r0, r3
 80086f2:	f002 f9ef 	bl	800aad4 <HAL_RCCEx_PeriphCLKConfig>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80086fc:	f000 f958 	bl	80089b0 <Error_Handler>
  }
}
 8008700:	bf00      	nop
 8008702:	37e0      	adds	r7, #224	; 0xe0
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40023800 	.word	0x40023800
 800870c:	40007000 	.word	0x40007000
 8008710:	00200100 	.word	0x00200100

08008714 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8008718:	4b1c      	ldr	r3, [pc, #112]	; (800878c <MX_ETH_Init+0x78>)
 800871a:	4a1d      	ldr	r2, [pc, #116]	; (8008790 <MX_ETH_Init+0x7c>)
 800871c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800871e:	4b1b      	ldr	r3, [pc, #108]	; (800878c <MX_ETH_Init+0x78>)
 8008720:	2201      	movs	r2, #1
 8008722:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008724:	4b19      	ldr	r3, [pc, #100]	; (800878c <MX_ETH_Init+0x78>)
 8008726:	2200      	movs	r2, #0
 8008728:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800872a:	4b18      	ldr	r3, [pc, #96]	; (800878c <MX_ETH_Init+0x78>)
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8008732:	4b16      	ldr	r3, [pc, #88]	; (800878c <MX_ETH_Init+0x78>)
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	3301      	adds	r3, #1
 8008738:	2280      	movs	r2, #128	; 0x80
 800873a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800873c:	4b13      	ldr	r3, [pc, #76]	; (800878c <MX_ETH_Init+0x78>)
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	3302      	adds	r3, #2
 8008742:	22e1      	movs	r2, #225	; 0xe1
 8008744:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <MX_ETH_Init+0x78>)
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	3303      	adds	r3, #3
 800874c:	2200      	movs	r2, #0
 800874e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8008750:	4b0e      	ldr	r3, [pc, #56]	; (800878c <MX_ETH_Init+0x78>)
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	3304      	adds	r3, #4
 8008756:	2200      	movs	r2, #0
 8008758:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800875a:	4b0c      	ldr	r3, [pc, #48]	; (800878c <MX_ETH_Init+0x78>)
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	3305      	adds	r3, #5
 8008760:	2200      	movs	r2, #0
 8008762:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008764:	4b09      	ldr	r3, [pc, #36]	; (800878c <MX_ETH_Init+0x78>)
 8008766:	2200      	movs	r2, #0
 8008768:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800876a:	4b08      	ldr	r3, [pc, #32]	; (800878c <MX_ETH_Init+0x78>)
 800876c:	2200      	movs	r2, #0
 800876e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008770:	4b06      	ldr	r3, [pc, #24]	; (800878c <MX_ETH_Init+0x78>)
 8008772:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008776:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8008778:	4804      	ldr	r0, [pc, #16]	; (800878c <MX_ETH_Init+0x78>)
 800877a:	f000 fd13 	bl	80091a4 <HAL_ETH_Init>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8008784:	f000 f914 	bl	80089b0 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8008788:	bf00      	nop
 800878a:	bd80      	pop	{r7, pc}
 800878c:	200004ec 	.word	0x200004ec
 8008790:	40028000 	.word	0x40028000

08008794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008798:	4b14      	ldr	r3, [pc, #80]	; (80087ec <MX_USART3_UART_Init+0x58>)
 800879a:	4a15      	ldr	r2, [pc, #84]	; (80087f0 <MX_USART3_UART_Init+0x5c>)
 800879c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800879e:	4b13      	ldr	r3, [pc, #76]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80087a6:	4b11      	ldr	r3, [pc, #68]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80087b2:	4b0e      	ldr	r3, [pc, #56]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80087b8:	4b0c      	ldr	r3, [pc, #48]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087ba:	220c      	movs	r2, #12
 80087bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80087c4:	4b09      	ldr	r3, [pc, #36]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087ca:	4b08      	ldr	r3, [pc, #32]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80087d6:	4805      	ldr	r0, [pc, #20]	; (80087ec <MX_USART3_UART_Init+0x58>)
 80087d8:	f002 fda2 	bl	800b320 <HAL_UART_Init>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80087e2:	f000 f8e5 	bl	80089b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80087e6:	bf00      	nop
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	20000068 	.word	0x20000068
 80087f0:	40004800 	.word	0x40004800

080087f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087f8:	4b14      	ldr	r3, [pc, #80]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008800:	4b12      	ldr	r3, [pc, #72]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008802:	2206      	movs	r2, #6
 8008804:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008808:	2202      	movs	r2, #2
 800880a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800880c:	4b0f      	ldr	r3, [pc, #60]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800880e:	2200      	movs	r2, #0
 8008810:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008812:	4b0e      	ldr	r3, [pc, #56]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008814:	2202      	movs	r2, #2
 8008816:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800881a:	2201      	movs	r2, #1
 800881c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800881e:	4b0b      	ldr	r3, [pc, #44]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008820:	2200      	movs	r2, #0
 8008822:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008824:	4b09      	ldr	r3, [pc, #36]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008826:	2200      	movs	r2, #0
 8008828:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800882a:	4b08      	ldr	r3, [pc, #32]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800882c:	2201      	movs	r2, #1
 800882e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008832:	2200      	movs	r2, #0
 8008834:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008836:	4805      	ldr	r0, [pc, #20]	; (800884c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8008838:	f001 fafd 	bl	8009e36 <HAL_PCD_Init>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8008842:	f000 f8b5 	bl	80089b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8008846:	bf00      	nop
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	200000e8 	.word	0x200000e8

08008850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08c      	sub	sp, #48	; 0x30
 8008854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008856:	f107 031c 	add.w	r3, r7, #28
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	605a      	str	r2, [r3, #4]
 8008860:	609a      	str	r2, [r3, #8]
 8008862:	60da      	str	r2, [r3, #12]
 8008864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008866:	4b46      	ldr	r3, [pc, #280]	; (8008980 <MX_GPIO_Init+0x130>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	4a45      	ldr	r2, [pc, #276]	; (8008980 <MX_GPIO_Init+0x130>)
 800886c:	f043 0304 	orr.w	r3, r3, #4
 8008870:	6313      	str	r3, [r2, #48]	; 0x30
 8008872:	4b43      	ldr	r3, [pc, #268]	; (8008980 <MX_GPIO_Init+0x130>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	61bb      	str	r3, [r7, #24]
 800887c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800887e:	4b40      	ldr	r3, [pc, #256]	; (8008980 <MX_GPIO_Init+0x130>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	4a3f      	ldr	r2, [pc, #252]	; (8008980 <MX_GPIO_Init+0x130>)
 8008884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008888:	6313      	str	r3, [r2, #48]	; 0x30
 800888a:	4b3d      	ldr	r3, [pc, #244]	; (8008980 <MX_GPIO_Init+0x130>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008896:	4b3a      	ldr	r3, [pc, #232]	; (8008980 <MX_GPIO_Init+0x130>)
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	4a39      	ldr	r2, [pc, #228]	; (8008980 <MX_GPIO_Init+0x130>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	6313      	str	r3, [r2, #48]	; 0x30
 80088a2:	4b37      	ldr	r3, [pc, #220]	; (8008980 <MX_GPIO_Init+0x130>)
 80088a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	613b      	str	r3, [r7, #16]
 80088ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80088ae:	4b34      	ldr	r3, [pc, #208]	; (8008980 <MX_GPIO_Init+0x130>)
 80088b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b2:	4a33      	ldr	r2, [pc, #204]	; (8008980 <MX_GPIO_Init+0x130>)
 80088b4:	f043 0302 	orr.w	r3, r3, #2
 80088b8:	6313      	str	r3, [r2, #48]	; 0x30
 80088ba:	4b31      	ldr	r3, [pc, #196]	; (8008980 <MX_GPIO_Init+0x130>)
 80088bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80088c6:	4b2e      	ldr	r3, [pc, #184]	; (8008980 <MX_GPIO_Init+0x130>)
 80088c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ca:	4a2d      	ldr	r2, [pc, #180]	; (8008980 <MX_GPIO_Init+0x130>)
 80088cc:	f043 0308 	orr.w	r3, r3, #8
 80088d0:	6313      	str	r3, [r2, #48]	; 0x30
 80088d2:	4b2b      	ldr	r3, [pc, #172]	; (8008980 <MX_GPIO_Init+0x130>)
 80088d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	60bb      	str	r3, [r7, #8]
 80088dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80088de:	4b28      	ldr	r3, [pc, #160]	; (8008980 <MX_GPIO_Init+0x130>)
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	4a27      	ldr	r2, [pc, #156]	; (8008980 <MX_GPIO_Init+0x130>)
 80088e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e8:	6313      	str	r3, [r2, #48]	; 0x30
 80088ea:	4b25      	ldr	r3, [pc, #148]	; (8008980 <MX_GPIO_Init+0x130>)
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f2:	607b      	str	r3, [r7, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80088f6:	2200      	movs	r2, #0
 80088f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80088fc:	4821      	ldr	r0, [pc, #132]	; (8008984 <MX_GPIO_Init+0x134>)
 80088fe:	f001 fa67 	bl	8009dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8008902:	2200      	movs	r2, #0
 8008904:	2140      	movs	r1, #64	; 0x40
 8008906:	4820      	ldr	r0, [pc, #128]	; (8008988 <MX_GPIO_Init+0x138>)
 8008908:	f001 fa62 	bl	8009dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800890c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008912:	4b1e      	ldr	r3, [pc, #120]	; (800898c <MX_GPIO_Init+0x13c>)
 8008914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008916:	2300      	movs	r3, #0
 8008918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800891a:	f107 031c 	add.w	r3, r7, #28
 800891e:	4619      	mov	r1, r3
 8008920:	481b      	ldr	r0, [pc, #108]	; (8008990 <MX_GPIO_Init+0x140>)
 8008922:	f001 f8ab 	bl	8009a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8008926:	f244 0381 	movw	r3, #16513	; 0x4081
 800892a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800892c:	2301      	movs	r3, #1
 800892e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008930:	2300      	movs	r3, #0
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008934:	2300      	movs	r3, #0
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008938:	f107 031c 	add.w	r3, r7, #28
 800893c:	4619      	mov	r1, r3
 800893e:	4811      	ldr	r0, [pc, #68]	; (8008984 <MX_GPIO_Init+0x134>)
 8008940:	f001 f89c 	bl	8009a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8008944:	2340      	movs	r3, #64	; 0x40
 8008946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008948:	2301      	movs	r3, #1
 800894a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800894c:	2300      	movs	r3, #0
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008950:	2300      	movs	r3, #0
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008954:	f107 031c 	add.w	r3, r7, #28
 8008958:	4619      	mov	r1, r3
 800895a:	480b      	ldr	r0, [pc, #44]	; (8008988 <MX_GPIO_Init+0x138>)
 800895c:	f001 f88e 	bl	8009a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8008960:	2380      	movs	r3, #128	; 0x80
 8008962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008964:	2300      	movs	r3, #0
 8008966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008968:	2300      	movs	r3, #0
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800896c:	f107 031c 	add.w	r3, r7, #28
 8008970:	4619      	mov	r1, r3
 8008972:	4805      	ldr	r0, [pc, #20]	; (8008988 <MX_GPIO_Init+0x138>)
 8008974:	f001 f882 	bl	8009a7c <HAL_GPIO_Init>

}
 8008978:	bf00      	nop
 800897a:	3730      	adds	r7, #48	; 0x30
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	40023800 	.word	0x40023800
 8008984:	40020400 	.word	0x40020400
 8008988:	40021800 	.word	0x40021800
 800898c:	10110000 	.word	0x10110000
 8008990:	40020800 	.word	0x40020800

08008994 <VectorBase_Config>:

/* USER CODE BEGIN 4 */
static void VectorBase_Config(void)
{
 8008994:	b480      	push	{r7}
 8008996:	af00      	add	r7, sp, #0
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 8008998:	4b03      	ldr	r3, [pc, #12]	; (80089a8 <VectorBase_Config+0x14>)
 800899a:	4a04      	ldr	r2, [pc, #16]	; (80089ac <VectorBase_Config+0x18>)
 800899c:	609a      	str	r2, [r3, #8]
}
 800899e:	bf00      	nop
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	e000ed00 	.word	0xe000ed00
 80089ac:	08008000 	.word	0x08008000

080089b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <SharedParamsWriteByIndex>:
** \param     value Value to write.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsWriteByIndex(uint32_t idx, uint8_t value)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  bool result = false;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 80089d0:	f000 f818 	bl	8008a04 <SharedParamsValidateBuffer>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00c      	beq.n	80089f4 <SharedParamsWriteByIndex+0x34>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2b37      	cmp	r3, #55	; 0x37
 80089de:	d809      	bhi.n	80089f4 <SharedParamsWriteByIndex+0x34>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN) )
  {
    /* Write the value. */
    sharedParamsBuffer.data[idx] = value;
 80089e0:	4a07      	ldr	r2, [pc, #28]	; (8008a00 <SharedParamsWriteByIndex+0x40>)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	3304      	adds	r3, #4
 80089e8:	78fa      	ldrb	r2, [r7, #3]
 80089ea:	701a      	strb	r2, [r3, #0]
    /* Update the checksum since the contents were just changed. */
    SharedParamsWriteChecksum();
 80089ec:	f000 f824 	bl	8008a38 <SharedParamsWriteChecksum>
    /* Update the result. */
    result = true;
 80089f0:	2301      	movs	r3, #1
 80089f2:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsWriteByIndex ***/
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000000 	.word	0x20000000

08008a04 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
  bool result = false;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8008a0e:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <SharedParamsValidateBuffer+0x2c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a08      	ldr	r2, [pc, #32]	; (8008a34 <SharedParamsValidateBuffer+0x30>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d106      	bne.n	8008a26 <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 8008a18:	f000 f81a 	bl	8008a50 <SharedParamsVerifyChecksum>
 8008a1c:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 8008a22:	2301      	movs	r3, #1
 8008a24:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8008a26:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20000000 	.word	0x20000000
 8008a34:	ce42e7a2 	.word	0xce42e7a2

08008a38 <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8008a3c:	f000 f81e 	bl	8008a7c <SharedParamsCalculateChecksum>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461a      	mov	r2, r3
 8008a44:	4b01      	ldr	r3, [pc, #4]	; (8008a4c <SharedParamsWriteChecksum+0x14>)
 8008a46:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8008a48:	bf00      	nop
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000000 	.word	0x20000000

08008a50 <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
  bool result = false;
 8008a56:	2300      	movs	r3, #0
 8008a58:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 8008a5a:	f000 f80f 	bl	8008a7c <SharedParamsCalculateChecksum>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	461a      	mov	r2, r3
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <SharedParamsVerifyChecksum+0x28>)
 8008a64:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d101      	bne.n	8008a6e <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000000 	.word	0x20000000

08008a7c <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8008a86:	4b1f      	ldr	r3, [pc, #124]	; (8008b04 <SharedParamsCalculateChecksum+0x88>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	4413      	add	r3, r2
 8008a92:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8008a94:	4b1b      	ldr	r3, [pc, #108]	; (8008b04 <SharedParamsCalculateChecksum+0x88>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	0a1b      	lsrs	r3, r3, #8
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8008aa4:	4b17      	ldr	r3, [pc, #92]	; (8008b04 <SharedParamsCalculateChecksum+0x88>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8008ab4:	4b13      	ldr	r3, [pc, #76]	; (8008b04 <SharedParamsCalculateChecksum+0x88>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	0e1b      	lsrs	r3, r3, #24
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	e00b      	b.n	8008ae2 <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 8008aca:	4a0e      	ldr	r2, [pc, #56]	; (8008b04 <SharedParamsCalculateChecksum+0x88>)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	4413      	add	r3, r2
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	88fb      	ldrh	r3, [r7, #6]
 8008ad8:	4413      	add	r3, r2
 8008ada:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	603b      	str	r3, [r7, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b37      	cmp	r3, #55	; 0x37
 8008ae6:	d9f0      	bls.n	8008aca <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 8008ae8:	88fb      	ldrh	r3, [r7, #6]
 8008aea:	43db      	mvns	r3, r3
 8008aec:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	3301      	adds	r3, #1
 8008af2:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 8008af4:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20000000 	.word	0x20000000

08008b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008b0e:	4b0f      	ldr	r3, [pc, #60]	; (8008b4c <HAL_MspInit+0x44>)
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	4a0e      	ldr	r2, [pc, #56]	; (8008b4c <HAL_MspInit+0x44>)
 8008b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b18:	6413      	str	r3, [r2, #64]	; 0x40
 8008b1a:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <HAL_MspInit+0x44>)
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b22:	607b      	str	r3, [r7, #4]
 8008b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b26:	4b09      	ldr	r3, [pc, #36]	; (8008b4c <HAL_MspInit+0x44>)
 8008b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2a:	4a08      	ldr	r2, [pc, #32]	; (8008b4c <HAL_MspInit+0x44>)
 8008b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b30:	6453      	str	r3, [r2, #68]	; 0x44
 8008b32:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <HAL_MspInit+0x44>)
 8008b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b3e:	bf00      	nop
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	40023800 	.word	0x40023800

08008b50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08e      	sub	sp, #56	; 0x38
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	605a      	str	r2, [r3, #4]
 8008b62:	609a      	str	r2, [r3, #8]
 8008b64:	60da      	str	r2, [r3, #12]
 8008b66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a4e      	ldr	r2, [pc, #312]	; (8008ca8 <HAL_ETH_MspInit+0x158>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	f040 8096 	bne.w	8008ca0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008b74:	4b4d      	ldr	r3, [pc, #308]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b78:	4a4c      	ldr	r2, [pc, #304]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8008b80:	4b4a      	ldr	r3, [pc, #296]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b88:	623b      	str	r3, [r7, #32]
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	4b47      	ldr	r3, [pc, #284]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	4a46      	ldr	r2, [pc, #280]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008b92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b96:	6313      	str	r3, [r2, #48]	; 0x30
 8008b98:	4b44      	ldr	r3, [pc, #272]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ba0:	61fb      	str	r3, [r7, #28]
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4b41      	ldr	r3, [pc, #260]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	4a40      	ldr	r2, [pc, #256]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008baa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bae:	6313      	str	r3, [r2, #48]	; 0x30
 8008bb0:	4b3e      	ldr	r3, [pc, #248]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bbc:	4b3b      	ldr	r3, [pc, #236]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc0:	4a3a      	ldr	r2, [pc, #232]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bc2:	f043 0304 	orr.w	r3, r3, #4
 8008bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8008bc8:	4b38      	ldr	r3, [pc, #224]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bd4:	4b35      	ldr	r3, [pc, #212]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd8:	4a34      	ldr	r2, [pc, #208]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bda:	f043 0301 	orr.w	r3, r3, #1
 8008bde:	6313      	str	r3, [r2, #48]	; 0x30
 8008be0:	4b32      	ldr	r3, [pc, #200]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bec:	4b2f      	ldr	r3, [pc, #188]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf0:	4a2e      	ldr	r2, [pc, #184]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bf2:	f043 0302 	orr.w	r3, r3, #2
 8008bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8008bf8:	4b2c      	ldr	r3, [pc, #176]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008c04:	4b29      	ldr	r3, [pc, #164]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c08:	4a28      	ldr	r2, [pc, #160]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8008c10:	4b26      	ldr	r3, [pc, #152]	; (8008cac <HAL_ETH_MspInit+0x15c>)
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c18:	60bb      	str	r3, [r7, #8]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008c1c:	2332      	movs	r3, #50	; 0x32
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c20:	2302      	movs	r3, #2
 8008c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c2c:	230b      	movs	r3, #11
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c34:	4619      	mov	r1, r3
 8008c36:	481e      	ldr	r0, [pc, #120]	; (8008cb0 <HAL_ETH_MspInit+0x160>)
 8008c38:	f000 ff20 	bl	8009a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008c3c:	2386      	movs	r3, #134	; 0x86
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c40:	2302      	movs	r3, #2
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c4c:	230b      	movs	r3, #11
 8008c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c54:	4619      	mov	r1, r3
 8008c56:	4817      	ldr	r0, [pc, #92]	; (8008cb4 <HAL_ETH_MspInit+0x164>)
 8008c58:	f000 ff10 	bl	8009a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c62:	2302      	movs	r3, #2
 8008c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c6e:	230b      	movs	r3, #11
 8008c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c76:	4619      	mov	r1, r3
 8008c78:	480f      	ldr	r0, [pc, #60]	; (8008cb8 <HAL_ETH_MspInit+0x168>)
 8008c7a:	f000 feff 	bl	8009a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008c7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c84:	2302      	movs	r3, #2
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008c90:	230b      	movs	r3, #11
 8008c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4808      	ldr	r0, [pc, #32]	; (8008cbc <HAL_ETH_MspInit+0x16c>)
 8008c9c:	f000 feee 	bl	8009a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8008ca0:	bf00      	nop
 8008ca2:	3738      	adds	r7, #56	; 0x38
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	40028000 	.word	0x40028000
 8008cac:	40023800 	.word	0x40023800
 8008cb0:	40020800 	.word	0x40020800
 8008cb4:	40020000 	.word	0x40020000
 8008cb8:	40020400 	.word	0x40020400
 8008cbc:	40021800 	.word	0x40021800

08008cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	; 0x28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cc8:	f107 0314 	add.w	r3, r7, #20
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a17      	ldr	r2, [pc, #92]	; (8008d3c <HAL_UART_MspInit+0x7c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d128      	bne.n	8008d34 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008ce2:	4b17      	ldr	r3, [pc, #92]	; (8008d40 <HAL_UART_MspInit+0x80>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	4a16      	ldr	r2, [pc, #88]	; (8008d40 <HAL_UART_MspInit+0x80>)
 8008ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cec:	6413      	str	r3, [r2, #64]	; 0x40
 8008cee:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <HAL_UART_MspInit+0x80>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008cfa:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <HAL_UART_MspInit+0x80>)
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	4a10      	ldr	r2, [pc, #64]	; (8008d40 <HAL_UART_MspInit+0x80>)
 8008d00:	f043 0308 	orr.w	r3, r3, #8
 8008d04:	6313      	str	r3, [r2, #48]	; 0x30
 8008d06:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <HAL_UART_MspInit+0x80>)
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8008d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d20:	2303      	movs	r3, #3
 8008d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008d24:	2307      	movs	r3, #7
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008d28:	f107 0314 	add.w	r3, r7, #20
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4805      	ldr	r0, [pc, #20]	; (8008d44 <HAL_UART_MspInit+0x84>)
 8008d30:	f000 fea4 	bl	8009a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008d34:	bf00      	nop
 8008d36:	3728      	adds	r7, #40	; 0x28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	40004800 	.word	0x40004800
 8008d40:	40023800 	.word	0x40023800
 8008d44:	40020c00 	.word	0x40020c00

08008d48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	; 0x28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d50:	f107 0314 	add.w	r3, r7, #20
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	605a      	str	r2, [r3, #4]
 8008d5a:	609a      	str	r2, [r3, #8]
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d68:	d141      	bne.n	8008dee <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d6a:	4b23      	ldr	r3, [pc, #140]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	4a22      	ldr	r2, [pc, #136]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008d70:	f043 0301 	orr.w	r3, r3, #1
 8008d74:	6313      	str	r3, [r2, #48]	; 0x30
 8008d76:	4b20      	ldr	r3, [pc, #128]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008d82:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d90:	2303      	movs	r3, #3
 8008d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d94:	230a      	movs	r3, #10
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d98:	f107 0314 	add.w	r3, r7, #20
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4817      	ldr	r0, [pc, #92]	; (8008dfc <HAL_PCD_MspInit+0xb4>)
 8008da0:	f000 fe6c 	bl	8009a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008db2:	f107 0314 	add.w	r3, r7, #20
 8008db6:	4619      	mov	r1, r3
 8008db8:	4810      	ldr	r0, [pc, #64]	; (8008dfc <HAL_PCD_MspInit+0xb4>)
 8008dba:	f000 fe5f 	bl	8009a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dbe:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	4a0d      	ldr	r2, [pc, #52]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc8:	6353      	str	r3, [r2, #52]	; 0x34
 8008dca:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008de0:	6453      	str	r3, [r2, #68]	; 0x44
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <HAL_PCD_MspInit+0xb0>)
 8008de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dea:	60bb      	str	r3, [r7, #8]
 8008dec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8008dee:	bf00      	nop
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	40020000 	.word	0x40020000

08008e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e00:	b480      	push	{r7}
 8008e02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008e04:	bf00      	nop
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e12:	e7fe      	b.n	8008e12 <HardFault_Handler+0x4>

08008e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e18:	e7fe      	b.n	8008e18 <MemManage_Handler+0x4>

08008e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008e1e:	e7fe      	b.n	8008e1e <BusFault_Handler+0x4>

08008e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008e24:	e7fe      	b.n	8008e24 <UsageFault_Handler+0x4>

08008e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008e26:	b480      	push	{r7}
 8008e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008e2a:	bf00      	nop
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008e38:	bf00      	nop
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008e42:	b480      	push	{r7}
 8008e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008e46:	bf00      	nop
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008e54:	f000 f87e 	bl	8008f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008e58:	bf00      	nop
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008e60:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <SystemInit+0x28>)
 8008e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e66:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <SystemInit+0x28>)
 8008e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008e70:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <SystemInit+0x28>)
 8008e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e76:	609a      	str	r2, [r3, #8]
#endif
}
 8008e78:	bf00      	nop
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	e000ed00 	.word	0xe000ed00

08008e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ec0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008e8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008e8e:	e003      	b.n	8008e98 <LoopCopyDataInit>

08008e90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008e90:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008e92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008e94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008e96:	3104      	adds	r1, #4

08008e98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008e98:	480b      	ldr	r0, [pc, #44]	; (8008ec8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008e9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008e9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008ea0:	d3f6      	bcc.n	8008e90 <CopyDataInit>
  ldr  r2, =_sbss
 8008ea2:	4a0b      	ldr	r2, [pc, #44]	; (8008ed0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008ea4:	e002      	b.n	8008eac <LoopFillZerobss>

08008ea6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008ea6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008ea8:	f842 3b04 	str.w	r3, [r2], #4

08008eac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008eac:	4b09      	ldr	r3, [pc, #36]	; (8008ed4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008eae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008eb0:	d3f9      	bcc.n	8008ea6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008eb2:	f7ff ffd3 	bl	8008e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008eb6:	f003 f93d 	bl	800c134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008eba:	f7ff fb57 	bl	800856c <main>
  bx  lr    
 8008ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008ec0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008ec4:	0800c1cc 	.word	0x0800c1cc
  ldr  r0, =_sdata
 8008ec8:	20000040 	.word	0x20000040
  ldr  r3, =_edata
 8008ecc:	2000004c 	.word	0x2000004c
  ldr  r2, =_sbss
 8008ed0:	2000004c 	.word	0x2000004c
  ldr  r3, = _ebss
 8008ed4:	20000538 	.word	0x20000538

08008ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ed8:	e7fe      	b.n	8008ed8 <ADC_IRQHandler>

08008eda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ede:	2003      	movs	r0, #3
 8008ee0:	f000 f92c 	bl	800913c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f000 f805 	bl	8008ef4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008eea:	f7ff fe0d 	bl	8008b08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008efc:	4b12      	ldr	r3, [pc, #72]	; (8008f48 <HAL_InitTick+0x54>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	4b12      	ldr	r3, [pc, #72]	; (8008f4c <HAL_InitTick+0x58>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	4619      	mov	r1, r3
 8008f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f939 	bl	800918a <HAL_SYSTICK_Config>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e00e      	b.n	8008f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b0f      	cmp	r3, #15
 8008f26:	d80a      	bhi.n	8008f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f28:	2200      	movs	r2, #0
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f30:	f000 f90f 	bl	8009152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008f34:	4a06      	ldr	r2, [pc, #24]	; (8008f50 <HAL_InitTick+0x5c>)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e000      	b.n	8008f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000040 	.word	0x20000040
 8008f4c:	20000048 	.word	0x20000048
 8008f50:	20000044 	.word	0x20000044

08008f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f58:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <HAL_IncTick+0x20>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <HAL_IncTick+0x24>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4413      	add	r3, r2
 8008f64:	4a04      	ldr	r2, [pc, #16]	; (8008f78 <HAL_IncTick+0x24>)
 8008f66:	6013      	str	r3, [r2, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	20000048 	.word	0x20000048
 8008f78:	20000534 	.word	0x20000534

08008f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8008f80:	4b03      	ldr	r3, [pc, #12]	; (8008f90 <HAL_GetTick+0x14>)
 8008f82:	681b      	ldr	r3, [r3, #0]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	20000534 	.word	0x20000534

08008f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f9c:	f7ff ffee 	bl	8008f7c <HAL_GetTick>
 8008fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fac:	d005      	beq.n	8008fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <HAL_Delay+0x40>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008fba:	bf00      	nop
 8008fbc:	f7ff ffde 	bl	8008f7c <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d8f7      	bhi.n	8008fbc <HAL_Delay+0x28>
  {
  }
}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	20000048 	.word	0x20000048

08008fd8 <__NVIC_SetPriorityGrouping>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <__NVIC_SetPriorityGrouping+0x40>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009000:	4b06      	ldr	r3, [pc, #24]	; (800901c <__NVIC_SetPriorityGrouping+0x44>)
 8009002:	4313      	orrs	r3, r2
 8009004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009006:	4a04      	ldr	r2, [pc, #16]	; (8009018 <__NVIC_SetPriorityGrouping+0x40>)
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	60d3      	str	r3, [r2, #12]
}
 800900c:	bf00      	nop
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	e000ed00 	.word	0xe000ed00
 800901c:	05fa0000 	.word	0x05fa0000

08009020 <__NVIC_GetPriorityGrouping>:
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009024:	4b04      	ldr	r3, [pc, #16]	; (8009038 <__NVIC_GetPriorityGrouping+0x18>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	0a1b      	lsrs	r3, r3, #8
 800902a:	f003 0307 	and.w	r3, r3, #7
}
 800902e:	4618      	mov	r0, r3
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	e000ed00 	.word	0xe000ed00

0800903c <__NVIC_SetPriority>:
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904c:	2b00      	cmp	r3, #0
 800904e:	db0a      	blt.n	8009066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	b2da      	uxtb	r2, r3
 8009054:	490c      	ldr	r1, [pc, #48]	; (8009088 <__NVIC_SetPriority+0x4c>)
 8009056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800905a:	0112      	lsls	r2, r2, #4
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	440b      	add	r3, r1
 8009060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009064:	e00a      	b.n	800907c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	4908      	ldr	r1, [pc, #32]	; (800908c <__NVIC_SetPriority+0x50>)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	f003 030f 	and.w	r3, r3, #15
 8009072:	3b04      	subs	r3, #4
 8009074:	0112      	lsls	r2, r2, #4
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	440b      	add	r3, r1
 800907a:	761a      	strb	r2, [r3, #24]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	e000e100 	.word	0xe000e100
 800908c:	e000ed00 	.word	0xe000ed00

08009090 <NVIC_EncodePriority>:
{
 8009090:	b480      	push	{r7}
 8009092:	b089      	sub	sp, #36	; 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 0307 	and.w	r3, r3, #7
 80090a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	f1c3 0307 	rsb	r3, r3, #7
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	bf28      	it	cs
 80090ae:	2304      	movcs	r3, #4
 80090b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	3304      	adds	r3, #4
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d902      	bls.n	80090c0 <NVIC_EncodePriority+0x30>
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	3b03      	subs	r3, #3
 80090be:	e000      	b.n	80090c2 <NVIC_EncodePriority+0x32>
 80090c0:	2300      	movs	r3, #0
 80090c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	43da      	mvns	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	401a      	ands	r2, r3
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	fa01 f303 	lsl.w	r3, r1, r3
 80090e2:	43d9      	mvns	r1, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090e8:	4313      	orrs	r3, r2
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3724      	adds	r7, #36	; 0x24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3b01      	subs	r3, #1
 8009104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009108:	d301      	bcc.n	800910e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800910a:	2301      	movs	r3, #1
 800910c:	e00f      	b.n	800912e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800910e:	4a0a      	ldr	r2, [pc, #40]	; (8009138 <SysTick_Config+0x40>)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3b01      	subs	r3, #1
 8009114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009116:	210f      	movs	r1, #15
 8009118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800911c:	f7ff ff8e 	bl	800903c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <SysTick_Config+0x40>)
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009126:	4b04      	ldr	r3, [pc, #16]	; (8009138 <SysTick_Config+0x40>)
 8009128:	2207      	movs	r2, #7
 800912a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	e000e010 	.word	0xe000e010

0800913c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ff47 	bl	8008fd8 <__NVIC_SetPriorityGrouping>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	4603      	mov	r3, r0
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009164:	f7ff ff5c 	bl	8009020 <__NVIC_GetPriorityGrouping>
 8009168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	68b9      	ldr	r1, [r7, #8]
 800916e:	6978      	ldr	r0, [r7, #20]
 8009170:	f7ff ff8e 	bl	8009090 <NVIC_EncodePriority>
 8009174:	4602      	mov	r2, r0
 8009176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800917a:	4611      	mov	r1, r2
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff ff5d 	bl	800903c <__NVIC_SetPriority>
}
 8009182:	bf00      	nop
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff ffb0 	bl	80090f8 <SysTick_Config>
 8009198:	4603      	mov	r3, r0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
	...

080091a4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80091b4:	4ba9      	ldr	r3, [pc, #676]	; (800945c <HAL_ETH_Init+0x2b8>)
 80091b6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80091bc:	2300      	movs	r3, #0
 80091be:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e183      	b.n	80094d2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff fcb6 	bl	8008b50 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091e4:	4b9e      	ldr	r3, [pc, #632]	; (8009460 <HAL_ETH_Init+0x2bc>)
 80091e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e8:	4a9d      	ldr	r2, [pc, #628]	; (8009460 <HAL_ETH_Init+0x2bc>)
 80091ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091ee:	6453      	str	r3, [r2, #68]	; 0x44
 80091f0:	4b9b      	ldr	r3, [pc, #620]	; (8009460 <HAL_ETH_Init+0x2bc>)
 80091f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f8:	60bb      	str	r3, [r7, #8]
 80091fa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80091fc:	4b99      	ldr	r3, [pc, #612]	; (8009464 <HAL_ETH_Init+0x2c0>)
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	4a98      	ldr	r2, [pc, #608]	; (8009464 <HAL_ETH_Init+0x2c0>)
 8009202:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009206:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8009208:	4b96      	ldr	r3, [pc, #600]	; (8009464 <HAL_ETH_Init+0x2c0>)
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	4994      	ldr	r1, [pc, #592]	; (8009464 <HAL_ETH_Init+0x2c0>)
 8009212:	4313      	orrs	r3, r2
 8009214:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0201 	orr.w	r2, r2, #1
 8009228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800922e:	f7ff fea5 	bl	8008f7c <HAL_GetTick>
 8009232:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009234:	e011      	b.n	800925a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8009236:	f7ff fea1 	bl	8008f7c <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009244:	d909      	bls.n	800925a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2203      	movs	r2, #3
 800924a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8009256:	2303      	movs	r3, #3
 8009258:	e13b      	b.n	80094d2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e4      	bne.n	8009236 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f023 031c 	bic.w	r3, r3, #28
 800927a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800927c:	f001 fbf6 	bl	800aa6c <HAL_RCC_GetHCLKFreq>
 8009280:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	4a78      	ldr	r2, [pc, #480]	; (8009468 <HAL_ETH_Init+0x2c4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d908      	bls.n	800929c <HAL_ETH_Init+0xf8>
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	4a77      	ldr	r2, [pc, #476]	; (800946c <HAL_ETH_Init+0x2c8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d804      	bhi.n	800929c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f043 0308 	orr.w	r3, r3, #8
 8009298:	61fb      	str	r3, [r7, #28]
 800929a:	e027      	b.n	80092ec <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	4a73      	ldr	r2, [pc, #460]	; (800946c <HAL_ETH_Init+0x2c8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d908      	bls.n	80092b6 <HAL_ETH_Init+0x112>
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	4a72      	ldr	r2, [pc, #456]	; (8009470 <HAL_ETH_Init+0x2cc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d804      	bhi.n	80092b6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f043 030c 	orr.w	r3, r3, #12
 80092b2:	61fb      	str	r3, [r7, #28]
 80092b4:	e01a      	b.n	80092ec <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	4a6d      	ldr	r2, [pc, #436]	; (8009470 <HAL_ETH_Init+0x2cc>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d903      	bls.n	80092c6 <HAL_ETH_Init+0x122>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	4a6c      	ldr	r2, [pc, #432]	; (8009474 <HAL_ETH_Init+0x2d0>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d911      	bls.n	80092ea <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	4a6a      	ldr	r2, [pc, #424]	; (8009474 <HAL_ETH_Init+0x2d0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d908      	bls.n	80092e0 <HAL_ETH_Init+0x13c>
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	4a69      	ldr	r2, [pc, #420]	; (8009478 <HAL_ETH_Init+0x2d4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d804      	bhi.n	80092e0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	f043 0304 	orr.w	r3, r3, #4
 80092dc:	61fb      	str	r3, [r7, #28]
 80092de:	e005      	b.n	80092ec <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	f043 0310 	orr.w	r3, r3, #16
 80092e6:	61fb      	str	r3, [r7, #28]
 80092e8:	e000      	b.n	80092ec <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80092ea:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69fa      	ldr	r2, [r7, #28]
 80092f2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80092f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80092f8:	2100      	movs	r1, #0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f956 	bl	80095ac <HAL_ETH_WritePHYRegister>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00b      	beq.n	800931e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800930a:	6939      	ldr	r1, [r7, #16]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f9b3 	bl	8009678 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e0d9      	b.n	80094d2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800931e:	20ff      	movs	r0, #255	; 0xff
 8009320:	f7ff fe38 	bl	8008f94 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 80a7 	beq.w	800947c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800932e:	f7ff fe25 	bl	8008f7c <HAL_GetTick>
 8009332:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009334:	f107 030c 	add.w	r3, r7, #12
 8009338:	461a      	mov	r2, r3
 800933a:	2101      	movs	r1, #1
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f8cd 	bl	80094dc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009342:	f7ff fe1b 	bl	8008f7c <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009350:	4293      	cmp	r3, r2
 8009352:	d90f      	bls.n	8009374 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8009358:	6939      	ldr	r1, [r7, #16]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f98c 	bl	8009678 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e0ae      	b.n	80094d2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0da      	beq.n	8009334 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800937e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009382:	2100      	movs	r1, #0
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f911 	bl	80095ac <HAL_ETH_WritePHYRegister>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009394:	6939      	ldr	r1, [r7, #16]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f96e 	bl	8009678 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80093a4:	2301      	movs	r3, #1
 80093a6:	e094      	b.n	80094d2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80093a8:	f7ff fde8 	bl	8008f7c <HAL_GetTick>
 80093ac:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	461a      	mov	r2, r3
 80093b4:	2101      	movs	r1, #1
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f890 	bl	80094dc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80093bc:	f7ff fdde 	bl	8008f7c <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d90f      	bls.n	80093ee <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80093d2:	6939      	ldr	r1, [r7, #16]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f94f 	bl	8009678 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e071      	b.n	80094d2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f003 0320 	and.w	r3, r3, #32
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0da      	beq.n	80093ae <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80093f8:	f107 030c 	add.w	r3, r7, #12
 80093fc:	461a      	mov	r2, r3
 80093fe:	211f      	movs	r1, #31
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f86b 	bl	80094dc <HAL_ETH_ReadPHYRegister>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009410:	6939      	ldr	r1, [r7, #16]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f930 	bl	8009678 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8009420:	2301      	movs	r3, #1
 8009422:	e056      	b.n	80094d2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 0310 	and.w	r3, r3, #16
 800942a:	2b00      	cmp	r3, #0
 800942c:	d004      	beq.n	8009438 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	e002      	b.n	800943e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	609a      	str	r2, [r3, #8]
 800944e:	e037      	b.n	80094c0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009456:	609a      	str	r2, [r3, #8]
 8009458:	e032      	b.n	80094c0 <HAL_ETH_Init+0x31c>
 800945a:	bf00      	nop
 800945c:	03938700 	.word	0x03938700
 8009460:	40023800 	.word	0x40023800
 8009464:	40013800 	.word	0x40013800
 8009468:	01312cff 	.word	0x01312cff
 800946c:	02160ebf 	.word	0x02160ebf
 8009470:	039386ff 	.word	0x039386ff
 8009474:	05f5e0ff 	.word	0x05f5e0ff
 8009478:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	08db      	lsrs	r3, r3, #3
 8009482:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	085b      	lsrs	r3, r3, #1
 800948a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800948c:	4313      	orrs	r3, r2
 800948e:	b29b      	uxth	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	2100      	movs	r1, #0
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f889 	bl	80095ac <HAL_ETH_WritePHYRegister>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80094a4:	6939      	ldr	r1, [r7, #16]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f8e6 	bl	8009678 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e00c      	b.n	80094d2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80094b8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80094bc:	f7ff fd6a 	bl	8008f94 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80094c0:	6939      	ldr	r1, [r7, #16]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8d8 	bl	8009678 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3720      	adds	r7, #32
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop

080094dc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	460b      	mov	r3, r1
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80094ea:	2300      	movs	r3, #0
 80094ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b82      	cmp	r3, #130	; 0x82
 80094fc:	d101      	bne.n	8009502 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80094fe:	2302      	movs	r3, #2
 8009500:	e050      	b.n	80095a4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2282      	movs	r2, #130	; 0x82
 8009506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f003 031c 	and.w	r3, r3, #28
 8009518:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8a1b      	ldrh	r3, [r3, #16]
 800951e:	02db      	lsls	r3, r3, #11
 8009520:	b29b      	uxth	r3, r3
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	4313      	orrs	r3, r2
 8009526:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009528:	897b      	ldrh	r3, [r7, #10]
 800952a:	019b      	lsls	r3, r3, #6
 800952c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4313      	orrs	r3, r2
 8009534:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f023 0302 	bic.w	r3, r3, #2
 800953c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f043 0301 	orr.w	r3, r3, #1
 8009544:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800954e:	f7ff fd15 	bl	8008f7c <HAL_GetTick>
 8009552:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009554:	e015      	b.n	8009582 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8009556:	f7ff fd11 	bl	8008f7c <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009564:	d309      	bcc.n	800957a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e014      	b.n	80095a4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e4      	bne.n	8009556 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	b29b      	uxth	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	460b      	mov	r3, r1
 80095b6:	607a      	str	r2, [r7, #4]
 80095b8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b42      	cmp	r3, #66	; 0x42
 80095cc:	d101      	bne.n	80095d2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80095ce:	2302      	movs	r3, #2
 80095d0:	e04e      	b.n	8009670 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2242      	movs	r2, #66	; 0x42
 80095d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f003 031c 	and.w	r3, r3, #28
 80095e8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8a1b      	ldrh	r3, [r3, #16]
 80095ee:	02db      	lsls	r3, r3, #11
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80095f8:	897b      	ldrh	r3, [r7, #10]
 80095fa:	019b      	lsls	r3, r3, #6
 80095fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	4313      	orrs	r3, r2
 8009604:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f043 0302 	orr.w	r3, r3, #2
 800960c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f043 0301 	orr.w	r3, r3, #1
 8009614:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	b29a      	uxth	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009628:	f7ff fca8 	bl	8008f7c <HAL_GetTick>
 800962c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800962e:	e015      	b.n	800965c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009630:	f7ff fca4 	bl	8008f7c <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800963e:	d309      	bcc.n	8009654 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e00d      	b.n	8009670 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e4      	bne.n	8009630 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b0b0      	sub	sp, #192	; 0xc0
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d007      	beq.n	800969e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009694:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800969c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800969e:	2300      	movs	r3, #0
 80096a0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80096a6:	2300      	movs	r3, #0
 80096a8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80096aa:	2300      	movs	r3, #0
 80096ac:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80096be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096c2:	663b      	str	r3, [r7, #96]	; 0x60
 80096c4:	e001      	b.n	80096ca <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80096c6:	2300      	movs	r3, #0
 80096c8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80096ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ce:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80096d4:	2300      	movs	r3, #0
 80096d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80096d8:	2300      	movs	r3, #0
 80096da:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80096dc:	2300      	movs	r3, #0
 80096de:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80096e0:	2300      	movs	r3, #0
 80096e2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80096e4:	2340      	movs	r3, #64	; 0x40
 80096e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80096f4:	2300      	movs	r3, #0
 80096f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80096fa:	2300      	movs	r3, #0
 80096fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8009700:	2300      	movs	r3, #0
 8009702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8009706:	2300      	movs	r3, #0
 8009708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800970c:	2300      	movs	r3, #0
 800970e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8009712:	2300      	movs	r3, #0
 8009714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8009718:	2380      	movs	r3, #128	; 0x80
 800971a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800971e:	2300      	movs	r3, #0
 8009720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8009724:	2300      	movs	r3, #0
 8009726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800972a:	2300      	movs	r3, #0
 800972c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8009730:	2300      	movs	r3, #0
 8009732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8009736:	2300      	movs	r3, #0
 8009738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800973c:	2300      	movs	r3, #0
 800973e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800974c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009750:	4bab      	ldr	r3, [pc, #684]	; (8009a00 <ETH_MACDMAConfig+0x388>)
 8009752:	4013      	ands	r3, r2
 8009754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009758:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800975a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800975c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800975e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8009760:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8009762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8009764:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800976a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800976c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800976e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8009770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8009772:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8009778:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800977a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800977c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800977e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8009780:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8009782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8009784:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8009786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8009788:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800978a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800978c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800978e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009792:	4313      	orrs	r3, r2
 8009794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097a0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80097ac:	2001      	movs	r0, #1
 80097ae:	f7ff fbf1 	bl	8008f94 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097ba:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80097bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80097be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80097c0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80097c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80097c4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80097c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80097ca:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80097cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80097d0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80097d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80097d6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80097d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80097dc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80097e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80097e8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80097ea:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80097f6:	2001      	movs	r0, #1
 80097f8:	f7ff fbcc 	bl	8008f94 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009804:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800980e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009818:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009824:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009828:	f64f 7341 	movw	r3, #65345	; 0xff41
 800982c:	4013      	ands	r3, r2
 800982e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009836:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8009838:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800983c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800983e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8009842:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8009844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8009848:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800984a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800984e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8009850:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8009854:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009856:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800985a:	4313      	orrs	r3, r2
 800985c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009868:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009874:	2001      	movs	r0, #1
 8009876:	f7ff fb8d 	bl	8008f94 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009882:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009884:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8009888:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800989e:	2001      	movs	r0, #1
 80098a0:	f7ff fb78 	bl	8008f94 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80098ac:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80098b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098b6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80098b8:	2300      	movs	r3, #0
 80098ba:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80098bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80098c0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80098c2:	2300      	movs	r3, #0
 80098c4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80098ca:	2300      	movs	r3, #0
 80098cc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80098ce:	2300      	movs	r3, #0
 80098d0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80098d2:	2304      	movs	r3, #4
 80098d4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80098d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098da:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80098dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098e0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80098e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098e6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80098e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098ec:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80098ee:	2380      	movs	r3, #128	; 0x80
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80098f6:	2300      	movs	r3, #0
 80098f8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	f241 0318 	movw	r3, #4120	; 0x1018
 8009902:	4413      	add	r3, r2
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800990a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800990e:	4b3d      	ldr	r3, [pc, #244]	; (8009a04 <ETH_MACDMAConfig+0x38c>)
 8009910:	4013      	ands	r3, r2
 8009912:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009916:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8009918:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800991a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800991c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800991e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8009920:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8009922:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8009924:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8009926:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8009928:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800992a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800992c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800992e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8009932:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8009936:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009938:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800993c:	4313      	orrs	r3, r2
 800993e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	f241 0318 	movw	r3, #4120	; 0x1018
 800994a:	4413      	add	r3, r2
 800994c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009950:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	f241 0318 	movw	r3, #4120	; 0x1018
 800995a:	4413      	add	r3, r2
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009962:	2001      	movs	r0, #1
 8009964:	f7ff fb16 	bl	8008f94 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	f241 0318 	movw	r3, #4120	; 0x1018
 8009970:	4413      	add	r3, r2
 8009972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009976:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800997c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800997e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8009980:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009984:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8009986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8009988:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800998a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800998e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8009990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8009992:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800999c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80099b0:	2001      	movs	r0, #1
 80099b2:	f7ff faef 	bl	8008f94 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80099c2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d10d      	bne.n	80099e8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	f241 031c 	movw	r3, #4124	; 0x101c
 80099d4:	4413      	add	r3, r2
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	6811      	ldr	r1, [r2, #0]
 80099dc:	4a0a      	ldr	r2, [pc, #40]	; (8009a08 <ETH_MACDMAConfig+0x390>)
 80099de:	431a      	orrs	r2, r3
 80099e0:	f241 031c 	movw	r3, #4124	; 0x101c
 80099e4:	440b      	add	r3, r1
 80099e6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	461a      	mov	r2, r3
 80099ee:	2100      	movs	r1, #0
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f80b 	bl	8009a0c <ETH_MACAddressConfig>
}
 80099f6:	bf00      	nop
 80099f8:	37c0      	adds	r7, #192	; 0xc0
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	ff20810f 	.word	0xff20810f
 8009a04:	f8de3f23 	.word	0xf8de3f23
 8009a08:	00010040 	.word	0x00010040

08009a0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3305      	adds	r3, #5
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	021b      	lsls	r3, r3, #8
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	3204      	adds	r2, #4
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	4b11      	ldr	r3, [pc, #68]	; (8009a74 <ETH_MACAddressConfig+0x68>)
 8009a2e:	4413      	add	r3, r2
 8009a30:	461a      	mov	r2, r3
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3303      	adds	r3, #3
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	061a      	lsls	r2, r3, #24
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	3302      	adds	r3, #2
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	041b      	lsls	r3, r3, #16
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	021b      	lsls	r3, r3, #8
 8009a50:	4313      	orrs	r3, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	7812      	ldrb	r2, [r2, #0]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4b06      	ldr	r3, [pc, #24]	; (8009a78 <ETH_MACAddressConfig+0x6c>)
 8009a5e:	4413      	add	r3, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	6013      	str	r3, [r2, #0]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40028040 	.word	0x40028040
 8009a78:	40028044 	.word	0x40028044

08009a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b089      	sub	sp, #36	; 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009a86:	2300      	movs	r3, #0
 8009a88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009a92:	2300      	movs	r3, #0
 8009a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009a96:	2300      	movs	r3, #0
 8009a98:	61fb      	str	r3, [r7, #28]
 8009a9a:	e175      	b.n	8009d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	4013      	ands	r3, r2
 8009aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	f040 8164 	bne.w	8009d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d00b      	beq.n	8009ada <HAL_GPIO_Init+0x5e>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d007      	beq.n	8009ada <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ace:	2b11      	cmp	r3, #17
 8009ad0:	d003      	beq.n	8009ada <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	2b12      	cmp	r3, #18
 8009ad8:	d130      	bne.n	8009b3c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	2203      	movs	r2, #3
 8009ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aea:	43db      	mvns	r3, r3
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	4013      	ands	r3, r2
 8009af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	fa02 f303 	lsl.w	r3, r2, r3
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b10:	2201      	movs	r2, #1
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	fa02 f303 	lsl.w	r3, r2, r3
 8009b18:	43db      	mvns	r3, r3
 8009b1a:	69ba      	ldr	r2, [r7, #24]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	091b      	lsrs	r3, r3, #4
 8009b26:	f003 0201 	and.w	r2, r3, #1
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b30:	69ba      	ldr	r2, [r7, #24]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	2203      	movs	r2, #3
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	4013      	ands	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d003      	beq.n	8009b7c <HAL_GPIO_Init+0x100>
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	2b12      	cmp	r3, #18
 8009b7a:	d123      	bne.n	8009bc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	08da      	lsrs	r2, r3, #3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3208      	adds	r2, #8
 8009b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	220f      	movs	r2, #15
 8009b94:	fa02 f303 	lsl.w	r3, r2, r3
 8009b98:	43db      	mvns	r3, r3
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	691a      	ldr	r2, [r3, #16]
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	f003 0307 	and.w	r3, r3, #7
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	08da      	lsrs	r2, r3, #3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	3208      	adds	r2, #8
 8009bbe:	69b9      	ldr	r1, [r7, #24]
 8009bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	2203      	movs	r2, #3
 8009bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	69ba      	ldr	r2, [r7, #24]
 8009bd8:	4013      	ands	r3, r2
 8009bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f003 0203 	and.w	r2, r3, #3
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bec:	69ba      	ldr	r2, [r7, #24]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	69ba      	ldr	r2, [r7, #24]
 8009bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 80be 	beq.w	8009d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c06:	4b65      	ldr	r3, [pc, #404]	; (8009d9c <HAL_GPIO_Init+0x320>)
 8009c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0a:	4a64      	ldr	r2, [pc, #400]	; (8009d9c <HAL_GPIO_Init+0x320>)
 8009c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c10:	6453      	str	r3, [r2, #68]	; 0x44
 8009c12:	4b62      	ldr	r3, [pc, #392]	; (8009d9c <HAL_GPIO_Init+0x320>)
 8009c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009c1e:	4a60      	ldr	r2, [pc, #384]	; (8009da0 <HAL_GPIO_Init+0x324>)
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	089b      	lsrs	r3, r3, #2
 8009c24:	3302      	adds	r3, #2
 8009c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	f003 0303 	and.w	r3, r3, #3
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	220f      	movs	r2, #15
 8009c36:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3a:	43db      	mvns	r3, r3
 8009c3c:	69ba      	ldr	r2, [r7, #24]
 8009c3e:	4013      	ands	r3, r2
 8009c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a57      	ldr	r2, [pc, #348]	; (8009da4 <HAL_GPIO_Init+0x328>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d037      	beq.n	8009cba <HAL_GPIO_Init+0x23e>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a56      	ldr	r2, [pc, #344]	; (8009da8 <HAL_GPIO_Init+0x32c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d031      	beq.n	8009cb6 <HAL_GPIO_Init+0x23a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a55      	ldr	r2, [pc, #340]	; (8009dac <HAL_GPIO_Init+0x330>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d02b      	beq.n	8009cb2 <HAL_GPIO_Init+0x236>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a54      	ldr	r2, [pc, #336]	; (8009db0 <HAL_GPIO_Init+0x334>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d025      	beq.n	8009cae <HAL_GPIO_Init+0x232>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a53      	ldr	r2, [pc, #332]	; (8009db4 <HAL_GPIO_Init+0x338>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d01f      	beq.n	8009caa <HAL_GPIO_Init+0x22e>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a52      	ldr	r2, [pc, #328]	; (8009db8 <HAL_GPIO_Init+0x33c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d019      	beq.n	8009ca6 <HAL_GPIO_Init+0x22a>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a51      	ldr	r2, [pc, #324]	; (8009dbc <HAL_GPIO_Init+0x340>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d013      	beq.n	8009ca2 <HAL_GPIO_Init+0x226>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a50      	ldr	r2, [pc, #320]	; (8009dc0 <HAL_GPIO_Init+0x344>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00d      	beq.n	8009c9e <HAL_GPIO_Init+0x222>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a4f      	ldr	r2, [pc, #316]	; (8009dc4 <HAL_GPIO_Init+0x348>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d007      	beq.n	8009c9a <HAL_GPIO_Init+0x21e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a4e      	ldr	r2, [pc, #312]	; (8009dc8 <HAL_GPIO_Init+0x34c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d101      	bne.n	8009c96 <HAL_GPIO_Init+0x21a>
 8009c92:	2309      	movs	r3, #9
 8009c94:	e012      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009c96:	230a      	movs	r3, #10
 8009c98:	e010      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009c9a:	2308      	movs	r3, #8
 8009c9c:	e00e      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009c9e:	2307      	movs	r3, #7
 8009ca0:	e00c      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009ca2:	2306      	movs	r3, #6
 8009ca4:	e00a      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009ca6:	2305      	movs	r3, #5
 8009ca8:	e008      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009caa:	2304      	movs	r3, #4
 8009cac:	e006      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e004      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e002      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <HAL_GPIO_Init+0x240>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	69fa      	ldr	r2, [r7, #28]
 8009cbe:	f002 0203 	and.w	r2, r2, #3
 8009cc2:	0092      	lsls	r2, r2, #2
 8009cc4:	4093      	lsls	r3, r2
 8009cc6:	69ba      	ldr	r2, [r7, #24]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009ccc:	4934      	ldr	r1, [pc, #208]	; (8009da0 <HAL_GPIO_Init+0x324>)
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	089b      	lsrs	r3, r3, #2
 8009cd2:	3302      	adds	r3, #2
 8009cd4:	69ba      	ldr	r2, [r7, #24]
 8009cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009cda:	4b3c      	ldr	r3, [pc, #240]	; (8009dcc <HAL_GPIO_Init+0x350>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	43db      	mvns	r3, r3
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009cfe:	4a33      	ldr	r2, [pc, #204]	; (8009dcc <HAL_GPIO_Init+0x350>)
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009d04:	4b31      	ldr	r3, [pc, #196]	; (8009dcc <HAL_GPIO_Init+0x350>)
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	43db      	mvns	r3, r3
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	4013      	ands	r3, r2
 8009d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d28:	4a28      	ldr	r2, [pc, #160]	; (8009dcc <HAL_GPIO_Init+0x350>)
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d2e:	4b27      	ldr	r3, [pc, #156]	; (8009dcc <HAL_GPIO_Init+0x350>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	43db      	mvns	r3, r3
 8009d38:	69ba      	ldr	r2, [r7, #24]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d52:	4a1e      	ldr	r2, [pc, #120]	; (8009dcc <HAL_GPIO_Init+0x350>)
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d58:	4b1c      	ldr	r3, [pc, #112]	; (8009dcc <HAL_GPIO_Init+0x350>)
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	43db      	mvns	r3, r3
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	4013      	ands	r3, r2
 8009d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009d74:	69ba      	ldr	r2, [r7, #24]
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d7c:	4a13      	ldr	r2, [pc, #76]	; (8009dcc <HAL_GPIO_Init+0x350>)
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	3301      	adds	r3, #1
 8009d86:	61fb      	str	r3, [r7, #28]
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2b0f      	cmp	r3, #15
 8009d8c:	f67f ae86 	bls.w	8009a9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009d90:	bf00      	nop
 8009d92:	3724      	adds	r7, #36	; 0x24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	40023800 	.word	0x40023800
 8009da0:	40013800 	.word	0x40013800
 8009da4:	40020000 	.word	0x40020000
 8009da8:	40020400 	.word	0x40020400
 8009dac:	40020800 	.word	0x40020800
 8009db0:	40020c00 	.word	0x40020c00
 8009db4:	40021000 	.word	0x40021000
 8009db8:	40021400 	.word	0x40021400
 8009dbc:	40021800 	.word	0x40021800
 8009dc0:	40021c00 	.word	0x40021c00
 8009dc4:	40022000 	.word	0x40022000
 8009dc8:	40022400 	.word	0x40022400
 8009dcc:	40013c00 	.word	0x40013c00

08009dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	807b      	strh	r3, [r7, #2]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009de0:	787b      	ldrb	r3, [r7, #1]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009de6:	887a      	ldrh	r2, [r7, #2]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009dec:	e003      	b.n	8009df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009dee:	887b      	ldrh	r3, [r7, #2]
 8009df0:	041a      	lsls	r2, r3, #16
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	619a      	str	r2, [r3, #24]
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	695a      	ldr	r2, [r3, #20]
 8009e12:	887b      	ldrh	r3, [r7, #2]
 8009e14:	4013      	ands	r3, r2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e1a:	887b      	ldrh	r3, [r7, #2]
 8009e1c:	041a      	lsls	r2, r3, #16
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009e22:	e002      	b.n	8009e2a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009e24:	887a      	ldrh	r2, [r7, #2]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	619a      	str	r2, [r3, #24]
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e38:	b08f      	sub	sp, #60	; 0x3c
 8009e3a:	af0a      	add	r7, sp, #40	; 0x28
 8009e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e116      	b.n	800a076 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fe ff70 	bl	8008d48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f001 fefc 	bl	800bc84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	603b      	str	r3, [r7, #0]
 8009e92:	687e      	ldr	r6, [r7, #4]
 8009e94:	466d      	mov	r5, sp
 8009e96:	f106 0410 	add.w	r4, r6, #16
 8009e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ea2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009ea6:	e885 0003 	stmia.w	r5, {r0, r1}
 8009eaa:	1d33      	adds	r3, r6, #4
 8009eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eae:	6838      	ldr	r0, [r7, #0]
 8009eb0:	f001 fe90 	bl	800bbd4 <USB_CoreInit>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e0d7      	b.n	800a076 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2100      	movs	r1, #0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 feea 	bl	800bca6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]
 8009ed6:	e04a      	b.n	8009f6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009ed8:	7bfa      	ldrb	r2, [r7, #15]
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	4613      	mov	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	333d      	adds	r3, #61	; 0x3d
 8009ee8:	2201      	movs	r2, #1
 8009eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009eec:	7bfa      	ldrb	r2, [r7, #15]
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	440b      	add	r3, r1
 8009efa:	333c      	adds	r3, #60	; 0x3c
 8009efc:	7bfa      	ldrb	r2, [r7, #15]
 8009efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009f00:	7bfa      	ldrb	r2, [r7, #15]
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	b298      	uxth	r0, r3
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	1a9b      	subs	r3, r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	3342      	adds	r3, #66	; 0x42
 8009f14:	4602      	mov	r2, r0
 8009f16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009f18:	7bfa      	ldrb	r2, [r7, #15]
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	333f      	adds	r3, #63	; 0x3f
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009f2c:	7bfa      	ldrb	r2, [r7, #15]
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	4613      	mov	r3, r2
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	3344      	adds	r3, #68	; 0x44
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009f40:	7bfa      	ldrb	r2, [r7, #15]
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	4613      	mov	r3, r2
 8009f46:	00db      	lsls	r3, r3, #3
 8009f48:	1a9b      	subs	r3, r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	3348      	adds	r3, #72	; 0x48
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f54:	7bfa      	ldrb	r2, [r7, #15]
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	1a9b      	subs	r3, r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	440b      	add	r3, r1
 8009f62:	3350      	adds	r3, #80	; 0x50
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	73fb      	strb	r3, [r7, #15]
 8009f6e:	7bfa      	ldrb	r2, [r7, #15]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d3af      	bcc.n	8009ed8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]
 8009f7c:	e044      	b.n	800a008 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f7e:	7bfa      	ldrb	r2, [r7, #15]
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	4613      	mov	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009f90:	2200      	movs	r2, #0
 8009f92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f94:	7bfa      	ldrb	r2, [r7, #15]
 8009f96:	6879      	ldr	r1, [r7, #4]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	1a9b      	subs	r3, r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009fa6:	7bfa      	ldrb	r2, [r7, #15]
 8009fa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009faa:	7bfa      	ldrb	r2, [r7, #15]
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009fc0:	7bfa      	ldrb	r2, [r7, #15]
 8009fc2:	6879      	ldr	r1, [r7, #4]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	1a9b      	subs	r3, r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009fd6:	7bfa      	ldrb	r2, [r7, #15]
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	00db      	lsls	r3, r3, #3
 8009fde:	1a9b      	subs	r3, r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	440b      	add	r3, r1
 8009fe4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009fec:	7bfa      	ldrb	r2, [r7, #15]
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009ffe:	2200      	movs	r2, #0
 800a000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a002:	7bfb      	ldrb	r3, [r7, #15]
 800a004:	3301      	adds	r3, #1
 800a006:	73fb      	strb	r3, [r7, #15]
 800a008:	7bfa      	ldrb	r2, [r7, #15]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d3b5      	bcc.n	8009f7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	687e      	ldr	r6, [r7, #4]
 800a01a:	466d      	mov	r5, sp
 800a01c:	f106 0410 	add.w	r4, r6, #16
 800a020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a02c:	e885 0003 	stmia.w	r5, {r0, r1}
 800a030:	1d33      	adds	r3, r6, #4
 800a032:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a034:	6838      	ldr	r0, [r7, #0]
 800a036:	f001 fe61 	bl	800bcfc <USB_DevInit>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e014      	b.n	800a076 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b01      	cmp	r3, #1
 800a062:	d102      	bne.n	800a06a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f80b 	bl	800a080 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	f002 f813 	bl	800c09a <USB_DevDisconnect>

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a080 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <HAL_PCDEx_ActivateLPM+0x44>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	10000003 	.word	0x10000003

0800a0c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a04      	ldr	r2, [pc, #16]	; (800a0e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0d6:	6013      	str	r3, [r2, #0]
}
 800a0d8:	bf00      	nop
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	40007000 	.word	0x40007000

0800a0e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a0f2:	4b23      	ldr	r3, [pc, #140]	; (800a180 <HAL_PWREx_EnableOverDrive+0x98>)
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	4a22      	ldr	r2, [pc, #136]	; (800a180 <HAL_PWREx_EnableOverDrive+0x98>)
 800a0f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0fc:	6413      	str	r3, [r2, #64]	; 0x40
 800a0fe:	4b20      	ldr	r3, [pc, #128]	; (800a180 <HAL_PWREx_EnableOverDrive+0x98>)
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a10a:	4b1e      	ldr	r3, [pc, #120]	; (800a184 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a1d      	ldr	r2, [pc, #116]	; (800a184 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a114:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a116:	f7fe ff31 	bl	8008f7c <HAL_GetTick>
 800a11a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a11c:	e009      	b.n	800a132 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a11e:	f7fe ff2d 	bl	8008f7c <HAL_GetTick>
 800a122:	4602      	mov	r2, r0
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a12c:	d901      	bls.n	800a132 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e022      	b.n	800a178 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a132:	4b14      	ldr	r3, [pc, #80]	; (800a184 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a13e:	d1ee      	bne.n	800a11e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a140:	4b10      	ldr	r3, [pc, #64]	; (800a184 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a0f      	ldr	r2, [pc, #60]	; (800a184 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a14a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a14c:	f7fe ff16 	bl	8008f7c <HAL_GetTick>
 800a150:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a152:	e009      	b.n	800a168 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a154:	f7fe ff12 	bl	8008f7c <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a162:	d901      	bls.n	800a168 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e007      	b.n	800a178 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a168:	4b06      	ldr	r3, [pc, #24]	; (800a184 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a174:	d1ee      	bne.n	800a154 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	40023800 	.word	0x40023800
 800a184:	40007000 	.word	0x40007000

0800a188 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a190:	2300      	movs	r3, #0
 800a192:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e29b      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 8087 	beq.w	800a2ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a1ac:	4b96      	ldr	r3, [pc, #600]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	f003 030c 	and.w	r3, r3, #12
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d00c      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1b8:	4b93      	ldr	r3, [pc, #588]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f003 030c 	and.w	r3, r3, #12
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d112      	bne.n	800a1ea <HAL_RCC_OscConfig+0x62>
 800a1c4:	4b90      	ldr	r3, [pc, #576]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1d0:	d10b      	bne.n	800a1ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1d2:	4b8d      	ldr	r3, [pc, #564]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d06c      	beq.n	800a2b8 <HAL_RCC_OscConfig+0x130>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d168      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e275      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1f2:	d106      	bne.n	800a202 <HAL_RCC_OscConfig+0x7a>
 800a1f4:	4b84      	ldr	r3, [pc, #528]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a83      	ldr	r2, [pc, #524]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a1fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	e02e      	b.n	800a260 <HAL_RCC_OscConfig+0xd8>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10c      	bne.n	800a224 <HAL_RCC_OscConfig+0x9c>
 800a20a:	4b7f      	ldr	r3, [pc, #508]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a7e      	ldr	r2, [pc, #504]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	4b7c      	ldr	r3, [pc, #496]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a7b      	ldr	r2, [pc, #492]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a21c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a220:	6013      	str	r3, [r2, #0]
 800a222:	e01d      	b.n	800a260 <HAL_RCC_OscConfig+0xd8>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a22c:	d10c      	bne.n	800a248 <HAL_RCC_OscConfig+0xc0>
 800a22e:	4b76      	ldr	r3, [pc, #472]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a75      	ldr	r2, [pc, #468]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	4b73      	ldr	r3, [pc, #460]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a72      	ldr	r2, [pc, #456]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	e00b      	b.n	800a260 <HAL_RCC_OscConfig+0xd8>
 800a248:	4b6f      	ldr	r3, [pc, #444]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a6e      	ldr	r2, [pc, #440]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a24e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	4b6c      	ldr	r3, [pc, #432]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a6b      	ldr	r2, [pc, #428]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a25a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a25e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d013      	beq.n	800a290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a268:	f7fe fe88 	bl	8008f7c <HAL_GetTick>
 800a26c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a26e:	e008      	b.n	800a282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a270:	f7fe fe84 	bl	8008f7c <HAL_GetTick>
 800a274:	4602      	mov	r2, r0
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	2b64      	cmp	r3, #100	; 0x64
 800a27c:	d901      	bls.n	800a282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e229      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a282:	4b61      	ldr	r3, [pc, #388]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0f0      	beq.n	800a270 <HAL_RCC_OscConfig+0xe8>
 800a28e:	e014      	b.n	800a2ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a290:	f7fe fe74 	bl	8008f7c <HAL_GetTick>
 800a294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a296:	e008      	b.n	800a2aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a298:	f7fe fe70 	bl	8008f7c <HAL_GetTick>
 800a29c:	4602      	mov	r2, r0
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	2b64      	cmp	r3, #100	; 0x64
 800a2a4:	d901      	bls.n	800a2aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e215      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2aa:	4b57      	ldr	r3, [pc, #348]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1f0      	bne.n	800a298 <HAL_RCC_OscConfig+0x110>
 800a2b6:	e000      	b.n	800a2ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d069      	beq.n	800a39a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a2c6:	4b50      	ldr	r3, [pc, #320]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f003 030c 	and.w	r3, r3, #12
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2d2:	4b4d      	ldr	r3, [pc, #308]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f003 030c 	and.w	r3, r3, #12
 800a2da:	2b08      	cmp	r3, #8
 800a2dc:	d11c      	bne.n	800a318 <HAL_RCC_OscConfig+0x190>
 800a2de:	4b4a      	ldr	r3, [pc, #296]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d116      	bne.n	800a318 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2ea:	4b47      	ldr	r3, [pc, #284]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <HAL_RCC_OscConfig+0x17a>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d001      	beq.n	800a302 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e1e9      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a302:	4b41      	ldr	r3, [pc, #260]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	493d      	ldr	r1, [pc, #244]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a312:	4313      	orrs	r3, r2
 800a314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a316:	e040      	b.n	800a39a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d023      	beq.n	800a368 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a320:	4b39      	ldr	r3, [pc, #228]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a38      	ldr	r2, [pc, #224]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a326:	f043 0301 	orr.w	r3, r3, #1
 800a32a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a32c:	f7fe fe26 	bl	8008f7c <HAL_GetTick>
 800a330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a332:	e008      	b.n	800a346 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a334:	f7fe fe22 	bl	8008f7c <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d901      	bls.n	800a346 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e1c7      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a346:	4b30      	ldr	r3, [pc, #192]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0f0      	beq.n	800a334 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a352:	4b2d      	ldr	r3, [pc, #180]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	00db      	lsls	r3, r3, #3
 800a360:	4929      	ldr	r1, [pc, #164]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a362:	4313      	orrs	r3, r2
 800a364:	600b      	str	r3, [r1, #0]
 800a366:	e018      	b.n	800a39a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a368:	4b27      	ldr	r3, [pc, #156]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a26      	ldr	r2, [pc, #152]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a36e:	f023 0301 	bic.w	r3, r3, #1
 800a372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a374:	f7fe fe02 	bl	8008f7c <HAL_GetTick>
 800a378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a37a:	e008      	b.n	800a38e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a37c:	f7fe fdfe 	bl	8008f7c <HAL_GetTick>
 800a380:	4602      	mov	r2, r0
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	2b02      	cmp	r3, #2
 800a388:	d901      	bls.n	800a38e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a38a:	2303      	movs	r3, #3
 800a38c:	e1a3      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a38e:	4b1e      	ldr	r3, [pc, #120]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1f0      	bne.n	800a37c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0308 	and.w	r3, r3, #8
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d038      	beq.n	800a418 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d019      	beq.n	800a3e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3ae:	4b16      	ldr	r3, [pc, #88]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b2:	4a15      	ldr	r2, [pc, #84]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a3b4:	f043 0301 	orr.w	r3, r3, #1
 800a3b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ba:	f7fe fddf 	bl	8008f7c <HAL_GetTick>
 800a3be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3c0:	e008      	b.n	800a3d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3c2:	f7fe fddb 	bl	8008f7c <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d901      	bls.n	800a3d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e180      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3d4:	4b0c      	ldr	r3, [pc, #48]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a3d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d8:	f003 0302 	and.w	r3, r3, #2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0f0      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x23a>
 800a3e0:	e01a      	b.n	800a418 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a3e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e6:	4a08      	ldr	r2, [pc, #32]	; (800a408 <HAL_RCC_OscConfig+0x280>)
 800a3e8:	f023 0301 	bic.w	r3, r3, #1
 800a3ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ee:	f7fe fdc5 	bl	8008f7c <HAL_GetTick>
 800a3f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3f4:	e00a      	b.n	800a40c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3f6:	f7fe fdc1 	bl	8008f7c <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d903      	bls.n	800a40c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e166      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
 800a408:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a40c:	4b92      	ldr	r3, [pc, #584]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1ee      	bne.n	800a3f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 80a4 	beq.w	800a56e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a426:	4b8c      	ldr	r3, [pc, #560]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10d      	bne.n	800a44e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a432:	4b89      	ldr	r3, [pc, #548]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	4a88      	ldr	r2, [pc, #544]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a43c:	6413      	str	r3, [r2, #64]	; 0x40
 800a43e:	4b86      	ldr	r3, [pc, #536]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a446:	60bb      	str	r3, [r7, #8]
 800a448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a44a:	2301      	movs	r3, #1
 800a44c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a44e:	4b83      	ldr	r3, [pc, #524]	; (800a65c <HAL_RCC_OscConfig+0x4d4>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a456:	2b00      	cmp	r3, #0
 800a458:	d118      	bne.n	800a48c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a45a:	4b80      	ldr	r3, [pc, #512]	; (800a65c <HAL_RCC_OscConfig+0x4d4>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a7f      	ldr	r2, [pc, #508]	; (800a65c <HAL_RCC_OscConfig+0x4d4>)
 800a460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a466:	f7fe fd89 	bl	8008f7c <HAL_GetTick>
 800a46a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a46c:	e008      	b.n	800a480 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a46e:	f7fe fd85 	bl	8008f7c <HAL_GetTick>
 800a472:	4602      	mov	r2, r0
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	2b64      	cmp	r3, #100	; 0x64
 800a47a:	d901      	bls.n	800a480 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e12a      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a480:	4b76      	ldr	r3, [pc, #472]	; (800a65c <HAL_RCC_OscConfig+0x4d4>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0f0      	beq.n	800a46e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d106      	bne.n	800a4a2 <HAL_RCC_OscConfig+0x31a>
 800a494:	4b70      	ldr	r3, [pc, #448]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a498:	4a6f      	ldr	r2, [pc, #444]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a49a:	f043 0301 	orr.w	r3, r3, #1
 800a49e:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a0:	e02d      	b.n	800a4fe <HAL_RCC_OscConfig+0x376>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10c      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x33c>
 800a4aa:	4b6b      	ldr	r3, [pc, #428]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ae:	4a6a      	ldr	r2, [pc, #424]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4b0:	f023 0301 	bic.w	r3, r3, #1
 800a4b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b6:	4b68      	ldr	r3, [pc, #416]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ba:	4a67      	ldr	r2, [pc, #412]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4bc:	f023 0304 	bic.w	r3, r3, #4
 800a4c0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c2:	e01c      	b.n	800a4fe <HAL_RCC_OscConfig+0x376>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	2b05      	cmp	r3, #5
 800a4ca:	d10c      	bne.n	800a4e6 <HAL_RCC_OscConfig+0x35e>
 800a4cc:	4b62      	ldr	r3, [pc, #392]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d0:	4a61      	ldr	r2, [pc, #388]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4d2:	f043 0304 	orr.w	r3, r3, #4
 800a4d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4d8:	4b5f      	ldr	r3, [pc, #380]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4dc:	4a5e      	ldr	r2, [pc, #376]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4de:	f043 0301 	orr.w	r3, r3, #1
 800a4e2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e4:	e00b      	b.n	800a4fe <HAL_RCC_OscConfig+0x376>
 800a4e6:	4b5c      	ldr	r3, [pc, #368]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ea:	4a5b      	ldr	r2, [pc, #364]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4ec:	f023 0301 	bic.w	r3, r3, #1
 800a4f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f2:	4b59      	ldr	r3, [pc, #356]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f6:	4a58      	ldr	r2, [pc, #352]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a4f8:	f023 0304 	bic.w	r3, r3, #4
 800a4fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d015      	beq.n	800a532 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a506:	f7fe fd39 	bl	8008f7c <HAL_GetTick>
 800a50a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a50c:	e00a      	b.n	800a524 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a50e:	f7fe fd35 	bl	8008f7c <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d901      	bls.n	800a524 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e0d8      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a524:	4b4c      	ldr	r3, [pc, #304]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a528:	f003 0302 	and.w	r3, r3, #2
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0ee      	beq.n	800a50e <HAL_RCC_OscConfig+0x386>
 800a530:	e014      	b.n	800a55c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a532:	f7fe fd23 	bl	8008f7c <HAL_GetTick>
 800a536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a538:	e00a      	b.n	800a550 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a53a:	f7fe fd1f 	bl	8008f7c <HAL_GetTick>
 800a53e:	4602      	mov	r2, r0
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	f241 3288 	movw	r2, #5000	; 0x1388
 800a548:	4293      	cmp	r3, r2
 800a54a:	d901      	bls.n	800a550 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e0c2      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a550:	4b41      	ldr	r3, [pc, #260]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a554:	f003 0302 	and.w	r3, r3, #2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1ee      	bne.n	800a53a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d105      	bne.n	800a56e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a562:	4b3d      	ldr	r3, [pc, #244]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a566:	4a3c      	ldr	r2, [pc, #240]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a56c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 80ae 	beq.w	800a6d4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a578:	4b37      	ldr	r3, [pc, #220]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f003 030c 	and.w	r3, r3, #12
 800a580:	2b08      	cmp	r3, #8
 800a582:	d06d      	beq.n	800a660 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d14b      	bne.n	800a624 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a58c:	4b32      	ldr	r3, [pc, #200]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a31      	ldr	r2, [pc, #196]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a598:	f7fe fcf0 	bl	8008f7c <HAL_GetTick>
 800a59c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a59e:	e008      	b.n	800a5b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5a0:	f7fe fcec 	bl	8008f7c <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e091      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5b2:	4b29      	ldr	r3, [pc, #164]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1f0      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	69da      	ldr	r2, [r3, #28]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	019b      	lsls	r3, r3, #6
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	085b      	lsrs	r3, r3, #1
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	041b      	lsls	r3, r3, #16
 800a5da:	431a      	orrs	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e0:	061b      	lsls	r3, r3, #24
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e8:	071b      	lsls	r3, r3, #28
 800a5ea:	491b      	ldr	r1, [pc, #108]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5f0:	4b19      	ldr	r3, [pc, #100]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a18      	ldr	r2, [pc, #96]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a5f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5fc:	f7fe fcbe 	bl	8008f7c <HAL_GetTick>
 800a600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a602:	e008      	b.n	800a616 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a604:	f7fe fcba 	bl	8008f7c <HAL_GetTick>
 800a608:	4602      	mov	r2, r0
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d901      	bls.n	800a616 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e05f      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a616:	4b10      	ldr	r3, [pc, #64]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0f0      	beq.n	800a604 <HAL_RCC_OscConfig+0x47c>
 800a622:	e057      	b.n	800a6d4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a624:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a0b      	ldr	r2, [pc, #44]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a62a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a62e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a630:	f7fe fca4 	bl	8008f7c <HAL_GetTick>
 800a634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a636:	e008      	b.n	800a64a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a638:	f7fe fca0 	bl	8008f7c <HAL_GetTick>
 800a63c:	4602      	mov	r2, r0
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	2b02      	cmp	r3, #2
 800a644:	d901      	bls.n	800a64a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e045      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a64a:	4b03      	ldr	r3, [pc, #12]	; (800a658 <HAL_RCC_OscConfig+0x4d0>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1f0      	bne.n	800a638 <HAL_RCC_OscConfig+0x4b0>
 800a656:	e03d      	b.n	800a6d4 <HAL_RCC_OscConfig+0x54c>
 800a658:	40023800 	.word	0x40023800
 800a65c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a660:	4b1f      	ldr	r3, [pc, #124]	; (800a6e0 <HAL_RCC_OscConfig+0x558>)
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d030      	beq.n	800a6d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a678:	429a      	cmp	r2, r3
 800a67a:	d129      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a686:	429a      	cmp	r2, r3
 800a688:	d122      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a690:	4013      	ands	r3, r2
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a696:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a698:	4293      	cmp	r3, r2
 800a69a:	d119      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a6:	085b      	lsrs	r3, r3, #1
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d10f      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d001      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	40023800 	.word	0x40023800

0800a6e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e0d0      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6fc:	4b6a      	ldr	r3, [pc, #424]	; (800a8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 030f 	and.w	r3, r3, #15
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	429a      	cmp	r2, r3
 800a708:	d910      	bls.n	800a72c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a70a:	4b67      	ldr	r3, [pc, #412]	; (800a8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f023 020f 	bic.w	r2, r3, #15
 800a712:	4965      	ldr	r1, [pc, #404]	; (800a8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	4313      	orrs	r3, r2
 800a718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a71a:	4b63      	ldr	r3, [pc, #396]	; (800a8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d001      	beq.n	800a72c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e0b8      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d020      	beq.n	800a77a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d005      	beq.n	800a750 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a744:	4b59      	ldr	r3, [pc, #356]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	4a58      	ldr	r2, [pc, #352]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a74a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a74e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0308 	and.w	r3, r3, #8
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a75c:	4b53      	ldr	r3, [pc, #332]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	4a52      	ldr	r2, [pc, #328]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a768:	4b50      	ldr	r3, [pc, #320]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	494d      	ldr	r1, [pc, #308]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a776:	4313      	orrs	r3, r2
 800a778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d040      	beq.n	800a808 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d107      	bne.n	800a79e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a78e:	4b47      	ldr	r3, [pc, #284]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d115      	bne.n	800a7c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e07f      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d107      	bne.n	800a7b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7a6:	4b41      	ldr	r3, [pc, #260]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d109      	bne.n	800a7c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e073      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7b6:	4b3d      	ldr	r3, [pc, #244]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e06b      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a7c6:	4b39      	ldr	r3, [pc, #228]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	f023 0203 	bic.w	r2, r3, #3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	4936      	ldr	r1, [pc, #216]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7d8:	f7fe fbd0 	bl	8008f7c <HAL_GetTick>
 800a7dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7de:	e00a      	b.n	800a7f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7e0:	f7fe fbcc 	bl	8008f7c <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d901      	bls.n	800a7f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e053      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7f6:	4b2d      	ldr	r3, [pc, #180]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f003 020c 	and.w	r2, r3, #12
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	429a      	cmp	r2, r3
 800a806:	d1eb      	bne.n	800a7e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a808:	4b27      	ldr	r3, [pc, #156]	; (800a8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	429a      	cmp	r2, r3
 800a814:	d210      	bcs.n	800a838 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a816:	4b24      	ldr	r3, [pc, #144]	; (800a8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f023 020f 	bic.w	r2, r3, #15
 800a81e:	4922      	ldr	r1, [pc, #136]	; (800a8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	4313      	orrs	r3, r2
 800a824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a826:	4b20      	ldr	r3, [pc, #128]	; (800a8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 030f 	and.w	r3, r3, #15
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d001      	beq.n	800a838 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e032      	b.n	800a89e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	2b00      	cmp	r3, #0
 800a842:	d008      	beq.n	800a856 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a844:	4b19      	ldr	r3, [pc, #100]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	4916      	ldr	r1, [pc, #88]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a852:	4313      	orrs	r3, r2
 800a854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0308 	and.w	r3, r3, #8
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d009      	beq.n	800a876 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a862:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	00db      	lsls	r3, r3, #3
 800a870:	490e      	ldr	r1, [pc, #56]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a872:	4313      	orrs	r3, r2
 800a874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a876:	f000 f821 	bl	800a8bc <HAL_RCC_GetSysClockFreq>
 800a87a:	4601      	mov	r1, r0
 800a87c:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <HAL_RCC_ClockConfig+0x1c8>)
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	091b      	lsrs	r3, r3, #4
 800a882:	f003 030f 	and.w	r3, r3, #15
 800a886:	4a0a      	ldr	r2, [pc, #40]	; (800a8b0 <HAL_RCC_ClockConfig+0x1cc>)
 800a888:	5cd3      	ldrb	r3, [r2, r3]
 800a88a:	fa21 f303 	lsr.w	r3, r1, r3
 800a88e:	4a09      	ldr	r2, [pc, #36]	; (800a8b4 <HAL_RCC_ClockConfig+0x1d0>)
 800a890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a892:	4b09      	ldr	r3, [pc, #36]	; (800a8b8 <HAL_RCC_ClockConfig+0x1d4>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4618      	mov	r0, r3
 800a898:	f7fe fb2c 	bl	8008ef4 <HAL_InitTick>

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40023c00 	.word	0x40023c00
 800a8ac:	40023800 	.word	0x40023800
 800a8b0:	0800c1a4 	.word	0x0800c1a4
 800a8b4:	20000040 	.word	0x20000040
 800a8b8:	20000044 	.word	0x20000044

0800a8bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	607b      	str	r3, [r7, #4]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8d2:	4b63      	ldr	r3, [pc, #396]	; (800aa60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f003 030c 	and.w	r3, r3, #12
 800a8da:	2b04      	cmp	r3, #4
 800a8dc:	d007      	beq.n	800a8ee <HAL_RCC_GetSysClockFreq+0x32>
 800a8de:	2b08      	cmp	r3, #8
 800a8e0:	d008      	beq.n	800a8f4 <HAL_RCC_GetSysClockFreq+0x38>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f040 80b4 	bne.w	800aa50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8e8:	4b5e      	ldr	r3, [pc, #376]	; (800aa64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a8ea:	60bb      	str	r3, [r7, #8]
      break;
 800a8ec:	e0b3      	b.n	800aa56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8ee:	4b5e      	ldr	r3, [pc, #376]	; (800aa68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a8f0:	60bb      	str	r3, [r7, #8]
      break;
 800a8f2:	e0b0      	b.n	800aa56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8f4:	4b5a      	ldr	r3, [pc, #360]	; (800aa60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a8fe:	4b58      	ldr	r3, [pc, #352]	; (800aa60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a906:	2b00      	cmp	r3, #0
 800a908:	d04a      	beq.n	800a9a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a90a:	4b55      	ldr	r3, [pc, #340]	; (800aa60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	099b      	lsrs	r3, r3, #6
 800a910:	f04f 0400 	mov.w	r4, #0
 800a914:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a918:	f04f 0200 	mov.w	r2, #0
 800a91c:	ea03 0501 	and.w	r5, r3, r1
 800a920:	ea04 0602 	and.w	r6, r4, r2
 800a924:	4629      	mov	r1, r5
 800a926:	4632      	mov	r2, r6
 800a928:	f04f 0300 	mov.w	r3, #0
 800a92c:	f04f 0400 	mov.w	r4, #0
 800a930:	0154      	lsls	r4, r2, #5
 800a932:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a936:	014b      	lsls	r3, r1, #5
 800a938:	4619      	mov	r1, r3
 800a93a:	4622      	mov	r2, r4
 800a93c:	1b49      	subs	r1, r1, r5
 800a93e:	eb62 0206 	sbc.w	r2, r2, r6
 800a942:	f04f 0300 	mov.w	r3, #0
 800a946:	f04f 0400 	mov.w	r4, #0
 800a94a:	0194      	lsls	r4, r2, #6
 800a94c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a950:	018b      	lsls	r3, r1, #6
 800a952:	1a5b      	subs	r3, r3, r1
 800a954:	eb64 0402 	sbc.w	r4, r4, r2
 800a958:	f04f 0100 	mov.w	r1, #0
 800a95c:	f04f 0200 	mov.w	r2, #0
 800a960:	00e2      	lsls	r2, r4, #3
 800a962:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a966:	00d9      	lsls	r1, r3, #3
 800a968:	460b      	mov	r3, r1
 800a96a:	4614      	mov	r4, r2
 800a96c:	195b      	adds	r3, r3, r5
 800a96e:	eb44 0406 	adc.w	r4, r4, r6
 800a972:	f04f 0100 	mov.w	r1, #0
 800a976:	f04f 0200 	mov.w	r2, #0
 800a97a:	0262      	lsls	r2, r4, #9
 800a97c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a980:	0259      	lsls	r1, r3, #9
 800a982:	460b      	mov	r3, r1
 800a984:	4614      	mov	r4, r2
 800a986:	4618      	mov	r0, r3
 800a988:	4621      	mov	r1, r4
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f04f 0400 	mov.w	r4, #0
 800a990:	461a      	mov	r2, r3
 800a992:	4623      	mov	r3, r4
 800a994:	f7fd fc52 	bl	800823c <__aeabi_uldivmod>
 800a998:	4603      	mov	r3, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	60fb      	str	r3, [r7, #12]
 800a99e:	e049      	b.n	800aa34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a9a0:	4b2f      	ldr	r3, [pc, #188]	; (800aa60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	099b      	lsrs	r3, r3, #6
 800a9a6:	f04f 0400 	mov.w	r4, #0
 800a9aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	ea03 0501 	and.w	r5, r3, r1
 800a9b6:	ea04 0602 	and.w	r6, r4, r2
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	4632      	mov	r2, r6
 800a9be:	f04f 0300 	mov.w	r3, #0
 800a9c2:	f04f 0400 	mov.w	r4, #0
 800a9c6:	0154      	lsls	r4, r2, #5
 800a9c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a9cc:	014b      	lsls	r3, r1, #5
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	1b49      	subs	r1, r1, r5
 800a9d4:	eb62 0206 	sbc.w	r2, r2, r6
 800a9d8:	f04f 0300 	mov.w	r3, #0
 800a9dc:	f04f 0400 	mov.w	r4, #0
 800a9e0:	0194      	lsls	r4, r2, #6
 800a9e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a9e6:	018b      	lsls	r3, r1, #6
 800a9e8:	1a5b      	subs	r3, r3, r1
 800a9ea:	eb64 0402 	sbc.w	r4, r4, r2
 800a9ee:	f04f 0100 	mov.w	r1, #0
 800a9f2:	f04f 0200 	mov.w	r2, #0
 800a9f6:	00e2      	lsls	r2, r4, #3
 800a9f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a9fc:	00d9      	lsls	r1, r3, #3
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4614      	mov	r4, r2
 800aa02:	195b      	adds	r3, r3, r5
 800aa04:	eb44 0406 	adc.w	r4, r4, r6
 800aa08:	f04f 0100 	mov.w	r1, #0
 800aa0c:	f04f 0200 	mov.w	r2, #0
 800aa10:	02a2      	lsls	r2, r4, #10
 800aa12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800aa16:	0299      	lsls	r1, r3, #10
 800aa18:	460b      	mov	r3, r1
 800aa1a:	4614      	mov	r4, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	4621      	mov	r1, r4
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f04f 0400 	mov.w	r4, #0
 800aa26:	461a      	mov	r2, r3
 800aa28:	4623      	mov	r3, r4
 800aa2a:	f7fd fc07 	bl	800823c <__aeabi_uldivmod>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	460c      	mov	r4, r1
 800aa32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800aa34:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	0c1b      	lsrs	r3, r3, #16
 800aa3a:	f003 0303 	and.w	r3, r3, #3
 800aa3e:	3301      	adds	r3, #1
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa4c:	60bb      	str	r3, [r7, #8]
      break;
 800aa4e:	e002      	b.n	800aa56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa50:	4b04      	ldr	r3, [pc, #16]	; (800aa64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800aa52:	60bb      	str	r3, [r7, #8]
      break;
 800aa54:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa56:	68bb      	ldr	r3, [r7, #8]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa60:	40023800 	.word	0x40023800
 800aa64:	00f42400 	.word	0x00f42400
 800aa68:	007a1200 	.word	0x007a1200

0800aa6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa70:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa72:	681b      	ldr	r3, [r3, #0]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	20000040 	.word	0x20000040

0800aa84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aa88:	f7ff fff0 	bl	800aa6c <HAL_RCC_GetHCLKFreq>
 800aa8c:	4601      	mov	r1, r0
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	0a9b      	lsrs	r3, r3, #10
 800aa94:	f003 0307 	and.w	r3, r3, #7
 800aa98:	4a03      	ldr	r2, [pc, #12]	; (800aaa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa9a:	5cd3      	ldrb	r3, [r2, r3]
 800aa9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	40023800 	.word	0x40023800
 800aaa8:	0800c1b4 	.word	0x0800c1b4

0800aaac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aab0:	f7ff ffdc 	bl	800aa6c <HAL_RCC_GetHCLKFreq>
 800aab4:	4601      	mov	r1, r0
 800aab6:	4b05      	ldr	r3, [pc, #20]	; (800aacc <HAL_RCC_GetPCLK2Freq+0x20>)
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	0b5b      	lsrs	r3, r3, #13
 800aabc:	f003 0307 	and.w	r3, r3, #7
 800aac0:	4a03      	ldr	r2, [pc, #12]	; (800aad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aac2:	5cd3      	ldrb	r3, [r2, r3]
 800aac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	40023800 	.word	0x40023800
 800aad0:	0800c1b4 	.word	0x0800c1b4

0800aad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d012      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aafc:	4b69      	ldr	r3, [pc, #420]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	4a68      	ldr	r2, [pc, #416]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ab06:	6093      	str	r3, [r2, #8]
 800ab08:	4b66      	ldr	r3, [pc, #408]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab10:	4964      	ldr	r1, [pc, #400]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d017      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab2e:	4b5d      	ldr	r3, [pc, #372]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3c:	4959      	ldr	r1, [pc, #356]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab4c:	d101      	bne.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d017      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ab6a:	4b4e      	ldr	r3, [pc, #312]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab78:	494a      	ldr	r1, [pc, #296]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab88:	d101      	bne.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ab96:	2301      	movs	r3, #1
 800ab98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800aba6:	2301      	movs	r3, #1
 800aba8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0320 	and.w	r3, r3, #32
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 808b 	beq.w	800acce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800abb8:	4b3a      	ldr	r3, [pc, #232]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbc:	4a39      	ldr	r2, [pc, #228]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abc2:	6413      	str	r3, [r2, #64]	; 0x40
 800abc4:	4b37      	ldr	r3, [pc, #220]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abcc:	60bb      	str	r3, [r7, #8]
 800abce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800abd0:	4b35      	ldr	r3, [pc, #212]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a34      	ldr	r2, [pc, #208]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800abd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abdc:	f7fe f9ce 	bl	8008f7c <HAL_GetTick>
 800abe0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800abe2:	e008      	b.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abe4:	f7fe f9ca 	bl	8008f7c <HAL_GetTick>
 800abe8:	4602      	mov	r2, r0
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	2b64      	cmp	r3, #100	; 0x64
 800abf0:	d901      	bls.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e38d      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800abf6:	4b2c      	ldr	r3, [pc, #176]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d0f0      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ac02:	4b28      	ldr	r3, [pc, #160]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d035      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d02e      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac20:	4b20      	ldr	r3, [pc, #128]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ac2a:	4b1e      	ldr	r3, [pc, #120]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2e:	4a1d      	ldr	r2, [pc, #116]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ac36:	4b1b      	ldr	r3, [pc, #108]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3a:	4a1a      	ldr	r2, [pc, #104]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ac42:	4a18      	ldr	r2, [pc, #96]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ac48:	4b16      	ldr	r3, [pc, #88]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d114      	bne.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac54:	f7fe f992 	bl	8008f7c <HAL_GetTick>
 800ac58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac5a:	e00a      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac5c:	f7fe f98e 	bl	8008f7c <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d901      	bls.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	e34f      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac72:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac76:	f003 0302 	and.w	r3, r3, #2
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0ee      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac8a:	d111      	bne.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ac8c:	4b05      	ldr	r3, [pc, #20]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ac98:	4b04      	ldr	r3, [pc, #16]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ac9a:	400b      	ands	r3, r1
 800ac9c:	4901      	ldr	r1, [pc, #4]	; (800aca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	608b      	str	r3, [r1, #8]
 800aca2:	e00b      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800aca4:	40023800 	.word	0x40023800
 800aca8:	40007000 	.word	0x40007000
 800acac:	0ffffcff 	.word	0x0ffffcff
 800acb0:	4bb3      	ldr	r3, [pc, #716]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	4ab2      	ldr	r2, [pc, #712]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800acba:	6093      	str	r3, [r2, #8]
 800acbc:	4bb0      	ldr	r3, [pc, #704]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acc8:	49ad      	ldr	r1, [pc, #692]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acca:	4313      	orrs	r3, r2
 800accc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0310 	and.w	r3, r3, #16
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d010      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800acda:	4ba9      	ldr	r3, [pc, #676]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ace0:	4aa7      	ldr	r2, [pc, #668]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ace2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ace6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800acea:	4ba5      	ldr	r3, [pc, #660]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	49a2      	ldr	r1, [pc, #648]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00a      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad08:	4b9d      	ldr	r3, [pc, #628]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad16:	499a      	ldr	r1, [pc, #616]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad2a:	4b95      	ldr	r3, [pc, #596]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad38:	4991      	ldr	r1, [pc, #580]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad4c:	4b8c      	ldr	r3, [pc, #560]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5a:	4989      	ldr	r1, [pc, #548]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad6e:	4b84      	ldr	r3, [pc, #528]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7c:	4980      	ldr	r1, [pc, #512]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00a      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad90:	4b7b      	ldr	r3, [pc, #492]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad96:	f023 0203 	bic.w	r2, r3, #3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9e:	4978      	ldr	r1, [pc, #480]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800adb2:	4b73      	ldr	r3, [pc, #460]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb8:	f023 020c 	bic.w	r2, r3, #12
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adc0:	496f      	ldr	r1, [pc, #444]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800add4:	4b6a      	ldr	r3, [pc, #424]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800add6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade2:	4967      	ldr	r1, [pc, #412]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800adf6:	4b62      	ldr	r3, [pc, #392]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adfc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae04:	495e      	ldr	r1, [pc, #376]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00a      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ae18:	4b59      	ldr	r3, [pc, #356]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae26:	4956      	ldr	r1, [pc, #344]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ae3a:	4b51      	ldr	r3, [pc, #324]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae48:	494d      	ldr	r1, [pc, #308]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00a      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ae5c:	4b48      	ldr	r3, [pc, #288]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae6a:	4945      	ldr	r1, [pc, #276]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ae7e:	4b40      	ldr	r3, [pc, #256]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae8c:	493c      	ldr	r1, [pc, #240]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00a      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aea0:	4b37      	ldr	r3, [pc, #220]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeae:	4934      	ldr	r1, [pc, #208]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d011      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aec2:	4b2f      	ldr	r3, [pc, #188]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aed0:	492b      	ldr	r1, [pc, #172]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aed2:	4313      	orrs	r3, r2
 800aed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aedc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aee0:	d101      	bne.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800aee2:	2301      	movs	r3, #1
 800aee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0308 	and.w	r3, r3, #8
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00a      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af02:	4b1f      	ldr	r3, [pc, #124]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af08:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af10:	491b      	ldr	r1, [pc, #108]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af12:	4313      	orrs	r3, r2
 800af14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800af24:	4b16      	ldr	r3, [pc, #88]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af34:	4912      	ldr	r1, [pc, #72]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af36:	4313      	orrs	r3, r2
 800af38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00b      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800af48:	4b0d      	ldr	r3, [pc, #52]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af58:	4909      	ldr	r1, [pc, #36]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af5a:	4313      	orrs	r3, r2
 800af5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00f      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af6c:	4b04      	ldr	r3, [pc, #16]	; (800af80 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800af6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7c:	e002      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800af7e:	bf00      	nop
 800af80:	40023800 	.word	0x40023800
 800af84:	4985      	ldr	r1, [pc, #532]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af86:	4313      	orrs	r3, r2
 800af88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800af98:	4b80      	ldr	r3, [pc, #512]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afa8:	497c      	ldr	r1, [pc, #496]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d005      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afbe:	f040 80d6 	bne.w	800b16e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800afc2:	4b76      	ldr	r3, [pc, #472]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a75      	ldr	r2, [pc, #468]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afce:	f7fd ffd5 	bl	8008f7c <HAL_GetTick>
 800afd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800afd4:	e008      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800afd6:	f7fd ffd1 	bl	8008f7c <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	2b64      	cmp	r3, #100	; 0x64
 800afe2:	d901      	bls.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e194      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800afe8:	4b6c      	ldr	r3, [pc, #432]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1f0      	bne.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	2b00      	cmp	r3, #0
 800affe:	d021      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b004:	2b00      	cmp	r3, #0
 800b006:	d11d      	bne.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b008:	4b64      	ldr	r3, [pc, #400]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b00e:	0c1b      	lsrs	r3, r3, #16
 800b010:	f003 0303 	and.w	r3, r3, #3
 800b014:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b016:	4b61      	ldr	r3, [pc, #388]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b01c:	0e1b      	lsrs	r3, r3, #24
 800b01e:	f003 030f 	and.w	r3, r3, #15
 800b022:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	019a      	lsls	r2, r3, #6
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	041b      	lsls	r3, r3, #16
 800b02e:	431a      	orrs	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	061b      	lsls	r3, r3, #24
 800b034:	431a      	orrs	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	071b      	lsls	r3, r3, #28
 800b03c:	4957      	ldr	r1, [pc, #348]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d004      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b058:	d00a      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b062:	2b00      	cmp	r3, #0
 800b064:	d02e      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b06e:	d129      	bne.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b070:	4b4a      	ldr	r3, [pc, #296]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b076:	0c1b      	lsrs	r3, r3, #16
 800b078:	f003 0303 	and.w	r3, r3, #3
 800b07c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b07e:	4b47      	ldr	r3, [pc, #284]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b084:	0f1b      	lsrs	r3, r3, #28
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	019a      	lsls	r2, r3, #6
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	041b      	lsls	r3, r3, #16
 800b096:	431a      	orrs	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	061b      	lsls	r3, r3, #24
 800b09e:	431a      	orrs	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	071b      	lsls	r3, r3, #28
 800b0a4:	493d      	ldr	r1, [pc, #244]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b0ac:	4b3b      	ldr	r3, [pc, #236]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0b2:	f023 021f 	bic.w	r2, r3, #31
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	4937      	ldr	r1, [pc, #220]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d01d      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b0d0:	4b32      	ldr	r3, [pc, #200]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0d6:	0e1b      	lsrs	r3, r3, #24
 800b0d8:	f003 030f 	and.w	r3, r3, #15
 800b0dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b0de:	4b2f      	ldr	r3, [pc, #188]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b0e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0e4:	0f1b      	lsrs	r3, r3, #28
 800b0e6:	f003 0307 	and.w	r3, r3, #7
 800b0ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	019a      	lsls	r2, r3, #6
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	041b      	lsls	r3, r3, #16
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	061b      	lsls	r3, r3, #24
 800b0fe:	431a      	orrs	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	071b      	lsls	r3, r3, #28
 800b104:	4925      	ldr	r1, [pc, #148]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b106:	4313      	orrs	r3, r2
 800b108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d011      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	019a      	lsls	r2, r3, #6
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	041b      	lsls	r3, r3, #16
 800b124:	431a      	orrs	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	061b      	lsls	r3, r3, #24
 800b12c:	431a      	orrs	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	071b      	lsls	r3, r3, #28
 800b134:	4919      	ldr	r1, [pc, #100]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b136:	4313      	orrs	r3, r2
 800b138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b13c:	4b17      	ldr	r3, [pc, #92]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a16      	ldr	r2, [pc, #88]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b148:	f7fd ff18 	bl	8008f7c <HAL_GetTick>
 800b14c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b14e:	e008      	b.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b150:	f7fd ff14 	bl	8008f7c <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	2b64      	cmp	r3, #100	; 0x64
 800b15c:	d901      	bls.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e0d7      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b162:	4b0e      	ldr	r3, [pc, #56]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d0f0      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	2b01      	cmp	r3, #1
 800b172:	f040 80cd 	bne.w	800b310 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b176:	4b09      	ldr	r3, [pc, #36]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a08      	ldr	r2, [pc, #32]	; (800b19c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b17c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b182:	f7fd fefb 	bl	8008f7c <HAL_GetTick>
 800b186:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b188:	e00a      	b.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b18a:	f7fd fef7 	bl	8008f7c <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	2b64      	cmp	r3, #100	; 0x64
 800b196:	d903      	bls.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e0ba      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800b19c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b1a0:	4b5e      	ldr	r3, [pc, #376]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ac:	d0ed      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d009      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d02e      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d12a      	bne.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b1d6:	4b51      	ldr	r3, [pc, #324]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1dc:	0c1b      	lsrs	r3, r3, #16
 800b1de:	f003 0303 	and.w	r3, r3, #3
 800b1e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b1e4:	4b4d      	ldr	r3, [pc, #308]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ea:	0f1b      	lsrs	r3, r3, #28
 800b1ec:	f003 0307 	and.w	r3, r3, #7
 800b1f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	019a      	lsls	r2, r3, #6
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	041b      	lsls	r3, r3, #16
 800b1fc:	431a      	orrs	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	061b      	lsls	r3, r3, #24
 800b204:	431a      	orrs	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	071b      	lsls	r3, r3, #28
 800b20a:	4944      	ldr	r1, [pc, #272]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b212:	4b42      	ldr	r3, [pc, #264]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b218:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b220:	3b01      	subs	r3, #1
 800b222:	021b      	lsls	r3, r3, #8
 800b224:	493d      	ldr	r1, [pc, #244]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b226:	4313      	orrs	r3, r2
 800b228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d022      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b23c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b240:	d11d      	bne.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b242:	4b36      	ldr	r3, [pc, #216]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b248:	0e1b      	lsrs	r3, r3, #24
 800b24a:	f003 030f 	and.w	r3, r3, #15
 800b24e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b250:	4b32      	ldr	r3, [pc, #200]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b256:	0f1b      	lsrs	r3, r3, #28
 800b258:	f003 0307 	and.w	r3, r3, #7
 800b25c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	695b      	ldr	r3, [r3, #20]
 800b262:	019a      	lsls	r2, r3, #6
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	041b      	lsls	r3, r3, #16
 800b26a:	431a      	orrs	r2, r3
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	061b      	lsls	r3, r3, #24
 800b270:	431a      	orrs	r2, r3
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	071b      	lsls	r3, r3, #28
 800b276:	4929      	ldr	r1, [pc, #164]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b278:	4313      	orrs	r3, r2
 800b27a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 0308 	and.w	r3, r3, #8
 800b286:	2b00      	cmp	r3, #0
 800b288:	d028      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b28a:	4b24      	ldr	r3, [pc, #144]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b290:	0e1b      	lsrs	r3, r3, #24
 800b292:	f003 030f 	and.w	r3, r3, #15
 800b296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b298:	4b20      	ldr	r3, [pc, #128]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b29e:	0c1b      	lsrs	r3, r3, #16
 800b2a0:	f003 0303 	and.w	r3, r3, #3
 800b2a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	019a      	lsls	r2, r3, #6
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	041b      	lsls	r3, r3, #16
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	061b      	lsls	r3, r3, #24
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	69db      	ldr	r3, [r3, #28]
 800b2bc:	071b      	lsls	r3, r3, #28
 800b2be:	4917      	ldr	r1, [pc, #92]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b2c6:	4b15      	ldr	r3, [pc, #84]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d4:	4911      	ldr	r1, [pc, #68]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b2dc:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a0e      	ldr	r2, [pc, #56]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b2e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2e8:	f7fd fe48 	bl	8008f7c <HAL_GetTick>
 800b2ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b2ee:	e008      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b2f0:	f7fd fe44 	bl	8008f7c <HAL_GetTick>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	2b64      	cmp	r3, #100	; 0x64
 800b2fc:	d901      	bls.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e007      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b302:	4b06      	ldr	r3, [pc, #24]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b30a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b30e:	d1ef      	bne.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3720      	adds	r7, #32
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	40023800 	.word	0x40023800

0800b320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e040      	b.n	800b3b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b336:	2b00      	cmp	r3, #0
 800b338:	d106      	bne.n	800b348 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7fd fcbc 	bl	8008cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2224      	movs	r2, #36	; 0x24
 800b34c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f022 0201 	bic.w	r2, r2, #1
 800b35c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 f82c 	bl	800b3bc <UART_SetConfig>
 800b364:	4603      	mov	r3, r0
 800b366:	2b01      	cmp	r3, #1
 800b368:	d101      	bne.n	800b36e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e022      	b.n	800b3b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 faca 	bl	800b910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b38a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b39a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0201 	orr.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fb51 	bl	800ba54 <UART_CheckIdleState>
 800b3b2:	4603      	mov	r3, r0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b088      	sub	sp, #32
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689a      	ldr	r2, [r3, #8]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	4bb1      	ldr	r3, [pc, #708]	; (800b6b0 <UART_SetConfig+0x2f4>)
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	6812      	ldr	r2, [r2, #0]
 800b3f2:	6939      	ldr	r1, [r7, #16]
 800b3f4:	430b      	orrs	r3, r1
 800b3f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68da      	ldr	r2, [r3, #12]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	430a      	orrs	r2, r1
 800b40c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	430a      	orrs	r2, r1
 800b430:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a9f      	ldr	r2, [pc, #636]	; (800b6b4 <UART_SetConfig+0x2f8>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d121      	bne.n	800b480 <UART_SetConfig+0xc4>
 800b43c:	4b9e      	ldr	r3, [pc, #632]	; (800b6b8 <UART_SetConfig+0x2fc>)
 800b43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b442:	f003 0303 	and.w	r3, r3, #3
 800b446:	2b03      	cmp	r3, #3
 800b448:	d816      	bhi.n	800b478 <UART_SetConfig+0xbc>
 800b44a:	a201      	add	r2, pc, #4	; (adr r2, 800b450 <UART_SetConfig+0x94>)
 800b44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b450:	0800b461 	.word	0x0800b461
 800b454:	0800b46d 	.word	0x0800b46d
 800b458:	0800b467 	.word	0x0800b467
 800b45c:	0800b473 	.word	0x0800b473
 800b460:	2301      	movs	r3, #1
 800b462:	77fb      	strb	r3, [r7, #31]
 800b464:	e151      	b.n	800b70a <UART_SetConfig+0x34e>
 800b466:	2302      	movs	r3, #2
 800b468:	77fb      	strb	r3, [r7, #31]
 800b46a:	e14e      	b.n	800b70a <UART_SetConfig+0x34e>
 800b46c:	2304      	movs	r3, #4
 800b46e:	77fb      	strb	r3, [r7, #31]
 800b470:	e14b      	b.n	800b70a <UART_SetConfig+0x34e>
 800b472:	2308      	movs	r3, #8
 800b474:	77fb      	strb	r3, [r7, #31]
 800b476:	e148      	b.n	800b70a <UART_SetConfig+0x34e>
 800b478:	2310      	movs	r3, #16
 800b47a:	77fb      	strb	r3, [r7, #31]
 800b47c:	bf00      	nop
 800b47e:	e144      	b.n	800b70a <UART_SetConfig+0x34e>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a8d      	ldr	r2, [pc, #564]	; (800b6bc <UART_SetConfig+0x300>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d134      	bne.n	800b4f4 <UART_SetConfig+0x138>
 800b48a:	4b8b      	ldr	r3, [pc, #556]	; (800b6b8 <UART_SetConfig+0x2fc>)
 800b48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b490:	f003 030c 	and.w	r3, r3, #12
 800b494:	2b0c      	cmp	r3, #12
 800b496:	d829      	bhi.n	800b4ec <UART_SetConfig+0x130>
 800b498:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <UART_SetConfig+0xe4>)
 800b49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49e:	bf00      	nop
 800b4a0:	0800b4d5 	.word	0x0800b4d5
 800b4a4:	0800b4ed 	.word	0x0800b4ed
 800b4a8:	0800b4ed 	.word	0x0800b4ed
 800b4ac:	0800b4ed 	.word	0x0800b4ed
 800b4b0:	0800b4e1 	.word	0x0800b4e1
 800b4b4:	0800b4ed 	.word	0x0800b4ed
 800b4b8:	0800b4ed 	.word	0x0800b4ed
 800b4bc:	0800b4ed 	.word	0x0800b4ed
 800b4c0:	0800b4db 	.word	0x0800b4db
 800b4c4:	0800b4ed 	.word	0x0800b4ed
 800b4c8:	0800b4ed 	.word	0x0800b4ed
 800b4cc:	0800b4ed 	.word	0x0800b4ed
 800b4d0:	0800b4e7 	.word	0x0800b4e7
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	77fb      	strb	r3, [r7, #31]
 800b4d8:	e117      	b.n	800b70a <UART_SetConfig+0x34e>
 800b4da:	2302      	movs	r3, #2
 800b4dc:	77fb      	strb	r3, [r7, #31]
 800b4de:	e114      	b.n	800b70a <UART_SetConfig+0x34e>
 800b4e0:	2304      	movs	r3, #4
 800b4e2:	77fb      	strb	r3, [r7, #31]
 800b4e4:	e111      	b.n	800b70a <UART_SetConfig+0x34e>
 800b4e6:	2308      	movs	r3, #8
 800b4e8:	77fb      	strb	r3, [r7, #31]
 800b4ea:	e10e      	b.n	800b70a <UART_SetConfig+0x34e>
 800b4ec:	2310      	movs	r3, #16
 800b4ee:	77fb      	strb	r3, [r7, #31]
 800b4f0:	bf00      	nop
 800b4f2:	e10a      	b.n	800b70a <UART_SetConfig+0x34e>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a71      	ldr	r2, [pc, #452]	; (800b6c0 <UART_SetConfig+0x304>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d120      	bne.n	800b540 <UART_SetConfig+0x184>
 800b4fe:	4b6e      	ldr	r3, [pc, #440]	; (800b6b8 <UART_SetConfig+0x2fc>)
 800b500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b504:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b508:	2b10      	cmp	r3, #16
 800b50a:	d00f      	beq.n	800b52c <UART_SetConfig+0x170>
 800b50c:	2b10      	cmp	r3, #16
 800b50e:	d802      	bhi.n	800b516 <UART_SetConfig+0x15a>
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <UART_SetConfig+0x164>
 800b514:	e010      	b.n	800b538 <UART_SetConfig+0x17c>
 800b516:	2b20      	cmp	r3, #32
 800b518:	d005      	beq.n	800b526 <UART_SetConfig+0x16a>
 800b51a:	2b30      	cmp	r3, #48	; 0x30
 800b51c:	d009      	beq.n	800b532 <UART_SetConfig+0x176>
 800b51e:	e00b      	b.n	800b538 <UART_SetConfig+0x17c>
 800b520:	2300      	movs	r3, #0
 800b522:	77fb      	strb	r3, [r7, #31]
 800b524:	e0f1      	b.n	800b70a <UART_SetConfig+0x34e>
 800b526:	2302      	movs	r3, #2
 800b528:	77fb      	strb	r3, [r7, #31]
 800b52a:	e0ee      	b.n	800b70a <UART_SetConfig+0x34e>
 800b52c:	2304      	movs	r3, #4
 800b52e:	77fb      	strb	r3, [r7, #31]
 800b530:	e0eb      	b.n	800b70a <UART_SetConfig+0x34e>
 800b532:	2308      	movs	r3, #8
 800b534:	77fb      	strb	r3, [r7, #31]
 800b536:	e0e8      	b.n	800b70a <UART_SetConfig+0x34e>
 800b538:	2310      	movs	r3, #16
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	bf00      	nop
 800b53e:	e0e4      	b.n	800b70a <UART_SetConfig+0x34e>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a5f      	ldr	r2, [pc, #380]	; (800b6c4 <UART_SetConfig+0x308>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d120      	bne.n	800b58c <UART_SetConfig+0x1d0>
 800b54a:	4b5b      	ldr	r3, [pc, #364]	; (800b6b8 <UART_SetConfig+0x2fc>)
 800b54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b550:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b554:	2b40      	cmp	r3, #64	; 0x40
 800b556:	d00f      	beq.n	800b578 <UART_SetConfig+0x1bc>
 800b558:	2b40      	cmp	r3, #64	; 0x40
 800b55a:	d802      	bhi.n	800b562 <UART_SetConfig+0x1a6>
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d005      	beq.n	800b56c <UART_SetConfig+0x1b0>
 800b560:	e010      	b.n	800b584 <UART_SetConfig+0x1c8>
 800b562:	2b80      	cmp	r3, #128	; 0x80
 800b564:	d005      	beq.n	800b572 <UART_SetConfig+0x1b6>
 800b566:	2bc0      	cmp	r3, #192	; 0xc0
 800b568:	d009      	beq.n	800b57e <UART_SetConfig+0x1c2>
 800b56a:	e00b      	b.n	800b584 <UART_SetConfig+0x1c8>
 800b56c:	2300      	movs	r3, #0
 800b56e:	77fb      	strb	r3, [r7, #31]
 800b570:	e0cb      	b.n	800b70a <UART_SetConfig+0x34e>
 800b572:	2302      	movs	r3, #2
 800b574:	77fb      	strb	r3, [r7, #31]
 800b576:	e0c8      	b.n	800b70a <UART_SetConfig+0x34e>
 800b578:	2304      	movs	r3, #4
 800b57a:	77fb      	strb	r3, [r7, #31]
 800b57c:	e0c5      	b.n	800b70a <UART_SetConfig+0x34e>
 800b57e:	2308      	movs	r3, #8
 800b580:	77fb      	strb	r3, [r7, #31]
 800b582:	e0c2      	b.n	800b70a <UART_SetConfig+0x34e>
 800b584:	2310      	movs	r3, #16
 800b586:	77fb      	strb	r3, [r7, #31]
 800b588:	bf00      	nop
 800b58a:	e0be      	b.n	800b70a <UART_SetConfig+0x34e>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a4d      	ldr	r2, [pc, #308]	; (800b6c8 <UART_SetConfig+0x30c>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d124      	bne.n	800b5e0 <UART_SetConfig+0x224>
 800b596:	4b48      	ldr	r3, [pc, #288]	; (800b6b8 <UART_SetConfig+0x2fc>)
 800b598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a4:	d012      	beq.n	800b5cc <UART_SetConfig+0x210>
 800b5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5aa:	d802      	bhi.n	800b5b2 <UART_SetConfig+0x1f6>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d007      	beq.n	800b5c0 <UART_SetConfig+0x204>
 800b5b0:	e012      	b.n	800b5d8 <UART_SetConfig+0x21c>
 800b5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b6:	d006      	beq.n	800b5c6 <UART_SetConfig+0x20a>
 800b5b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5bc:	d009      	beq.n	800b5d2 <UART_SetConfig+0x216>
 800b5be:	e00b      	b.n	800b5d8 <UART_SetConfig+0x21c>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	77fb      	strb	r3, [r7, #31]
 800b5c4:	e0a1      	b.n	800b70a <UART_SetConfig+0x34e>
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	77fb      	strb	r3, [r7, #31]
 800b5ca:	e09e      	b.n	800b70a <UART_SetConfig+0x34e>
 800b5cc:	2304      	movs	r3, #4
 800b5ce:	77fb      	strb	r3, [r7, #31]
 800b5d0:	e09b      	b.n	800b70a <UART_SetConfig+0x34e>
 800b5d2:	2308      	movs	r3, #8
 800b5d4:	77fb      	strb	r3, [r7, #31]
 800b5d6:	e098      	b.n	800b70a <UART_SetConfig+0x34e>
 800b5d8:	2310      	movs	r3, #16
 800b5da:	77fb      	strb	r3, [r7, #31]
 800b5dc:	bf00      	nop
 800b5de:	e094      	b.n	800b70a <UART_SetConfig+0x34e>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a39      	ldr	r2, [pc, #228]	; (800b6cc <UART_SetConfig+0x310>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d124      	bne.n	800b634 <UART_SetConfig+0x278>
 800b5ea:	4b33      	ldr	r3, [pc, #204]	; (800b6b8 <UART_SetConfig+0x2fc>)
 800b5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5f8:	d012      	beq.n	800b620 <UART_SetConfig+0x264>
 800b5fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5fe:	d802      	bhi.n	800b606 <UART_SetConfig+0x24a>
 800b600:	2b00      	cmp	r3, #0
 800b602:	d007      	beq.n	800b614 <UART_SetConfig+0x258>
 800b604:	e012      	b.n	800b62c <UART_SetConfig+0x270>
 800b606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b60a:	d006      	beq.n	800b61a <UART_SetConfig+0x25e>
 800b60c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b610:	d009      	beq.n	800b626 <UART_SetConfig+0x26a>
 800b612:	e00b      	b.n	800b62c <UART_SetConfig+0x270>
 800b614:	2301      	movs	r3, #1
 800b616:	77fb      	strb	r3, [r7, #31]
 800b618:	e077      	b.n	800b70a <UART_SetConfig+0x34e>
 800b61a:	2302      	movs	r3, #2
 800b61c:	77fb      	strb	r3, [r7, #31]
 800b61e:	e074      	b.n	800b70a <UART_SetConfig+0x34e>
 800b620:	2304      	movs	r3, #4
 800b622:	77fb      	strb	r3, [r7, #31]
 800b624:	e071      	b.n	800b70a <UART_SetConfig+0x34e>
 800b626:	2308      	movs	r3, #8
 800b628:	77fb      	strb	r3, [r7, #31]
 800b62a:	e06e      	b.n	800b70a <UART_SetConfig+0x34e>
 800b62c:	2310      	movs	r3, #16
 800b62e:	77fb      	strb	r3, [r7, #31]
 800b630:	bf00      	nop
 800b632:	e06a      	b.n	800b70a <UART_SetConfig+0x34e>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a25      	ldr	r2, [pc, #148]	; (800b6d0 <UART_SetConfig+0x314>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d124      	bne.n	800b688 <UART_SetConfig+0x2cc>
 800b63e:	4b1e      	ldr	r3, [pc, #120]	; (800b6b8 <UART_SetConfig+0x2fc>)
 800b640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b644:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b64c:	d012      	beq.n	800b674 <UART_SetConfig+0x2b8>
 800b64e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b652:	d802      	bhi.n	800b65a <UART_SetConfig+0x29e>
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <UART_SetConfig+0x2ac>
 800b658:	e012      	b.n	800b680 <UART_SetConfig+0x2c4>
 800b65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b65e:	d006      	beq.n	800b66e <UART_SetConfig+0x2b2>
 800b660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b664:	d009      	beq.n	800b67a <UART_SetConfig+0x2be>
 800b666:	e00b      	b.n	800b680 <UART_SetConfig+0x2c4>
 800b668:	2300      	movs	r3, #0
 800b66a:	77fb      	strb	r3, [r7, #31]
 800b66c:	e04d      	b.n	800b70a <UART_SetConfig+0x34e>
 800b66e:	2302      	movs	r3, #2
 800b670:	77fb      	strb	r3, [r7, #31]
 800b672:	e04a      	b.n	800b70a <UART_SetConfig+0x34e>
 800b674:	2304      	movs	r3, #4
 800b676:	77fb      	strb	r3, [r7, #31]
 800b678:	e047      	b.n	800b70a <UART_SetConfig+0x34e>
 800b67a:	2308      	movs	r3, #8
 800b67c:	77fb      	strb	r3, [r7, #31]
 800b67e:	e044      	b.n	800b70a <UART_SetConfig+0x34e>
 800b680:	2310      	movs	r3, #16
 800b682:	77fb      	strb	r3, [r7, #31]
 800b684:	bf00      	nop
 800b686:	e040      	b.n	800b70a <UART_SetConfig+0x34e>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a11      	ldr	r2, [pc, #68]	; (800b6d4 <UART_SetConfig+0x318>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d139      	bne.n	800b706 <UART_SetConfig+0x34a>
 800b692:	4b09      	ldr	r3, [pc, #36]	; (800b6b8 <UART_SetConfig+0x2fc>)
 800b694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b69c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6a0:	d027      	beq.n	800b6f2 <UART_SetConfig+0x336>
 800b6a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6a6:	d817      	bhi.n	800b6d8 <UART_SetConfig+0x31c>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d01c      	beq.n	800b6e6 <UART_SetConfig+0x32a>
 800b6ac:	e027      	b.n	800b6fe <UART_SetConfig+0x342>
 800b6ae:	bf00      	nop
 800b6b0:	efff69f3 	.word	0xefff69f3
 800b6b4:	40011000 	.word	0x40011000
 800b6b8:	40023800 	.word	0x40023800
 800b6bc:	40004400 	.word	0x40004400
 800b6c0:	40004800 	.word	0x40004800
 800b6c4:	40004c00 	.word	0x40004c00
 800b6c8:	40005000 	.word	0x40005000
 800b6cc:	40011400 	.word	0x40011400
 800b6d0:	40007800 	.word	0x40007800
 800b6d4:	40007c00 	.word	0x40007c00
 800b6d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6dc:	d006      	beq.n	800b6ec <UART_SetConfig+0x330>
 800b6de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b6e2:	d009      	beq.n	800b6f8 <UART_SetConfig+0x33c>
 800b6e4:	e00b      	b.n	800b6fe <UART_SetConfig+0x342>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	77fb      	strb	r3, [r7, #31]
 800b6ea:	e00e      	b.n	800b70a <UART_SetConfig+0x34e>
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	77fb      	strb	r3, [r7, #31]
 800b6f0:	e00b      	b.n	800b70a <UART_SetConfig+0x34e>
 800b6f2:	2304      	movs	r3, #4
 800b6f4:	77fb      	strb	r3, [r7, #31]
 800b6f6:	e008      	b.n	800b70a <UART_SetConfig+0x34e>
 800b6f8:	2308      	movs	r3, #8
 800b6fa:	77fb      	strb	r3, [r7, #31]
 800b6fc:	e005      	b.n	800b70a <UART_SetConfig+0x34e>
 800b6fe:	2310      	movs	r3, #16
 800b700:	77fb      	strb	r3, [r7, #31]
 800b702:	bf00      	nop
 800b704:	e001      	b.n	800b70a <UART_SetConfig+0x34e>
 800b706:	2310      	movs	r3, #16
 800b708:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b712:	d17f      	bne.n	800b814 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b714:	7ffb      	ldrb	r3, [r7, #31]
 800b716:	2b08      	cmp	r3, #8
 800b718:	d85c      	bhi.n	800b7d4 <UART_SetConfig+0x418>
 800b71a:	a201      	add	r2, pc, #4	; (adr r2, 800b720 <UART_SetConfig+0x364>)
 800b71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b720:	0800b745 	.word	0x0800b745
 800b724:	0800b765 	.word	0x0800b765
 800b728:	0800b785 	.word	0x0800b785
 800b72c:	0800b7d5 	.word	0x0800b7d5
 800b730:	0800b79d 	.word	0x0800b79d
 800b734:	0800b7d5 	.word	0x0800b7d5
 800b738:	0800b7d5 	.word	0x0800b7d5
 800b73c:	0800b7d5 	.word	0x0800b7d5
 800b740:	0800b7bd 	.word	0x0800b7bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b744:	f7ff f99e 	bl	800aa84 <HAL_RCC_GetPCLK1Freq>
 800b748:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	005a      	lsls	r2, r3, #1
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	085b      	lsrs	r3, r3, #1
 800b754:	441a      	add	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b75e:	b29b      	uxth	r3, r3
 800b760:	61bb      	str	r3, [r7, #24]
        break;
 800b762:	e03a      	b.n	800b7da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b764:	f7ff f9a2 	bl	800aaac <HAL_RCC_GetPCLK2Freq>
 800b768:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	005a      	lsls	r2, r3, #1
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	085b      	lsrs	r3, r3, #1
 800b774:	441a      	add	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b77e:	b29b      	uxth	r3, r3
 800b780:	61bb      	str	r3, [r7, #24]
        break;
 800b782:	e02a      	b.n	800b7da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	085a      	lsrs	r2, r3, #1
 800b78a:	4b5f      	ldr	r3, [pc, #380]	; (800b908 <UART_SetConfig+0x54c>)
 800b78c:	4413      	add	r3, r2
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	6852      	ldr	r2, [r2, #4]
 800b792:	fbb3 f3f2 	udiv	r3, r3, r2
 800b796:	b29b      	uxth	r3, r3
 800b798:	61bb      	str	r3, [r7, #24]
        break;
 800b79a:	e01e      	b.n	800b7da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b79c:	f7ff f88e 	bl	800a8bc <HAL_RCC_GetSysClockFreq>
 800b7a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	005a      	lsls	r2, r3, #1
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	085b      	lsrs	r3, r3, #1
 800b7ac:	441a      	add	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	61bb      	str	r3, [r7, #24]
        break;
 800b7ba:	e00e      	b.n	800b7da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	085b      	lsrs	r3, r3, #1
 800b7c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	61bb      	str	r3, [r7, #24]
        break;
 800b7d2:	e002      	b.n	800b7da <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	75fb      	strb	r3, [r7, #23]
        break;
 800b7d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	2b0f      	cmp	r3, #15
 800b7de:	d916      	bls.n	800b80e <UART_SetConfig+0x452>
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e6:	d212      	bcs.n	800b80e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	f023 030f 	bic.w	r3, r3, #15
 800b7f0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	085b      	lsrs	r3, r3, #1
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	f003 0307 	and.w	r3, r3, #7
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	897b      	ldrh	r3, [r7, #10]
 800b800:	4313      	orrs	r3, r2
 800b802:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	897a      	ldrh	r2, [r7, #10]
 800b80a:	60da      	str	r2, [r3, #12]
 800b80c:	e070      	b.n	800b8f0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	75fb      	strb	r3, [r7, #23]
 800b812:	e06d      	b.n	800b8f0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b814:	7ffb      	ldrb	r3, [r7, #31]
 800b816:	2b08      	cmp	r3, #8
 800b818:	d859      	bhi.n	800b8ce <UART_SetConfig+0x512>
 800b81a:	a201      	add	r2, pc, #4	; (adr r2, 800b820 <UART_SetConfig+0x464>)
 800b81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b820:	0800b845 	.word	0x0800b845
 800b824:	0800b863 	.word	0x0800b863
 800b828:	0800b881 	.word	0x0800b881
 800b82c:	0800b8cf 	.word	0x0800b8cf
 800b830:	0800b899 	.word	0x0800b899
 800b834:	0800b8cf 	.word	0x0800b8cf
 800b838:	0800b8cf 	.word	0x0800b8cf
 800b83c:	0800b8cf 	.word	0x0800b8cf
 800b840:	0800b8b7 	.word	0x0800b8b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b844:	f7ff f91e 	bl	800aa84 <HAL_RCC_GetPCLK1Freq>
 800b848:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	085a      	lsrs	r2, r3, #1
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	441a      	add	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	fbb2 f3f3 	udiv	r3, r2, r3
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	61bb      	str	r3, [r7, #24]
        break;
 800b860:	e038      	b.n	800b8d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b862:	f7ff f923 	bl	800aaac <HAL_RCC_GetPCLK2Freq>
 800b866:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	085a      	lsrs	r2, r3, #1
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	441a      	add	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	61bb      	str	r3, [r7, #24]
        break;
 800b87e:	e029      	b.n	800b8d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	085a      	lsrs	r2, r3, #1
 800b886:	4b21      	ldr	r3, [pc, #132]	; (800b90c <UART_SetConfig+0x550>)
 800b888:	4413      	add	r3, r2
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	6852      	ldr	r2, [r2, #4]
 800b88e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b892:	b29b      	uxth	r3, r3
 800b894:	61bb      	str	r3, [r7, #24]
        break;
 800b896:	e01d      	b.n	800b8d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b898:	f7ff f810 	bl	800a8bc <HAL_RCC_GetSysClockFreq>
 800b89c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	085a      	lsrs	r2, r3, #1
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	441a      	add	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	61bb      	str	r3, [r7, #24]
        break;
 800b8b4:	e00e      	b.n	800b8d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	085b      	lsrs	r3, r3, #1
 800b8bc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	61bb      	str	r3, [r7, #24]
        break;
 800b8cc:	e002      	b.n	800b8d4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
        break;
 800b8d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	2b0f      	cmp	r3, #15
 800b8d8:	d908      	bls.n	800b8ec <UART_SetConfig+0x530>
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e0:	d204      	bcs.n	800b8ec <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	69ba      	ldr	r2, [r7, #24]
 800b8e8:	60da      	str	r2, [r3, #12]
 800b8ea:	e001      	b.n	800b8f0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3720      	adds	r7, #32
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	01e84800 	.word	0x01e84800
 800b90c:	00f42400 	.word	0x00f42400

0800b910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	f003 0301 	and.w	r3, r3, #1
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	430a      	orrs	r2, r1
 800b938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93e:	f003 0302 	and.w	r3, r3, #2
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	f003 0304 	and.w	r3, r3, #4
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00a      	beq.n	800b97e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	430a      	orrs	r2, r1
 800b97c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	f003 0308 	and.w	r3, r3, #8
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00a      	beq.n	800b9a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	430a      	orrs	r2, r1
 800b99e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	f003 0310 	and.w	r3, r3, #16
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00a      	beq.n	800b9c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c6:	f003 0320 	and.w	r3, r3, #32
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	430a      	orrs	r2, r1
 800b9e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d01a      	beq.n	800ba26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba0e:	d10a      	bne.n	800ba26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	430a      	orrs	r2, r1
 800ba24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00a      	beq.n	800ba48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	430a      	orrs	r2, r1
 800ba46:	605a      	str	r2, [r3, #4]
  }
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ba62:	f7fd fa8b 	bl	8008f7c <HAL_GetTick>
 800ba66:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 0308 	and.w	r3, r3, #8
 800ba72:	2b08      	cmp	r3, #8
 800ba74:	d10e      	bne.n	800ba94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba7a:	9300      	str	r3, [sp, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f82a 	bl	800bade <UART_WaitOnFlagUntilTimeout>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e020      	b.n	800bad6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 0304 	and.w	r3, r3, #4
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d10e      	bne.n	800bac0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f814 	bl	800bade <UART_WaitOnFlagUntilTimeout>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800babc:	2303      	movs	r3, #3
 800babe:	e00a      	b.n	800bad6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2220      	movs	r2, #32
 800bac4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2220      	movs	r2, #32
 800baca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	603b      	str	r3, [r7, #0]
 800baea:	4613      	mov	r3, r2
 800baec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baee:	e05d      	b.n	800bbac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800baf6:	d059      	beq.n	800bbac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baf8:	f7fd fa40 	bl	8008f7c <HAL_GetTick>
 800bafc:	4602      	mov	r2, r0
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	69ba      	ldr	r2, [r7, #24]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d302      	bcc.n	800bb0e <UART_WaitOnFlagUntilTimeout+0x30>
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d11b      	bne.n	800bb46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	689a      	ldr	r2, [r3, #8]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0201 	bic.w	r2, r2, #1
 800bb2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2220      	movs	r2, #32
 800bb32:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2220      	movs	r2, #32
 800bb38:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	e042      	b.n	800bbcc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d02b      	beq.n	800bbac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	69db      	ldr	r3, [r3, #28]
 800bb5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb62:	d123      	bne.n	800bbac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb6c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	689a      	ldr	r2, [r3, #8]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f022 0201 	bic.w	r2, r2, #1
 800bb8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2220      	movs	r2, #32
 800bb92:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2220      	movs	r2, #32
 800bb98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2220      	movs	r2, #32
 800bb9e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e00f      	b.n	800bbcc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	69da      	ldr	r2, [r3, #28]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	bf0c      	ite	eq
 800bbbc:	2301      	moveq	r3, #1
 800bbbe:	2300      	movne	r3, #0
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d092      	beq.n	800baf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b084      	sub	sp, #16
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	f107 001c 	add.w	r0, r7, #28
 800bbe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d120      	bne.n	800bc2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68da      	ldr	r2, [r3, #12]
 800bbfc:	4b20      	ldr	r3, [pc, #128]	; (800bc80 <USB_CoreInit+0xac>)
 800bbfe:	4013      	ands	r3, r2
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bc10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d105      	bne.n	800bc22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fa52 	bl	800c0cc <USB_CoreReset>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	73fb      	strb	r3, [r7, #15]
 800bc2c:	e010      	b.n	800bc50 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa46 	bl	800c0cc <USB_CoreReset>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800bc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d10b      	bne.n	800bc6e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f043 0206 	orr.w	r2, r3, #6
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	f043 0220 	orr.w	r2, r3, #32
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc7a:	b004      	add	sp, #16
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	ffbdffbf 	.word	0xffbdffbf

0800bc84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f023 0201 	bic.w	r2, r3, #1
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bcbe:	78fb      	ldrb	r3, [r7, #3]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d106      	bne.n	800bcd2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	60da      	str	r2, [r3, #12]
 800bcd0:	e00b      	b.n	800bcea <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bcd2:	78fb      	ldrb	r3, [r7, #3]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d106      	bne.n	800bce6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	60da      	str	r2, [r3, #12]
 800bce4:	e001      	b.n	800bcea <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e003      	b.n	800bcf2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bcea:	2032      	movs	r0, #50	; 0x32
 800bcec:	f7fd f952 	bl	8008f94 <HAL_Delay>

  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b086      	sub	sp, #24
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bd0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bd16:	2300      	movs	r3, #0
 800bd18:	613b      	str	r3, [r7, #16]
 800bd1a:	e009      	b.n	800bd30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	3340      	adds	r3, #64	; 0x40
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	2200      	movs	r2, #0
 800bd28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	613b      	str	r3, [r7, #16]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2b0e      	cmp	r3, #14
 800bd34:	d9f2      	bls.n	800bd1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bd36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d11c      	bne.n	800bd76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd4a:	f043 0302 	orr.w	r3, r3, #2
 800bd4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	e005      	b.n	800bd82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd88:	461a      	mov	r2, r3
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd94:	4619      	mov	r1, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	680b      	ldr	r3, [r1, #0]
 800bda0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d10c      	bne.n	800bdc2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d104      	bne.n	800bdb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bdae:	2100      	movs	r1, #0
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 f959 	bl	800c068 <USB_SetDevSpeed>
 800bdb6:	e018      	b.n	800bdea <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bdb8:	2101      	movs	r1, #1
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f954 	bl	800c068 <USB_SetDevSpeed>
 800bdc0:	e013      	b.n	800bdea <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	d10c      	bne.n	800bde2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d104      	bne.n	800bdd8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bdce:	2100      	movs	r1, #0
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 f949 	bl	800c068 <USB_SetDevSpeed>
 800bdd6:	e008      	b.n	800bdea <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bdd8:	2101      	movs	r1, #1
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f944 	bl	800c068 <USB_SetDevSpeed>
 800bde0:	e003      	b.n	800bdea <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bde2:	2103      	movs	r1, #3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f93f 	bl	800c068 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bdea:	2110      	movs	r1, #16
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f8f3 	bl	800bfd8 <USB_FlushTxFifo>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f911 	bl	800c024 <USB_FlushRxFifo>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be12:	461a      	mov	r2, r3
 800be14:	2300      	movs	r3, #0
 800be16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be1e:	461a      	mov	r2, r3
 800be20:	2300      	movs	r3, #0
 800be22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be2a:	461a      	mov	r2, r3
 800be2c:	2300      	movs	r3, #0
 800be2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be30:	2300      	movs	r3, #0
 800be32:	613b      	str	r3, [r7, #16]
 800be34:	e043      	b.n	800bebe <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	015a      	lsls	r2, r3, #5
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	4413      	add	r3, r2
 800be3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be4c:	d118      	bne.n	800be80 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10a      	bne.n	800be6a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be60:	461a      	mov	r2, r3
 800be62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	e013      	b.n	800be92 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	015a      	lsls	r2, r3, #5
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	4413      	add	r3, r2
 800be72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be76:	461a      	mov	r2, r3
 800be78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	e008      	b.n	800be92 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4413      	add	r3, r2
 800be88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be8c:	461a      	mov	r2, r3
 800be8e:	2300      	movs	r3, #0
 800be90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be9e:	461a      	mov	r2, r3
 800bea0:	2300      	movs	r3, #0
 800bea2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb0:	461a      	mov	r2, r3
 800beb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800beb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	3301      	adds	r3, #1
 800bebc:	613b      	str	r3, [r7, #16]
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d3b7      	bcc.n	800be36 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bec6:	2300      	movs	r3, #0
 800bec8:	613b      	str	r3, [r7, #16]
 800beca:	e043      	b.n	800bf54 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	015a      	lsls	r2, r3, #5
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bee2:	d118      	bne.n	800bf16 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10a      	bne.n	800bf00 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	015a      	lsls	r2, r3, #5
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	4413      	add	r3, r2
 800bef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef6:	461a      	mov	r2, r3
 800bef8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	e013      	b.n	800bf28 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	015a      	lsls	r2, r3, #5
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	4413      	add	r3, r2
 800bf08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf12:	6013      	str	r3, [r2, #0]
 800bf14:	e008      	b.n	800bf28 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	015a      	lsls	r2, r3, #5
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf22:	461a      	mov	r2, r3
 800bf24:	2300      	movs	r3, #0
 800bf26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf34:	461a      	mov	r2, r3
 800bf36:	2300      	movs	r3, #0
 800bf38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	015a      	lsls	r2, r3, #5
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	4413      	add	r3, r2
 800bf42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf46:	461a      	mov	r2, r3
 800bf48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	3301      	adds	r3, #1
 800bf52:	613b      	str	r3, [r7, #16]
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d3b7      	bcc.n	800becc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bf7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d105      	bne.n	800bf90 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	f043 0210 	orr.w	r2, r3, #16
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	699a      	ldr	r2, [r3, #24]
 800bf94:	4b0e      	ldr	r3, [pc, #56]	; (800bfd0 <USB_DevInit+0x2d4>)
 800bf96:	4313      	orrs	r3, r2
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d005      	beq.n	800bfae <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	f043 0208 	orr.w	r2, r3, #8
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bfae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d105      	bne.n	800bfc0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	699a      	ldr	r2, [r3, #24]
 800bfb8:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <USB_DevInit+0x2d8>)
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3718      	adds	r7, #24
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfcc:	b004      	add	sp, #16
 800bfce:	4770      	bx	lr
 800bfd0:	803c3800 	.word	0x803c3800
 800bfd4:	40000004 	.word	0x40000004

0800bfd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	019b      	lsls	r3, r3, #6
 800bfea:	f043 0220 	orr.w	r2, r3, #32
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3301      	adds	r3, #1
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	4a09      	ldr	r2, [pc, #36]	; (800c020 <USB_FlushTxFifo+0x48>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d901      	bls.n	800c004 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e006      	b.n	800c012 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	f003 0320 	and.w	r3, r3, #32
 800c00c:	2b20      	cmp	r3, #32
 800c00e:	d0f0      	beq.n	800bff2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	00030d40 	.word	0x00030d40

0800c024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c02c:	2300      	movs	r3, #0
 800c02e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2210      	movs	r2, #16
 800c034:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3301      	adds	r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4a09      	ldr	r2, [pc, #36]	; (800c064 <USB_FlushRxFifo+0x40>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d901      	bls.n	800c048 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	e006      	b.n	800c056 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	f003 0310 	and.w	r3, r3, #16
 800c050:	2b10      	cmp	r3, #16
 800c052:	d0f0      	beq.n	800c036 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	00030d40 	.word	0x00030d40

0800c068 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	78fb      	ldrb	r3, [r7, #3]
 800c082:	68f9      	ldr	r1, [r7, #12]
 800c084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c088:	4313      	orrs	r3, r2
 800c08a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b084      	sub	sp, #16
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0b4:	f043 0302 	orr.w	r3, r3, #2
 800c0b8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c0ba:	2003      	movs	r0, #3
 800c0bc:	f7fc ff6a 	bl	8008f94 <HAL_Delay>

  return HAL_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	60fb      	str	r3, [r7, #12]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	4a13      	ldr	r2, [pc, #76]	; (800c130 <USB_CoreReset+0x64>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d901      	bls.n	800c0ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e01b      	b.n	800c122 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	daf2      	bge.n	800c0d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	f043 0201 	orr.w	r2, r3, #1
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3301      	adds	r3, #1
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4a09      	ldr	r2, [pc, #36]	; (800c130 <USB_CoreReset+0x64>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d901      	bls.n	800c114 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e006      	b.n	800c122 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d0f0      	beq.n	800c102 <USB_CoreReset+0x36>

  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	00030d40 	.word	0x00030d40

0800c134 <__libc_init_array>:
 800c134:	b570      	push	{r4, r5, r6, lr}
 800c136:	4e0d      	ldr	r6, [pc, #52]	; (800c16c <__libc_init_array+0x38>)
 800c138:	4c0d      	ldr	r4, [pc, #52]	; (800c170 <__libc_init_array+0x3c>)
 800c13a:	1ba4      	subs	r4, r4, r6
 800c13c:	10a4      	asrs	r4, r4, #2
 800c13e:	2500      	movs	r5, #0
 800c140:	42a5      	cmp	r5, r4
 800c142:	d109      	bne.n	800c158 <__libc_init_array+0x24>
 800c144:	4e0b      	ldr	r6, [pc, #44]	; (800c174 <__libc_init_array+0x40>)
 800c146:	4c0c      	ldr	r4, [pc, #48]	; (800c178 <__libc_init_array+0x44>)
 800c148:	f000 f820 	bl	800c18c <_init>
 800c14c:	1ba4      	subs	r4, r4, r6
 800c14e:	10a4      	asrs	r4, r4, #2
 800c150:	2500      	movs	r5, #0
 800c152:	42a5      	cmp	r5, r4
 800c154:	d105      	bne.n	800c162 <__libc_init_array+0x2e>
 800c156:	bd70      	pop	{r4, r5, r6, pc}
 800c158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c15c:	4798      	blx	r3
 800c15e:	3501      	adds	r5, #1
 800c160:	e7ee      	b.n	800c140 <__libc_init_array+0xc>
 800c162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c166:	4798      	blx	r3
 800c168:	3501      	adds	r5, #1
 800c16a:	e7f2      	b.n	800c152 <__libc_init_array+0x1e>
 800c16c:	0800c1c4 	.word	0x0800c1c4
 800c170:	0800c1c4 	.word	0x0800c1c4
 800c174:	0800c1c4 	.word	0x0800c1c4
 800c178:	0800c1c8 	.word	0x0800c1c8

0800c17c <memset>:
 800c17c:	4402      	add	r2, r0
 800c17e:	4603      	mov	r3, r0
 800c180:	4293      	cmp	r3, r2
 800c182:	d100      	bne.n	800c186 <memset+0xa>
 800c184:	4770      	bx	lr
 800c186:	f803 1b01 	strb.w	r1, [r3], #1
 800c18a:	e7f9      	b.n	800c180 <memset+0x4>

0800c18c <_init>:
 800c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18e:	bf00      	nop
 800c190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c192:	bc08      	pop	{r3}
 800c194:	469e      	mov	lr, r3
 800c196:	4770      	bx	lr

0800c198 <_fini>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19a:	bf00      	nop
 800c19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c19e:	bc08      	pop	{r3}
 800c1a0:	469e      	mov	lr, r3
 800c1a2:	4770      	bx	lr
