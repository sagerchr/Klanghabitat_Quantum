
DisplayBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee0  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800912c  0800912c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009134  08009134  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009134  08009134  00019134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009138  08009138  00019138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800913c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .shared       00000040  20000024  08009160  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000007bc  20000064  080091a0  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000820  080091a0  00020820  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000191f8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004070  00000000  00000000  0003928c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000016d8  00000000  00000000  0003d300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001460  00000000  00000000  0003e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000322ac  00000000  00000000  0003fe38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018957  00000000  00000000  000720e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00115c17  00000000  00000000  0008aa3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001a0652  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059e0  00000000  00000000  001a06d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000064 	.word	0x20000064
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08007234 	.word	0x08007234

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000068 	.word	0x20000068
 80001f0:	08007234 	.word	0x08007234

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 80004f8:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 8000508:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals. */
  CpuIrqDisable();
 8000518:	f7ff ffec 	bl	80004f4 <CpuIrqDisable>
} /*** end of CpuInit ***/
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8000526:	f000 fb65 	bl	8000bf4 <NvmVerifyChecksum>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10e      	bne.n	800054e <CpuStartUserProgram+0x2e>
     * the communication interface that were not yet initialized are now initialized.
     * this is needed to make sure firmware updates via these communication interfaces
     * will be possible.
     */

    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"no valid firmware installed", CENTER_MODE);
 8000530:	f002 f8b0 	bl	8002694 <BSP_LCD_GetYSize>
 8000534:	4603      	mov	r3, r0
 8000536:	085b      	lsrs	r3, r3, #1
 8000538:	b29b      	uxth	r3, r3
 800053a:	3b1b      	subs	r3, #27
 800053c:	b299      	uxth	r1, r3
 800053e:	2301      	movs	r3, #1
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <CpuStartUserProgram+0x6c>)
 8000542:	2000      	movs	r0, #0
 8000544:	f002 f9ca 	bl	80028dc <BSP_LCD_DisplayStringAt>
    ComDeferredInit();
 8000548:	f000 fdd8 	bl	80010fc <ComDeferredInit>
#endif
    /* not a valid user program so it cannot be started */
    return;
 800054c:	e01a      	b.n	8000584 <CpuStartUserProgram+0x64>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 800054e:	f000 fd61 	bl	8001014 <ComFree>
#endif
  /* reset the timer */
  TimerReset();
 8000552:	f000 fcc7 	bl	8000ee4 <TimerReset>
  /* reset the HAL */
  HAL_DeInit();
 8000556:	f002 fee9 	bl	800332c <HAL_DeInit>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 800055a:	f000 fb52 	bl	8000c02 <NvmGetUserProgBaseAddress>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <CpuStartUserProgram+0x70>)
 8000562:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800056a:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 800056c:	f000 fb49 	bl	8000c02 <NvmGetUserProgBaseAddress>
 8000570:	4603      	mov	r3, r0
 8000572:	3304      	adds	r3, #4
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8000578:	f7ff ffc4 	bl	8000504 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4798      	blx	r3
  /* theoretically, the code never gets here because the user program should now be
   * running and the previous function call should not return. In case it did return
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
 8000580:	f000 fdbc 	bl	80010fc <ComDeferredInit>
#endif
} /*** end of CpuStartUserProgram ***/
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	0800724c 	.word	0x0800724c
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	4613      	mov	r3, r2
 80005a0:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80005aa:	e009      	b.n	80005c0 <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	1c53      	adds	r3, r2, #1
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	1c59      	adds	r1, r3, #1
 80005b6:	6139      	str	r1, [r7, #16]
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 80005bc:	f000 fdab 	bl	8001116 <CopService>
  while (len-- > 0)
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	80fa      	strh	r2, [r7, #6]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f0      	bne.n	80005ac <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <FlashInit+0x20>)
 80005da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005de:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <FlashInit+0x24>)
 80005e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005e6:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000080 	.word	0x20000080
 80005f8:	20000284 	.word	0x20000284

080005fc <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	491d      	ldr	r1, [pc, #116]	; (8000684 <FlashWrite+0x88>)
 800060e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000612:	4419      	add	r1, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	425b      	negs	r3, r3
 8000618:	440b      	add	r3, r1
 800061a:	3b01      	subs	r3, #1
 800061c:	429a      	cmp	r2, r3
 800061e:	d901      	bls.n	8000624 <FlashWrite+0x28>
  {
    return BLT_FALSE;
 8000620:	2300      	movs	r3, #0
 8000622:	e02a      	b.n	800067a <FlashWrite+0x7e>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f000 fa7d 	bl	8000b24 <FlashGetSector>
 800062a:	4603      	mov	r3, r0
 800062c:	2bff      	cmp	r3, #255	; 0xff
 800062e:	d009      	beq.n	8000644 <FlashWrite+0x48>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4413      	add	r3, r2
 8000636:	3b01      	subs	r3, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa73 	bl	8000b24 <FlashGetSector>
 800063e:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000640:	2bff      	cmp	r3, #255	; 0xff
 8000642:	d101      	bne.n	8000648 <FlashWrite+0x4c>
  {
    return BLT_FALSE;
 8000644:	2300      	movs	r3, #0
 8000646:	e018      	b.n	800067a <FlashWrite+0x7e>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800064e:	f023 0301 	bic.w	r3, r3, #1
 8000652:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 8000654:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <FlashWrite+0x8c>)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4293      	cmp	r3, r2
 800065a:	d107      	bne.n	800066c <FlashWrite+0x70>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <FlashWrite+0x90>)
 8000664:	f000 f968 	bl	8000938 <FlashAddToBlock>
 8000668:	4603      	mov	r3, r0
 800066a:	e006      	b.n	800067a <FlashWrite+0x7e>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	68f9      	ldr	r1, [r7, #12]
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <FlashWrite+0x94>)
 8000674:	f000 f960 	bl	8000938 <FlashAddToBlock>
 8000678:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 800067a:	4618      	mov	r0, r3
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	081e0000 	.word	0x081e0000
 8000688:	08010000 	.word	0x08010000
 800068c:	20000284 	.word	0x20000284
 8000690:	20000080 	.word	0x20000080

08000694 <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	4916      	ldr	r1, [pc, #88]	; (80006fc <FlashErase+0x68>)
 80006a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006a8:	4419      	add	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	425b      	negs	r3, r3
 80006ae:	440b      	add	r3, r1
 80006b0:	3b01      	subs	r3, #1
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d901      	bls.n	80006ba <FlashErase+0x26>
  {
    return BLT_FALSE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	e01c      	b.n	80006f4 <FlashErase+0x60>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 fa32 	bl	8000b24 <FlashGetSector>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fa29 	bl	8000b24 <FlashGetSector>
 80006d2:	4603      	mov	r3, r0
 80006d4:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2bff      	cmp	r3, #255	; 0xff
 80006da:	d002      	beq.n	80006e2 <FlashErase+0x4e>
 80006dc:	7bbb      	ldrb	r3, [r7, #14]
 80006de:	2bff      	cmp	r3, #255	; 0xff
 80006e0:	d101      	bne.n	80006e6 <FlashErase+0x52>
  {
    return BLT_FALSE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	e006      	b.n	80006f4 <FlashErase+0x60>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 80006e6:	7bba      	ldrb	r2, [r7, #14]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f9c3 	bl	8000a78 <FlashEraseSectors>
 80006f2:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	081e0000 	.word	0x081e0000

08000700 <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <FlashWriteChecksum+0x84>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000712:	d101      	bne.n	8000718 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8000714:	2301      	movs	r3, #1
 8000716:	e031      	b.n	800077c <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <FlashWriteChecksum+0x88>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <FlashWriteChecksum+0x8c>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <FlashWriteChecksum+0x90>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <FlashWriteChecksum+0x94>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <FlashWriteChecksum+0x98>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <FlashWriteChecksum+0x9c>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <FlashWriteChecksum+0xa0>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4413      	add	r3, r2
 800075c:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	43db      	mvns	r3, r3
 8000762:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3301      	adds	r3, #1
 8000768:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <FlashWriteChecksum+0xa4>)
 800076c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000770:	1d3a      	adds	r2, r7, #4
 8000772:	2104      	movs	r1, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff41 	bl	80005fc <FlashWrite>
 800077a:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000284 	.word	0x20000284
 8000788:	20000288 	.word	0x20000288
 800078c:	2000028c 	.word	0x2000028c
 8000790:	20000290 	.word	0x20000290
 8000794:	20000294 	.word	0x20000294
 8000798:	20000298 	.word	0x20000298
 800079c:	2000029c 	.word	0x2000029c
 80007a0:	200002a0 	.word	0x200002a0
 80007a4:	08010000 	.word	0x08010000

080007a8 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <FlashVerifyChecksum+0x84>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <FlashVerifyChecksum+0x84>)
 80007be:	3304      	adds	r3, #4
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <FlashVerifyChecksum+0x84>)
 80007ca:	3308      	adds	r3, #8
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <FlashVerifyChecksum+0x84>)
 80007d6:	330c      	adds	r3, #12
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <FlashVerifyChecksum+0x84>)
 80007e2:	3310      	adds	r3, #16
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <FlashVerifyChecksum+0x84>)
 80007ee:	3314      	adds	r3, #20
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <FlashVerifyChecksum+0x84>)
 80007fa:	3318      	adds	r3, #24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <FlashVerifyChecksum+0x84>)
 8000806:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 800081c:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	08010000 	.word	0x08010000

08000830 <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <FlashDone+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800083c:	d007      	beq.n	800084e <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <FlashDone+0x40>)
 8000840:	f000 f8dc 	bl	80009fc <FlashWriteBlock>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <FlashDone+0x1e>
    {
      return BLT_FALSE;
 800084a:	2300      	movs	r3, #0
 800084c:	e00d      	b.n	800086a <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <FlashDone+0x44>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000856:	d007      	beq.n	8000868 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <FlashDone+0x44>)
 800085a:	f000 f8cf 	bl	80009fc <FlashWriteBlock>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <FlashDone+0x38>
    {
      return BLT_FALSE;
 8000864:	2300      	movs	r3, #0
 8000866:	e000      	b.n	800086a <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8000868:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000284 	.word	0x20000284
 8000874:	20000080 	.word	0x20000080

08000878 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	08010000 	.word	0x08010000

0800088c <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e012      	b.n	80008ca <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d101      	bne.n	80008b2 <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00b      	b.n	80008ca <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3304      	adds	r3, #4
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	6839      	ldr	r1, [r7, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe66 	bl	8000594 <CpuMemCopy>
  return BLT_TRUE;
 80008c8:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <FlashSwitchBlock+0x58>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d102      	bne.n	80008ec <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <FlashSwitchBlock+0x5c>)
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	e010      	b.n	800090e <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <FlashSwitchBlock+0x60>)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d104      	bne.n	80008fe <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <FlashSwitchBlock+0x58>)
 80008f6:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <FlashSwitchBlock+0x60>)
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	e007      	b.n	800090e <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 f87c 	bl	80009fc <FlashWriteBlock>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d101      	bne.n	800090e <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 800090a:	2300      	movs	r3, #0
 800090c:	e009      	b.n	8000922 <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 800090e:	6839      	ldr	r1, [r7, #0]
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ffbb 	bl	800088c <FlashInitBlock>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 800091c:	2300      	movs	r3, #0
 800091e:	e000      	b.n	8000922 <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8000920:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000284 	.word	0x20000284
 8000930:	20000080 	.word	0x20000080
 8000934:	08010000 	.word	0x08010000

08000938 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800095a:	d108      	bne.n	800096e <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 800095c:	6979      	ldr	r1, [r7, #20]
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f7ff ff94 	bl	800088c <FlashInitBlock>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 800096a:	2300      	movs	r3, #0
 800096c:	e042      	b.n	80009f4 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	429a      	cmp	r2, r3
 8000976:	d009      	beq.n	800098c <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 8000978:	6979      	ldr	r1, [r7, #20]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff ffaa 	bl	80008d4 <FlashSwitchBlock>
 8000980:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8000988:	2300      	movs	r3, #0
 800098a:	e033      	b.n	80009f4 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	3304      	adds	r3, #4
 800099a:	61fb      	str	r3, [r7, #28]
  src = data;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 80009a0:	f000 fbb9 	bl	8001116 <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	3204      	adds	r2, #4
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009b0:	d30f      	bcc.n	80009d2 <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009b8:	4619      	mov	r1, r3
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ff8a 	bl	80008d4 <FlashSwitchBlock>
 80009c0:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e013      	b.n	80009f4 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3304      	adds	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3301      	adds	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
    src++;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3301      	adds	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1d6      	bne.n	80009a0 <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 80009f2:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 80009f4:	4618      	mov	r0, r3
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8000a08:	f004 f820 	bl	8004a4c <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e028      	b.n	8000a64 <FlashWriteBlock+0x68>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	3304      	adds	r3, #4
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8000a2c:	f000 fb73 	bl	8001116 <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	f04f 0400 	mov.w	r4, #0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4623      	mov	r3, r4
 8000a3a:	68f9      	ldr	r1, [r7, #12]
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f003 ffb1 	bl	80049a4 <HAL_FLASH_Program>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <FlashWriteBlock+0x52>
    {
      result = BLT_FALSE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	74fb      	strb	r3, [r7, #19]
      break;
 8000a4c:	e00d      	b.n	8000a6a <FlashWriteBlock+0x6e>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d002      	beq.n	8000a5e <FlashWriteBlock+0x62>
    {
      result = BLT_FALSE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	74fb      	strb	r3, [r7, #19]
      break;
 8000a5c:	e005      	b.n	8000a6a <FlashWriteBlock+0x6e>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2b7f      	cmp	r3, #127	; 0x7f
 8000a68:	d9d3      	bls.n	8000a12 <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8000a6a:	f004 f811 	bl	8004a90 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 8000a6e:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 8000a70:	4618      	mov	r0, r3
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}

08000a78 <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d902      	bls.n	8000aa0 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d303      	bcc.n	8000ab0 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 8000aa8:	2217      	movs	r2, #23
  if ((first_sector < flashLayout[0].sector_num) || \
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d902      	bls.n	8000ab6 <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 8000ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d12b      	bne.n	8000b16 <FlashEraseSectors+0x9e>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 8000aca:	f003 ffbf 	bl	8004a4c <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ad4:	e018      	b.n	8000b08 <FlashEraseSectors+0x90>
    {
      /* keep the watchdog happy */
      CopService();
 8000ad6:	f000 fb1e 	bl	8001116 <CopService>
      /* set the sector to erase */
      eraseInitStruct.Sector = sectorIdx;
 8000ada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ade:	61bb      	str	r3, [r7, #24]
      /* submit the sector erase request */
      if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8000ae0:	f107 020c 	add.w	r2, r7, #12
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 f91e 	bl	8004d2c <HAL_FLASHEx_Erase>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <FlashEraseSectors+0x86>
      {
        /* could not perform erase operation */
        result = BLT_FALSE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        /* error detected so don't bother continuing with the loop */
        break;
 8000afc:	e009      	b.n	8000b12 <FlashEraseSectors+0x9a>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000afe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b02:	3301      	adds	r3, #1
 8000b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d9e1      	bls.n	8000ad6 <FlashEraseSectors+0x5e>
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 8000b12:	f003 ffbd 	bl	8004a90 <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 8000b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
} /*** end of FlashEraseSectors ***/
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 8000b2c:	23ff      	movs	r3, #255	; 0xff
 8000b2e:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	73bb      	strb	r3, [r7, #14]
 8000b34:	e02f      	b.n	8000b96 <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 8000b36:	f000 faee 	bl	8001116 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000b3a:	7bba      	ldrb	r2, [r7, #14]
 8000b3c:	491a      	ldr	r1, [pc, #104]	; (8000ba8 <FlashGetSector+0x84>)
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d31f      	bcc.n	8000b90 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 8000b50:	7bba      	ldrb	r2, [r7, #14]
 8000b52:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <FlashGetSector+0x84>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 8000b60:	7bba      	ldrb	r2, [r7, #14]
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <FlashGetSector+0x84>)
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4403      	add	r3, r0
 8000b6e:	3304      	adds	r3, #4
 8000b70:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 8000b72:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d20a      	bcs.n	8000b90 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8000b7a:	7bba      	ldrb	r2, [r7, #14]
 8000b7c:	490a      	ldr	r1, [pc, #40]	; (8000ba8 <FlashGetSector+0x84>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	440b      	add	r3, r1
 8000b88:	3308      	adds	r3, #8
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 8000b8e:	e005      	b.n	8000b9c <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	3301      	adds	r3, #1
 8000b94:	73bb      	strb	r3, [r7, #14]
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	2b13      	cmp	r3, #19
 8000b9a:	d9cc      	bls.n	8000b36 <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08007320 	.word	0x08007320

08000bac <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8000bb0:	f7ff fd10 	bl	80005d4 <FlashInit>
} /*** end of NvmInit ***/
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fd17 	bl	80005fc <FlashWrite>
 8000bce:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fd55 	bl	8000694 <FlashErase>
 8000bea:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8000bf8:	f7ff fdd6 	bl	80007a8 <FlashVerifyChecksum>
 8000bfc:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 8000c06:	f7ff fe37 	bl	8000878 <FlashGetUserProgBaseAddress>
 8000c0a:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8000c14:	f7ff fd74 	bl	8000700 <FlashWriteChecksum>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <NvmDone+0x12>
  {
    return BLT_FALSE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e002      	b.n	8000c28 <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8000c22:	f7ff fe05 	bl	8000830 <FlashDone>
 8000c26:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	2b20      	cmp	r3, #32
 8000c5e:	bf0c      	ite	eq
 8000c60:	2301      	moveq	r3, #1
 8000c62:	2300      	movne	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	2b80      	cmp	r3, #128	; 0x80
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	b2db      	uxtb	r3, r3
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000cbe:	78fa      	ldrb	r2, [r7, #3]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	605a      	str	r2, [r3, #4]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <Rs232Init>:
** \brief     Initializes the RS232 communication interface.
** \return    none.
**
****************************************************************************************/
void Rs232Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
            (BOOT_COM_RS232_CHANNEL_INDEX == 3) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 4) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 5));

  /* configure UART peripheral */
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8000cd6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cda:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  /* initialize the UART peripheral */
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <Rs232Init+0x3c>)
 8000cfa:	f006 f98d 	bl	8007018 <LL_USART_Init>
  LL_USART_Enable(USART_CHANNEL);
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <Rs232Init+0x3c>)
 8000d00:	f7ff ff94 	bl	8000c2c <LL_USART_Enable>
} /*** end of Rs232Init ***/
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40011400 	.word	0x40011400

08000d10 <Rs232TransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitPacket(blt_int8u *data, blt_int8u len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b40      	cmp	r3, #64	; 0x40
 8000d20:	d903      	bls.n	8000d2a <Rs232TransmitPacket+0x1a>
 8000d22:	2179      	movs	r1, #121	; 0x79
 8000d24:	480f      	ldr	r0, [pc, #60]	; (8000d64 <Rs232TransmitPacket+0x54>)
 8000d26:	f000 f910 	bl	8000f4a <AssertFailure>

  /* first transmit the length of the packet */
  Rs232TransmitByte(len);
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f89b 	bl	8000e68 <Rs232TransmitByte>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	81fb      	strh	r3, [r7, #14]
 8000d36:	e00b      	b.n	8000d50 <Rs232TransmitPacket+0x40>
  {
    /* keep the watchdog happy */
    CopService();
 8000d38:	f000 f9ed 	bl	8001116 <CopService>
    /* write byte */
    Rs232TransmitByte(data[data_index]);
 8000d3c:	89fb      	ldrh	r3, [r7, #14]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f88f 	bl	8000e68 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	81fb      	strh	r3, [r7, #14]
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	89fa      	ldrh	r2, [r7, #14]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d3ee      	bcc.n	8000d38 <Rs232TransmitPacket+0x28>
  }
} /*** end of Rs232TransmitPacket ***/
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08007268 	.word	0x08007268

08000d68 <Rs232ReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool Rs232ReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;
  static blt_int32u xcpCtoRxStartTime = 0;

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <Rs232ReceivePacket+0xb8>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d119      	bne.n	8000dae <Rs232ReceivePacket+0x46>
  {
    /* store the message length when received */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8000d7a:	482a      	ldr	r0, [pc, #168]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000d7c:	f000 f85a 	bl	8000e34 <Rs232ReceiveByte>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d146      	bne.n	8000e14 <Rs232ReceivePacket+0xac>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d042      	beq.n	8000e14 <Rs232ReceivePacket+0xac>
           (xcpCtoReqPacket[0] <= BOOT_COM_RS232_RX_MAX_DATA) )
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 8000d92:	2b40      	cmp	r3, #64	; 0x40
 8000d94:	d83e      	bhi.n	8000e14 <Rs232ReceivePacket+0xac>
      {
        /* store the start time */
        xcpCtoRxStartTime = TimerGet();
 8000d96:	f000 f8c7 	bl	8000f28 <TimerGet>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <Rs232ReceivePacket+0xc0>)
 8000d9e:	601a      	str	r2, [r3, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <Rs232ReceivePacket+0xb8>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e032      	b.n	8000e14 <Rs232ReceivePacket+0xac>
    }
  }
  else
  {
    /* store the next packet byte */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000db6:	4413      	add	r3, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f83b 	bl	8000e34 <Rs232ReceiveByte>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d11c      	bne.n	8000dfe <Rs232ReceivePacket+0x96>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000dce:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d11b      	bne.n	8000e14 <Rs232ReceivePacket+0xac>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	4914      	ldr	r1, [pc, #80]	; (8000e30 <Rs232ReceivePacket+0xc8>)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	f7ff fbd4 	bl	8000594 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <Rs232ReceivePacket+0xb8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00b      	b.n	8000e16 <Rs232ReceivePacket+0xae>
      }
    }
    else
    {
      /* check packet reception timeout */
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8000dfe:	f000 f893 	bl	8000f28 <TimerGet>
 8000e02:	4602      	mov	r2, r0
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <Rs232ReceivePacket+0xc0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3364      	adds	r3, #100	; 0x64
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d902      	bls.n	8000e14 <Rs232ReceivePacket+0xac>
      {
        /* cancel cto packet reception due to timeout. note that that automaticaly
         * discards the already received packet bytes, allowing the host to retry.
         */
        xcpCtoRxInProgress = BLT_FALSE;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <Rs232ReceivePacket+0xb8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 8000e14:	2300      	movs	r3, #0
} /*** end of Rs232ReceivePacket ***/
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000488 	.word	0x20000488
 8000e24:	2000048c 	.word	0x2000048c
 8000e28:	200004d0 	.word	0x200004d0
 8000e2c:	200004d4 	.word	0x200004d4
 8000e30:	2000048d 	.word	0x2000048d

08000e34 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <Rs232ReceiveByte+0x30>)
 8000e3e:	f7ff ff05 	bl	8000c4c <LL_USART_IsActiveFlag_RXNE>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <Rs232ReceiveByte+0x26>
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8000e48:	4806      	ldr	r0, [pc, #24]	; (8000e64 <Rs232ReceiveByte+0x30>)
 8000e4a:	f7ff ff25 	bl	8000c98 <LL_USART_ReceiveData8>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	701a      	strb	r2, [r3, #0]
    /* all done */
    return BLT_TRUE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <Rs232ReceiveByte+0x28>
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8000e5a:	2300      	movs	r3, #0
} /*** end of Rs232ReceiveByte ***/
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40011400 	.word	0x40011400

08000e68 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4619      	mov	r1, r3
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <Rs232TransmitByte+0x48>)
 8000e78:	f7ff ff1b 	bl	8000cb2 <LL_USART_TransmitData8>
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 8000e7c:	f000 f854 	bl	8000f28 <TimerGet>
 8000e80:	4603      	mov	r3, r0
 8000e82:	330a      	adds	r3, #10
 8000e84:	60fb      	str	r3, [r7, #12]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8000e86:	e007      	b.n	8000e98 <Rs232TransmitByte+0x30>
  {
    /* keep the watchdog happy */
    CopService();
 8000e88:	f000 f945 	bl	8001116 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8000e8c:	f000 f84c 	bl	8000f28 <TimerGet>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d306      	bcc.n	8000ea6 <Rs232TransmitByte+0x3e>
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <Rs232TransmitByte+0x48>)
 8000e9a:	f7ff feea 	bl	8000c72 <LL_USART_IsActiveFlag_TXE>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f1      	beq.n	8000e88 <Rs232TransmitByte+0x20>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 8000ea4:	e000      	b.n	8000ea8 <Rs232TransmitByte+0x40>
      break;
 8000ea6:	bf00      	nop
} /*** end of Rs232TransmitByte ***/
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40011400 	.word	0x40011400

08000eb4 <TimerInit>:
** \brief     Initializes the polling based millisecond timer driver.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Reset the timer configuration. */
  TimerReset();
 8000eb8:	f000 f814 	bl	8000ee4 <TimerReset>

  /* Configure the systick frequency as a 1 ms event generator. */
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <TimerInit+0x24>)
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <TimerInit+0x28>)
 8000ec0:	605a      	str	r2, [r3, #4]
  /* Reset the current counter value. */
  SysTick->VAL = 0;
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <TimerInit+0x24>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  /* Select core clock as source and enable the timer. */
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <TimerInit+0x24>)
 8000eca:	2205      	movs	r2, #5
 8000ecc:	601a      	str	r2, [r3, #0]
  /* Reset the millisecond counter value. */
  millisecond_counter = 0;
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <TimerInit+0x2c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000e010 	.word	0xe000e010
 8000edc:	00034bbf 	.word	0x00034bbf
 8000ee0:	200004d8 	.word	0x200004d8

08000ee4 <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* Set the systick's status and control register back into the default reset value. */
  SysTick->CTRL = 0;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <TimerReset+0x14>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
} /* end of TimerReset */
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <TimerUpdate+0x24>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d004      	beq.n	8000f16 <TimerUpdate+0x1a>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <TimerUpdate+0x28>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <TimerUpdate+0x28>)
 8000f14:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e010 	.word	0xe000e010
 8000f24:	200004d8 	.word	0x200004d8

08000f28 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8000f2c:	f7ff ffe6 	bl	8000efc <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 8000f30:	4b01      	ldr	r3, [pc, #4]	; (8000f38 <TimerGet+0x10>)
 8000f32:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200004d8 	.word	0x200004d8

08000f3c <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8000f40:	f7ff fff2 	bl	8000f28 <TimerGet>
 8000f44:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8000f54:	f000 f8df 	bl	8001116 <CopService>
 8000f58:	e7fc      	b.n	8000f54 <AssertFailure+0xa>

08000f5a <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE > 0)
  /* initialize application's backdoor functionality */
  BackDoorInitHook();
 8000f5e:	f000 fd0d 	bl	800197c <BackDoorInitHook>

  /* attempt to start the user program when no backdoor entry is requested */
  if (BackDoorEntryHook() == BLT_FALSE)
 8000f62:	f000 fd12 	bl	800198a <BackDoorEntryHook>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <BackDoorInit+0x16>
  {
    /* this function does not return if a valid user program is present */
    CpuStartUserProgram();
 8000f6c:	f7ff fad8 	bl	8000520 <CpuStartUserProgram>
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
  BackDoorRestartTimer();
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 8000f70:	f000 f802 	bl	8000f78 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
   		CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 8000f8a:	f7ff fac3 	bl	8000514 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8000f8e:	f000 f8bc 	bl	800110a <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8000f92:	f7ff ff8f 	bl	8000eb4 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8000f96:	f7ff fe09 	bl	8000bac <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000f9a:	f000 f811 	bl	8000fc0 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8000f9e:	f7ff ffdc 	bl	8000f5a <BackDoorInit>
} /*** end of BootInit ***/
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 8000faa:	f000 f8b4 	bl	8001116 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8000fae:	f7ff ffa5 	bl	8000efc <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8000fb2:	f000 f813 	bl	8000fdc <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8000fb6:	f7ff ffdf 	bl	8000f78 <BackDoorCheck>
} /*** end of BootTask ***/
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 8000fc4:	f000 f8ae 	bl	8001124 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 8000fc8:	f7ff fe82 	bl	8000cd0 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <ComInit+0x18>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000

08000fdc <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <ComTask+0x30>)
 8000fe8:	f7ff febe 	bl	8000d68 <Rs232ReceivePacket>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d107      	bne.n	8001002 <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_RS232;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <ComTask+0x34>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <ComTask+0x30>)
 8000ffe:	f000 f8bd 	bl	800117c <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004dc 	.word	0x200004dc
 8001010:	20000000 	.word	0x20000000

08001014 <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <ComTransmitPacket+0x2c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <ComTransmitPacket+0x20>
  {
    Rs232TransmitPacket(data, (blt_int8u)len);
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4619      	mov	r1, r3
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fe66 	bl	8000d10 <Rs232TransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8001044:	f000 f88c 	bl	8001160 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000000 	.word	0x20000000

08001054 <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <ComGetActiveInterfaceMaxRxLen+0x50>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d816      	bhi.n	8001090 <ComGetActiveInterfaceMaxRxLen+0x3c>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <ComGetActiveInterfaceMaxRxLen+0x14>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	08001079 	.word	0x08001079
 800106c:	0800107f 	.word	0x0800107f
 8001070:	08001085 	.word	0x08001085
 8001074:	0800108b 	.word	0x0800108b
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	80fb      	strh	r3, [r7, #6]
      break;
 800107c:	e00b      	b.n	8001096 <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 800107e:	2300      	movs	r3, #0
 8001080:	80fb      	strh	r3, [r7, #6]
      break;
 8001082:	e008      	b.n	8001096 <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8001084:	2300      	movs	r3, #0
 8001086:	80fb      	strh	r3, [r7, #6]
      break;
 8001088:	e005      	b.n	8001096 <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 800108a:	2340      	movs	r3, #64	; 0x40
 800108c:	80fb      	strh	r3, [r7, #6]
      break;
 800108e:	e002      	b.n	8001096 <ComGetActiveInterfaceMaxRxLen+0x42>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 8001090:	2340      	movs	r3, #64	; 0x40
 8001092:	80fb      	strh	r3, [r7, #6]
      break;
 8001094:	bf00      	nop
  }

  return result;
 8001096:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000000 	.word	0x20000000

080010a8 <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <ComGetActiveInterfaceMaxTxLen+0x50>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d816      	bhi.n	80010e4 <ComGetActiveInterfaceMaxTxLen+0x3c>
 80010b6:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <ComGetActiveInterfaceMaxTxLen+0x14>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	080010d3 	.word	0x080010d3
 80010c4:	080010d9 	.word	0x080010d9
 80010c8:	080010df 	.word	0x080010df
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	80fb      	strh	r3, [r7, #6]
      break;
 80010d0:	e00b      	b.n	80010ea <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 80010d2:	2300      	movs	r3, #0
 80010d4:	80fb      	strh	r3, [r7, #6]
      break;
 80010d6:	e008      	b.n	80010ea <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 80010d8:	2300      	movs	r3, #0
 80010da:	80fb      	strh	r3, [r7, #6]
      break;
 80010dc:	e005      	b.n	80010ea <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 80010de:	2340      	movs	r3, #64	; 0x40
 80010e0:	80fb      	strh	r3, [r7, #6]
      break;
 80010e2:	e002      	b.n	80010ea <ComGetActiveInterfaceMaxTxLen+0x42>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	80fb      	strh	r3, [r7, #6]
      break;
 80010e8:	bf00      	nop
  }

  return result;
 80010ea:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20000000 	.word	0x20000000

080010fc <ComDeferredInit>:
**            a request.
** \return    none
**
****************************************************************************************/
void ComDeferredInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
   * communication interfaces are initialized. since a deferred initialization was now
   * performed, the backdoor timer should be restarted.
   */
  BackDoorRestartTimer();
#endif
} /*** end of ComDeferredInit ***/
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 800110e:	f000 fc28 	bl	8001962 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}

08001116 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 800111a:	f000 fc29 	bl	8001970 <CopServiceHook>
#endif
} /*** end of CopService ***/
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <XcpInit+0x38>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <XcpInit+0x38>)
 8001130:	2200      	movs	r2, #0
 8001132:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <XcpInit+0x38>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <XcpInit+0x38>)
 800113e:	2200      	movs	r2, #0
 8001140:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <XcpInit+0x38>)
 8001146:	2200      	movs	r2, #0
 8001148:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <XcpInit+0x38>)
 800114c:	2200      	movs	r2, #0
 800114e:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000520 	.word	0x20000520

08001160 <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <XcpPacketTransmitted+0x18>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000520 	.word	0x20000520

0800117c <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2bff      	cmp	r3, #255	; 0xff
 800118e:	d10f      	bne.n	80011b0 <XcpPacketReceived+0x34>
  {


	  /* process the connect command */
    XcpCmdConnect(data);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f9a1 	bl	80014d8 <XcpCmdConnect>
#if (Display ==1)
      //BSP_LCD_Clear(LCD_COLOR_BLACK);
   	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, "bootloader connected ...", CENTER_MODE);
 8001196:	f001 fa7d 	bl	8002694 <BSP_LCD_GetYSize>
 800119a:	4603      	mov	r3, r0
 800119c:	085b      	lsrs	r3, r3, #1
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3b1b      	subs	r3, #27
 80011a2:	b299      	uxth	r1, r3
 80011a4:	2301      	movs	r3, #1
 80011a6:	4a56      	ldr	r2, [pc, #344]	; (8001300 <XcpPacketReceived+0x184>)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 fb97 	bl	80028dc <BSP_LCD_DisplayStringAt>
 80011ae:	e089      	b.n	80012c4 <XcpPacketReceived+0x148>


#endif
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 80011b0:	4b54      	ldr	r3, [pc, #336]	; (8001304 <XcpPacketReceived+0x188>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	f040 809e 	bne.w	80012f6 <XcpPacketReceived+0x17a>
  {




	switch (data[0])
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2bf3      	cmp	r3, #243	; 0xf3
 80011c0:	d035      	beq.n	800122e <XcpPacketReceived+0xb2>
 80011c2:	2bf3      	cmp	r3, #243	; 0xf3
 80011c4:	dc11      	bgt.n	80011ea <XcpPacketReceived+0x6e>
 80011c6:	2bcf      	cmp	r3, #207	; 0xcf
 80011c8:	d070      	beq.n	80012ac <XcpPacketReceived+0x130>
 80011ca:	2bcf      	cmp	r3, #207	; 0xcf
 80011cc:	dc06      	bgt.n	80011dc <XcpPacketReceived+0x60>
 80011ce:	2bc9      	cmp	r3, #201	; 0xc9
 80011d0:	d041      	beq.n	8001256 <XcpPacketReceived+0xda>
 80011d2:	2bcc      	cmp	r3, #204	; 0xcc
 80011d4:	d06e      	beq.n	80012b4 <XcpPacketReceived+0x138>
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	d019      	beq.n	800120e <XcpPacketReceived+0x92>
 80011da:	e06f      	b.n	80012bc <XcpPacketReceived+0x140>
 80011dc:	2bd1      	cmp	r3, #209	; 0xd1
 80011de:	d046      	beq.n	800126e <XcpPacketReceived+0xf2>
 80011e0:	2bd1      	cmp	r3, #209	; 0xd1
 80011e2:	db3c      	blt.n	800125e <XcpPacketReceived+0xe2>
 80011e4:	2bd2      	cmp	r3, #210	; 0xd2
 80011e6:	d03e      	beq.n	8001266 <XcpPacketReceived+0xea>
 80011e8:	e068      	b.n	80012bc <XcpPacketReceived+0x140>
 80011ea:	2bfa      	cmp	r3, #250	; 0xfa
 80011ec:	d023      	beq.n	8001236 <XcpPacketReceived+0xba>
 80011ee:	2bfa      	cmp	r3, #250	; 0xfa
 80011f0:	dc06      	bgt.n	8001200 <XcpPacketReceived+0x84>
 80011f2:	2bf5      	cmp	r3, #245	; 0xf5
 80011f4:	d00f      	beq.n	8001216 <XcpPacketReceived+0x9a>
 80011f6:	2bf5      	cmp	r3, #245	; 0xf5
 80011f8:	db11      	blt.n	800121e <XcpPacketReceived+0xa2>
 80011fa:	2bf6      	cmp	r3, #246	; 0xf6
 80011fc:	d013      	beq.n	8001226 <XcpPacketReceived+0xaa>
 80011fe:	e05d      	b.n	80012bc <XcpPacketReceived+0x140>
 8001200:	2bfd      	cmp	r3, #253	; 0xfd
 8001202:	d020      	beq.n	8001246 <XcpPacketReceived+0xca>
 8001204:	2bfe      	cmp	r3, #254	; 0xfe
 8001206:	d022      	beq.n	800124e <XcpPacketReceived+0xd2>
 8001208:	2bfc      	cmp	r3, #252	; 0xfc
 800120a:	d018      	beq.n	800123e <XcpPacketReceived+0xc2>
 800120c:	e056      	b.n	80012bc <XcpPacketReceived+0x140>
    {
	#if (Display == 1)
		case PROGRESS:
			progress(data);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f890 	bl	8001334 <progress>
    	break;
 8001214:	e056      	b.n	80012c4 <XcpPacketReceived+0x148>
	#endif
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fa26 	bl	8001668 <XcpCmdUpload>
        break;
 800121c:	e052      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fa5e 	bl	80016e0 <XcpCmdShortUpload>
        break;
 8001224:	e04e      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fa06 	bl	8001638 <XcpCmdSetMta>
        break;
 800122c:	e04a      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fa96 	bl	8001760 <XcpCmdBuildCheckSum>
        break;
 8001234:	e046      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f9d8 	bl	80015ec <XcpCmdGetId>
        break;
 800123c:	e042      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f9c8 	bl	80015d4 <XcpCmdSynch>
        break;
 8001244:	e03e      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f9a0 	bl	800158c <XcpCmdGetStatus>
        break;
 800124c:	e03a      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f986 	bl	8001560 <XcpCmdDisconnect>
        break;
 8001254:	e036      	b.n	80012c4 <XcpPacketReceived+0x148>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 face 	bl	80017f8 <XcpCmdProgramMax>
        break;
 800125c:	e032      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 faf8 	bl	8001854 <XcpCmdProgram>
        break;
 8001264:	e02e      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 faa0 	bl	80017ac <XcpCmdProgramStart>
        break;
 800126c:	e02a      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM_CLEAR:
	#if (Display == 1)
    	  if(clear == 0){
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <XcpPacketReceived+0x18c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d116      	bne.n	80012a4 <XcpPacketReceived+0x128>
        	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001276:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800127a:	f001 fac3 	bl	8002804 <BSP_LCD_Clear>
        	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800127e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001282:	f001 fabf 	bl	8002804 <BSP_LCD_Clear>
        	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, "clearing memory ...", CENTER_MODE);
 8001286:	f001 fa05 	bl	8002694 <BSP_LCD_GetYSize>
 800128a:	4603      	mov	r3, r0
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	b29b      	uxth	r3, r3
 8001290:	3b1b      	subs	r3, #27
 8001292:	b299      	uxth	r1, r3
 8001294:	2301      	movs	r3, #1
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <XcpPacketReceived+0x190>)
 8001298:	2000      	movs	r0, #0
 800129a:	f001 fb1f 	bl	80028dc <BSP_LCD_DisplayStringAt>
        	  clear = 1;
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <XcpPacketReceived+0x18c>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
    	  }
	#endif
        XcpCmdProgramClear(data);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fb1d 	bl	80018e4 <XcpCmdProgramClear>
        break;
 80012aa:	e00b      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fb39 	bl	8001924 <XcpCmdProgramReset>
        break;
 80012b2:	e007      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fb49 	bl	800194c <XcpCmdProgramPrepare>
        break;
 80012ba:	e003      	b.n	80012c4 <XcpPacketReceived+0x148>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 80012bc:	2020      	movs	r0, #32
 80012be:	f000 f8f3 	bl	80014a8 <XcpSetCtoError>
        break;
 80012c2:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <XcpPacketReceived+0x188>)
 80012c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d102      	bne.n	80012d4 <XcpPacketReceived+0x158>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80012ce:	2010      	movs	r0, #16
 80012d0:	f000 f8ea 	bl	80014a8 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <XcpPacketReceived+0x188>)
 80012d6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80012da:	2b00      	cmp	r3, #0
 80012dc:	dd0c      	ble.n	80012f8 <XcpPacketReceived+0x17c>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <XcpPacketReceived+0x188>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <XcpPacketReceived+0x188>)
 80012e8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80012ec:	4619      	mov	r1, r3
 80012ee:	4808      	ldr	r0, [pc, #32]	; (8001310 <XcpPacketReceived+0x194>)
 80012f0:	f000 f810 	bl	8001314 <XcpTransmitPacket>
 80012f4:	e000      	b.n	80012f8 <XcpPacketReceived+0x17c>
    return;
 80012f6:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	080072d4 	.word	0x080072d4
 8001304:	20000520 	.word	0x20000520
 8001308:	2000051c 	.word	0x2000051c
 800130c:	080072f0 	.word	0x080072f0
 8001310:	20000523 	.word	0x20000523

08001314 <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fe7d 	bl	8001024 <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <progress>:

#if (Display ==1 )
static void progress(blt_int8u *data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	if(data[1] == 0){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3301      	adds	r3, #1
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d113      	bne.n	800136e <progress+0x3a>
		BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001346:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800134a:	f001 fa5b 	bl	8002804 <BSP_LCD_Clear>
		BSP_LCD_Clear(LCD_COLOR_BLACK);
 800134e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001352:	f001 fa57 	bl	8002804 <BSP_LCD_Clear>
	    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"programming device", CENTER_MODE);
 8001356:	f001 f99d 	bl	8002694 <BSP_LCD_GetYSize>
 800135a:	4603      	mov	r3, r0
 800135c:	085b      	lsrs	r3, r3, #1
 800135e:	b29b      	uxth	r3, r3
 8001360:	3b1b      	subs	r3, #27
 8001362:	b299      	uxth	r1, r3
 8001364:	2301      	movs	r3, #1
 8001366:	4a38      	ldr	r2, [pc, #224]	; (8001448 <progress+0x114>)
 8001368:	2000      	movs	r0, #0
 800136a:	f001 fab7 	bl	80028dc <BSP_LCD_DisplayStringAt>
	}

	char snum[5];
	itoa(data[1], snum, 10);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	220a      	movs	r2, #10
 800137c:	4619      	mov	r1, r3
 800137e:	f005 ff19 	bl	80071b4 <itoa>

	BSP_LCD_DisplayStringAt(0, 320, snum, CENTER_MODE);
 8001382:	f107 0208 	add.w	r2, r7, #8
 8001386:	2301      	movs	r3, #1
 8001388:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800138c:	2000      	movs	r0, #0
 800138e:	f001 faa5 	bl	80028dc <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAt(0, 320, "%", CENTER_MODE);


	BSP_LCD_DrawHLine(200, 298, 4*data[1]);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3301      	adds	r3, #1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	b29b      	uxth	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80013a4:	20c8      	movs	r0, #200	; 0xc8
 80013a6:	f001 fb5d 	bl	8002a64 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 299, 4*data[1]);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	f240 112b 	movw	r1, #299	; 0x12b
 80013bc:	20c8      	movs	r0, #200	; 0xc8
 80013be:	f001 fb51 	bl	8002a64 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 300, 4*data[1]);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3301      	adds	r3, #1
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013d4:	20c8      	movs	r0, #200	; 0xc8
 80013d6:	f001 fb45 	bl	8002a64 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 301, 4*data[1]);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	f240 112d 	movw	r1, #301	; 0x12d
 80013ec:	20c8      	movs	r0, #200	; 0xc8
 80013ee:	f001 fb39 	bl	8002a64 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 302, 4*data[1]);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8001404:	20c8      	movs	r0, #200	; 0xc8
 8001406:	f001 fb2d 	bl	8002a64 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 303, 4*data[1]);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	b29b      	uxth	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	f240 112f 	movw	r1, #303	; 0x12f
 800141c:	20c8      	movs	r0, #200	; 0xc8
 800141e:	f001 fb21 	bl	8002a64 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 304, 4*data[1]);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3301      	adds	r3, #1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	b29b      	uxth	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001434:	20c8      	movs	r0, #200	; 0xc8
 8001436:	f001 fb15 	bl	8002a64 <BSP_LCD_DrawHLine>
	xcpInfo.ctoData[0] = XCP_PID_RES;
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <progress+0x118>)
 800143c:	22ff      	movs	r2, #255	; 0xff
 800143e:	70da      	strb	r2, [r3, #3]
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	08007304 	.word	0x08007304
 800144c:	20000520 	.word	0x20000520

08001450 <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 8001460:	e009      	b.n	8001476 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	4413      	add	r3, r2
 800146a:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3301      	adds	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 8001472:	f7ff fe50 	bl	8001116 <CopService>
  while (length-- > 0)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	60ba      	str	r2, [r7, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 8001480:	7dfa      	ldrb	r2, [r7, #23]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 8001486:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <XcpProtectResources+0x14>)
 8001496:	2200      	movs	r2, #0
 8001498:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20000520 	.word	0x20000520

080014a8 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <XcpSetCtoError+0x2c>)
 80014b4:	22fe      	movs	r2, #254	; 0xfe
 80014b6:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <XcpSetCtoError+0x2c>)
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	7113      	strb	r3, [r2, #4]
  xcpInfo.ctoLen = 2;
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <XcpSetCtoError+0x2c>)
 80014c0:	2202      	movs	r2, #2
 80014c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000520 	.word	0x20000520

080014d8 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 80014e0:	f7ff ffd6 	bl	8001490 <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <XcpCmdConnect+0x84>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <XcpCmdConnect+0x84>)
 80014ec:	22ff      	movs	r2, #255	; 0xff
 80014ee:	70da      	strb	r2, [r3, #3]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <XcpCmdConnect+0x84>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	711a      	strb	r2, [r3, #4]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <XcpCmdConnect+0x84>)
 80014f8:	791b      	ldrb	r3, [r3, #4]
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <XcpCmdConnect+0x84>)
 8001502:	711a      	strb	r2, [r3, #4]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <XcpCmdConnect+0x84>)
 8001506:	2200      	movs	r2, #0
 8001508:	715a      	strb	r2, [r3, #5]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <XcpCmdConnect+0x84>)
 800150c:	795a      	ldrb	r2, [r3, #5]
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <XcpCmdConnect+0x84>)
 8001510:	715a      	strb	r2, [r3, #5]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001512:	f7ff fd9f 	bl	8001054 <ComGetActiveInterfaceMaxRxLen>
 8001516:	4603      	mov	r3, r0
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <XcpCmdConnect+0x84>)
 800151c:	719a      	strb	r2, [r3, #6]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 800151e:	f7ff fdc3 	bl	80010a8 <ComGetActiveInterfaceMaxTxLen>
 8001522:	4603      	mov	r3, r0
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <XcpCmdConnect+0x84>)
 8001528:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 800152a:	f7ff fdbd 	bl	80010a8 <ComGetActiveInterfaceMaxTxLen>
 800152e:	4603      	mov	r3, r0
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b29b      	uxth	r3, r3
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <XcpCmdConnect+0x84>)
 8001538:	721a      	strb	r2, [r3, #8]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <XcpCmdConnect+0x84>)
 800153c:	2201      	movs	r2, #1
 800153e:	725a      	strb	r2, [r3, #9]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <XcpCmdConnect+0x84>)
 8001542:	2201      	movs	r2, #1
 8001544:	729a      	strb	r2, [r3, #10]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <XcpCmdConnect+0x84>)
 8001548:	2208      	movs	r2, #8
 800154a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 800154e:	f7ff fb2d 	bl	8000bac <NvmInit>
} /*** end of XcpCmdConnect ***/
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000520 	.word	0x20000520

08001560 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <XcpCmdDisconnect+0x28>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]

  /* enable resource protection */
  XcpProtectResources();
 800156e:	f7ff ff8f 	bl	8001490 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <XcpCmdDisconnect+0x28>)
 8001574:	22ff      	movs	r2, #255	; 0xff
 8001576:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <XcpCmdDisconnect+0x28>)
 800157a:	2201      	movs	r2, #1
 800157c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000520 	.word	0x20000520

0800158c <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <XcpCmdGetStatus+0x44>)
 8001596:	22ff      	movs	r2, #255	; 0xff
 8001598:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <XcpCmdGetStatus+0x44>)
 800159c:	2200      	movs	r2, #0
 800159e:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <XcpCmdGetStatus+0x44>)
 80015a2:	785a      	ldrb	r2, [r3, #1]
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <XcpCmdGetStatus+0x44>)
 80015a6:	715a      	strb	r2, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <XcpCmdGetStatus+0x44>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <XcpCmdGetStatus+0x44>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <XcpCmdGetStatus+0x44>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <XcpCmdGetStatus+0x44>)
 80015bc:	2206      	movs	r2, #6
 80015be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000520 	.word	0x20000520

080015d4 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff63 	bl	80014a8 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <XcpCmdGetId+0x40>)
 80015f6:	22ff      	movs	r2, #255	; 0xff
 80015f8:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80015fa:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <XcpCmdGetId+0x44>)
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <XcpCmdGetId+0x40>)
 80015fe:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <XcpCmdGetId+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <XcpCmdGetId+0x40>)
 8001608:	2200      	movs	r2, #0
 800160a:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <XcpCmdGetId+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <XcpCmdGetId+0x48>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <XcpCmdGetId+0x40>)
 800161a:	2208      	movs	r2, #8
 800161c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	20000520 	.word	0x20000520
 8001630:	08007410 	.word	0x08007410
 8001634:	20000527 	.word	0x20000527

08001638 <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <XcpCmdSetMta+0x2c>)
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4a06      	ldr	r2, [pc, #24]	; (8001664 <XcpCmdSetMta+0x2c>)
 800164c:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <XcpCmdSetMta+0x2c>)
 8001650:	2201      	movs	r2, #1
 8001652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20000520 	.word	0x20000520

08001668 <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3301      	adds	r3, #1
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461c      	mov	r4, r3
 8001678:	f7ff fcec 	bl	8001054 <ComGetActiveInterfaceMaxRxLen>
 800167c:	4603      	mov	r3, r0
 800167e:	3b01      	subs	r3, #1
 8001680:	429c      	cmp	r4, r3
 8001682:	dd03      	ble.n	800168c <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001684:	2022      	movs	r0, #34	; 0x22
 8001686:	f7ff ff0f 	bl	80014a8 <XcpSetCtoError>
    return;
 800168a:	e021      	b.n	80016d0 <XcpCmdUpload+0x68>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3301      	adds	r3, #1
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8001694:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <XcpCmdUpload+0x70>)
 8001696:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001698:	68b8      	ldr	r0, [r7, #8]
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <XcpCmdUpload+0x74>)
 800169c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169e:	89fa      	ldrh	r2, [r7, #14]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7fe ff77 	bl	8000594 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <XcpCmdUpload+0x74>)
 80016a8:	22ff      	movs	r2, #255	; 0xff
 80016aa:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <XcpCmdUpload+0x74>)
 80016ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	3201      	adds	r2, #1
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <XcpCmdUpload+0x74>)
 80016ba:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <XcpCmdUpload+0x74>)
 80016cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000524 	.word	0x20000524
 80016dc:	20000520 	.word	0x20000520

080016e0 <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3301      	adds	r3, #1
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461c      	mov	r4, r3
 80016f0:	f7ff fcb0 	bl	8001054 <ComGetActiveInterfaceMaxRxLen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	3b01      	subs	r3, #1
 80016f8:	429c      	cmp	r4, r3
 80016fa:	dd03      	ble.n	8001704 <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80016fc:	2022      	movs	r0, #34	; 0x22
 80016fe:	f7ff fed3 	bl	80014a8 <XcpSetCtoError>
    return;
 8001702:	e025      	b.n	8001750 <XcpCmdShortUpload+0x70>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <XcpCmdShortUpload+0x78>)
 800170a:	6493      	str	r3, [r2, #72]	; 0x48
  /* read out the length of the requested upload operation */
  len = data[1];
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <XcpCmdShortUpload+0x7c>)
 8001716:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8001718:	68b8      	ldr	r0, [r7, #8]
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <XcpCmdShortUpload+0x78>)
 800171c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171e:	89fa      	ldrh	r2, [r7, #14]
 8001720:	4619      	mov	r1, r3
 8001722:	f7fe ff37 	bl	8000594 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <XcpCmdShortUpload+0x78>)
 8001728:	22ff      	movs	r2, #255	; 0xff
 800172a:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <XcpCmdShortUpload+0x78>)
 800172e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	3201      	adds	r2, #1
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <XcpCmdShortUpload+0x78>)
 800173a:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3301      	adds	r3, #1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	3301      	adds	r3, #1
 8001746:	b29b      	uxth	r3, r3
 8001748:	b21a      	sxth	r2, r3
 800174a:	4b03      	ldr	r3, [pc, #12]	; (8001758 <XcpCmdShortUpload+0x78>)
 800174c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	20000520 	.word	0x20000520
 800175c:	20000524 	.word	0x20000524

08001760 <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <XcpCmdBuildCheckSum+0x44>)
 800176a:	22ff      	movs	r2, #255	; 0xff
 800176c:	70da      	strb	r2, [r3, #3]

  /* obtain checksum and checksum type */
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <XcpCmdBuildCheckSum+0x44>)
 8001770:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3304      	adds	r3, #4
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <XcpCmdBuildCheckSum+0x48>)
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fe68 	bl	8001450 <XcpComputeChecksum>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <XcpCmdBuildCheckSum+0x44>)
 8001786:	711a      	strb	r2, [r3, #4]
                                          (blt_int32u *)&xcpInfo.ctoData[4]);

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <XcpCmdBuildCheckSum+0x44>)
 800178a:	2200      	movs	r2, #0
 800178c:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <XcpCmdBuildCheckSum+0x44>)
 8001790:	2200      	movs	r2, #0
 8001792:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <XcpCmdBuildCheckSum+0x44>)
 8001796:	2208      	movs	r2, #8
 8001798:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000520 	.word	0x20000520
 80017a8:	20000527 	.word	0x20000527

080017ac <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <XcpCmdProgramStart+0x48>)
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	70da      	strb	r2, [r3, #3]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <XcpCmdProgramStart+0x48>)
 80017bc:	2200      	movs	r2, #0
 80017be:	711a      	strb	r2, [r3, #4]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <XcpCmdProgramStart+0x48>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	715a      	strb	r2, [r3, #5]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80017c6:	f7ff fc45 	bl	8001054 <ComGetActiveInterfaceMaxRxLen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <XcpCmdProgramStart+0x48>)
 80017d0:	719a      	strb	r2, [r3, #6]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <XcpCmdProgramStart+0x48>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <XcpCmdProgramStart+0x48>)
 80017da:	2200      	movs	r2, #0
 80017dc:	721a      	strb	r2, [r3, #8]
  xcpInfo.ctoData[6] = 0;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <XcpCmdProgramStart+0x48>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	725a      	strb	r2, [r3, #9]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <XcpCmdProgramStart+0x48>)
 80017e6:	2207      	movs	r2, #7
 80017e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000520 	.word	0x20000520

080017f8 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <XcpCmdProgramMax+0x58>)
 8001802:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001804:	f7ff fc26 	bl	8001054 <ComGetActiveInterfaceMaxRxLen>
 8001808:	4603      	mov	r3, r0
 800180a:	3b01      	subs	r3, #1
 800180c:	4619      	mov	r1, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3301      	adds	r3, #1
 8001812:	461a      	mov	r2, r3
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff f9cf 	bl	8000bb8 <NvmWrite>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d103      	bne.n	8001828 <XcpCmdProgramMax+0x30>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001820:	2031      	movs	r0, #49	; 0x31
 8001822:	f7ff fe41 	bl	80014a8 <XcpSetCtoError>
    return;
 8001826:	e00f      	b.n	8001848 <XcpCmdProgramMax+0x50>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <XcpCmdProgramMax+0x58>)
 800182a:	22ff      	movs	r2, #255	; 0xff
 800182c:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 800182e:	f7ff fc11 	bl	8001054 <ComGetActiveInterfaceMaxRxLen>
 8001832:	4603      	mov	r3, r0
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <XcpCmdProgramMax+0x58>)
 8001838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <XcpCmdProgramMax+0x58>)
 800183e:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <XcpCmdProgramMax+0x58>)
 8001842:	2201      	movs	r2, #1
 8001844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	bf00      	nop
 8001850:	20000520 	.word	0x20000520

08001854 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3301      	adds	r3, #1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461c      	mov	r4, r3
 8001864:	f7ff fbf6 	bl	8001054 <ComGetActiveInterfaceMaxRxLen>
 8001868:	4603      	mov	r3, r0
 800186a:	3b02      	subs	r3, #2
 800186c:	429c      	cmp	r4, r3
 800186e:	dd03      	ble.n	8001878 <XcpCmdProgram+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001870:	2022      	movs	r0, #34	; 0x22
 8001872:	f7ff fe19 	bl	80014a8 <XcpSetCtoError>
    return;
 8001876:	e030      	b.n	80018da <XcpCmdProgram+0x86>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <XcpCmdProgram+0x8c>)
 800187a:	22ff      	movs	r2, #255	; 0xff
 800187c:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <XcpCmdProgram+0x8c>)
 8001880:	2201      	movs	r2, #1
 8001882:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3301      	adds	r3, #1
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d108      	bne.n	80018a2 <XcpCmdProgram+0x4e>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 8001890:	f7ff f9be 	bl	8000c10 <NvmDone>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d11e      	bne.n	80018d8 <XcpCmdProgram+0x84>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 800189a:	2031      	movs	r0, #49	; 0x31
 800189c:	f7ff fe04 	bl	80014a8 <XcpSetCtoError>
    }
    return;
 80018a0:	e01a      	b.n	80018d8 <XcpCmdProgram+0x84>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <XcpCmdProgram+0x8c>)
 80018a4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3301      	adds	r3, #1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3302      	adds	r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	f7ff f980 	bl	8000bb8 <NvmWrite>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80018be:	2031      	movs	r0, #49	; 0x31
 80018c0:	f7ff fdf2 	bl	80014a8 <XcpSetCtoError>
    return;
 80018c4:	e009      	b.n	80018da <XcpCmdProgram+0x86>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <XcpCmdProgram+0x8c>)
 80018c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	3201      	adds	r2, #1
 80018ce:	7812      	ldrb	r2, [r2, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <XcpCmdProgram+0x8c>)
 80018d4:	6493      	str	r3, [r2, #72]	; 0x48
 80018d6:	e000      	b.n	80018da <XcpCmdProgram+0x86>
    return;
 80018d8:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	20000520 	.word	0x20000520

080018e4 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <XcpCmdProgramClear+0x3c>)
 80018ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4619      	mov	r1, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	f7ff f96d 	bl	8000bd8 <NvmErase>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <XcpCmdProgramClear+0x28>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001904:	2031      	movs	r0, #49	; 0x31
 8001906:	f7ff fdcf 	bl	80014a8 <XcpSetCtoError>
    return;
 800190a:	e006      	b.n	800191a <XcpCmdProgramClear+0x36>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <XcpCmdProgramClear+0x3c>)
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001912:	4b03      	ldr	r3, [pc, #12]	; (8001920 <XcpCmdProgramClear+0x3c>)
 8001914:	2201      	movs	r2, #1
 8001916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000520 	.word	0x20000520

08001924 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 800192c:	f7fe fdf8 	bl	8000520 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <XcpCmdProgramReset+0x24>)
 8001932:	22ff      	movs	r2, #255	; 0xff
 8001934:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <XcpCmdProgramReset+0x24>)
 8001938:	2201      	movs	r2, #1
 800193a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000520 	.word	0x20000520

0800194c <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8001954:	2031      	movs	r0, #49	; 0x31
 8001956:	f7ff fda7 	bl	80014a8 <XcpSetCtoError>
  return;
 800195a:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8001966:	2064      	movs	r0, #100	; 0x64
 8001968:	f000 f818 	bl	800199c <LedBlinkInit>
} /*** end of CopInitHook ***/
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8001974:	f000 f822 	bl	80019bc <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <BackDoorInitHook>:
** \brief     Initializes the backdoor entry option.
** \return    none.
**
****************************************************************************************/
void BackDoorInitHook(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
} /*** end of BackDoorInitHook ***/
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <BackDoorEntryHook>:
** \brief     Checks if a backdoor entry is requested.
** \return    BLT_TRUE if the backdoor entry is requested, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool BackDoorEntryHook(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* default implementation always activates the bootloader after a reset */
  return BLT_TRUE;
 800198e:	2301      	movs	r3, #1
} /*** end of BackDoorEntryHook ***/
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <LedBlinkInit>:
** \param     interval_ms Specifies the desired LED blink interval time in milliseconds.
** \return    none.
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <LedBlinkInit+0x1c>)
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	8013      	strh	r3, [r2, #0]
} /*** end of LedBlinkInit ***/
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	2000056c 	.word	0x2000056c

080019bc <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 80019c0:	f7ff fab2 	bl	8000f28 <TimerGet>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <LedBlinkTask+0x50>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d31c      	bcc.n	8001a08 <LedBlinkTask+0x4c>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <LedBlinkTask+0x54>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d108      	bne.n	80019e8 <LedBlinkTask+0x2c>
    {
      ledOn = BLT_TRUE;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <LedBlinkTask+0x54>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	2108      	movs	r1, #8
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <LedBlinkTask+0x58>)
 80019e2:	f003 fc8d 	bl	8005300 <HAL_GPIO_WritePin>
 80019e6:	e007      	b.n	80019f8 <LedBlinkTask+0x3c>
    }
    else
    {
      ledOn = BLT_FALSE;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <LedBlinkTask+0x54>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2108      	movs	r1, #8
 80019f2:	4808      	ldr	r0, [pc, #32]	; (8001a14 <LedBlinkTask+0x58>)
 80019f4:	f003 fc84 	bl	8005300 <HAL_GPIO_WritePin>
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 80019f8:	f7ff fa96 	bl	8000f28 <TimerGet>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <LedBlinkTask+0x5c>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a01      	ldr	r2, [pc, #4]	; (8001a0c <LedBlinkTask+0x50>)
 8001a06:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000570 	.word	0x20000570
 8001a10:	20000574 	.word	0x20000574
 8001a14:	40022800 	.word	0x40022800
 8001a18:	2000056c 	.word	0x2000056c

08001a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0


  blt_int8u deferredInitRequestFlag = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]

  /* initialize the microcontroller */
  Init();
 8001a26:	f000 f83d 	bl	8001aa4 <Init>
  /* initialize the shared parameters module */
#if(Display==1)
  BSP_SDRAM_Init();
 8001a2a:	f001 fa09 	bl	8002e40 <BSP_SDRAM_Init>
  BSP_LCD_Init() ;
 8001a2e:	f000 fc9c 	bl	800236a <BSP_LCD_Init>
  BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 fca2 	bl	800237c <BSP_LCD_InitEx>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER_BACKGROUND, LCD_FB_START_ADDRESS);
 8001a38:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 fe35 	bl	80026ac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001a42:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a46:	f000 fedd 	bl	8002804 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a4e:	f000 fe8d 	bl	800276c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001a52:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a56:	f000 fea1 	bl	800279c <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8001a5a:	4810      	ldr	r0, [pc, #64]	; (8001a9c <main+0x80>)
 8001a5c:	f000 feb8 	bl	80027d0 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"StartUp", CENTER_MODE);
 8001a60:	f000 fe18 	bl	8002694 <BSP_LCD_GetYSize>
 8001a64:	4603      	mov	r3, r0
 8001a66:	085b      	lsrs	r3, r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b1b      	subs	r3, #27
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	2301      	movs	r3, #1
 8001a70:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <main+0x84>)
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 ff32 	bl	80028dc <BSP_LCD_DisplayStringAt>
#endif
  SharedParamsInit();
 8001a78:	f000 fba0 	bl	80021bc <SharedParamsInit>
  /* initialize the bootloader */
  BootInit();
 8001a7c:	f7ff fa83 	bl	8000f86 <BootInit>
   * the bootloader to initialize the TCP/IP network stack. this makes it possible for
   * a firmware update to proceed. the code here reads out this flag and performs the
   * TCP/IP network stack initialization when requested.
   */
  //ComDeferredInit();
  SharedParamsReadByIndex(0, &deferredInitRequestFlag);
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	4619      	mov	r1, r3
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 fbc1 	bl	800220c <SharedParamsReadByIndex>
  if (deferredInitRequestFlag == 1)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <main+0x78>
  {
    /* explicitly initialize all communication interface for which the deferred
     * initialization feature was enabled.
     */
    ComDeferredInit();
 8001a90:	f7ff fb34 	bl	80010fc <ComDeferredInit>

  /* start the infinite program loop */
  while (1)
  {
    /* run the bootloader task */
    BootTask();
 8001a94:	f7ff fa87 	bl	8000fa6 <BootTask>
 8001a98:	e7fc      	b.n	8001a94 <main+0x78>
 8001a9a:	bf00      	nop
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	08007318 	.word	0x08007318

08001aa4 <Init>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* HAL library initialization */
  HAL_Init();
 8001aa8:	f001 fc1e 	bl	80032e8 <HAL_Init>
  /* configure system clock */
  SystemClock_Config();
 8001aac:	f000 f802 	bl	8001ab4 <SystemClock_Config>
} /*** end of Init ***/
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b096      	sub	sp, #88	; 0x58
 8001ab8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <SystemClock_Config+0xd8>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a30      	ldr	r2, [pc, #192]	; (8001b8c <SystemClock_Config+0xd8>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <SystemClock_Config+0xd8>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <SystemClock_Config+0xdc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <SystemClock_Config+0xdc>)
 8001ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <SystemClock_Config+0xdc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af8:	2301      	movs	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b00:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b02:	2302      	movs	r3, #2
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USE_STM32469I_DISCO_REVA */
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001b10:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001b1e:	2306      	movs	r3, #6
 8001b20:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fb50 	bl	80061cc <HAL_RCC_OscConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001b32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d000      	beq.n	8001b3c <SystemClock_Config+0x88>
  {
    while(1) { ; }
 8001b3a:	e7fe      	b.n	8001b3a <SystemClock_Config+0x86>
  }

  /* Activate the OverDrive to reach the 180 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8001b3c:	f003 fefa 	bl	8005934 <HAL_PWREx_EnableOverDrive>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001b46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d000      	beq.n	8001b50 <SystemClock_Config+0x9c>
  {
    while(1) { ; }
 8001b4e:	e7fe      	b.n	8001b4e <SystemClock_Config+0x9a>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001b50:	230f      	movs	r3, #15
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b54:	2302      	movs	r3, #2
 8001b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b66:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001b68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 ff30 	bl	80059d4 <HAL_RCC_ClockConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d000      	beq.n	8001b84 <SystemClock_Config+0xd0>
  {
    while(1) { ; }
 8001b82:	e7fe      	b.n	8001b82 <SystemClock_Config+0xce>
  }
}
 8001b84:	bf00      	nop
 8001b86:	3758      	adds	r7, #88	; 0x58
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000

08001b94 <HAL_MspInit>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void HAL_MspInit(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Power and SYSCFG clock enable. */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_MspInit+0x16c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a57      	ldr	r2, [pc, #348]	; (8001d00 <HAL_MspInit+0x16c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_MspInit+0x16c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_MspInit+0x16c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a50      	ldr	r2, [pc, #320]	; (8001d00 <HAL_MspInit+0x16c>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <HAL_MspInit+0x16c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
  /* GPIO ports clock enable. */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_MspInit+0x16c>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a49      	ldr	r2, [pc, #292]	; (8001d00 <HAL_MspInit+0x16c>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_MspInit+0x16c>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_MspInit+0x16c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a42      	ldr	r2, [pc, #264]	; (8001d00 <HAL_MspInit+0x16c>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a3b      	ldr	r2, [pc, #236]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a2d      	ldr	r2, [pc, #180]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]

#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART clock enable. */
  //__HAL_RCC_USART3_CLK_ENABLE();
  __HAL_RCC_USART6_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c84:	f043 0320 	orr.w	r3, r3, #32
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_MspInit+0x16c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
#endif

  /* Configure GPIO pin for the LED. */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c96:	2308      	movs	r3, #8
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4815      	ldr	r0, [pc, #84]	; (8001d04 <HAL_MspInit+0x170>)
 8001cae:	f003 f97d 	bl	8004fac <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	4813      	ldr	r0, [pc, #76]	; (8001d04 <HAL_MspInit+0x170>)
 8001cb8:	f003 fb22 	bl	8005300 <HAL_GPIO_WritePin>

  /* Configure GPIO pin for (optional) backdoor entry input. */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <HAL_MspInit+0x174>)
 8001cd2:	f003 f96b 	bl	8004fac <HAL_GPIO_Init>
#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART TX and RX GPIO pin configuration. */
  //GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_9;
 8001cd6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
  //GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <HAL_MspInit+0x178>)
 8001cf4:	f003 f95a 	bl	8004fac <HAL_GPIO_Init>
#endif
} /*** end of HAL_MspInit ***/
 8001cf8:	bf00      	nop
 8001cfa:	3738      	adds	r7, #56	; 0x38
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40022800 	.word	0x40022800
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40021800 	.word	0x40021800

08001d10 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001d1a:	49be      	ldr	r1, [pc, #760]	; (8002014 <OTM8009A_Init+0x304>)
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f000 fedf 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001d22:	49bd      	ldr	r1, [pc, #756]	; (8002018 <OTM8009A_Init+0x308>)
 8001d24:	2003      	movs	r0, #3
 8001d26:	f000 fedb 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001d2a:	49bc      	ldr	r1, [pc, #752]	; (800201c <OTM8009A_Init+0x30c>)
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f000 fed7 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001d32:	49bb      	ldr	r1, [pc, #748]	; (8002020 <OTM8009A_Init+0x310>)
 8001d34:	2002      	movs	r0, #2
 8001d36:	f000 fed3 	bl	8002ae0 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001d3a:	49b8      	ldr	r1, [pc, #736]	; (800201c <OTM8009A_Init+0x30c>)
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f000 fecf 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001d42:	49b8      	ldr	r1, [pc, #736]	; (8002024 <OTM8009A_Init+0x314>)
 8001d44:	2000      	movs	r0, #0
 8001d46:	f000 fecb 	bl	8002ae0 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001d4a:	200a      	movs	r0, #10
 8001d4c:	f000 fb02 	bl	8002354 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001d50:	49b5      	ldr	r1, [pc, #724]	; (8002028 <OTM8009A_Init+0x318>)
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 fec4 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001d58:	49b4      	ldr	r1, [pc, #720]	; (800202c <OTM8009A_Init+0x31c>)
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f000 fec0 	bl	8002ae0 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001d60:	200a      	movs	r0, #10
 8001d62:	f000 faf7 	bl	8002354 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001d66:	49b2      	ldr	r1, [pc, #712]	; (8002030 <OTM8009A_Init+0x320>)
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f000 feb9 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001d6e:	49b1      	ldr	r1, [pc, #708]	; (8002034 <OTM8009A_Init+0x324>)
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 feb5 	bl	8002ae0 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001d76:	49b0      	ldr	r1, [pc, #704]	; (8002038 <OTM8009A_Init+0x328>)
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f000 feb1 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001d7e:	49af      	ldr	r1, [pc, #700]	; (800203c <OTM8009A_Init+0x32c>)
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 fead 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001d86:	49ae      	ldr	r1, [pc, #696]	; (8002040 <OTM8009A_Init+0x330>)
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f000 fea9 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001d8e:	49ad      	ldr	r1, [pc, #692]	; (8002044 <OTM8009A_Init+0x334>)
 8001d90:	2000      	movs	r0, #0
 8001d92:	f000 fea5 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001d96:	499f      	ldr	r1, [pc, #636]	; (8002014 <OTM8009A_Init+0x304>)
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f000 fea1 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001d9e:	49aa      	ldr	r1, [pc, #680]	; (8002048 <OTM8009A_Init+0x338>)
 8001da0:	2000      	movs	r0, #0
 8001da2:	f000 fe9d 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001da6:	49a9      	ldr	r1, [pc, #676]	; (800204c <OTM8009A_Init+0x33c>)
 8001da8:	2000      	movs	r0, #0
 8001daa:	f000 fe99 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001dae:	49a8      	ldr	r1, [pc, #672]	; (8002050 <OTM8009A_Init+0x340>)
 8001db0:	2000      	movs	r0, #0
 8001db2:	f000 fe95 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001db6:	49a7      	ldr	r1, [pc, #668]	; (8002054 <OTM8009A_Init+0x344>)
 8001db8:	2000      	movs	r0, #0
 8001dba:	f000 fe91 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001dbe:	49a6      	ldr	r1, [pc, #664]	; (8002058 <OTM8009A_Init+0x348>)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 fe8d 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001dc6:	49a5      	ldr	r1, [pc, #660]	; (800205c <OTM8009A_Init+0x34c>)
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 fe89 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001dce:	49a4      	ldr	r1, [pc, #656]	; (8002060 <OTM8009A_Init+0x350>)
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f000 fe85 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001dd6:	49a3      	ldr	r1, [pc, #652]	; (8002064 <OTM8009A_Init+0x354>)
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 fe81 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001dde:	4997      	ldr	r1, [pc, #604]	; (800203c <OTM8009A_Init+0x32c>)
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 fe7d 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001de6:	498b      	ldr	r1, [pc, #556]	; (8002014 <OTM8009A_Init+0x304>)
 8001de8:	2000      	movs	r0, #0
 8001dea:	f000 fe79 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001dee:	499e      	ldr	r1, [pc, #632]	; (8002068 <OTM8009A_Init+0x358>)
 8001df0:	2002      	movs	r0, #2
 8001df2:	f000 fe75 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001df6:	499d      	ldr	r1, [pc, #628]	; (800206c <OTM8009A_Init+0x35c>)
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f000 fe71 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001dfe:	499c      	ldr	r1, [pc, #624]	; (8002070 <OTM8009A_Init+0x360>)
 8001e00:	2000      	movs	r0, #0
 8001e02:	f000 fe6d 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001e06:	499b      	ldr	r1, [pc, #620]	; (8002074 <OTM8009A_Init+0x364>)
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f000 fe69 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001e0e:	499a      	ldr	r1, [pc, #616]	; (8002078 <OTM8009A_Init+0x368>)
 8001e10:	2000      	movs	r0, #0
 8001e12:	f000 fe65 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001e16:	4999      	ldr	r1, [pc, #612]	; (800207c <OTM8009A_Init+0x36c>)
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f000 fe61 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001e1e:	4998      	ldr	r1, [pc, #608]	; (8002080 <OTM8009A_Init+0x370>)
 8001e20:	2000      	movs	r0, #0
 8001e22:	f000 fe5d 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001e26:	4989      	ldr	r1, [pc, #548]	; (800204c <OTM8009A_Init+0x33c>)
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f000 fe59 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001e2e:	4995      	ldr	r1, [pc, #596]	; (8002084 <OTM8009A_Init+0x374>)
 8001e30:	2000      	movs	r0, #0
 8001e32:	f000 fe55 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001e36:	4987      	ldr	r1, [pc, #540]	; (8002054 <OTM8009A_Init+0x344>)
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f000 fe51 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001e3e:	4992      	ldr	r1, [pc, #584]	; (8002088 <OTM8009A_Init+0x378>)
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 fe4d 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001e46:	4991      	ldr	r1, [pc, #580]	; (800208c <OTM8009A_Init+0x37c>)
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 fe49 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001e4e:	4990      	ldr	r1, [pc, #576]	; (8002090 <OTM8009A_Init+0x380>)
 8001e50:	2002      	movs	r0, #2
 8001e52:	f000 fe45 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001e56:	4971      	ldr	r1, [pc, #452]	; (800201c <OTM8009A_Init+0x30c>)
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 fe41 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001e5e:	498d      	ldr	r1, [pc, #564]	; (8002094 <OTM8009A_Init+0x384>)
 8001e60:	2006      	movs	r0, #6
 8001e62:	f000 fe3d 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001e66:	498c      	ldr	r1, [pc, #560]	; (8002098 <OTM8009A_Init+0x388>)
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 fe39 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001e6e:	498b      	ldr	r1, [pc, #556]	; (800209c <OTM8009A_Init+0x38c>)
 8001e70:	200e      	movs	r0, #14
 8001e72:	f000 fe35 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001e76:	498a      	ldr	r1, [pc, #552]	; (80020a0 <OTM8009A_Init+0x390>)
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f000 fe31 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001e7e:	4989      	ldr	r1, [pc, #548]	; (80020a4 <OTM8009A_Init+0x394>)
 8001e80:	200e      	movs	r0, #14
 8001e82:	f000 fe2d 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001e86:	4988      	ldr	r1, [pc, #544]	; (80020a8 <OTM8009A_Init+0x398>)
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 fe29 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001e8e:	4987      	ldr	r1, [pc, #540]	; (80020ac <OTM8009A_Init+0x39c>)
 8001e90:	200a      	movs	r0, #10
 8001e92:	f000 fe25 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001e96:	4986      	ldr	r1, [pc, #536]	; (80020b0 <OTM8009A_Init+0x3a0>)
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f000 fe21 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001e9e:	4985      	ldr	r1, [pc, #532]	; (80020b4 <OTM8009A_Init+0x3a4>)
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f000 fe1d 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001ea6:	495d      	ldr	r1, [pc, #372]	; (800201c <OTM8009A_Init+0x30c>)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f000 fe19 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001eae:	4982      	ldr	r1, [pc, #520]	; (80020b8 <OTM8009A_Init+0x3a8>)
 8001eb0:	200a      	movs	r0, #10
 8001eb2:	f000 fe15 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001eb6:	4981      	ldr	r1, [pc, #516]	; (80020bc <OTM8009A_Init+0x3ac>)
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f000 fe11 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001ebe:	4980      	ldr	r1, [pc, #512]	; (80020c0 <OTM8009A_Init+0x3b0>)
 8001ec0:	200f      	movs	r0, #15
 8001ec2:	f000 fe0d 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001ec6:	4974      	ldr	r1, [pc, #464]	; (8002098 <OTM8009A_Init+0x388>)
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f000 fe09 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001ece:	497d      	ldr	r1, [pc, #500]	; (80020c4 <OTM8009A_Init+0x3b4>)
 8001ed0:	200f      	movs	r0, #15
 8001ed2:	f000 fe05 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001ed6:	4972      	ldr	r1, [pc, #456]	; (80020a0 <OTM8009A_Init+0x390>)
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f000 fe01 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001ede:	497a      	ldr	r1, [pc, #488]	; (80020c8 <OTM8009A_Init+0x3b8>)
 8001ee0:	200a      	movs	r0, #10
 8001ee2:	f000 fdfd 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001ee6:	4970      	ldr	r1, [pc, #448]	; (80020a8 <OTM8009A_Init+0x398>)
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 fdf9 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001eee:	4977      	ldr	r1, [pc, #476]	; (80020cc <OTM8009A_Init+0x3bc>)
 8001ef0:	200f      	movs	r0, #15
 8001ef2:	f000 fdf5 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001ef6:	496e      	ldr	r1, [pc, #440]	; (80020b0 <OTM8009A_Init+0x3a0>)
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f000 fdf1 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001efe:	4974      	ldr	r1, [pc, #464]	; (80020d0 <OTM8009A_Init+0x3c0>)
 8001f00:	200f      	movs	r0, #15
 8001f02:	f000 fded 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001f06:	4973      	ldr	r1, [pc, #460]	; (80020d4 <OTM8009A_Init+0x3c4>)
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f000 fde9 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001f0e:	4972      	ldr	r1, [pc, #456]	; (80020d8 <OTM8009A_Init+0x3c8>)
 8001f10:	200a      	movs	r0, #10
 8001f12:	f000 fde5 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001f16:	4971      	ldr	r1, [pc, #452]	; (80020dc <OTM8009A_Init+0x3cc>)
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 fde1 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001f1e:	4970      	ldr	r1, [pc, #448]	; (80020e0 <OTM8009A_Init+0x3d0>)
 8001f20:	200a      	movs	r0, #10
 8001f22:	f000 fddd 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001f26:	493d      	ldr	r1, [pc, #244]	; (800201c <OTM8009A_Init+0x30c>)
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 fdd9 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001f2e:	496d      	ldr	r1, [pc, #436]	; (80020e4 <OTM8009A_Init+0x3d4>)
 8001f30:	200a      	movs	r0, #10
 8001f32:	f000 fdd5 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001f36:	4961      	ldr	r1, [pc, #388]	; (80020bc <OTM8009A_Init+0x3ac>)
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 fdd1 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001f3e:	496a      	ldr	r1, [pc, #424]	; (80020e8 <OTM8009A_Init+0x3d8>)
 8001f40:	200f      	movs	r0, #15
 8001f42:	f000 fdcd 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001f46:	4954      	ldr	r1, [pc, #336]	; (8002098 <OTM8009A_Init+0x388>)
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 fdc9 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001f4e:	4967      	ldr	r1, [pc, #412]	; (80020ec <OTM8009A_Init+0x3dc>)
 8001f50:	200f      	movs	r0, #15
 8001f52:	f000 fdc5 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001f56:	4952      	ldr	r1, [pc, #328]	; (80020a0 <OTM8009A_Init+0x390>)
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f000 fdc1 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001f5e:	4964      	ldr	r1, [pc, #400]	; (80020f0 <OTM8009A_Init+0x3e0>)
 8001f60:	200a      	movs	r0, #10
 8001f62:	f000 fdbd 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001f66:	4950      	ldr	r1, [pc, #320]	; (80020a8 <OTM8009A_Init+0x398>)
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 fdb9 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001f6e:	4961      	ldr	r1, [pc, #388]	; (80020f4 <OTM8009A_Init+0x3e4>)
 8001f70:	200f      	movs	r0, #15
 8001f72:	f000 fdb5 	bl	8002ae0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001f76:	494e      	ldr	r1, [pc, #312]	; (80020b0 <OTM8009A_Init+0x3a0>)
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 fdb1 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001f7e:	495e      	ldr	r1, [pc, #376]	; (80020f8 <OTM8009A_Init+0x3e8>)
 8001f80:	200f      	movs	r0, #15
 8001f82:	f000 fdad 	bl	8002ae0 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001f86:	4931      	ldr	r1, [pc, #196]	; (800204c <OTM8009A_Init+0x33c>)
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 fda9 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001f8e:	495b      	ldr	r1, [pc, #364]	; (80020fc <OTM8009A_Init+0x3ec>)
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 fda5 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8001f96:	495a      	ldr	r1, [pc, #360]	; (8002100 <OTM8009A_Init+0x3f0>)
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 fda1 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001f9e:	4959      	ldr	r1, [pc, #356]	; (8002104 <OTM8009A_Init+0x3f4>)
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f000 fd9d 	bl	8002ae0 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8001fa6:	4958      	ldr	r1, [pc, #352]	; (8002108 <OTM8009A_Init+0x3f8>)
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f000 fd99 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001fae:	4957      	ldr	r1, [pc, #348]	; (800210c <OTM8009A_Init+0x3fc>)
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f000 fd95 	bl	8002ae0 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001fb6:	4917      	ldr	r1, [pc, #92]	; (8002014 <OTM8009A_Init+0x304>)
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 fd91 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001fbe:	4954      	ldr	r1, [pc, #336]	; (8002110 <OTM8009A_Init+0x400>)
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f000 fd8d 	bl	8002ae0 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001fc6:	4913      	ldr	r1, [pc, #76]	; (8002014 <OTM8009A_Init+0x304>)
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 fd89 	bl	8002ae0 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001fce:	4911      	ldr	r1, [pc, #68]	; (8002014 <OTM8009A_Init+0x304>)
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f000 fd85 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001fd6:	494f      	ldr	r1, [pc, #316]	; (8002114 <OTM8009A_Init+0x404>)
 8001fd8:	2010      	movs	r0, #16
 8001fda:	f000 fd81 	bl	8002ae0 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001fde:	490d      	ldr	r1, [pc, #52]	; (8002014 <OTM8009A_Init+0x304>)
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 fd7d 	bl	8002ae0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001fe6:	494c      	ldr	r1, [pc, #304]	; (8002118 <OTM8009A_Init+0x408>)
 8001fe8:	2010      	movs	r0, #16
 8001fea:	f000 fd79 	bl	8002ae0 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001fee:	494b      	ldr	r1, [pc, #300]	; (800211c <OTM8009A_Init+0x40c>)
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f000 fd75 	bl	8002ae0 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8001ff6:	2078      	movs	r0, #120	; 0x78
 8001ff8:	f000 f9ac 	bl	8002354 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8090 	beq.w	8002124 <OTM8009A_Init+0x414>
 8002004:	2b02      	cmp	r3, #2
 8002006:	d000      	beq.n	800200a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8002008:	e091      	b.n	800212e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800200a:	4945      	ldr	r1, [pc, #276]	; (8002120 <OTM8009A_Init+0x410>)
 800200c:	2000      	movs	r0, #0
 800200e:	f000 fd67 	bl	8002ae0 <DSI_IO_WriteCmd>
    break;
 8002012:	e08c      	b.n	800212e <OTM8009A_Init+0x41e>
 8002014:	08007560 	.word	0x08007560
 8002018:	08007418 	.word	0x08007418
 800201c:	08007564 	.word	0x08007564
 8002020:	0800741c 	.word	0x0800741c
 8002024:	08007568 	.word	0x08007568
 8002028:	0800756c 	.word	0x0800756c
 800202c:	08007570 	.word	0x08007570
 8002030:	08007574 	.word	0x08007574
 8002034:	08007578 	.word	0x08007578
 8002038:	0800757c 	.word	0x0800757c
 800203c:	08007580 	.word	0x08007580
 8002040:	08007584 	.word	0x08007584
 8002044:	08007588 	.word	0x08007588
 8002048:	0800758c 	.word	0x0800758c
 800204c:	08007590 	.word	0x08007590
 8002050:	08007594 	.word	0x08007594
 8002054:	08007598 	.word	0x08007598
 8002058:	0800759c 	.word	0x0800759c
 800205c:	080075a0 	.word	0x080075a0
 8002060:	080075a4 	.word	0x080075a4
 8002064:	080075a8 	.word	0x080075a8
 8002068:	08007448 	.word	0x08007448
 800206c:	080075ac 	.word	0x080075ac
 8002070:	080075b0 	.word	0x080075b0
 8002074:	080075b4 	.word	0x080075b4
 8002078:	080075b8 	.word	0x080075b8
 800207c:	080075bc 	.word	0x080075bc
 8002080:	080075c0 	.word	0x080075c0
 8002084:	080075c4 	.word	0x080075c4
 8002088:	080075c8 	.word	0x080075c8
 800208c:	080075cc 	.word	0x080075cc
 8002090:	0800744c 	.word	0x0800744c
 8002094:	08007450 	.word	0x08007450
 8002098:	080075d0 	.word	0x080075d0
 800209c:	08007458 	.word	0x08007458
 80020a0:	080075d4 	.word	0x080075d4
 80020a4:	08007468 	.word	0x08007468
 80020a8:	080075d8 	.word	0x080075d8
 80020ac:	08007478 	.word	0x08007478
 80020b0:	080075dc 	.word	0x080075dc
 80020b4:	08007614 	.word	0x08007614
 80020b8:	08007484 	.word	0x08007484
 80020bc:	080075e0 	.word	0x080075e0
 80020c0:	08007490 	.word	0x08007490
 80020c4:	080074a0 	.word	0x080074a0
 80020c8:	080074b0 	.word	0x080074b0
 80020cc:	080074bc 	.word	0x080074bc
 80020d0:	080074cc 	.word	0x080074cc
 80020d4:	080075e4 	.word	0x080075e4
 80020d8:	080074dc 	.word	0x080074dc
 80020dc:	080075e8 	.word	0x080075e8
 80020e0:	080074e8 	.word	0x080074e8
 80020e4:	080074f4 	.word	0x080074f4
 80020e8:	08007500 	.word	0x08007500
 80020ec:	08007510 	.word	0x08007510
 80020f0:	08007520 	.word	0x08007520
 80020f4:	0800752c 	.word	0x0800752c
 80020f8:	0800753c 	.word	0x0800753c
 80020fc:	08007618 	.word	0x08007618
 8002100:	0800761c 	.word	0x0800761c
 8002104:	08007620 	.word	0x08007620
 8002108:	08007624 	.word	0x08007624
 800210c:	08007628 	.word	0x08007628
 8002110:	0800754c 	.word	0x0800754c
 8002114:	08007420 	.word	0x08007420
 8002118:	08007434 	.word	0x08007434
 800211c:	080075ec 	.word	0x080075ec
 8002120:	080075f0 	.word	0x080075f0
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002124:	491a      	ldr	r1, [pc, #104]	; (8002190 <OTM8009A_Init+0x480>)
 8002126:	2000      	movs	r0, #0
 8002128:	f000 fcda 	bl	8002ae0 <DSI_IO_WriteCmd>
    break;
 800212c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10b      	bne.n	800214c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002134:	4917      	ldr	r1, [pc, #92]	; (8002194 <OTM8009A_Init+0x484>)
 8002136:	2000      	movs	r0, #0
 8002138:	f000 fcd2 	bl	8002ae0 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <OTM8009A_Init+0x488>)
 800213e:	2004      	movs	r0, #4
 8002140:	f000 fcce 	bl	8002ae0 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002144:	4915      	ldr	r1, [pc, #84]	; (800219c <OTM8009A_Init+0x48c>)
 8002146:	2004      	movs	r0, #4
 8002148:	f000 fcca 	bl	8002ae0 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800214c:	4914      	ldr	r1, [pc, #80]	; (80021a0 <OTM8009A_Init+0x490>)
 800214e:	2000      	movs	r0, #0
 8002150:	f000 fcc6 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002154:	4913      	ldr	r1, [pc, #76]	; (80021a4 <OTM8009A_Init+0x494>)
 8002156:	2000      	movs	r0, #0
 8002158:	f000 fcc2 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800215c:	4912      	ldr	r1, [pc, #72]	; (80021a8 <OTM8009A_Init+0x498>)
 800215e:	2000      	movs	r0, #0
 8002160:	f000 fcbe 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002164:	4911      	ldr	r1, [pc, #68]	; (80021ac <OTM8009A_Init+0x49c>)
 8002166:	2000      	movs	r0, #0
 8002168:	f000 fcba 	bl	8002ae0 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800216c:	4910      	ldr	r1, [pc, #64]	; (80021b0 <OTM8009A_Init+0x4a0>)
 800216e:	2000      	movs	r0, #0
 8002170:	f000 fcb6 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002174:	490f      	ldr	r1, [pc, #60]	; (80021b4 <OTM8009A_Init+0x4a4>)
 8002176:	2000      	movs	r0, #0
 8002178:	f000 fcb2 	bl	8002ae0 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <OTM8009A_Init+0x4a8>)
 800217e:	2000      	movs	r0, #0
 8002180:	f000 fcae 	bl	8002ae0 <DSI_IO_WriteCmd>

  return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	080075f4 	.word	0x080075f4
 8002194:	080075f8 	.word	0x080075f8
 8002198:	08007550 	.word	0x08007550
 800219c:	08007558 	.word	0x08007558
 80021a0:	080075fc 	.word	0x080075fc
 80021a4:	08007600 	.word	0x08007600
 80021a8:	08007604 	.word	0x08007604
 80021ac:	08007608 	.word	0x08007608
 80021b0:	0800760c 	.word	0x0800760c
 80021b4:	08007560 	.word	0x08007560
 80021b8:	08007610 	.word	0x08007610

080021bc <SharedParamsInit>:
** \brief     Initializes the shared RAM parameters module.
** \return    none.
**
****************************************************************************************/
void SharedParamsInit(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0

  /* The shared parameter buffer does not get initialized by the C-startup code. Another
   * previously running program could have initialized it, in which case it is ready
   * for use and nothing more needs to be done.
   */
  if (!SharedParamsValidateBuffer())
 80021c2:	f000 f845 	bl	8002250 <SharedParamsValidateBuffer>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f083 0301 	eor.w	r3, r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d013      	beq.n	80021fa <SharedParamsInit+0x3e>
     * was configured to not do this.
     *
     * The initialization consists of setting the buffer identifier, zeroing the
     * actual parameter data and updating the checksum at the end.
     */
    sharedParamsBuffer.identifier = SHARED_PARAMS_BUFFER_ID;
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <SharedParamsInit+0x48>)
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <SharedParamsInit+0x4c>)
 80021d6:	601a      	str	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	e008      	b.n	80021f0 <SharedParamsInit+0x34>
    {
      sharedParamsBuffer.data[byteIdx] = 0;
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <SharedParamsInit+0x48>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	3304      	adds	r3, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3301      	adds	r3, #1
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b37      	cmp	r3, #55	; 0x37
 80021f4:	d9f3      	bls.n	80021de <SharedParamsInit+0x22>
    }
    SharedParamsWriteChecksum();
 80021f6:	f000 f845 	bl	8002284 <SharedParamsWriteChecksum>
  }
} /*** end of SharedParamsInit ***/
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000024 	.word	0x20000024
 8002208:	ce42e7a2 	.word	0xce42e7a2

0800220c <SharedParamsReadByIndex>:
** \param     value Pointer to where the read data value is stored.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsReadByIndex(uint32_t idx, uint8_t * value)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  bool result = false;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 800221a:	f000 f819 	bl	8002250 <SharedParamsValidateBuffer>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <SharedParamsReadByIndex+0x36>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b37      	cmp	r3, #55	; 0x37
 8002228:	d80b      	bhi.n	8002242 <SharedParamsReadByIndex+0x36>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN)  &&
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <SharedParamsReadByIndex+0x36>
       (value != NULL) )
  {
    /* Read the value and update the result. */
    *value = sharedParamsBuffer.data[idx];
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <SharedParamsReadByIndex+0x40>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	3304      	adds	r3, #4
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	701a      	strb	r2, [r3, #0]
    result = true;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsReadByIndex ***/
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000024 	.word	0x20000024

08002250 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  bool result = false;
 8002256:	2300      	movs	r3, #0
 8002258:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <SharedParamsValidateBuffer+0x2c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <SharedParamsValidateBuffer+0x30>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d106      	bne.n	8002272 <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 8002264:	f000 f81a 	bl	800229c <SharedParamsVerifyChecksum>
 8002268:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 800226e:	2301      	movs	r3, #1
 8002270:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 8002272:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000024 	.word	0x20000024
 8002280:	ce42e7a2 	.word	0xce42e7a2

08002284 <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 8002288:	f000 f81e 	bl	80022c8 <SharedParamsCalculateChecksum>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	4b01      	ldr	r3, [pc, #4]	; (8002298 <SharedParamsWriteChecksum+0x14>)
 8002292:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000024 	.word	0x20000024

0800229c <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
  bool result = false;
 80022a2:	2300      	movs	r3, #0
 80022a4:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 80022a6:	f000 f80f 	bl	80022c8 <SharedParamsCalculateChecksum>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SharedParamsVerifyChecksum+0x28>)
 80022b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d101      	bne.n	80022ba <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 80022b6:	2301      	movs	r3, #1
 80022b8:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 80022ba:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000024 	.word	0x20000024

080022c8 <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <SharedParamsCalculateChecksum+0x88>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	b29a      	uxth	r2, r3
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	4413      	add	r3, r2
 80022de:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <SharedParamsCalculateChecksum+0x88>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	4413      	add	r3, r2
 80022ee:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <SharedParamsCalculateChecksum+0x88>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	4413      	add	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <SharedParamsCalculateChecksum+0x88>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0e1b      	lsrs	r3, r3, #24
 8002306:	b2db      	uxtb	r3, r3
 8002308:	b29a      	uxth	r2, r3
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	4413      	add	r3, r2
 800230e:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	e00b      	b.n	800232e <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <SharedParamsCalculateChecksum+0x88>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4413      	add	r3, r2
 800231c:	3304      	adds	r3, #4
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b29a      	uxth	r2, r3
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	4413      	add	r3, r2
 8002326:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b37      	cmp	r3, #55	; 0x37
 8002332:	d9f0      	bls.n	8002316 <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	43db      	mvns	r3, r3
 8002338:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	3301      	adds	r3, #1
 800233e:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 8002340:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000024 	.word	0x20000024

08002354 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f001 f849 	bl	80033f4 <HAL_Delay>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800236e:	2001      	movs	r0, #1
 8002370:	f000 f804 	bl	800237c <BSP_LCD_InitEx>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b096      	sub	sp, #88	; 0x58
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8002386:	f646 3325 	movw	r3, #27429	; 0x6b25
 800238a:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8002390:	f000 f93e 	bl	8002610 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8002394:	f000 fbce 	bl	8002b34 <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8002398:	4b93      	ldr	r3, [pc, #588]	; (80025e8 <BSP_LCD_InitEx+0x26c>)
 800239a:	4a94      	ldr	r2, [pc, #592]	; (80025ec <BSP_LCD_InitEx+0x270>)
 800239c:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 800239e:	4892      	ldr	r0, [pc, #584]	; (80025e8 <BSP_LCD_InitEx+0x26c>)
 80023a0:	f001 ff10 	bl	80041c4 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 80023a4:	237d      	movs	r3, #125	; 0x7d
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80023b0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80023b4:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80023b6:	4b8c      	ldr	r3, [pc, #560]	; (80025e8 <BSP_LCD_InitEx+0x26c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 80023bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	4a8b      	ldr	r2, [pc, #556]	; (80025f0 <BSP_LCD_InitEx+0x274>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a9b      	lsrs	r3, r3, #10
 80023c8:	4a87      	ldr	r2, [pc, #540]	; (80025e8 <BSP_LCD_InitEx+0x26c>)
 80023ca:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 80023cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d0:	4619      	mov	r1, r3
 80023d2:	4885      	ldr	r0, [pc, #532]	; (80025e8 <BSP_LCD_InitEx+0x26c>)
 80023d4:	f001 fddc 	bl	8003f90 <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 80023de:	4b85      	ldr	r3, [pc, #532]	; (80025f4 <BSP_LCD_InitEx+0x278>)
 80023e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023e4:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80023e6:	4b84      	ldr	r3, [pc, #528]	; (80025f8 <BSP_LCD_InitEx+0x27c>)
 80023e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e007      	b.n	8002400 <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80023f0:	4b80      	ldr	r3, [pc, #512]	; (80025f4 <BSP_LCD_InitEx+0x278>)
 80023f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023f6:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80023f8:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <BSP_LCD_InitEx+0x27c>)
 80023fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023fe:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8002400:	4b7c      	ldr	r3, [pc, #496]	; (80025f4 <BSP_LCD_InitEx+0x278>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 8002406:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <BSP_LCD_InitEx+0x27c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;
 800240c:	2301      	movs	r3, #1
 800240e:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = OTM8009A_480X800_VBP;
 8002410:	230f      	movs	r3, #15
 8002412:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = OTM8009A_480X800_VFP;
 8002414:	2310      	movs	r3, #16
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = OTM8009A_480X800_HSYNC;
 8002418:	2302      	movs	r3, #2
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = OTM8009A_480X800_HBP;
 800241c:	2322      	movs	r3, #34	; 0x22
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = OTM8009A_480X800_HFP;
 8002420:	2322      	movs	r3, #34	; 0x22
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8002424:	4b75      	ldr	r3, [pc, #468]	; (80025fc <BSP_LCD_InitEx+0x280>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 800242a:	4b74      	ldr	r3, [pc, #464]	; (80025fc <BSP_LCD_InitEx+0x280>)
 800242c:	2205      	movs	r2, #5
 800242e:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002430:	4b72      	ldr	r3, [pc, #456]	; (80025fc <BSP_LCD_InitEx+0x280>)
 8002432:	2200      	movs	r2, #0
 8002434:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002436:	4b71      	ldr	r3, [pc, #452]	; (80025fc <BSP_LCD_InitEx+0x280>)
 8002438:	2200      	movs	r2, #0
 800243a:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 800243c:	4b6f      	ldr	r3, [pc, #444]	; (80025fc <BSP_LCD_InitEx+0x280>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8002442:	4b6e      	ldr	r3, [pc, #440]	; (80025fc <BSP_LCD_InitEx+0x280>)
 8002444:	2202      	movs	r2, #2
 8002446:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8002448:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <BSP_LCD_InitEx+0x280>)
 800244a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800244e:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8002450:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <BSP_LCD_InitEx+0x280>)
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8002456:	4a69      	ldr	r2, [pc, #420]	; (80025fc <BSP_LCD_InitEx+0x280>)
 8002458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245a:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002460:	fb02 f203 	mul.w	r2, r2, r3
 8002464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4a64      	ldr	r2, [pc, #400]	; (80025fc <BSP_LCD_InitEx+0x280>)
 800246c:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002472:	fb02 f203 	mul.w	r2, r2, r3
 8002476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	4a5f      	ldr	r2, [pc, #380]	; (80025fc <BSP_LCD_InitEx+0x280>)
 800247e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8002480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	441a      	add	r2, r3
 8002486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002488:	441a      	add	r2, r3
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	4413      	add	r3, r2
 800248e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002490:	fb02 f203 	mul.w	r2, r2, r3
 8002494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4a58      	ldr	r2, [pc, #352]	; (80025fc <BSP_LCD_InitEx+0x280>)
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 800249e:	4a57      	ldr	r2, [pc, #348]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80024a4:	4a55      	ldr	r2, [pc, #340]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80024aa:	4a54      	ldr	r2, [pc, #336]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80024be:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024c0:	2210      	movs	r2, #16
 80024c2:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80024c4:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80024ca:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d0:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80024d2:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80024da:	4b48      	ldr	r3, [pc, #288]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024e0:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f0:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80024f2:	4b42      	ldr	r3, [pc, #264]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024f8:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 80024fa:	4940      	ldr	r1, [pc, #256]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80024fc:	483a      	ldr	r0, [pc, #232]	; (80025e8 <BSP_LCD_InitEx+0x26c>)
 80024fe:	f001 fee9 	bl	80042d4 <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8002502:	2323      	movs	r3, #35	; 0x23
 8002504:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 8002506:	2323      	movs	r3, #35	; 0x23
 8002508:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 800250a:	2323      	movs	r3, #35	; 0x23
 800250c:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 800250e:	2323      	movs	r3, #35	; 0x23
 8002510:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 8002516:	230a      	movs	r3, #10
 8002518:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	4619      	mov	r1, r3
 8002520:	4831      	ldr	r0, [pc, #196]	; (80025e8 <BSP_LCD_InitEx+0x26c>)
 8002522:	f002 f8df 	bl	80046e4 <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	3b01      	subs	r3, #1
 800252a:	4a35      	ldr	r2, [pc, #212]	; (8002600 <BSP_LCD_InitEx+0x284>)
 800252c:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 800252e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002532:	4413      	add	r3, r2
 8002534:	3b01      	subs	r3, #1
 8002536:	4a32      	ldr	r2, [pc, #200]	; (8002600 <BSP_LCD_InitEx+0x284>)
 8002538:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <BSP_LCD_InitEx+0x278>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	441a      	add	r2, r3
 8002542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002544:	4413      	add	r3, r2
 8002546:	3b01      	subs	r3, #1
 8002548:	4a2d      	ldr	r2, [pc, #180]	; (8002600 <BSP_LCD_InitEx+0x284>)
 800254a:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <BSP_LCD_InitEx+0x278>)
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	441a      	add	r2, r3
 8002554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002556:	441a      	add	r2, r3
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	4413      	add	r3, r2
 800255c:	3b01      	subs	r3, #1
 800255e:	4a28      	ldr	r2, [pc, #160]	; (8002600 <BSP_LCD_InitEx+0x284>)
 8002560:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8002562:	4b24      	ldr	r3, [pc, #144]	; (80025f4 <BSP_LCD_InitEx+0x278>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <BSP_LCD_InitEx+0x284>)
 8002568:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <BSP_LCD_InitEx+0x27c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a24      	ldr	r2, [pc, #144]	; (8002600 <BSP_LCD_InitEx+0x284>)
 8002570:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <BSP_LCD_InitEx+0x288>)
 8002574:	2208      	movs	r2, #8
 8002576:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <BSP_LCD_InitEx+0x288>)
 800257a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800257e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <BSP_LCD_InitEx+0x288>)
 8002582:	2207      	movs	r2, #7
 8002584:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <BSP_LCD_InitEx+0x288>)
 8002588:	2200      	movs	r2, #0
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800258c:	481d      	ldr	r0, [pc, #116]	; (8002604 <BSP_LCD_InitEx+0x288>)
 800258e:	f003 fbdf 	bl	8005d50 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 8002592:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <BSP_LCD_InitEx+0x284>)
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <BSP_LCD_InitEx+0x284>)
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <BSP_LCD_InitEx+0x284>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <BSP_LCD_InitEx+0x284>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <BSP_LCD_InitEx+0x284>)
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <BSP_LCD_InitEx+0x28c>)
 80025b4:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 80025b6:	4911      	ldr	r1, [pc, #68]	; (80025fc <BSP_LCD_InitEx+0x280>)
 80025b8:	4811      	ldr	r0, [pc, #68]	; (8002600 <BSP_LCD_InitEx+0x284>)
 80025ba:	f003 f96a 	bl	8005892 <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 80025be:	4810      	ldr	r0, [pc, #64]	; (8002600 <BSP_LCD_InitEx+0x284>)
 80025c0:	f002 feb8 	bl	8005334 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 80025c4:	4808      	ldr	r0, [pc, #32]	; (80025e8 <BSP_LCD_InitEx+0x26c>)
 80025c6:	f002 f8f7 	bl	80047b8 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80025ca:	f000 fc39 	bl	8002e40 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80025ce:	480f      	ldr	r0, [pc, #60]	; (800260c <BSP_LCD_InitEx+0x290>)
 80025d0:	f000 f8fe 	bl	80027d0 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/  
  
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	4619      	mov	r1, r3
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff fb99 	bl	8001d10 <OTM8009A_Init>
  
/***********************End OTM8009A Initialization****************************/ 
  
  return LCD_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3758      	adds	r7, #88	; 0x58
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200007a4 	.word	0x200007a4
 80025ec:	40016c00 	.word	0x40016c00
 80025f0:	43215e57 	.word	0x43215e57
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	20000010 	.word	0x20000010
 80025fc:	20000578 	.word	0x20000578
 8002600:	200006fc 	.word	0x200006fc
 8002604:	20000600 	.word	0x20000600
 8002608:	40016800 	.word	0x40016800
 800260c:	20000004 	.word	0x20000004

08002610 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
/* EVAL Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <BSP_LCD_Reset+0x64>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a15      	ldr	r2, [pc, #84]	; (8002674 <BSP_LCD_Reset+0x64>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <BSP_LCD_Reset+0x64>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 8002636:	2311      	movs	r3, #17
 8002638:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	4619      	mov	r1, r3
 8002646:	480c      	ldr	r0, [pc, #48]	; (8002678 <BSP_LCD_Reset+0x68>)
 8002648:	f002 fcb0 	bl	8004fac <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800264c:	2200      	movs	r2, #0
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	4809      	ldr	r0, [pc, #36]	; (8002678 <BSP_LCD_Reset+0x68>)
 8002652:	f002 fe55 	bl	8005300 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8002656:	2014      	movs	r0, #20
 8002658:	f000 fecc 	bl	80033f4 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 800265c:	2201      	movs	r2, #1
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <BSP_LCD_Reset+0x68>)
 8002662:	f002 fe4d 	bl	8005300 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);    
 8002666:	200a      	movs	r0, #10
 8002668:	f000 fec4 	bl	80033f4 <HAL_Delay>
#else
  
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 800266c:	bf00      	nop
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	40021c00 	.word	0x40021c00

0800267c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <BSP_LCD_GetXSize+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	2000000c 	.word	0x2000000c

08002694 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <BSP_LCD_GetYSize+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000010 	.word	0x20000010

080026ac <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b090      	sub	sp, #64	; 0x40
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80026bc:	f7ff ffde 	bl	800267c <BSP_LCD_GetXSize>
 80026c0:	4603      	mov	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026c8:	f7ff ffe4 	bl	8002694 <BSP_LCD_GetYSize>
 80026cc:	4603      	mov	r3, r0
 80026ce:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80026d8:	23ff      	movs	r3, #255	; 0xff
 80026da:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026f8:	2307      	movs	r3, #7
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80026fc:	f7ff ffbe 	bl	800267c <BSP_LCD_GetXSize>
 8002700:	4603      	mov	r3, r0
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002704:	f7ff ffc6 	bl	8002694 <BSP_LCD_GetYSize>
 8002708:	4603      	mov	r3, r0
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 800270c:	88fa      	ldrh	r2, [r7, #6]
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	4619      	mov	r1, r3
 8002714:	4812      	ldr	r0, [pc, #72]	; (8002760 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002716:	f002 fee7 	bl	80054e8 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	4911      	ldr	r1, [pc, #68]	; (8002764 <BSP_LCD_LayerDefaultInit+0xb8>)
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3304      	adds	r3, #4
 800272a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800272e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	490c      	ldr	r1, [pc, #48]	; (8002764 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	3308      	adds	r3, #8
 8002740:	4a09      	ldr	r2, [pc, #36]	; (8002768 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002742:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	4907      	ldr	r1, [pc, #28]	; (8002764 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002756:	601a      	str	r2, [r3, #0]
}
 8002758:	bf00      	nop
 800275a:	3740      	adds	r7, #64	; 0x40
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200006fc 	.word	0x200006fc
 8002764:	200005e8 	.word	0x200005e8
 8002768:	20000004 	.word	0x20000004

0800276c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002774:	4b07      	ldr	r3, [pc, #28]	; (8002794 <BSP_LCD_SetTextColor+0x28>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <BSP_LCD_SetTextColor+0x2c>)
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	200005e4 	.word	0x200005e4
 8002798:	200005e8 	.word	0x200005e8

0800279c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <BSP_LCD_SetBackColor+0x2c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4908      	ldr	r1, [pc, #32]	; (80027cc <BSP_LCD_SetBackColor+0x30>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	3304      	adds	r3, #4
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	200005e4 	.word	0x200005e4
 80027cc:	200005e8 	.word	0x200005e8

080027d0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <BSP_LCD_SetFont+0x2c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4908      	ldr	r1, [pc, #32]	; (8002800 <BSP_LCD_SetFont+0x30>)
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3308      	adds	r3, #8
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	200005e4 	.word	0x200005e4
 8002800:	200005e8 	.word	0x200005e8

08002804 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002806:	b085      	sub	sp, #20
 8002808:	af02      	add	r7, sp, #8
 800280a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <BSP_LCD_Clear+0x48>)
 800280e:	681c      	ldr	r4, [r3, #0]
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <BSP_LCD_Clear+0x48>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <BSP_LCD_Clear+0x4c>)
 8002816:	2134      	movs	r1, #52	; 0x34
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	335c      	adds	r3, #92	; 0x5c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461d      	mov	r5, r3
 8002824:	f7ff ff2a 	bl	800267c <BSP_LCD_GetXSize>
 8002828:	4606      	mov	r6, r0
 800282a:	f7ff ff33 	bl	8002694 <BSP_LCD_GetYSize>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	4632      	mov	r2, r6
 800283c:	4629      	mov	r1, r5
 800283e:	4620      	mov	r0, r4
 8002840:	f000 fac6 	bl	8002dd0 <LL_FillBuffer>
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800284c:	200005e4 	.word	0x200005e4
 8002850:	200006fc 	.word	0x200006fc

08002854 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	80fb      	strh	r3, [r7, #6]
 800285e:	460b      	mov	r3, r1
 8002860:	80bb      	strh	r3, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002866:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <BSP_LCD_DisplayChar+0x80>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	491b      	ldr	r1, [pc, #108]	; (80028d8 <BSP_LCD_DisplayChar+0x84>)
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	3308      	adds	r3, #8
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <BSP_LCD_DisplayChar+0x80>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4c14      	ldr	r4, [pc, #80]	; (80028d8 <BSP_LCD_DisplayChar+0x84>)
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4423      	add	r3, r4
 8002892:	3308      	adds	r3, #8
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002898:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <BSP_LCD_DisplayChar+0x80>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4c0d      	ldr	r4, [pc, #52]	; (80028d8 <BSP_LCD_DisplayChar+0x84>)
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4423      	add	r3, r4
 80028ac:	3308      	adds	r3, #8
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	889b      	ldrh	r3, [r3, #4]
 80028b2:	3307      	adds	r3, #7
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	da00      	bge.n	80028ba <BSP_LCD_DisplayChar+0x66>
 80028b8:	3307      	adds	r3, #7
 80028ba:	10db      	asrs	r3, r3, #3
 80028bc:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028c0:	18ca      	adds	r2, r1, r3
 80028c2:	88b9      	ldrh	r1, [r7, #4]
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f9ca 	bl	8002c60 <DrawChar>
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}
 80028d4:	200005e4 	.word	0x200005e4
 80028d8:	200005e8 	.word	0x200005e8

080028dc <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60ba      	str	r2, [r7, #8]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	81fb      	strh	r3, [r7, #14]
 80028ea:	460b      	mov	r3, r1
 80028ec:	81bb      	strh	r3, [r7, #12]
 80028ee:	4613      	mov	r3, r2
 80028f0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80028f2:	2301      	movs	r3, #1
 80028f4:	83fb      	strh	r3, [r7, #30]
 80028f6:	2300      	movs	r3, #0
 80028f8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8002906:	e002      	b.n	800290e <BSP_LCD_DisplayStringAt+0x32>
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	3301      	adds	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	617a      	str	r2, [r7, #20]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f6      	bne.n	8002908 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800291a:	f7ff feaf 	bl	800267c <BSP_LCD_GetXSize>
 800291e:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <BSP_LCD_DisplayStringAt+0x180>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	494f      	ldr	r1, [pc, #316]	; (8002a60 <BSP_LCD_DisplayStringAt+0x184>)
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	3308      	adds	r3, #8
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	889b      	ldrh	r3, [r3, #4]
 8002934:	fbb0 f3f3 	udiv	r3, r0, r3
 8002938:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d01c      	beq.n	800297a <BSP_LCD_DisplayStringAt+0x9e>
 8002940:	2b03      	cmp	r3, #3
 8002942:	d017      	beq.n	8002974 <BSP_LCD_DisplayStringAt+0x98>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d12e      	bne.n	80029a6 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad1      	subs	r1, r2, r3
 800294e:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <BSP_LCD_DisplayStringAt+0x180>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4843      	ldr	r0, [pc, #268]	; (8002a60 <BSP_LCD_DisplayStringAt+0x184>)
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4403      	add	r3, r0
 800295e:	3308      	adds	r3, #8
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	889b      	ldrh	r3, [r3, #4]
 8002964:	fb03 f301 	mul.w	r3, r3, r1
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	4413      	add	r3, r2
 8002970:	83fb      	strh	r3, [r7, #30]
      break;
 8002972:	e01b      	b.n	80029ac <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002974:	89fb      	ldrh	r3, [r7, #14]
 8002976:	83fb      	strh	r3, [r7, #30]
      break;
 8002978:	e018      	b.n	80029ac <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	b299      	uxth	r1, r3
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <BSP_LCD_DisplayStringAt+0x180>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4836      	ldr	r0, [pc, #216]	; (8002a60 <BSP_LCD_DisplayStringAt+0x184>)
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4403      	add	r3, r0
 8002992:	3308      	adds	r3, #8
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	889b      	ldrh	r3, [r3, #4]
 8002998:	fb11 f303 	smulbb	r3, r1, r3
 800299c:	b29a      	uxth	r2, r3
 800299e:	89fb      	ldrh	r3, [r7, #14]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	83fb      	strh	r3, [r7, #30]
      break;
 80029a4:	e002      	b.n	80029ac <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	83fb      	strh	r3, [r7, #30]
      break;
 80029aa:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80029ac:	8bfb      	ldrh	r3, [r7, #30]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <BSP_LCD_DisplayStringAt+0xde>
 80029b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da1d      	bge.n	80029f6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029be:	e01a      	b.n	80029f6 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	89b9      	ldrh	r1, [r7, #12]
 80029c6:	8bfb      	ldrh	r3, [r7, #30]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff43 	bl	8002854 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <BSP_LCD_DisplayStringAt+0x180>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4923      	ldr	r1, [pc, #140]	; (8002a60 <BSP_LCD_DisplayStringAt+0x184>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3308      	adds	r3, #8
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	889a      	ldrh	r2, [r3, #4]
 80029e4:	8bfb      	ldrh	r3, [r7, #30]
 80029e6:	4413      	add	r3, r2
 80029e8:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	3301      	adds	r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
    i++;
 80029f0:	8bbb      	ldrh	r3, [r7, #28]
 80029f2:	3301      	adds	r3, #1
 80029f4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf14      	ite	ne
 80029fe:	2301      	movne	r3, #1
 8002a00:	2300      	moveq	r3, #0
 8002a02:	b2dc      	uxtb	r4, r3
 8002a04:	f7ff fe3a 	bl	800267c <BSP_LCD_GetXSize>
 8002a08:	4605      	mov	r5, r0
 8002a0a:	8bb9      	ldrh	r1, [r7, #28]
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <BSP_LCD_DisplayStringAt+0x180>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4813      	ldr	r0, [pc, #76]	; (8002a60 <BSP_LCD_DisplayStringAt+0x184>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4403      	add	r3, r0
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	889b      	ldrh	r3, [r3, #4]
 8002a22:	fb03 f301 	mul.w	r3, r3, r1
 8002a26:	1aeb      	subs	r3, r5, r3
 8002a28:	b299      	uxth	r1, r3
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <BSP_LCD_DisplayStringAt+0x180>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	480c      	ldr	r0, [pc, #48]	; (8002a60 <BSP_LCD_DisplayStringAt+0x184>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4403      	add	r3, r0
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	889b      	ldrh	r3, [r3, #4]
 8002a40:	4299      	cmp	r1, r3
 8002a42:	bf2c      	ite	cs
 8002a44:	2301      	movcs	r3, #1
 8002a46:	2300      	movcc	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4023      	ands	r3, r4
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1b6      	bne.n	80029c0 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8002a52:	bf00      	nop
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200005e4 	.word	0x200005e4
 8002a60:	200005e8 	.word	0x200005e8

08002a64 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	80bb      	strh	r3, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <BSP_LCD_DrawHLine+0x70>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <BSP_LCD_DrawHLine+0x74>)
 8002a80:	2134      	movs	r1, #52	; 0x34
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	335c      	adds	r3, #92	; 0x5c
 8002a8a:	681c      	ldr	r4, [r3, #0]
 8002a8c:	f7ff fdf6 	bl	800267c <BSP_LCD_GetXSize>
 8002a90:	4602      	mov	r2, r0
 8002a92:	88bb      	ldrh	r3, [r7, #4]
 8002a94:	fb03 f202 	mul.w	r2, r3, r2
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4423      	add	r3, r4
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <BSP_LCD_DrawHLine+0x70>)
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	68fc      	ldr	r4, [r7, #12]
 8002aa8:	887d      	ldrh	r5, [r7, #2]
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <BSP_LCD_DrawHLine+0x70>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	490b      	ldr	r1, [pc, #44]	; (8002adc <BSP_LCD_DrawHLine+0x78>)
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	462a      	mov	r2, r5
 8002ac6:	4621      	mov	r1, r4
 8002ac8:	f000 f982 	bl	8002dd0 <LL_FillBuffer>
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad4:	200005e4 	.word	0x200005e4
 8002ad8:	200006fc 	.word	0x200006fc
 8002adc:	200005e8 	.word	0x200005e8

08002ae0 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d80d      	bhi.n	8002b0c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	2215      	movs	r2, #21
 8002b02:	2100      	movs	r1, #0
 8002b04:	480a      	ldr	r0, [pc, #40]	; (8002b30 <DSI_IO_WriteCmd+0x50>)
 8002b06:	f001 fe93 	bl	8004830 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8002b0a:	e00d      	b.n	8002b28 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	9200      	str	r2, [sp, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2239      	movs	r2, #57	; 0x39
 8002b20:	2100      	movs	r1, #0
 8002b22:	4803      	ldr	r0, [pc, #12]	; (8002b30 <DSI_IO_WriteCmd+0x50>)
 8002b24:	f001 fea6 	bl	8004874 <HAL_DSI_LongWrite>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200007a4 	.word	0x200007a4

08002b34 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a33      	ldr	r2, [pc, #204]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8002b56:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b60:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	4a2a      	ldr	r2, [pc, #168]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b6c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b94:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002b9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ba0:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002bac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002bc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bc8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <BSP_LCD_MspInit+0xdc>)
 8002bd0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002bd4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2103      	movs	r1, #3
 8002bda:	2058      	movs	r0, #88	; 0x58
 8002bdc:	f000 fd07 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002be0:	2058      	movs	r0, #88	; 0x58
 8002be2:	f000 fd20 	bl	8003626 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2103      	movs	r1, #3
 8002bea:	205a      	movs	r0, #90	; 0x5a
 8002bec:	f000 fcff 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002bf0:	205a      	movs	r0, #90	; 0x5a
 8002bf2:	f000 fd18 	bl	8003626 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	205c      	movs	r0, #92	; 0x5c
 8002bfc:	f000 fcf7 	bl	80035ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002c00:	205c      	movs	r0, #92	; 0x5c
 8002c02:	f000 fd10 	bl	8003626 <HAL_NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800

08002c14 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002c14:	b5b0      	push	{r4, r5, r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	603a      	str	r2, [r7, #0]
 8002c1e:	80fb      	strh	r3, [r7, #6]
 8002c20:	460b      	mov	r3, r1
 8002c22:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <BSP_LCD_DrawPixel+0x44>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <BSP_LCD_DrawPixel+0x48>)
 8002c2a:	2134      	movs	r1, #52	; 0x34
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	681c      	ldr	r4, [r3, #0]
 8002c36:	88bd      	ldrh	r5, [r7, #4]
 8002c38:	f7ff fd20 	bl	800267c <BSP_LCD_GetXSize>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	fb03 f205 	mul.w	r2, r3, r5
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4423      	add	r3, r4
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bdb0      	pop	{r4, r5, r7, pc}
 8002c58:	200005e4 	.word	0x200005e4
 8002c5c:	200006fc 	.word	0x200006fc

08002c60 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	603a      	str	r2, [r7, #0]
 8002c6a:	80fb      	strh	r3, [r7, #6]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8002c78:	4b53      	ldr	r3, [pc, #332]	; (8002dc8 <DrawChar+0x168>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4953      	ldr	r1, [pc, #332]	; (8002dcc <DrawChar+0x16c>)
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	3308      	adds	r3, #8
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	88db      	ldrh	r3, [r3, #6]
 8002c8e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002c90:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <DrawChar+0x168>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	494d      	ldr	r1, [pc, #308]	; (8002dcc <DrawChar+0x16c>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3308      	adds	r3, #8
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	889b      	ldrh	r3, [r3, #4]
 8002ca6:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8002ca8:	8a3b      	ldrh	r3, [r7, #16]
 8002caa:	3307      	adds	r3, #7
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da00      	bge.n	8002cb2 <DrawChar+0x52>
 8002cb0:	3307      	adds	r3, #7
 8002cb2:	10db      	asrs	r3, r3, #3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	8a3b      	ldrh	r3, [r7, #16]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e076      	b.n	8002db6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002cc8:	8a3b      	ldrh	r3, [r7, #16]
 8002cca:	3307      	adds	r3, #7
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	da00      	bge.n	8002cd2 <DrawChar+0x72>
 8002cd0:	3307      	adds	r3, #7
 8002cd2:	10db      	asrs	r3, r3, #3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fb03 f302 	mul.w	r3, r3, r2
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002ce2:	8a3b      	ldrh	r3, [r7, #16]
 8002ce4:	3307      	adds	r3, #7
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da00      	bge.n	8002cec <DrawChar+0x8c>
 8002cea:	3307      	adds	r3, #7
 8002cec:	10db      	asrs	r3, r3, #3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d002      	beq.n	8002cf8 <DrawChar+0x98>
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d004      	beq.n	8002d00 <DrawChar+0xa0>
 8002cf6:	e00c      	b.n	8002d12 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	617b      	str	r3, [r7, #20]
      break;
 8002cfe:	e016      	b.n	8002d2e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	3201      	adds	r2, #1
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
      break;
 8002d10:	e00d      	b.n	8002d2e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	041a      	lsls	r2, r3, #16
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	4313      	orrs	r3, r2
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	3202      	adds	r2, #2
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
      break;
 8002d2c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	e036      	b.n	8002da2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002d34:	8a3a      	ldrh	r2, [r7, #16]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	1ad2      	subs	r2, r2, r3
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	2201      	movs	r2, #1
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	4413      	add	r3, r2
 8002d58:	b298      	uxth	r0, r3
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <DrawChar+0x168>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	491b      	ldr	r1, [pc, #108]	; (8002dcc <DrawChar+0x16c>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	88bb      	ldrh	r3, [r7, #4]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7ff ff50 	bl	8002c14 <BSP_LCD_DrawPixel>
 8002d74:	e012      	b.n	8002d9c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b298      	uxth	r0, r3
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <DrawChar+0x168>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4911      	ldr	r1, [pc, #68]	; (8002dcc <DrawChar+0x16c>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3304      	adds	r3, #4
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7ff ff3c 	bl	8002c14 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	8a3b      	ldrh	r3, [r7, #16]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d3c4      	bcc.n	8002d34 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002daa:	88bb      	ldrh	r3, [r7, #4]
 8002dac:	3301      	adds	r3, #1
 8002dae:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	8a7b      	ldrh	r3, [r7, #18]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d384      	bcc.n	8002cc8 <DrawChar+0x68>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200005e4 	.word	0x200005e4
 8002dcc:	200005e8 	.word	0x200005e8

08002dd0 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <LL_FillBuffer+0x68>)
 8002de0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002de4:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <LL_FillBuffer+0x68>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8002dec:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <LL_FillBuffer+0x68>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <LL_FillBuffer+0x68>)
 8002df4:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <LL_FillBuffer+0x6c>)
 8002df6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8002df8:	480f      	ldr	r0, [pc, #60]	; (8002e38 <LL_FillBuffer+0x68>)
 8002dfa:	f000 fdeb 	bl	80039d4 <HAL_DMA2D_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d115      	bne.n	8002e30 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	480c      	ldr	r0, [pc, #48]	; (8002e38 <LL_FillBuffer+0x68>)
 8002e08:	f000 ff4c 	bl	8003ca4 <HAL_DMA2D_ConfigLayer>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10e      	bne.n	8002e30 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69f9      	ldr	r1, [r7, #28]
 8002e1c:	4806      	ldr	r0, [pc, #24]	; (8002e38 <LL_FillBuffer+0x68>)
 8002e1e:	f000 fe2c 	bl	8003a7a <HAL_DMA2D_Start>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8002e28:	210a      	movs	r1, #10
 8002e2a:	4803      	ldr	r0, [pc, #12]	; (8002e38 <LL_FillBuffer+0x68>)
 8002e2c:	f000 fe50 	bl	8003ad0 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200007c0 	.word	0x200007c0
 8002e3c:	4002b000 	.word	0x4002b000

08002e40 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002e44:	4b29      	ldr	r3, [pc, #164]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002e46:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <BSP_SDRAM_Init+0xb0>)
 8002e48:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <BSP_SDRAM_Init+0xb4>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002e50:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <BSP_SDRAM_Init+0xb4>)
 8002e52:	2207      	movs	r2, #7
 8002e54:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002e56:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <BSP_SDRAM_Init+0xb4>)
 8002e58:	2204      	movs	r2, #4
 8002e5a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <BSP_SDRAM_Init+0xb4>)
 8002e5e:	2207      	movs	r2, #7
 8002e60:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <BSP_SDRAM_Init+0xb4>)
 8002e64:	2202      	movs	r2, #2
 8002e66:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002e68:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <BSP_SDRAM_Init+0xb4>)
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002e6e:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <BSP_SDRAM_Init+0xb4>)
 8002e70:	2202      	movs	r2, #2
 8002e72:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002e80:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002e82:	2204      	movs	r2, #4
 8002e84:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002e86:	4b19      	ldr	r3, [pc, #100]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002e88:	2220      	movs	r2, #32
 8002e8a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002e94:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002e98:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e9a:	4b14      	ldr	r3, [pc, #80]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ea6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002eaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	480c      	ldr	r0, [pc, #48]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002eba:	f000 f87f 	bl	8002fbc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002ebe:	490d      	ldr	r1, [pc, #52]	; (8002ef4 <BSP_SDRAM_Init+0xb4>)
 8002ec0:	480a      	ldr	r0, [pc, #40]	; (8002eec <BSP_SDRAM_Init+0xac>)
 8002ec2:	f003 fbc5 	bl	8006650 <HAL_SDRAM_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <BSP_SDRAM_Init+0xb8>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e002      	b.n	8002eda <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <BSP_SDRAM_Init+0xb8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002eda:	f240 5069 	movw	r0, #1385	; 0x569
 8002ede:	f000 f80d 	bl	8002efc <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <BSP_SDRAM_Init+0xb8>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000063c 	.word	0x2000063c
 8002ef0:	a0000140 	.word	0xa0000140
 8002ef4:	20000670 	.word	0x20000670
 8002ef8:	20000014 	.word	0x20000014

08002efc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002f08:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f10:	2210      	movs	r2, #16
 8002f12:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f24:	4923      	ldr	r1, [pc, #140]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f26:	4824      	ldr	r0, [pc, #144]	; (8002fb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f28:	f003 fbd0 	bl	80066cc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f000 fa61 	bl	80033f4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f34:	2202      	movs	r2, #2
 8002f36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f3a:	2210      	movs	r2, #16
 8002f3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f4e:	4919      	ldr	r1, [pc, #100]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f50:	4819      	ldr	r0, [pc, #100]	; (8002fb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f52:	f003 fbbb 	bl	80066cc <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f58:	2203      	movs	r2, #3
 8002f5a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f5e:	2210      	movs	r2, #16
 8002f60:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f64:	2208      	movs	r2, #8
 8002f66:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f72:	4910      	ldr	r1, [pc, #64]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f74:	4810      	ldr	r0, [pc, #64]	; (8002fb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f76:	f003 fba9 	bl	80066cc <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002f7a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002f7e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f82:	2204      	movs	r2, #4
 8002f84:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f88:	2210      	movs	r2, #16
 8002f8a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f96:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f9c:	4905      	ldr	r1, [pc, #20]	; (8002fb4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f9e:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002fa0:	f003 fb94 	bl	80066cc <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002fa8:	f003 fbbb 	bl	8006722 <HAL_SDRAM_ProgramRefreshRate>
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	2000068c 	.word	0x2000068c
 8002fb8:	2000063c 	.word	0x2000063c

08002fbc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b090      	sub	sp, #64	; 0x40
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8104 	beq.w	80031d6 <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd2:	4b83      	ldr	r3, [pc, #524]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	4a82      	ldr	r2, [pc, #520]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6393      	str	r3, [r2, #56]	; 0x38
 8002fde:	4b80      	ldr	r3, [pc, #512]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a7b      	ldr	r2, [pc, #492]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8002ff4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b79      	ldr	r3, [pc, #484]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a74      	ldr	r2, [pc, #464]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b72      	ldr	r3, [pc, #456]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	4b6e      	ldr	r3, [pc, #440]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a6d      	ldr	r2, [pc, #436]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b6b      	ldr	r3, [pc, #428]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a66      	ldr	r2, [pc, #408]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	4b60      	ldr	r3, [pc, #384]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a5f      	ldr	r2, [pc, #380]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b5d      	ldr	r3, [pc, #372]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a58      	ldr	r2, [pc, #352]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b56      	ldr	r3, [pc, #344]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b52      	ldr	r3, [pc, #328]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a51      	ldr	r2, [pc, #324]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a4a      	ldr	r2, [pc, #296]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <BSP_SDRAM_MspInit+0x224>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80030d2:	2302      	movs	r3, #2
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80030d6:	230c      	movs	r3, #12
 80030d8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 80030da:	2301      	movs	r3, #1
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80030de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e2:	4619      	mov	r1, r3
 80030e4:	483f      	ldr	r0, [pc, #252]	; (80031e4 <BSP_SDRAM_MspInit+0x228>)
 80030e6:	f001 ff61 	bl	8004fac <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80030ea:	f24c 7303 	movw	r3, #50947	; 0xc703
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80030f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030f4:	4619      	mov	r1, r3
 80030f6:	483c      	ldr	r0, [pc, #240]	; (80031e8 <BSP_SDRAM_MspInit+0x22c>)
 80030f8:	f001 ff58 	bl	8004fac <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80030fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003106:	4619      	mov	r1, r3
 8003108:	4838      	ldr	r0, [pc, #224]	; (80031ec <BSP_SDRAM_MspInit+0x230>)
 800310a:	f001 ff4f 	bl	8004fac <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800310e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003118:	4619      	mov	r1, r3
 800311a:	4835      	ldr	r0, [pc, #212]	; (80031f0 <BSP_SDRAM_MspInit+0x234>)
 800311c:	f001 ff46 	bl	8004fac <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003120:	f248 1333 	movw	r3, #33075	; 0x8133
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800312a:	4619      	mov	r1, r3
 800312c:	4831      	ldr	r0, [pc, #196]	; (80031f4 <BSP_SDRAM_MspInit+0x238>)
 800312e:	f001 ff3d 	bl	8004fac <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8003132:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800313c:	4619      	mov	r1, r3
 800313e:	482e      	ldr	r0, [pc, #184]	; (80031f8 <BSP_SDRAM_MspInit+0x23c>)
 8003140:	f001 ff34 	bl	8004fac <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003144:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800314a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800314e:	4619      	mov	r1, r3
 8003150:	482a      	ldr	r0, [pc, #168]	; (80031fc <BSP_SDRAM_MspInit+0x240>)
 8003152:	f001 ff2b 	bl	8004fac <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 8003158:	2200      	movs	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003162:	4b27      	ldr	r3, [pc, #156]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 8003164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003168:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 800316c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003170:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 8003174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003178:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 800317c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003180:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 8003184:	2200      	movs	r2, #0
 8003186:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 800318a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800318e:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 8003192:	2200      	movs	r2, #0
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 8003198:	2203      	movs	r2, #3
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800319c:	4b18      	ldr	r3, [pc, #96]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 800319e:	2200      	movs	r2, #0
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 80031aa:	4a16      	ldr	r2, [pc, #88]	; (8003204 <BSP_SDRAM_MspInit+0x248>)
 80031ac:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a13      	ldr	r2, [pc, #76]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
 80031b4:	4a12      	ldr	r2, [pc, #72]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 80031ba:	4811      	ldr	r0, [pc, #68]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 80031bc:	f000 fafc 	bl	80037b8 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 80031c0:	480f      	ldr	r0, [pc, #60]	; (8003200 <BSP_SDRAM_MspInit+0x244>)
 80031c2:	f000 fa4b 	bl	800365c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 80031c6:	2200      	movs	r2, #0
 80031c8:	2105      	movs	r1, #5
 80031ca:	2038      	movs	r0, #56	; 0x38
 80031cc:	f000 fa0f 	bl	80035ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80031d0:	2038      	movs	r0, #56	; 0x38
 80031d2:	f000 fa28 	bl	8003626 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80031d6:	bf00      	nop
 80031d8:	3740      	adds	r7, #64	; 0x40
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40021400 	.word	0x40021400
 80031f4:	40021800 	.word	0x40021800
 80031f8:	40021c00 	.word	0x40021c00
 80031fc:	40022000 	.word	0x40022000
 8003200:	2000069c 	.word	0x2000069c
 8003204:	40026410 	.word	0x40026410

08003208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800321a:	e7fe      	b.n	800321a <HardFault_Handler+0x4>

0800321c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <MemManage_Handler+0x4>

08003222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <BusFault_Handler+0x4>

08003228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800322c:	e7fe      	b.n	800322c <UsageFault_Handler+0x4>

0800322e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <SystemInit+0x28>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	4a07      	ldr	r2, [pc, #28]	; (8003290 <SystemInit+0x28>)
 8003274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SystemInit+0x28>)
 800327e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003282:	609a      	str	r2, [r3, #8]
#endif
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800329a:	e003      	b.n	80032a4 <LoopCopyDataInit>

0800329c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800329e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032a2:	3104      	adds	r1, #4

080032a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032a4:	480b      	ldr	r0, [pc, #44]	; (80032d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032ac:	d3f6      	bcc.n	800329c <CopyDataInit>
  ldr  r2, =_sbss
 80032ae:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032b0:	e002      	b.n	80032b8 <LoopFillZerobss>

080032b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032b4:	f842 3b04 	str.w	r3, [r2], #4

080032b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032bc:	d3f9      	bcc.n	80032b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032be:	f7ff ffd3 	bl	8003268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032c2:	f003 ff3b 	bl	800713c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c6:	f7fe fba9 	bl	8001a1c <main>
  bx  lr    
 80032ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032cc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80032d0:	0800913c 	.word	0x0800913c
  ldr  r0, =_sdata
 80032d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032d8:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 80032dc:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 80032e0:	20000820 	.word	0x20000820

080032e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e4:	e7fe      	b.n	80032e4 <ADC_IRQHandler>
	...

080032e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_Init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <HAL_Init+0x40>)
 80032f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <HAL_Init+0x40>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <HAL_Init+0x40>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003310:	2003      	movs	r0, #3
 8003312:	f000 f961 	bl	80035d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003316:	2000      	movs	r0, #0
 8003318:	f000 f83c 	bl	8003394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800331c:	f7fe fc3a 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00

0800332c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_DeInit+0x54>)
 8003332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003336:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_DeInit+0x54>)
 800333a:	2200      	movs	r2, #0
 800333c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_DeInit+0x54>)
 8003340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <HAL_DeInit+0x54>)
 8003348:	2200      	movs	r2, #0
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_DeInit+0x54>)
 800334e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003352:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_DeInit+0x54>)
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_DeInit+0x54>)
 800335c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003360:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <HAL_DeInit+0x54>)
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_DeInit+0x54>)
 800336a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800336e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_DeInit+0x54>)
 8003372:	2200      	movs	r2, #0
 8003374:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003376:	f000 f805 	bl	8003384 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_InitTick+0x54>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_InitTick+0x58>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4619      	mov	r1, r3
 80033a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f945 	bl	8003642 <HAL_SYSTICK_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e00e      	b.n	80033e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b0f      	cmp	r3, #15
 80033c6:	d80a      	bhi.n	80033de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c8:	2200      	movs	r2, #0
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033d0:	f000 f90d 	bl	80035ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d4:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <HAL_InitTick+0x5c>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000018 	.word	0x20000018
 80033ec:	20000020 	.word	0x20000020
 80033f0:	2000001c 	.word	0x2000001c

080033f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7fd fd9e 	bl	8000f3c <HAL_GetTick>
 8003400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800340c:	d005      	beq.n	800341a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <HAL_Delay+0x40>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800341a:	bf00      	nop
 800341c:	f7fd fd8e 	bl	8000f3c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d8f7      	bhi.n	800341c <HAL_Delay+0x28>
  {
  }
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000020 	.word	0x20000020

08003438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <__NVIC_SetPriorityGrouping+0x44>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003454:	4013      	ands	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800346a:	4a04      	ldr	r2, [pc, #16]	; (800347c <__NVIC_SetPriorityGrouping+0x44>)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	60d3      	str	r3, [r2, #12]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003484:	4b04      	ldr	r3, [pc, #16]	; (8003498 <__NVIC_GetPriorityGrouping+0x18>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 0307 	and.w	r3, r3, #7
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	db0b      	blt.n	80034c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	4907      	ldr	r1, [pc, #28]	; (80034d4 <__NVIC_EnableIRQ+0x38>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2001      	movs	r0, #1
 80034be:	fa00 f202 	lsl.w	r2, r0, r2
 80034c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000e100 	.word	0xe000e100

080034d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	6039      	str	r1, [r7, #0]
 80034e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	db0a      	blt.n	8003502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	490c      	ldr	r1, [pc, #48]	; (8003524 <__NVIC_SetPriority+0x4c>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	0112      	lsls	r2, r2, #4
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	440b      	add	r3, r1
 80034fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003500:	e00a      	b.n	8003518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <__NVIC_SetPriority+0x50>)
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3b04      	subs	r3, #4
 8003510:	0112      	lsls	r2, r2, #4
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	440b      	add	r3, r1
 8003516:	761a      	strb	r2, [r3, #24]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000e100 	.word	0xe000e100
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f1c3 0307 	rsb	r3, r3, #7
 8003546:	2b04      	cmp	r3, #4
 8003548:	bf28      	it	cs
 800354a:	2304      	movcs	r3, #4
 800354c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3304      	adds	r3, #4
 8003552:	2b06      	cmp	r3, #6
 8003554:	d902      	bls.n	800355c <NVIC_EncodePriority+0x30>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3b03      	subs	r3, #3
 800355a:	e000      	b.n	800355e <NVIC_EncodePriority+0x32>
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	401a      	ands	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	43d9      	mvns	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	4313      	orrs	r3, r2
         );
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	; 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a4:	d301      	bcc.n	80035aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a6:	2301      	movs	r3, #1
 80035a8:	e00f      	b.n	80035ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <SysTick_Config+0x40>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b2:	210f      	movs	r1, #15
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b8:	f7ff ff8e 	bl	80034d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <SysTick_Config+0x40>)
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c2:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <SysTick_Config+0x40>)
 80035c4:	2207      	movs	r2, #7
 80035c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	e000e010 	.word	0xe000e010

080035d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff29 	bl	8003438 <__NVIC_SetPriorityGrouping>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b086      	sub	sp, #24
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003600:	f7ff ff3e 	bl	8003480 <__NVIC_GetPriorityGrouping>
 8003604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	6978      	ldr	r0, [r7, #20]
 800360c:	f7ff ff8e 	bl	800352c <NVIC_EncodePriority>
 8003610:	4602      	mov	r2, r0
 8003612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003616:	4611      	mov	r1, r2
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff5d 	bl	80034d8 <__NVIC_SetPriority>
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff31 	bl	800349c <__NVIC_EnableIRQ>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ffa2 	bl	8003594 <SysTick_Config>
 8003650:	4603      	mov	r3, r0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003668:	f7fd fc68 	bl	8000f3c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e099      	b.n	80037ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003698:	e00f      	b.n	80036ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800369a:	f7fd fc4f 	bl	8000f3c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d908      	bls.n	80036ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2203      	movs	r2, #3
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e078      	b.n	80037ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e8      	bne.n	800369a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <HAL_DMA_Init+0x158>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	2b04      	cmp	r3, #4
 8003712:	d107      	bne.n	8003724 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4313      	orrs	r3, r2
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	2b04      	cmp	r3, #4
 800374c:	d117      	bne.n	800377e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00e      	beq.n	800377e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8bd 	bl	80038e0 <DMA_CheckFifoParam>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800377a:	2301      	movs	r3, #1
 800377c:	e016      	b.n	80037ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f874 	bl	8003874 <DMA_CalcBaseAndBitshift>
 800378c:	4603      	mov	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003794:	223f      	movs	r2, #63	; 0x3f
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	f010803f 	.word	0xf010803f

080037b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e050      	b.n	800386c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d101      	bne.n	80037da <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
 80037d8:	e048      	b.n	800386c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2221      	movs	r2, #33	; 0x21
 8003818:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f82a 	bl	8003874 <DMA_CalcBaseAndBitshift>
 8003820:	4603      	mov	r3, r0
 8003822:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	223f      	movs	r2, #63	; 0x3f
 800384e:	409a      	lsls	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	3b10      	subs	r3, #16
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <DMA_CalcBaseAndBitshift+0x68>)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d909      	bls.n	80038b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	1d1a      	adds	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	659a      	str	r2, [r3, #88]	; 0x58
 80038b4:	e007      	b.n	80038c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	aaaaaaab 	.word	0xaaaaaaab
 80038dc:	080090fc 	.word	0x080090fc

080038e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11f      	bne.n	800393a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d855      	bhi.n	80039ac <DMA_CheckFifoParam+0xcc>
 8003900:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <DMA_CheckFifoParam+0x28>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	08003919 	.word	0x08003919
 800390c:	0800392b 	.word	0x0800392b
 8003910:	08003919 	.word	0x08003919
 8003914:	080039ad 	.word	0x080039ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d045      	beq.n	80039b0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e042      	b.n	80039b0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003932:	d13f      	bne.n	80039b4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003938:	e03c      	b.n	80039b4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003942:	d121      	bne.n	8003988 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d836      	bhi.n	80039b8 <DMA_CheckFifoParam+0xd8>
 800394a:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <DMA_CheckFifoParam+0x70>)
 800394c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003950:	08003961 	.word	0x08003961
 8003954:	08003967 	.word	0x08003967
 8003958:	08003961 	.word	0x08003961
 800395c:	08003979 	.word	0x08003979
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e02f      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d024      	beq.n	80039bc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003976:	e021      	b.n	80039bc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003980:	d11e      	bne.n	80039c0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003986:	e01b      	b.n	80039c0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d902      	bls.n	8003994 <DMA_CheckFifoParam+0xb4>
 800398e:	2b03      	cmp	r3, #3
 8003990:	d003      	beq.n	800399a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003992:	e018      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	e015      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00e      	beq.n	80039c4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
      break;
 80039aa:	e00b      	b.n	80039c4 <DMA_CheckFifoParam+0xe4>
      break;
 80039ac:	bf00      	nop
 80039ae:	e00a      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      break;
 80039b0:	bf00      	nop
 80039b2:	e008      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      break;
 80039b4:	bf00      	nop
 80039b6:	e006      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      break;
 80039b8:	bf00      	nop
 80039ba:	e004      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      break;
 80039bc:	bf00      	nop
 80039be:	e002      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      break;   
 80039c0:	bf00      	nop
 80039c2:	e000      	b.n	80039c6 <DMA_CheckFifoParam+0xe6>
      break;
 80039c4:	bf00      	nop
    }
  } 
  
  return status; 
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e03b      	b.n	8003a5e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f833 	bl	8003a66 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	f023 0107 	bic.w	r1, r3, #7
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68d1      	ldr	r1, [r2, #12]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af02      	add	r7, sp, #8
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_DMA2D_Start+0x1c>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e018      	b.n	8003ac8 <HAL_DMA2D_Start+0x4e>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f989 	bl	8003dc8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d056      	beq.n	8003b9a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003aec:	f7fd fa26 	bl	8000f3c <HAL_GetTick>
 8003af0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003af2:	e04b      	b.n	8003b8c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d023      	beq.n	8003b4e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	f043 0202 	orr.w	r2, r3, #2
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2221      	movs	r2, #33	; 0x21
 8003b38:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0a5      	b.n	8003c9a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b54:	d01a      	beq.n	8003b8c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003b56:	f7fd f9f1 	bl	8000f3c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <HAL_DMA2D_PollForTransfer+0x9c>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10f      	bne.n	8003b8c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e086      	b.n	8003c9a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ac      	beq.n	8003af4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d061      	beq.n	8003c80 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bbc:	f7fd f9be 	bl	8000f3c <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003bc2:	e056      	b.n	8003c72 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02e      	beq.n	8003c34 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	f043 0204 	orr.w	r2, r3, #4
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	f043 0202 	orr.w	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	f043 0201 	orr.w	r2, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2229      	movs	r2, #41	; 0x29
 8003c1e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2204      	movs	r2, #4
 8003c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e032      	b.n	8003c9a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3a:	d01a      	beq.n	8003c72 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003c3c:	f7fd f97e 	bl	8000f3c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <HAL_DMA2D_PollForTransfer+0x182>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e013      	b.n	8003c9a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0a1      	beq.n	8003bc4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2212      	movs	r2, #18
 8003c86:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_DMA2D_ConfigLayer+0x20>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e079      	b.n	8003db8 <HAL_DMA2D_ConfigLayer+0x114>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	3318      	adds	r3, #24
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003cee:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003cf0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b0a      	cmp	r3, #10
 8003cf8:	d003      	beq.n	8003d02 <HAL_DMA2D_ConfigLayer+0x5e>
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	d107      	bne.n	8003d12 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e005      	b.n	8003d1e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	061b      	lsls	r3, r3, #24
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d120      	bne.n	8003d66 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	ea02 0103 	and.w	r1, r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b0a      	cmp	r3, #10
 8003d4c:	d003      	beq.n	8003d56 <HAL_DMA2D_ConfigLayer+0xb2>
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b09      	cmp	r3, #9
 8003d54:	d127      	bne.n	8003da6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
 8003d64:	e01f      	b.n	8003da6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	ea02 0103 	and.w	r1, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b0a      	cmp	r3, #10
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA2D_ConfigLayer+0xf4>
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d106      	bne.n	8003da6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003da4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	ff03000f 	.word	0xff03000f

08003dc8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b08b      	sub	sp, #44	; 0x2c
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	041a      	lsls	r2, r3, #16
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e00:	d174      	bne.n	8003eec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e10:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e18:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d108      	bne.n	8003e3a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
 8003e38:	e053      	b.n	8003ee2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d106      	bne.n	8003e50 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	e048      	b.n	8003ee2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d111      	bne.n	8003e7c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	0cdb      	lsrs	r3, r3, #19
 8003e5c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	0a9b      	lsrs	r3, r3, #10
 8003e62:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	08db      	lsrs	r3, r3, #3
 8003e68:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	02db      	lsls	r3, r3, #11
 8003e72:	4313      	orrs	r3, r2
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7a:	e032      	b.n	8003ee2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d117      	bne.n	8003eb4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	0fdb      	lsrs	r3, r3, #31
 8003e88:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	0cdb      	lsrs	r3, r3, #19
 8003e8e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	0adb      	lsrs	r3, r3, #11
 8003e94:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	08db      	lsrs	r3, r3, #3
 8003e9a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	029b      	lsls	r3, r3, #10
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	03db      	lsls	r3, r3, #15
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb2:	e016      	b.n	8003ee2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	0f1b      	lsrs	r3, r3, #28
 8003eb8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	0d1b      	lsrs	r3, r3, #20
 8003ebe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	0b1b      	lsrs	r3, r3, #12
 8003ec4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	011a      	lsls	r2, r3, #4
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	031b      	lsls	r3, r3, #12
 8003eda:	4313      	orrs	r3, r2
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003eea:	e003      	b.n	8003ef4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	60da      	str	r2, [r3, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	372c      	adds	r7, #44	; 0x2c
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	019a      	lsls	r2, r3, #6
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f40:	f7fc fffc 	bl	8000f3c <HAL_GetTick>
 8003f44:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003f46:	e009      	b.n	8003f5c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003f48:	f7fc fff8 	bl	8000f3c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f56:	d901      	bls.n	8003f5c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e015      	b.n	8003f88 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0ee      	beq.n	8003f48 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	019a      	lsls	r2, r3, #6
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	ea42 0103 	orr.w	r1, r2, r3
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	041a      	lsls	r2, r3, #16
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e108      	b.n	80041b6 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7c5b      	ldrb	r3, [r3, #17]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f97c 	bl	80042ac <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003fce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe2:	f7fc ffab 	bl	8000f3c <HAL_GetTick>
 8003fe6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003fe8:	e009      	b.n	8003ffe <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003fea:	f7fc ffa7 	bl	8000f3c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ff8:	d901      	bls.n	8003ffe <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0db      	b.n	80041b6 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0ed      	beq.n	8003fea <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800401e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8004022:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	009a      	lsls	r2, r3, #2
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	02db      	lsls	r3, r3, #11
 800403a:	431a      	orrs	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004076:	f7fc ff61 	bl	8000f3c <HAL_GetTick>
 800407a:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800407c:	e009      	b.n	8004092 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800407e:	f7fc ff5d 	bl	8000f3c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408c:	d901      	bls.n	8004092 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e091      	b.n	80041b6 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ed      	beq.n	800407e <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0206 	orr.w	r2, r2, #6
 80040b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0203 	bic.w	r2, r2, #3
 80040c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0201 	orr.w	r2, r2, #1
 80040e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0203 	bic.w	r2, r2, #3
 80040f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800411c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6899      	ldr	r1, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_DSI_Init+0x1ae>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	e000      	b.n	8004140 <HAL_DSI_Init+0x1b0>
 800413e:	2301      	movs	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_DSI_Init+0x230>)
 8004146:	fb02 f203 	mul.w	r2, r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	409a      	lsls	r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004176:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	430a      	orrs	r2, r1
 800418a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2200      	movs	r2, #0
 800419e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3720      	adds	r7, #32
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	003d0900 	.word	0x003d0900

080041c4 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e066      	b.n	80042a4 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2203      	movs	r2, #3
 80041da:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0208 	bic.w	r2, r2, #8
 80041f0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0206 	bic.w	r2, r2, #6
 8004236:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004276:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f818 	bl	80042c0 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7c1b      	ldrb	r3, [r3, #16]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_DSI_ConfigVideoMode+0x16>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e1f6      	b.n	80046d8 <HAL_DSI_ConfigVideoMode+0x404>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0203 	bic.w	r2, r2, #3
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004348:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800436a:	f023 031f 	bic.w	r3, r3, #31
 800436e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8004390:	f023 031f 	bic.w	r3, r3, #31
 8004394:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0203 	bic.w	r2, r2, #3
 80043b6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68d9      	ldr	r1, [r3, #12]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0207 	bic.w	r2, r2, #7
 80043d8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6959      	ldr	r1, [r3, #20]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 020f 	bic.w	r2, r2, #15
 8004406:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6919      	ldr	r1, [r3, #16]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 020e 	bic.w	r2, r2, #14
 800442a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	005a      	lsls	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d110      	bne.n	8004470 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6919      	ldr	r1, [r3, #16]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6812      	ldr	r2, [r2, #0]
 800447a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800447e:	f023 030f 	bic.w	r3, r3, #15
 8004482:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80044a4:	f023 030f 	bic.w	r3, r3, #15
 80044a8:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044ce:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044f0:	f023 0303 	bic.w	r3, r3, #3
 80044f4:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800453c:	f023 0303 	bic.w	r3, r3, #3
 8004540:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004562:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004566:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80045aa:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6999      	ldr	r1, [r3, #24]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	041a      	lsls	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045ce:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6999      	ldr	r1, [r3, #24]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004634:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7c1b      	ldrb	r3, [r3, #16]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_DSI_ConfigPhyTimer+0x16>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e058      	b.n	80047ac <HAL_DSI_ConfigPhyTimer+0xc8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4293      	cmp	r3, r2
 800470a:	bf38      	it	cc
 800470c:	4613      	movcc	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004720:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	041a      	lsls	r2, r3, #16
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800474e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004788:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	021a      	lsls	r2, r3, #8
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	7c1b      	ldrb	r3, [r3, #16]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_DSI_Start+0x14>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e02b      	b.n	8004824 <HAL_DSI_Start+0x6c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0208 	orr.w	r2, r2, #8
 8004808:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	7c1b      	ldrb	r3, [r3, #16]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_DSI_ShortWrite+0x1a>
 8004846:	2302      	movs	r3, #2
 8004848:	e010      	b.n	800486c <HAL_DSI_ShortWrite+0x3c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fb69 	bl	8003f32 <DSI_ShortWrite>
 8004860:	4603      	mov	r3, r0
 8004862:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	741a      	strb	r2, [r3, #16]

  return status;
 800486a:	7dfb      	ldrb	r3, [r7, #23]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08c      	sub	sp, #48	; 0x30
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	7c1b      	ldrb	r3, [r3, #16]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_DSI_LongWrite+0x1e>
 800488e:	2302      	movs	r3, #2
 8004890:	e084      	b.n	800499c <HAL_DSI_LongWrite+0x128>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004898:	f7fc fb50 	bl	8000f3c <HAL_GetTick>
 800489c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800489e:	e00c      	b.n	80048ba <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80048a0:	f7fc fb4c 	bl	8000f3c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ae:	d904      	bls.n	80048ba <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e070      	b.n	800499c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0eb      	beq.n	80048a0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	bf28      	it	cs
 80048d2:	2303      	movcs	r3, #3
 80048d4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	e00f      	b.n	80048fc <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	4413      	add	r3, r2
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	3301      	adds	r3, #1
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	3301      	adds	r3, #1
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	429a      	cmp	r2, r3
 8004902:	d3eb      	bcc.n	80048dc <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4413      	add	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800491c:	e028      	b.n	8004970 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2b04      	cmp	r3, #4
 8004922:	bf28      	it	cs
 8004924:	2304      	movcs	r3, #4
 8004926:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800492c:	2300      	movs	r3, #0
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	e00e      	b.n	8004950 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	4413      	add	r3, r2
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	4313      	orrs	r3, r2
 8004948:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	3301      	adds	r3, #1
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	6a3a      	ldr	r2, [r7, #32]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	429a      	cmp	r2, r3
 8004956:	d3ec      	bcc.n	8004932 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1d3      	bne.n	800491e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800497e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004986:	b2db      	uxtb	r3, r3
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	f7ff fab6 	bl	8003f00 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3728      	adds	r7, #40	; 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <HAL_FLASH_Program+0xa0>)
 80049b8:	7e1b      	ldrb	r3, [r3, #24]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_FLASH_Program+0x1e>
 80049be:	2302      	movs	r3, #2
 80049c0:	e03b      	b.n	8004a3a <HAL_FLASH_Program+0x96>
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_FLASH_Program+0xa0>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049cc:	f000 f870 	bl	8004ab0 <FLASH_WaitForLastOperation>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d12b      	bne.n	8004a32 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80049e0:	783b      	ldrb	r3, [r7, #0]
 80049e2:	4619      	mov	r1, r3
 80049e4:	68b8      	ldr	r0, [r7, #8]
 80049e6:	f000 f919 	bl	8004c1c <FLASH_Program_Byte>
 80049ea:	e016      	b.n	8004a1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d105      	bne.n	80049fe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80049f2:	883b      	ldrh	r3, [r7, #0]
 80049f4:	4619      	mov	r1, r3
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f000 f8ec 	bl	8004bd4 <FLASH_Program_HalfWord>
 80049fc:	e00d      	b.n	8004a1a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d105      	bne.n	8004a10 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4619      	mov	r1, r3
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f000 f8c1 	bl	8004b90 <FLASH_Program_Word>
 8004a0e:	e004      	b.n	8004a1a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a14:	68b8      	ldr	r0, [r7, #8]
 8004a16:	f000 f88b 	bl	8004b30 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a1a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a1e:	f000 f847 	bl	8004ab0 <FLASH_WaitForLastOperation>
 8004a22:	4603      	mov	r3, r0
 8004a24:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <HAL_FLASH_Program+0xa4>)
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <HAL_FLASH_Program+0xa4>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <HAL_FLASH_Program+0xa0>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000800 	.word	0x20000800
 8004a48:	40023c00 	.word	0x40023c00

08004a4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a56:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_FLASH_Unlock+0x38>)
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da0b      	bge.n	8004a76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_FLASH_Unlock+0x38>)
 8004a60:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_FLASH_Unlock+0x3c>)
 8004a62:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a64:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <HAL_FLASH_Unlock+0x38>)
 8004a66:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <HAL_FLASH_Unlock+0x40>)
 8004a68:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_FLASH_Unlock+0x38>)
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	da01      	bge.n	8004a76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a76:	79fb      	ldrb	r3, [r7, #7]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40023c00 	.word	0x40023c00
 8004a88:	45670123 	.word	0x45670123
 8004a8c:	cdef89ab 	.word	0xcdef89ab

08004a90 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_FLASH_Lock+0x1c>)
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	4a04      	ldr	r2, [pc, #16]	; (8004aac <HAL_FLASH_Lock+0x1c>)
 8004a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40023c00 	.word	0x40023c00

08004ab0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <FLASH_WaitForLastOperation+0x78>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac2:	f7fc fa3b 	bl	8000f3c <HAL_GetTick>
 8004ac6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004ac8:	e010      	b.n	8004aec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad0:	d00c      	beq.n	8004aec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <FLASH_WaitForLastOperation+0x38>
 8004ad8:	f7fc fa30 	bl	8000f3c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d201      	bcs.n	8004aec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e019      	b.n	8004b20 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <FLASH_WaitForLastOperation+0x7c>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e8      	bne.n	8004aca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <FLASH_WaitForLastOperation+0x7c>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <FLASH_WaitForLastOperation+0x7c>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004b0a:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <FLASH_WaitForLastOperation+0x7c>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b16:	f000 f8a3 	bl	8004c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
  
}  
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000800 	.word	0x20000800
 8004b2c:	40023c00 	.word	0x40023c00

08004b30 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b30:	b490      	push	{r4, r7}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <FLASH_Program_DoubleWord+0x5c>)
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <FLASH_Program_DoubleWord+0x5c>)
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <FLASH_Program_DoubleWord+0x5c>)
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <FLASH_Program_DoubleWord+0x5c>)
 8004b4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004b52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <FLASH_Program_DoubleWord+0x5c>)
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	4a0c      	ldr	r2, [pc, #48]	; (8004b8c <FLASH_Program_DoubleWord+0x5c>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004b66:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004b6a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	f04f 0400 	mov.w	r4, #0
 8004b76:	0013      	movs	r3, r2
 8004b78:	2400      	movs	r4, #0
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	3204      	adds	r2, #4
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc90      	pop	{r4, r7}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40023c00 	.word	0x40023c00

08004b90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <FLASH_Program_Word+0x40>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40023c00 	.word	0x40023c00

08004bd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004be0:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	4a06      	ldr	r2, [pc, #24]	; (8004c18 <FLASH_Program_HalfWord+0x44>)
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	801a      	strh	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40023c00 	.word	0x40023c00

08004c1c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <FLASH_Program_Byte+0x40>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	701a      	strb	r2, [r3, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40023c00 	.word	0x40023c00

08004c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c70:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f043 0310 	orr.w	r3, r3, #16
 8004c78:	4a2b      	ldr	r2, [pc, #172]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004c7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004c7c:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004c7e:	2210      	movs	r2, #16
 8004c80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0320 	and.w	r3, r3, #32
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004c8e:	4b26      	ldr	r3, [pc, #152]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f043 0308 	orr.w	r3, r3, #8
 8004c96:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004c98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004c9a:	4b22      	ldr	r3, [pc, #136]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004ca0:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004cac:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cba:	2240      	movs	r2, #64	; 0x40
 8004cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004cbe:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004cca:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f043 0302 	orr.w	r3, r3, #2
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cd4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cd8:	2280      	movs	r2, #128	; 0x80
 8004cda:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d009      	beq.n	8004cfc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	4a0d      	ldr	r2, [pc, #52]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cfa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f043 0320 	orr.w	r3, r3, #32
 8004d10:	4a05      	ldr	r2, [pc, #20]	; (8004d28 <FLASH_SetErrorCode+0xc8>)
 8004d12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <FLASH_SetErrorCode+0xc4>)
 8004d16:	2202      	movs	r2, #2
 8004d18:	60da      	str	r2, [r3, #12]
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	40023c00 	.word	0x40023c00
 8004d28:	20000800 	.word	0x20000800

08004d2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d3e:	4b32      	ldr	r3, [pc, #200]	; (8004e08 <HAL_FLASHEx_Erase+0xdc>)
 8004d40:	7e1b      	ldrb	r3, [r3, #24]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_FLASHEx_Erase+0x1e>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e05a      	b.n	8004e00 <HAL_FLASHEx_Erase+0xd4>
 8004d4a:	4b2f      	ldr	r3, [pc, #188]	; (8004e08 <HAL_FLASHEx_Erase+0xdc>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d54:	f7ff feac 	bl	8004ab0 <FLASH_WaitForLastOperation>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d14a      	bne.n	8004df8 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d68:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d117      	bne.n	8004da2 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f000 f846 	bl	8004e10 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d88:	f7ff fe92 	bl	8004ab0 <FLASH_WaitForLastOperation>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004d90:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <HAL_FLASHEx_Erase+0xe0>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_FLASHEx_Erase+0xe0>)
 8004d96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d9a:	f023 0304 	bic.w	r3, r3, #4
 8004d9e:	6113      	str	r3, [r2, #16]
 8004da0:	e028      	b.n	8004df4 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	e01c      	b.n	8004de4 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	4619      	mov	r1, r3
 8004db2:	68b8      	ldr	r0, [r7, #8]
 8004db4:	f000 f866 	bl	8004e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004db8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004dbc:	f7ff fe78 	bl	8004ab0 <FLASH_WaitForLastOperation>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_FLASHEx_Erase+0xe0>)
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <HAL_FLASHEx_Erase+0xe0>)
 8004dca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004dce:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	601a      	str	r2, [r3, #0]
          break;
 8004ddc:	e00a      	b.n	8004df4 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	3301      	adds	r3, #1
 8004de2:	60bb      	str	r3, [r7, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4413      	add	r3, r2
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d3da      	bcc.n	8004daa <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004df4:	f000 f894 	bl	8004f20 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_FLASHEx_Erase+0xdc>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	761a      	strb	r2, [r3, #24]

  return status;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000800 	.word	0x20000800
 8004e0c:	40023c00 	.word	0x40023c00

08004e10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	6039      	str	r1, [r7, #0]
 8004e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e26:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d108      	bne.n	8004e40 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8004e2e:	4b14      	ldr	r3, [pc, #80]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e38:	f043 0304 	orr.w	r3, r3, #4
 8004e3c:	6113      	str	r3, [r2, #16]
 8004e3e:	e00f      	b.n	8004e60 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d106      	bne.n	8004e54 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8004e46:	4b0e      	ldr	r3, [pc, #56]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	4a0d      	ldr	r2, [pc, #52]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e4c:	f043 0304 	orr.w	r3, r3, #4
 8004e50:	6113      	str	r3, [r2, #16]
 8004e52:	e005      	b.n	8004e60 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	4a05      	ldr	r2, [pc, #20]	; (8004e80 <FLASH_MassErase+0x70>)
 8004e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e70:	6113      	str	r3, [r2, #16]
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40023c00 	.word	0x40023c00

08004e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e010      	b.n	8004ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d103      	bne.n	8004eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	e009      	b.n	8004ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d103      	bne.n	8004ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	e002      	b.n	8004ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b0b      	cmp	r3, #11
 8004ec6:	d902      	bls.n	8004ece <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	490f      	ldr	r1, [pc, #60]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004eec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ef0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4313      	orrs	r3, r2
 8004efc:	4a07      	ldr	r2, [pc, #28]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004efe:	f043 0302 	orr.w	r3, r3, #2
 8004f02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <FLASH_Erase_Sector+0x98>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0e:	6113      	str	r3, [r2, #16]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40023c00 	.word	0x40023c00

08004f20 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004f24:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d017      	beq.n	8004f60 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004f30:	4b1d      	ldr	r3, [pc, #116]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1c      	ldr	r2, [pc, #112]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f3a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a19      	ldr	r2, [pc, #100]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a16      	ldr	r2, [pc, #88]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f52:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f54:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f5e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d017      	beq.n	8004f9c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f76:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f8e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a04      	ldr	r2, [pc, #16]	; (8004fa8 <FLASH_FlushCaches+0x88>)
 8004f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f9a:	6013      	str	r3, [r2, #0]
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40023c00 	.word	0x40023c00

08004fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	e177      	b.n	80052b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fc8:	2201      	movs	r2, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	f040 8166 	bne.w	80052b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d00b      	beq.n	8005006 <HAL_GPIO_Init+0x5a>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d007      	beq.n	8005006 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ffa:	2b11      	cmp	r3, #17
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b12      	cmp	r3, #18
 8005004:	d130      	bne.n	8005068 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	2203      	movs	r2, #3
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800503c:	2201      	movs	r2, #1
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4013      	ands	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 0201 	and.w	r2, r3, #1
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	2203      	movs	r2, #3
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d003      	beq.n	80050a8 <HAL_GPIO_Init+0xfc>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b12      	cmp	r3, #18
 80050a6:	d123      	bne.n	80050f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	08da      	lsrs	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3208      	adds	r2, #8
 80050b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	220f      	movs	r2, #15
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	08da      	lsrs	r2, r3, #3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	3208      	adds	r2, #8
 80050ea:	69b9      	ldr	r1, [r7, #24]
 80050ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	2203      	movs	r2, #3
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0203 	and.w	r2, r3, #3
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80c0 	beq.w	80052b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	4b65      	ldr	r3, [pc, #404]	; (80052cc <HAL_GPIO_Init+0x320>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	4a64      	ldr	r2, [pc, #400]	; (80052cc <HAL_GPIO_Init+0x320>)
 800513c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005140:	6453      	str	r3, [r2, #68]	; 0x44
 8005142:	4b62      	ldr	r3, [pc, #392]	; (80052cc <HAL_GPIO_Init+0x320>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800514e:	4a60      	ldr	r2, [pc, #384]	; (80052d0 <HAL_GPIO_Init+0x324>)
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	3302      	adds	r3, #2
 8005156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	220f      	movs	r2, #15
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4013      	ands	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a57      	ldr	r2, [pc, #348]	; (80052d4 <HAL_GPIO_Init+0x328>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d037      	beq.n	80051ea <HAL_GPIO_Init+0x23e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a56      	ldr	r2, [pc, #344]	; (80052d8 <HAL_GPIO_Init+0x32c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d031      	beq.n	80051e6 <HAL_GPIO_Init+0x23a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a55      	ldr	r2, [pc, #340]	; (80052dc <HAL_GPIO_Init+0x330>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d02b      	beq.n	80051e2 <HAL_GPIO_Init+0x236>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a54      	ldr	r2, [pc, #336]	; (80052e0 <HAL_GPIO_Init+0x334>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d025      	beq.n	80051de <HAL_GPIO_Init+0x232>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a53      	ldr	r2, [pc, #332]	; (80052e4 <HAL_GPIO_Init+0x338>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01f      	beq.n	80051da <HAL_GPIO_Init+0x22e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a52      	ldr	r2, [pc, #328]	; (80052e8 <HAL_GPIO_Init+0x33c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d019      	beq.n	80051d6 <HAL_GPIO_Init+0x22a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a51      	ldr	r2, [pc, #324]	; (80052ec <HAL_GPIO_Init+0x340>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_GPIO_Init+0x226>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a50      	ldr	r2, [pc, #320]	; (80052f0 <HAL_GPIO_Init+0x344>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00d      	beq.n	80051ce <HAL_GPIO_Init+0x222>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a4f      	ldr	r2, [pc, #316]	; (80052f4 <HAL_GPIO_Init+0x348>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <HAL_GPIO_Init+0x21e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a4e      	ldr	r2, [pc, #312]	; (80052f8 <HAL_GPIO_Init+0x34c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_GPIO_Init+0x21a>
 80051c2:	2309      	movs	r3, #9
 80051c4:	e012      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051c6:	230a      	movs	r3, #10
 80051c8:	e010      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051ca:	2308      	movs	r3, #8
 80051cc:	e00e      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051ce:	2307      	movs	r3, #7
 80051d0:	e00c      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051d2:	2306      	movs	r3, #6
 80051d4:	e00a      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051d6:	2305      	movs	r3, #5
 80051d8:	e008      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051da:	2304      	movs	r3, #4
 80051dc:	e006      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051de:	2303      	movs	r3, #3
 80051e0:	e004      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e002      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_GPIO_Init+0x240>
 80051ea:	2300      	movs	r3, #0
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	f002 0203 	and.w	r2, r2, #3
 80051f2:	0092      	lsls	r2, r2, #2
 80051f4:	4093      	lsls	r3, r2
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051fc:	4934      	ldr	r1, [pc, #208]	; (80052d0 <HAL_GPIO_Init+0x324>)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	3302      	adds	r3, #2
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800520a:	4b3c      	ldr	r3, [pc, #240]	; (80052fc <HAL_GPIO_Init+0x350>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	43db      	mvns	r3, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800522e:	4a33      	ldr	r2, [pc, #204]	; (80052fc <HAL_GPIO_Init+0x350>)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005234:	4b31      	ldr	r3, [pc, #196]	; (80052fc <HAL_GPIO_Init+0x350>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005258:	4a28      	ldr	r2, [pc, #160]	; (80052fc <HAL_GPIO_Init+0x350>)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800525e:	4b27      	ldr	r3, [pc, #156]	; (80052fc <HAL_GPIO_Init+0x350>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	43db      	mvns	r3, r3
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	4013      	ands	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005282:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <HAL_GPIO_Init+0x350>)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005288:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <HAL_GPIO_Init+0x350>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052ac:	4a13      	ldr	r2, [pc, #76]	; (80052fc <HAL_GPIO_Init+0x350>)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3301      	adds	r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	f67f ae84 	bls.w	8004fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052c0:	bf00      	nop
 80052c2:	3724      	adds	r7, #36	; 0x24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40023800 	.word	0x40023800
 80052d0:	40013800 	.word	0x40013800
 80052d4:	40020000 	.word	0x40020000
 80052d8:	40020400 	.word	0x40020400
 80052dc:	40020800 	.word	0x40020800
 80052e0:	40020c00 	.word	0x40020c00
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40021400 	.word	0x40021400
 80052ec:	40021800 	.word	0x40021800
 80052f0:	40021c00 	.word	0x40021c00
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40022400 	.word	0x40022400
 80052fc:	40013c00 	.word	0x40013c00

08005300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	807b      	strh	r3, [r7, #2]
 800530c:	4613      	mov	r3, r2
 800530e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005310:	787b      	ldrb	r3, [r7, #1]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005316:	887a      	ldrh	r2, [r7, #2]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800531c:	e003      	b.n	8005326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	041a      	lsls	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	619a      	str	r2, [r3, #24]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e0bf      	b.n	80054c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8ba 	bl	80054d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005376:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6999      	ldr	r1, [r3, #24]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800538c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b4a      	ldr	r3, [pc, #296]	; (80054d0 <HAL_LTDC_Init+0x19c>)
 80053a8:	400b      	ands	r3, r1
 80053aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68d9      	ldr	r1, [r3, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b3e      	ldr	r3, [pc, #248]	; (80054d0 <HAL_LTDC_Init+0x19c>)
 80053d6:	400b      	ands	r3, r1
 80053d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68d9      	ldr	r1, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6919      	ldr	r1, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b33      	ldr	r3, [pc, #204]	; (80054d0 <HAL_LTDC_Init+0x19c>)
 8005404:	400b      	ands	r3, r1
 8005406:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6919      	ldr	r1, [r3, #16]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6959      	ldr	r1, [r3, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <HAL_LTDC_Init+0x19c>)
 8005432:	400b      	ands	r3, r1
 8005434:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6959      	ldr	r1, [r3, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005464:	041b      	lsls	r3, r3, #16
 8005466:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0206 	orr.w	r2, r2, #6
 80054a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	f000f800 	.word	0xf000f800

080054d4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054e8:	b5b0      	push	{r4, r5, r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_LTDC_ConfigLayer+0x1a>
 80054fe:	2302      	movs	r3, #2
 8005500:	e02c      	b.n	800555c <HAL_LTDC_ConfigLayer+0x74>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2134      	movs	r1, #52	; 0x34
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	4413      	add	r3, r2
 800551e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4614      	mov	r4, r2
 8005526:	461d      	mov	r5, r3
 8005528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800552a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800552c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800552e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f811 	bl	8005564 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bdb0      	pop	{r4, r5, r7, pc}

08005564 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	0c1b      	lsrs	r3, r3, #16
 800557c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005580:	4413      	add	r3, r2
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	01db      	lsls	r3, r3, #7
 8005590:	4413      	add	r3, r2
 8005592:	3384      	adds	r3, #132	; 0x84
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	4611      	mov	r1, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	01d2      	lsls	r2, r2, #7
 80055a0:	440a      	add	r2, r1
 80055a2:	3284      	adds	r2, #132	; 0x84
 80055a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ba:	4413      	add	r3, r2
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	440b      	add	r3, r1
 80055ca:	3384      	adds	r3, #132	; 0x84
 80055cc:	4619      	mov	r1, r3
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055e2:	4413      	add	r3, r2
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	01db      	lsls	r3, r3, #7
 80055f2:	4413      	add	r3, r2
 80055f4:	3384      	adds	r3, #132	; 0x84
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	4611      	mov	r1, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	01d2      	lsls	r2, r2, #7
 8005602:	440a      	add	r2, r1
 8005604:	3284      	adds	r2, #132	; 0x84
 8005606:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800560a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800561a:	4413      	add	r3, r2
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4619      	mov	r1, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	01db      	lsls	r3, r3, #7
 8005628:	440b      	add	r3, r1
 800562a:	3384      	adds	r3, #132	; 0x84
 800562c:	4619      	mov	r1, r3
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4313      	orrs	r3, r2
 8005632:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	01db      	lsls	r3, r3, #7
 800563e:	4413      	add	r3, r2
 8005640:	3384      	adds	r3, #132	; 0x84
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	4611      	mov	r1, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	01d2      	lsls	r2, r2, #7
 800564e:	440a      	add	r2, r1
 8005650:	3284      	adds	r2, #132	; 0x84
 8005652:	f023 0307 	bic.w	r3, r3, #7
 8005656:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	01db      	lsls	r3, r3, #7
 8005662:	4413      	add	r3, r2
 8005664:	3384      	adds	r3, #132	; 0x84
 8005666:	461a      	mov	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	061b      	lsls	r3, r3, #24
 8005688:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	01db      	lsls	r3, r3, #7
 8005694:	4413      	add	r3, r2
 8005696:	3384      	adds	r3, #132	; 0x84
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	01db      	lsls	r3, r3, #7
 80056a4:	4413      	add	r3, r2
 80056a6:	3384      	adds	r3, #132	; 0x84
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056b4:	461a      	mov	r2, r3
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	01db      	lsls	r3, r3, #7
 80056c8:	440b      	add	r3, r1
 80056ca:	3384      	adds	r3, #132	; 0x84
 80056cc:	4619      	mov	r1, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	01db      	lsls	r3, r3, #7
 80056de:	4413      	add	r3, r2
 80056e0:	3384      	adds	r3, #132	; 0x84
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	4611      	mov	r1, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	01d2      	lsls	r2, r2, #7
 80056ee:	440a      	add	r2, r1
 80056f0:	3284      	adds	r2, #132	; 0x84
 80056f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056f6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	01db      	lsls	r3, r3, #7
 8005702:	4413      	add	r3, r2
 8005704:	3384      	adds	r3, #132	; 0x84
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	01db      	lsls	r3, r3, #7
 8005718:	4413      	add	r3, r2
 800571a:	3384      	adds	r3, #132	; 0x84
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	4611      	mov	r1, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	01d2      	lsls	r2, r2, #7
 8005728:	440a      	add	r2, r1
 800572a:	3284      	adds	r2, #132	; 0x84
 800572c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005730:	f023 0307 	bic.w	r3, r3, #7
 8005734:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	6809      	ldr	r1, [r1, #0]
 8005742:	4608      	mov	r0, r1
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	01c9      	lsls	r1, r1, #7
 8005748:	4401      	add	r1, r0
 800574a:	3184      	adds	r1, #132	; 0x84
 800574c:	4313      	orrs	r3, r2
 800574e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	01db      	lsls	r3, r3, #7
 800575a:	4413      	add	r3, r2
 800575c:	3384      	adds	r3, #132	; 0x84
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	01db      	lsls	r3, r3, #7
 800576a:	4413      	add	r3, r2
 800576c:	3384      	adds	r3, #132	; 0x84
 800576e:	461a      	mov	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	01db      	lsls	r3, r3, #7
 800577e:	4413      	add	r3, r2
 8005780:	3384      	adds	r3, #132	; 0x84
 8005782:	461a      	mov	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005792:	2304      	movs	r3, #4
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	e01b      	b.n	80057d0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d102      	bne.n	80057a6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80057a0:	2303      	movs	r3, #3
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	e014      	b.n	80057d0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d00b      	beq.n	80057c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d007      	beq.n	80057c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d003      	beq.n	80057c6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80057c2:	2b07      	cmp	r3, #7
 80057c4:	d102      	bne.n	80057cc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80057c6:	2302      	movs	r3, #2
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	e001      	b.n	80057d0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80057cc:	2301      	movs	r3, #1
 80057ce:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	01db      	lsls	r3, r3, #7
 80057da:	4413      	add	r3, r2
 80057dc:	3384      	adds	r3, #132	; 0x84
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	4611      	mov	r1, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	01d2      	lsls	r2, r2, #7
 80057ea:	440a      	add	r2, r1
 80057ec:	3284      	adds	r2, #132	; 0x84
 80057ee:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80057f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	041a      	lsls	r2, r3, #16
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	1acb      	subs	r3, r1, r3
 800580a:	69f9      	ldr	r1, [r7, #28]
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	3303      	adds	r3, #3
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	6809      	ldr	r1, [r1, #0]
 8005816:	4608      	mov	r0, r1
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	01c9      	lsls	r1, r1, #7
 800581c:	4401      	add	r1, r0
 800581e:	3184      	adds	r1, #132	; 0x84
 8005820:	4313      	orrs	r3, r2
 8005822:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	4413      	add	r3, r2
 8005830:	3384      	adds	r3, #132	; 0x84
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	4611      	mov	r1, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	01d2      	lsls	r2, r2, #7
 800583e:	440a      	add	r2, r1
 8005840:	3284      	adds	r2, #132	; 0x84
 8005842:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	01db      	lsls	r3, r3, #7
 8005856:	4413      	add	r3, r2
 8005858:	3384      	adds	r3, #132	; 0x84
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	01db      	lsls	r3, r3, #7
 800586c:	4413      	add	r3, r2
 800586e:	3384      	adds	r3, #132	; 0x84
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	4611      	mov	r1, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	01d2      	lsls	r2, r2, #7
 800587c:	440a      	add	r2, r1
 800587e:	3284      	adds	r2, #132	; 0x84
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	6013      	str	r3, [r2, #0]
}
 8005886:	bf00      	nop
 8005888:	3724      	adds	r7, #36	; 0x24
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80058a4:	2200      	movs	r2, #0
 80058a6:	e001      	b.n	80058ac <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80058a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80058b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058bc:	e000      	b.n	80058c0 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80058be:	2200      	movs	r2, #0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80058cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058d0:	e000      	b.n	80058d4 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80058d2:	2200      	movs	r2, #0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	4413      	add	r3, r2
 80058ec:	1e5a      	subs	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	441a      	add	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	4413      	add	r3, r2
 8005902:	1e5a      	subs	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	441a      	add	r2, r3
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	441a      	add	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	4413      	add	r3, r2
 800591e:	1e5a      	subs	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
	...

08005934 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	2300      	movs	r3, #0
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594c:	6413      	str	r3, [r2, #64]	; 0x40
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005960:	f7fb faec 	bl	8000f3c <HAL_GetTick>
 8005964:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005966:	e009      	b.n	800597c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005968:	f7fb fae8 	bl	8000f3c <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005976:	d901      	bls.n	800597c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e01f      	b.n	80059bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800597c:	4b13      	ldr	r3, [pc, #76]	; (80059cc <HAL_PWREx_EnableOverDrive+0x98>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005988:	d1ee      	bne.n	8005968 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005990:	f7fb fad4 	bl	8000f3c <HAL_GetTick>
 8005994:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005996:	e009      	b.n	80059ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005998:	f7fb fad0 	bl	8000f3c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059a6:	d901      	bls.n	80059ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e007      	b.n	80059bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <HAL_PWREx_EnableOverDrive+0x98>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059b8:	d1ee      	bne.n	8005998 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40023800 	.word	0x40023800
 80059c8:	420e0040 	.word	0x420e0040
 80059cc:	40007000 	.word	0x40007000
 80059d0:	420e0044 	.word	0x420e0044

080059d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0cc      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059e8:	4b68      	ldr	r3, [pc, #416]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d90c      	bls.n	8005a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b65      	ldr	r3, [pc, #404]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fe:	4b63      	ldr	r3, [pc, #396]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0b8      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d020      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a28:	4b59      	ldr	r3, [pc, #356]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4a58      	ldr	r2, [pc, #352]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a40:	4b53      	ldr	r3, [pc, #332]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	4a52      	ldr	r2, [pc, #328]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a4c:	4b50      	ldr	r3, [pc, #320]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	494d      	ldr	r1, [pc, #308]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d044      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d107      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a72:	4b47      	ldr	r3, [pc, #284]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d119      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e07f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d003      	beq.n	8005a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a92:	4b3f      	ldr	r3, [pc, #252]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e06f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa2:	4b3b      	ldr	r3, [pc, #236]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e067      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab2:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f023 0203 	bic.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4934      	ldr	r1, [pc, #208]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ac4:	f7fb fa3a 	bl	8000f3c <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005acc:	f7fb fa36 	bl	8000f3c <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e04f      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae2:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 020c 	and.w	r2, r3, #12
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d1eb      	bne.n	8005acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d20c      	bcs.n	8005b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCC_ClockConfig+0x1b8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e032      	b.n	8005b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4916      	ldr	r1, [pc, #88]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	490e      	ldr	r1, [pc, #56]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b5a:	f000 f821 	bl	8005ba0 <HAL_RCC_GetSysClockFreq>
 8005b5e:	4601      	mov	r1, r0
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	4a0a      	ldr	r2, [pc, #40]	; (8005b94 <HAL_RCC_ClockConfig+0x1c0>)
 8005b6c:	5cd3      	ldrb	r3, [r2, r3]
 8005b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <HAL_RCC_ClockConfig+0x1c4>)
 8005b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_ClockConfig+0x1c8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fd fc0a 	bl	8003394 <HAL_InitTick>

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40023c00 	.word	0x40023c00
 8005b90:	40023800 	.word	0x40023800
 8005b94:	080090e4 	.word	0x080090e4
 8005b98:	20000018 	.word	0x20000018
 8005b9c:	2000001c 	.word	0x2000001c

08005ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb6:	4b63      	ldr	r3, [pc, #396]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d007      	beq.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x32>
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d008      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x38>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 80b4 	bne.w	8005d34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005bce:	60bb      	str	r3, [r7, #8]
       break;
 8005bd0:	e0b3      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bd2:	4b5e      	ldr	r3, [pc, #376]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005bd4:	60bb      	str	r3, [r7, #8]
      break;
 8005bd6:	e0b0      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bd8:	4b5a      	ldr	r3, [pc, #360]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005be2:	4b58      	ldr	r3, [pc, #352]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d04a      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bee:	4b55      	ldr	r3, [pc, #340]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	099b      	lsrs	r3, r3, #6
 8005bf4:	f04f 0400 	mov.w	r4, #0
 8005bf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	ea03 0501 	and.w	r5, r3, r1
 8005c04:	ea04 0602 	and.w	r6, r4, r2
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4632      	mov	r2, r6
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	f04f 0400 	mov.w	r4, #0
 8005c14:	0154      	lsls	r4, r2, #5
 8005c16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c1a:	014b      	lsls	r3, r1, #5
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4622      	mov	r2, r4
 8005c20:	1b49      	subs	r1, r1, r5
 8005c22:	eb62 0206 	sbc.w	r2, r2, r6
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	f04f 0400 	mov.w	r4, #0
 8005c2e:	0194      	lsls	r4, r2, #6
 8005c30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c34:	018b      	lsls	r3, r1, #6
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	eb64 0402 	sbc.w	r4, r4, r2
 8005c3c:	f04f 0100 	mov.w	r1, #0
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	00e2      	lsls	r2, r4, #3
 8005c46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c4a:	00d9      	lsls	r1, r3, #3
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4614      	mov	r4, r2
 8005c50:	195b      	adds	r3, r3, r5
 8005c52:	eb44 0406 	adc.w	r4, r4, r6
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	0262      	lsls	r2, r4, #9
 8005c60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005c64:	0259      	lsls	r1, r3, #9
 8005c66:	460b      	mov	r3, r1
 8005c68:	4614      	mov	r4, r2
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f04f 0400 	mov.w	r4, #0
 8005c74:	461a      	mov	r2, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	f7fa fabc 	bl	80001f4 <__aeabi_uldivmod>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e049      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c84:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	099b      	lsrs	r3, r3, #6
 8005c8a:	f04f 0400 	mov.w	r4, #0
 8005c8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	ea03 0501 	and.w	r5, r3, r1
 8005c9a:	ea04 0602 	and.w	r6, r4, r2
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	f04f 0400 	mov.w	r4, #0
 8005caa:	0154      	lsls	r4, r2, #5
 8005cac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005cb0:	014b      	lsls	r3, r1, #5
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	1b49      	subs	r1, r1, r5
 8005cb8:	eb62 0206 	sbc.w	r2, r2, r6
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	f04f 0400 	mov.w	r4, #0
 8005cc4:	0194      	lsls	r4, r2, #6
 8005cc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005cca:	018b      	lsls	r3, r1, #6
 8005ccc:	1a5b      	subs	r3, r3, r1
 8005cce:	eb64 0402 	sbc.w	r4, r4, r2
 8005cd2:	f04f 0100 	mov.w	r1, #0
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	00e2      	lsls	r2, r4, #3
 8005cdc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ce0:	00d9      	lsls	r1, r3, #3
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4614      	mov	r4, r2
 8005ce6:	195b      	adds	r3, r3, r5
 8005ce8:	eb44 0406 	adc.w	r4, r4, r6
 8005cec:	f04f 0100 	mov.w	r1, #0
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	02a2      	lsls	r2, r4, #10
 8005cf6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005cfa:	0299      	lsls	r1, r3, #10
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4614      	mov	r4, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	4621      	mov	r1, r4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f04f 0400 	mov.w	r4, #0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	f7fa fa71 	bl	80001f4 <__aeabi_uldivmod>
 8005d12:	4603      	mov	r3, r0
 8005d14:	460c      	mov	r4, r1
 8005d16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	60bb      	str	r3, [r7, #8]
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d36:	60bb      	str	r3, [r7, #8]
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d44:	40023800 	.word	0x40023800
 8005d48:	00f42400 	.word	0x00f42400
 8005d4c:	007a1200 	.word	0x007a1200

08005d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d78:	4b66      	ldr	r3, [pc, #408]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	4963      	ldr	r1, [pc, #396]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005d9a:	4b5e      	ldr	r3, [pc, #376]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	495a      	ldr	r1, [pc, #360]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d105      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d075      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005dd4:	4b50      	ldr	r3, [pc, #320]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dda:	f7fb f8af 	bl	8000f3c <HAL_GetTick>
 8005dde:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005de2:	f7fb f8ab 	bl	8000f3c <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e1dc      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005df4:	4b47      	ldr	r3, [pc, #284]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1f0      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	019a      	lsls	r2, r3, #6
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	071b      	lsls	r3, r3, #28
 8005e18:	493e      	ldr	r1, [pc, #248]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01f      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e2c:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e32:	0f1b      	lsrs	r3, r3, #28
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	019a      	lsls	r2, r3, #6
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	061b      	lsls	r3, r3, #24
 8005e46:	431a      	orrs	r2, r3
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	071b      	lsls	r3, r3, #28
 8005e4c:	4931      	ldr	r1, [pc, #196]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e54:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e5a:	f023 021f 	bic.w	r2, r3, #31
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	492b      	ldr	r1, [pc, #172]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	019a      	lsls	r2, r3, #6
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	061b      	lsls	r3, r3, #24
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	071b      	lsls	r3, r3, #28
 8005e8c:	4921      	ldr	r1, [pc, #132]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e94:	4b20      	ldr	r3, [pc, #128]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e9a:	f7fb f84f 	bl	8000f3c <HAL_GetTick>
 8005e9e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ea2:	f7fb f84b 	bl	8000f3c <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e17c      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eb4:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0f0      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d112      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10c      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80ce 	beq.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eee:	f040 80c8 	bne.w	8006082 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ef8:	f7fb f820 	bl	8000f3c <HAL_GetTick>
 8005efc:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005efe:	e00f      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f00:	f7fb f81c 	bl	8000f3c <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d908      	bls.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e14d      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	42470068 	.word	0x42470068
 8005f1c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f20:	4ba5      	ldr	r3, [pc, #660]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2c:	d0e8      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d02e      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005f3a:	4b9f      	ldr	r3, [pc, #636]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	3301      	adds	r3, #1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f4c:	4b9a      	ldr	r3, [pc, #616]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	0f1b      	lsrs	r3, r3, #28
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	019a      	lsls	r2, r3, #6
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	3b01      	subs	r3, #1
 8005f66:	041b      	lsls	r3, r3, #16
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	061b      	lsls	r3, r3, #24
 8005f70:	431a      	orrs	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	071b      	lsls	r3, r3, #28
 8005f76:	4990      	ldr	r1, [pc, #576]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f7e:	4b8e      	ldr	r3, [pc, #568]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	4989      	ldr	r1, [pc, #548]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d02c      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005fa4:	4b84      	ldr	r3, [pc, #528]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fb6:	4b80      	ldr	r3, [pc, #512]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbc:	0e1b      	lsrs	r3, r3, #24
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	019a      	lsls	r2, r3, #6
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	061b      	lsls	r3, r3, #24
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	071b      	lsls	r3, r3, #28
 8005fe0:	4975      	ldr	r1, [pc, #468]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fe8:	4b73      	ldr	r3, [pc, #460]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	4970      	ldr	r1, [pc, #448]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d024      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800600e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006012:	d11f      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006014:	4b68      	ldr	r3, [pc, #416]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	0e1b      	lsrs	r3, r3, #24
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006022:	4b65      	ldr	r3, [pc, #404]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	0f1b      	lsrs	r3, r3, #28
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	019a      	lsls	r2, r3, #6
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	3b01      	subs	r3, #1
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	431a      	orrs	r2, r3
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	431a      	orrs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	071b      	lsls	r3, r3, #28
 800604c:	495a      	ldr	r1, [pc, #360]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006054:	4b59      	ldr	r3, [pc, #356]	; (80061bc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006056:	2201      	movs	r2, #1
 8006058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800605a:	f7fa ff6f 	bl	8000f3c <HAL_GetTick>
 800605e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006060:	e008      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006062:	f7fa ff6b 	bl	8000f3c <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e09c      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006074:	4b50      	ldr	r3, [pc, #320]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800607c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006080:	d1ef      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8083 	beq.w	8006196 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006090:	2300      	movs	r3, #0
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	4b48      	ldr	r3, [pc, #288]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	4a47      	ldr	r2, [pc, #284]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609e:	6413      	str	r3, [r2, #64]	; 0x40
 80060a0:	4b45      	ldr	r3, [pc, #276]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060ac:	4b44      	ldr	r3, [pc, #272]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a43      	ldr	r2, [pc, #268]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060b8:	f7fa ff40 	bl	8000f3c <HAL_GetTick>
 80060bc:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060c0:	f7fa ff3c 	bl	8000f3c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e06d      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060d2:	4b3b      	ldr	r3, [pc, #236]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f0      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060de:	4b36      	ldr	r3, [pc, #216]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d02f      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d028      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060fc:	4b2e      	ldr	r3, [pc, #184]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006104:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006106:	4b2f      	ldr	r3, [pc, #188]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006108:	2201      	movs	r2, #1
 800610a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006112:	4a29      	ldr	r2, [pc, #164]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006118:	4b27      	ldr	r3, [pc, #156]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d114      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006124:	f7fa ff0a 	bl	8000f3c <HAL_GetTick>
 8006128:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800612a:	e00a      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800612c:	f7fa ff06 	bl	8000f3c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	; 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e035      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006142:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0ee      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800615a:	d10d      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800615c:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800616c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006170:	4911      	ldr	r1, [pc, #68]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006172:	4313      	orrs	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
 8006176:	e005      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	4a0e      	ldr	r2, [pc, #56]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800617e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006182:	6093      	str	r3, [r2, #8]
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006190:	4909      	ldr	r1, [pc, #36]	; (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006192:	4313      	orrs	r3, r2
 8006194:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80061a8:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80061aa:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40023800 	.word	0x40023800
 80061bc:	42470070 	.word	0x42470070
 80061c0:	40007000 	.word	0x40007000
 80061c4:	42470e40 	.word	0x42470e40
 80061c8:	424711e0 	.word	0x424711e0

080061cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d075      	beq.n	80062d0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80061e4:	4ba2      	ldr	r3, [pc, #648]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 030c 	and.w	r3, r3, #12
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d00c      	beq.n	800620a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061f0:	4b9f      	ldr	r3, [pc, #636]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d112      	bne.n	8006222 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fc:	4b9c      	ldr	r3, [pc, #624]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006208:	d10b      	bne.n	8006222 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800620a:	4b99      	ldr	r3, [pc, #612]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d05b      	beq.n	80062ce <HAL_RCC_OscConfig+0x102>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d157      	bne.n	80062ce <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e20b      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622a:	d106      	bne.n	800623a <HAL_RCC_OscConfig+0x6e>
 800622c:	4b90      	ldr	r3, [pc, #576]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a8f      	ldr	r2, [pc, #572]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	e01d      	b.n	8006276 <HAL_RCC_OscConfig+0xaa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006242:	d10c      	bne.n	800625e <HAL_RCC_OscConfig+0x92>
 8006244:	4b8a      	ldr	r3, [pc, #552]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a89      	ldr	r2, [pc, #548]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 800624a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	4b87      	ldr	r3, [pc, #540]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a86      	ldr	r2, [pc, #536]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	e00b      	b.n	8006276 <HAL_RCC_OscConfig+0xaa>
 800625e:	4b84      	ldr	r3, [pc, #528]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a83      	ldr	r2, [pc, #524]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	4b81      	ldr	r3, [pc, #516]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a80      	ldr	r2, [pc, #512]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006274:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d013      	beq.n	80062a6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627e:	f7fa fe5d 	bl	8000f3c <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006286:	f7fa fe59 	bl	8000f3c <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b64      	cmp	r3, #100	; 0x64
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e1d0      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006298:	4b75      	ldr	r3, [pc, #468]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0xba>
 80062a4:	e014      	b.n	80062d0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a6:	f7fa fe49 	bl	8000f3c <HAL_GetTick>
 80062aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062ae:	f7fa fe45 	bl	8000f3c <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b64      	cmp	r3, #100	; 0x64
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e1bc      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c0:	4b6b      	ldr	r3, [pc, #428]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f0      	bne.n	80062ae <HAL_RCC_OscConfig+0xe2>
 80062cc:	e000      	b.n	80062d0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d063      	beq.n	80063a4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80062dc:	4b64      	ldr	r3, [pc, #400]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 030c 	and.w	r3, r3, #12
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062e8:	4b61      	ldr	r3, [pc, #388]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d11c      	bne.n	800632e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f4:	4b5e      	ldr	r3, [pc, #376]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d116      	bne.n	800632e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006300:	4b5b      	ldr	r3, [pc, #364]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d005      	beq.n	8006318 <HAL_RCC_OscConfig+0x14c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d001      	beq.n	8006318 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e190      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006318:	4b55      	ldr	r3, [pc, #340]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	4952      	ldr	r1, [pc, #328]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006328:	4313      	orrs	r3, r2
 800632a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632c:	e03a      	b.n	80063a4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d020      	beq.n	8006378 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006336:	4b4f      	ldr	r3, [pc, #316]	; (8006474 <HAL_RCC_OscConfig+0x2a8>)
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fa fdfe 	bl	8000f3c <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006344:	f7fa fdfa 	bl	8000f3c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e171      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006356:	4b46      	ldr	r3, [pc, #280]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f0      	beq.n	8006344 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006362:	4b43      	ldr	r3, [pc, #268]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	493f      	ldr	r1, [pc, #252]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006372:	4313      	orrs	r3, r2
 8006374:	600b      	str	r3, [r1, #0]
 8006376:	e015      	b.n	80063a4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006378:	4b3e      	ldr	r3, [pc, #248]	; (8006474 <HAL_RCC_OscConfig+0x2a8>)
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fa fddd 	bl	8000f3c <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006386:	f7fa fdd9 	bl	8000f3c <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e150      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006398:	4b35      	ldr	r3, [pc, #212]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d030      	beq.n	8006412 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d016      	beq.n	80063e6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b8:	4b2f      	ldr	r3, [pc, #188]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063be:	f7fa fdbd 	bl	8000f3c <HAL_GetTick>
 80063c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c6:	f7fa fdb9 	bl	8000f3c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e130      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d8:	4b25      	ldr	r3, [pc, #148]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 80063da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f0      	beq.n	80063c6 <HAL_RCC_OscConfig+0x1fa>
 80063e4:	e015      	b.n	8006412 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ec:	f7fa fda6 	bl	8000f3c <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f4:	f7fa fda2 	bl	8000f3c <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e119      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f0      	bne.n	80063f4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 809f 	beq.w	800655e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006420:	2300      	movs	r3, #0
 8006422:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006424:	4b12      	ldr	r3, [pc, #72]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10f      	bne.n	8006450 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	4a0d      	ldr	r2, [pc, #52]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 800643a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643e:	6413      	str	r3, [r2, #64]	; 0x40
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_RCC_OscConfig+0x2a4>)
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <HAL_RCC_OscConfig+0x2b0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d120      	bne.n	800649e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800645c:	4b07      	ldr	r3, [pc, #28]	; (800647c <HAL_RCC_OscConfig+0x2b0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a06      	ldr	r2, [pc, #24]	; (800647c <HAL_RCC_OscConfig+0x2b0>)
 8006462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006468:	f7fa fd68 	bl	8000f3c <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646e:	e010      	b.n	8006492 <HAL_RCC_OscConfig+0x2c6>
 8006470:	40023800 	.word	0x40023800
 8006474:	42470000 	.word	0x42470000
 8006478:	42470e80 	.word	0x42470e80
 800647c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006480:	f7fa fd5c 	bl	8000f3c <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e0d3      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006492:	4b6c      	ldr	r3, [pc, #432]	; (8006644 <HAL_RCC_OscConfig+0x478>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d106      	bne.n	80064b4 <HAL_RCC_OscConfig+0x2e8>
 80064a6:	4b68      	ldr	r3, [pc, #416]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064aa:	4a67      	ldr	r2, [pc, #412]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	6713      	str	r3, [r2, #112]	; 0x70
 80064b2:	e01c      	b.n	80064ee <HAL_RCC_OscConfig+0x322>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b05      	cmp	r3, #5
 80064ba:	d10c      	bne.n	80064d6 <HAL_RCC_OscConfig+0x30a>
 80064bc:	4b62      	ldr	r3, [pc, #392]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c0:	4a61      	ldr	r2, [pc, #388]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064c2:	f043 0304 	orr.w	r3, r3, #4
 80064c6:	6713      	str	r3, [r2, #112]	; 0x70
 80064c8:	4b5f      	ldr	r3, [pc, #380]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064cc:	4a5e      	ldr	r2, [pc, #376]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	6713      	str	r3, [r2, #112]	; 0x70
 80064d4:	e00b      	b.n	80064ee <HAL_RCC_OscConfig+0x322>
 80064d6:	4b5c      	ldr	r3, [pc, #368]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	4a5b      	ldr	r2, [pc, #364]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	6713      	str	r3, [r2, #112]	; 0x70
 80064e2:	4b59      	ldr	r3, [pc, #356]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e6:	4a58      	ldr	r2, [pc, #352]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80064e8:	f023 0304 	bic.w	r3, r3, #4
 80064ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d015      	beq.n	8006522 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f6:	f7fa fd21 	bl	8000f3c <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064fe:	f7fa fd1d 	bl	8000f3c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	; 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e092      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006514:	4b4c      	ldr	r3, [pc, #304]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0ee      	beq.n	80064fe <HAL_RCC_OscConfig+0x332>
 8006520:	e014      	b.n	800654c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006522:	f7fa fd0b 	bl	8000f3c <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006528:	e00a      	b.n	8006540 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fa fd07 	bl	8000f3c <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	; 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e07c      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006540:	4b41      	ldr	r3, [pc, #260]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ee      	bne.n	800652a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006552:	4b3d      	ldr	r3, [pc, #244]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	4a3c      	ldr	r2, [pc, #240]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 8006558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800655c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d068      	beq.n	8006638 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006566:	4b38      	ldr	r3, [pc, #224]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	2b08      	cmp	r3, #8
 8006570:	d060      	beq.n	8006634 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d145      	bne.n	8006606 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657a:	4b34      	ldr	r3, [pc, #208]	; (800664c <HAL_RCC_OscConfig+0x480>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006580:	f7fa fcdc 	bl	8000f3c <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006588:	f7fa fcd8 	bl	8000f3c <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e04f      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659a:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f0      	bne.n	8006588 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69da      	ldr	r2, [r3, #28]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	019b      	lsls	r3, r3, #6
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	3b01      	subs	r3, #1
 80065c0:	041b      	lsls	r3, r3, #16
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	071b      	lsls	r3, r3, #28
 80065d2:	491d      	ldr	r1, [pc, #116]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d8:	4b1c      	ldr	r3, [pc, #112]	; (800664c <HAL_RCC_OscConfig+0x480>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065de:	f7fa fcad 	bl	8000f3c <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e6:	f7fa fca9 	bl	8000f3c <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e020      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f0      	beq.n	80065e6 <HAL_RCC_OscConfig+0x41a>
 8006604:	e018      	b.n	8006638 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006606:	4b11      	ldr	r3, [pc, #68]	; (800664c <HAL_RCC_OscConfig+0x480>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fa fc96 	bl	8000f3c <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006614:	f7fa fc92 	bl	8000f3c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e009      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	4b08      	ldr	r3, [pc, #32]	; (8006648 <HAL_RCC_OscConfig+0x47c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x448>
 8006632:	e001      	b.n	8006638 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40007000 	.word	0x40007000
 8006648:	40023800 	.word	0x40023800
 800664c:	42470060 	.word	0x42470060

08006650 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e025      	b.n	80066b0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f81d 	bl	80066b8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3304      	adds	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f000 f866 	bl	8006762 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	461a      	mov	r2, r3
 80066a0:	6839      	ldr	r1, [r7, #0]
 80066a2:	f000 f8d1 	bl	8006848 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d101      	bne.n	80066e8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80066e4:	2302      	movs	r3, #2
 80066e6:	e018      	b.n	800671a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 f924 	bl	8006946 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d104      	bne.n	8006710 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2205      	movs	r2, #5
 800670a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800670e:	e003      	b.n	8006718 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d101      	bne.n	800673c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
 800673a:	e00e      	b.n	800675a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f937 	bl	80069be <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d029      	beq.n	80067d0 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006788:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800678c:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006796:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800679c:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80067a2:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80067a8:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80067ae:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80067b4:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80067ba:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80067c0:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e034      	b.n	800683a <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067dc:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80067e6:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80067ec:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006800:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006804:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800680e:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006814:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800681a:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006820:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006826:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	4313      	orrs	r3, r2
 800682c:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d02e      	beq.n	80068c0 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800686e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	3b01      	subs	r3, #1
 800687c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800687e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	3b01      	subs	r3, #1
 8006886:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006888:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	3b01      	subs	r3, #1
 8006890:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006892:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	3b01      	subs	r3, #1
 800689a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800689c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80068a6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80068b0:	4313      	orrs	r3, r2
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	609a      	str	r2, [r3, #8]
 80068be:	e03b      	b.n	8006938 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068d0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	3b01      	subs	r3, #1
 80068e0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80068e2:	4313      	orrs	r3, r2
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068f6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	3b01      	subs	r3, #1
 8006904:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006906:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	3b01      	subs	r3, #1
 800690e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006910:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	3b01      	subs	r3, #1
 8006918:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800691a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	3b01      	subs	r3, #1
 8006922:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006924:	4313      	orrs	r3, r2
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b086      	sub	sp, #24
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006962:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	3b01      	subs	r3, #1
 800696a:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800696c:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800697e:	f7fa fadd 	bl	8000f3c <HAL_GetTick>
 8006982:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006984:	e010      	b.n	80069a8 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698c:	d00c      	beq.n	80069a8 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <FMC_SDRAM_SendCommand+0x5e>
 8006994:	f7fa fad2 	bl	8000f3c <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d201      	bcs.n	80069a8 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e006      	b.n	80069b6 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d0e8      	beq.n	8006986 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695a      	ldr	r2, [r3, #20]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80069e8:	4b04      	ldr	r3, [pc, #16]	; (80069fc <LL_RCC_GetSysClkSource+0x18>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 030c 	and.w	r3, r3, #12
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40023800 	.word	0x40023800

08006a00 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006a04:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <LL_RCC_GetAHBPrescaler+0x18>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800

08006a1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40023800 	.word	0x40023800

08006a38 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006a3c:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40023800 	.word	0x40023800

08006a54 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006a58:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <LL_RCC_PLL_GetMainSource+0x18>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40023800 	.word	0x40023800

08006a70 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006a74:	4b04      	ldr	r3, [pc, #16]	; (8006a88 <LL_RCC_PLL_GetN+0x18>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	099b      	lsrs	r3, r3, #6
 8006a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	40023800 	.word	0x40023800

08006a8c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006a90:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <LL_RCC_PLL_GetP+0x18>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40023800 	.word	0x40023800

08006aa8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <LL_RCC_PLL_GetDivider+0x18>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40023800 	.word	0x40023800

08006ac4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006acc:	f000 f820 	bl	8006b10 <RCC_GetSystemClockFreq>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f83e 	bl	8006b5c <RCC_GetHCLKClockFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f84c 	bl	8006b88 <RCC_GetPCLK1ClockFreq>
 8006af0:	4602      	mov	r2, r0
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f858 	bl	8006bb0 <RCC_GetPCLK2ClockFreq>
 8006b00:	4602      	mov	r2, r0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	60da      	str	r2, [r3, #12]
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006b1a:	f7ff ff63 	bl	80069e4 <LL_RCC_GetSysClkSource>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d006      	beq.n	8006b32 <RCC_GetSystemClockFreq+0x22>
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d007      	beq.n	8006b38 <RCC_GetSystemClockFreq+0x28>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <RCC_GetSystemClockFreq+0x44>)
 8006b2e:	607b      	str	r3, [r7, #4]
      break;
 8006b30:	e00a      	b.n	8006b48 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <RCC_GetSystemClockFreq+0x48>)
 8006b34:	607b      	str	r3, [r7, #4]
      break;
 8006b36:	e007      	b.n	8006b48 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006b38:	2008      	movs	r0, #8
 8006b3a:	f000 f84d 	bl	8006bd8 <RCC_PLL_GetFreqDomain_SYS>
 8006b3e:	6078      	str	r0, [r7, #4]
      break;
 8006b40:	e002      	b.n	8006b48 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006b42:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <RCC_GetSystemClockFreq+0x44>)
 8006b44:	607b      	str	r3, [r7, #4]
      break;
 8006b46:	bf00      	nop
  }

  return frequency;
 8006b48:	687b      	ldr	r3, [r7, #4]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	00f42400 	.word	0x00f42400
 8006b58:	007a1200 	.word	0x007a1200

08006b5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006b64:	f7ff ff4c 	bl	8006a00 <LL_RCC_GetAHBPrescaler>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <RCC_GetHCLKClockFreq+0x28>)
 8006b72:	5cd3      	ldrb	r3, [r2, r3]
 8006b74:	461a      	mov	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	40d3      	lsrs	r3, r2
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	080090e4 	.word	0x080090e4

08006b88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006b90:	f7ff ff44 	bl	8006a1c <LL_RCC_GetAPB1Prescaler>
 8006b94:	4603      	mov	r3, r0
 8006b96:	0a9b      	lsrs	r3, r3, #10
 8006b98:	4a04      	ldr	r2, [pc, #16]	; (8006bac <RCC_GetPCLK1ClockFreq+0x24>)
 8006b9a:	5cd3      	ldrb	r3, [r2, r3]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	40d3      	lsrs	r3, r2
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	080090f4 	.word	0x080090f4

08006bb0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006bb8:	f7ff ff3e 	bl	8006a38 <LL_RCC_GetAPB2Prescaler>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	0b5b      	lsrs	r3, r3, #13
 8006bc0:	4a04      	ldr	r2, [pc, #16]	; (8006bd4 <RCC_GetPCLK2ClockFreq+0x24>)
 8006bc2:	5cd3      	ldrb	r3, [r2, r3]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	40d3      	lsrs	r3, r2
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	080090f4 	.word	0x080090f4

08006bd8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006bec:	f7ff ff32 	bl	8006a54 <LL_RCC_PLL_GetMainSource>
 8006bf0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8006bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bfc:	d003      	beq.n	8006c06 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8006bfe:	e005      	b.n	8006c0c <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006c02:	617b      	str	r3, [r7, #20]
      break;
 8006c04:	e005      	b.n	8006c12 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006c06:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006c08:	617b      	str	r3, [r7, #20]
      break;
 8006c0a:	e002      	b.n	8006c12 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006c0e:	617b      	str	r3, [r7, #20]
      break;
 8006c10:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d113      	bne.n	8006c40 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006c18:	f7ff ff46 	bl	8006aa8 <LL_RCC_PLL_GetDivider>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	fbb3 f4f2 	udiv	r4, r3, r2
 8006c24:	f7ff ff24 	bl	8006a70 <LL_RCC_PLL_GetN>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	fb03 f404 	mul.w	r4, r3, r4
 8006c2e:	f7ff ff2d 	bl	8006a8c <LL_RCC_PLL_GetP>
 8006c32:	4603      	mov	r3, r0
 8006c34:	0c1b      	lsrs	r3, r3, #16
 8006c36:	3301      	adds	r3, #1
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8006c3e:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006c40:	693b      	ldr	r3, [r7, #16]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd90      	pop	{r4, r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	00f42400 	.word	0x00f42400
 8006c50:	007a1200 	.word	0x007a1200

08006c54 <LL_USART_IsEnabled>:
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c68:	bf0c      	ite	eq
 8006c6a:	2301      	moveq	r3, #1
 8006c6c:	2300      	movne	r3, #0
 8006c6e:	b2db      	uxtb	r3, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <LL_USART_SetStopBitsLength>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	611a      	str	r2, [r3, #16]
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <LL_USART_SetHWFlowCtrl>:
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	615a      	str	r2, [r3, #20]
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <LL_USART_SetBaudRate>:
{
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
 8006cd6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cde:	f040 80c1 	bne.w	8006e64 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	461d      	mov	r5, r3
 8006ce6:	f04f 0600 	mov.w	r6, #0
 8006cea:	46a8      	mov	r8, r5
 8006cec:	46b1      	mov	r9, r6
 8006cee:	eb18 0308 	adds.w	r3, r8, r8
 8006cf2:	eb49 0409 	adc.w	r4, r9, r9
 8006cf6:	4698      	mov	r8, r3
 8006cf8:	46a1      	mov	r9, r4
 8006cfa:	eb18 0805 	adds.w	r8, r8, r5
 8006cfe:	eb49 0906 	adc.w	r9, r9, r6
 8006d02:	f04f 0100 	mov.w	r1, #0
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d16:	4688      	mov	r8, r1
 8006d18:	4691      	mov	r9, r2
 8006d1a:	eb18 0005 	adds.w	r0, r8, r5
 8006d1e:	eb49 0106 	adc.w	r1, r9, r6
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	461d      	mov	r5, r3
 8006d26:	f04f 0600 	mov.w	r6, #0
 8006d2a:	196b      	adds	r3, r5, r5
 8006d2c:	eb46 0406 	adc.w	r4, r6, r6
 8006d30:	461a      	mov	r2, r3
 8006d32:	4623      	mov	r3, r4
 8006d34:	f7f9 fa5e 	bl	80001f4 <__aeabi_uldivmod>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4bb5      	ldr	r3, [pc, #724]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006d40:	fba3 2302 	umull	r2, r3, r3, r2
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	fa1f f883 	uxth.w	r8, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	461d      	mov	r5, r3
 8006d52:	f04f 0600 	mov.w	r6, #0
 8006d56:	46a9      	mov	r9, r5
 8006d58:	46b2      	mov	sl, r6
 8006d5a:	eb19 0309 	adds.w	r3, r9, r9
 8006d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8006d62:	4699      	mov	r9, r3
 8006d64:	46a2      	mov	sl, r4
 8006d66:	eb19 0905 	adds.w	r9, r9, r5
 8006d6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d6e:	f04f 0100 	mov.w	r1, #0
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d82:	4689      	mov	r9, r1
 8006d84:	4692      	mov	sl, r2
 8006d86:	eb19 0005 	adds.w	r0, r9, r5
 8006d8a:	eb4a 0106 	adc.w	r1, sl, r6
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	461d      	mov	r5, r3
 8006d92:	f04f 0600 	mov.w	r6, #0
 8006d96:	196b      	adds	r3, r5, r5
 8006d98:	eb46 0406 	adc.w	r4, r6, r6
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4623      	mov	r3, r4
 8006da0:	f7f9 fa28 	bl	80001f4 <__aeabi_uldivmod>
 8006da4:	4603      	mov	r3, r0
 8006da6:	460c      	mov	r4, r1
 8006da8:	461a      	mov	r2, r3
 8006daa:	4b9a      	ldr	r3, [pc, #616]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006dac:	fba3 1302 	umull	r1, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	2164      	movs	r1, #100	; 0x64
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	3332      	adds	r3, #50	; 0x32
 8006dbe:	4a95      	ldr	r2, [pc, #596]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4443      	add	r3, r8
 8006dd4:	fa1f f883 	uxth.w	r8, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	461d      	mov	r5, r3
 8006ddc:	f04f 0600 	mov.w	r6, #0
 8006de0:	46a9      	mov	r9, r5
 8006de2:	46b2      	mov	sl, r6
 8006de4:	eb19 0309 	adds.w	r3, r9, r9
 8006de8:	eb4a 040a 	adc.w	r4, sl, sl
 8006dec:	4699      	mov	r9, r3
 8006dee:	46a2      	mov	sl, r4
 8006df0:	eb19 0905 	adds.w	r9, r9, r5
 8006df4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006df8:	f04f 0100 	mov.w	r1, #0
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e0c:	4689      	mov	r9, r1
 8006e0e:	4692      	mov	sl, r2
 8006e10:	eb19 0005 	adds.w	r0, r9, r5
 8006e14:	eb4a 0106 	adc.w	r1, sl, r6
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	461d      	mov	r5, r3
 8006e1c:	f04f 0600 	mov.w	r6, #0
 8006e20:	196b      	adds	r3, r5, r5
 8006e22:	eb46 0406 	adc.w	r4, r6, r6
 8006e26:	461a      	mov	r2, r3
 8006e28:	4623      	mov	r3, r4
 8006e2a:	f7f9 f9e3 	bl	80001f4 <__aeabi_uldivmod>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b77      	ldr	r3, [pc, #476]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006e36:	fba3 1302 	umull	r1, r3, r3, r2
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	2164      	movs	r1, #100	; 0x64
 8006e3e:	fb01 f303 	mul.w	r3, r1, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	3332      	adds	r3, #50	; 0x32
 8006e48:	4a72      	ldr	r2, [pc, #456]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4443      	add	r3, r8
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	609a      	str	r2, [r3, #8]
}
 8006e62:	e0d2      	b.n	800700a <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	469a      	mov	sl, r3
 8006e68:	f04f 0b00 	mov.w	fp, #0
 8006e6c:	46d0      	mov	r8, sl
 8006e6e:	46d9      	mov	r9, fp
 8006e70:	eb18 0308 	adds.w	r3, r8, r8
 8006e74:	eb49 0409 	adc.w	r4, r9, r9
 8006e78:	4698      	mov	r8, r3
 8006e7a:	46a1      	mov	r9, r4
 8006e7c:	eb18 080a 	adds.w	r8, r8, sl
 8006e80:	eb49 090b 	adc.w	r9, r9, fp
 8006e84:	f04f 0100 	mov.w	r1, #0
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e98:	4688      	mov	r8, r1
 8006e9a:	4691      	mov	r9, r2
 8006e9c:	eb1a 0508 	adds.w	r5, sl, r8
 8006ea0:	eb4b 0609 	adc.w	r6, fp, r9
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	f04f 0400 	mov.w	r4, #0
 8006eb4:	0094      	lsls	r4, r2, #2
 8006eb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006eba:	008b      	lsls	r3, r1, #2
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	f7f9 f996 	bl	80001f4 <__aeabi_uldivmod>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b51      	ldr	r3, [pc, #324]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	fa1f f883 	uxth.w	r8, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	469b      	mov	fp, r3
 8006ee2:	f04f 0c00 	mov.w	ip, #0
 8006ee6:	46d9      	mov	r9, fp
 8006ee8:	46e2      	mov	sl, ip
 8006eea:	eb19 0309 	adds.w	r3, r9, r9
 8006eee:	eb4a 040a 	adc.w	r4, sl, sl
 8006ef2:	4699      	mov	r9, r3
 8006ef4:	46a2      	mov	sl, r4
 8006ef6:	eb19 090b 	adds.w	r9, r9, fp
 8006efa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006efe:	f04f 0100 	mov.w	r1, #0
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f12:	4689      	mov	r9, r1
 8006f14:	4692      	mov	sl, r2
 8006f16:	eb1b 0509 	adds.w	r5, fp, r9
 8006f1a:	eb4c 060a 	adc.w	r6, ip, sl
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	4619      	mov	r1, r3
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	f04f 0400 	mov.w	r4, #0
 8006f2e:	0094      	lsls	r4, r2, #2
 8006f30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f34:	008b      	lsls	r3, r1, #2
 8006f36:	461a      	mov	r2, r3
 8006f38:	4623      	mov	r3, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	f7f9 f959 	bl	80001f4 <__aeabi_uldivmod>
 8006f42:	4603      	mov	r3, r0
 8006f44:	460c      	mov	r4, r1
 8006f46:	461a      	mov	r2, r3
 8006f48:	4b32      	ldr	r3, [pc, #200]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	2164      	movs	r1, #100	; 0x64
 8006f52:	fb01 f303 	mul.w	r3, r1, r3
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	3332      	adds	r3, #50	; 0x32
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	4443      	add	r3, r8
 8006f6e:	fa1f f883 	uxth.w	r8, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	469b      	mov	fp, r3
 8006f76:	f04f 0c00 	mov.w	ip, #0
 8006f7a:	46d9      	mov	r9, fp
 8006f7c:	46e2      	mov	sl, ip
 8006f7e:	eb19 0309 	adds.w	r3, r9, r9
 8006f82:	eb4a 040a 	adc.w	r4, sl, sl
 8006f86:	4699      	mov	r9, r3
 8006f88:	46a2      	mov	sl, r4
 8006f8a:	eb19 090b 	adds.w	r9, r9, fp
 8006f8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006f92:	f04f 0100 	mov.w	r1, #0
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fa6:	4689      	mov	r9, r1
 8006fa8:	4692      	mov	sl, r2
 8006faa:	eb1b 0509 	adds.w	r5, fp, r9
 8006fae:	eb4c 060a 	adc.w	r6, ip, sl
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	f04f 0400 	mov.w	r4, #0
 8006fc2:	0094      	lsls	r4, r2, #2
 8006fc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fc8:	008b      	lsls	r3, r1, #2
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4623      	mov	r3, r4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	f7f9 f90f 	bl	80001f4 <__aeabi_uldivmod>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	460c      	mov	r4, r1
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006fde:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	2164      	movs	r1, #100	; 0x64
 8006fe6:	fb01 f303 	mul.w	r3, r1, r3
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	3332      	adds	r3, #50	; 0x32
 8006ff0:	4a08      	ldr	r2, [pc, #32]	; (8007014 <LL_USART_SetBaudRate+0x34c>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	4443      	add	r3, r8
 8007002:	b29b      	uxth	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	609a      	str	r2, [r3, #8]
}
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007014:	51eb851f 	.word	0x51eb851f

08007018 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007026:	2300      	movs	r3, #0
 8007028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7ff fe12 	bl	8006c54 <LL_USART_IsEnabled>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d16c      	bne.n	8007110 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800703e:	f023 030c 	bic.w	r3, r3, #12
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	6851      	ldr	r1, [r2, #4]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	68d2      	ldr	r2, [r2, #12]
 800704a:	4311      	orrs	r1, r2
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	6912      	ldr	r2, [r2, #16]
 8007050:	4311      	orrs	r1, r2
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	6992      	ldr	r2, [r2, #24]
 8007056:	430a      	orrs	r2, r1
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff fe09 	bl	8006c7c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff fe16 	bl	8006ca2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007076:	f107 0308 	add.w	r3, r7, #8
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff fd22 	bl	8006ac4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a26      	ldr	r2, [pc, #152]	; (800711c <LL_USART_Init+0x104>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d102      	bne.n	800708e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	e02f      	b.n	80070ee <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a23      	ldr	r2, [pc, #140]	; (8007120 <LL_USART_Init+0x108>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d102      	bne.n	800709c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	e028      	b.n	80070ee <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a21      	ldr	r2, [pc, #132]	; (8007124 <LL_USART_Init+0x10c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d102      	bne.n	80070aa <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e021      	b.n	80070ee <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a1e      	ldr	r2, [pc, #120]	; (8007128 <LL_USART_Init+0x110>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d102      	bne.n	80070b8 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e01a      	b.n	80070ee <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a1c      	ldr	r2, [pc, #112]	; (800712c <LL_USART_Init+0x114>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d102      	bne.n	80070c6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	e013      	b.n	80070ee <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a19      	ldr	r2, [pc, #100]	; (8007130 <LL_USART_Init+0x118>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d102      	bne.n	80070d4 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	e00c      	b.n	80070ee <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a17      	ldr	r2, [pc, #92]	; (8007134 <LL_USART_Init+0x11c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d102      	bne.n	80070e2 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e005      	b.n	80070ee <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a14      	ldr	r2, [pc, #80]	; (8007138 <LL_USART_Init+0x120>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d101      	bne.n	80070ee <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00d      	beq.n	8007110 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 80070fc:	2300      	movs	r3, #0
 80070fe:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fddc 	bl	8006cc8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007110:	7ffb      	ldrb	r3, [r7, #31]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3720      	adds	r7, #32
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40011000 	.word	0x40011000
 8007120:	40004400 	.word	0x40004400
 8007124:	40004800 	.word	0x40004800
 8007128:	40011400 	.word	0x40011400
 800712c:	40004c00 	.word	0x40004c00
 8007130:	40005000 	.word	0x40005000
 8007134:	40007800 	.word	0x40007800
 8007138:	40007c00 	.word	0x40007c00

0800713c <__libc_init_array>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4e0d      	ldr	r6, [pc, #52]	; (8007174 <__libc_init_array+0x38>)
 8007140:	4c0d      	ldr	r4, [pc, #52]	; (8007178 <__libc_init_array+0x3c>)
 8007142:	1ba4      	subs	r4, r4, r6
 8007144:	10a4      	asrs	r4, r4, #2
 8007146:	2500      	movs	r5, #0
 8007148:	42a5      	cmp	r5, r4
 800714a:	d109      	bne.n	8007160 <__libc_init_array+0x24>
 800714c:	4e0b      	ldr	r6, [pc, #44]	; (800717c <__libc_init_array+0x40>)
 800714e:	4c0c      	ldr	r4, [pc, #48]	; (8007180 <__libc_init_array+0x44>)
 8007150:	f000 f870 	bl	8007234 <_init>
 8007154:	1ba4      	subs	r4, r4, r6
 8007156:	10a4      	asrs	r4, r4, #2
 8007158:	2500      	movs	r5, #0
 800715a:	42a5      	cmp	r5, r4
 800715c:	d105      	bne.n	800716a <__libc_init_array+0x2e>
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007164:	4798      	blx	r3
 8007166:	3501      	adds	r5, #1
 8007168:	e7ee      	b.n	8007148 <__libc_init_array+0xc>
 800716a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800716e:	4798      	blx	r3
 8007170:	3501      	adds	r5, #1
 8007172:	e7f2      	b.n	800715a <__libc_init_array+0x1e>
 8007174:	08009134 	.word	0x08009134
 8007178:	08009134 	.word	0x08009134
 800717c:	08009134 	.word	0x08009134
 8007180:	08009138 	.word	0x08009138

08007184 <__itoa>:
 8007184:	1e93      	subs	r3, r2, #2
 8007186:	2b22      	cmp	r3, #34	; 0x22
 8007188:	b510      	push	{r4, lr}
 800718a:	460c      	mov	r4, r1
 800718c:	d904      	bls.n	8007198 <__itoa+0x14>
 800718e:	2300      	movs	r3, #0
 8007190:	700b      	strb	r3, [r1, #0]
 8007192:	461c      	mov	r4, r3
 8007194:	4620      	mov	r0, r4
 8007196:	bd10      	pop	{r4, pc}
 8007198:	2a0a      	cmp	r2, #10
 800719a:	d109      	bne.n	80071b0 <__itoa+0x2c>
 800719c:	2800      	cmp	r0, #0
 800719e:	da07      	bge.n	80071b0 <__itoa+0x2c>
 80071a0:	232d      	movs	r3, #45	; 0x2d
 80071a2:	700b      	strb	r3, [r1, #0]
 80071a4:	4240      	negs	r0, r0
 80071a6:	2101      	movs	r1, #1
 80071a8:	4421      	add	r1, r4
 80071aa:	f000 f805 	bl	80071b8 <__utoa>
 80071ae:	e7f1      	b.n	8007194 <__itoa+0x10>
 80071b0:	2100      	movs	r1, #0
 80071b2:	e7f9      	b.n	80071a8 <__itoa+0x24>

080071b4 <itoa>:
 80071b4:	f7ff bfe6 	b.w	8007184 <__itoa>

080071b8 <__utoa>:
 80071b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ba:	4b1d      	ldr	r3, [pc, #116]	; (8007230 <__utoa+0x78>)
 80071bc:	b08b      	sub	sp, #44	; 0x2c
 80071be:	4605      	mov	r5, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	466e      	mov	r6, sp
 80071c4:	f103 0c20 	add.w	ip, r3, #32
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	6859      	ldr	r1, [r3, #4]
 80071cc:	4637      	mov	r7, r6
 80071ce:	c703      	stmia	r7!, {r0, r1}
 80071d0:	3308      	adds	r3, #8
 80071d2:	4563      	cmp	r3, ip
 80071d4:	463e      	mov	r6, r7
 80071d6:	d1f7      	bne.n	80071c8 <__utoa+0x10>
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	791b      	ldrb	r3, [r3, #4]
 80071dc:	713b      	strb	r3, [r7, #4]
 80071de:	1e93      	subs	r3, r2, #2
 80071e0:	2b22      	cmp	r3, #34	; 0x22
 80071e2:	6038      	str	r0, [r7, #0]
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	d904      	bls.n	80071f4 <__utoa+0x3c>
 80071ea:	7023      	strb	r3, [r4, #0]
 80071ec:	461c      	mov	r4, r3
 80071ee:	4620      	mov	r0, r4
 80071f0:	b00b      	add	sp, #44	; 0x2c
 80071f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f4:	1e66      	subs	r6, r4, #1
 80071f6:	fbb5 f0f2 	udiv	r0, r5, r2
 80071fa:	af0a      	add	r7, sp, #40	; 0x28
 80071fc:	fb02 5510 	mls	r5, r2, r0, r5
 8007200:	443d      	add	r5, r7
 8007202:	1c59      	adds	r1, r3, #1
 8007204:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007208:	f806 5f01 	strb.w	r5, [r6, #1]!
 800720c:	4605      	mov	r5, r0
 800720e:	b968      	cbnz	r0, 800722c <__utoa+0x74>
 8007210:	5460      	strb	r0, [r4, r1]
 8007212:	4423      	add	r3, r4
 8007214:	4622      	mov	r2, r4
 8007216:	1b19      	subs	r1, r3, r4
 8007218:	1b10      	subs	r0, r2, r4
 800721a:	4281      	cmp	r1, r0
 800721c:	dde7      	ble.n	80071ee <__utoa+0x36>
 800721e:	7811      	ldrb	r1, [r2, #0]
 8007220:	7818      	ldrb	r0, [r3, #0]
 8007222:	f802 0b01 	strb.w	r0, [r2], #1
 8007226:	f803 1901 	strb.w	r1, [r3], #-1
 800722a:	e7f4      	b.n	8007216 <__utoa+0x5e>
 800722c:	460b      	mov	r3, r1
 800722e:	e7e2      	b.n	80071f6 <__utoa+0x3e>
 8007230:	08009104 	.word	0x08009104

08007234 <_init>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	bf00      	nop
 8007238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723a:	bc08      	pop	{r3}
 800723c:	469e      	mov	lr, r3
 800723e:	4770      	bx	lr

08007240 <_fini>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr
