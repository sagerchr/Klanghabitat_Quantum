
DisplayBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071cc  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee0  08007380  08007380  00017380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009260  08009260  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08009260  08009260  00019260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009268  08009268  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009268  08009268  00019268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08009270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .shared       00000040  20000024  08009294  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000007c8  20000064  080092d4  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000082c  080092d4  0002082c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000192ef  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000409b  00000000  00000000  00039383  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000016e0  00000000  00000000  0003d420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001468  00000000  00000000  0003eb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000322b2  00000000  00000000  0003ff68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018980  00000000  00000000  0007221a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00115ca4  00000000  00000000  0008ab9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001a083e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a04  00000000  00000000  001a08bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000064 	.word	0x20000064
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08007368 	.word	0x08007368

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000068 	.word	0x20000068
 80001f0:	08007368 	.word	0x08007368

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 80004f8:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 8000508:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals. */
  CpuIrqDisable();
 8000518:	f7ff ffec 	bl	80004f4 <CpuIrqDisable>
} /*** end of CpuInit ***/
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8000526:	f000 fb65 	bl	8000bf4 <NvmVerifyChecksum>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10e      	bne.n	800054e <CpuStartUserProgram+0x2e>
     * the communication interface that were not yet initialized are now initialized.
     * this is needed to make sure firmware updates via these communication interfaces
     * will be possible.
     */
#if(Display==1)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"no valid firmware installed", CENTER_MODE);
 8000530:	f002 f94a 	bl	80027c8 <BSP_LCD_GetYSize>
 8000534:	4603      	mov	r3, r0
 8000536:	085b      	lsrs	r3, r3, #1
 8000538:	b29b      	uxth	r3, r3
 800053a:	3b1b      	subs	r3, #27
 800053c:	b299      	uxth	r1, r3
 800053e:	2301      	movs	r3, #1
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <CpuStartUserProgram+0x6c>)
 8000542:	2000      	movs	r0, #0
 8000544:	f002 fa64 	bl	8002a10 <BSP_LCD_DisplayStringAt>
#endif
    ComDeferredInit();
 8000548:	f000 fe73 	bl	8001232 <ComDeferredInit>
#endif
    /* not a valid user program so it cannot be started */
    return;
 800054c:	e01a      	b.n	8000584 <CpuStartUserProgram+0x64>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 800054e:	f000 fdeb 	bl	8001128 <ComFree>
#endif
  /* reset the timer */
  TimerReset();
 8000552:	f000 fcc7 	bl	8000ee4 <TimerReset>
  /* reset the HAL */
  HAL_DeInit();
 8000556:	f002 ff83 	bl	8003460 <HAL_DeInit>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 800055a:	f000 fb52 	bl	8000c02 <NvmGetUserProgBaseAddress>
 800055e:	4603      	mov	r3, r0
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <CpuStartUserProgram+0x70>)
 8000562:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800056a:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 800056c:	f000 fb49 	bl	8000c02 <NvmGetUserProgBaseAddress>
 8000570:	4603      	mov	r3, r0
 8000572:	3304      	adds	r3, #4
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8000578:	f7ff ffc4 	bl	8000504 <CpuIrqEnable>

  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4798      	blx	r3
  /* theoretically, the code never gets here because the user program should now be
   * running and the previous function call should not return. In case it did return
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
 8000580:	f000 fe57 	bl	8001232 <ComDeferredInit>



#endif
} /*** end of CpuStartUserProgram ***/
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	08007380 	.word	0x08007380
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	4613      	mov	r3, r2
 80005a0:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80005aa:	e009      	b.n	80005c0 <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	1c53      	adds	r3, r2, #1
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	1c59      	adds	r1, r3, #1
 80005b6:	6139      	str	r1, [r7, #16]
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 80005bc:	f000 fe45 	bl	800124a <CopService>
  while (len-- > 0)
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	80fa      	strh	r2, [r7, #6]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f0      	bne.n	80005ac <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <FlashInit+0x20>)
 80005da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005de:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <FlashInit+0x24>)
 80005e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005e6:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000080 	.word	0x20000080
 80005f8:	20000284 	.word	0x20000284

080005fc <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	491d      	ldr	r1, [pc, #116]	; (8000684 <FlashWrite+0x88>)
 800060e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000612:	4419      	add	r1, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	425b      	negs	r3, r3
 8000618:	440b      	add	r3, r1
 800061a:	3b01      	subs	r3, #1
 800061c:	429a      	cmp	r2, r3
 800061e:	d901      	bls.n	8000624 <FlashWrite+0x28>
  {
    return BLT_FALSE;
 8000620:	2300      	movs	r3, #0
 8000622:	e02a      	b.n	800067a <FlashWrite+0x7e>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f000 fa7d 	bl	8000b24 <FlashGetSector>
 800062a:	4603      	mov	r3, r0
 800062c:	2bff      	cmp	r3, #255	; 0xff
 800062e:	d009      	beq.n	8000644 <FlashWrite+0x48>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	4413      	add	r3, r2
 8000636:	3b01      	subs	r3, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa73 	bl	8000b24 <FlashGetSector>
 800063e:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8000640:	2bff      	cmp	r3, #255	; 0xff
 8000642:	d101      	bne.n	8000648 <FlashWrite+0x4c>
  {
    return BLT_FALSE;
 8000644:	2300      	movs	r3, #0
 8000646:	e018      	b.n	800067a <FlashWrite+0x7e>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800064e:	f023 0301 	bic.w	r3, r3, #1
 8000652:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 8000654:	4a0c      	ldr	r2, [pc, #48]	; (8000688 <FlashWrite+0x8c>)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4293      	cmp	r3, r2
 800065a:	d107      	bne.n	800066c <FlashWrite+0x70>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	68f9      	ldr	r1, [r7, #12]
 8000662:	480a      	ldr	r0, [pc, #40]	; (800068c <FlashWrite+0x90>)
 8000664:	f000 f968 	bl	8000938 <FlashAddToBlock>
 8000668:	4603      	mov	r3, r0
 800066a:	e006      	b.n	800067a <FlashWrite+0x7e>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	68f9      	ldr	r1, [r7, #12]
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <FlashWrite+0x94>)
 8000674:	f000 f960 	bl	8000938 <FlashAddToBlock>
 8000678:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 800067a:	4618      	mov	r0, r3
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	081e0000 	.word	0x081e0000
 8000688:	08010000 	.word	0x08010000
 800068c:	20000284 	.word	0x20000284
 8000690:	20000080 	.word	0x20000080

08000694 <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	4916      	ldr	r1, [pc, #88]	; (80006fc <FlashErase+0x68>)
 80006a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006a8:	4419      	add	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	425b      	negs	r3, r3
 80006ae:	440b      	add	r3, r1
 80006b0:	3b01      	subs	r3, #1
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d901      	bls.n	80006ba <FlashErase+0x26>
  {
    return BLT_FALSE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	e01c      	b.n	80006f4 <FlashErase+0x60>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 fa32 	bl	8000b24 <FlashGetSector>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fa29 	bl	8000b24 <FlashGetSector>
 80006d2:	4603      	mov	r3, r0
 80006d4:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2bff      	cmp	r3, #255	; 0xff
 80006da:	d002      	beq.n	80006e2 <FlashErase+0x4e>
 80006dc:	7bbb      	ldrb	r3, [r7, #14]
 80006de:	2bff      	cmp	r3, #255	; 0xff
 80006e0:	d101      	bne.n	80006e6 <FlashErase+0x52>
  {
    return BLT_FALSE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	e006      	b.n	80006f4 <FlashErase+0x60>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 80006e6:	7bba      	ldrb	r2, [r7, #14]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f9c3 	bl	8000a78 <FlashEraseSectors>
 80006f2:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	081e0000 	.word	0x081e0000

08000700 <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <FlashWriteChecksum+0x84>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000712:	d101      	bne.n	8000718 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8000714:	2301      	movs	r3, #1
 8000716:	e031      	b.n	800077c <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <FlashWriteChecksum+0x88>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <FlashWriteChecksum+0x8c>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <FlashWriteChecksum+0x90>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <FlashWriteChecksum+0x94>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <FlashWriteChecksum+0x98>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <FlashWriteChecksum+0x9c>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4413      	add	r3, r2
 8000752:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <FlashWriteChecksum+0xa0>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4413      	add	r3, r2
 800075c:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	43db      	mvns	r3, r3
 8000762:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3301      	adds	r3, #1
 8000768:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <FlashWriteChecksum+0xa4>)
 800076c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000770:	1d3a      	adds	r2, r7, #4
 8000772:	2104      	movs	r1, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff41 	bl	80005fc <FlashWrite>
 800077a:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000284 	.word	0x20000284
 8000788:	20000288 	.word	0x20000288
 800078c:	2000028c 	.word	0x2000028c
 8000790:	20000290 	.word	0x20000290
 8000794:	20000294 	.word	0x20000294
 8000798:	20000298 	.word	0x20000298
 800079c:	2000029c 	.word	0x2000029c
 80007a0:	200002a0 	.word	0x200002a0
 80007a4:	08010000 	.word	0x08010000

080007a8 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <FlashVerifyChecksum+0x84>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <FlashVerifyChecksum+0x84>)
 80007be:	3304      	adds	r3, #4
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <FlashVerifyChecksum+0x84>)
 80007ca:	3308      	adds	r3, #8
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <FlashVerifyChecksum+0x84>)
 80007d6:	330c      	adds	r3, #12
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <FlashVerifyChecksum+0x84>)
 80007e2:	3310      	adds	r3, #16
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <FlashVerifyChecksum+0x84>)
 80007ee:	3314      	adds	r3, #20
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <FlashVerifyChecksum+0x84>)
 80007fa:	3318      	adds	r3, #24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <FlashVerifyChecksum+0x84>)
 8000806:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 800081c:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	08010000 	.word	0x08010000

08000830 <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <FlashDone+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800083c:	d007      	beq.n	800084e <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <FlashDone+0x40>)
 8000840:	f000 f8dc 	bl	80009fc <FlashWriteBlock>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d101      	bne.n	800084e <FlashDone+0x1e>
    {
      return BLT_FALSE;
 800084a:	2300      	movs	r3, #0
 800084c:	e00d      	b.n	800086a <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <FlashDone+0x44>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000856:	d007      	beq.n	8000868 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <FlashDone+0x44>)
 800085a:	f000 f8cf 	bl	80009fc <FlashWriteBlock>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <FlashDone+0x38>
    {
      return BLT_FALSE;
 8000864:	2300      	movs	r3, #0
 8000866:	e000      	b.n	800086a <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8000868:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000284 	.word	0x20000284
 8000874:	20000080 	.word	0x20000080

08000878 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	08010000 	.word	0x08010000

0800088c <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e012      	b.n	80008ca <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d101      	bne.n	80008b2 <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00b      	b.n	80008ca <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3304      	adds	r3, #4
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	6839      	ldr	r1, [r7, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe66 	bl	8000594 <CpuMemCopy>
  return BLT_TRUE;
 80008c8:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <FlashSwitchBlock+0x58>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d102      	bne.n	80008ec <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <FlashSwitchBlock+0x5c>)
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	e010      	b.n	800090e <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <FlashSwitchBlock+0x60>)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d104      	bne.n	80008fe <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <FlashSwitchBlock+0x58>)
 80008f6:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <FlashSwitchBlock+0x60>)
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	e007      	b.n	800090e <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 f87c 	bl	80009fc <FlashWriteBlock>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d101      	bne.n	800090e <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 800090a:	2300      	movs	r3, #0
 800090c:	e009      	b.n	8000922 <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 800090e:	6839      	ldr	r1, [r7, #0]
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ffbb 	bl	800088c <FlashInitBlock>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d101      	bne.n	8000920 <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 800091c:	2300      	movs	r3, #0
 800091e:	e000      	b.n	8000922 <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8000920:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000284 	.word	0x20000284
 8000930:	20000080 	.word	0x20000080
 8000934:	08010000 	.word	0x08010000

08000938 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800095a:	d108      	bne.n	800096e <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 800095c:	6979      	ldr	r1, [r7, #20]
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f7ff ff94 	bl	800088c <FlashInitBlock>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 800096a:	2300      	movs	r3, #0
 800096c:	e042      	b.n	80009f4 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	429a      	cmp	r2, r3
 8000976:	d009      	beq.n	800098c <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 8000978:	6979      	ldr	r1, [r7, #20]
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff ffaa 	bl	80008d4 <FlashSwitchBlock>
 8000980:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8000988:	2300      	movs	r3, #0
 800098a:	e033      	b.n	80009f4 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	3304      	adds	r3, #4
 800099a:	61fb      	str	r3, [r7, #28]
  src = data;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 80009a0:	f000 fc53 	bl	800124a <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	3204      	adds	r2, #4
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009b0:	d30f      	bcc.n	80009d2 <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009b8:	4619      	mov	r1, r3
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f7ff ff8a 	bl	80008d4 <FlashSwitchBlock>
 80009c0:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e013      	b.n	80009f4 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	3304      	adds	r3, #4
 80009d0:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3301      	adds	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
    src++;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3301      	adds	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1d6      	bne.n	80009a0 <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 80009f2:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 80009f4:	4618      	mov	r0, r3
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8000a04:	2301      	movs	r3, #1
 8000a06:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8000a08:	f004 f8ba 	bl	8004b80 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e028      	b.n	8000a64 <FlashWriteBlock+0x68>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	3304      	adds	r3, #4
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8000a2c:	f000 fc0d 	bl	800124a <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	f04f 0400 	mov.w	r4, #0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4623      	mov	r3, r4
 8000a3a:	68f9      	ldr	r1, [r7, #12]
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f004 f84b 	bl	8004ad8 <HAL_FLASH_Program>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <FlashWriteBlock+0x52>
    {
      result = BLT_FALSE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	74fb      	strb	r3, [r7, #19]
      break;
 8000a4c:	e00d      	b.n	8000a6a <FlashWriteBlock+0x6e>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d002      	beq.n	8000a5e <FlashWriteBlock+0x62>
    {
      result = BLT_FALSE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	74fb      	strb	r3, [r7, #19]
      break;
 8000a5c:	e005      	b.n	8000a6a <FlashWriteBlock+0x6e>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2b7f      	cmp	r3, #127	; 0x7f
 8000a68:	d9d3      	bls.n	8000a12 <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8000a6a:	f004 f8ab 	bl	8004bc4 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 8000a6e:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 8000a70:	4618      	mov	r0, r3
 8000a72:	371c      	adds	r7, #28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}

08000a78 <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d902      	bls.n	8000aa0 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d303      	bcc.n	8000ab0 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 8000aa8:	2217      	movs	r2, #23
  if ((first_sector < flashLayout[0].sector_num) || \
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d902      	bls.n	8000ab6 <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 8000ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d12b      	bne.n	8000b16 <FlashEraseSectors+0x9e>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 8000aca:	f004 f859 	bl	8004b80 <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ad4:	e018      	b.n	8000b08 <FlashEraseSectors+0x90>
    {
      /* keep the watchdog happy */
      CopService();
 8000ad6:	f000 fbb8 	bl	800124a <CopService>
      /* set the sector to erase */
      eraseInitStruct.Sector = sectorIdx;
 8000ada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ade:	61bb      	str	r3, [r7, #24]
      /* submit the sector erase request */
      if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8000ae0:	f107 020c 	add.w	r2, r7, #12
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 f9b8 	bl	8004e60 <HAL_FLASHEx_Erase>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <FlashEraseSectors+0x86>
      {
        /* could not perform erase operation */
        result = BLT_FALSE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        /* error detected so don't bother continuing with the loop */
        break;
 8000afc:	e009      	b.n	8000b12 <FlashEraseSectors+0x9a>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000afe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b02:	3301      	adds	r3, #1
 8000b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d9e1      	bls.n	8000ad6 <FlashEraseSectors+0x5e>
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 8000b12:	f004 f857 	bl	8004bc4 <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 8000b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
} /*** end of FlashEraseSectors ***/
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 8000b2c:	23ff      	movs	r3, #255	; 0xff
 8000b2e:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	73bb      	strb	r3, [r7, #14]
 8000b34:	e02f      	b.n	8000b96 <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 8000b36:	f000 fb88 	bl	800124a <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000b3a:	7bba      	ldrb	r2, [r7, #14]
 8000b3c:	491a      	ldr	r1, [pc, #104]	; (8000ba8 <FlashGetSector+0x84>)
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d31f      	bcc.n	8000b90 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 8000b50:	7bba      	ldrb	r2, [r7, #14]
 8000b52:	4915      	ldr	r1, [pc, #84]	; (8000ba8 <FlashGetSector+0x84>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 8000b60:	7bba      	ldrb	r2, [r7, #14]
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <FlashGetSector+0x84>)
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	4403      	add	r3, r0
 8000b6e:	3304      	adds	r3, #4
 8000b70:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 8000b72:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d20a      	bcs.n	8000b90 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8000b7a:	7bba      	ldrb	r2, [r7, #14]
 8000b7c:	490a      	ldr	r1, [pc, #40]	; (8000ba8 <FlashGetSector+0x84>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	440b      	add	r3, r1
 8000b88:	3308      	adds	r3, #8
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 8000b8e:	e005      	b.n	8000b9c <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000b90:	7bbb      	ldrb	r3, [r7, #14]
 8000b92:	3301      	adds	r3, #1
 8000b94:	73bb      	strb	r3, [r7, #14]
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	2b13      	cmp	r3, #19
 8000b9a:	d9cc      	bls.n	8000b36 <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08007454 	.word	0x08007454

08000bac <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8000bb0:	f7ff fd10 	bl	80005d4 <FlashInit>
} /*** end of NvmInit ***/
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff fd17 	bl	80005fc <FlashWrite>
 8000bce:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fd55 	bl	8000694 <FlashErase>
 8000bea:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8000bf8:	f7ff fdd6 	bl	80007a8 <FlashVerifyChecksum>
 8000bfc:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 8000c06:	f7ff fe37 	bl	8000878 <FlashGetUserProgBaseAddress>
 8000c0a:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8000c14:	f7ff fd74 	bl	8000700 <FlashWriteChecksum>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <NvmDone+0x12>
  {
    return BLT_FALSE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e002      	b.n	8000c28 <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8000c22:	f7ff fe05 	bl	8000830 <FlashDone>
 8000c26:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60da      	str	r2, [r3, #12]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	2b20      	cmp	r3, #32
 8000c5e:	bf0c      	ite	eq
 8000c60:	2301      	moveq	r3, #1
 8000c62:	2300      	movne	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c82:	2b80      	cmp	r3, #128	; 0x80
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	b2db      	uxtb	r3, r3
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000cbe:	78fa      	ldrb	r2, [r7, #3]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	605a      	str	r2, [r3, #4]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <Rs232Init>:
** \brief     Initializes the RS232 communication interface.
** \return    none.
**
****************************************************************************************/
void Rs232Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
            (BOOT_COM_RS232_CHANNEL_INDEX == 3) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 4) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 5));

  /* configure UART peripheral */
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8000cd6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cda:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  /* initialize the UART peripheral */
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <Rs232Init+0x3c>)
 8000cfa:	f006 fa27 	bl	800714c <LL_USART_Init>
  LL_USART_Enable(USART_CHANNEL);
 8000cfe:	4803      	ldr	r0, [pc, #12]	; (8000d0c <Rs232Init+0x3c>)
 8000d00:	f7ff ff94 	bl	8000c2c <LL_USART_Enable>
} /*** end of Rs232Init ***/
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40011400 	.word	0x40011400

08000d10 <Rs232TransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitPacket(blt_int8u *data, blt_int8u len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b40      	cmp	r3, #64	; 0x40
 8000d20:	d903      	bls.n	8000d2a <Rs232TransmitPacket+0x1a>
 8000d22:	2179      	movs	r1, #121	; 0x79
 8000d24:	480f      	ldr	r0, [pc, #60]	; (8000d64 <Rs232TransmitPacket+0x54>)
 8000d26:	f000 f910 	bl	8000f4a <AssertFailure>

  /* first transmit the length of the packet */
  Rs232TransmitByte(len);
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f89b 	bl	8000e68 <Rs232TransmitByte>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	81fb      	strh	r3, [r7, #14]
 8000d36:	e00b      	b.n	8000d50 <Rs232TransmitPacket+0x40>
  {
    /* keep the watchdog happy */
    CopService();
 8000d38:	f000 fa87 	bl	800124a <CopService>
    /* write byte */
    Rs232TransmitByte(data[data_index]);
 8000d3c:	89fb      	ldrh	r3, [r7, #14]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f88f 	bl	8000e68 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	81fb      	strh	r3, [r7, #14]
 8000d50:	78fb      	ldrb	r3, [r7, #3]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	89fa      	ldrh	r2, [r7, #14]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d3ee      	bcc.n	8000d38 <Rs232TransmitPacket+0x28>
  }
} /*** end of Rs232TransmitPacket ***/
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	0800739c 	.word	0x0800739c

08000d68 <Rs232ReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool Rs232ReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;
  static blt_int32u xcpCtoRxStartTime = 0;

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <Rs232ReceivePacket+0xb8>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d119      	bne.n	8000dae <Rs232ReceivePacket+0x46>
  {
    /* store the message length when received */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8000d7a:	482a      	ldr	r0, [pc, #168]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000d7c:	f000 f85a 	bl	8000e34 <Rs232ReceiveByte>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d146      	bne.n	8000e14 <Rs232ReceivePacket+0xac>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 8000d86:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d042      	beq.n	8000e14 <Rs232ReceivePacket+0xac>
           (xcpCtoReqPacket[0] <= BOOT_COM_RS232_RX_MAX_DATA) )
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 8000d92:	2b40      	cmp	r3, #64	; 0x40
 8000d94:	d83e      	bhi.n	8000e14 <Rs232ReceivePacket+0xac>
      {
        /* store the start time */
        xcpCtoRxStartTime = TimerGet();
 8000d96:	f000 f8c7 	bl	8000f28 <TimerGet>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <Rs232ReceivePacket+0xc0>)
 8000d9e:	601a      	str	r2, [r3, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <Rs232ReceivePacket+0xb8>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e032      	b.n	8000e14 <Rs232ReceivePacket+0xac>
    }
  }
  else
  {
    /* store the next packet byte */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000db6:	4413      	add	r3, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f83b 	bl	8000e34 <Rs232ReceiveByte>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d11c      	bne.n	8000dfe <Rs232ReceivePacket+0x96>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000dce:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <Rs232ReceivePacket+0xbc>)
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d11b      	bne.n	8000e14 <Rs232ReceivePacket+0xac>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	4914      	ldr	r1, [pc, #80]	; (8000e30 <Rs232ReceivePacket+0xc8>)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	f7ff fbd4 	bl	8000594 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <Rs232ReceivePacket+0xb8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <Rs232ReceivePacket+0xc4>)
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00b      	b.n	8000e16 <Rs232ReceivePacket+0xae>
      }
    }
    else
    {
      /* check packet reception timeout */
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8000dfe:	f000 f893 	bl	8000f28 <TimerGet>
 8000e02:	4602      	mov	r2, r0
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <Rs232ReceivePacket+0xc0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3364      	adds	r3, #100	; 0x64
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d902      	bls.n	8000e14 <Rs232ReceivePacket+0xac>
      {
        /* cancel cto packet reception due to timeout. note that that automaticaly
         * discards the already received packet bytes, allowing the host to retry.
         */
        xcpCtoRxInProgress = BLT_FALSE;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <Rs232ReceivePacket+0xb8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 8000e14:	2300      	movs	r3, #0
} /*** end of Rs232ReceivePacket ***/
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000488 	.word	0x20000488
 8000e24:	2000048c 	.word	0x2000048c
 8000e28:	200004d0 	.word	0x200004d0
 8000e2c:	200004d4 	.word	0x200004d4
 8000e30:	2000048d 	.word	0x2000048d

08000e34 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <Rs232ReceiveByte+0x30>)
 8000e3e:	f7ff ff05 	bl	8000c4c <LL_USART_IsActiveFlag_RXNE>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <Rs232ReceiveByte+0x26>
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8000e48:	4806      	ldr	r0, [pc, #24]	; (8000e64 <Rs232ReceiveByte+0x30>)
 8000e4a:	f7ff ff25 	bl	8000c98 <LL_USART_ReceiveData8>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	701a      	strb	r2, [r3, #0]
    /* all done */
    return BLT_TRUE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <Rs232ReceiveByte+0x28>
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8000e5a:	2300      	movs	r3, #0
} /*** end of Rs232ReceiveByte ***/
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40011400 	.word	0x40011400

08000e68 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4619      	mov	r1, r3
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <Rs232TransmitByte+0x48>)
 8000e78:	f7ff ff1b 	bl	8000cb2 <LL_USART_TransmitData8>
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 8000e7c:	f000 f854 	bl	8000f28 <TimerGet>
 8000e80:	4603      	mov	r3, r0
 8000e82:	330a      	adds	r3, #10
 8000e84:	60fb      	str	r3, [r7, #12]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8000e86:	e007      	b.n	8000e98 <Rs232TransmitByte+0x30>
  {
    /* keep the watchdog happy */
    CopService();
 8000e88:	f000 f9df 	bl	800124a <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8000e8c:	f000 f84c 	bl	8000f28 <TimerGet>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d306      	bcc.n	8000ea6 <Rs232TransmitByte+0x3e>
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <Rs232TransmitByte+0x48>)
 8000e9a:	f7ff feea 	bl	8000c72 <LL_USART_IsActiveFlag_TXE>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f1      	beq.n	8000e88 <Rs232TransmitByte+0x20>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 8000ea4:	e000      	b.n	8000ea8 <Rs232TransmitByte+0x40>
      break;
 8000ea6:	bf00      	nop
} /*** end of Rs232TransmitByte ***/
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40011400 	.word	0x40011400

08000eb4 <TimerInit>:
** \brief     Initializes the polling based millisecond timer driver.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Reset the timer configuration. */
  TimerReset();
 8000eb8:	f000 f814 	bl	8000ee4 <TimerReset>

  /* Configure the systick frequency as a 1 ms event generator. */
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <TimerInit+0x24>)
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <TimerInit+0x28>)
 8000ec0:	605a      	str	r2, [r3, #4]
  /* Reset the current counter value. */
  SysTick->VAL = 0;
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <TimerInit+0x24>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  /* Select core clock as source and enable the timer. */
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <TimerInit+0x24>)
 8000eca:	2205      	movs	r2, #5
 8000ecc:	601a      	str	r2, [r3, #0]
  /* Reset the millisecond counter value. */
  millisecond_counter = 0;
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <TimerInit+0x2c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	e000e010 	.word	0xe000e010
 8000edc:	00034bbf 	.word	0x00034bbf
 8000ee0:	200004d8 	.word	0x200004d8

08000ee4 <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* Set the systick's status and control register back into the default reset value. */
  SysTick->CTRL = 0;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <TimerReset+0x14>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
} /* end of TimerReset */
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <TimerUpdate+0x24>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d004      	beq.n	8000f16 <TimerUpdate+0x1a>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <TimerUpdate+0x28>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <TimerUpdate+0x28>)
 8000f14:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e010 	.word	0xe000e010
 8000f24:	200004d8 	.word	0x200004d8

08000f28 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8000f2c:	f7ff ffe6 	bl	8000efc <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 8000f30:	4b01      	ldr	r3, [pc, #4]	; (8000f38 <TimerGet+0x10>)
 8000f32:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200004d8 	.word	0x200004d8

08000f3c <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8000f40:	f7ff fff2 	bl	8000f28 <TimerGet>
 8000f44:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8000f54:	f000 f979 	bl	800124a <CopService>
 8000f58:	e7fc      	b.n	8000f54 <AssertFailure+0xa>
	...

08000f5c <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <BackDoorInit+0x18>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8000f66:	f000 f887 	bl	8001078 <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 8000f6a:	f000 f805 	bl	8000f78 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200004dc 	.word	0x200004dc

08000f78 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8000f7e:	f000 f947 	bl	8001210 <ComIsConnected>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d06d      	beq.n	8001064 <BackDoorCheck+0xec>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8000f88:	4b38      	ldr	r3, [pc, #224]	; (800106c <BackDoorCheck+0xf4>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d16a      	bne.n	8001066 <BackDoorCheck+0xee>
  {
	  #if (Display == 1)
	    int time = BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime;
 8000f90:	4b37      	ldr	r3, [pc, #220]	; (8001070 <BackDoorCheck+0xf8>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <BackDoorCheck+0xfc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f9e:	607b      	str	r3, [r7, #4]

	    int perc = TimerGet()*100/time;
 8000fa0:	f7ff ffc2 	bl	8000f28 <TimerGet>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	fb03 f202 	mul.w	r2, r3, r2
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	603b      	str	r3, [r7, #0]

		BSP_LCD_DrawHLine(200, 298, 4*perc);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000fc2:	20c8      	movs	r0, #200	; 0xc8
 8000fc4:	f001 fde8 	bl	8002b98 <BSP_LCD_DrawHLine>
	    BSP_LCD_DrawHLine(200, 299, 4*perc);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f240 112b 	movw	r1, #299	; 0x12b
 8000fd6:	20c8      	movs	r0, #200	; 0xc8
 8000fd8:	f001 fdde 	bl	8002b98 <BSP_LCD_DrawHLine>
	  	BSP_LCD_DrawHLine(200, 300, 4*perc);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000fea:	20c8      	movs	r0, #200	; 0xc8
 8000fec:	f001 fdd4 	bl	8002b98 <BSP_LCD_DrawHLine>
		BSP_LCD_DrawHLine(200, 301, 4*perc);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	f240 112d 	movw	r1, #301	; 0x12d
 8000ffe:	20c8      	movs	r0, #200	; 0xc8
 8001000:	f001 fdca 	bl	8002b98 <BSP_LCD_DrawHLine>
		BSP_LCD_DrawHLine(200, 302, 4*perc);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8001012:	20c8      	movs	r0, #200	; 0xc8
 8001014:	f001 fdc0 	bl	8002b98 <BSP_LCD_DrawHLine>
		BSP_LCD_DrawHLine(200, 303, 4*perc);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	b29b      	uxth	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	f240 112f 	movw	r1, #303	; 0x12f
 8001026:	20c8      	movs	r0, #200	; 0xc8
 8001028:	f001 fdb6 	bl	8002b98 <BSP_LCD_DrawHLine>
		BSP_LCD_DrawHLine(200, 304, 4*perc);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b29b      	uxth	r3, r3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	f44f 7198 	mov.w	r1, #304	; 0x130
 800103a:	20c8      	movs	r0, #200	; 0xc8
 800103c:	f001 fdac 	bl	8002b98 <BSP_LCD_DrawHLine>

	#endif
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8001040:	f7ff ff72 	bl	8000f28 <TimerGet>
 8001044:	4601      	mov	r1, r0
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <BackDoorCheck+0xf8>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <BackDoorCheck+0xfc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001054:	4299      	cmp	r1, r3
 8001056:	d306      	bcc.n	8001066 <BackDoorCheck+0xee>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <BackDoorCheck+0xf4>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */


   		CpuStartUserProgram();
 800105e:	f7ff fa5f 	bl	8000520 <CpuStartUserProgram>
 8001062:	e000      	b.n	8001066 <BackDoorCheck+0xee>
    return;
 8001064:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200004dc 	.word	0x200004dc
 8001070:	200004e4 	.word	0x200004e4
 8001074:	200004e0 	.word	0x200004e0

08001078 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <BackDoorRestartTimer+0x1c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d104      	bne.n	800108e <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 8001084:	f7ff ff50 	bl	8000f28 <TimerGet>
 8001088:	4602      	mov	r2, r0
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <BackDoorRestartTimer+0x20>)
 800108c:	601a      	str	r2, [r3, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200004dc 	.word	0x200004dc
 8001098:	200004e0 	.word	0x200004e0

0800109c <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 80010a0:	f7ff fa38 	bl	8000514 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 80010a4:	f000 f8cb 	bl	800123e <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 80010a8:	f7ff ff04 	bl	8000eb4 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 80010ac:	f7ff fd7e 	bl	8000bac <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 80010b0:	f000 f810 	bl	80010d4 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 80010b4:	f7ff ff52 	bl	8000f5c <BackDoorInit>
} /*** end of BootInit ***/
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 80010c0:	f000 f8c3 	bl	800124a <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 80010c4:	f7ff ff1a 	bl	8000efc <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 80010c8:	f000 f812 	bl	80010f0 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 80010cc:	f7ff ff54 	bl	8000f78 <BackDoorCheck>
} /*** end of BootTask ***/
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 80010d8:	f000 f8be 	bl	8001258 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 80010dc:	f7ff fdf8 	bl	8000cd0 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <ComInit+0x18>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000000 	.word	0x20000000

080010f0 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	4619      	mov	r1, r3
 80010fa:	4809      	ldr	r0, [pc, #36]	; (8001120 <ComTask+0x30>)
 80010fc:	f7ff fe34 	bl	8000d68 <Rs232ReceivePacket>
 8001100:	4603      	mov	r3, r0
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_RS232;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <ComTask+0x34>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4619      	mov	r1, r3
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <ComTask+0x30>)
 8001112:	f000 f8dd 	bl	80012d0 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200004e8 	.word	0x200004e8
 8001124:	20000000 	.word	0x20000000

08001128 <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <ComTransmitPacket+0x2c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d105      	bne.n	8001158 <ComTransmitPacket+0x20>
  {
    Rs232TransmitPacket(data, (blt_int8u)len);
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fddc 	bl	8000d10 <Rs232TransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8001158:	f000 f8ac 	bl	80012b4 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000

08001168 <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <ComGetActiveInterfaceMaxRxLen+0x50>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d816      	bhi.n	80011a4 <ComGetActiveInterfaceMaxRxLen+0x3c>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <ComGetActiveInterfaceMaxRxLen+0x14>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	0800118d 	.word	0x0800118d
 8001180:	08001193 	.word	0x08001193
 8001184:	08001199 	.word	0x08001199
 8001188:	0800119f 	.word	0x0800119f
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	80fb      	strh	r3, [r7, #6]
      break;
 8001190:	e00b      	b.n	80011aa <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8001192:	2300      	movs	r3, #0
 8001194:	80fb      	strh	r3, [r7, #6]
      break;
 8001196:	e008      	b.n	80011aa <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8001198:	2300      	movs	r3, #0
 800119a:	80fb      	strh	r3, [r7, #6]
      break;
 800119c:	e005      	b.n	80011aa <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 800119e:	2340      	movs	r3, #64	; 0x40
 80011a0:	80fb      	strh	r3, [r7, #6]
      break;
 80011a2:	e002      	b.n	80011aa <ComGetActiveInterfaceMaxRxLen+0x42>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	80fb      	strh	r3, [r7, #6]
      break;
 80011a8:	bf00      	nop
  }

  return result;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000000 	.word	0x20000000

080011bc <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <ComGetActiveInterfaceMaxTxLen+0x50>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d816      	bhi.n	80011f8 <ComGetActiveInterfaceMaxTxLen+0x3c>
 80011ca:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <ComGetActiveInterfaceMaxTxLen+0x14>)
 80011cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011e7 	.word	0x080011e7
 80011d8:	080011ed 	.word	0x080011ed
 80011dc:	080011f3 	.word	0x080011f3
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	80fb      	strh	r3, [r7, #6]
      break;
 80011e4:	e00b      	b.n	80011fe <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 80011e6:	2300      	movs	r3, #0
 80011e8:	80fb      	strh	r3, [r7, #6]
      break;
 80011ea:	e008      	b.n	80011fe <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 80011ec:	2300      	movs	r3, #0
 80011ee:	80fb      	strh	r3, [r7, #6]
      break;
 80011f0:	e005      	b.n	80011fe <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	80fb      	strh	r3, [r7, #6]
      break;
 80011f6:	e002      	b.n	80011fe <ComGetActiveInterfaceMaxTxLen+0x42>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 80011f8:	2340      	movs	r3, #64	; 0x40
 80011fa:	80fb      	strh	r3, [r7, #6]
      break;
 80011fc:	bf00      	nop
  }

  return result;
 80011fe:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20000000 	.word	0x20000000

08001210 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 8001216:	2300      	movs	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 800121a:	f000 f83b 	bl	8001294 <XcpIsConnected>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8001224:	2301      	movs	r3, #1
 8001226:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 8001228:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <ComDeferredInit>:
**            a request.
** \return    none
**
****************************************************************************************/
void ComDeferredInit(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  /* the default internal timed backdoor mechanism should start its timer after the
   * communication interfaces are initialized. since a deferred initialization was now
   * performed, the backdoor timer should be restarted.
   */
  BackDoorRestartTimer();
 8001236:	f7ff ff1f 	bl	8001078 <BackDoorRestartTimer>
#endif
} /*** end of ComDeferredInit ***/
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}

0800123e <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8001242:	f000 fc38 	bl	8001ab6 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}

0800124a <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 800124e:	f000 fc39 	bl	8001ac4 <CopServiceHook>
#endif
} /*** end of CopService ***/
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <XcpInit+0x38>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <XcpInit+0x38>)
 8001264:	2200      	movs	r2, #0
 8001266:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <XcpInit+0x38>)
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <XcpInit+0x38>)
 8001272:	2200      	movs	r2, #0
 8001274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <XcpInit+0x38>)
 800127a:	2200      	movs	r2, #0
 800127c:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <XcpInit+0x38>)
 8001280:	2200      	movs	r2, #0
 8001282:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	2000052c 	.word	0x2000052c

08001294 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <XcpIsConnected+0x1c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <XcpIsConnected+0x10>
  {
    return BLT_FALSE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e000      	b.n	80012a6 <XcpIsConnected+0x12>
  }
  return BLT_TRUE;
 80012a4:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	2000052c 	.word	0x2000052c

080012b4 <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <XcpPacketTransmitted+0x18>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2000052c 	.word	0x2000052c

080012d0 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2bff      	cmp	r3, #255	; 0xff
 80012e2:	d10f      	bne.n	8001304 <XcpPacketReceived+0x34>
  {


	  /* process the connect command */
    XcpCmdConnect(data);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f9a1 	bl	800162c <XcpCmdConnect>
#if (Display ==1)
      //BSP_LCD_Clear(LCD_COLOR_BLACK);
   	BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, "bootloader connected ...", CENTER_MODE);
 80012ea:	f001 fa6d 	bl	80027c8 <BSP_LCD_GetYSize>
 80012ee:	4603      	mov	r3, r0
 80012f0:	085b      	lsrs	r3, r3, #1
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	3b1b      	subs	r3, #27
 80012f6:	b299      	uxth	r1, r3
 80012f8:	2301      	movs	r3, #1
 80012fa:	4a56      	ldr	r2, [pc, #344]	; (8001454 <XcpPacketReceived+0x184>)
 80012fc:	2000      	movs	r0, #0
 80012fe:	f001 fb87 	bl	8002a10 <BSP_LCD_DisplayStringAt>
 8001302:	e089      	b.n	8001418 <XcpPacketReceived+0x148>


#endif
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 8001304:	4b54      	ldr	r3, [pc, #336]	; (8001458 <XcpPacketReceived+0x188>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	f040 809e 	bne.w	800144a <XcpPacketReceived+0x17a>
  {




	switch (data[0])
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2bf3      	cmp	r3, #243	; 0xf3
 8001314:	d035      	beq.n	8001382 <XcpPacketReceived+0xb2>
 8001316:	2bf3      	cmp	r3, #243	; 0xf3
 8001318:	dc11      	bgt.n	800133e <XcpPacketReceived+0x6e>
 800131a:	2bcf      	cmp	r3, #207	; 0xcf
 800131c:	d070      	beq.n	8001400 <XcpPacketReceived+0x130>
 800131e:	2bcf      	cmp	r3, #207	; 0xcf
 8001320:	dc06      	bgt.n	8001330 <XcpPacketReceived+0x60>
 8001322:	2bc9      	cmp	r3, #201	; 0xc9
 8001324:	d041      	beq.n	80013aa <XcpPacketReceived+0xda>
 8001326:	2bcc      	cmp	r3, #204	; 0xcc
 8001328:	d06e      	beq.n	8001408 <XcpPacketReceived+0x138>
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d019      	beq.n	8001362 <XcpPacketReceived+0x92>
 800132e:	e06f      	b.n	8001410 <XcpPacketReceived+0x140>
 8001330:	2bd1      	cmp	r3, #209	; 0xd1
 8001332:	d046      	beq.n	80013c2 <XcpPacketReceived+0xf2>
 8001334:	2bd1      	cmp	r3, #209	; 0xd1
 8001336:	db3c      	blt.n	80013b2 <XcpPacketReceived+0xe2>
 8001338:	2bd2      	cmp	r3, #210	; 0xd2
 800133a:	d03e      	beq.n	80013ba <XcpPacketReceived+0xea>
 800133c:	e068      	b.n	8001410 <XcpPacketReceived+0x140>
 800133e:	2bfa      	cmp	r3, #250	; 0xfa
 8001340:	d023      	beq.n	800138a <XcpPacketReceived+0xba>
 8001342:	2bfa      	cmp	r3, #250	; 0xfa
 8001344:	dc06      	bgt.n	8001354 <XcpPacketReceived+0x84>
 8001346:	2bf5      	cmp	r3, #245	; 0xf5
 8001348:	d00f      	beq.n	800136a <XcpPacketReceived+0x9a>
 800134a:	2bf5      	cmp	r3, #245	; 0xf5
 800134c:	db11      	blt.n	8001372 <XcpPacketReceived+0xa2>
 800134e:	2bf6      	cmp	r3, #246	; 0xf6
 8001350:	d013      	beq.n	800137a <XcpPacketReceived+0xaa>
 8001352:	e05d      	b.n	8001410 <XcpPacketReceived+0x140>
 8001354:	2bfd      	cmp	r3, #253	; 0xfd
 8001356:	d020      	beq.n	800139a <XcpPacketReceived+0xca>
 8001358:	2bfe      	cmp	r3, #254	; 0xfe
 800135a:	d022      	beq.n	80013a2 <XcpPacketReceived+0xd2>
 800135c:	2bfc      	cmp	r3, #252	; 0xfc
 800135e:	d018      	beq.n	8001392 <XcpPacketReceived+0xc2>
 8001360:	e056      	b.n	8001410 <XcpPacketReceived+0x140>
    {
	#if (Display == 1)
		case PROGRESS:
			progress(data);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f890 	bl	8001488 <progress>
    	break;
 8001368:	e056      	b.n	8001418 <XcpPacketReceived+0x148>
	#endif
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fa26 	bl	80017bc <XcpCmdUpload>
        break;
 8001370:	e052      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fa5e 	bl	8001834 <XcpCmdShortUpload>
        break;
 8001378:	e04e      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fa06 	bl	800178c <XcpCmdSetMta>
        break;
 8001380:	e04a      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fa96 	bl	80018b4 <XcpCmdBuildCheckSum>
        break;
 8001388:	e046      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f9d8 	bl	8001740 <XcpCmdGetId>
        break;
 8001390:	e042      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f9c8 	bl	8001728 <XcpCmdSynch>
        break;
 8001398:	e03e      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f9a0 	bl	80016e0 <XcpCmdGetStatus>
        break;
 80013a0:	e03a      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f986 	bl	80016b4 <XcpCmdDisconnect>
        break;
 80013a8:	e036      	b.n	8001418 <XcpPacketReceived+0x148>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 face 	bl	800194c <XcpCmdProgramMax>
        break;
 80013b0:	e032      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 faf8 	bl	80019a8 <XcpCmdProgram>
        break;
 80013b8:	e02e      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 faa0 	bl	8001900 <XcpCmdProgramStart>
        break;
 80013c0:	e02a      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM_CLEAR:
	#if (Display == 1)
    	  if(clear == 0){
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <XcpPacketReceived+0x18c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <XcpPacketReceived+0x128>
        	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80013ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013ce:	f001 fab3 	bl	8002938 <BSP_LCD_Clear>
        	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80013d2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013d6:	f001 faaf 	bl	8002938 <BSP_LCD_Clear>
        	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, "clearing memory ...", CENTER_MODE);
 80013da:	f001 f9f5 	bl	80027c8 <BSP_LCD_GetYSize>
 80013de:	4603      	mov	r3, r0
 80013e0:	085b      	lsrs	r3, r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3b1b      	subs	r3, #27
 80013e6:	b299      	uxth	r1, r3
 80013e8:	2301      	movs	r3, #1
 80013ea:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <XcpPacketReceived+0x190>)
 80013ec:	2000      	movs	r0, #0
 80013ee:	f001 fb0f 	bl	8002a10 <BSP_LCD_DisplayStringAt>
        	  clear = 1;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <XcpPacketReceived+0x18c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
    	  }
	#endif
        XcpCmdProgramClear(data);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fb1d 	bl	8001a38 <XcpCmdProgramClear>
        break;
 80013fe:	e00b      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fb39 	bl	8001a78 <XcpCmdProgramReset>
        break;
 8001406:	e007      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fb49 	bl	8001aa0 <XcpCmdProgramPrepare>
        break;
 800140e:	e003      	b.n	8001418 <XcpPacketReceived+0x148>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8001410:	2020      	movs	r0, #32
 8001412:	f000 f8f3 	bl	80015fc <XcpSetCtoError>
        break;
 8001416:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <XcpPacketReceived+0x188>)
 800141a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800141e:	2b01      	cmp	r3, #1
 8001420:	d102      	bne.n	8001428 <XcpPacketReceived+0x158>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8001422:	2010      	movs	r0, #16
 8001424:	f000 f8ea 	bl	80015fc <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <XcpPacketReceived+0x188>)
 800142a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800142e:	2b00      	cmp	r3, #0
 8001430:	dd0c      	ble.n	800144c <XcpPacketReceived+0x17c>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <XcpPacketReceived+0x188>)
 8001434:	2201      	movs	r2, #1
 8001436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <XcpPacketReceived+0x188>)
 800143c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001440:	4619      	mov	r1, r3
 8001442:	4808      	ldr	r0, [pc, #32]	; (8001464 <XcpPacketReceived+0x194>)
 8001444:	f000 f810 	bl	8001468 <XcpTransmitPacket>
 8001448:	e000      	b.n	800144c <XcpPacketReceived+0x17c>
    return;
 800144a:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	08007408 	.word	0x08007408
 8001458:	2000052c 	.word	0x2000052c
 800145c:	20000528 	.word	0x20000528
 8001460:	08007424 	.word	0x08007424
 8001464:	2000052f 	.word	0x2000052f

08001468 <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	4619      	mov	r1, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fe5d 	bl	8001138 <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <progress>:

#if (Display ==1 )
static void progress(blt_int8u *data)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	if(data[1] == 0){
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d113      	bne.n	80014c2 <progress+0x3a>
		BSP_LCD_Clear(LCD_COLOR_BLACK);
 800149a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800149e:	f001 fa4b 	bl	8002938 <BSP_LCD_Clear>
		BSP_LCD_Clear(LCD_COLOR_BLACK);
 80014a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80014a6:	f001 fa47 	bl	8002938 <BSP_LCD_Clear>
	    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"programming device", CENTER_MODE);
 80014aa:	f001 f98d 	bl	80027c8 <BSP_LCD_GetYSize>
 80014ae:	4603      	mov	r3, r0
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3b1b      	subs	r3, #27
 80014b6:	b299      	uxth	r1, r3
 80014b8:	2301      	movs	r3, #1
 80014ba:	4a38      	ldr	r2, [pc, #224]	; (800159c <progress+0x114>)
 80014bc:	2000      	movs	r0, #0
 80014be:	f001 faa7 	bl	8002a10 <BSP_LCD_DisplayStringAt>
	}

	char snum[5];
	itoa(data[1], snum, 10);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3301      	adds	r3, #1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	220a      	movs	r2, #10
 80014d0:	4619      	mov	r1, r3
 80014d2:	f005 ff09 	bl	80072e8 <itoa>

	BSP_LCD_DisplayStringAt(0, 320, snum, CENTER_MODE);
 80014d6:	f107 0208 	add.w	r2, r7, #8
 80014da:	2301      	movs	r3, #1
 80014dc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80014e0:	2000      	movs	r0, #0
 80014e2:	f001 fa95 	bl	8002a10 <BSP_LCD_DisplayStringAt>
	//BSP_LCD_DisplayStringAt(0, 320, "%", CENTER_MODE);


	BSP_LCD_DrawHLine(200, 298, 4*data[1]);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3301      	adds	r3, #1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80014f8:	20c8      	movs	r0, #200	; 0xc8
 80014fa:	f001 fb4d 	bl	8002b98 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 299, 4*data[1]);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	b29b      	uxth	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	f240 112b 	movw	r1, #299	; 0x12b
 8001510:	20c8      	movs	r0, #200	; 0xc8
 8001512:	f001 fb41 	bl	8002b98 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 300, 4*data[1]);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3301      	adds	r3, #1
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	b29b      	uxth	r3, r3
 8001522:	461a      	mov	r2, r3
 8001524:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001528:	20c8      	movs	r0, #200	; 0xc8
 800152a:	f001 fb35 	bl	8002b98 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 301, 4*data[1]);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3301      	adds	r3, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	b29b      	uxth	r3, r3
 800153a:	461a      	mov	r2, r3
 800153c:	f240 112d 	movw	r1, #301	; 0x12d
 8001540:	20c8      	movs	r0, #200	; 0xc8
 8001542:	f001 fb29 	bl	8002b98 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 302, 4*data[1]);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3301      	adds	r3, #1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8001558:	20c8      	movs	r0, #200	; 0xc8
 800155a:	f001 fb1d 	bl	8002b98 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 303, 4*data[1]);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3301      	adds	r3, #1
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	b29b      	uxth	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	f240 112f 	movw	r1, #303	; 0x12f
 8001570:	20c8      	movs	r0, #200	; 0xc8
 8001572:	f001 fb11 	bl	8002b98 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawHLine(200, 304, 4*data[1]);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3301      	adds	r3, #1
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b29b      	uxth	r3, r3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	b29b      	uxth	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001588:	20c8      	movs	r0, #200	; 0xc8
 800158a:	f001 fb05 	bl	8002b98 <BSP_LCD_DrawHLine>
	xcpInfo.ctoData[0] = XCP_PID_RES;
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <progress+0x118>)
 8001590:	22ff      	movs	r2, #255	; 0xff
 8001592:	70da      	strb	r2, [r3, #3]
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08007438 	.word	0x08007438
 80015a0:	2000052c 	.word	0x2000052c

080015a4 <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 80015b4:	e009      	b.n	80015ca <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	4413      	add	r3, r2
 80015be:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 80015c6:	f7ff fe40 	bl	800124a <CopService>
  while (length-- > 0)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	60ba      	str	r2, [r7, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 80015d4:	7dfa      	ldrb	r2, [r7, #23]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 80015da:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <XcpProtectResources+0x14>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	2000052c 	.word	0x2000052c

080015fc <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <XcpSetCtoError+0x2c>)
 8001608:	22fe      	movs	r2, #254	; 0xfe
 800160a:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <XcpSetCtoError+0x2c>)
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	7113      	strb	r3, [r2, #4]
  xcpInfo.ctoLen = 2;
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <XcpSetCtoError+0x2c>)
 8001614:	2202      	movs	r2, #2
 8001616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2000052c 	.word	0x2000052c

0800162c <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 8001634:	f7ff ffd6 	bl	80015e4 <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <XcpCmdConnect+0x84>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <XcpCmdConnect+0x84>)
 8001640:	22ff      	movs	r2, #255	; 0xff
 8001642:	70da      	strb	r2, [r3, #3]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <XcpCmdConnect+0x84>)
 8001646:	2200      	movs	r2, #0
 8001648:	711a      	strb	r2, [r3, #4]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <XcpCmdConnect+0x84>)
 800164c:	791b      	ldrb	r3, [r3, #4]
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <XcpCmdConnect+0x84>)
 8001656:	711a      	strb	r2, [r3, #4]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <XcpCmdConnect+0x84>)
 800165a:	2200      	movs	r2, #0
 800165c:	715a      	strb	r2, [r3, #5]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <XcpCmdConnect+0x84>)
 8001660:	795a      	ldrb	r2, [r3, #5]
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <XcpCmdConnect+0x84>)
 8001664:	715a      	strb	r2, [r3, #5]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001666:	f7ff fd7f 	bl	8001168 <ComGetActiveInterfaceMaxRxLen>
 800166a:	4603      	mov	r3, r0
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <XcpCmdConnect+0x84>)
 8001670:	719a      	strb	r2, [r3, #6]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8001672:	f7ff fda3 	bl	80011bc <ComGetActiveInterfaceMaxTxLen>
 8001676:	4603      	mov	r3, r0
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <XcpCmdConnect+0x84>)
 800167c:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 800167e:	f7ff fd9d 	bl	80011bc <ComGetActiveInterfaceMaxTxLen>
 8001682:	4603      	mov	r3, r0
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b29b      	uxth	r3, r3
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <XcpCmdConnect+0x84>)
 800168c:	721a      	strb	r2, [r3, #8]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <XcpCmdConnect+0x84>)
 8001690:	2201      	movs	r2, #1
 8001692:	725a      	strb	r2, [r3, #9]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <XcpCmdConnect+0x84>)
 8001696:	2201      	movs	r2, #1
 8001698:	729a      	strb	r2, [r3, #10]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <XcpCmdConnect+0x84>)
 800169c:	2208      	movs	r2, #8
 800169e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 80016a2:	f7ff fa83 	bl	8000bac <NvmInit>
} /*** end of XcpCmdConnect ***/
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000052c 	.word	0x2000052c

080016b4 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <XcpCmdDisconnect+0x28>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]

  /* enable resource protection */
  XcpProtectResources();
 80016c2:	f7ff ff8f 	bl	80015e4 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <XcpCmdDisconnect+0x28>)
 80016c8:	22ff      	movs	r2, #255	; 0xff
 80016ca:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <XcpCmdDisconnect+0x28>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000052c 	.word	0x2000052c

080016e0 <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <XcpCmdGetStatus+0x44>)
 80016ea:	22ff      	movs	r2, #255	; 0xff
 80016ec:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <XcpCmdGetStatus+0x44>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <XcpCmdGetStatus+0x44>)
 80016f6:	785a      	ldrb	r2, [r3, #1]
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <XcpCmdGetStatus+0x44>)
 80016fa:	715a      	strb	r2, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <XcpCmdGetStatus+0x44>)
 80016fe:	2200      	movs	r2, #0
 8001700:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <XcpCmdGetStatus+0x44>)
 8001704:	2200      	movs	r2, #0
 8001706:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <XcpCmdGetStatus+0x44>)
 800170a:	2200      	movs	r2, #0
 800170c:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <XcpCmdGetStatus+0x44>)
 8001710:	2206      	movs	r2, #6
 8001712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	2000052c 	.word	0x2000052c

08001728 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff ff63 	bl	80015fc <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <XcpCmdGetId+0x40>)
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <XcpCmdGetId+0x44>)
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <XcpCmdGetId+0x40>)
 8001752:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <XcpCmdGetId+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <XcpCmdGetId+0x40>)
 800175c:	2200      	movs	r2, #0
 800175e:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <XcpCmdGetId+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <XcpCmdGetId+0x48>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <XcpCmdGetId+0x40>)
 800176e:	2208      	movs	r2, #8
 8001770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	2000052c 	.word	0x2000052c
 8001784:	08007544 	.word	0x08007544
 8001788:	20000533 	.word	0x20000533

0800178c <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <XcpCmdSetMta+0x2c>)
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <XcpCmdSetMta+0x2c>)
 80017a0:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <XcpCmdSetMta+0x2c>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000052c 	.word	0x2000052c

080017bc <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3301      	adds	r3, #1
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461c      	mov	r4, r3
 80017cc:	f7ff fccc 	bl	8001168 <ComGetActiveInterfaceMaxRxLen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	3b01      	subs	r3, #1
 80017d4:	429c      	cmp	r4, r3
 80017d6:	dd03      	ble.n	80017e0 <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80017d8:	2022      	movs	r0, #34	; 0x22
 80017da:	f7ff ff0f 	bl	80015fc <XcpSetCtoError>
    return;
 80017de:	e021      	b.n	8001824 <XcpCmdUpload+0x68>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <XcpCmdUpload+0x70>)
 80017ea:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80017ec:	68b8      	ldr	r0, [r7, #8]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <XcpCmdUpload+0x74>)
 80017f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f2:	89fa      	ldrh	r2, [r7, #14]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7fe fecd 	bl	8000594 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <XcpCmdUpload+0x74>)
 80017fc:	22ff      	movs	r2, #255	; 0xff
 80017fe:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <XcpCmdUpload+0x74>)
 8001802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	3201      	adds	r2, #1
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <XcpCmdUpload+0x74>)
 800180e:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3301      	adds	r3, #1
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	3301      	adds	r3, #1
 800181a:	b29b      	uxth	r3, r3
 800181c:	b21a      	sxth	r2, r3
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <XcpCmdUpload+0x74>)
 8001820:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	bf00      	nop
 800182c:	20000530 	.word	0x20000530
 8001830:	2000052c 	.word	0x2000052c

08001834 <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461c      	mov	r4, r3
 8001844:	f7ff fc90 	bl	8001168 <ComGetActiveInterfaceMaxRxLen>
 8001848:	4603      	mov	r3, r0
 800184a:	3b01      	subs	r3, #1
 800184c:	429c      	cmp	r4, r3
 800184e:	dd03      	ble.n	8001858 <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8001850:	2022      	movs	r0, #34	; 0x22
 8001852:	f7ff fed3 	bl	80015fc <XcpSetCtoError>
    return;
 8001856:	e025      	b.n	80018a4 <XcpCmdShortUpload+0x70>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <XcpCmdShortUpload+0x78>)
 800185e:	6493      	str	r3, [r2, #72]	; 0x48
  /* read out the length of the requested upload operation */
  len = data[1];
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <XcpCmdShortUpload+0x7c>)
 800186a:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <XcpCmdShortUpload+0x78>)
 8001870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001872:	89fa      	ldrh	r2, [r7, #14]
 8001874:	4619      	mov	r1, r3
 8001876:	f7fe fe8d 	bl	8000594 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <XcpCmdShortUpload+0x78>)
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <XcpCmdShortUpload+0x78>)
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	3201      	adds	r2, #1
 8001888:	7812      	ldrb	r2, [r2, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <XcpCmdShortUpload+0x78>)
 800188e:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3301      	adds	r3, #1
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	3301      	adds	r3, #1
 800189a:	b29b      	uxth	r3, r3
 800189c:	b21a      	sxth	r2, r3
 800189e:	4b03      	ldr	r3, [pc, #12]	; (80018ac <XcpCmdShortUpload+0x78>)
 80018a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000052c 	.word	0x2000052c
 80018b0:	20000530 	.word	0x20000530

080018b4 <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <XcpCmdBuildCheckSum+0x44>)
 80018be:	22ff      	movs	r2, #255	; 0xff
 80018c0:	70da      	strb	r2, [r3, #3]

  /* obtain checksum and checksum type */
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <XcpCmdBuildCheckSum+0x44>)
 80018c4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3304      	adds	r3, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <XcpCmdBuildCheckSum+0x48>)
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff fe68 	bl	80015a4 <XcpComputeChecksum>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <XcpCmdBuildCheckSum+0x44>)
 80018da:	711a      	strb	r2, [r3, #4]
                                          (blt_int32u *)&xcpInfo.ctoData[4]);

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <XcpCmdBuildCheckSum+0x44>)
 80018de:	2200      	movs	r2, #0
 80018e0:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <XcpCmdBuildCheckSum+0x44>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <XcpCmdBuildCheckSum+0x44>)
 80018ea:	2208      	movs	r2, #8
 80018ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000052c 	.word	0x2000052c
 80018fc:	20000533 	.word	0x20000533

08001900 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <XcpCmdProgramStart+0x48>)
 800190a:	22ff      	movs	r2, #255	; 0xff
 800190c:	70da      	strb	r2, [r3, #3]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <XcpCmdProgramStart+0x48>)
 8001910:	2200      	movs	r2, #0
 8001912:	711a      	strb	r2, [r3, #4]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <XcpCmdProgramStart+0x48>)
 8001916:	2200      	movs	r2, #0
 8001918:	715a      	strb	r2, [r3, #5]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 800191a:	f7ff fc25 	bl	8001168 <ComGetActiveInterfaceMaxRxLen>
 800191e:	4603      	mov	r3, r0
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <XcpCmdProgramStart+0x48>)
 8001924:	719a      	strb	r2, [r3, #6]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <XcpCmdProgramStart+0x48>)
 8001928:	2200      	movs	r2, #0
 800192a:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <XcpCmdProgramStart+0x48>)
 800192e:	2200      	movs	r2, #0
 8001930:	721a      	strb	r2, [r3, #8]
  xcpInfo.ctoData[6] = 0;
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <XcpCmdProgramStart+0x48>)
 8001934:	2200      	movs	r2, #0
 8001936:	725a      	strb	r2, [r3, #9]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <XcpCmdProgramStart+0x48>)
 800193a:	2207      	movs	r2, #7
 800193c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000052c 	.word	0x2000052c

0800194c <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <XcpCmdProgramMax+0x58>)
 8001956:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001958:	f7ff fc06 	bl	8001168 <ComGetActiveInterfaceMaxRxLen>
 800195c:	4603      	mov	r3, r0
 800195e:	3b01      	subs	r3, #1
 8001960:	4619      	mov	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3301      	adds	r3, #1
 8001966:	461a      	mov	r2, r3
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff f925 	bl	8000bb8 <NvmWrite>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <XcpCmdProgramMax+0x30>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001974:	2031      	movs	r0, #49	; 0x31
 8001976:	f7ff fe41 	bl	80015fc <XcpSetCtoError>
    return;
 800197a:	e00f      	b.n	800199c <XcpCmdProgramMax+0x50>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <XcpCmdProgramMax+0x58>)
 800197e:	22ff      	movs	r2, #255	; 0xff
 8001980:	70da      	strb	r2, [r3, #3]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8001982:	f7ff fbf1 	bl	8001168 <ComGetActiveInterfaceMaxRxLen>
 8001986:	4603      	mov	r3, r0
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <XcpCmdProgramMax+0x58>)
 800198c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <XcpCmdProgramMax+0x58>)
 8001992:	6493      	str	r3, [r2, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <XcpCmdProgramMax+0x58>)
 8001996:	2201      	movs	r2, #1
 8001998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000052c 	.word	0x2000052c

080019a8 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461c      	mov	r4, r3
 80019b8:	f7ff fbd6 	bl	8001168 <ComGetActiveInterfaceMaxRxLen>
 80019bc:	4603      	mov	r3, r0
 80019be:	3b02      	subs	r3, #2
 80019c0:	429c      	cmp	r4, r3
 80019c2:	dd03      	ble.n	80019cc <XcpCmdProgram+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80019c4:	2022      	movs	r0, #34	; 0x22
 80019c6:	f7ff fe19 	bl	80015fc <XcpSetCtoError>
    return;
 80019ca:	e030      	b.n	8001a2e <XcpCmdProgram+0x86>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <XcpCmdProgram+0x8c>)
 80019ce:	22ff      	movs	r2, #255	; 0xff
 80019d0:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <XcpCmdProgram+0x8c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d108      	bne.n	80019f6 <XcpCmdProgram+0x4e>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 80019e4:	f7ff f914 	bl	8000c10 <NvmDone>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d11e      	bne.n	8001a2c <XcpCmdProgram+0x84>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 80019ee:	2031      	movs	r0, #49	; 0x31
 80019f0:	f7ff fe04 	bl	80015fc <XcpSetCtoError>
    }
    return;
 80019f4:	e01a      	b.n	8001a2c <XcpCmdProgram+0x84>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <XcpCmdProgram+0x8c>)
 80019f8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3301      	adds	r3, #1
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3302      	adds	r3, #2
 8001a06:	461a      	mov	r2, r3
 8001a08:	f7ff f8d6 	bl	8000bb8 <NvmWrite>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001a12:	2031      	movs	r0, #49	; 0x31
 8001a14:	f7ff fdf2 	bl	80015fc <XcpSetCtoError>
    return;
 8001a18:	e009      	b.n	8001a2e <XcpCmdProgram+0x86>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <XcpCmdProgram+0x8c>)
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	3201      	adds	r2, #1
 8001a22:	7812      	ldrb	r2, [r2, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <XcpCmdProgram+0x8c>)
 8001a28:	6493      	str	r3, [r2, #72]	; 0x48
 8001a2a:	e000      	b.n	8001a2e <XcpCmdProgram+0x86>
    return;
 8001a2c:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	2000052c 	.word	0x2000052c

08001a38 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <XcpCmdProgramClear+0x3c>)
 8001a42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3304      	adds	r3, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f7ff f8c3 	bl	8000bd8 <NvmErase>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <XcpCmdProgramClear+0x28>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8001a58:	2031      	movs	r0, #49	; 0x31
 8001a5a:	f7ff fdcf 	bl	80015fc <XcpSetCtoError>
    return;
 8001a5e:	e006      	b.n	8001a6e <XcpCmdProgramClear+0x36>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <XcpCmdProgramClear+0x3c>)
 8001a62:	22ff      	movs	r2, #255	; 0xff
 8001a64:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001a66:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <XcpCmdProgramClear+0x3c>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000052c 	.word	0x2000052c

08001a78 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 8001a80:	f7fe fd4e 	bl	8000520 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <XcpCmdProgramReset+0x24>)
 8001a86:	22ff      	movs	r2, #255	; 0xff
 8001a88:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <XcpCmdProgramReset+0x24>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000052c 	.word	0x2000052c

08001aa0 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8001aa8:	2031      	movs	r0, #49	; 0x31
 8001aaa:	f7ff fda7 	bl	80015fc <XcpSetCtoError>
  return;
 8001aae:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8001aba:	2064      	movs	r0, #100	; 0x64
 8001abc:	f000 f808 	bl	8001ad0 <LedBlinkInit>
} /*** end of CopInitHook ***/
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8001ac8:	f000 f812 	bl	8001af0 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <LedBlinkInit>:
** \param     interval_ms Specifies the desired LED blink interval time in milliseconds.
** \return    none.
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <LedBlinkInit+0x1c>)
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	8013      	strh	r3, [r2, #0]
} /*** end of LedBlinkInit ***/
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	20000578 	.word	0x20000578

08001af0 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 8001af4:	f7ff fa18 	bl	8000f28 <TimerGet>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <LedBlinkTask+0x50>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d31c      	bcc.n	8001b3c <LedBlinkTask+0x4c>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <LedBlinkTask+0x54>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d108      	bne.n	8001b1c <LedBlinkTask+0x2c>
    {
      ledOn = BLT_TRUE;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <LedBlinkTask+0x54>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2108      	movs	r1, #8
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <LedBlinkTask+0x58>)
 8001b16:	f003 fc8d 	bl	8005434 <HAL_GPIO_WritePin>
 8001b1a:	e007      	b.n	8001b2c <LedBlinkTask+0x3c>
    }
    else
    {
      ledOn = BLT_FALSE;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <LedBlinkTask+0x54>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2108      	movs	r1, #8
 8001b26:	4808      	ldr	r0, [pc, #32]	; (8001b48 <LedBlinkTask+0x58>)
 8001b28:	f003 fc84 	bl	8005434 <HAL_GPIO_WritePin>
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 8001b2c:	f7ff f9fc 	bl	8000f28 <TimerGet>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <LedBlinkTask+0x5c>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a01      	ldr	r2, [pc, #4]	; (8001b40 <LedBlinkTask+0x50>)
 8001b3a:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000057c 	.word	0x2000057c
 8001b44:	20000580 	.word	0x20000580
 8001b48:	40022800 	.word	0x40022800
 8001b4c:	20000578 	.word	0x20000578

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0


  blt_int8u deferredInitRequestFlag = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	71fb      	strb	r3, [r7, #7]

  /* initialize the microcontroller */
  Init();
 8001b5a:	f000 f83d 	bl	8001bd8 <Init>
  /* initialize the shared parameters module */
#if(Display==1)
  BSP_SDRAM_Init();
 8001b5e:	f001 fa09 	bl	8002f74 <BSP_SDRAM_Init>
  BSP_LCD_Init() ;
 8001b62:	f000 fc9c 	bl	800249e <BSP_LCD_Init>
  BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 fca2 	bl	80024b0 <BSP_LCD_InitEx>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER_BACKGROUND, LCD_FB_START_ADDRESS);
 8001b6c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 fe35 	bl	80027e0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001b76:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b7a:	f000 fedd 	bl	8002938 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b82:	f000 fe8d 	bl	80028a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001b86:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b8a:	f000 fea1 	bl	80028d0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8001b8e:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <main+0x80>)
 8001b90:	f000 feb8 	bl	8002904 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"StartUp", CENTER_MODE);
 8001b94:	f000 fe18 	bl	80027c8 <BSP_LCD_GetYSize>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b1b      	subs	r3, #27
 8001ba0:	b299      	uxth	r1, r3
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <main+0x84>)
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 ff32 	bl	8002a10 <BSP_LCD_DisplayStringAt>
#endif
  SharedParamsInit();
 8001bac:	f000 fba0 	bl	80022f0 <SharedParamsInit>
  /* initialize the bootloader */
  BootInit();
 8001bb0:	f7ff fa74 	bl	800109c <BootInit>
   * the bootloader to initialize the TCP/IP network stack. this makes it possible for
   * a firmware update to proceed. the code here reads out this flag and performs the
   * TCP/IP network stack initialization when requested.
   */
  //ComDeferredInit();
  SharedParamsReadByIndex(0, &deferredInitRequestFlag);
 8001bb4:	1dfb      	adds	r3, r7, #7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f000 fbc1 	bl	8002340 <SharedParamsReadByIndex>
  if (deferredInitRequestFlag == 1)
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <main+0x78>
  {
    /* explicitly initialize all communication interface for which the deferred
     * initialization feature was enabled.
     */
    ComDeferredInit();
 8001bc4:	f7ff fb35 	bl	8001232 <ComDeferredInit>

  /* start the infinite program loop */
  while (1)
  {
    /* run the bootloader task */
    BootTask();
 8001bc8:	f7ff fa78 	bl	80010bc <BootTask>
 8001bcc:	e7fc      	b.n	8001bc8 <main+0x78>
 8001bce:	bf00      	nop
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	0800744c 	.word	0x0800744c

08001bd8 <Init>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* HAL library initialization */
  HAL_Init();
 8001bdc:	f001 fc1e 	bl	800341c <HAL_Init>
  /* configure system clock */
  SystemClock_Config();
 8001be0:	f000 f802 	bl	8001be8 <SystemClock_Config>
} /*** end of Init ***/
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b096      	sub	sp, #88	; 0x58
 8001bec:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <SystemClock_Config+0xd8>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a30      	ldr	r2, [pc, #192]	; (8001cc0 <SystemClock_Config+0xd8>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <SystemClock_Config+0xd8>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <SystemClock_Config+0xdc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <SystemClock_Config+0xdc>)
 8001c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <SystemClock_Config+0xdc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c34:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c36:	2302      	movs	r3, #2
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c40:	2308      	movs	r3, #8
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* USE_STM32469I_DISCO_REVA */
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001c44:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c4e:	2307      	movs	r3, #7
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001c52:	2306      	movs	r3, #6
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 fb50 	bl	8006300 <HAL_RCC_OscConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001c66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d000      	beq.n	8001c70 <SystemClock_Config+0x88>
  {
    while(1) { ; }
 8001c6e:	e7fe      	b.n	8001c6e <SystemClock_Config+0x86>
  }

  /* Activate the OverDrive to reach the 180 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 8001c70:	f003 fefa 	bl	8005a68 <HAL_PWREx_EnableOverDrive>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d000      	beq.n	8001c84 <SystemClock_Config+0x9c>
  {
    while(1) { ; }
 8001c82:	e7fe      	b.n	8001c82 <SystemClock_Config+0x9a>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001c84:	230f      	movs	r3, #15
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9a:	653b      	str	r3, [r7, #80]	; 0x50

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001c9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 ff30 	bl	8005b08 <HAL_RCC_ClockConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if(ret != HAL_OK)
 8001cae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d000      	beq.n	8001cb8 <SystemClock_Config+0xd0>
  {
    while(1) { ; }
 8001cb6:	e7fe      	b.n	8001cb6 <SystemClock_Config+0xce>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3758      	adds	r7, #88	; 0x58
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <HAL_MspInit>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void HAL_MspInit(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	; 0x38
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Power and SYSCFG clock enable. */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
 8001cd2:	4b58      	ldr	r3, [pc, #352]	; (8001e34 <HAL_MspInit+0x16c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a57      	ldr	r2, [pc, #348]	; (8001e34 <HAL_MspInit+0x16c>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b55      	ldr	r3, [pc, #340]	; (8001e34 <HAL_MspInit+0x16c>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	623b      	str	r3, [r7, #32]
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	4b51      	ldr	r3, [pc, #324]	; (8001e34 <HAL_MspInit+0x16c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a50      	ldr	r2, [pc, #320]	; (8001e34 <HAL_MspInit+0x16c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <HAL_MspInit+0x16c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
  /* GPIO ports clock enable. */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a49      	ldr	r2, [pc, #292]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a34      	ldr	r2, [pc, #208]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_MspInit+0x16c>)
 8001d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_MspInit+0x16c>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]

#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART clock enable. */
  //__HAL_RCC_USART3_CLK_ENABLE();
  __HAL_RCC_USART6_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_MspInit+0x16c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <HAL_MspInit+0x16c>)
 8001db8:	f043 0320 	orr.w	r3, r3, #32
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_MspInit+0x16c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
#endif

  /* Configure GPIO pin for the LED. */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dca:	2308      	movs	r3, #8
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dde:	4619      	mov	r1, r3
 8001de0:	4815      	ldr	r0, [pc, #84]	; (8001e38 <HAL_MspInit+0x170>)
 8001de2:	f003 f97d 	bl	80050e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2108      	movs	r1, #8
 8001dea:	4813      	ldr	r0, [pc, #76]	; (8001e38 <HAL_MspInit+0x170>)
 8001dec:	f003 fb22 	bl	8005434 <HAL_GPIO_WritePin>

  /* Configure GPIO pin for (optional) backdoor entry input. */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	4619      	mov	r1, r3
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <HAL_MspInit+0x174>)
 8001e06:	f003 f96b 	bl	80050e0 <HAL_GPIO_Init>
#if (BOOT_COM_RS232_ENABLE > 0)
  /* UART TX and RX GPIO pin configuration. */
  //GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
  GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_9;
 8001e0a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  //GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	4806      	ldr	r0, [pc, #24]	; (8001e40 <HAL_MspInit+0x178>)
 8001e28:	f003 f95a 	bl	80050e0 <HAL_GPIO_Init>
#endif
} /*** end of HAL_MspInit ***/
 8001e2c:	bf00      	nop
 8001e2e:	3738      	adds	r7, #56	; 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40022800 	.word	0x40022800
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40021800 	.word	0x40021800

08001e44 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001e4e:	49be      	ldr	r1, [pc, #760]	; (8002148 <OTM8009A_Init+0x304>)
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 fedf 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001e56:	49bd      	ldr	r1, [pc, #756]	; (800214c <OTM8009A_Init+0x308>)
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 fedb 	bl	8002c14 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001e5e:	49bc      	ldr	r1, [pc, #752]	; (8002150 <OTM8009A_Init+0x30c>)
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 fed7 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001e66:	49bb      	ldr	r1, [pc, #748]	; (8002154 <OTM8009A_Init+0x310>)
 8001e68:	2002      	movs	r0, #2
 8001e6a:	f000 fed3 	bl	8002c14 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001e6e:	49b8      	ldr	r1, [pc, #736]	; (8002150 <OTM8009A_Init+0x30c>)
 8001e70:	2000      	movs	r0, #0
 8001e72:	f000 fecf 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001e76:	49b8      	ldr	r1, [pc, #736]	; (8002158 <OTM8009A_Init+0x314>)
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f000 fecb 	bl	8002c14 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001e7e:	200a      	movs	r0, #10
 8001e80:	f000 fb02 	bl	8002488 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001e84:	49b5      	ldr	r1, [pc, #724]	; (800215c <OTM8009A_Init+0x318>)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f000 fec4 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001e8c:	49b4      	ldr	r1, [pc, #720]	; (8002160 <OTM8009A_Init+0x31c>)
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 fec0 	bl	8002c14 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001e94:	200a      	movs	r0, #10
 8001e96:	f000 faf7 	bl	8002488 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001e9a:	49b2      	ldr	r1, [pc, #712]	; (8002164 <OTM8009A_Init+0x320>)
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 feb9 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001ea2:	49b1      	ldr	r1, [pc, #708]	; (8002168 <OTM8009A_Init+0x324>)
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f000 feb5 	bl	8002c14 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8001eaa:	49b0      	ldr	r1, [pc, #704]	; (800216c <OTM8009A_Init+0x328>)
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 feb1 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001eb2:	49af      	ldr	r1, [pc, #700]	; (8002170 <OTM8009A_Init+0x32c>)
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f000 fead 	bl	8002c14 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8001eba:	49ae      	ldr	r1, [pc, #696]	; (8002174 <OTM8009A_Init+0x330>)
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f000 fea9 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001ec2:	49ad      	ldr	r1, [pc, #692]	; (8002178 <OTM8009A_Init+0x334>)
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 fea5 	bl	8002c14 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001eca:	499f      	ldr	r1, [pc, #636]	; (8002148 <OTM8009A_Init+0x304>)
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 fea1 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001ed2:	49aa      	ldr	r1, [pc, #680]	; (800217c <OTM8009A_Init+0x338>)
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 fe9d 	bl	8002c14 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001eda:	49a9      	ldr	r1, [pc, #676]	; (8002180 <OTM8009A_Init+0x33c>)
 8001edc:	2000      	movs	r0, #0
 8001ede:	f000 fe99 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001ee2:	49a8      	ldr	r1, [pc, #672]	; (8002184 <OTM8009A_Init+0x340>)
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f000 fe95 	bl	8002c14 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001eea:	49a7      	ldr	r1, [pc, #668]	; (8002188 <OTM8009A_Init+0x344>)
 8001eec:	2000      	movs	r0, #0
 8001eee:	f000 fe91 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001ef2:	49a6      	ldr	r1, [pc, #664]	; (800218c <OTM8009A_Init+0x348>)
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f000 fe8d 	bl	8002c14 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8001efa:	49a5      	ldr	r1, [pc, #660]	; (8002190 <OTM8009A_Init+0x34c>)
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 fe89 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001f02:	49a4      	ldr	r1, [pc, #656]	; (8002194 <OTM8009A_Init+0x350>)
 8001f04:	2000      	movs	r0, #0
 8001f06:	f000 fe85 	bl	8002c14 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001f0a:	49a3      	ldr	r1, [pc, #652]	; (8002198 <OTM8009A_Init+0x354>)
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f000 fe81 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001f12:	4997      	ldr	r1, [pc, #604]	; (8002170 <OTM8009A_Init+0x32c>)
 8001f14:	2000      	movs	r0, #0
 8001f16:	f000 fe7d 	bl	8002c14 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001f1a:	498b      	ldr	r1, [pc, #556]	; (8002148 <OTM8009A_Init+0x304>)
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f000 fe79 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001f22:	499e      	ldr	r1, [pc, #632]	; (800219c <OTM8009A_Init+0x358>)
 8001f24:	2002      	movs	r0, #2
 8001f26:	f000 fe75 	bl	8002c14 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001f2a:	499d      	ldr	r1, [pc, #628]	; (80021a0 <OTM8009A_Init+0x35c>)
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 fe71 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001f32:	499c      	ldr	r1, [pc, #624]	; (80021a4 <OTM8009A_Init+0x360>)
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 fe6d 	bl	8002c14 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001f3a:	499b      	ldr	r1, [pc, #620]	; (80021a8 <OTM8009A_Init+0x364>)
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 fe69 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001f42:	499a      	ldr	r1, [pc, #616]	; (80021ac <OTM8009A_Init+0x368>)
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 fe65 	bl	8002c14 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001f4a:	4999      	ldr	r1, [pc, #612]	; (80021b0 <OTM8009A_Init+0x36c>)
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f000 fe61 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001f52:	4998      	ldr	r1, [pc, #608]	; (80021b4 <OTM8009A_Init+0x370>)
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 fe5d 	bl	8002c14 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001f5a:	4989      	ldr	r1, [pc, #548]	; (8002180 <OTM8009A_Init+0x33c>)
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 fe59 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001f62:	4995      	ldr	r1, [pc, #596]	; (80021b8 <OTM8009A_Init+0x374>)
 8001f64:	2000      	movs	r0, #0
 8001f66:	f000 fe55 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001f6a:	4987      	ldr	r1, [pc, #540]	; (8002188 <OTM8009A_Init+0x344>)
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f000 fe51 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001f72:	4992      	ldr	r1, [pc, #584]	; (80021bc <OTM8009A_Init+0x378>)
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 fe4d 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001f7a:	4991      	ldr	r1, [pc, #580]	; (80021c0 <OTM8009A_Init+0x37c>)
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f000 fe49 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001f82:	4990      	ldr	r1, [pc, #576]	; (80021c4 <OTM8009A_Init+0x380>)
 8001f84:	2002      	movs	r0, #2
 8001f86:	f000 fe45 	bl	8002c14 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001f8a:	4971      	ldr	r1, [pc, #452]	; (8002150 <OTM8009A_Init+0x30c>)
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f000 fe41 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001f92:	498d      	ldr	r1, [pc, #564]	; (80021c8 <OTM8009A_Init+0x384>)
 8001f94:	2006      	movs	r0, #6
 8001f96:	f000 fe3d 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001f9a:	498c      	ldr	r1, [pc, #560]	; (80021cc <OTM8009A_Init+0x388>)
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 fe39 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001fa2:	498b      	ldr	r1, [pc, #556]	; (80021d0 <OTM8009A_Init+0x38c>)
 8001fa4:	200e      	movs	r0, #14
 8001fa6:	f000 fe35 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001faa:	498a      	ldr	r1, [pc, #552]	; (80021d4 <OTM8009A_Init+0x390>)
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 fe31 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001fb2:	4989      	ldr	r1, [pc, #548]	; (80021d8 <OTM8009A_Init+0x394>)
 8001fb4:	200e      	movs	r0, #14
 8001fb6:	f000 fe2d 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001fba:	4988      	ldr	r1, [pc, #544]	; (80021dc <OTM8009A_Init+0x398>)
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f000 fe29 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001fc2:	4987      	ldr	r1, [pc, #540]	; (80021e0 <OTM8009A_Init+0x39c>)
 8001fc4:	200a      	movs	r0, #10
 8001fc6:	f000 fe25 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001fca:	4986      	ldr	r1, [pc, #536]	; (80021e4 <OTM8009A_Init+0x3a0>)
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f000 fe21 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001fd2:	4985      	ldr	r1, [pc, #532]	; (80021e8 <OTM8009A_Init+0x3a4>)
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f000 fe1d 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001fda:	495d      	ldr	r1, [pc, #372]	; (8002150 <OTM8009A_Init+0x30c>)
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f000 fe19 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001fe2:	4982      	ldr	r1, [pc, #520]	; (80021ec <OTM8009A_Init+0x3a8>)
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f000 fe15 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001fea:	4981      	ldr	r1, [pc, #516]	; (80021f0 <OTM8009A_Init+0x3ac>)
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 fe11 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001ff2:	4980      	ldr	r1, [pc, #512]	; (80021f4 <OTM8009A_Init+0x3b0>)
 8001ff4:	200f      	movs	r0, #15
 8001ff6:	f000 fe0d 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001ffa:	4974      	ldr	r1, [pc, #464]	; (80021cc <OTM8009A_Init+0x388>)
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f000 fe09 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8002002:	497d      	ldr	r1, [pc, #500]	; (80021f8 <OTM8009A_Init+0x3b4>)
 8002004:	200f      	movs	r0, #15
 8002006:	f000 fe05 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800200a:	4972      	ldr	r1, [pc, #456]	; (80021d4 <OTM8009A_Init+0x390>)
 800200c:	2000      	movs	r0, #0
 800200e:	f000 fe01 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8002012:	497a      	ldr	r1, [pc, #488]	; (80021fc <OTM8009A_Init+0x3b8>)
 8002014:	200a      	movs	r0, #10
 8002016:	f000 fdfd 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800201a:	4970      	ldr	r1, [pc, #448]	; (80021dc <OTM8009A_Init+0x398>)
 800201c:	2000      	movs	r0, #0
 800201e:	f000 fdf9 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8002022:	4977      	ldr	r1, [pc, #476]	; (8002200 <OTM8009A_Init+0x3bc>)
 8002024:	200f      	movs	r0, #15
 8002026:	f000 fdf5 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800202a:	496e      	ldr	r1, [pc, #440]	; (80021e4 <OTM8009A_Init+0x3a0>)
 800202c:	2000      	movs	r0, #0
 800202e:	f000 fdf1 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8002032:	4974      	ldr	r1, [pc, #464]	; (8002204 <OTM8009A_Init+0x3c0>)
 8002034:	200f      	movs	r0, #15
 8002036:	f000 fded 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800203a:	4973      	ldr	r1, [pc, #460]	; (8002208 <OTM8009A_Init+0x3c4>)
 800203c:	2000      	movs	r0, #0
 800203e:	f000 fde9 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8002042:	4972      	ldr	r1, [pc, #456]	; (800220c <OTM8009A_Init+0x3c8>)
 8002044:	200a      	movs	r0, #10
 8002046:	f000 fde5 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800204a:	4971      	ldr	r1, [pc, #452]	; (8002210 <OTM8009A_Init+0x3cc>)
 800204c:	2000      	movs	r0, #0
 800204e:	f000 fde1 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8002052:	4970      	ldr	r1, [pc, #448]	; (8002214 <OTM8009A_Init+0x3d0>)
 8002054:	200a      	movs	r0, #10
 8002056:	f000 fddd 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800205a:	493d      	ldr	r1, [pc, #244]	; (8002150 <OTM8009A_Init+0x30c>)
 800205c:	2000      	movs	r0, #0
 800205e:	f000 fdd9 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8002062:	496d      	ldr	r1, [pc, #436]	; (8002218 <OTM8009A_Init+0x3d4>)
 8002064:	200a      	movs	r0, #10
 8002066:	f000 fdd5 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800206a:	4961      	ldr	r1, [pc, #388]	; (80021f0 <OTM8009A_Init+0x3ac>)
 800206c:	2000      	movs	r0, #0
 800206e:	f000 fdd1 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8002072:	496a      	ldr	r1, [pc, #424]	; (800221c <OTM8009A_Init+0x3d8>)
 8002074:	200f      	movs	r0, #15
 8002076:	f000 fdcd 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800207a:	4954      	ldr	r1, [pc, #336]	; (80021cc <OTM8009A_Init+0x388>)
 800207c:	2000      	movs	r0, #0
 800207e:	f000 fdc9 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8002082:	4967      	ldr	r1, [pc, #412]	; (8002220 <OTM8009A_Init+0x3dc>)
 8002084:	200f      	movs	r0, #15
 8002086:	f000 fdc5 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800208a:	4952      	ldr	r1, [pc, #328]	; (80021d4 <OTM8009A_Init+0x390>)
 800208c:	2000      	movs	r0, #0
 800208e:	f000 fdc1 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8002092:	4964      	ldr	r1, [pc, #400]	; (8002224 <OTM8009A_Init+0x3e0>)
 8002094:	200a      	movs	r0, #10
 8002096:	f000 fdbd 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800209a:	4950      	ldr	r1, [pc, #320]	; (80021dc <OTM8009A_Init+0x398>)
 800209c:	2000      	movs	r0, #0
 800209e:	f000 fdb9 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80020a2:	4961      	ldr	r1, [pc, #388]	; (8002228 <OTM8009A_Init+0x3e4>)
 80020a4:	200f      	movs	r0, #15
 80020a6:	f000 fdb5 	bl	8002c14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80020aa:	494e      	ldr	r1, [pc, #312]	; (80021e4 <OTM8009A_Init+0x3a0>)
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 fdb1 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80020b2:	495e      	ldr	r1, [pc, #376]	; (800222c <OTM8009A_Init+0x3e8>)
 80020b4:	200f      	movs	r0, #15
 80020b6:	f000 fdad 	bl	8002c14 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80020ba:	4931      	ldr	r1, [pc, #196]	; (8002180 <OTM8009A_Init+0x33c>)
 80020bc:	2000      	movs	r0, #0
 80020be:	f000 fda9 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80020c2:	495b      	ldr	r1, [pc, #364]	; (8002230 <OTM8009A_Init+0x3ec>)
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 fda5 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80020ca:	495a      	ldr	r1, [pc, #360]	; (8002234 <OTM8009A_Init+0x3f0>)
 80020cc:	2000      	movs	r0, #0
 80020ce:	f000 fda1 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80020d2:	4959      	ldr	r1, [pc, #356]	; (8002238 <OTM8009A_Init+0x3f4>)
 80020d4:	2000      	movs	r0, #0
 80020d6:	f000 fd9d 	bl	8002c14 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80020da:	4958      	ldr	r1, [pc, #352]	; (800223c <OTM8009A_Init+0x3f8>)
 80020dc:	2000      	movs	r0, #0
 80020de:	f000 fd99 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80020e2:	4957      	ldr	r1, [pc, #348]	; (8002240 <OTM8009A_Init+0x3fc>)
 80020e4:	2000      	movs	r0, #0
 80020e6:	f000 fd95 	bl	8002c14 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80020ea:	4917      	ldr	r1, [pc, #92]	; (8002148 <OTM8009A_Init+0x304>)
 80020ec:	2000      	movs	r0, #0
 80020ee:	f000 fd91 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80020f2:	4954      	ldr	r1, [pc, #336]	; (8002244 <OTM8009A_Init+0x400>)
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 fd8d 	bl	8002c14 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80020fa:	4913      	ldr	r1, [pc, #76]	; (8002148 <OTM8009A_Init+0x304>)
 80020fc:	2000      	movs	r0, #0
 80020fe:	f000 fd89 	bl	8002c14 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002102:	4911      	ldr	r1, [pc, #68]	; (8002148 <OTM8009A_Init+0x304>)
 8002104:	2000      	movs	r0, #0
 8002106:	f000 fd85 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800210a:	494f      	ldr	r1, [pc, #316]	; (8002248 <OTM8009A_Init+0x404>)
 800210c:	2010      	movs	r0, #16
 800210e:	f000 fd81 	bl	8002c14 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002112:	490d      	ldr	r1, [pc, #52]	; (8002148 <OTM8009A_Init+0x304>)
 8002114:	2000      	movs	r0, #0
 8002116:	f000 fd7d 	bl	8002c14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 800211a:	494c      	ldr	r1, [pc, #304]	; (800224c <OTM8009A_Init+0x408>)
 800211c:	2010      	movs	r0, #16
 800211e:	f000 fd79 	bl	8002c14 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8002122:	494b      	ldr	r1, [pc, #300]	; (8002250 <OTM8009A_Init+0x40c>)
 8002124:	2000      	movs	r0, #0
 8002126:	f000 fd75 	bl	8002c14 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800212a:	2078      	movs	r0, #120	; 0x78
 800212c:	f000 f9ac 	bl	8002488 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8090 	beq.w	8002258 <OTM8009A_Init+0x414>
 8002138:	2b02      	cmp	r3, #2
 800213a:	d000      	beq.n	800213e <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 800213c:	e091      	b.n	8002262 <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800213e:	4945      	ldr	r1, [pc, #276]	; (8002254 <OTM8009A_Init+0x410>)
 8002140:	2000      	movs	r0, #0
 8002142:	f000 fd67 	bl	8002c14 <DSI_IO_WriteCmd>
    break;
 8002146:	e08c      	b.n	8002262 <OTM8009A_Init+0x41e>
 8002148:	08007694 	.word	0x08007694
 800214c:	0800754c 	.word	0x0800754c
 8002150:	08007698 	.word	0x08007698
 8002154:	08007550 	.word	0x08007550
 8002158:	0800769c 	.word	0x0800769c
 800215c:	080076a0 	.word	0x080076a0
 8002160:	080076a4 	.word	0x080076a4
 8002164:	080076a8 	.word	0x080076a8
 8002168:	080076ac 	.word	0x080076ac
 800216c:	080076b0 	.word	0x080076b0
 8002170:	080076b4 	.word	0x080076b4
 8002174:	080076b8 	.word	0x080076b8
 8002178:	080076bc 	.word	0x080076bc
 800217c:	080076c0 	.word	0x080076c0
 8002180:	080076c4 	.word	0x080076c4
 8002184:	080076c8 	.word	0x080076c8
 8002188:	080076cc 	.word	0x080076cc
 800218c:	080076d0 	.word	0x080076d0
 8002190:	080076d4 	.word	0x080076d4
 8002194:	080076d8 	.word	0x080076d8
 8002198:	080076dc 	.word	0x080076dc
 800219c:	0800757c 	.word	0x0800757c
 80021a0:	080076e0 	.word	0x080076e0
 80021a4:	080076e4 	.word	0x080076e4
 80021a8:	080076e8 	.word	0x080076e8
 80021ac:	080076ec 	.word	0x080076ec
 80021b0:	080076f0 	.word	0x080076f0
 80021b4:	080076f4 	.word	0x080076f4
 80021b8:	080076f8 	.word	0x080076f8
 80021bc:	080076fc 	.word	0x080076fc
 80021c0:	08007700 	.word	0x08007700
 80021c4:	08007580 	.word	0x08007580
 80021c8:	08007584 	.word	0x08007584
 80021cc:	08007704 	.word	0x08007704
 80021d0:	0800758c 	.word	0x0800758c
 80021d4:	08007708 	.word	0x08007708
 80021d8:	0800759c 	.word	0x0800759c
 80021dc:	0800770c 	.word	0x0800770c
 80021e0:	080075ac 	.word	0x080075ac
 80021e4:	08007710 	.word	0x08007710
 80021e8:	08007748 	.word	0x08007748
 80021ec:	080075b8 	.word	0x080075b8
 80021f0:	08007714 	.word	0x08007714
 80021f4:	080075c4 	.word	0x080075c4
 80021f8:	080075d4 	.word	0x080075d4
 80021fc:	080075e4 	.word	0x080075e4
 8002200:	080075f0 	.word	0x080075f0
 8002204:	08007600 	.word	0x08007600
 8002208:	08007718 	.word	0x08007718
 800220c:	08007610 	.word	0x08007610
 8002210:	0800771c 	.word	0x0800771c
 8002214:	0800761c 	.word	0x0800761c
 8002218:	08007628 	.word	0x08007628
 800221c:	08007634 	.word	0x08007634
 8002220:	08007644 	.word	0x08007644
 8002224:	08007654 	.word	0x08007654
 8002228:	08007660 	.word	0x08007660
 800222c:	08007670 	.word	0x08007670
 8002230:	0800774c 	.word	0x0800774c
 8002234:	08007750 	.word	0x08007750
 8002238:	08007754 	.word	0x08007754
 800223c:	08007758 	.word	0x08007758
 8002240:	0800775c 	.word	0x0800775c
 8002244:	08007680 	.word	0x08007680
 8002248:	08007554 	.word	0x08007554
 800224c:	08007568 	.word	0x08007568
 8002250:	08007720 	.word	0x08007720
 8002254:	08007724 	.word	0x08007724
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002258:	491a      	ldr	r1, [pc, #104]	; (80022c4 <OTM8009A_Init+0x480>)
 800225a:	2000      	movs	r0, #0
 800225c:	f000 fcda 	bl	8002c14 <DSI_IO_WriteCmd>
    break;
 8002260:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10b      	bne.n	8002280 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002268:	4917      	ldr	r1, [pc, #92]	; (80022c8 <OTM8009A_Init+0x484>)
 800226a:	2000      	movs	r0, #0
 800226c:	f000 fcd2 	bl	8002c14 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <OTM8009A_Init+0x488>)
 8002272:	2004      	movs	r0, #4
 8002274:	f000 fcce 	bl	8002c14 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002278:	4915      	ldr	r1, [pc, #84]	; (80022d0 <OTM8009A_Init+0x48c>)
 800227a:	2004      	movs	r0, #4
 800227c:	f000 fcca 	bl	8002c14 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002280:	4914      	ldr	r1, [pc, #80]	; (80022d4 <OTM8009A_Init+0x490>)
 8002282:	2000      	movs	r0, #0
 8002284:	f000 fcc6 	bl	8002c14 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002288:	4913      	ldr	r1, [pc, #76]	; (80022d8 <OTM8009A_Init+0x494>)
 800228a:	2000      	movs	r0, #0
 800228c:	f000 fcc2 	bl	8002c14 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002290:	4912      	ldr	r1, [pc, #72]	; (80022dc <OTM8009A_Init+0x498>)
 8002292:	2000      	movs	r0, #0
 8002294:	f000 fcbe 	bl	8002c14 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002298:	4911      	ldr	r1, [pc, #68]	; (80022e0 <OTM8009A_Init+0x49c>)
 800229a:	2000      	movs	r0, #0
 800229c:	f000 fcba 	bl	8002c14 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80022a0:	4910      	ldr	r1, [pc, #64]	; (80022e4 <OTM8009A_Init+0x4a0>)
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 fcb6 	bl	8002c14 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80022a8:	490f      	ldr	r1, [pc, #60]	; (80022e8 <OTM8009A_Init+0x4a4>)
 80022aa:	2000      	movs	r0, #0
 80022ac:	f000 fcb2 	bl	8002c14 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80022b0:	490e      	ldr	r1, [pc, #56]	; (80022ec <OTM8009A_Init+0x4a8>)
 80022b2:	2000      	movs	r0, #0
 80022b4:	f000 fcae 	bl	8002c14 <DSI_IO_WriteCmd>

  return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	08007728 	.word	0x08007728
 80022c8:	0800772c 	.word	0x0800772c
 80022cc:	08007684 	.word	0x08007684
 80022d0:	0800768c 	.word	0x0800768c
 80022d4:	08007730 	.word	0x08007730
 80022d8:	08007734 	.word	0x08007734
 80022dc:	08007738 	.word	0x08007738
 80022e0:	0800773c 	.word	0x0800773c
 80022e4:	08007740 	.word	0x08007740
 80022e8:	08007694 	.word	0x08007694
 80022ec:	08007744 	.word	0x08007744

080022f0 <SharedParamsInit>:
** \brief     Initializes the shared RAM parameters module.
** \return    none.
**
****************************************************************************************/
void SharedParamsInit(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0

  /* The shared parameter buffer does not get initialized by the C-startup code. Another
   * previously running program could have initialized it, in which case it is ready
   * for use and nothing more needs to be done.
   */
  if (!SharedParamsValidateBuffer())
 80022f6:	f000 f845 	bl	8002384 <SharedParamsValidateBuffer>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d013      	beq.n	800232e <SharedParamsInit+0x3e>
     * was configured to not do this.
     *
     * The initialization consists of setting the buffer identifier, zeroing the
     * actual parameter data and updating the checksum at the end.
     */
    sharedParamsBuffer.identifier = SHARED_PARAMS_BUFFER_ID;
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <SharedParamsInit+0x48>)
 8002308:	4a0c      	ldr	r2, [pc, #48]	; (800233c <SharedParamsInit+0x4c>)
 800230a:	601a      	str	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	e008      	b.n	8002324 <SharedParamsInit+0x34>
    {
      sharedParamsBuffer.data[byteIdx] = 0;
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <SharedParamsInit+0x48>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	3304      	adds	r3, #4
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
    for (byteIdx=0; byteIdx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3301      	adds	r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b37      	cmp	r3, #55	; 0x37
 8002328:	d9f3      	bls.n	8002312 <SharedParamsInit+0x22>
    }
    SharedParamsWriteChecksum();
 800232a:	f000 f845 	bl	80023b8 <SharedParamsWriteChecksum>
  }
} /*** end of SharedParamsInit ***/
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000024 	.word	0x20000024
 800233c:	ce42e7a2 	.word	0xce42e7a2

08002340 <SharedParamsReadByIndex>:
** \param     value Pointer to where the read data value is stored.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
bool SharedParamsReadByIndex(uint32_t idx, uint8_t * value)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  bool result = false;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]

  /* Only continue if the buffer and the specified parameters are valid. */
  if ( (SharedParamsValidateBuffer()) &&
 800234e:	f000 f819 	bl	8002384 <SharedParamsValidateBuffer>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <SharedParamsReadByIndex+0x36>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b37      	cmp	r3, #55	; 0x37
 800235c:	d80b      	bhi.n	8002376 <SharedParamsReadByIndex+0x36>
       (idx < SHARED_PARAMS_CFG_BUFFER_DATA_LEN)  &&
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <SharedParamsReadByIndex+0x36>
       (value != NULL) )
  {
    /* Read the value and update the result. */
    *value = sharedParamsBuffer.data[idx];
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <SharedParamsReadByIndex+0x40>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	701a      	strb	r2, [r3, #0]
    result = true;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of SharedParamsReadByIndex ***/
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000024 	.word	0x20000024

08002384 <SharedParamsValidateBuffer>:
**            identifier and verifying its checksum.
** \return    True if successful, false otherwise.
**
****************************************************************************************/
static bool SharedParamsValidateBuffer(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
  bool result = false;
 800238a:	2300      	movs	r3, #0
 800238c:	71fb      	strb	r3, [r7, #7]

  /* Perform validation. */
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <SharedParamsValidateBuffer+0x2c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <SharedParamsValidateBuffer+0x30>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d106      	bne.n	80023a6 <SharedParamsValidateBuffer+0x22>
       (SharedParamsVerifyChecksum()) )
 8002398:	f000 f81a 	bl	80023d0 <SharedParamsVerifyChecksum>
 800239c:	4603      	mov	r3, r0
  if ( (sharedParamsBuffer.identifier == SHARED_PARAMS_BUFFER_ID) &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <SharedParamsValidateBuffer+0x22>
  {
    /* The shared parameter buffer is valid, so update the result value. */
    result = true;
 80023a2:	2301      	movs	r3, #1
 80023a4:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsValitabeTable ***/
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000024 	.word	0x20000024
 80023b4:	ce42e7a2 	.word	0xce42e7a2

080023b8 <SharedParamsWriteChecksum>:
** \brief     Calculates and writes the checksum into the buffer.
** \return    none.
**
****************************************************************************************/
static void SharedParamsWriteChecksum(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Calculate and write the checksum. */
  sharedParamsBuffer.checksum = SharedParamsCalculateChecksum();
 80023bc:	f000 f81e 	bl	80023fc <SharedParamsCalculateChecksum>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b01      	ldr	r3, [pc, #4]	; (80023cc <SharedParamsWriteChecksum+0x14>)
 80023c6:	879a      	strh	r2, [r3, #60]	; 0x3c
} /*** end of SharedParamsWriteChecksum ***/
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000024 	.word	0x20000024

080023d0 <SharedParamsVerifyChecksum>:
**            buffer.
** \return    True is the checksum is correct, false otherwise.
**
****************************************************************************************/
static bool SharedParamsVerifyChecksum(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
  bool result = false;
 80023d6:	2300      	movs	r3, #0
 80023d8:	71fb      	strb	r3, [r7, #7]

  /* Calculate and verify the checksum. */
  if (SharedParamsCalculateChecksum() == sharedParamsBuffer.checksum)
 80023da:	f000 f80f 	bl	80023fc <SharedParamsCalculateChecksum>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SharedParamsVerifyChecksum+0x28>)
 80023e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d101      	bne.n	80023ee <SharedParamsVerifyChecksum+0x1e>
  {
    /* Checksum is correct, so update the result value. */
    result = true;
 80023ea:	2301      	movs	r3, #1
 80023ec:	71fb      	strb	r3, [r7, #7]
  }
  /* Give the result back to the caller. */
  return result;
 80023ee:	79fb      	ldrb	r3, [r7, #7]
} /*** end of SharedParamsVerifyChecksum ***/
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000024 	.word	0x20000024

080023fc <SharedParamsCalculateChecksum>:
**            two's complement value of it.
** \return    The calculated checksum value.
**
****************************************************************************************/
static uint16_t SharedParamsCalculateChecksum(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
  uint16_t result = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	80fb      	strh	r3, [r7, #6]
  uint32_t byteIdx;

  /* Add the identifier bytes to the checksum. */
  result += (uint8_t)sharedParamsBuffer.identifier;
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <SharedParamsCalculateChecksum+0x88>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	b29a      	uxth	r2, r3
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	4413      	add	r3, r2
 8002412:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 8u);
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <SharedParamsCalculateChecksum+0x88>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b2db      	uxtb	r3, r3
 800241c:	b29a      	uxth	r2, r3
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	4413      	add	r3, r2
 8002422:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 16u);
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <SharedParamsCalculateChecksum+0x88>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	b2db      	uxtb	r3, r3
 800242c:	b29a      	uxth	r2, r3
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4413      	add	r3, r2
 8002432:	80fb      	strh	r3, [r7, #6]
  result += (uint8_t)(sharedParamsBuffer.identifier >> 24u);
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <SharedParamsCalculateChecksum+0x88>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0e1b      	lsrs	r3, r3, #24
 800243a:	b2db      	uxtb	r3, r3
 800243c:	b29a      	uxth	r2, r3
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	4413      	add	r3, r2
 8002442:	80fb      	strh	r3, [r7, #6]
  /* Loop through the parameter data array. */
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	e00b      	b.n	8002462 <SharedParamsCalculateChecksum+0x66>
  {
    /* Add parameter data byte to the checksum. */
    result += (uint8_t)sharedParamsBuffer.data[byteIdx];
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <SharedParamsCalculateChecksum+0x88>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	3304      	adds	r3, #4
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b29a      	uxth	r2, r3
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	4413      	add	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  for (byteIdx=0; byteIdx<SHARED_PARAMS_CFG_BUFFER_DATA_LEN; byteIdx++)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	3301      	adds	r3, #1
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b37      	cmp	r3, #55	; 0x37
 8002466:	d9f0      	bls.n	800244a <SharedParamsCalculateChecksum+0x4e>
  }
  /* Determine one's complement. */
  result = ~result;
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	43db      	mvns	r3, r3
 800246c:	80fb      	strh	r3, [r7, #6]
  /* Determine two's complement. */
  result += 1;
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	3301      	adds	r3, #1
 8002472:	80fb      	strh	r3, [r7, #6]
  /* Give the result back to the caller. */
  return result;
 8002474:	88fb      	ldrh	r3, [r7, #6]
} /*** end of SharedParamsCalculateChecksum ***/
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000024 	.word	0x20000024

08002488 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f001 f849 	bl	8003528 <HAL_Delay>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80024a2:	2001      	movs	r0, #1
 80024a4:	f000 f804 	bl	80024b0 <BSP_LCD_InitEx>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b096      	sub	sp, #88	; 0x58
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80024ba:	f646 3325 	movw	r3, #27429	; 0x6b25
 80024be:	657b      	str	r3, [r7, #84]	; 0x54
  
  uint32_t laneByteClk_kHz = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80024c4:	f000 f93e 	bl	8002744 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80024c8:	f000 fbce 	bl	8002c68 <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 80024cc:	4b93      	ldr	r3, [pc, #588]	; (800271c <BSP_LCD_InitEx+0x26c>)
 80024ce:	4a94      	ldr	r2, [pc, #592]	; (8002720 <BSP_LCD_InitEx+0x270>)
 80024d0:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 80024d2:	4892      	ldr	r0, [pc, #584]	; (800271c <BSP_LCD_InitEx+0x26c>)
 80024d4:	f001 ff10 	bl	80042f8 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 80024d8:	237d      	movs	r3, #125	; 0x7d
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 80024dc:	2302      	movs	r3, #2
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80024e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024e8:	653b      	str	r3, [r7, #80]	; 0x50
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80024ea:	4b8c      	ldr	r3, [pc, #560]	; (800271c <BSP_LCD_InitEx+0x26c>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 80024f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	4a8b      	ldr	r2, [pc, #556]	; (8002724 <BSP_LCD_InitEx+0x274>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0a9b      	lsrs	r3, r3, #10
 80024fc:	4a87      	ldr	r2, [pc, #540]	; (800271c <BSP_LCD_InitEx+0x26c>)
 80024fe:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8002500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002504:	4619      	mov	r1, r3
 8002506:	4885      	ldr	r0, [pc, #532]	; (800271c <BSP_LCD_InitEx+0x26c>)
 8002508:	f001 fddc 	bl	80040c4 <HAL_DSI_Init>
  
  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d108      	bne.n	8002524 <BSP_LCD_InitEx+0x74>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8002512:	4b85      	ldr	r3, [pc, #532]	; (8002728 <BSP_LCD_InitEx+0x278>)
 8002514:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002518:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800251a:	4b84      	ldr	r3, [pc, #528]	; (800272c <BSP_LCD_InitEx+0x27c>)
 800251c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e007      	b.n	8002534 <BSP_LCD_InitEx+0x84>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8002524:	4b80      	ldr	r3, [pc, #512]	; (8002728 <BSP_LCD_InitEx+0x278>)
 8002526:	f44f 7248 	mov.w	r2, #800	; 0x320
 800252a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800252c:	4b7f      	ldr	r3, [pc, #508]	; (800272c <BSP_LCD_InitEx+0x27c>)
 800252e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002532:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8002534:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <BSP_LCD_InitEx+0x278>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	64fb      	str	r3, [r7, #76]	; 0x4c
  VACT = lcd_y_size;
 800253a:	4b7c      	ldr	r3, [pc, #496]	; (800272c <BSP_LCD_InitEx+0x27c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	64bb      	str	r3, [r7, #72]	; 0x48
  
  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;
 8002540:	2301      	movs	r3, #1
 8002542:	647b      	str	r3, [r7, #68]	; 0x44
  VBP  = OTM8009A_480X800_VBP;
 8002544:	230f      	movs	r3, #15
 8002546:	643b      	str	r3, [r7, #64]	; 0x40
  VFP  = OTM8009A_480X800_VFP;
 8002548:	2310      	movs	r3, #16
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HSA  = OTM8009A_480X800_HSYNC;
 800254c:	2302      	movs	r3, #2
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
  HBP  = OTM8009A_480X800_HBP;
 8002550:	2322      	movs	r3, #34	; 0x22
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
  HFP  = OTM8009A_480X800_HFP;
 8002554:	2322      	movs	r3, #34	; 0x22
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
  
  
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <BSP_LCD_InitEx+0x280>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 800255e:	4b74      	ldr	r3, [pc, #464]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002560:	2205      	movs	r2, #5
 8002562:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002564:	4b72      	ldr	r3, [pc, #456]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002566:	2200      	movs	r2, #0
 8002568:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800256a:	4b71      	ldr	r3, [pc, #452]	; (8002730 <BSP_LCD_InitEx+0x280>)
 800256c:	2200      	movs	r2, #0
 800256e:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8002570:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002572:	2200      	movs	r2, #0
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8002576:	4b6e      	ldr	r3, [pc, #440]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002578:	2202      	movs	r2, #2
 800257a:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800257c:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <BSP_LCD_InitEx+0x280>)
 800257e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002582:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800258a:	4a69      	ldr	r2, [pc, #420]	; (8002730 <BSP_LCD_InitEx+0x280>)
 800258c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258e:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002594:	fb02 f203 	mul.w	r2, r2, r3
 8002598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259a:	fbb2 f3f3 	udiv	r3, r2, r3
 800259e:	4a64      	ldr	r2, [pc, #400]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025a0:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 80025a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025a6:	fb02 f203 	mul.w	r2, r2, r3
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	4a5f      	ldr	r2, [pc, #380]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80025b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	441a      	add	r2, r3
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	441a      	add	r2, r3
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	4413      	add	r3, r2
 80025c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025c4:	fb02 f203 	mul.w	r2, r2, r3
 80025c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4a58      	ldr	r2, [pc, #352]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80025d2:	4a57      	ldr	r2, [pc, #348]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d6:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80025d8:	4a55      	ldr	r2, [pc, #340]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025dc:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80025de:	4a54      	ldr	r2, [pc, #336]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e2:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80025ea:	4b51      	ldr	r3, [pc, #324]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80025f2:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025f4:	2210      	movs	r2, #16
 80025f6:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80025f8:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	64da      	str	r2, [r3, #76]	; 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80025fe:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002600:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002604:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8002606:	4b4a      	ldr	r3, [pc, #296]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002608:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 800260e:	4b48      	ldr	r3, [pc, #288]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002614:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8002616:	4b46      	ldr	r3, [pc, #280]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261c:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 800261e:	4b44      	ldr	r3, [pc, #272]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002624:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262c:	665a      	str	r2, [r3, #100]	; 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 800262e:	4940      	ldr	r1, [pc, #256]	; (8002730 <BSP_LCD_InitEx+0x280>)
 8002630:	483a      	ldr	r0, [pc, #232]	; (800271c <BSP_LCD_InitEx+0x26c>)
 8002632:	f001 fee9 	bl	8004408 <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8002636:	2323      	movs	r3, #35	; 0x23
 8002638:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 800263a:	2323      	movs	r3, #35	; 0x23
 800263c:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 800263e:	2323      	movs	r3, #35	; 0x23
 8002640:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 8002642:	2323      	movs	r3, #35	; 0x23
 8002644:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 800264a:	230a      	movs	r3, #10
 800264c:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	4619      	mov	r1, r3
 8002654:	4831      	ldr	r0, [pc, #196]	; (800271c <BSP_LCD_InitEx+0x26c>)
 8002656:	f002 f8df 	bl	8004818 <HAL_DSI_ConfigPhyTimer>
  
  
/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	3b01      	subs	r3, #1
 800265e:	4a35      	ldr	r2, [pc, #212]	; (8002734 <BSP_LCD_InitEx+0x284>)
 8002660:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8002662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	4413      	add	r3, r2
 8002668:	3b01      	subs	r3, #1
 800266a:	4a32      	ldr	r2, [pc, #200]	; (8002734 <BSP_LCD_InitEx+0x284>)
 800266c:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800266e:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <BSP_LCD_InitEx+0x278>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	441a      	add	r2, r3
 8002676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002678:	4413      	add	r3, r2
 800267a:	3b01      	subs	r3, #1
 800267c:	4a2d      	ldr	r2, [pc, #180]	; (8002734 <BSP_LCD_InitEx+0x284>)
 800267e:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <BSP_LCD_InitEx+0x278>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	441a      	add	r2, r3
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	441a      	add	r2, r3
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	4413      	add	r3, r2
 8002690:	3b01      	subs	r3, #1
 8002692:	4a28      	ldr	r2, [pc, #160]	; (8002734 <BSP_LCD_InitEx+0x284>)
 8002694:	62d3      	str	r3, [r2, #44]	; 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <BSP_LCD_InitEx+0x278>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a26      	ldr	r2, [pc, #152]	; (8002734 <BSP_LCD_InitEx+0x284>)
 800269c:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <BSP_LCD_InitEx+0x27c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a24      	ldr	r2, [pc, #144]	; (8002734 <BSP_LCD_InitEx+0x284>)
 80026a4:	6653      	str	r3, [r2, #100]	; 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <BSP_LCD_InitEx+0x288>)
 80026a8:	2208      	movs	r2, #8
 80026aa:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <BSP_LCD_InitEx+0x288>)
 80026ae:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80026b2:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80026b4:	4b20      	ldr	r3, [pc, #128]	; (8002738 <BSP_LCD_InitEx+0x288>)
 80026b6:	2207      	movs	r2, #7
 80026b8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80026ba:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <BSP_LCD_InitEx+0x288>)
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80026c0:	481d      	ldr	r0, [pc, #116]	; (8002738 <BSP_LCD_InitEx+0x288>)
 80026c2:	f003 fbdf 	bl	8005e84 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <BSP_LCD_InitEx+0x284>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 80026ce:	4b19      	ldr	r3, [pc, #100]	; (8002734 <BSP_LCD_InitEx+0x284>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 80026d6:	4b17      	ldr	r3, [pc, #92]	; (8002734 <BSP_LCD_InitEx+0x284>)
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <BSP_LCD_InitEx+0x284>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <BSP_LCD_InitEx+0x284>)
 80026e6:	4a15      	ldr	r2, [pc, #84]	; (800273c <BSP_LCD_InitEx+0x28c>)
 80026e8:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 80026ea:	4911      	ldr	r1, [pc, #68]	; (8002730 <BSP_LCD_InitEx+0x280>)
 80026ec:	4811      	ldr	r0, [pc, #68]	; (8002734 <BSP_LCD_InitEx+0x284>)
 80026ee:	f003 f96a 	bl	80059c6 <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 80026f2:	4810      	ldr	r0, [pc, #64]	; (8002734 <BSP_LCD_InitEx+0x284>)
 80026f4:	f002 feb8 	bl	8005468 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 80026f8:	4808      	ldr	r0, [pc, #32]	; (800271c <BSP_LCD_InitEx+0x26c>)
 80026fa:	f002 f8f7 	bl	80048ec <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80026fe:	f000 fc39 	bl	8002f74 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002702:	480f      	ldr	r0, [pc, #60]	; (8002740 <BSP_LCD_InitEx+0x290>)
 8002704:	f000 f8fe 	bl	8002904 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/  
  
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	4619      	mov	r1, r3
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff fb99 	bl	8001e44 <OTM8009A_Init>
  
/***********************End OTM8009A Initialization****************************/ 
  
  return LCD_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3758      	adds	r7, #88	; 0x58
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200007b0 	.word	0x200007b0
 8002720:	40016c00 	.word	0x40016c00
 8002724:	43215e57 	.word	0x43215e57
 8002728:	2000000c 	.word	0x2000000c
 800272c:	20000010 	.word	0x20000010
 8002730:	20000584 	.word	0x20000584
 8002734:	20000708 	.word	0x20000708
 8002738:	2000060c 	.word	0x2000060c
 800273c:	40016800 	.word	0x40016800
 8002740:	20000004 	.word	0x20000004

08002744 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
/* EVAL Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <BSP_LCD_Reset+0x64>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <BSP_LCD_Reset+0x64>)
 8002754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <BSP_LCD_Reset+0x64>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PH7 */
    gpio_init_structure.Pin   = GPIO_PIN_7;
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 800276a:	2311      	movs	r3, #17
 800276c:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4619      	mov	r1, r3
 800277a:	480c      	ldr	r0, [pc, #48]	; (80027ac <BSP_LCD_Reset+0x68>)
 800277c:	f002 fcb0 	bl	80050e0 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	4809      	ldr	r0, [pc, #36]	; (80027ac <BSP_LCD_Reset+0x68>)
 8002786:	f002 fe55 	bl	8005434 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800278a:	2014      	movs	r0, #20
 800278c:	f000 fecc 	bl	8003528 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8002790:	2201      	movs	r2, #1
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <BSP_LCD_Reset+0x68>)
 8002796:	f002 fe4d 	bl	8005434 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);    
 800279a:	200a      	movs	r0, #10
 800279c:	f000 fec4 	bl	8003528 <HAL_Delay>
#else
  
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40021c00 	.word	0x40021c00

080027b0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <BSP_LCD_GetXSize+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000000c 	.word	0x2000000c

080027c8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <BSP_LCD_GetYSize+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000010 	.word	0x20000010

080027e0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b090      	sub	sp, #64	; 0x40
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80027f0:	f7ff ffde 	bl	80027b0 <BSP_LCD_GetXSize>
 80027f4:	4603      	mov	r3, r0
 80027f6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80027fc:	f7ff ffe4 	bl	80027c8 <BSP_LCD_GetYSize>
 8002800:	4603      	mov	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800280c:	23ff      	movs	r3, #255	; 0xff
 800280e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002826:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800282c:	2307      	movs	r3, #7
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002830:	f7ff ffbe 	bl	80027b0 <BSP_LCD_GetXSize>
 8002834:	4603      	mov	r3, r0
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002838:	f7ff ffc6 	bl	80027c8 <BSP_LCD_GetYSize>
 800283c:	4603      	mov	r3, r0
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	4619      	mov	r1, r3
 8002848:	4812      	ldr	r0, [pc, #72]	; (8002894 <BSP_LCD_LayerDefaultInit+0xb4>)
 800284a:	f002 fee7 	bl	800561c <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	4911      	ldr	r1, [pc, #68]	; (8002898 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	3304      	adds	r3, #4
 800285e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002862:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	490c      	ldr	r1, [pc, #48]	; (8002898 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3308      	adds	r3, #8
 8002874:	4a09      	ldr	r2, [pc, #36]	; (800289c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002876:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	4907      	ldr	r1, [pc, #28]	; (8002898 <BSP_LCD_LayerDefaultInit+0xb8>)
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	3740      	adds	r7, #64	; 0x40
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000708 	.word	0x20000708
 8002898:	200005f4 	.word	0x200005f4
 800289c:	20000004 	.word	0x20000004

080028a0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <BSP_LCD_SetTextColor+0x28>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4907      	ldr	r1, [pc, #28]	; (80028cc <BSP_LCD_SetTextColor+0x2c>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	200005f0 	.word	0x200005f0
 80028cc:	200005f4 	.word	0x200005f4

080028d0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <BSP_LCD_SetBackColor+0x2c>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4908      	ldr	r1, [pc, #32]	; (8002900 <BSP_LCD_SetBackColor+0x30>)
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3304      	adds	r3, #4
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	601a      	str	r2, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200005f0 	.word	0x200005f0
 8002900:	200005f4 	.word	0x200005f4

08002904 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <BSP_LCD_SetFont+0x2c>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4908      	ldr	r1, [pc, #32]	; (8002934 <BSP_LCD_SetFont+0x30>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3308      	adds	r3, #8
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	200005f0 	.word	0x200005f0
 8002934:	200005f4 	.word	0x200005f4

08002938 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af02      	add	r7, sp, #8
 800293e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <BSP_LCD_Clear+0x48>)
 8002942:	681c      	ldr	r4, [r3, #0]
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <BSP_LCD_Clear+0x48>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <BSP_LCD_Clear+0x4c>)
 800294a:	2134      	movs	r1, #52	; 0x34
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	335c      	adds	r3, #92	; 0x5c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461d      	mov	r5, r3
 8002958:	f7ff ff2a 	bl	80027b0 <BSP_LCD_GetXSize>
 800295c:	4606      	mov	r6, r0
 800295e:	f7ff ff33 	bl	80027c8 <BSP_LCD_GetYSize>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	2300      	movs	r3, #0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	4632      	mov	r2, r6
 8002970:	4629      	mov	r1, r5
 8002972:	4620      	mov	r0, r4
 8002974:	f000 fac6 	bl	8002f04 <LL_FillBuffer>
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002980:	200005f0 	.word	0x200005f0
 8002984:	20000708 	.word	0x20000708

08002988 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002988:	b590      	push	{r4, r7, lr}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	80fb      	strh	r3, [r7, #6]
 8002992:	460b      	mov	r3, r1
 8002994:	80bb      	strh	r3, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <BSP_LCD_DisplayChar+0x80>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <BSP_LCD_DisplayChar+0x84>)
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	3308      	adds	r3, #8
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029b6:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <BSP_LCD_DisplayChar+0x80>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4c14      	ldr	r4, [pc, #80]	; (8002a0c <BSP_LCD_DisplayChar+0x84>)
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4423      	add	r3, r4
 80029c6:	3308      	adds	r3, #8
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029cc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029d0:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <BSP_LCD_DisplayChar+0x80>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4c0d      	ldr	r4, [pc, #52]	; (8002a0c <BSP_LCD_DisplayChar+0x84>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4423      	add	r3, r4
 80029e0:	3308      	adds	r3, #8
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	889b      	ldrh	r3, [r3, #4]
 80029e6:	3307      	adds	r3, #7
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	da00      	bge.n	80029ee <BSP_LCD_DisplayChar+0x66>
 80029ec:	3307      	adds	r3, #7
 80029ee:	10db      	asrs	r3, r3, #3
 80029f0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029f4:	18ca      	adds	r2, r1, r3
 80029f6:	88b9      	ldrh	r1, [r7, #4]
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f9ca 	bl	8002d94 <DrawChar>
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	200005f0 	.word	0x200005f0
 8002a0c:	200005f4 	.word	0x200005f4

08002a10 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60ba      	str	r2, [r7, #8]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	81fb      	strh	r3, [r7, #14]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	81bb      	strh	r3, [r7, #12]
 8002a22:	4613      	mov	r3, r2
 8002a24:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002a26:	2301      	movs	r3, #1
 8002a28:	83fb      	strh	r3, [r7, #30]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8002a3a:	e002      	b.n	8002a42 <BSP_LCD_DisplayStringAt+0x32>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	617a      	str	r2, [r7, #20]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f6      	bne.n	8002a3c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a4e:	f7ff feaf 	bl	80027b0 <BSP_LCD_GetXSize>
 8002a52:	4b4f      	ldr	r3, [pc, #316]	; (8002b90 <BSP_LCD_DisplayStringAt+0x180>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	494f      	ldr	r1, [pc, #316]	; (8002b94 <BSP_LCD_DisplayStringAt+0x184>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	3308      	adds	r3, #8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	889b      	ldrh	r3, [r3, #4]
 8002a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a6c:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d01c      	beq.n	8002aae <BSP_LCD_DisplayStringAt+0x9e>
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d017      	beq.n	8002aa8 <BSP_LCD_DisplayStringAt+0x98>
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d12e      	bne.n	8002ada <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	1ad1      	subs	r1, r2, r3
 8002a82:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <BSP_LCD_DisplayStringAt+0x180>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4843      	ldr	r0, [pc, #268]	; (8002b94 <BSP_LCD_DisplayStringAt+0x184>)
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4403      	add	r3, r0
 8002a92:	3308      	adds	r3, #8
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	889b      	ldrh	r3, [r3, #4]
 8002a98:	fb03 f301 	mul.w	r3, r3, r1
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	83fb      	strh	r3, [r7, #30]
      break;
 8002aa6:	e01b      	b.n	8002ae0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	83fb      	strh	r3, [r7, #30]
      break;
 8002aac:	e018      	b.n	8002ae0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	b299      	uxth	r1, r3
 8002ab6:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <BSP_LCD_DisplayStringAt+0x180>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4836      	ldr	r0, [pc, #216]	; (8002b94 <BSP_LCD_DisplayStringAt+0x184>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4403      	add	r3, r0
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	889b      	ldrh	r3, [r3, #4]
 8002acc:	fb11 f303 	smulbb	r3, r1, r3
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	83fb      	strh	r3, [r7, #30]
      break;
 8002ad8:	e002      	b.n	8002ae0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 8002ada:	89fb      	ldrh	r3, [r7, #14]
 8002adc:	83fb      	strh	r3, [r7, #30]
      break;
 8002ade:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002ae0:	8bfb      	ldrh	r3, [r7, #30]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <BSP_LCD_DisplayStringAt+0xde>
 8002ae6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da1d      	bge.n	8002b2a <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002af2:	e01a      	b.n	8002b2a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	781a      	ldrb	r2, [r3, #0]
 8002af8:	89b9      	ldrh	r1, [r7, #12]
 8002afa:	8bfb      	ldrh	r3, [r7, #30]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff43 	bl	8002988 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <BSP_LCD_DisplayStringAt+0x180>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4923      	ldr	r1, [pc, #140]	; (8002b94 <BSP_LCD_DisplayStringAt+0x184>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3308      	adds	r3, #8
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	889a      	ldrh	r2, [r3, #4]
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3301      	adds	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
    i++;
 8002b24:	8bbb      	ldrh	r3, [r7, #28]
 8002b26:	3301      	adds	r3, #1
 8002b28:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2dc      	uxtb	r4, r3
 8002b38:	f7ff fe3a 	bl	80027b0 <BSP_LCD_GetXSize>
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	8bb9      	ldrh	r1, [r7, #28]
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <BSP_LCD_DisplayStringAt+0x180>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4813      	ldr	r0, [pc, #76]	; (8002b94 <BSP_LCD_DisplayStringAt+0x184>)
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4403      	add	r3, r0
 8002b50:	3308      	adds	r3, #8
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	889b      	ldrh	r3, [r3, #4]
 8002b56:	fb03 f301 	mul.w	r3, r3, r1
 8002b5a:	1aeb      	subs	r3, r5, r3
 8002b5c:	b299      	uxth	r1, r3
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <BSP_LCD_DisplayStringAt+0x180>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	480c      	ldr	r0, [pc, #48]	; (8002b94 <BSP_LCD_DisplayStringAt+0x184>)
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4403      	add	r3, r0
 8002b6e:	3308      	adds	r3, #8
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	889b      	ldrh	r3, [r3, #4]
 8002b74:	4299      	cmp	r1, r3
 8002b76:	bf2c      	ite	cs
 8002b78:	2301      	movcs	r3, #1
 8002b7a:	2300      	movcc	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4023      	ands	r3, r4
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1b6      	bne.n	8002af4 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8002b86:	bf00      	nop
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200005f0 	.word	0x200005f0
 8002b94:	200005f4 	.word	0x200005f4

08002b98 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	80bb      	strh	r3, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <BSP_LCD_DrawHLine+0x70>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <BSP_LCD_DrawHLine+0x74>)
 8002bb4:	2134      	movs	r1, #52	; 0x34
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	681c      	ldr	r4, [r3, #0]
 8002bc0:	f7ff fdf6 	bl	80027b0 <BSP_LCD_GetXSize>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	fb03 f202 	mul.w	r2, r3, r2
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4423      	add	r3, r4
 8002bd4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <BSP_LCD_DrawHLine+0x70>)
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	68fc      	ldr	r4, [r7, #12]
 8002bdc:	887d      	ldrh	r5, [r7, #2]
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <BSP_LCD_DrawHLine+0x70>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	490b      	ldr	r1, [pc, #44]	; (8002c10 <BSP_LCD_DrawHLine+0x78>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	462a      	mov	r2, r5
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	f000 f982 	bl	8002f04 <LL_FillBuffer>
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bdb0      	pop	{r4, r5, r7, pc}
 8002c08:	200005f0 	.word	0x200005f0
 8002c0c:	20000708 	.word	0x20000708
 8002c10:	200005f4 	.word	0x200005f4

08002c14 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d80d      	bhi.n	8002c40 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_eval, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	2215      	movs	r2, #21
 8002c36:	2100      	movs	r1, #0
 8002c38:	480a      	ldr	r0, [pc, #40]	; (8002c64 <DSI_IO_WriteCmd+0x50>)
 8002c3a:	f001 fe93 	bl	8004964 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  }
}
 8002c3e:	e00d      	b.n	8002c5c <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_eval,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	9200      	str	r2, [sp, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2239      	movs	r2, #57	; 0x39
 8002c54:	2100      	movs	r1, #0
 8002c56:	4803      	ldr	r0, [pc, #12]	; (8002c64 <DSI_IO_WriteCmd+0x50>)
 8002c58:	f001 fea6 	bl	80049a8 <HAL_DSI_LongWrite>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200007b0 	.word	0x200007b0

08002c68 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c94:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ca0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	4a20      	ldr	r2, [pc, #128]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8002cca:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002cd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cd4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002ce0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002cf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cfc:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <BSP_LCD_MspInit+0xdc>)
 8002d04:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002d08:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2103      	movs	r1, #3
 8002d0e:	2058      	movs	r0, #88	; 0x58
 8002d10:	f000 fd07 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002d14:	2058      	movs	r0, #88	; 0x58
 8002d16:	f000 fd20 	bl	800375a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2103      	movs	r1, #3
 8002d1e:	205a      	movs	r0, #90	; 0x5a
 8002d20:	f000 fcff 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002d24:	205a      	movs	r0, #90	; 0x5a
 8002d26:	f000 fd18 	bl	800375a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2103      	movs	r1, #3
 8002d2e:	205c      	movs	r0, #92	; 0x5c
 8002d30:	f000 fcf7 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002d34:	205c      	movs	r0, #92	; 0x5c
 8002d36:	f000 fd10 	bl	800375a <HAL_NVIC_EnableIRQ>
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800

08002d48 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	603a      	str	r2, [r7, #0]
 8002d52:	80fb      	strh	r3, [r7, #6]
 8002d54:	460b      	mov	r3, r1
 8002d56:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <BSP_LCD_DrawPixel+0x44>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <BSP_LCD_DrawPixel+0x48>)
 8002d5e:	2134      	movs	r1, #52	; 0x34
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	335c      	adds	r3, #92	; 0x5c
 8002d68:	681c      	ldr	r4, [r3, #0]
 8002d6a:	88bd      	ldrh	r5, [r7, #4]
 8002d6c:	f7ff fd20 	bl	80027b0 <BSP_LCD_GetXSize>
 8002d70:	4603      	mov	r3, r0
 8002d72:	fb03 f205 	mul.w	r2, r3, r5
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4423      	add	r3, r4
 8002d7e:	461a      	mov	r2, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8c:	200005f0 	.word	0x200005f0
 8002d90:	20000708 	.word	0x20000708

08002d94 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	603a      	str	r2, [r7, #0]
 8002d9e:	80fb      	strh	r3, [r7, #6]
 8002da0:	460b      	mov	r3, r1
 8002da2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <DrawChar+0x168>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4953      	ldr	r1, [pc, #332]	; (8002f00 <DrawChar+0x16c>)
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	88db      	ldrh	r3, [r3, #6]
 8002dc2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002dc4:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <DrawChar+0x168>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	494d      	ldr	r1, [pc, #308]	; (8002f00 <DrawChar+0x16c>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	889b      	ldrh	r3, [r3, #4]
 8002dda:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8002ddc:	8a3b      	ldrh	r3, [r7, #16]
 8002dde:	3307      	adds	r3, #7
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	da00      	bge.n	8002de6 <DrawChar+0x52>
 8002de4:	3307      	adds	r3, #7
 8002de6:	10db      	asrs	r3, r3, #3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8a3b      	ldrh	r3, [r7, #16]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e076      	b.n	8002eea <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002dfc:	8a3b      	ldrh	r3, [r7, #16]
 8002dfe:	3307      	adds	r3, #7
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	da00      	bge.n	8002e06 <DrawChar+0x72>
 8002e04:	3307      	adds	r3, #7
 8002e06:	10db      	asrs	r3, r3, #3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fb03 f302 	mul.w	r3, r3, r2
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002e16:	8a3b      	ldrh	r3, [r7, #16]
 8002e18:	3307      	adds	r3, #7
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da00      	bge.n	8002e20 <DrawChar+0x8c>
 8002e1e:	3307      	adds	r3, #7
 8002e20:	10db      	asrs	r3, r3, #3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d002      	beq.n	8002e2c <DrawChar+0x98>
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d004      	beq.n	8002e34 <DrawChar+0xa0>
 8002e2a:	e00c      	b.n	8002e46 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]
      break;
 8002e32:	e016      	b.n	8002e62 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	3201      	adds	r2, #1
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
      break;
 8002e44:	e00d      	b.n	8002e62 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	041a      	lsls	r2, r3, #16
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	4313      	orrs	r3, r2
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	3202      	adds	r2, #2
 8002e5a:	7812      	ldrb	r2, [r2, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
      break;
 8002e60:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e036      	b.n	8002ed6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002e68:	8a3a      	ldrh	r2, [r7, #16]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	1ad2      	subs	r2, r2, r3
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	4413      	add	r3, r2
 8002e72:	3b01      	subs	r3, #1
 8002e74:	2201      	movs	r2, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b298      	uxth	r0, r3
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <DrawChar+0x168>)
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	491b      	ldr	r1, [pc, #108]	; (8002f00 <DrawChar+0x16c>)
 8002e94:	4613      	mov	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	88bb      	ldrh	r3, [r7, #4]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7ff ff50 	bl	8002d48 <BSP_LCD_DrawPixel>
 8002ea8:	e012      	b.n	8002ed0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	b298      	uxth	r0, r3
 8002eb4:	4b11      	ldr	r3, [pc, #68]	; (8002efc <DrawChar+0x168>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4911      	ldr	r1, [pc, #68]	; (8002f00 <DrawChar+0x16c>)
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	88bb      	ldrh	r3, [r7, #4]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f7ff ff3c 	bl	8002d48 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	8a3b      	ldrh	r3, [r7, #16]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3c4      	bcc.n	8002e68 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002ede:	88bb      	ldrh	r3, [r7, #4]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	8a7b      	ldrh	r3, [r7, #18]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d384      	bcc.n	8002dfc <DrawChar+0x68>
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200005f0 	.word	0x200005f0
 8002f00:	200005f4 	.word	0x200005f4

08002f04 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <LL_FillBuffer+0x68>)
 8002f14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f18:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <LL_FillBuffer+0x68>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8002f20:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <LL_FillBuffer+0x68>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <LL_FillBuffer+0x68>)
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <LL_FillBuffer+0x6c>)
 8002f2a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 8002f2c:	480f      	ldr	r0, [pc, #60]	; (8002f6c <LL_FillBuffer+0x68>)
 8002f2e:	f000 fdeb 	bl	8003b08 <HAL_DMA2D_Init>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	480c      	ldr	r0, [pc, #48]	; (8002f6c <LL_FillBuffer+0x68>)
 8002f3c:	f000 ff4c 	bl	8003dd8 <HAL_DMA2D_ConfigLayer>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10e      	bne.n	8002f64 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69f9      	ldr	r1, [r7, #28]
 8002f50:	4806      	ldr	r0, [pc, #24]	; (8002f6c <LL_FillBuffer+0x68>)
 8002f52:	f000 fe2c 	bl	8003bae <HAL_DMA2D_Start>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d103      	bne.n	8002f64 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 8002f5c:	210a      	movs	r1, #10
 8002f5e:	4803      	ldr	r0, [pc, #12]	; (8002f6c <LL_FillBuffer+0x68>)
 8002f60:	f000 fe50 	bl	8003c04 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200007cc 	.word	0x200007cc
 8002f70:	4002b000 	.word	0x4002b000

08002f74 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002f7a:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <BSP_SDRAM_Init+0xb0>)
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <BSP_SDRAM_Init+0xb4>)
 8002f80:	2202      	movs	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002f84:	4b28      	ldr	r3, [pc, #160]	; (8003028 <BSP_SDRAM_Init+0xb4>)
 8002f86:	2207      	movs	r2, #7
 8002f88:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <BSP_SDRAM_Init+0xb4>)
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <BSP_SDRAM_Init+0xb4>)
 8002f92:	2207      	movs	r2, #7
 8002f94:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <BSP_SDRAM_Init+0xb4>)
 8002f98:	2202      	movs	r2, #2
 8002f9a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	; (8003028 <BSP_SDRAM_Init+0xb4>)
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <BSP_SDRAM_Init+0xb4>)
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002fae:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002fba:	4b19      	ldr	r3, [pc, #100]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fc2:	2240      	movs	r2, #64	; 0x40
 8002fc4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fc8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002fcc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fda:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 8002fea:	2100      	movs	r1, #0
 8002fec:	480c      	ldr	r0, [pc, #48]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002fee:	f000 f87f 	bl	80030f0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002ff2:	490d      	ldr	r1, [pc, #52]	; (8003028 <BSP_SDRAM_Init+0xb4>)
 8002ff4:	480a      	ldr	r0, [pc, #40]	; (8003020 <BSP_SDRAM_Init+0xac>)
 8002ff6:	f003 fbc5 	bl	8006784 <HAL_SDRAM_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <BSP_SDRAM_Init+0xb8>)
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	e002      	b.n	800300e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <BSP_SDRAM_Init+0xb8>)
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800300e:	f240 5069 	movw	r0, #1385	; 0x569
 8003012:	f000 f80d 	bl	8003030 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <BSP_SDRAM_Init+0xb8>)
 8003018:	781b      	ldrb	r3, [r3, #0]
}
 800301a:	4618      	mov	r0, r3
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000648 	.word	0x20000648
 8003024:	a0000140 	.word	0xa0000140
 8003028:	2000067c 	.word	0x2000067c
 800302c:	20000014 	.word	0x20000014

08003030 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003044:	2210      	movs	r2, #16
 8003046:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800304a:	2201      	movs	r2, #1
 800304c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003058:	4923      	ldr	r1, [pc, #140]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800305a:	4824      	ldr	r0, [pc, #144]	; (80030ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 800305c:	f003 fbd0 	bl	8006800 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003060:	2001      	movs	r0, #1
 8003062:	f000 fa61 	bl	8003528 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003068:	2202      	movs	r2, #2
 800306a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800306e:	2210      	movs	r2, #16
 8003070:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003074:	2201      	movs	r2, #1
 8003076:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800307e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003082:	4919      	ldr	r1, [pc, #100]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003084:	4819      	ldr	r0, [pc, #100]	; (80030ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003086:	f003 fbbb 	bl	8006800 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800308a:	4b17      	ldr	r3, [pc, #92]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800308c:	2203      	movs	r2, #3
 800308e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003092:	2210      	movs	r2, #16
 8003094:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003098:	2208      	movs	r2, #8
 800309a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800309c:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80030a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030a6:	4910      	ldr	r1, [pc, #64]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030a8:	4810      	ldr	r0, [pc, #64]	; (80030ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030aa:	f003 fba9 	bl	8006800 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80030ae:	f44f 730c 	mov.w	r3, #560	; 0x230
 80030b2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80030b4:	4b0c      	ldr	r3, [pc, #48]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030b6:	2204      	movs	r2, #4
 80030b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030bc:	2210      	movs	r2, #16
 80030be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ca:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80030cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d0:	4905      	ldr	r1, [pc, #20]	; (80030e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030d2:	4806      	ldr	r0, [pc, #24]	; (80030ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030d4:	f003 fb94 	bl	8006800 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4804      	ldr	r0, [pc, #16]	; (80030ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030dc:	f003 fbbb 	bl	8006856 <HAL_SDRAM_ProgramRefreshRate>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000698 	.word	0x20000698
 80030ec:	20000648 	.word	0x20000648

080030f0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b090      	sub	sp, #64	; 0x40
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8104 	beq.w	800330a <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
 8003106:	4b83      	ldr	r3, [pc, #524]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	4a82      	ldr	r2, [pc, #520]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6393      	str	r3, [r2, #56]	; 0x38
 8003112:	4b80      	ldr	r3, [pc, #512]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	4b7c      	ldr	r3, [pc, #496]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a7b      	ldr	r2, [pc, #492]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b79      	ldr	r3, [pc, #484]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	4b75      	ldr	r3, [pc, #468]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a74      	ldr	r2, [pc, #464]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b72      	ldr	r3, [pc, #456]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	623b      	str	r3, [r7, #32]
 8003154:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	4b6e      	ldr	r3, [pc, #440]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a6d      	ldr	r2, [pc, #436]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b6b      	ldr	r3, [pc, #428]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a66      	ldr	r2, [pc, #408]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 800317c:	f043 0310 	orr.w	r3, r3, #16
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b64      	ldr	r3, [pc, #400]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	4b60      	ldr	r3, [pc, #384]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a5f      	ldr	r2, [pc, #380]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 8003198:	f043 0320 	orr.w	r3, r3, #32
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	4b59      	ldr	r3, [pc, #356]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a58      	ldr	r2, [pc, #352]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	4b56      	ldr	r3, [pc, #344]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b52      	ldr	r3, [pc, #328]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a51      	ldr	r2, [pc, #324]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b4f      	ldr	r3, [pc, #316]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b48      	ldr	r3, [pc, #288]	; (8003314 <BSP_SDRAM_MspInit+0x224>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8003202:	2301      	movs	r3, #1
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003206:	2302      	movs	r3, #2
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800320a:	230c      	movs	r3, #12
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 800320e:	2301      	movs	r3, #1
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003216:	4619      	mov	r1, r3
 8003218:	483f      	ldr	r0, [pc, #252]	; (8003318 <BSP_SDRAM_MspInit+0x228>)
 800321a:	f001 ff61 	bl	80050e0 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800321e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003228:	4619      	mov	r1, r3
 800322a:	483c      	ldr	r0, [pc, #240]	; (800331c <BSP_SDRAM_MspInit+0x22c>)
 800322c:	f001 ff58 	bl	80050e0 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003230:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800323a:	4619      	mov	r1, r3
 800323c:	4838      	ldr	r0, [pc, #224]	; (8003320 <BSP_SDRAM_MspInit+0x230>)
 800323e:	f001 ff4f 	bl	80050e0 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003242:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800324c:	4619      	mov	r1, r3
 800324e:	4835      	ldr	r0, [pc, #212]	; (8003324 <BSP_SDRAM_MspInit+0x234>)
 8003250:	f001 ff46 	bl	80050e0 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003254:	f248 1333 	movw	r3, #33075	; 0x8133
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800325a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800325e:	4619      	mov	r1, r3
 8003260:	4831      	ldr	r0, [pc, #196]	; (8003328 <BSP_SDRAM_MspInit+0x238>)
 8003262:	f001 ff3d 	bl	80050e0 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8003266:	f64f 730c 	movw	r3, #65292	; 0xff0c
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800326c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003270:	4619      	mov	r1, r3
 8003272:	482e      	ldr	r0, [pc, #184]	; (800332c <BSP_SDRAM_MspInit+0x23c>)
 8003274:	f001 ff34 	bl	80050e0 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003278:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800327e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003282:	4619      	mov	r1, r3
 8003284:	482a      	ldr	r0, [pc, #168]	; (8003330 <BSP_SDRAM_MspInit+0x240>)
 8003286:	f001 ff2b 	bl	80050e0 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800328a:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 800328c:	2200      	movs	r2, #0
 800328e:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003290:	4b28      	ldr	r3, [pc, #160]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003296:	4b27      	ldr	r3, [pc, #156]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 8003298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800329c:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800329e:	4b25      	ldr	r3, [pc, #148]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032a4:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ac:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032b4:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 80032b6:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032c2:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032cc:	2203      	movs	r2, #3
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 80032dc:	4b15      	ldr	r3, [pc, #84]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032de:	4a16      	ldr	r2, [pc, #88]	; (8003338 <BSP_SDRAM_MspInit+0x248>)
 80032e0:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 80032ee:	4811      	ldr	r0, [pc, #68]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032f0:	f000 fafc 	bl	80038ec <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 80032f4:	480f      	ldr	r0, [pc, #60]	; (8003334 <BSP_SDRAM_MspInit+0x244>)
 80032f6:	f000 fa4b 	bl	8003790 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2105      	movs	r1, #5
 80032fe:	2038      	movs	r0, #56	; 0x38
 8003300:	f000 fa0f 	bl	8003722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003304:	2038      	movs	r0, #56	; 0x38
 8003306:	f000 fa28 	bl	800375a <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800330a:	bf00      	nop
 800330c:	3740      	adds	r7, #64	; 0x40
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40020800 	.word	0x40020800
 800331c:	40020c00 	.word	0x40020c00
 8003320:	40021000 	.word	0x40021000
 8003324:	40021400 	.word	0x40021400
 8003328:	40021800 	.word	0x40021800
 800332c:	40021c00 	.word	0x40021c00
 8003330:	40022000 	.word	0x40022000
 8003334:	200006a8 	.word	0x200006a8
 8003338:	40026410 	.word	0x40026410

0800333c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334e:	e7fe      	b.n	800334e <HardFault_Handler+0x4>

08003350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <MemManage_Handler+0x4>

08003356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <BusFault_Handler+0x4>

0800335c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <UsageFault_Handler+0x4>

08003362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <SystemInit+0x28>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <SystemInit+0x28>)
 80033a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <SystemInit+0x28>)
 80033b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033b6:	609a      	str	r2, [r3, #8]
#endif
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003400 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033ce:	e003      	b.n	80033d8 <LoopCopyDataInit>

080033d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033d6:	3104      	adds	r1, #4

080033d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033d8:	480b      	ldr	r0, [pc, #44]	; (8003408 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033da:	4b0c      	ldr	r3, [pc, #48]	; (800340c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033e0:	d3f6      	bcc.n	80033d0 <CopyDataInit>
  ldr  r2, =_sbss
 80033e2:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033e4:	e002      	b.n	80033ec <LoopFillZerobss>

080033e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033e8:	f842 3b04 	str.w	r3, [r2], #4

080033ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033f0:	d3f9      	bcc.n	80033e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033f2:	f7ff ffd3 	bl	800339c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033f6:	f003 ff3b 	bl	8007270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033fa:	f7fe fba9 	bl	8001b50 <main>
  bx  lr    
 80033fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003400:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003404:	08009270 	.word	0x08009270
  ldr  r0, =_sdata
 8003408:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800340c:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8003410:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8003414:	2000082c 	.word	0x2000082c

08003418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003418:	e7fe      	b.n	8003418 <ADC_IRQHandler>
	...

0800341c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <HAL_Init+0x40>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0d      	ldr	r2, [pc, #52]	; (800345c <HAL_Init+0x40>)
 8003426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800342a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_Init+0x40>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a0a      	ldr	r2, [pc, #40]	; (800345c <HAL_Init+0x40>)
 8003432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_Init+0x40>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <HAL_Init+0x40>)
 800343e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003444:	2003      	movs	r0, #3
 8003446:	f000 f961 	bl	800370c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800344a:	2000      	movs	r0, #0
 800344c:	f000 f83c 	bl	80034c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003450:	f7fe fc3a 	bl	8001cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40023c00 	.word	0x40023c00

08003460 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <HAL_DeInit+0x54>)
 8003466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_DeInit+0x54>)
 800346e:	2200      	movs	r2, #0
 8003470:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_DeInit+0x54>)
 8003474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_DeInit+0x54>)
 800347c:	2200      	movs	r2, #0
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <HAL_DeInit+0x54>)
 8003482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003486:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_DeInit+0x54>)
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_DeInit+0x54>)
 8003490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003494:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_DeInit+0x54>)
 8003498:	2200      	movs	r2, #0
 800349a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_DeInit+0x54>)
 800349e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034a2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_DeInit+0x54>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80034aa:	f000 f805 	bl	80034b8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_InitTick+0x54>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_InitTick+0x58>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4619      	mov	r1, r3
 80034da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034de:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f945 	bl	8003776 <HAL_SYSTICK_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00e      	b.n	8003514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d80a      	bhi.n	8003512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034fc:	2200      	movs	r2, #0
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003504:	f000 f90d 	bl	8003722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003508:	4a06      	ldr	r2, [pc, #24]	; (8003524 <HAL_InitTick+0x5c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000018 	.word	0x20000018
 8003520:	20000020 	.word	0x20000020
 8003524:	2000001c 	.word	0x2000001c

08003528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7fd fd04 	bl	8000f3c <HAL_GetTick>
 8003534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003540:	d005      	beq.n	800354e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_Delay+0x40>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800354e:	bf00      	nop
 8003550:	f7fd fcf4 	bl	8000f3c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	d8f7      	bhi.n	8003550 <HAL_Delay+0x28>
  {
  }
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000020 	.word	0x20000020

0800356c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003588:	4013      	ands	r3, r2
 800358a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359e:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <__NVIC_SetPriorityGrouping+0x44>)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	60d3      	str	r3, [r2, #12]
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <__NVIC_GetPriorityGrouping+0x18>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	f003 0307 	and.w	r3, r3, #7
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	db0b      	blt.n	80035fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	f003 021f 	and.w	r2, r3, #31
 80035e8:	4907      	ldr	r1, [pc, #28]	; (8003608 <__NVIC_EnableIRQ+0x38>)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2001      	movs	r0, #1
 80035f2:	fa00 f202 	lsl.w	r2, r0, r2
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000e100 	.word	0xe000e100

0800360c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	6039      	str	r1, [r7, #0]
 8003616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	2b00      	cmp	r3, #0
 800361e:	db0a      	blt.n	8003636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	490c      	ldr	r1, [pc, #48]	; (8003658 <__NVIC_SetPriority+0x4c>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	0112      	lsls	r2, r2, #4
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	440b      	add	r3, r1
 8003630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003634:	e00a      	b.n	800364c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4908      	ldr	r1, [pc, #32]	; (800365c <__NVIC_SetPriority+0x50>)
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	3b04      	subs	r3, #4
 8003644:	0112      	lsls	r2, r2, #4
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	440b      	add	r3, r1
 800364a:	761a      	strb	r2, [r3, #24]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000e100 	.word	0xe000e100
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f1c3 0307 	rsb	r3, r3, #7
 800367a:	2b04      	cmp	r3, #4
 800367c:	bf28      	it	cs
 800367e:	2304      	movcs	r3, #4
 8003680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3304      	adds	r3, #4
 8003686:	2b06      	cmp	r3, #6
 8003688:	d902      	bls.n	8003690 <NVIC_EncodePriority+0x30>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3b03      	subs	r3, #3
 800368e:	e000      	b.n	8003692 <NVIC_EncodePriority+0x32>
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43da      	mvns	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	401a      	ands	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	43d9      	mvns	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	4313      	orrs	r3, r2
         );
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3724      	adds	r7, #36	; 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d8:	d301      	bcc.n	80036de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036da:	2301      	movs	r3, #1
 80036dc:	e00f      	b.n	80036fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <SysTick_Config+0x40>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e6:	210f      	movs	r1, #15
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036ec:	f7ff ff8e 	bl	800360c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <SysTick_Config+0x40>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <SysTick_Config+0x40>)
 80036f8:	2207      	movs	r2, #7
 80036fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000e010 	.word	0xe000e010

0800370c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff29 	bl	800356c <__NVIC_SetPriorityGrouping>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003734:	f7ff ff3e 	bl	80035b4 <__NVIC_GetPriorityGrouping>
 8003738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f7ff ff8e 	bl	8003660 <NVIC_EncodePriority>
 8003744:	4602      	mov	r2, r0
 8003746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff5d 	bl	800360c <__NVIC_SetPriority>
}
 8003752:	bf00      	nop
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff31 	bl	80035d0 <__NVIC_EnableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ffa2 	bl	80036c8 <SysTick_Config>
 8003784:	4603      	mov	r3, r0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7fd fbce 	bl	8000f3c <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e099      	b.n	80038e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037cc:	e00f      	b.n	80037ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ce:	f7fd fbb5 	bl	8000f3c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d908      	bls.n	80037ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2203      	movs	r2, #3
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e078      	b.n	80038e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e8      	bne.n	80037ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <HAL_DMA_Init+0x158>)
 8003808:	4013      	ands	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800381a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2b04      	cmp	r3, #4
 8003846:	d107      	bne.n	8003858 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	4313      	orrs	r3, r2
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	2b04      	cmp	r3, #4
 8003880:	d117      	bne.n	80038b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8bd 	bl	8003a14 <DMA_CheckFifoParam>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038ae:	2301      	movs	r3, #1
 80038b0:	e016      	b.n	80038e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f874 	bl	80039a8 <DMA_CalcBaseAndBitshift>
 80038c0:	4603      	mov	r3, r0
 80038c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	223f      	movs	r2, #63	; 0x3f
 80038ca:	409a      	lsls	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	f010803f 	.word	0xf010803f

080038ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e050      	b.n	80039a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d101      	bne.n	800390e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
 800390c:	e048      	b.n	80039a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2221      	movs	r2, #33	; 0x21
 800394c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f82a 	bl	80039a8 <DMA_CalcBaseAndBitshift>
 8003954:	4603      	mov	r3, r0
 8003956:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	223f      	movs	r2, #63	; 0x3f
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	3b10      	subs	r3, #16
 80039b8:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <DMA_CalcBaseAndBitshift+0x64>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039c2:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <DMA_CalcBaseAndBitshift+0x68>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d909      	bls.n	80039ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	1d1a      	adds	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	659a      	str	r2, [r3, #88]	; 0x58
 80039e8:	e007      	b.n	80039fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	aaaaaaab 	.word	0xaaaaaaab
 8003a10:	08009230 	.word	0x08009230

08003a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11f      	bne.n	8003a6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d855      	bhi.n	8003ae0 <DMA_CheckFifoParam+0xcc>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <DMA_CheckFifoParam+0x28>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a5f 	.word	0x08003a5f
 8003a44:	08003a4d 	.word	0x08003a4d
 8003a48:	08003ae1 	.word	0x08003ae1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d045      	beq.n	8003ae4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5c:	e042      	b.n	8003ae4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a66:	d13f      	bne.n	8003ae8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6c:	e03c      	b.n	8003ae8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a76:	d121      	bne.n	8003abc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d836      	bhi.n	8003aec <DMA_CheckFifoParam+0xd8>
 8003a7e:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <DMA_CheckFifoParam+0x70>)
 8003a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a84:	08003a95 	.word	0x08003a95
 8003a88:	08003a9b 	.word	0x08003a9b
 8003a8c:	08003a95 	.word	0x08003a95
 8003a90:	08003aad 	.word	0x08003aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      break;
 8003a98:	e02f      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d024      	beq.n	8003af0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aaa:	e021      	b.n	8003af0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ab4:	d11e      	bne.n	8003af4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aba:	e01b      	b.n	8003af4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <DMA_CheckFifoParam+0xb4>
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d003      	beq.n	8003ace <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ac6:	e018      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      break;
 8003acc:	e015      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00e      	beq.n	8003af8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ade:	e00b      	b.n	8003af8 <DMA_CheckFifoParam+0xe4>
      break;
 8003ae0:	bf00      	nop
 8003ae2:	e00a      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
      break;
 8003ae4:	bf00      	nop
 8003ae6:	e008      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
      break;
 8003ae8:	bf00      	nop
 8003aea:	e006      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
      break;
 8003aec:	bf00      	nop
 8003aee:	e004      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
      break;
 8003af0:	bf00      	nop
 8003af2:	e002      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
      break;   
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <DMA_CheckFifoParam+0xe6>
      break;
 8003af8:	bf00      	nop
    }
  } 
  
  return status; 
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e03b      	b.n	8003b92 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f833 	bl	8003b9a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	f023 0107 	bic.w	r1, r3, #7
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68d1      	ldr	r1, [r2, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b086      	sub	sp, #24
 8003bb2:	af02      	add	r7, sp, #8
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_DMA2D_Start+0x1c>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e018      	b.n	8003bfc <HAL_DMA2D_Start+0x4e>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f989 	bl	8003efc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d056      	beq.n	8003cce <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003c20:	f7fd f98c 	bl	8000f3c <HAL_GetTick>
 8003c24:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c26:	e04b      	b.n	8003cc0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d023      	beq.n	8003c82 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	f043 0202 	orr.w	r2, r3, #2
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2221      	movs	r2, #33	; 0x21
 8003c6c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2204      	movs	r2, #4
 8003c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0a5      	b.n	8003dce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c88:	d01a      	beq.n	8003cc0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003c8a:	f7fd f957 	bl	8000f3c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <HAL_DMA2D_PollForTransfer+0x9c>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10f      	bne.n	8003cc0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e086      	b.n	8003dce <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ac      	beq.n	8003c28 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d061      	beq.n	8003db4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cf0:	f7fd f924 	bl	8000f3c <HAL_GetTick>
 8003cf4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003cf6:	e056      	b.n	8003da6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02e      	beq.n	8003d68 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	f043 0202 	orr.w	r2, r3, #2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2229      	movs	r2, #41	; 0x29
 8003d52:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2204      	movs	r2, #4
 8003d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e032      	b.n	8003dce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d6e:	d01a      	beq.n	8003da6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003d70:	f7fd f8e4 	bl	8000f3c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d302      	bcc.n	8003d86 <HAL_DMA2D_PollForTransfer+0x182>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	f043 0220 	orr.w	r2, r3, #32
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2203      	movs	r2, #3
 8003d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e013      	b.n	8003dce <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0a1      	beq.n	8003cf8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2212      	movs	r2, #18
 8003dba:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_DMA2D_ConfigLayer+0x20>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e079      	b.n	8003eec <HAL_DMA2D_ConfigLayer+0x114>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003e22:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_DMA2D_ConfigLayer+0x120>)
 8003e24:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b0a      	cmp	r3, #10
 8003e2c:	d003      	beq.n	8003e36 <HAL_DMA2D_ConfigLayer+0x5e>
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b09      	cmp	r3, #9
 8003e34:	d107      	bne.n	8003e46 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e005      	b.n	8003e52 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	061b      	lsls	r3, r3, #24
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d120      	bne.n	8003e9a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	ea02 0103 	and.w	r1, r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b0a      	cmp	r3, #10
 8003e80:	d003      	beq.n	8003e8a <HAL_DMA2D_ConfigLayer+0xb2>
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b09      	cmp	r3, #9
 8003e88:	d127      	bne.n	8003eda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28
 8003e98:	e01f      	b.n	8003eda <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	ea02 0103 	and.w	r1, r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b0a      	cmp	r3, #10
 8003ec2:	d003      	beq.n	8003ecc <HAL_DMA2D_ConfigLayer+0xf4>
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b09      	cmp	r3, #9
 8003eca:	d106      	bne.n	8003eda <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ed8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	ff03000f 	.word	0xff03000f

08003efc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b08b      	sub	sp, #44	; 0x2c
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	041a      	lsls	r2, r3, #16
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f34:	d174      	bne.n	8004020 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003f3c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f44:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f4c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d108      	bne.n	8003f6e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	e053      	b.n	8004016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d106      	bne.n	8003f84 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
 8003f82:	e048      	b.n	8004016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d111      	bne.n	8003fb0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	0cdb      	lsrs	r3, r3, #19
 8003f90:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	0a9b      	lsrs	r3, r3, #10
 8003f96:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	08db      	lsrs	r3, r3, #3
 8003f9c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	02db      	lsls	r3, r3, #11
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	e032      	b.n	8004016 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d117      	bne.n	8003fe8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	0fdb      	lsrs	r3, r3, #31
 8003fbc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	0cdb      	lsrs	r3, r3, #19
 8003fc2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	0adb      	lsrs	r3, r3, #11
 8003fc8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	029b      	lsls	r3, r3, #10
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	03db      	lsls	r3, r3, #15
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe6:	e016      	b.n	8004016 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	0f1b      	lsrs	r3, r3, #28
 8003fec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	0d1b      	lsrs	r3, r3, #20
 8003ff2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	0b1b      	lsrs	r3, r3, #12
 8003ff8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	011a      	lsls	r2, r3, #4
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	431a      	orrs	r2, r3
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	031b      	lsls	r3, r3, #12
 800400e:	4313      	orrs	r3, r2
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800401e:	e003      	b.n	8004028 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	60da      	str	r2, [r3, #12]
}
 8004028:	bf00      	nop
 800402a:	372c      	adds	r7, #44	; 0x2c
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	019a      	lsls	r2, r3, #6
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	431a      	orrs	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	021b      	lsls	r3, r3, #8
 800404e:	431a      	orrs	r2, r3
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004074:	f7fc ff62 	bl	8000f3c <HAL_GetTick>
 8004078:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800407a:	e009      	b.n	8004090 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800407c:	f7fc ff5e 	bl	8000f3c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408a:	d901      	bls.n	8004090 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e015      	b.n	80040bc <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ee      	beq.n	800407c <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	019a      	lsls	r2, r3, #6
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	ea42 0103 	orr.w	r1, r2, r3
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	041a      	lsls	r2, r3, #16
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e108      	b.n	80042ea <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7c5b      	ldrb	r3, [r3, #17]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f97c 	bl	80043e0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2203      	movs	r2, #3
 80040ec:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004102:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800410e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004116:	f7fc ff11 	bl	8000f3c <HAL_GetTick>
 800411a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800411c:	e009      	b.n	8004132 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800411e:	f7fc ff0d 	bl	8000f3c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800412c:	d901      	bls.n	8004132 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0db      	b.n	80042ea <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800413a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0ed      	beq.n	800411e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8004152:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8004156:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	009a      	lsls	r2, r3, #2
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	02db      	lsls	r3, r3, #11
 800416e:	431a      	orrs	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041aa:	f7fc fec7 	bl	8000f3c <HAL_GetTick>
 80041ae:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80041b0:	e009      	b.n	80041c6 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80041b2:	f7fc fec3 	bl	8000f3c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c0:	d901      	bls.n	80041c6 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e091      	b.n	80042ea <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ed      	beq.n	80041b2 <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0206 	orr.w	r2, r2, #6
 80041e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0203 	bic.w	r2, r2, #3
 80041fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0203 	bic.w	r2, r2, #3
 8004228:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004250:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6899      	ldr	r1, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_DSI_Init+0x1ae>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	e000      	b.n	8004274 <HAL_DSI_Init+0x1b0>
 8004272:	2301      	movs	r3, #1
 8004274:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <HAL_DSI_Init+0x230>)
 800427a:	fb02 f203 	mul.w	r2, r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	409a      	lsls	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80042aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	430a      	orrs	r2, r1
 80042be:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	003d0900 	.word	0x003d0900

080042f8 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e066      	b.n	80043d8 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2203      	movs	r2, #3
 800430e:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	605a      	str	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0206 	bic.w	r2, r2, #6
 800436a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80043aa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80043b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f818 	bl	80043f4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7c1b      	ldrb	r3, [r3, #16]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_DSI_ConfigVideoMode+0x16>
 800441a:	2302      	movs	r3, #2
 800441c:	e1f6      	b.n	800480c <HAL_DSI_ConfigVideoMode+0x404>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0203 	bic.w	r2, r2, #3
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800447c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800449e:	f023 031f 	bic.w	r3, r3, #31
 80044a2:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80044c4:	f023 031f 	bic.w	r3, r3, #31
 80044c8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0203 	bic.w	r2, r2, #3
 80044ea:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68d9      	ldr	r1, [r3, #12]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0207 	bic.w	r2, r2, #7
 800450c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6959      	ldr	r1, [r3, #20]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	431a      	orrs	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 020f 	bic.w	r2, r2, #15
 800453a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6919      	ldr	r1, [r3, #16]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 020e 	bic.w	r2, r2, #14
 800455e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	005a      	lsls	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d110      	bne.n	80045a4 <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004590:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6919      	ldr	r1, [r3, #16]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045b2:	f023 030f 	bic.w	r3, r3, #15
 80045b6:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045d8:	f023 030f 	bic.w	r3, r3, #15
 80045dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004602:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004624:	f023 0303 	bic.w	r3, r3, #3
 8004628:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004670:	f023 0303 	bic.w	r3, r3, #3
 8004674:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004696:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800469a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80046de:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6999      	ldr	r1, [r3, #24]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ea:	041a      	lsls	r2, r3, #16
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004702:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6999      	ldr	r1, [r3, #24]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7c1b      	ldrb	r3, [r3, #16]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_DSI_ConfigPhyTimer+0x16>
 800482a:	2302      	movs	r3, #2
 800482c:	e058      	b.n	80048e0 <HAL_DSI_ConfigPhyTimer+0xc8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4293      	cmp	r3, r2
 800483e:	bf38      	it	cc
 8004840:	4613      	movcc	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004854:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	041a      	lsls	r2, r3, #16
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004882:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80048bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	021a      	lsls	r2, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	7c1b      	ldrb	r3, [r3, #16]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_DSI_Start+0x14>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e02b      	b.n	8004958 <HAL_DSI_Start+0x6c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0208 	orr.w	r2, r2, #8
 800493c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	7c1b      	ldrb	r3, [r3, #16]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_DSI_ShortWrite+0x1a>
 800497a:	2302      	movs	r3, #2
 800497c:	e010      	b.n	80049a0 <HAL_DSI_ShortWrite+0x3c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff fb69 	bl	8004066 <DSI_ShortWrite>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	741a      	strb	r2, [r3, #16]

  return status;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	; 0x30
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	7c1b      	ldrb	r3, [r3, #16]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_DSI_LongWrite+0x1e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e084      	b.n	8004ad0 <HAL_DSI_LongWrite+0x128>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80049cc:	f7fc fab6 	bl	8000f3c <HAL_GetTick>
 80049d0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80049d2:	e00c      	b.n	80049ee <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80049d4:	f7fc fab2 	bl	8000f3c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e2:	d904      	bls.n	80049ee <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e070      	b.n	8004ad0 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0eb      	beq.n	80049d4 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80049fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fe:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	bf28      	it	cs
 8004a06:	2303      	movcs	r3, #3
 8004a08:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	623b      	str	r3, [r7, #32]
 8004a0e:	e00f      	b.n	8004a30 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	4413      	add	r3, r2
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	623b      	str	r3, [r7, #32]
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d3eb      	bcc.n	8004a10 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004a50:	e028      	b.n	8004aa4 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	bf28      	it	cs
 8004a58:	2304      	movcs	r3, #4
 8004a5a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004a60:	2300      	movs	r3, #0
 8004a62:	623b      	str	r3, [r7, #32]
 8004a64:	e00e      	b.n	8004a84 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	3301      	adds	r3, #1
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3ec      	bcc.n	8004a66 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1d3      	bne.n	8004a52 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004ab2:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	f7ff fab6 	bl	8004034 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3728      	adds	r7, #40	; 0x28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <HAL_FLASH_Program+0xa0>)
 8004aec:	7e1b      	ldrb	r3, [r3, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_FLASH_Program+0x1e>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e03b      	b.n	8004b6e <HAL_FLASH_Program+0x96>
 8004af6:	4b20      	ldr	r3, [pc, #128]	; (8004b78 <HAL_FLASH_Program+0xa0>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004afc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b00:	f000 f870 	bl	8004be4 <FLASH_WaitForLastOperation>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d12b      	bne.n	8004b66 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004b14:	783b      	ldrb	r3, [r7, #0]
 8004b16:	4619      	mov	r1, r3
 8004b18:	68b8      	ldr	r0, [r7, #8]
 8004b1a:	f000 f919 	bl	8004d50 <FLASH_Program_Byte>
 8004b1e:	e016      	b.n	8004b4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d105      	bne.n	8004b32 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004b26:	883b      	ldrh	r3, [r7, #0]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	f000 f8ec 	bl	8004d08 <FLASH_Program_HalfWord>
 8004b30:	e00d      	b.n	8004b4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d105      	bne.n	8004b44 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68b8      	ldr	r0, [r7, #8]
 8004b3e:	f000 f8c1 	bl	8004cc4 <FLASH_Program_Word>
 8004b42:	e004      	b.n	8004b4e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b48:	68b8      	ldr	r0, [r7, #8]
 8004b4a:	f000 f88b 	bl	8004c64 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b52:	f000 f847 	bl	8004be4 <FLASH_WaitForLastOperation>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <HAL_FLASH_Program+0xa4>)
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	4a07      	ldr	r2, [pc, #28]	; (8004b7c <HAL_FLASH_Program+0xa4>)
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HAL_FLASH_Program+0xa0>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	2000080c 	.word	0x2000080c
 8004b7c:	40023c00 	.word	0x40023c00

08004b80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_FLASH_Unlock+0x38>)
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da0b      	bge.n	8004baa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <HAL_FLASH_Unlock+0x38>)
 8004b94:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <HAL_FLASH_Unlock+0x3c>)
 8004b96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <HAL_FLASH_Unlock+0x38>)
 8004b9a:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <HAL_FLASH_Unlock+0x40>)
 8004b9c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_FLASH_Unlock+0x38>)
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da01      	bge.n	8004baa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004baa:	79fb      	ldrb	r3, [r7, #7]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40023c00 	.word	0x40023c00
 8004bbc:	45670123 	.word	0x45670123
 8004bc0:	cdef89ab 	.word	0xcdef89ab

08004bc4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_FLASH_Lock+0x1c>)
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <HAL_FLASH_Lock+0x1c>)
 8004bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bd2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40023c00 	.word	0x40023c00

08004be4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <FLASH_WaitForLastOperation+0x78>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bf6:	f7fc f9a1 	bl	8000f3c <HAL_GetTick>
 8004bfa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004bfc:	e010      	b.n	8004c20 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c04:	d00c      	beq.n	8004c20 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <FLASH_WaitForLastOperation+0x38>
 8004c0c:	f7fc f996 	bl	8000f3c <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d201      	bcs.n	8004c20 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e019      	b.n	8004c54 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <FLASH_WaitForLastOperation+0x7c>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e8      	bne.n	8004bfe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <FLASH_WaitForLastOperation+0x7c>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <FLASH_WaitForLastOperation+0x7c>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <FLASH_WaitForLastOperation+0x7c>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c4a:	f000 f8a3 	bl	8004d94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
  
}  
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	2000080c 	.word	0x2000080c
 8004c60:	40023c00 	.word	0x40023c00

08004c64 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c64:	b490      	push	{r4, r7}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <FLASH_Program_DoubleWord+0x5c>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	4a12      	ldr	r2, [pc, #72]	; (8004cc0 <FLASH_Program_DoubleWord+0x5c>)
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <FLASH_Program_DoubleWord+0x5c>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	4a0f      	ldr	r2, [pc, #60]	; (8004cc0 <FLASH_Program_DoubleWord+0x5c>)
 8004c82:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c88:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <FLASH_Program_DoubleWord+0x5c>)
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <FLASH_Program_DoubleWord+0x5c>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004c9a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004c9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	f04f 0400 	mov.w	r4, #0
 8004caa:	0013      	movs	r3, r2
 8004cac:	2400      	movs	r4, #0
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	3204      	adds	r2, #4
 8004cb2:	6013      	str	r3, [r2, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc90      	pop	{r4, r7}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40023c00 	.word	0x40023c00

08004cc4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <FLASH_Program_Word+0x40>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <FLASH_Program_Word+0x40>)
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <FLASH_Program_Word+0x40>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <FLASH_Program_Word+0x40>)
 8004ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ce4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ce6:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <FLASH_Program_Word+0x40>)
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <FLASH_Program_Word+0x40>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	601a      	str	r2, [r3, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40023c00 	.word	0x40023c00

08004d08 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <FLASH_Program_HalfWord+0x44>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <FLASH_Program_HalfWord+0x44>)
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <FLASH_Program_HalfWord+0x44>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <FLASH_Program_HalfWord+0x44>)
 8004d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <FLASH_Program_HalfWord+0x44>)
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	4a06      	ldr	r2, [pc, #24]	; (8004d4c <FLASH_Program_HalfWord+0x44>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	887a      	ldrh	r2, [r7, #2]
 8004d3c:	801a      	strh	r2, [r3, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00

08004d50 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <FLASH_Program_Byte+0x40>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	4a0b      	ldr	r2, [pc, #44]	; (8004d90 <FLASH_Program_Byte+0x40>)
 8004d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <FLASH_Program_Byte+0x40>)
 8004d6a:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <FLASH_Program_Byte+0x40>)
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <FLASH_Program_Byte+0x40>)
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	4a06      	ldr	r2, [pc, #24]	; (8004d90 <FLASH_Program_Byte+0x40>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	701a      	strb	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40023c00 	.word	0x40023c00

08004d94 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d98:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004da4:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f043 0310 	orr.w	r3, r3, #16
 8004dac:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004dae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004db0:	4b29      	ldr	r3, [pc, #164]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004db2:	2210      	movs	r2, #16
 8004db4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004db6:	4b28      	ldr	r3, [pc, #160]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d008      	beq.n	8004dd4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f043 0308 	orr.w	r3, r3, #8
 8004dca:	4a24      	ldr	r2, [pc, #144]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004dcc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004dce:	4b22      	ldr	r3, [pc, #136]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004dd4:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f043 0304 	orr.w	r3, r3, #4
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004dea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004dec:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004dee:	2240      	movs	r2, #64	; 0x40
 8004df0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004df2:	4b19      	ldr	r3, [pc, #100]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004dfe:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f043 0302 	orr.w	r3, r3, #2
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004e08:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004e0c:	2280      	movs	r2, #128	; 0x80
 8004e0e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004e10:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	4a0d      	ldr	r2, [pc, #52]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004e26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004e28:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e2e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004e30:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004e3c:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f043 0320 	orr.w	r3, r3, #32
 8004e44:	4a05      	ldr	r2, [pc, #20]	; (8004e5c <FLASH_SetErrorCode+0xc8>)
 8004e46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <FLASH_SetErrorCode+0xc4>)
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	60da      	str	r2, [r3, #12]
  }
}
 8004e4e:	bf00      	nop
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40023c00 	.word	0x40023c00
 8004e5c:	2000080c 	.word	0x2000080c

08004e60 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e72:	4b32      	ldr	r3, [pc, #200]	; (8004f3c <HAL_FLASHEx_Erase+0xdc>)
 8004e74:	7e1b      	ldrb	r3, [r3, #24]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_FLASHEx_Erase+0x1e>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e05a      	b.n	8004f34 <HAL_FLASHEx_Erase+0xd4>
 8004e7e:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <HAL_FLASHEx_Erase+0xdc>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e88:	f7ff feac 	bl	8004be4 <FLASH_WaitForLastOperation>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d14a      	bne.n	8004f2c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e9c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d117      	bne.n	8004ed6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f000 f846 	bl	8004f44 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ebc:	f7ff fe92 	bl	8004be4 <FLASH_WaitForLastOperation>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004ec4:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <HAL_FLASHEx_Erase+0xe0>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <HAL_FLASHEx_Erase+0xe0>)
 8004eca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ece:	f023 0304 	bic.w	r3, r3, #4
 8004ed2:	6113      	str	r3, [r2, #16]
 8004ed4:	e028      	b.n	8004f28 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	e01c      	b.n	8004f18 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	68b8      	ldr	r0, [r7, #8]
 8004ee8:	f000 f866 	bl	8004fb8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ef0:	f7ff fe78 	bl	8004be4 <FLASH_WaitForLastOperation>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <HAL_FLASHEx_Erase+0xe0>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <HAL_FLASHEx_Erase+0xe0>)
 8004efe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004f02:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	601a      	str	r2, [r3, #0]
          break;
 8004f10:	e00a      	b.n	8004f28 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4413      	add	r3, r2
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d3da      	bcc.n	8004ede <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004f28:	f000 f894 	bl	8005054 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <HAL_FLASHEx_Erase+0xdc>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	761a      	strb	r2, [r3, #24]

  return status;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	2000080c 	.word	0x2000080c
 8004f40:	40023c00 	.word	0x40023c00

08004f44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	6039      	str	r1, [r7, #0]
 8004f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f50:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5a:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d108      	bne.n	8004f74 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8004f62:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6c:	f043 0304 	orr.w	r3, r3, #4
 8004f70:	6113      	str	r3, [r2, #16]
 8004f72:	e00f      	b.n	8004f94 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d106      	bne.n	8004f88 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8004f7a:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	4a0d      	ldr	r2, [pc, #52]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f80:	f043 0304 	orr.w	r3, r3, #4
 8004f84:	6113      	str	r3, [r2, #16]
 8004f86:	e005      	b.n	8004f94 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f92:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	4a05      	ldr	r2, [pc, #20]	; (8004fb4 <FLASH_MassErase+0x70>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6113      	str	r3, [r2, #16]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40023c00 	.word	0x40023c00

08004fb8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e010      	b.n	8004ff6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d103      	bne.n	8004fe2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	e009      	b.n	8004ff6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d103      	bne.n	8004ff0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e002      	b.n	8004ff6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004ff0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b0b      	cmp	r3, #11
 8004ffa:	d902      	bls.n	8005002 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <FLASH_Erase_Sector+0x98>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	4a12      	ldr	r2, [pc, #72]	; (8005050 <FLASH_Erase_Sector+0x98>)
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800500e:	4b10      	ldr	r3, [pc, #64]	; (8005050 <FLASH_Erase_Sector+0x98>)
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	490f      	ldr	r1, [pc, #60]	; (8005050 <FLASH_Erase_Sector+0x98>)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800501a:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <FLASH_Erase_Sector+0x98>)
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <FLASH_Erase_Sector+0x98>)
 8005020:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005024:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <FLASH_Erase_Sector+0x98>)
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4313      	orrs	r3, r2
 8005030:	4a07      	ldr	r2, [pc, #28]	; (8005050 <FLASH_Erase_Sector+0x98>)
 8005032:	f043 0302 	orr.w	r3, r3, #2
 8005036:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <FLASH_Erase_Sector+0x98>)
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	4a04      	ldr	r2, [pc, #16]	; (8005050 <FLASH_Erase_Sector+0x98>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	6113      	str	r3, [r2, #16]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40023c00 	.word	0x40023c00

08005054 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <FLASH_FlushCaches+0x88>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005060:	2b00      	cmp	r3, #0
 8005062:	d017      	beq.n	8005094 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005064:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <FLASH_FlushCaches+0x88>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <FLASH_FlushCaches+0x88>)
 800506a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800506e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005070:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <FLASH_FlushCaches+0x88>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <FLASH_FlushCaches+0x88>)
 8005076:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b17      	ldr	r3, [pc, #92]	; (80050dc <FLASH_FlushCaches+0x88>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a16      	ldr	r2, [pc, #88]	; (80050dc <FLASH_FlushCaches+0x88>)
 8005082:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005086:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <FLASH_FlushCaches+0x88>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a13      	ldr	r2, [pc, #76]	; (80050dc <FLASH_FlushCaches+0x88>)
 800508e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005092:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005094:	4b11      	ldr	r3, [pc, #68]	; (80050dc <FLASH_FlushCaches+0x88>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509c:	2b00      	cmp	r3, #0
 800509e:	d017      	beq.n	80050d0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80050a0:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <FLASH_FlushCaches+0x88>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <FLASH_FlushCaches+0x88>)
 80050a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050aa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <FLASH_FlushCaches+0x88>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <FLASH_FlushCaches+0x88>)
 80050b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b08      	ldr	r3, [pc, #32]	; (80050dc <FLASH_FlushCaches+0x88>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a07      	ldr	r2, [pc, #28]	; (80050dc <FLASH_FlushCaches+0x88>)
 80050be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <FLASH_FlushCaches+0x88>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a04      	ldr	r2, [pc, #16]	; (80050dc <FLASH_FlushCaches+0x88>)
 80050ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050ce:	6013      	str	r3, [r2, #0]
  }
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40023c00 	.word	0x40023c00

080050e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	e177      	b.n	80053ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050fc:	2201      	movs	r2, #1
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4013      	ands	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	429a      	cmp	r2, r3
 8005116:	f040 8166 	bne.w	80053e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d00b      	beq.n	800513a <HAL_GPIO_Init+0x5a>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d007      	beq.n	800513a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800512e:	2b11      	cmp	r3, #17
 8005130:	d003      	beq.n	800513a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b12      	cmp	r3, #18
 8005138:	d130      	bne.n	800519c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	2203      	movs	r2, #3
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4013      	ands	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4313      	orrs	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005170:	2201      	movs	r2, #1
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 0201 	and.w	r2, r3, #1
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4313      	orrs	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	2203      	movs	r2, #3
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d003      	beq.n	80051dc <HAL_GPIO_Init+0xfc>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b12      	cmp	r3, #18
 80051da:	d123      	bne.n	8005224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	08da      	lsrs	r2, r3, #3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3208      	adds	r2, #8
 80051e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	220f      	movs	r2, #15
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	08da      	lsrs	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3208      	adds	r2, #8
 800521e:	69b9      	ldr	r1, [r7, #24]
 8005220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	2203      	movs	r2, #3
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f003 0203 	and.w	r2, r3, #3
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80c0 	beq.w	80053e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	4b65      	ldr	r3, [pc, #404]	; (8005400 <HAL_GPIO_Init+0x320>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	4a64      	ldr	r2, [pc, #400]	; (8005400 <HAL_GPIO_Init+0x320>)
 8005270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005274:	6453      	str	r3, [r2, #68]	; 0x44
 8005276:	4b62      	ldr	r3, [pc, #392]	; (8005400 <HAL_GPIO_Init+0x320>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005282:	4a60      	ldr	r2, [pc, #384]	; (8005404 <HAL_GPIO_Init+0x324>)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	3302      	adds	r3, #2
 800528a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a57      	ldr	r2, [pc, #348]	; (8005408 <HAL_GPIO_Init+0x328>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d037      	beq.n	800531e <HAL_GPIO_Init+0x23e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a56      	ldr	r2, [pc, #344]	; (800540c <HAL_GPIO_Init+0x32c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_GPIO_Init+0x23a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a55      	ldr	r2, [pc, #340]	; (8005410 <HAL_GPIO_Init+0x330>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d02b      	beq.n	8005316 <HAL_GPIO_Init+0x236>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a54      	ldr	r2, [pc, #336]	; (8005414 <HAL_GPIO_Init+0x334>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d025      	beq.n	8005312 <HAL_GPIO_Init+0x232>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a53      	ldr	r2, [pc, #332]	; (8005418 <HAL_GPIO_Init+0x338>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01f      	beq.n	800530e <HAL_GPIO_Init+0x22e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a52      	ldr	r2, [pc, #328]	; (800541c <HAL_GPIO_Init+0x33c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d019      	beq.n	800530a <HAL_GPIO_Init+0x22a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a51      	ldr	r2, [pc, #324]	; (8005420 <HAL_GPIO_Init+0x340>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_GPIO_Init+0x226>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a50      	ldr	r2, [pc, #320]	; (8005424 <HAL_GPIO_Init+0x344>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00d      	beq.n	8005302 <HAL_GPIO_Init+0x222>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a4f      	ldr	r2, [pc, #316]	; (8005428 <HAL_GPIO_Init+0x348>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <HAL_GPIO_Init+0x21e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a4e      	ldr	r2, [pc, #312]	; (800542c <HAL_GPIO_Init+0x34c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d101      	bne.n	80052fa <HAL_GPIO_Init+0x21a>
 80052f6:	2309      	movs	r3, #9
 80052f8:	e012      	b.n	8005320 <HAL_GPIO_Init+0x240>
 80052fa:	230a      	movs	r3, #10
 80052fc:	e010      	b.n	8005320 <HAL_GPIO_Init+0x240>
 80052fe:	2308      	movs	r3, #8
 8005300:	e00e      	b.n	8005320 <HAL_GPIO_Init+0x240>
 8005302:	2307      	movs	r3, #7
 8005304:	e00c      	b.n	8005320 <HAL_GPIO_Init+0x240>
 8005306:	2306      	movs	r3, #6
 8005308:	e00a      	b.n	8005320 <HAL_GPIO_Init+0x240>
 800530a:	2305      	movs	r3, #5
 800530c:	e008      	b.n	8005320 <HAL_GPIO_Init+0x240>
 800530e:	2304      	movs	r3, #4
 8005310:	e006      	b.n	8005320 <HAL_GPIO_Init+0x240>
 8005312:	2303      	movs	r3, #3
 8005314:	e004      	b.n	8005320 <HAL_GPIO_Init+0x240>
 8005316:	2302      	movs	r3, #2
 8005318:	e002      	b.n	8005320 <HAL_GPIO_Init+0x240>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_GPIO_Init+0x240>
 800531e:	2300      	movs	r3, #0
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	f002 0203 	and.w	r2, r2, #3
 8005326:	0092      	lsls	r2, r2, #2
 8005328:	4093      	lsls	r3, r2
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005330:	4934      	ldr	r1, [pc, #208]	; (8005404 <HAL_GPIO_Init+0x324>)
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	089b      	lsrs	r3, r3, #2
 8005336:	3302      	adds	r3, #2
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800533e:	4b3c      	ldr	r3, [pc, #240]	; (8005430 <HAL_GPIO_Init+0x350>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005362:	4a33      	ldr	r2, [pc, #204]	; (8005430 <HAL_GPIO_Init+0x350>)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005368:	4b31      	ldr	r3, [pc, #196]	; (8005430 <HAL_GPIO_Init+0x350>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800538c:	4a28      	ldr	r2, [pc, #160]	; (8005430 <HAL_GPIO_Init+0x350>)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005392:	4b27      	ldr	r3, [pc, #156]	; (8005430 <HAL_GPIO_Init+0x350>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	43db      	mvns	r3, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4013      	ands	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053b6:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <HAL_GPIO_Init+0x350>)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053bc:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_GPIO_Init+0x350>)
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <HAL_GPIO_Init+0x350>)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3301      	adds	r3, #1
 80053ea:	61fb      	str	r3, [r7, #28]
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b0f      	cmp	r3, #15
 80053f0:	f67f ae84 	bls.w	80050fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053f4:	bf00      	nop
 80053f6:	3724      	adds	r7, #36	; 0x24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40023800 	.word	0x40023800
 8005404:	40013800 	.word	0x40013800
 8005408:	40020000 	.word	0x40020000
 800540c:	40020400 	.word	0x40020400
 8005410:	40020800 	.word	0x40020800
 8005414:	40020c00 	.word	0x40020c00
 8005418:	40021000 	.word	0x40021000
 800541c:	40021400 	.word	0x40021400
 8005420:	40021800 	.word	0x40021800
 8005424:	40021c00 	.word	0x40021c00
 8005428:	40022000 	.word	0x40022000
 800542c:	40022400 	.word	0x40022400
 8005430:	40013c00 	.word	0x40013c00

08005434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	807b      	strh	r3, [r7, #2]
 8005440:	4613      	mov	r3, r2
 8005442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005444:	787b      	ldrb	r3, [r7, #1]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800544a:	887a      	ldrh	r2, [r7, #2]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005450:	e003      	b.n	800545a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005452:	887b      	ldrh	r3, [r7, #2]
 8005454:	041a      	lsls	r2, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	619a      	str	r2, [r3, #24]
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e0bf      	b.n	80055fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f8ba 	bl	8005608 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80054aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6999      	ldr	r1, [r3, #24]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b4a      	ldr	r3, [pc, #296]	; (8005604 <HAL_LTDC_Init+0x19c>)
 80054dc:	400b      	ands	r3, r1
 80054de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6899      	ldr	r1, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68d9      	ldr	r1, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b3e      	ldr	r3, [pc, #248]	; (8005604 <HAL_LTDC_Init+0x19c>)
 800550a:	400b      	ands	r3, r1
 800550c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68d9      	ldr	r1, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6919      	ldr	r1, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4b33      	ldr	r3, [pc, #204]	; (8005604 <HAL_LTDC_Init+0x19c>)
 8005538:	400b      	ands	r3, r1
 800553a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6919      	ldr	r1, [r3, #16]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6959      	ldr	r1, [r3, #20]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	4b27      	ldr	r3, [pc, #156]	; (8005604 <HAL_LTDC_Init+0x19c>)
 8005566:	400b      	ands	r3, r1
 8005568:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6959      	ldr	r1, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005598:	041b      	lsls	r3, r3, #16
 800559a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0206 	orr.w	r2, r2, #6
 80055d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0201 	orr.w	r2, r2, #1
 80055e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	f000f800 	.word	0xf000f800

08005608 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800561c:	b5b0      	push	{r4, r5, r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_LTDC_ConfigLayer+0x1a>
 8005632:	2302      	movs	r3, #2
 8005634:	e02c      	b.n	8005690 <HAL_LTDC_ConfigLayer+0x74>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2134      	movs	r1, #52	; 0x34
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4614      	mov	r4, r2
 800565a:	461d      	mov	r5, r3
 800565c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800565e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f811 	bl	8005698 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2201      	movs	r2, #1
 800567c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bdb0      	pop	{r4, r5, r7, pc}

08005698 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005698:	b480      	push	{r7}
 800569a:	b089      	sub	sp, #36	; 0x24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	0c1b      	lsrs	r3, r3, #16
 80056b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056b4:	4413      	add	r3, r2
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	01db      	lsls	r3, r3, #7
 80056c4:	4413      	add	r3, r2
 80056c6:	3384      	adds	r3, #132	; 0x84
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	4611      	mov	r1, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	01d2      	lsls	r2, r2, #7
 80056d4:	440a      	add	r2, r1
 80056d6:	3284      	adds	r2, #132	; 0x84
 80056d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	4413      	add	r3, r2
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4619      	mov	r1, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	01db      	lsls	r3, r3, #7
 80056fc:	440b      	add	r3, r1
 80056fe:	3384      	adds	r3, #132	; 0x84
 8005700:	4619      	mov	r1, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4313      	orrs	r3, r2
 8005706:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005716:	4413      	add	r3, r2
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	01db      	lsls	r3, r3, #7
 8005726:	4413      	add	r3, r2
 8005728:	3384      	adds	r3, #132	; 0x84
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	4611      	mov	r1, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	01d2      	lsls	r2, r2, #7
 8005736:	440a      	add	r2, r1
 8005738:	3284      	adds	r2, #132	; 0x84
 800573a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800573e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800574e:	4413      	add	r3, r2
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	01db      	lsls	r3, r3, #7
 800575c:	440b      	add	r3, r1
 800575e:	3384      	adds	r3, #132	; 0x84
 8005760:	4619      	mov	r1, r3
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4313      	orrs	r3, r2
 8005766:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	01db      	lsls	r3, r3, #7
 8005772:	4413      	add	r3, r2
 8005774:	3384      	adds	r3, #132	; 0x84
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	4611      	mov	r1, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	01d2      	lsls	r2, r2, #7
 8005782:	440a      	add	r2, r1
 8005784:	3284      	adds	r2, #132	; 0x84
 8005786:	f023 0307 	bic.w	r3, r3, #7
 800578a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	01db      	lsls	r3, r3, #7
 8005796:	4413      	add	r3, r2
 8005798:	3384      	adds	r3, #132	; 0x84
 800579a:	461a      	mov	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	061b      	lsls	r3, r3, #24
 80057bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	01db      	lsls	r3, r3, #7
 80057c8:	4413      	add	r3, r2
 80057ca:	3384      	adds	r3, #132	; 0x84
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	01db      	lsls	r3, r3, #7
 80057d8:	4413      	add	r3, r2
 80057da:	3384      	adds	r3, #132	; 0x84
 80057dc:	461a      	mov	r2, r3
 80057de:	2300      	movs	r3, #0
 80057e0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057e8:	461a      	mov	r2, r3
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4619      	mov	r1, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	01db      	lsls	r3, r3, #7
 80057fc:	440b      	add	r3, r1
 80057fe:	3384      	adds	r3, #132	; 0x84
 8005800:	4619      	mov	r1, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	01db      	lsls	r3, r3, #7
 8005812:	4413      	add	r3, r2
 8005814:	3384      	adds	r3, #132	; 0x84
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	4611      	mov	r1, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	01d2      	lsls	r2, r2, #7
 8005822:	440a      	add	r2, r1
 8005824:	3284      	adds	r2, #132	; 0x84
 8005826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800582a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	01db      	lsls	r3, r3, #7
 8005836:	4413      	add	r3, r2
 8005838:	3384      	adds	r3, #132	; 0x84
 800583a:	461a      	mov	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	01db      	lsls	r3, r3, #7
 800584c:	4413      	add	r3, r2
 800584e:	3384      	adds	r3, #132	; 0x84
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	4611      	mov	r1, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	01d2      	lsls	r2, r2, #7
 800585c:	440a      	add	r2, r1
 800585e:	3284      	adds	r2, #132	; 0x84
 8005860:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	6809      	ldr	r1, [r1, #0]
 8005876:	4608      	mov	r0, r1
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	01c9      	lsls	r1, r1, #7
 800587c:	4401      	add	r1, r0
 800587e:	3184      	adds	r1, #132	; 0x84
 8005880:	4313      	orrs	r3, r2
 8005882:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	01db      	lsls	r3, r3, #7
 800588e:	4413      	add	r3, r2
 8005890:	3384      	adds	r3, #132	; 0x84
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	01db      	lsls	r3, r3, #7
 800589e:	4413      	add	r3, r2
 80058a0:	3384      	adds	r3, #132	; 0x84
 80058a2:	461a      	mov	r2, r3
 80058a4:	2300      	movs	r3, #0
 80058a6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	01db      	lsls	r3, r3, #7
 80058b2:	4413      	add	r3, r2
 80058b4:	3384      	adds	r3, #132	; 0x84
 80058b6:	461a      	mov	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80058c6:	2304      	movs	r3, #4
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	e01b      	b.n	8005904 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d102      	bne.n	80058da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80058d4:	2303      	movs	r3, #3
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	e014      	b.n	8005904 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d00b      	beq.n	80058fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d007      	beq.n	80058fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d003      	beq.n	80058fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058f6:	2b07      	cmp	r3, #7
 80058f8:	d102      	bne.n	8005900 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80058fa:	2302      	movs	r3, #2
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	e001      	b.n	8005904 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005900:	2301      	movs	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	01db      	lsls	r3, r3, #7
 800590e:	4413      	add	r3, r2
 8005910:	3384      	adds	r3, #132	; 0x84
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	4611      	mov	r1, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	01d2      	lsls	r2, r2, #7
 800591e:	440a      	add	r2, r1
 8005920:	3284      	adds	r2, #132	; 0x84
 8005922:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005926:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	041a      	lsls	r2, r3, #16
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	1acb      	subs	r3, r1, r3
 800593e:	69f9      	ldr	r1, [r7, #28]
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	3303      	adds	r3, #3
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	6809      	ldr	r1, [r1, #0]
 800594a:	4608      	mov	r0, r1
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	01c9      	lsls	r1, r1, #7
 8005950:	4401      	add	r1, r0
 8005952:	3184      	adds	r1, #132	; 0x84
 8005954:	4313      	orrs	r3, r2
 8005956:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	01db      	lsls	r3, r3, #7
 8005962:	4413      	add	r3, r2
 8005964:	3384      	adds	r3, #132	; 0x84
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	4611      	mov	r1, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	01d2      	lsls	r2, r2, #7
 8005972:	440a      	add	r2, r1
 8005974:	3284      	adds	r2, #132	; 0x84
 8005976:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	01db      	lsls	r3, r3, #7
 800598a:	4413      	add	r3, r2
 800598c:	3384      	adds	r3, #132	; 0x84
 800598e:	461a      	mov	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	01db      	lsls	r3, r3, #7
 80059a0:	4413      	add	r3, r2
 80059a2:	3384      	adds	r3, #132	; 0x84
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	6812      	ldr	r2, [r2, #0]
 80059aa:	4611      	mov	r1, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	01d2      	lsls	r2, r2, #7
 80059b0:	440a      	add	r2, r1
 80059b2:	3284      	adds	r2, #132	; 0x84
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6013      	str	r3, [r2, #0]
}
 80059ba:	bf00      	nop
 80059bc:	3724      	adds	r7, #36	; 0x24
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80059d8:	2200      	movs	r2, #0
 80059da:	e001      	b.n	80059e0 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80059dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80059ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80059f0:	e000      	b.n	80059f4 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80059f2:	2200      	movs	r2, #0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8005a00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a04:	e000      	b.n	8005a08 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8005a06:	2200      	movs	r2, #0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	4413      	add	r3, r2
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	441a      	add	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	4413      	add	r3, r2
 8005a36:	1e5a      	subs	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	441a      	add	r2, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	441a      	add	r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	4413      	add	r3, r2
 8005a52:	1e5a      	subs	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a72:	2300      	movs	r3, #0
 8005a74:	603b      	str	r3, [r7, #0]
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a80:	6413      	str	r3, [r2, #64]	; 0x40
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <HAL_PWREx_EnableOverDrive+0x90>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a8e:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <HAL_PWREx_EnableOverDrive+0x94>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a94:	f7fb fa52 	bl	8000f3c <HAL_GetTick>
 8005a98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a9a:	e009      	b.n	8005ab0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a9c:	f7fb fa4e 	bl	8000f3c <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aaa:	d901      	bls.n	8005ab0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e01f      	b.n	8005af0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abc:	d1ee      	bne.n	8005a9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac4:	f7fb fa3a 	bl	8000f3c <HAL_GetTick>
 8005ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005aca:	e009      	b.n	8005ae0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005acc:	f7fb fa36 	bl	8000f3c <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ada:	d901      	bls.n	8005ae0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e007      	b.n	8005af0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aec:	d1ee      	bne.n	8005acc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40023800 	.word	0x40023800
 8005afc:	420e0040 	.word	0x420e0040
 8005b00:	40007000 	.word	0x40007000
 8005b04:	420e0044 	.word	0x420e0044

08005b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0cc      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b1c:	4b68      	ldr	r3, [pc, #416]	; (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d90c      	bls.n	8005b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2a:	4b65      	ldr	r3, [pc, #404]	; (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b32:	4b63      	ldr	r3, [pc, #396]	; (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0b8      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d020      	beq.n	8005b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b5c:	4b59      	ldr	r3, [pc, #356]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4a58      	ldr	r2, [pc, #352]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b74:	4b53      	ldr	r3, [pc, #332]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a52      	ldr	r2, [pc, #328]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b80:	4b50      	ldr	r3, [pc, #320]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	494d      	ldr	r1, [pc, #308]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d044      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d107      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba6:	4b47      	ldr	r3, [pc, #284]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d119      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e07f      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d003      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d107      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc6:	4b3f      	ldr	r3, [pc, #252]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e06f      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e067      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005be6:	4b37      	ldr	r3, [pc, #220]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f023 0203 	bic.w	r2, r3, #3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	4934      	ldr	r1, [pc, #208]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bf8:	f7fb f9a0 	bl	8000f3c <HAL_GetTick>
 8005bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c00:	f7fb f99c 	bl	8000f3c <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e04f      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c16:	4b2b      	ldr	r3, [pc, #172]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 020c 	and.w	r2, r3, #12
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d1eb      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c28:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d20c      	bcs.n	8005c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c36:	4b22      	ldr	r3, [pc, #136]	; (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e032      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c5c:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4916      	ldr	r1, [pc, #88]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	490e      	ldr	r1, [pc, #56]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c8e:	f000 f821 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8005c92:	4601      	mov	r1, r0
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	091b      	lsrs	r3, r3, #4
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	4a0a      	ldr	r2, [pc, #40]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca0:	5cd3      	ldrb	r3, [r2, r3]
 8005ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ca6:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <HAL_RCC_ClockConfig+0x1c4>)
 8005ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005caa:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fd fc0a 	bl	80034c8 <HAL_InitTick>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023c00 	.word	0x40023c00
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	08009218 	.word	0x08009218
 8005ccc:	20000018 	.word	0x20000018
 8005cd0:	2000001c 	.word	0x2000001c

08005cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cea:	4b63      	ldr	r3, [pc, #396]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d007      	beq.n	8005d06 <HAL_RCC_GetSysClockFreq+0x32>
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d008      	beq.n	8005d0c <HAL_RCC_GetSysClockFreq+0x38>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 80b4 	bne.w	8005e68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d00:	4b5e      	ldr	r3, [pc, #376]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d02:	60bb      	str	r3, [r7, #8]
       break;
 8005d04:	e0b3      	b.n	8005e6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d06:	4b5e      	ldr	r3, [pc, #376]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005d08:	60bb      	str	r3, [r7, #8]
      break;
 8005d0a:	e0b0      	b.n	8005e6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d0c:	4b5a      	ldr	r3, [pc, #360]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d16:	4b58      	ldr	r3, [pc, #352]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d04a      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d22:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	f04f 0400 	mov.w	r4, #0
 8005d2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	ea03 0501 	and.w	r5, r3, r1
 8005d38:	ea04 0602 	and.w	r6, r4, r2
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4632      	mov	r2, r6
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	f04f 0400 	mov.w	r4, #0
 8005d48:	0154      	lsls	r4, r2, #5
 8005d4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d4e:	014b      	lsls	r3, r1, #5
 8005d50:	4619      	mov	r1, r3
 8005d52:	4622      	mov	r2, r4
 8005d54:	1b49      	subs	r1, r1, r5
 8005d56:	eb62 0206 	sbc.w	r2, r2, r6
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	f04f 0400 	mov.w	r4, #0
 8005d62:	0194      	lsls	r4, r2, #6
 8005d64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d68:	018b      	lsls	r3, r1, #6
 8005d6a:	1a5b      	subs	r3, r3, r1
 8005d6c:	eb64 0402 	sbc.w	r4, r4, r2
 8005d70:	f04f 0100 	mov.w	r1, #0
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	00e2      	lsls	r2, r4, #3
 8005d7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d7e:	00d9      	lsls	r1, r3, #3
 8005d80:	460b      	mov	r3, r1
 8005d82:	4614      	mov	r4, r2
 8005d84:	195b      	adds	r3, r3, r5
 8005d86:	eb44 0406 	adc.w	r4, r4, r6
 8005d8a:	f04f 0100 	mov.w	r1, #0
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	0262      	lsls	r2, r4, #9
 8005d94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005d98:	0259      	lsls	r1, r3, #9
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4614      	mov	r4, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	4621      	mov	r1, r4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f04f 0400 	mov.w	r4, #0
 8005da8:	461a      	mov	r2, r3
 8005daa:	4623      	mov	r3, r4
 8005dac:	f7fa fa22 	bl	80001f4 <__aeabi_uldivmod>
 8005db0:	4603      	mov	r3, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	e049      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005db8:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	099b      	lsrs	r3, r3, #6
 8005dbe:	f04f 0400 	mov.w	r4, #0
 8005dc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	ea03 0501 	and.w	r5, r3, r1
 8005dce:	ea04 0602 	and.w	r6, r4, r2
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	f04f 0400 	mov.w	r4, #0
 8005dde:	0154      	lsls	r4, r2, #5
 8005de0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005de4:	014b      	lsls	r3, r1, #5
 8005de6:	4619      	mov	r1, r3
 8005de8:	4622      	mov	r2, r4
 8005dea:	1b49      	subs	r1, r1, r5
 8005dec:	eb62 0206 	sbc.w	r2, r2, r6
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	f04f 0400 	mov.w	r4, #0
 8005df8:	0194      	lsls	r4, r2, #6
 8005dfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005dfe:	018b      	lsls	r3, r1, #6
 8005e00:	1a5b      	subs	r3, r3, r1
 8005e02:	eb64 0402 	sbc.w	r4, r4, r2
 8005e06:	f04f 0100 	mov.w	r1, #0
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	00e2      	lsls	r2, r4, #3
 8005e10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e14:	00d9      	lsls	r1, r3, #3
 8005e16:	460b      	mov	r3, r1
 8005e18:	4614      	mov	r4, r2
 8005e1a:	195b      	adds	r3, r3, r5
 8005e1c:	eb44 0406 	adc.w	r4, r4, r6
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	02a2      	lsls	r2, r4, #10
 8005e2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005e2e:	0299      	lsls	r1, r3, #10
 8005e30:	460b      	mov	r3, r1
 8005e32:	4614      	mov	r4, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	4621      	mov	r1, r4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f04f 0400 	mov.w	r4, #0
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4623      	mov	r3, r4
 8005e42:	f7fa f9d7 	bl	80001f4 <__aeabi_uldivmod>
 8005e46:	4603      	mov	r3, r0
 8005e48:	460c      	mov	r4, r1
 8005e4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	0c1b      	lsrs	r3, r3, #16
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	3301      	adds	r3, #1
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e64:	60bb      	str	r3, [r7, #8]
      break;
 8005e66:	e002      	b.n	8005e6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e68:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e6a:	60bb      	str	r3, [r7, #8]
      break;
 8005e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	00f42400 	.word	0x00f42400
 8005e80:	007a1200 	.word	0x007a1200

08005e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005eac:	4b66      	ldr	r3, [pc, #408]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	4963      	ldr	r1, [pc, #396]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005ece:	4b5e      	ldr	r3, [pc, #376]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	495a      	ldr	r1, [pc, #360]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d105      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d075      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f08:	4b50      	ldr	r3, [pc, #320]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f0e:	f7fb f815 	bl	8000f3c <HAL_GetTick>
 8005f12:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f14:	e008      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f16:	f7fb f811 	bl	8000f3c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e1dc      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f28:	4b47      	ldr	r3, [pc, #284]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f0      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d009      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	019a      	lsls	r2, r3, #6
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	071b      	lsls	r3, r3, #28
 8005f4c:	493e      	ldr	r1, [pc, #248]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01f      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f60:	4b39      	ldr	r3, [pc, #228]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f66:	0f1b      	lsrs	r3, r3, #28
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	019a      	lsls	r2, r3, #6
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	071b      	lsls	r3, r3, #28
 8005f80:	4931      	ldr	r1, [pc, #196]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f88:	4b2f      	ldr	r3, [pc, #188]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8e:	f023 021f 	bic.w	r2, r3, #31
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	492b      	ldr	r1, [pc, #172]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	019a      	lsls	r2, r3, #6
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	061b      	lsls	r3, r3, #24
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	071b      	lsls	r3, r3, #28
 8005fc0:	4921      	ldr	r1, [pc, #132]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fc8:	4b20      	ldr	r3, [pc, #128]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fce:	f7fa ffb5 	bl	8000f3c <HAL_GetTick>
 8005fd2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fd6:	f7fa ffb1 	bl	8000f3c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e17c      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fe8:	4b17      	ldr	r3, [pc, #92]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d112      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006008:	2b00      	cmp	r3, #0
 800600a:	d10c      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 80ce 	beq.w	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800601e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006022:	f040 80c8 	bne.w	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800602c:	f7fa ff86 	bl	8000f3c <HAL_GetTick>
 8006030:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006032:	e00f      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006034:	f7fa ff82 	bl	8000f3c <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d908      	bls.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e14d      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006046:	bf00      	nop
 8006048:	40023800 	.word	0x40023800
 800604c:	42470068 	.word	0x42470068
 8006050:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006054:	4ba5      	ldr	r3, [pc, #660]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800605c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006060:	d0e8      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02e      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800606e:	4b9f      	ldr	r3, [pc, #636]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006074:	0c1b      	lsrs	r3, r3, #16
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	3301      	adds	r3, #1
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006080:	4b9a      	ldr	r3, [pc, #616]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006086:	0f1b      	lsrs	r3, r3, #28
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	019a      	lsls	r2, r3, #6
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	3b01      	subs	r3, #1
 800609a:	041b      	lsls	r3, r3, #16
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	431a      	orrs	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	071b      	lsls	r3, r3, #28
 80060aa:	4990      	ldr	r1, [pc, #576]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060b2:	4b8e      	ldr	r3, [pc, #568]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	3b01      	subs	r3, #1
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	4989      	ldr	r1, [pc, #548]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d02c      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80060d8:	4b84      	ldr	r3, [pc, #528]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060de:	0c1b      	lsrs	r3, r3, #16
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	3301      	adds	r3, #1
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060ea:	4b80      	ldr	r3, [pc, #512]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	0e1b      	lsrs	r3, r3, #24
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	019a      	lsls	r2, r3, #6
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	3b01      	subs	r3, #1
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	431a      	orrs	r2, r3
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	061b      	lsls	r3, r3, #24
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	071b      	lsls	r3, r3, #28
 8006114:	4975      	ldr	r1, [pc, #468]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800611c:	4b73      	ldr	r3, [pc, #460]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800611e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612a:	4970      	ldr	r1, [pc, #448]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613a:	2b00      	cmp	r3, #0
 800613c:	d024      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006146:	d11f      	bne.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006148:	4b68      	ldr	r3, [pc, #416]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	0e1b      	lsrs	r3, r3, #24
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006156:	4b65      	ldr	r3, [pc, #404]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615c:	0f1b      	lsrs	r3, r3, #28
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	019a      	lsls	r2, r3, #6
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	3b01      	subs	r3, #1
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	431a      	orrs	r2, r3
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	431a      	orrs	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	071b      	lsls	r3, r3, #28
 8006180:	495a      	ldr	r1, [pc, #360]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006188:	4b59      	ldr	r3, [pc, #356]	; (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800618a:	2201      	movs	r2, #1
 800618c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800618e:	f7fa fed5 	bl	8000f3c <HAL_GetTick>
 8006192:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006194:	e008      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006196:	f7fa fed1 	bl	8000f3c <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e09c      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061a8:	4b50      	ldr	r3, [pc, #320]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061b4:	d1ef      	bne.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8083 	beq.w	80062ca <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061c4:	2300      	movs	r3, #0
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	4b48      	ldr	r3, [pc, #288]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	4a47      	ldr	r2, [pc, #284]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d2:	6413      	str	r3, [r2, #64]	; 0x40
 80061d4:	4b45      	ldr	r3, [pc, #276]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80061e0:	4b44      	ldr	r3, [pc, #272]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a43      	ldr	r2, [pc, #268]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80061e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061ec:	f7fa fea6 	bl	8000f3c <HAL_GetTick>
 80061f0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061f4:	f7fa fea2 	bl	8000f3c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e06d      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006206:	4b3b      	ldr	r3, [pc, #236]	; (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006212:	4b36      	ldr	r3, [pc, #216]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d02f      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	429a      	cmp	r2, r3
 800622e:	d028      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006230:	4b2e      	ldr	r3, [pc, #184]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006238:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800623a:	4b2f      	ldr	r3, [pc, #188]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006240:	4b2d      	ldr	r3, [pc, #180]	; (80062f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006246:	4a29      	ldr	r2, [pc, #164]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b01      	cmp	r3, #1
 8006256:	d114      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006258:	f7fa fe70 	bl	8000f3c <HAL_GetTick>
 800625c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800625e:	e00a      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006260:	f7fa fe6c 	bl	8000f3c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	; 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e035      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0ee      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800628e:	d10d      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006290:	4b16      	ldr	r3, [pc, #88]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a4:	4911      	ldr	r1, [pc, #68]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	608b      	str	r3, [r1, #8]
 80062aa:	e005      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80062ac:	4b0f      	ldr	r3, [pc, #60]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4a0e      	ldr	r2, [pc, #56]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80062b6:	6093      	str	r3, [r2, #8]
 80062b8:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062c4:	4909      	ldr	r1, [pc, #36]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80062de:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40023800 	.word	0x40023800
 80062f0:	42470070 	.word	0x42470070
 80062f4:	40007000 	.word	0x40007000
 80062f8:	42470e40 	.word	0x42470e40
 80062fc:	424711e0 	.word	0x424711e0

08006300 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d075      	beq.n	8006404 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006318:	4ba2      	ldr	r3, [pc, #648]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 030c 	and.w	r3, r3, #12
 8006320:	2b04      	cmp	r3, #4
 8006322:	d00c      	beq.n	800633e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006324:	4b9f      	ldr	r3, [pc, #636]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800632c:	2b08      	cmp	r3, #8
 800632e:	d112      	bne.n	8006356 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006330:	4b9c      	ldr	r3, [pc, #624]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800633c:	d10b      	bne.n	8006356 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633e:	4b99      	ldr	r3, [pc, #612]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d05b      	beq.n	8006402 <HAL_RCC_OscConfig+0x102>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d157      	bne.n	8006402 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e20b      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635e:	d106      	bne.n	800636e <HAL_RCC_OscConfig+0x6e>
 8006360:	4b90      	ldr	r3, [pc, #576]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a8f      	ldr	r2, [pc, #572]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e01d      	b.n	80063aa <HAL_RCC_OscConfig+0xaa>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006376:	d10c      	bne.n	8006392 <HAL_RCC_OscConfig+0x92>
 8006378:	4b8a      	ldr	r3, [pc, #552]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a89      	ldr	r2, [pc, #548]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800637e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	4b87      	ldr	r3, [pc, #540]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a86      	ldr	r2, [pc, #536]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800638a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e00b      	b.n	80063aa <HAL_RCC_OscConfig+0xaa>
 8006392:	4b84      	ldr	r3, [pc, #528]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a83      	ldr	r2, [pc, #524]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4b81      	ldr	r3, [pc, #516]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a80      	ldr	r2, [pc, #512]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 80063a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b2:	f7fa fdc3 	bl	8000f3c <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063ba:	f7fa fdbf 	bl	8000f3c <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b64      	cmp	r3, #100	; 0x64
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e1d0      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063cc:	4b75      	ldr	r3, [pc, #468]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <HAL_RCC_OscConfig+0xba>
 80063d8:	e014      	b.n	8006404 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063da:	f7fa fdaf 	bl	8000f3c <HAL_GetTick>
 80063de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063e0:	e008      	b.n	80063f4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063e2:	f7fa fdab 	bl	8000f3c <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b64      	cmp	r3, #100	; 0x64
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e1bc      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f4:	4b6b      	ldr	r3, [pc, #428]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f0      	bne.n	80063e2 <HAL_RCC_OscConfig+0xe2>
 8006400:	e000      	b.n	8006404 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006402:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d063      	beq.n	80064d8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006410:	4b64      	ldr	r3, [pc, #400]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800641c:	4b61      	ldr	r3, [pc, #388]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006424:	2b08      	cmp	r3, #8
 8006426:	d11c      	bne.n	8006462 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006428:	4b5e      	ldr	r3, [pc, #376]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d116      	bne.n	8006462 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006434:	4b5b      	ldr	r3, [pc, #364]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_RCC_OscConfig+0x14c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d001      	beq.n	800644c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e190      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644c:	4b55      	ldr	r3, [pc, #340]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	4952      	ldr	r1, [pc, #328]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006460:	e03a      	b.n	80064d8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d020      	beq.n	80064ac <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800646a:	4b4f      	ldr	r3, [pc, #316]	; (80065a8 <HAL_RCC_OscConfig+0x2a8>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fa fd64 	bl	8000f3c <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006478:	f7fa fd60 	bl	8000f3c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e171      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648a:	4b46      	ldr	r3, [pc, #280]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006496:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	493f      	ldr	r1, [pc, #252]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	600b      	str	r3, [r1, #0]
 80064aa:	e015      	b.n	80064d8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ac:	4b3e      	ldr	r3, [pc, #248]	; (80065a8 <HAL_RCC_OscConfig+0x2a8>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b2:	f7fa fd43 	bl	8000f3c <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ba:	f7fa fd3f 	bl	8000f3c <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e150      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064cc:	4b35      	ldr	r3, [pc, #212]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1f0      	bne.n	80064ba <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d030      	beq.n	8006546 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d016      	beq.n	800651a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ec:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <HAL_RCC_OscConfig+0x2ac>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f2:	f7fa fd23 	bl	8000f3c <HAL_GetTick>
 80064f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f8:	e008      	b.n	800650c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064fa:	f7fa fd1f 	bl	8000f3c <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e130      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650c:	4b25      	ldr	r3, [pc, #148]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800650e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <HAL_RCC_OscConfig+0x1fa>
 8006518:	e015      	b.n	8006546 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800651a:	4b24      	ldr	r3, [pc, #144]	; (80065ac <HAL_RCC_OscConfig+0x2ac>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006520:	f7fa fd0c 	bl	8000f3c <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006528:	f7fa fd08 	bl	8000f3c <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e119      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653a:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800653c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 809f 	beq.w	8006692 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006554:	2300      	movs	r3, #0
 8006556:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006558:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10f      	bne.n	8006584 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	4a0d      	ldr	r2, [pc, #52]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 800656e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006572:	6413      	str	r3, [r2, #64]	; 0x40
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <HAL_RCC_OscConfig+0x2a4>)
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <HAL_RCC_OscConfig+0x2b0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d120      	bne.n	80065d2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <HAL_RCC_OscConfig+0x2b0>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a06      	ldr	r2, [pc, #24]	; (80065b0 <HAL_RCC_OscConfig+0x2b0>)
 8006596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800659c:	f7fa fcce 	bl	8000f3c <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a2:	e010      	b.n	80065c6 <HAL_RCC_OscConfig+0x2c6>
 80065a4:	40023800 	.word	0x40023800
 80065a8:	42470000 	.word	0x42470000
 80065ac:	42470e80 	.word	0x42470e80
 80065b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b4:	f7fa fcc2 	bl	8000f3c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e0d3      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c6:	4b6c      	ldr	r3, [pc, #432]	; (8006778 <HAL_RCC_OscConfig+0x478>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d106      	bne.n	80065e8 <HAL_RCC_OscConfig+0x2e8>
 80065da:	4b68      	ldr	r3, [pc, #416]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	4a67      	ldr	r2, [pc, #412]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	6713      	str	r3, [r2, #112]	; 0x70
 80065e6:	e01c      	b.n	8006622 <HAL_RCC_OscConfig+0x322>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b05      	cmp	r3, #5
 80065ee:	d10c      	bne.n	800660a <HAL_RCC_OscConfig+0x30a>
 80065f0:	4b62      	ldr	r3, [pc, #392]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 80065f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f4:	4a61      	ldr	r2, [pc, #388]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 80065f6:	f043 0304 	orr.w	r3, r3, #4
 80065fa:	6713      	str	r3, [r2, #112]	; 0x70
 80065fc:	4b5f      	ldr	r3, [pc, #380]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 80065fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006600:	4a5e      	ldr	r2, [pc, #376]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	6713      	str	r3, [r2, #112]	; 0x70
 8006608:	e00b      	b.n	8006622 <HAL_RCC_OscConfig+0x322>
 800660a:	4b5c      	ldr	r3, [pc, #368]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	4a5b      	ldr	r2, [pc, #364]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	6713      	str	r3, [r2, #112]	; 0x70
 8006616:	4b59      	ldr	r3, [pc, #356]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	4a58      	ldr	r2, [pc, #352]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 800661c:	f023 0304 	bic.w	r3, r3, #4
 8006620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d015      	beq.n	8006656 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662a:	f7fa fc87 	bl	8000f3c <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006630:	e00a      	b.n	8006648 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006632:	f7fa fc83 	bl	8000f3c <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e092      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006648:	4b4c      	ldr	r3, [pc, #304]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0ee      	beq.n	8006632 <HAL_RCC_OscConfig+0x332>
 8006654:	e014      	b.n	8006680 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006656:	f7fa fc71 	bl	8000f3c <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800665c:	e00a      	b.n	8006674 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800665e:	f7fa fc6d 	bl	8000f3c <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	f241 3288 	movw	r2, #5000	; 0x1388
 800666c:	4293      	cmp	r3, r2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e07c      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006674:	4b41      	ldr	r3, [pc, #260]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 8006676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1ee      	bne.n	800665e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d105      	bne.n	8006692 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006686:	4b3d      	ldr	r3, [pc, #244]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	4a3c      	ldr	r2, [pc, #240]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 800668c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006690:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d068      	beq.n	800676c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800669a:	4b38      	ldr	r3, [pc, #224]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d060      	beq.n	8006768 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d145      	bne.n	800673a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ae:	4b34      	ldr	r3, [pc, #208]	; (8006780 <HAL_RCC_OscConfig+0x480>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fa fc42 	bl	8000f3c <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066bc:	f7fa fc3e 	bl	8000f3c <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e04f      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ce:	4b2b      	ldr	r3, [pc, #172]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69da      	ldr	r2, [r3, #28]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	3b01      	subs	r3, #1
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	061b      	lsls	r3, r3, #24
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	071b      	lsls	r3, r3, #28
 8006706:	491d      	ldr	r1, [pc, #116]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 8006708:	4313      	orrs	r3, r2
 800670a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670c:	4b1c      	ldr	r3, [pc, #112]	; (8006780 <HAL_RCC_OscConfig+0x480>)
 800670e:	2201      	movs	r2, #1
 8006710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006712:	f7fa fc13 	bl	8000f3c <HAL_GetTick>
 8006716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800671a:	f7fa fc0f 	bl	8000f3c <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e020      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f0      	beq.n	800671a <HAL_RCC_OscConfig+0x41a>
 8006738:	e018      	b.n	800676c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673a:	4b11      	ldr	r3, [pc, #68]	; (8006780 <HAL_RCC_OscConfig+0x480>)
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7fa fbfc 	bl	8000f3c <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006748:	f7fa fbf8 	bl	8000f3c <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e009      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675a:	4b08      	ldr	r3, [pc, #32]	; (800677c <HAL_RCC_OscConfig+0x47c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x448>
 8006766:	e001      	b.n	800676c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40007000 	.word	0x40007000
 800677c:	40023800 	.word	0x40023800
 8006780:	42470060 	.word	0x42470060

08006784 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e025      	b.n	80067e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f81d 	bl	80067ec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3304      	adds	r3, #4
 80067c2:	4619      	mov	r1, r3
 80067c4:	4610      	mov	r0, r2
 80067c6:	f000 f866 	bl	8006896 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	461a      	mov	r2, r3
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	f000 f8d1 	bl	800697c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d101      	bne.n	800681c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006818:	2302      	movs	r3, #2
 800681a:	e018      	b.n	800684e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 f924 	bl	8006a7a <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d104      	bne.n	8006844 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2205      	movs	r2, #5
 800683e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006842:	e003      	b.n	800684c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d101      	bne.n	8006870 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800686c:	2302      	movs	r3, #2
 800686e:	e00e      	b.n	800688e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 f937 	bl	8006af2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d029      	beq.n	8006904 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80068bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068c0:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068ca:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80068d0:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80068d6:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80068dc:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80068e2:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80068e8:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80068ee:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80068f4:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e034      	b.n	800696e <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006910:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800691a:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006920:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006934:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006938:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006942:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006948:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800694e:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006954:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800695a:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	4313      	orrs	r3, r2
 8006960:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d02e      	beq.n	80069f4 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80069a2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80069b2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80069bc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80069c6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80069d0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80069da:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80069e4:	4313      	orrs	r3, r2
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	609a      	str	r2, [r3, #8]
 80069f2:	e03b      	b.n	8006a6c <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a04:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006a16:	4313      	orrs	r3, r2
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a2a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a3a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006a44:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006a4e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006a96:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006aa0:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006ab2:	f7fa fa43 	bl	8000f3c <HAL_GetTick>
 8006ab6:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006ab8:	e010      	b.n	8006adc <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac0:	d00c      	beq.n	8006adc <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <FMC_SDRAM_SendCommand+0x5e>
 8006ac8:	f7fa fa38 	bl	8000f3c <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d201      	bcs.n	8006adc <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e006      	b.n	8006aea <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d0e8      	beq.n	8006aba <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006b1c:	4b04      	ldr	r3, [pc, #16]	; (8006b30 <LL_RCC_GetSysClkSource+0x18>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 030c 	and.w	r3, r3, #12
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40023800 	.word	0x40023800

08006b34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006b38:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <LL_RCC_GetAHBPrescaler+0x18>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40023800 	.word	0x40023800

08006b50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <LL_RCC_GetAPB1Prescaler+0x18>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800

08006b6c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006b70:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40023800 	.word	0x40023800

08006b88 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006b8c:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <LL_RCC_PLL_GetMainSource+0x18>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40023800 	.word	0x40023800

08006ba4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006ba8:	4b04      	ldr	r3, [pc, #16]	; (8006bbc <LL_RCC_PLL_GetN+0x18>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	099b      	lsrs	r3, r3, #6
 8006bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40023800 	.word	0x40023800

08006bc0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006bc4:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <LL_RCC_PLL_GetP+0x18>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40023800 	.word	0x40023800

08006bdc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006be0:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <LL_RCC_PLL_GetDivider+0x18>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40023800 	.word	0x40023800

08006bf8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006c00:	f000 f820 	bl	8006c44 <RCC_GetSystemClockFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 f83e 	bl	8006c90 <RCC_GetHCLKClockFreq>
 8006c14:	4602      	mov	r2, r0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f84c 	bl	8006cbc <RCC_GetPCLK1ClockFreq>
 8006c24:	4602      	mov	r2, r0
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f858 	bl	8006ce4 <RCC_GetPCLK2ClockFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60da      	str	r2, [r3, #12]
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006c4e:	f7ff ff63 	bl	8006b18 <LL_RCC_GetSysClkSource>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d006      	beq.n	8006c66 <RCC_GetSystemClockFreq+0x22>
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d007      	beq.n	8006c6c <RCC_GetSystemClockFreq+0x28>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006c60:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <RCC_GetSystemClockFreq+0x44>)
 8006c62:	607b      	str	r3, [r7, #4]
      break;
 8006c64:	e00a      	b.n	8006c7c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006c66:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <RCC_GetSystemClockFreq+0x48>)
 8006c68:	607b      	str	r3, [r7, #4]
      break;
 8006c6a:	e007      	b.n	8006c7c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006c6c:	2008      	movs	r0, #8
 8006c6e:	f000 f84d 	bl	8006d0c <RCC_PLL_GetFreqDomain_SYS>
 8006c72:	6078      	str	r0, [r7, #4]
      break;
 8006c74:	e002      	b.n	8006c7c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006c76:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <RCC_GetSystemClockFreq+0x44>)
 8006c78:	607b      	str	r3, [r7, #4]
      break;
 8006c7a:	bf00      	nop
  }

  return frequency;
 8006c7c:	687b      	ldr	r3, [r7, #4]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	00f42400 	.word	0x00f42400
 8006c8c:	007a1200 	.word	0x007a1200

08006c90 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006c98:	f7ff ff4c 	bl	8006b34 <LL_RCC_GetAHBPrescaler>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	4a04      	ldr	r2, [pc, #16]	; (8006cb8 <RCC_GetHCLKClockFreq+0x28>)
 8006ca6:	5cd3      	ldrb	r3, [r2, r3]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	40d3      	lsrs	r3, r2
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	08009218 	.word	0x08009218

08006cbc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006cc4:	f7ff ff44 	bl	8006b50 <LL_RCC_GetAPB1Prescaler>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	0a9b      	lsrs	r3, r3, #10
 8006ccc:	4a04      	ldr	r2, [pc, #16]	; (8006ce0 <RCC_GetPCLK1ClockFreq+0x24>)
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	40d3      	lsrs	r3, r2
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	08009228 	.word	0x08009228

08006ce4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006cec:	f7ff ff3e 	bl	8006b6c <LL_RCC_GetAPB2Prescaler>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	0b5b      	lsrs	r3, r3, #13
 8006cf4:	4a04      	ldr	r2, [pc, #16]	; (8006d08 <RCC_GetPCLK2ClockFreq+0x24>)
 8006cf6:	5cd3      	ldrb	r3, [r2, r3]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	40d3      	lsrs	r3, r2
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	08009228 	.word	0x08009228

08006d0c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006d0c:	b590      	push	{r4, r7, lr}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006d20:	f7ff ff32 	bl	8006b88 <LL_RCC_PLL_GetMainSource>
 8006d24:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8006d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d30:	d003      	beq.n	8006d3a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8006d32:	e005      	b.n	8006d40 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006d34:	4b12      	ldr	r3, [pc, #72]	; (8006d80 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006d36:	617b      	str	r3, [r7, #20]
      break;
 8006d38:	e005      	b.n	8006d46 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006d3a:	4b12      	ldr	r3, [pc, #72]	; (8006d84 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006d3c:	617b      	str	r3, [r7, #20]
      break;
 8006d3e:	e002      	b.n	8006d46 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8006d40:	4b0f      	ldr	r3, [pc, #60]	; (8006d80 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006d42:	617b      	str	r3, [r7, #20]
      break;
 8006d44:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d113      	bne.n	8006d74 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006d4c:	f7ff ff46 	bl	8006bdc <LL_RCC_PLL_GetDivider>
 8006d50:	4602      	mov	r2, r0
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	fbb3 f4f2 	udiv	r4, r3, r2
 8006d58:	f7ff ff24 	bl	8006ba4 <LL_RCC_PLL_GetN>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	fb03 f404 	mul.w	r4, r3, r4
 8006d62:	f7ff ff2d 	bl	8006bc0 <LL_RCC_PLL_GetP>
 8006d66:	4603      	mov	r3, r0
 8006d68:	0c1b      	lsrs	r3, r3, #16
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006d72:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006d74:	693b      	ldr	r3, [r7, #16]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd90      	pop	{r4, r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	00f42400 	.word	0x00f42400
 8006d84:	007a1200 	.word	0x007a1200

08006d88 <LL_USART_IsEnabled>:
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2301      	moveq	r3, #1
 8006da0:	2300      	movne	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_USART_SetStopBitsLength>:
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <LL_USART_SetHWFlowCtrl>:
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	615a      	str	r2, [r3, #20]
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_USART_SetBaudRate>:
{
 8006dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e12:	f040 80c1 	bne.w	8006f98 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	461d      	mov	r5, r3
 8006e1a:	f04f 0600 	mov.w	r6, #0
 8006e1e:	46a8      	mov	r8, r5
 8006e20:	46b1      	mov	r9, r6
 8006e22:	eb18 0308 	adds.w	r3, r8, r8
 8006e26:	eb49 0409 	adc.w	r4, r9, r9
 8006e2a:	4698      	mov	r8, r3
 8006e2c:	46a1      	mov	r9, r4
 8006e2e:	eb18 0805 	adds.w	r8, r8, r5
 8006e32:	eb49 0906 	adc.w	r9, r9, r6
 8006e36:	f04f 0100 	mov.w	r1, #0
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e4a:	4688      	mov	r8, r1
 8006e4c:	4691      	mov	r9, r2
 8006e4e:	eb18 0005 	adds.w	r0, r8, r5
 8006e52:	eb49 0106 	adc.w	r1, r9, r6
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	461d      	mov	r5, r3
 8006e5a:	f04f 0600 	mov.w	r6, #0
 8006e5e:	196b      	adds	r3, r5, r5
 8006e60:	eb46 0406 	adc.w	r4, r6, r6
 8006e64:	461a      	mov	r2, r3
 8006e66:	4623      	mov	r3, r4
 8006e68:	f7f9 f9c4 	bl	80001f4 <__aeabi_uldivmod>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	461a      	mov	r2, r3
 8006e72:	4bb5      	ldr	r3, [pc, #724]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8006e74:	fba3 2302 	umull	r2, r3, r3, r2
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	fa1f f883 	uxth.w	r8, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	461d      	mov	r5, r3
 8006e86:	f04f 0600 	mov.w	r6, #0
 8006e8a:	46a9      	mov	r9, r5
 8006e8c:	46b2      	mov	sl, r6
 8006e8e:	eb19 0309 	adds.w	r3, r9, r9
 8006e92:	eb4a 040a 	adc.w	r4, sl, sl
 8006e96:	4699      	mov	r9, r3
 8006e98:	46a2      	mov	sl, r4
 8006e9a:	eb19 0905 	adds.w	r9, r9, r5
 8006e9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ea2:	f04f 0100 	mov.w	r1, #0
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006eb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eb6:	4689      	mov	r9, r1
 8006eb8:	4692      	mov	sl, r2
 8006eba:	eb19 0005 	adds.w	r0, r9, r5
 8006ebe:	eb4a 0106 	adc.w	r1, sl, r6
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	461d      	mov	r5, r3
 8006ec6:	f04f 0600 	mov.w	r6, #0
 8006eca:	196b      	adds	r3, r5, r5
 8006ecc:	eb46 0406 	adc.w	r4, r6, r6
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	f7f9 f98e 	bl	80001f4 <__aeabi_uldivmod>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	460c      	mov	r4, r1
 8006edc:	461a      	mov	r2, r3
 8006ede:	4b9a      	ldr	r3, [pc, #616]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8006ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2164      	movs	r1, #100	; 0x64
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a95      	ldr	r2, [pc, #596]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	4443      	add	r3, r8
 8006f08:	fa1f f883 	uxth.w	r8, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	461d      	mov	r5, r3
 8006f10:	f04f 0600 	mov.w	r6, #0
 8006f14:	46a9      	mov	r9, r5
 8006f16:	46b2      	mov	sl, r6
 8006f18:	eb19 0309 	adds.w	r3, r9, r9
 8006f1c:	eb4a 040a 	adc.w	r4, sl, sl
 8006f20:	4699      	mov	r9, r3
 8006f22:	46a2      	mov	sl, r4
 8006f24:	eb19 0905 	adds.w	r9, r9, r5
 8006f28:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f2c:	f04f 0100 	mov.w	r1, #0
 8006f30:	f04f 0200 	mov.w	r2, #0
 8006f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f40:	4689      	mov	r9, r1
 8006f42:	4692      	mov	sl, r2
 8006f44:	eb19 0005 	adds.w	r0, r9, r5
 8006f48:	eb4a 0106 	adc.w	r1, sl, r6
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	461d      	mov	r5, r3
 8006f50:	f04f 0600 	mov.w	r6, #0
 8006f54:	196b      	adds	r3, r5, r5
 8006f56:	eb46 0406 	adc.w	r4, r6, r6
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4623      	mov	r3, r4
 8006f5e:	f7f9 f949 	bl	80001f4 <__aeabi_uldivmod>
 8006f62:	4603      	mov	r3, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	461a      	mov	r2, r3
 8006f68:	4b77      	ldr	r3, [pc, #476]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8006f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	2164      	movs	r1, #100	; 0x64
 8006f72:	fb01 f303 	mul.w	r3, r1, r3
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	3332      	adds	r3, #50	; 0x32
 8006f7c:	4a72      	ldr	r2, [pc, #456]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8006f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	4443      	add	r3, r8
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	609a      	str	r2, [r3, #8]
}
 8006f96:	e0d2      	b.n	800713e <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	469a      	mov	sl, r3
 8006f9c:	f04f 0b00 	mov.w	fp, #0
 8006fa0:	46d0      	mov	r8, sl
 8006fa2:	46d9      	mov	r9, fp
 8006fa4:	eb18 0308 	adds.w	r3, r8, r8
 8006fa8:	eb49 0409 	adc.w	r4, r9, r9
 8006fac:	4698      	mov	r8, r3
 8006fae:	46a1      	mov	r9, r4
 8006fb0:	eb18 080a 	adds.w	r8, r8, sl
 8006fb4:	eb49 090b 	adc.w	r9, r9, fp
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006fc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006fc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006fcc:	4688      	mov	r8, r1
 8006fce:	4691      	mov	r9, r2
 8006fd0:	eb1a 0508 	adds.w	r5, sl, r8
 8006fd4:	eb4b 0609 	adc.w	r6, fp, r9
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	f04f 0300 	mov.w	r3, #0
 8006fe4:	f04f 0400 	mov.w	r4, #0
 8006fe8:	0094      	lsls	r4, r2, #2
 8006fea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006fee:	008b      	lsls	r3, r1, #2
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4623      	mov	r3, r4
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	f7f9 f8fc 	bl	80001f4 <__aeabi_uldivmod>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	461a      	mov	r2, r3
 8007002:	4b51      	ldr	r3, [pc, #324]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8007004:	fba3 2302 	umull	r2, r3, r3, r2
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	b29b      	uxth	r3, r3
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	fa1f f883 	uxth.w	r8, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	469b      	mov	fp, r3
 8007016:	f04f 0c00 	mov.w	ip, #0
 800701a:	46d9      	mov	r9, fp
 800701c:	46e2      	mov	sl, ip
 800701e:	eb19 0309 	adds.w	r3, r9, r9
 8007022:	eb4a 040a 	adc.w	r4, sl, sl
 8007026:	4699      	mov	r9, r3
 8007028:	46a2      	mov	sl, r4
 800702a:	eb19 090b 	adds.w	r9, r9, fp
 800702e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007032:	f04f 0100 	mov.w	r1, #0
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800703e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007042:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007046:	4689      	mov	r9, r1
 8007048:	4692      	mov	sl, r2
 800704a:	eb1b 0509 	adds.w	r5, fp, r9
 800704e:	eb4c 060a 	adc.w	r6, ip, sl
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	f04f 0400 	mov.w	r4, #0
 8007062:	0094      	lsls	r4, r2, #2
 8007064:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007068:	008b      	lsls	r3, r1, #2
 800706a:	461a      	mov	r2, r3
 800706c:	4623      	mov	r3, r4
 800706e:	4628      	mov	r0, r5
 8007070:	4631      	mov	r1, r6
 8007072:	f7f9 f8bf 	bl	80001f4 <__aeabi_uldivmod>
 8007076:	4603      	mov	r3, r0
 8007078:	460c      	mov	r4, r1
 800707a:	461a      	mov	r2, r3
 800707c:	4b32      	ldr	r3, [pc, #200]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 800707e:	fba3 1302 	umull	r1, r3, r3, r2
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	2164      	movs	r1, #100	; 0x64
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	3332      	adds	r3, #50	; 0x32
 8007090:	4a2d      	ldr	r2, [pc, #180]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	b29b      	uxth	r3, r3
 800709a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4443      	add	r3, r8
 80070a2:	fa1f f883 	uxth.w	r8, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	469b      	mov	fp, r3
 80070aa:	f04f 0c00 	mov.w	ip, #0
 80070ae:	46d9      	mov	r9, fp
 80070b0:	46e2      	mov	sl, ip
 80070b2:	eb19 0309 	adds.w	r3, r9, r9
 80070b6:	eb4a 040a 	adc.w	r4, sl, sl
 80070ba:	4699      	mov	r9, r3
 80070bc:	46a2      	mov	sl, r4
 80070be:	eb19 090b 	adds.w	r9, r9, fp
 80070c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80070c6:	f04f 0100 	mov.w	r1, #0
 80070ca:	f04f 0200 	mov.w	r2, #0
 80070ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070da:	4689      	mov	r9, r1
 80070dc:	4692      	mov	sl, r2
 80070de:	eb1b 0509 	adds.w	r5, fp, r9
 80070e2:	eb4c 060a 	adc.w	r6, ip, sl
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	4619      	mov	r1, r3
 80070ea:	f04f 0200 	mov.w	r2, #0
 80070ee:	f04f 0300 	mov.w	r3, #0
 80070f2:	f04f 0400 	mov.w	r4, #0
 80070f6:	0094      	lsls	r4, r2, #2
 80070f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070fc:	008b      	lsls	r3, r1, #2
 80070fe:	461a      	mov	r2, r3
 8007100:	4623      	mov	r3, r4
 8007102:	4628      	mov	r0, r5
 8007104:	4631      	mov	r1, r6
 8007106:	f7f9 f875 	bl	80001f4 <__aeabi_uldivmod>
 800710a:	4603      	mov	r3, r0
 800710c:	460c      	mov	r4, r1
 800710e:	461a      	mov	r2, r3
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8007112:	fba3 1302 	umull	r1, r3, r3, r2
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	2164      	movs	r1, #100	; 0x64
 800711a:	fb01 f303 	mul.w	r3, r1, r3
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	011b      	lsls	r3, r3, #4
 8007122:	3332      	adds	r3, #50	; 0x32
 8007124:	4a08      	ldr	r2, [pc, #32]	; (8007148 <LL_USART_SetBaudRate+0x34c>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	b29b      	uxth	r3, r3
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	b29b      	uxth	r3, r3
 8007134:	4443      	add	r3, r8
 8007136:	b29b      	uxth	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	609a      	str	r2, [r3, #8]
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007148:	51eb851f 	.word	0x51eb851f

0800714c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff fe12 	bl	8006d88 <LL_USART_IsEnabled>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d16c      	bne.n	8007244 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007172:	f023 030c 	bic.w	r3, r3, #12
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	6851      	ldr	r1, [r2, #4]
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	68d2      	ldr	r2, [r2, #12]
 800717e:	4311      	orrs	r1, r2
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	6912      	ldr	r2, [r2, #16]
 8007184:	4311      	orrs	r1, r2
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	6992      	ldr	r2, [r2, #24]
 800718a:	430a      	orrs	r2, r1
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff fe09 	bl	8006db0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fe16 	bl	8006dd6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80071aa:	f107 0308 	add.w	r3, r7, #8
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff fd22 	bl	8006bf8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a26      	ldr	r2, [pc, #152]	; (8007250 <LL_USART_Init+0x104>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d102      	bne.n	80071c2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	e02f      	b.n	8007222 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a23      	ldr	r2, [pc, #140]	; (8007254 <LL_USART_Init+0x108>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d102      	bne.n	80071d0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	e028      	b.n	8007222 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a21      	ldr	r2, [pc, #132]	; (8007258 <LL_USART_Init+0x10c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d102      	bne.n	80071de <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	e021      	b.n	8007222 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a1e      	ldr	r2, [pc, #120]	; (800725c <LL_USART_Init+0x110>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d102      	bne.n	80071ec <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e01a      	b.n	8007222 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a1c      	ldr	r2, [pc, #112]	; (8007260 <LL_USART_Init+0x114>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d102      	bne.n	80071fa <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	e013      	b.n	8007222 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a19      	ldr	r2, [pc, #100]	; (8007264 <LL_USART_Init+0x118>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d102      	bne.n	8007208 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	e00c      	b.n	8007222 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a17      	ldr	r2, [pc, #92]	; (8007268 <LL_USART_Init+0x11c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d102      	bne.n	8007216 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	e005      	b.n	8007222 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a14      	ldr	r2, [pc, #80]	; (800726c <LL_USART_Init+0x120>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d101      	bne.n	8007222 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00d      	beq.n	8007244 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8007230:	2300      	movs	r3, #0
 8007232:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	699a      	ldr	r2, [r3, #24]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69b9      	ldr	r1, [r7, #24]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff fddc 	bl	8006dfc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007244:	7ffb      	ldrb	r3, [r7, #31]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40011000 	.word	0x40011000
 8007254:	40004400 	.word	0x40004400
 8007258:	40004800 	.word	0x40004800
 800725c:	40011400 	.word	0x40011400
 8007260:	40004c00 	.word	0x40004c00
 8007264:	40005000 	.word	0x40005000
 8007268:	40007800 	.word	0x40007800
 800726c:	40007c00 	.word	0x40007c00

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4e0d      	ldr	r6, [pc, #52]	; (80072a8 <__libc_init_array+0x38>)
 8007274:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007276:	1ba4      	subs	r4, r4, r6
 8007278:	10a4      	asrs	r4, r4, #2
 800727a:	2500      	movs	r5, #0
 800727c:	42a5      	cmp	r5, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	4e0b      	ldr	r6, [pc, #44]	; (80072b0 <__libc_init_array+0x40>)
 8007282:	4c0c      	ldr	r4, [pc, #48]	; (80072b4 <__libc_init_array+0x44>)
 8007284:	f000 f870 	bl	8007368 <_init>
 8007288:	1ba4      	subs	r4, r4, r6
 800728a:	10a4      	asrs	r4, r4, #2
 800728c:	2500      	movs	r5, #0
 800728e:	42a5      	cmp	r5, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007298:	4798      	blx	r3
 800729a:	3501      	adds	r5, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072a2:	4798      	blx	r3
 80072a4:	3501      	adds	r5, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	08009268 	.word	0x08009268
 80072ac:	08009268 	.word	0x08009268
 80072b0:	08009268 	.word	0x08009268
 80072b4:	0800926c 	.word	0x0800926c

080072b8 <__itoa>:
 80072b8:	1e93      	subs	r3, r2, #2
 80072ba:	2b22      	cmp	r3, #34	; 0x22
 80072bc:	b510      	push	{r4, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	d904      	bls.n	80072cc <__itoa+0x14>
 80072c2:	2300      	movs	r3, #0
 80072c4:	700b      	strb	r3, [r1, #0]
 80072c6:	461c      	mov	r4, r3
 80072c8:	4620      	mov	r0, r4
 80072ca:	bd10      	pop	{r4, pc}
 80072cc:	2a0a      	cmp	r2, #10
 80072ce:	d109      	bne.n	80072e4 <__itoa+0x2c>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	da07      	bge.n	80072e4 <__itoa+0x2c>
 80072d4:	232d      	movs	r3, #45	; 0x2d
 80072d6:	700b      	strb	r3, [r1, #0]
 80072d8:	4240      	negs	r0, r0
 80072da:	2101      	movs	r1, #1
 80072dc:	4421      	add	r1, r4
 80072de:	f000 f805 	bl	80072ec <__utoa>
 80072e2:	e7f1      	b.n	80072c8 <__itoa+0x10>
 80072e4:	2100      	movs	r1, #0
 80072e6:	e7f9      	b.n	80072dc <__itoa+0x24>

080072e8 <itoa>:
 80072e8:	f7ff bfe6 	b.w	80072b8 <__itoa>

080072ec <__utoa>:
 80072ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ee:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <__utoa+0x78>)
 80072f0:	b08b      	sub	sp, #44	; 0x2c
 80072f2:	4605      	mov	r5, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	466e      	mov	r6, sp
 80072f8:	f103 0c20 	add.w	ip, r3, #32
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	6859      	ldr	r1, [r3, #4]
 8007300:	4637      	mov	r7, r6
 8007302:	c703      	stmia	r7!, {r0, r1}
 8007304:	3308      	adds	r3, #8
 8007306:	4563      	cmp	r3, ip
 8007308:	463e      	mov	r6, r7
 800730a:	d1f7      	bne.n	80072fc <__utoa+0x10>
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	791b      	ldrb	r3, [r3, #4]
 8007310:	713b      	strb	r3, [r7, #4]
 8007312:	1e93      	subs	r3, r2, #2
 8007314:	2b22      	cmp	r3, #34	; 0x22
 8007316:	6038      	str	r0, [r7, #0]
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	d904      	bls.n	8007328 <__utoa+0x3c>
 800731e:	7023      	strb	r3, [r4, #0]
 8007320:	461c      	mov	r4, r3
 8007322:	4620      	mov	r0, r4
 8007324:	b00b      	add	sp, #44	; 0x2c
 8007326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007328:	1e66      	subs	r6, r4, #1
 800732a:	fbb5 f0f2 	udiv	r0, r5, r2
 800732e:	af0a      	add	r7, sp, #40	; 0x28
 8007330:	fb02 5510 	mls	r5, r2, r0, r5
 8007334:	443d      	add	r5, r7
 8007336:	1c59      	adds	r1, r3, #1
 8007338:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800733c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007340:	4605      	mov	r5, r0
 8007342:	b968      	cbnz	r0, 8007360 <__utoa+0x74>
 8007344:	5460      	strb	r0, [r4, r1]
 8007346:	4423      	add	r3, r4
 8007348:	4622      	mov	r2, r4
 800734a:	1b19      	subs	r1, r3, r4
 800734c:	1b10      	subs	r0, r2, r4
 800734e:	4281      	cmp	r1, r0
 8007350:	dde7      	ble.n	8007322 <__utoa+0x36>
 8007352:	7811      	ldrb	r1, [r2, #0]
 8007354:	7818      	ldrb	r0, [r3, #0]
 8007356:	f802 0b01 	strb.w	r0, [r2], #1
 800735a:	f803 1901 	strb.w	r1, [r3], #-1
 800735e:	e7f4      	b.n	800734a <__utoa+0x5e>
 8007360:	460b      	mov	r3, r1
 8007362:	e7e2      	b.n	800732a <__utoa+0x3e>
 8007364:	08009238 	.word	0x08009238

08007368 <_init>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	bf00      	nop
 800736c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736e:	bc08      	pop	{r3}
 8007370:	469e      	mov	lr, r3
 8007372:	4770      	bx	lr

08007374 <_fini>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr
