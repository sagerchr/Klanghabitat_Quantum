
updating_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a98  08016d0c  08016d0c  00026d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a7a4  0802a7a4  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  0802a7a4  0802a7a4  0003a7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a7ac  0802a7ac  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a7ac  0802a7ac  0003a7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a7b0  0802a7b0  0003a7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0802a7b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b4a4  20000080  0802a834  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b524  0802a834  0004b524  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004675a  00000000  00000000  000400ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000867a  00000000  00000000  00086808  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025f8  00000000  00000000  0008ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023d0  00000000  00000000  00091480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039d60  00000000  00000000  00093850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002fe36  00000000  00000000  000cd5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123009  00000000  00000000  000fd3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002203ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1e4  00000000  00000000  0022046c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08016cf4 	.word	0x08016cf4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08016cf4 	.word	0x08016cf4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <vApplicationGetIdleTaskMemory+0x2c>)
 8000620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <vApplicationGetIdleTaskMemory+0x30>)
 8000626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	2000009c 	.word	0x2000009c
 8000640:	200000f0 	.word	0x200000f0

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 ff18 	bl	800147e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f825 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f9b7 	bl	80009c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000656:	f000 f997 	bl	8000988 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800065a:	f000 f937 	bl	80008cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800065e:	f000 f965 	bl	800092c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000662:	f000 f8b3 	bl	80007cc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000666:	f000 f901 	bl	800086c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <main+0x50>)
 800066c:	1d3c      	adds	r4, r7, #4
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f006 ff36 	bl	80074f2 <osThreadCreate>
 8000686:	4602      	mov	r2, r0
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <main+0x54>)
 800068a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800068c:	f006 ff1a 	bl	80074c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x4c>
 8000692:	bf00      	nop
 8000694:	08016d18 	.word	0x08016d18
 8000698:	2000468c 	.word	0x2000468c

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0b8      	sub	sp, #224	; 0xe0
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006a6:	2234      	movs	r2, #52	; 0x34
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f015 fbda 	bl	8015e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2290      	movs	r2, #144	; 0x90
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f015 fbcb 	bl	8015e64 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ce:	f003 f8d7 	bl	8003880 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <SystemClock_Config+0x124>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a3a      	ldr	r2, [pc, #232]	; (80007c0 <SystemClock_Config+0x124>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <SystemClock_Config+0x124>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ea:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <SystemClock_Config+0x128>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a35      	ldr	r2, [pc, #212]	; (80007c4 <SystemClock_Config+0x128>)
 80006f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <SystemClock_Config+0x128>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000702:	2301      	movs	r3, #1
 8000704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000708:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800070c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071e:	2304      	movs	r3, #4
 8000720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000724:	23d8      	movs	r3, #216	; 0xd8
 8000726:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000730:	2309      	movs	r3, #9
 8000732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800073a:	4618      	mov	r0, r3
 800073c:	f003 f900 	bl	8003940 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000746:	f000 fa23 	bl	8000b90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074a:	f003 f8a9 	bl	80038a0 <HAL_PWREx_EnableOverDrive>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000754:	f000 fa1c 	bl	8000b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800077a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800077e:	2107      	movs	r1, #7
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fb8b 	bl	8003e9c <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800078c:	f000 fa00 	bl	8000b90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <SystemClock_Config+0x12c>)
 8000792:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000794:	2300      	movs	r3, #0
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000798:	2300      	movs	r3, #0
 800079a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fda2 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80007b2:	f000 f9ed 	bl	8000b90 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	37e0      	adds	r7, #224	; 0xe0
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	00200140 	.word	0x00200140

080007cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_TIM3_Init+0x94>)
 80007ec:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <MX_TIM3_Init+0x98>)
 80007ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_TIM3_Init+0x94>)
 80007f2:	22d8      	movs	r2, #216	; 0xd8
 80007f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_TIM3_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100000;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_TIM3_Init+0x94>)
 80007fe:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <MX_TIM3_Init+0x9c>)
 8000800:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_TIM3_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_TIM3_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <MX_TIM3_Init+0x94>)
 8000810:	f004 f994 	bl	8004b3c <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800081a:	f000 f9b9 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_TIM3_Init+0x94>)
 800082c:	f004 fafc 	bl	8004e28 <HAL_TIM_ConfigClockSource>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 f9ab 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_TIM3_Init+0x94>)
 8000848:	f004 fd0a 	bl	8005260 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000852:	f000 f99d 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20004b14 	.word	0x20004b14
 8000864:	40000400 	.word	0x40000400
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_USART1_UART_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000878:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800087c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART1_UART_Init+0x58>)
 80008b0:	f004 fd82 	bl	80053b8 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 f969 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20004be8 	.word	0x20004be8
 80008c8:	40011000 	.word	0x40011000

080008cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART3_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART3_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART3_UART_Init+0x58>)
 8000910:	f004 fd52 	bl	80053b8 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 f939 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20004690 	.word	0x20004690
 8000928:	40004800 	.word	0x40004800

0800092c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2206      	movs	r2, #6
 800093c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2202      	movs	r2, #2
 8000942:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2202      	movs	r2, #2
 800094e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2201      	movs	r2, #1
 8000954:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2201      	movs	r2, #1
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	f002 fe3d 	bl	80035ee <HAL_PCD_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 f909 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20004710 	.word	0x20004710

08000988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_DMA_Init+0x38>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <MX_DMA_Init+0x38>)
 8000994:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_DMA_Init+0x38>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	203a      	movs	r0, #58	; 0x3a
 80009ac:	f000 fe6e 	bl	800168c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009b0:	203a      	movs	r0, #58	; 0x3a
 80009b2:	f000 fe87 	bl	80016c4 <HAL_NVIC_EnableIRQ>

}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a45      	ldr	r2, [pc, #276]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a3f      	ldr	r2, [pc, #252]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a39      	ldr	r2, [pc, #228]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a33      	ldr	r2, [pc, #204]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a70:	4821      	ldr	r0, [pc, #132]	; (8000af8 <MX_GPIO_Init+0x134>)
 8000a72:	f002 fd89 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	4820      	ldr	r0, [pc, #128]	; (8000afc <MX_GPIO_Init+0x138>)
 8000a7c:	f002 fd84 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_GPIO_Init+0x13c>)
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	481b      	ldr	r0, [pc, #108]	; (8000b04 <MX_GPIO_Init+0x140>)
 8000a96:	f002 fbcd 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a9a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_GPIO_Init+0x134>)
 8000ab4:	f002 fbbe 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	480b      	ldr	r0, [pc, #44]	; (8000afc <MX_GPIO_Init+0x138>)
 8000ad0:	f002 fbb0 	bl	8003234 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_GPIO_Init+0x138>)
 8000ae8:	f002 fba4 	bl	8003234 <HAL_GPIO_Init>

}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40021800 	.word	0x40021800
 8000b00:	10110000 	.word	0x10110000
 8000b04:	40020800 	.word	0x40020800

08000b08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b10:	f005 ff36 	bl	8006980 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 8000b14:	f00a fb6a 	bl	800b1ec <httpd_init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <StartDefaultTask+0x5c>)
 8000b1a:	f004 f83b 	bl	8004b94 <HAL_TIM_Base_Start_IT>
  //MY_FLASH_SetSectorAddrs(5, 0x08040000);
  echo_init();
 8000b1e:	f000 fb29 	bl	8001174 <echo_init>


  /* Infinite loop */
  for(;;)
  {
	  for(int i= 0; i <30; i++){
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e009      	b.n	8000b3c <StartDefaultTask+0x34>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000b28:	2101      	movs	r1, #1
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <StartDefaultTask+0x60>)
 8000b2c:	f002 fd45 	bl	80035ba <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8000b30:	20fa      	movs	r0, #250	; 0xfa
 8000b32:	f000 fcd1 	bl	80014d8 <HAL_Delay>
	  for(int i= 0; i <30; i++){
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b1d      	cmp	r3, #29
 8000b40:	ddf2      	ble.n	8000b28 <StartDefaultTask+0x20>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	e009      	b.n	8000b5c <StartDefaultTask+0x54>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <StartDefaultTask+0x60>)
 8000b4c:	f002 fd35 	bl	80035ba <HAL_GPIO_TogglePin>

		  HAL_Delay(50);
 8000b50:	2032      	movs	r0, #50	; 0x32
 8000b52:	f000 fcc1 	bl	80014d8 <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b09      	cmp	r3, #9
 8000b60:	ddf2      	ble.n	8000b48 <StartDefaultTask+0x40>
	  for(int i= 0; i <30; i++){
 8000b62:	e7de      	b.n	8000b22 <StartDefaultTask+0x1a>
 8000b64:	20004b14 	.word	0x20004b14
 8000b68:	40020400 	.word	0x40020400

08000b6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7e:	f000 fc8b 	bl	8001498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010000 	.word	0x40010000

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_MspInit+0x7c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <HAL_MspInit+0x7c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_MspInit+0x7c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_MspInit+0x7c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_MspInit+0x7c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_MspInit+0x7c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210a      	movs	r1, #10
 8000bda:	f06f 000b 	mvn.w	r0, #11
 8000bde:	f000 fd55 	bl	800168c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210a      	movs	r1, #10
 8000be6:	f06f 000a 	mvn.w	r0, #10
 8000bea:	f000 fd4f 	bl	800168c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	210a      	movs	r1, #10
 8000bf2:	f06f 0009 	mvn.w	r0, #9
 8000bf6:	f000 fd49 	bl	800168c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210a      	movs	r1, #10
 8000bfe:	f06f 0003 	mvn.w	r0, #3
 8000c02:	f000 fd43 	bl	800168c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	210f      	movs	r1, #15
 8000c0a:	f06f 0001 	mvn.w	r0, #1
 8000c0e:	f000 fd3d 	bl	800168c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_TIM_Base_MspInit+0x44>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d113      	bne.n	8000c5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_TIM_Base_MspInit+0x48>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a0c      	ldr	r2, [pc, #48]	; (8000c68 <HAL_TIM_Base_MspInit+0x48>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_TIM_Base_MspInit+0x48>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	201d      	movs	r0, #29
 8000c50:	f000 fd1c 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c54:	201d      	movs	r0, #29
 8000c56:	f000 fd35 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40000400 	.word	0x40000400
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a52      	ldr	r2, [pc, #328]	; (8000dd4 <HAL_UART_MspInit+0x168>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d170      	bne.n	8000d70 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8e:	4b52      	ldr	r3, [pc, #328]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a51      	ldr	r2, [pc, #324]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a4b      	ldr	r2, [pc, #300]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b49      	ldr	r3, [pc, #292]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4840      	ldr	r0, [pc, #256]	; (8000ddc <HAL_UART_MspInit+0x170>)
 8000cdc:	f002 faaa 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce0:	2340      	movs	r3, #64	; 0x40
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4838      	ldr	r0, [pc, #224]	; (8000ddc <HAL_UART_MspInit+0x170>)
 8000cfc:	f002 fa9a 	bl	8003234 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d00:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d02:	4a38      	ldr	r2, [pc, #224]	; (8000de4 <HAL_UART_MspInit+0x178>)
 8000d04:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d14:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d20:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d42:	4827      	ldr	r0, [pc, #156]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d44:	f000 fccc 	bl	80016e0 <HAL_DMA_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000d4e:	f7ff ff1f 	bl	8000b90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a22      	ldr	r2, [pc, #136]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d56:	66da      	str	r2, [r3, #108]	; 0x6c
 8000d58:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <HAL_UART_MspInit+0x174>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2025      	movs	r0, #37	; 0x25
 8000d64:	f000 fc92 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d68:	2025      	movs	r0, #37	; 0x25
 8000d6a:	f000 fcab 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d6e:	e02d      	b.n	8000dcc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <HAL_UART_MspInit+0x17c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d128      	bne.n	8000dcc <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_UART_MspInit+0x16c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_UART_MspInit+0x180>)
 8000dc8:	f002 fa34 	bl	8003234 <HAL_GPIO_Init>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	20004b88 	.word	0x20004b88
 8000de4:	40026440 	.word	0x40026440
 8000de8:	40004800 	.word	0x40004800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e10:	d141      	bne.n	8000e96 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e2a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <HAL_PCD_MspInit+0xb4>)
 8000e48:	f002 f9f4 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <HAL_PCD_MspInit+0xb4>)
 8000e62:	f002 f9e7 	bl	8003234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6353      	str	r3, [r2, #52]	; 0x34
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_PCD_MspInit+0xb0>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	2019      	movs	r0, #25
 8000ebe:	f000 fbe5 	bl	800168c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ec2:	2019      	movs	r0, #25
 8000ec4:	f000 fbfe 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <HAL_InitTick+0xa0>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <HAL_InitTick+0xa0>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_InitTick+0xa0>)
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee0:	f107 0210 	add.w	r2, r7, #16
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 f9ce 	bl	800428c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ef0:	f003 f9b8 	bl	8004264 <HAL_RCC_GetPCLK2Freq>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efc:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <HAL_InitTick+0xa4>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	0c9b      	lsrs	r3, r3, #18
 8000f04:	3b01      	subs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <HAL_InitTick+0xac>)
 8000f0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f2a:	f003 fe07 	bl	8004b3c <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d104      	bne.n	8000f3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f34:	4806      	ldr	r0, [pc, #24]	; (8000f50 <HAL_InitTick+0xa8>)
 8000f36:	f003 fe2d 	bl	8004b94 <HAL_TIM_Base_Start_IT>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3730      	adds	r7, #48	; 0x30
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	431bde83 	.word	0x431bde83
 8000f50:	20004c68 	.word	0x20004c68
 8000f54:	40010000 	.word	0x40010000

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f92:	f003 fe29 	bl	8004be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20004c68 	.word	0x20004c68

08000fa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <TIM3_IRQHandler+0x18>)
 8000fa6:	f003 fe1f 	bl	8004be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000faa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <TIM3_IRQHandler+0x1c>)
 8000fb0:	f002 fb03 	bl	80035ba <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20004b14 	.word	0x20004b14
 8000fbc:	40020400 	.word	0x40020400

08000fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <USART1_IRQHandler+0x10>)
 8000fc6:	f004 fbc7 	bl	8005758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20004be8 	.word	0x20004be8

08000fd4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA2_Stream2_IRQHandler+0x10>)
 8000fda:	f000 fd21 	bl	8001a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20004b88 	.word	0x20004b88

08000fe8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <ETH_IRQHandler+0x10>)
 8000fee:	f001 fb6f 	bl	80026d0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200065d0 	.word	0x200065d0

08000ffc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e00a      	b.n	8001024 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800100e:	f3af 8000 	nop.w
 8001012:	4601      	mov	r1, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf0      	blt.n	800100e <_read+0x12>
	}

return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e009      	b.n	800105c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf1      	blt.n	8001048 <_write+0x12>
	}
	return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_close>:

int _close(int file)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	return -1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001096:	605a      	str	r2, [r3, #4]
	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_isatty>:

int _isatty(int file)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	return 1;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d205      	bcs.n	8001114 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <_sbrk+0x6c>)
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001112:	e009      	b.n	8001128 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a06      	ldr	r2, [pc, #24]	; (800113c <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	20080000 	.word	0x20080000
 8001138:	00000400 	.word	0x00000400
 800113c:	200002f0 	.word	0x200002f0
 8001140:	2000b528 	.word	0x2000b528
 8001144:	2000b51c 	.word	0x2000b51c

08001148 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <SystemInit+0x28>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <SystemInit+0x28>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SystemInit+0x28>)
 800115e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001162:	609a      	str	r2, [r3, #8]
#endif
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <echo_init>:



void
echo_init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0




  echo_pcb = tcp_new();
 800117a:	f00d fa6d 	bl	800e658 <tcp_new>
 800117e:	4602      	mov	r2, r0
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <echo_init+0x58>)
 8001182:	601a      	str	r2, [r3, #0]
  if (echo_pcb != NULL)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <echo_init+0x58>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d01b      	beq.n	80011c4 <echo_init+0x50>
  {
    err_t err;

    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <echo_init+0x58>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2207      	movs	r2, #7
 8001192:	490f      	ldr	r1, [pc, #60]	; (80011d0 <echo_init+0x5c>)
 8001194:	4618      	mov	r0, r3
 8001196:	f00c f9bf 	bl	800d518 <tcp_bind>
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10e      	bne.n	80011c4 <echo_init+0x50>
    {
      echo_pcb = tcp_listen(echo_pcb);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <echo_init+0x58>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	21ff      	movs	r1, #255	; 0xff
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00c fa6b 	bl	800d688 <tcp_listen_with_backlog>
 80011b2:	4602      	mov	r2, r0
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <echo_init+0x58>)
 80011b6:	601a      	str	r2, [r3, #0]
      tcp_accept(echo_pcb, echo_accept);
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <echo_init+0x58>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4905      	ldr	r1, [pc, #20]	; (80011d4 <echo_init+0x60>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f00d fad8 	bl	800e774 <tcp_accept>
  }
  else
  {
    /* abort? output diagnostic? */
  }
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200002f4 	.word	0x200002f4
 80011d0:	0802a6f0 	.word	0x0802a6f0
 80011d4:	080011d9 	.word	0x080011d9

080011d8 <echo_accept>:
uint32_t count = 0;

err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	4613      	mov	r3, r2
 80011e4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 80011e6:	2101      	movs	r1, #1
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f00d f843 	bl	800e274 <tcp_setprio>

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
 80011ee:	200c      	movs	r0, #12
 80011f0:	f00a fb86 	bl	800b900 <mem_malloc>
 80011f4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d019      	beq.n	8001230 <echo_accept+0x58>
  {
    es->state = ES_ACCEPTED;
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2200      	movs	r2, #0
 800120c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 8001214:	6939      	ldr	r1, [r7, #16]
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f00d fa34 	bl	800e684 <tcp_arg>
    tcp_recv(newpcb, echo_recv);
 800121c:	4908      	ldr	r1, [pc, #32]	; (8001240 <echo_accept+0x68>)
 800121e:	68b8      	ldr	r0, [r7, #8]
 8001220:	f00d fa42 	bl	800e6a8 <tcp_recv>
    count = 0;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <echo_accept+0x6c>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
    ret_err = ERR_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]
 800122e:	e001      	b.n	8001234 <echo_accept+0x5c>

  }
  else
  {
    ret_err = ERR_MEM;
 8001230:	23ff      	movs	r3, #255	; 0xff
 8001232:	75fb      	strb	r3, [r7, #23]
  }
  //MY_FLASH_SetSectorAddrs(5, 0x08040000);
  return ret_err;
 8001234:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	08001249 	.word	0x08001249
 8001244:	200002f8 	.word	0x200002f8

08001248 <echo_recv>:

err_t
echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b08d      	sub	sp, #52	; 0x34
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	70fb      	strb	r3, [r7, #3]
 8001256:	466b      	mov	r3, sp
 8001258:	461d      	mov	r5, r3


	if (!p) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10a      	bne.n	8001276 <echo_recv+0x2e>
        tcp_close(tpcb);
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f00c f863 	bl	800d32c <tcp_close>
        tcp_recv(tpcb, NULL);
 8001266:	2100      	movs	r1, #0
 8001268:	68b8      	ldr	r0, [r7, #8]
 800126a:	f00d fa1d 	bl	800e6a8 <tcp_recv>
        HAL_FLASH_Lock();
 800126e:	f001 ffd1 	bl	8003214 <HAL_FLASH_Lock>
        return ERR_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e0ce      	b.n	8001414 <echo_recv+0x1cc>
    }


	char buffer[p->len];
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	8958      	ldrh	r0, [r3, #10]
 800127a:	4603      	mov	r3, r0
 800127c:	3b01      	subs	r3, #1
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001280:	b281      	uxth	r1, r0
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	f04f 0400 	mov.w	r4, #0
 800128e:	00d4      	lsls	r4, r2, #3
 8001290:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001294:	00cb      	lsls	r3, r1, #3
 8001296:	b281      	uxth	r1, r0
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	f04f 0400 	mov.w	r4, #0
 80012a4:	00d4      	lsls	r4, r2, #3
 80012a6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80012aa:	00cb      	lsls	r3, r1, #3
 80012ac:	4603      	mov	r3, r0
 80012ae:	3307      	adds	r3, #7
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	ebad 0d03 	sub.w	sp, sp, r3
 80012b8:	466b      	mov	r3, sp
 80012ba:	3300      	adds	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
	char buffer2[p->len];
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8958      	ldrh	r0, [r3, #10]
 80012c2:	4603      	mov	r3, r0
 80012c4:	3b01      	subs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	b281      	uxth	r1, r0
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	f04f 0400 	mov.w	r4, #0
 80012d6:	00d4      	lsls	r4, r2, #3
 80012d8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80012dc:	00cb      	lsls	r3, r1, #3
 80012de:	b281      	uxth	r1, r0
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	f04f 0400 	mov.w	r4, #0
 80012ec:	00d4      	lsls	r4, r2, #3
 80012ee:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80012f2:	00cb      	lsls	r3, r1, #3
 80012f4:	4603      	mov	r3, r0
 80012f6:	3307      	adds	r3, #7
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	ebad 0d03 	sub.w	sp, sp, r3
 8001300:	466b      	mov	r3, sp
 8001302:	3300      	adds	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    /* indicate that the packet has been received */
    tcp_recved(tpcb, p->len);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	895b      	ldrh	r3, [r3, #10]
 800130a:	4619      	mov	r1, r3
 800130c:	68b8      	ldr	r0, [r7, #8]
 800130e:	f00c fad1 	bl	800d8b4 <tcp_recved>
    /* in this case, we assume that the payload is < TCP_SND_BUF */

    //err = tcp_write(tpcb, p->payload, p->len, 1);
    /* free the received pbuf */

    pbuf_free(p);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f00b fb68 	bl	800c9e8 <pbuf_free>
    //MY_FLASH_WriteN(count, p->payload, p->len, DATA_TYPE_8);
    count = count + p->len;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	895b      	ldrh	r3, [r3, #10]
 800131c:	461a      	mov	r2, r3
 800131e:	4b40      	ldr	r3, [pc, #256]	; (8001420 <echo_recv+0x1d8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a3e      	ldr	r2, [pc, #248]	; (8001420 <echo_recv+0x1d8>)
 8001326:	6013      	str	r3, [r2, #0]

    for(int i=0;i<100;i++){
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
 800132c:	e007      	b.n	800133e <echo_recv+0xf6>
    	pData[i]=0x00;
 800132e:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <echo_recv+0x1dc>)
 8001330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001332:	4413      	add	r3, r2
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<100;i++){
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	3301      	adds	r3, #1
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	2b63      	cmp	r3, #99	; 0x63
 8001342:	ddf4      	ble.n	800132e <echo_recv+0xe6>
    }
    HAL_UART_DMAStop(&huart1);
 8001344:	4838      	ldr	r0, [pc, #224]	; (8001428 <echo_recv+0x1e0>)
 8001346:	f004 f99b 	bl	8005680 <HAL_UART_DMAStop>
    huart1.hdmarx->Instance->NDTR = 100;
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <echo_recv+0x1e0>)
 800134c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	605a      	str	r2, [r3, #4]
    HAL_UART_Receive_DMA(&huart1, pData, 100);
 8001354:	2264      	movs	r2, #100	; 0x64
 8001356:	4933      	ldr	r1, [pc, #204]	; (8001424 <echo_recv+0x1dc>)
 8001358:	4833      	ldr	r0, [pc, #204]	; (8001428 <echo_recv+0x1e0>)
 800135a:	f004 f90d 	bl	8005578 <HAL_UART_Receive_DMA>


    HAL_UART_Transmit(&huart1, p->payload, p->len, 10);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6859      	ldr	r1, [r3, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	895a      	ldrh	r2, [r3, #10]
 8001366:	230a      	movs	r3, #10
 8001368:	482f      	ldr	r0, [pc, #188]	; (8001428 <echo_recv+0x1e0>)
 800136a:	f004 f873 	bl	8005454 <HAL_UART_Transmit>
    char cmd[p->len];
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	8958      	ldrh	r0, [r3, #10]
 8001372:	466b      	mov	r3, sp
 8001374:	461e      	mov	r6, r3
 8001376:	4603      	mov	r3, r0
 8001378:	3b01      	subs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	b281      	uxth	r1, r0
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	f04f 0400 	mov.w	r4, #0
 800138a:	00d4      	lsls	r4, r2, #3
 800138c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001390:	00cb      	lsls	r3, r1, #3
 8001392:	b281      	uxth	r1, r0
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	f04f 0400 	mov.w	r4, #0
 80013a0:	00d4      	lsls	r4, r2, #3
 80013a2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80013a6:	00cb      	lsls	r3, r1, #3
 80013a8:	4603      	mov	r3, r0
 80013aa:	3307      	adds	r3, #7
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	ebad 0d03 	sub.w	sp, sp, r3
 80013b4:	466b      	mov	r3, sp
 80013b6:	3300      	adds	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
    memcpy(cmd, p->payload,p->len);
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	895b      	ldrh	r3, [r3, #10]
 80013c4:	461a      	mov	r2, r3
 80013c6:	f014 fd42 	bl	8015e4e <memcpy>

    if((cmd[1] == 0xD1)||(cmd[1] == 0xD0)||(cmd[1] == 0xF6)||(cmd[1] == 0x0F)){
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	785b      	ldrb	r3, [r3, #1]
 80013ce:	2bd1      	cmp	r3, #209	; 0xd1
 80013d0:	d00b      	beq.n	80013ea <echo_recv+0x1a2>
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	2bd0      	cmp	r3, #208	; 0xd0
 80013d8:	d007      	beq.n	80013ea <echo_recv+0x1a2>
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	2bf6      	cmp	r3, #246	; 0xf6
 80013e0:	d003      	beq.n	80013ea <echo_recv+0x1a2>
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	d105      	bne.n	80013f6 <echo_recv+0x1ae>
        while(pData[1] == 0x00){
 80013ea:	bf00      	nop
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <echo_recv+0x1dc>)
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0fb      	beq.n	80013ec <echo_recv+0x1a4>
    if((cmd[1] == 0xD1)||(cmd[1] == 0xD0)||(cmd[1] == 0xF6)||(cmd[1] == 0x0F)){
 80013f4:	e002      	b.n	80013fc <echo_recv+0x1b4>
        }
    }
    else
    {

        	HAL_Delay(10);
 80013f6:	200a      	movs	r0, #10
 80013f8:	f000 f86e 	bl	80014d8 <HAL_Delay>



    }

   tcp_write(tpcb, pData, pData[0]+1, 1);
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <echo_recv+0x1dc>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	3301      	adds	r3, #1
 8001404:	b29a      	uxth	r2, r3
 8001406:	2301      	movs	r3, #1
 8001408:	4906      	ldr	r1, [pc, #24]	; (8001424 <echo_recv+0x1dc>)
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f010 f876 	bl	80114fc <tcp_write>
       		char str[7];
       		sprintf(str, "%d;", count);
       		tcp_write(tpcb, str, 7, 1);
    	}
*/
    return ERR_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	46b5      	mov	sp, r6
 8001414:	46ad      	mov	sp, r5
}
 8001416:	4618      	mov	r0, r3
 8001418:	3734      	adds	r7, #52	; 0x34
 800141a:	46bd      	mov	sp, r7
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	bf00      	nop
 8001420:	200002f8 	.word	0x200002f8
 8001424:	20004628 	.word	0x20004628
 8001428:	20004be8 	.word	0x20004be8

0800142c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001430:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001432:	e003      	b.n	800143c <LoopCopyDataInit>

08001434 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001436:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001438:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800143a:	3104      	adds	r1, #4

0800143c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001440:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001442:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001444:	d3f6      	bcc.n	8001434 <CopyDataInit>
  ldr  r2, =_sbss
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001448:	e002      	b.n	8001450 <LoopFillZerobss>

0800144a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800144a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800144c:	f842 3b04 	str.w	r3, [r2], #4

08001450 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001452:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001454:	d3f9      	bcc.n	800144a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001456:	f7ff fe77 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145a:	f014 fcc5 	bl	8015de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f7ff f8f1 	bl	8000644 <main>
  bx  lr    
 8001462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001468:	0802a7b4 	.word	0x0802a7b4
  ldr  r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001470:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001474:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001478:	2000b524 	.word	0x2000b524

0800147c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC_IRQHandler>

0800147e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001482:	2003      	movs	r0, #3
 8001484:	f000 f8f7 	bl	8001676 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fd0d 	bl	8000ea8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800148e:	f7ff fb87 	bl	8000ba0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20004ca8 	.word	0x20004ca8

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20004ca8 	.word	0x20004ca8

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_Delay+0x40>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	4313      	orrs	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x40>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00
 8001560:	05fa0000 	.word	0x05fa0000

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff4c 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169e:	f7ff ff61 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	6978      	ldr	r0, [r7, #20]
 80016aa:	f7ff ffb1 	bl	8001610 <NVIC_EncodePriority>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff80 	bl	80015bc <__NVIC_SetPriority>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff54 	bl	8001580 <__NVIC_EnableIRQ>
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fee8 	bl	80014c0 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e099      	b.n	8001830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800171c:	e00f      	b.n	800173e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800171e:	f7ff fecf 	bl	80014c0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b05      	cmp	r3, #5
 800172a:	d908      	bls.n	800173e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2203      	movs	r2, #3
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e078      	b.n	8001830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e8      	bne.n	800171e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_DMA_Init+0x158>)
 8001758:	4013      	ands	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	2b04      	cmp	r3, #4
 8001796:	d107      	bne.n	80017a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4313      	orrs	r3, r2
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f023 0307 	bic.w	r3, r3, #7
 80017be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d117      	bne.n	8001802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00e      	beq.n	8001802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fb15 	bl	8001e14 <DMA_CheckFifoParam>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017fe:	2301      	movs	r3, #1
 8001800:	e016      	b.n	8001830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 facc 	bl	8001da8 <DMA_CalcBaseAndBitshift>
 8001810:	4603      	mov	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	223f      	movs	r2, #63	; 0x3f
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	e010803f 	.word	0xe010803f

0800183c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_DMA_Start_IT+0x26>
 800185e:	2302      	movs	r3, #2
 8001860:	e048      	b.n	80018f4 <HAL_DMA_Start_IT+0xb8>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d137      	bne.n	80018e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2202      	movs	r2, #2
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 fa5e 	bl	8001d4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	223f      	movs	r2, #63	; 0x3f
 8001896:	409a      	lsls	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0216 	orr.w	r2, r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0208 	orr.w	r2, r2, #8
 80018d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e005      	b.n	80018f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018ee:	2302      	movs	r3, #2
 80018f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800190a:	f7ff fdd9 	bl	80014c0 <HAL_GetTick>
 800190e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d008      	beq.n	800192e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e052      	b.n	80019d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0216 	bic.w	r2, r2, #22
 800193c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800194c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d103      	bne.n	800195e <HAL_DMA_Abort+0x62>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0208 	bic.w	r2, r2, #8
 800196c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197e:	e013      	b.n	80019a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001980:	f7ff fd9e 	bl	80014c0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b05      	cmp	r3, #5
 800198c:	d90c      	bls.n	80019a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2220      	movs	r2, #32
 8001992:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e015      	b.n	80019d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1e4      	bne.n	8001980 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	223f      	movs	r2, #63	; 0x3f
 80019bc:	409a      	lsls	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d004      	beq.n	80019fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00c      	b.n	8001a14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2205      	movs	r2, #5
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a2c:	4b92      	ldr	r3, [pc, #584]	; (8001c78 <HAL_DMA_IRQHandler+0x258>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a92      	ldr	r2, [pc, #584]	; (8001c7c <HAL_DMA_IRQHandler+0x25c>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0a9b      	lsrs	r3, r3, #10
 8001a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2208      	movs	r2, #8
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d01a      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0204 	bic.w	r2, r2, #4
 8001a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	2208      	movs	r2, #8
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	2201      	movs	r2, #1
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d012      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	2201      	movs	r2, #1
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	f043 0202 	orr.w	r2, r3, #2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d012      	beq.n	8001af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00b      	beq.n	8001af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af0:	f043 0204 	orr.w	r2, r3, #4
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afc:	2210      	movs	r2, #16
 8001afe:	409a      	lsls	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d043      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d03c      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d018      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d108      	bne.n	8001b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d024      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
 8001b4e:	e01f      	b.n	8001b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01b      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	4798      	blx	r3
 8001b60:	e016      	b.n	8001b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0208 	bic.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	2220      	movs	r2, #32
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 808e 	beq.w	8001cbe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8086 	beq.w	8001cbe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d136      	bne.n	8001c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0216 	bic.w	r2, r2, #22
 8001bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d103      	bne.n	8001bfa <HAL_DMA_IRQHandler+0x1da>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0208 	bic.w	r2, r2, #8
 8001c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	223f      	movs	r2, #63	; 0x3f
 8001c10:	409a      	lsls	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d07d      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	4798      	blx	r3
        }
        return;
 8001c36:	e078      	b.n	8001d2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d01c      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d108      	bne.n	8001c66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d030      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	4798      	blx	r3
 8001c64:	e02b      	b.n	8001cbe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d027      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
 8001c76:	e022      	b.n	8001cbe <HAL_DMA_IRQHandler+0x29e>
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10f      	bne.n	8001cae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0210 	bic.w	r2, r2, #16
 8001c9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d032      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d022      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3301      	adds	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d307      	bcc.n	8001d06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f2      	bne.n	8001cea <HAL_DMA_IRQHandler+0x2ca>
 8001d04:	e000      	b.n	8001d08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
 8001d28:	e000      	b.n	8001d2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d2a:	bf00      	nop
    }
  }
}
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop

08001d34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b40      	cmp	r3, #64	; 0x40
 8001d78:	d108      	bne.n	8001d8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d8a:	e007      	b.n	8001d9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3b10      	subs	r3, #16
 8001db8:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <DMA_CalcBaseAndBitshift+0x60>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <DMA_CalcBaseAndBitshift+0x64>)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d908      	bls.n	8001de8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <DMA_CalcBaseAndBitshift+0x68>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	1d1a      	adds	r2, r3, #4
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	659a      	str	r2, [r3, #88]	; 0x58
 8001de6:	e006      	b.n	8001df6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <DMA_CalcBaseAndBitshift+0x68>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	aaaaaaab 	.word	0xaaaaaaab
 8001e0c:	08019a98 	.word	0x08019a98
 8001e10:	fffffc00 	.word	0xfffffc00

08001e14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d11f      	bne.n	8001e6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d855      	bhi.n	8001ee0 <DMA_CheckFifoParam+0xcc>
 8001e34:	a201      	add	r2, pc, #4	; (adr r2, 8001e3c <DMA_CheckFifoParam+0x28>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e5f 	.word	0x08001e5f
 8001e44:	08001e4d 	.word	0x08001e4d
 8001e48:	08001ee1 	.word	0x08001ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d045      	beq.n	8001ee4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e5c:	e042      	b.n	8001ee4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e66:	d13f      	bne.n	8001ee8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6c:	e03c      	b.n	8001ee8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e76:	d121      	bne.n	8001ebc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d836      	bhi.n	8001eec <DMA_CheckFifoParam+0xd8>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <DMA_CheckFifoParam+0x70>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001e95 	.word	0x08001e95
 8001e88:	08001e9b 	.word	0x08001e9b
 8001e8c:	08001e95 	.word	0x08001e95
 8001e90:	08001ead 	.word	0x08001ead
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
      break;
 8001e98:	e02f      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d024      	beq.n	8001ef0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eaa:	e021      	b.n	8001ef0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eb4:	d11e      	bne.n	8001ef4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eba:	e01b      	b.n	8001ef4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d902      	bls.n	8001ec8 <DMA_CheckFifoParam+0xb4>
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d003      	beq.n	8001ece <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ec6:	e018      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      break;
 8001ecc:	e015      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00e      	beq.n	8001ef8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ede:	e00b      	b.n	8001ef8 <DMA_CheckFifoParam+0xe4>
      break;
 8001ee0:	bf00      	nop
 8001ee2:	e00a      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001ee4:	bf00      	nop
 8001ee6:	e008      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001ee8:	bf00      	nop
 8001eea:	e006      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001eec:	bf00      	nop
 8001eee:	e004      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001ef0:	bf00      	nop
 8001ef2:	e002      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;   
 8001ef4:	bf00      	nop
 8001ef6:	e000      	b.n	8001efa <DMA_CheckFifoParam+0xe6>
      break;
 8001ef8:	bf00      	nop
    }
  } 
  
  return status; 
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001f18:	4ba9      	ldr	r3, [pc, #676]	; (80021c0 <HAL_ETH_Init+0x2b8>)
 8001f1a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e183      	b.n	8002236 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f004 fe7a 	bl	8006c3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f48:	4b9e      	ldr	r3, [pc, #632]	; (80021c4 <HAL_ETH_Init+0x2bc>)
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	4a9d      	ldr	r2, [pc, #628]	; (80021c4 <HAL_ETH_Init+0x2bc>)
 8001f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f52:	6453      	str	r3, [r2, #68]	; 0x44
 8001f54:	4b9b      	ldr	r3, [pc, #620]	; (80021c4 <HAL_ETH_Init+0x2bc>)
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f60:	4b99      	ldr	r3, [pc, #612]	; (80021c8 <HAL_ETH_Init+0x2c0>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a98      	ldr	r2, [pc, #608]	; (80021c8 <HAL_ETH_Init+0x2c0>)
 8001f66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f6a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f6c:	4b96      	ldr	r3, [pc, #600]	; (80021c8 <HAL_ETH_Init+0x2c0>)
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4994      	ldr	r1, [pc, #592]	; (80021c8 <HAL_ETH_Init+0x2c0>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f90:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f92:	f7ff fa95 	bl	80014c0 <HAL_GetTick>
 8001f96:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f98:	e011      	b.n	8001fbe <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f9a:	f7ff fa91 	bl	80014c0 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fa8:	d909      	bls.n	8001fbe <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e13b      	b.n	8002236 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e4      	bne.n	8001f9a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f023 031c 	bic.w	r3, r3, #28
 8001fde:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fe0:	f002 f920 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8001fe4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4a78      	ldr	r2, [pc, #480]	; (80021cc <HAL_ETH_Init+0x2c4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d908      	bls.n	8002000 <HAL_ETH_Init+0xf8>
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4a77      	ldr	r2, [pc, #476]	; (80021d0 <HAL_ETH_Init+0x2c8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d804      	bhi.n	8002000 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f043 0308 	orr.w	r3, r3, #8
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e027      	b.n	8002050 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	4a73      	ldr	r2, [pc, #460]	; (80021d0 <HAL_ETH_Init+0x2c8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d908      	bls.n	800201a <HAL_ETH_Init+0x112>
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	4a72      	ldr	r2, [pc, #456]	; (80021d4 <HAL_ETH_Init+0x2cc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d804      	bhi.n	800201a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f043 030c 	orr.w	r3, r3, #12
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	e01a      	b.n	8002050 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4a6d      	ldr	r2, [pc, #436]	; (80021d4 <HAL_ETH_Init+0x2cc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d903      	bls.n	800202a <HAL_ETH_Init+0x122>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4a6c      	ldr	r2, [pc, #432]	; (80021d8 <HAL_ETH_Init+0x2d0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d911      	bls.n	800204e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_ETH_Init+0x2d0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d908      	bls.n	8002044 <HAL_ETH_Init+0x13c>
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_ETH_Init+0x2d4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d804      	bhi.n	8002044 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e005      	b.n	8002050 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	e000      	b.n	8002050 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800204e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002058:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800205c:	2100      	movs	r1, #0
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fc19 	bl	8002896 <HAL_ETH_WritePHYRegister>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800206e:	6939      	ldr	r1, [r7, #16]
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fdcf 	bl	8002c14 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0d9      	b.n	8002236 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002082:	20ff      	movs	r0, #255	; 0xff
 8002084:	f7ff fa28 	bl	80014d8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a7 	beq.w	80021e0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002092:	f7ff fa15 	bl	80014c0 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	461a      	mov	r2, r3
 800209e:	2101      	movs	r1, #1
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fb90 	bl	80027c6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80020a6:	f7ff fa0b 	bl	80014c0 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d90f      	bls.n	80020d8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020bc:	6939      	ldr	r1, [r7, #16]
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fda8 	bl	8002c14 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0ae      	b.n	8002236 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0da      	beq.n	8002098 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80020e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020e6:	2100      	movs	r1, #0
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fbd4 	bl	8002896 <HAL_ETH_WritePHYRegister>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020f8:	6939      	ldr	r1, [r7, #16]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fd8a 	bl	8002c14 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002108:	2301      	movs	r3, #1
 800210a:	e094      	b.n	8002236 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800210c:	f7ff f9d8 	bl	80014c0 <HAL_GetTick>
 8002110:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	461a      	mov	r2, r3
 8002118:	2101      	movs	r1, #1
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fb53 	bl	80027c6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002120:	f7ff f9ce 	bl	80014c0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d90f      	bls.n	8002152 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002136:	6939      	ldr	r1, [r7, #16]
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fd6b 	bl	8002c14 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e071      	b.n	8002236 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0da      	beq.n	8002112 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	461a      	mov	r2, r3
 8002162:	211f      	movs	r1, #31
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fb2e 	bl	80027c6 <HAL_ETH_ReadPHYRegister>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00b      	beq.n	8002188 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002174:	6939      	ldr	r1, [r7, #16]
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fd4c 	bl	8002c14 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002184:	2301      	movs	r3, #1
 8002186:	e056      	b.n	8002236 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	e002      	b.n	80021a2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	e037      	b.n	8002224 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e032      	b.n	8002224 <HAL_ETH_Init+0x31c>
 80021be:	bf00      	nop
 80021c0:	03938700 	.word	0x03938700
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40013800 	.word	0x40013800
 80021cc:	01312cff 	.word	0x01312cff
 80021d0:	02160ebf 	.word	0x02160ebf
 80021d4:	039386ff 	.word	0x039386ff
 80021d8:	05f5e0ff 	.word	0x05f5e0ff
 80021dc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	2100      	movs	r1, #0
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb4c 	bl	8002896 <HAL_ETH_WritePHYRegister>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002208:	6939      	ldr	r1, [r7, #16]
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fd02 	bl	8002c14 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00c      	b.n	8002236 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800221c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002220:	f7ff f95a 	bl	80014d8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002224:	6939      	ldr	r1, [r7, #16]
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fcf4 	bl	8002c14 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop

08002240 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ETH_DMATxDescListInit+0x20>
 800225c:	2302      	movs	r3, #2
 800225e:	e052      	b.n	8002306 <HAL_ETH_DMATxDescListInit+0xc6>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e030      	b.n	80022de <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	015b      	lsls	r3, r3, #5
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	4413      	add	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800228c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	461a      	mov	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d208      	bcs.n	80022d2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	015b      	lsls	r3, r3, #5
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4413      	add	r3, r2
 80022ca:	461a      	mov	r2, r3
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	e002      	b.n	80022d8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d3ca      	bcc.n	800227c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f241 0310 	movw	r3, #4112	; 0x1010
 80022f0:	440b      	add	r3, r1
 80022f2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002312:	b480      	push	{r7}
 8002314:	b087      	sub	sp, #28
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_ETH_DMARxDescListInit+0x20>
 800232e:	2302      	movs	r3, #2
 8002330:	e056      	b.n	80023e0 <HAL_ETH_DMARxDescListInit+0xce>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2202      	movs	r2, #2
 800233e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e034      	b.n	80023b8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	015b      	lsls	r3, r3, #5
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4413      	add	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800235e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002366:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	461a      	mov	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3b01      	subs	r3, #1
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	429a      	cmp	r2, r3
 8002398:	d208      	bcs.n	80023ac <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	015b      	lsls	r3, r3, #5
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	4413      	add	r3, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	e002      	b.n	80023b2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3c6      	bcc.n	800234e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	f241 030c 	movw	r3, #4108	; 0x100c
 80023ca:	440b      	add	r3, r1
 80023cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_ETH_TransmitFrame+0x24>
 800240c:	2302      	movs	r3, #2
 800240e:	e0cd      	b.n	80025ac <HAL_ETH_TransmitFrame+0x1c0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002436:	2301      	movs	r3, #1
 8002438:	e0b8      	b.n	80025ac <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	da09      	bge.n	8002458 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2212      	movs	r2, #18
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0a9      	b.n	80025ac <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800245e:	4293      	cmp	r3, r2
 8002460:	d915      	bls.n	800248e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	4a54      	ldr	r2, [pc, #336]	; (80025b8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002472:	fba3 1302 	umull	r1, r3, r3, r2
 8002476:	0a9b      	lsrs	r3, r3, #10
 8002478:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3301      	adds	r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e001      	b.n	8002492 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d11c      	bne.n	80024d2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80024a6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80024b2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024c2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	461a      	mov	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80024d0:	e04b      	b.n	800256a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	e044      	b.n	8002562 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024fc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002506:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3b01      	subs	r3, #1
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	429a      	cmp	r2, r3
 8002510:	d116      	bne.n	8002540 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002520:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	4a25      	ldr	r2, [pc, #148]	; (80025bc <HAL_ETH_TransmitFrame+0x1d0>)
 8002526:	fb02 f203 	mul.w	r2, r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	4413      	add	r3, r2
 800252e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002532:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800253e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800254e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	3301      	adds	r3, #1
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	429a      	cmp	r2, r3
 8002568:	d3b6      	bcc.n	80024d8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002572:	4413      	add	r3, r2
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f241 0314 	movw	r3, #4116	; 0x1014
 8002586:	4413      	add	r3, r2
 8002588:	2204      	movs	r2, #4
 800258a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	f241 0304 	movw	r3, #4100	; 0x1004
 8002594:	4413      	add	r3, r2
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	ac02b00b 	.word	0xac02b00b
 80025bc:	fffffa0c 	.word	0xfffffa0c

080025c0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e074      	b.n	80026c4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80025ea:	e05a      	b.n	80026a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d10d      	bne.n	800261e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
 800261c:	e041      	b.n	80026a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28
 8002642:	e02e      	b.n	80026a2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	2b01      	cmp	r3, #1
 800265c:	d103      	bne.n	8002666 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002672:	1f1a      	subs	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	461a      	mov	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	e010      	b.n	80026c4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db02      	blt.n	80026b2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d99c      	bls.n	80025ec <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f241 0314 	movw	r3, #4116	; 0x1014
 80026e0:	4413      	add	r3, r2
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d112      	bne.n	8002712 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f004 fb65 	bl	8006dbc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f241 0314 	movw	r3, #4116	; 0x1014
 80026fa:	4413      	add	r3, r2
 80026fc:	2240      	movs	r2, #64	; 0x40
 80026fe:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002710:	e01b      	b.n	800274a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f241 0314 	movw	r3, #4116	; 0x1014
 800271a:	4413      	add	r3, r2
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d111      	bne.n	800274a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f839 	bl	800279e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	f241 0314 	movw	r3, #4116	; 0x1014
 8002734:	4413      	add	r3, r2
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002752:	4413      	add	r3, r2
 8002754:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002758:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002762:	4413      	add	r3, r2
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800276e:	d112      	bne.n	8002796 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f81e 	bl	80027b2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	f241 0314 	movw	r3, #4116	; 0x1014
 800277e:	4413      	add	r3, r2
 8002780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002784:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	460b      	mov	r3, r1
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b82      	cmp	r3, #130	; 0x82
 80027e6:	d101      	bne.n	80027ec <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e050      	b.n	800288e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2282      	movs	r2, #130	; 0x82
 80027f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 031c 	and.w	r3, r3, #28
 8002802:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8a1b      	ldrh	r3, [r3, #16]
 8002808:	02db      	lsls	r3, r3, #11
 800280a:	b29b      	uxth	r3, r3
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0302 	bic.w	r3, r3, #2
 8002826:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002838:	f7fe fe42 	bl	80014c0 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800283e:	e015      	b.n	800286c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002840:	f7fe fe3e 	bl	80014c0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284e:	d309      	bcc.n	8002864 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e014      	b.n	800288e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e4      	bne.n	8002840 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	460b      	mov	r3, r1
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b42      	cmp	r3, #66	; 0x42
 80028b6:	d101      	bne.n	80028bc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
 80028ba:	e04e      	b.n	800295a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2242      	movs	r2, #66	; 0x42
 80028c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 031c 	and.w	r3, r3, #28
 80028d2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8a1b      	ldrh	r3, [r3, #16]
 80028d8:	02db      	lsls	r3, r3, #11
 80028da:	b29b      	uxth	r3, r3
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80028e2:	897b      	ldrh	r3, [r7, #10]
 80028e4:	019b      	lsls	r3, r3, #6
 80028e6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f043 0302 	orr.w	r3, r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002912:	f7fe fdd5 	bl	80014c0 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002918:	e015      	b.n	8002946 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800291a:	f7fe fdd1 	bl	80014c0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002928:	d309      	bcc.n	800293e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e00d      	b.n	800295a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e4      	bne.n	800291a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_ETH_Start+0x16>
 8002974:	2302      	movs	r3, #2
 8002976:	e01f      	b.n	80029b8 <HAL_ETH_Start+0x56>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fb45 	bl	8003018 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fb7c 	bl	800308c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fc13 	bl	80031c0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fbb0 	bl	8003100 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fbdd 	bl	8003160 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ETH_Stop+0x16>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e01f      	b.n	8002a16 <HAL_ETH_Stop+0x56>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fba2 	bl	8003130 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fbcf 	bl	8003190 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fb67 	bl	80030c6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fbe1 	bl	80031c0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fb27 	bl	8003052 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_ETH_ConfigMAC+0x1c>
 8002a38:	2302      	movs	r3, #2
 8002a3a:	e0e4      	b.n	8002c06 <HAL_ETH_ConfigMAC+0x1e6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80b1 	beq.w	8002bb6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <HAL_ETH_ConfigMAC+0x1f0>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002a6c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002a72:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002a78:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002a7e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002a84:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002a8a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002a90:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002a96:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002a9c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002aa2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002aa8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002aae:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7fe fd06 	bl	80014d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002adc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002ae2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002ae8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002aee:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002af4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002afa:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002b06:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002b08:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7fe fce0 	bl	80014d8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b28:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b32:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b42:	4013      	ands	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002b50:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002b56:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002b5c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002b62:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002b68:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7fe fca9 	bl	80014d8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f7fe fc96 	bl	80014d8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	61da      	str	r2, [r3, #28]
 8002bb4:	e01e      	b.n	8002bf4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002bc4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7fe fc76 	bl	80014d8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	ff20810f 	.word	0xff20810f

08002c14 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b0b0      	sub	sp, #192	; 0xc0
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c30:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c38:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002c42:	2300      	movs	r3, #0
 8002c44:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c60:	e001      	b.n	8002c66 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c6a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c70:	2300      	movs	r3, #0
 8002c72:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002c80:	2340      	movs	r3, #64	; 0x40
 8002c82:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002ce8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cec:	4bab      	ldr	r3, [pc, #684]	; (8002f9c <ETH_MACDMAConfig+0x388>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002cf8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002cfc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002d00:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002d06:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002d0a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002d0e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002d14:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002d18:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002d1c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002d1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002d20:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002d24:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002d28:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d3c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7fe fbc5 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d56:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d5c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002d60:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002d66:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002d6c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002d72:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002d78:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002d7c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002d84:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002d86:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7fe fba0 	bl	80014d8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002da0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002daa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002db4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002dc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dc4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002dc8:	4013      	ands	r3, r2
 8002dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dd2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002dd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002dd8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002dda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002dde:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002de4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002dea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002df0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002df2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e04:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e10:	2001      	movs	r0, #1
 8002e12:	f7fe fb61 	bl	80014d8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e1e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002e20:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002e24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f7fe fb4c 	bl	80014d8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e48:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e52:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002e58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e5c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002e72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e88:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002e92:	2300      	movs	r3, #0
 8002e94:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e9e:	4413      	add	r3, r2
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002ea6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <ETH_MACDMAConfig+0x38c>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002eb2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002eb4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002eb6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002eb8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002eba:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002ebc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002ebe:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002ec0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002ec2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002ec4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002ec6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002eca:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002ece:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002ed2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ef6:	4413      	add	r3, r2
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fe faea 	bl	80014d8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f12:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f18:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002f1c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f20:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002f24:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f28:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002f2a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002f2e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f3c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f7fe fac3 	bl	80014d8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f5e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10d      	bne.n	8002f84 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002f70:	4413      	add	r3, r2
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6811      	ldr	r1, [r2, #0]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <ETH_MACDMAConfig+0x390>)
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002f80:	440b      	add	r3, r1
 8002f82:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f80b 	bl	8002fa8 <ETH_MACAddressConfig>
}
 8002f92:	bf00      	nop
 8002f94:	37c0      	adds	r7, #192	; 0xc0
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	ff20810f 	.word	0xff20810f
 8002fa0:	f8de3f23 	.word	0xf8de3f23
 8002fa4:	00010040 	.word	0x00010040

08002fa8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3305      	adds	r3, #5
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	3204      	adds	r2, #4
 8002fc0:	7812      	ldrb	r2, [r2, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <ETH_MACAddressConfig+0x68>)
 8002fca:	4413      	add	r3, r2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3303      	adds	r3, #3
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	061a      	lsls	r2, r3, #24
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3302      	adds	r3, #2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	4313      	orrs	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	7812      	ldrb	r2, [r2, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <ETH_MACAddressConfig+0x6c>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6013      	str	r3, [r2, #0]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40028040 	.word	0x40028040
 8003014:	40028044 	.word	0x40028044

08003018 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0208 	orr.w	r2, r2, #8
 8003032:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800303c:	2001      	movs	r0, #1
 800303e:	f7fe fa4b 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	601a      	str	r2, [r3, #0]
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0208 	bic.w	r2, r2, #8
 800306c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003076:	2001      	movs	r0, #1
 8003078:	f7fe fa2e 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0204 	orr.w	r2, r2, #4
 80030a6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030b0:	2001      	movs	r0, #1
 80030b2:	f7fe fa11 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0204 	bic.w	r2, r2, #4
 80030e0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f7fe f9f4 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003110:	4413      	add	r3, r2
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6811      	ldr	r1, [r2, #0]
 8003118:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800311c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003120:	440b      	add	r3, r1
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003140:	4413      	add	r3, r2
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6811      	ldr	r1, [r2, #0]
 8003148:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800314c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003150:	440b      	add	r3, r1
 8003152:	601a      	str	r2, [r3, #0]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6811      	ldr	r1, [r2, #0]
 8003178:	f043 0202 	orr.w	r2, r3, #2
 800317c:	f241 0318 	movw	r3, #4120	; 0x1018
 8003180:	440b      	add	r3, r1
 8003182:	601a      	str	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	f241 0318 	movw	r3, #4120	; 0x1018
 80031a0:	4413      	add	r3, r2
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6811      	ldr	r1, [r2, #0]
 80031a8:	f023 0202 	bic.w	r2, r3, #2
 80031ac:	f241 0318 	movw	r3, #4120	; 0x1018
 80031b0:	440b      	add	r3, r1
 80031b2:	601a      	str	r2, [r3, #0]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80031d4:	4413      	add	r3, r2
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6811      	ldr	r1, [r2, #0]
 80031dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031e0:	f241 0318 	movw	r3, #4120	; 0x1018
 80031e4:	440b      	add	r3, r1
 80031e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80031f0:	4413      	add	r3, r2
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f7fe f96e 	bl	80014d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	f241 0318 	movw	r3, #4120	; 0x1018
 8003206:	440b      	add	r3, r1
 8003208:	601a      	str	r2, [r3, #0]
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_FLASH_Lock+0x1c>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_FLASH_Lock+0x1c>)
 800321e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003222:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40023c00 	.word	0x40023c00

08003234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	e175      	b.n	8003540 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003254:	2201      	movs	r2, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	f040 8164 	bne.w	800353a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d00b      	beq.n	8003292 <HAL_GPIO_Init+0x5e>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003286:	2b11      	cmp	r3, #17
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b12      	cmp	r3, #18
 8003290:	d130      	bne.n	80032f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2203      	movs	r2, #3
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c8:	2201      	movs	r2, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 0201 	and.w	r2, r3, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x100>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b12      	cmp	r3, #18
 8003332:	d123      	bne.n	800337c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	08da      	lsrs	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3208      	adds	r2, #8
 800333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	08da      	lsrs	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3208      	adds	r2, #8
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	2203      	movs	r2, #3
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0203 	and.w	r2, r3, #3
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80be 	beq.w	800353a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033be:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_GPIO_Init+0x320>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4a64      	ldr	r2, [pc, #400]	; (8003554 <HAL_GPIO_Init+0x320>)
 80033c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033c8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ca:	4b62      	ldr	r3, [pc, #392]	; (8003554 <HAL_GPIO_Init+0x320>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033d6:	4a60      	ldr	r2, [pc, #384]	; (8003558 <HAL_GPIO_Init+0x324>)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3302      	adds	r3, #2
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_GPIO_Init+0x328>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d037      	beq.n	8003472 <HAL_GPIO_Init+0x23e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a56      	ldr	r2, [pc, #344]	; (8003560 <HAL_GPIO_Init+0x32c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d031      	beq.n	800346e <HAL_GPIO_Init+0x23a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a55      	ldr	r2, [pc, #340]	; (8003564 <HAL_GPIO_Init+0x330>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d02b      	beq.n	800346a <HAL_GPIO_Init+0x236>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a54      	ldr	r2, [pc, #336]	; (8003568 <HAL_GPIO_Init+0x334>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d025      	beq.n	8003466 <HAL_GPIO_Init+0x232>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a53      	ldr	r2, [pc, #332]	; (800356c <HAL_GPIO_Init+0x338>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01f      	beq.n	8003462 <HAL_GPIO_Init+0x22e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_GPIO_Init+0x33c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d019      	beq.n	800345e <HAL_GPIO_Init+0x22a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_GPIO_Init+0x340>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_GPIO_Init+0x226>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a50      	ldr	r2, [pc, #320]	; (8003578 <HAL_GPIO_Init+0x344>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00d      	beq.n	8003456 <HAL_GPIO_Init+0x222>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4f      	ldr	r2, [pc, #316]	; (800357c <HAL_GPIO_Init+0x348>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d007      	beq.n	8003452 <HAL_GPIO_Init+0x21e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4e      	ldr	r2, [pc, #312]	; (8003580 <HAL_GPIO_Init+0x34c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <HAL_GPIO_Init+0x21a>
 800344a:	2309      	movs	r3, #9
 800344c:	e012      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800344e:	230a      	movs	r3, #10
 8003450:	e010      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003452:	2308      	movs	r3, #8
 8003454:	e00e      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003456:	2307      	movs	r3, #7
 8003458:	e00c      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800345a:	2306      	movs	r3, #6
 800345c:	e00a      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800345e:	2305      	movs	r3, #5
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003462:	2304      	movs	r3, #4
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x240>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x240>
 8003472:	2300      	movs	r3, #0
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003484:	4934      	ldr	r1, [pc, #208]	; (8003558 <HAL_GPIO_Init+0x324>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003492:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <HAL_GPIO_Init+0x350>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b6:	4a33      	ldr	r2, [pc, #204]	; (8003584 <HAL_GPIO_Init+0x350>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034bc:	4b31      	ldr	r3, [pc, #196]	; (8003584 <HAL_GPIO_Init+0x350>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e0:	4a28      	ldr	r2, [pc, #160]	; (8003584 <HAL_GPIO_Init+0x350>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e6:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_GPIO_Init+0x350>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_GPIO_Init+0x350>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003510:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <HAL_GPIO_Init+0x350>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003534:	4a13      	ldr	r2, [pc, #76]	; (8003584 <HAL_GPIO_Init+0x350>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	f67f ae86 	bls.w	8003254 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003548:	bf00      	nop
 800354a:	3724      	adds	r7, #36	; 0x24
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40023800 	.word	0x40023800
 8003558:	40013800 	.word	0x40013800
 800355c:	40020000 	.word	0x40020000
 8003560:	40020400 	.word	0x40020400
 8003564:	40020800 	.word	0x40020800
 8003568:	40020c00 	.word	0x40020c00
 800356c:	40021000 	.word	0x40021000
 8003570:	40021400 	.word	0x40021400
 8003574:	40021800 	.word	0x40021800
 8003578:	40021c00 	.word	0x40021c00
 800357c:	40022000 	.word	0x40022000
 8003580:	40022400 	.word	0x40022400
 8003584:	40013c00 	.word	0x40013c00

08003588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
 8003594:	4613      	mov	r3, r2
 8003596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003598:	787b      	ldrb	r3, [r7, #1]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80035a4:	e003      	b.n	80035ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	041a      	lsls	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	619a      	str	r2, [r3, #24]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035d2:	887b      	ldrh	r3, [r7, #2]
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80035da:	e002      	b.n	80035e2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035dc:	887a      	ldrh	r2, [r7, #2]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	619a      	str	r2, [r3, #24]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f0:	b08f      	sub	sp, #60	; 0x3c
 80035f2:	af0a      	add	r7, sp, #40	; 0x28
 80035f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e116      	b.n	800382e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fbe8 	bl	8000df0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2203      	movs	r2, #3
 8003624:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f002 ff46 	bl	80064d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	687e      	ldr	r6, [r7, #4]
 800364c:	466d      	mov	r5, sp
 800364e:	f106 0410 	add.w	r4, r6, #16
 8003652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800365e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003662:	1d33      	adds	r3, r6, #4
 8003664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f002 feda 	bl	8006420 <USB_CoreInit>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0d7      	b.n	800382e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f002 ff34 	bl	80064f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	e04a      	b.n	8003726 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	333d      	adds	r3, #61	; 0x3d
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	333c      	adds	r3, #60	; 0x3c
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036b8:	7bfa      	ldrb	r2, [r7, #15]
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	b298      	uxth	r0, r3
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3342      	adds	r3, #66	; 0x42
 80036cc:	4602      	mov	r2, r0
 80036ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	333f      	adds	r3, #63	; 0x3f
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3344      	adds	r3, #68	; 0x44
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3348      	adds	r3, #72	; 0x48
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3350      	adds	r3, #80	; 0x50
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	3301      	adds	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	d3af      	bcc.n	8003690 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003730:	2300      	movs	r3, #0
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	e044      	b.n	80037c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003778:	7bfa      	ldrb	r2, [r7, #15]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037a4:	7bfa      	ldrb	r2, [r7, #15]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	3301      	adds	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3b5      	bcc.n	8003736 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	687e      	ldr	r6, [r7, #4]
 80037d2:	466d      	mov	r5, sp
 80037d4:	f106 0410 	add.w	r4, r6, #16
 80037d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80037e8:	1d33      	adds	r3, r6, #4
 80037ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ec:	6838      	ldr	r0, [r7, #0]
 80037ee:	f002 feab 	bl	8006548 <USB_DevInit>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e014      	b.n	800382e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	2b01      	cmp	r3, #1
 800381a:	d102      	bne.n	8003822 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f80b 	bl	8003838 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f003 f85d 	bl	80068e6 <USB_DevDisconnect>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003838 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_PCDEx_ActivateLPM+0x44>)
 8003868:	4313      	orrs	r3, r2
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	10000003 	.word	0x10000003

08003880 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40007000 	.word	0x40007000

080038a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_PWREx_EnableOverDrive+0x98>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038ce:	f7fd fdf7 	bl	80014c0 <HAL_GetTick>
 80038d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038d4:	e009      	b.n	80038ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038d6:	f7fd fdf3 	bl	80014c0 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e4:	d901      	bls.n	80038ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e022      	b.n	8003930 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d1ee      	bne.n	80038d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0f      	ldr	r2, [pc, #60]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003902:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003904:	f7fd fddc 	bl	80014c0 <HAL_GetTick>
 8003908:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800390a:	e009      	b.n	8003920 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800390c:	f7fd fdd8 	bl	80014c0 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800391a:	d901      	bls.n	8003920 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e007      	b.n	8003930 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800392c:	d1ee      	bne.n	800390c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000

08003940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003948:	2300      	movs	r3, #0
 800394a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e29b      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8087 	beq.w	8003a72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003964:	4b96      	ldr	r3, [pc, #600]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b04      	cmp	r3, #4
 800396e:	d00c      	beq.n	800398a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003970:	4b93      	ldr	r3, [pc, #588]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d112      	bne.n	80039a2 <HAL_RCC_OscConfig+0x62>
 800397c:	4b90      	ldr	r3, [pc, #576]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003988:	d10b      	bne.n	80039a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398a:	4b8d      	ldr	r3, [pc, #564]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d06c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x130>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d168      	bne.n	8003a70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e275      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x7a>
 80039ac:	4b84      	ldr	r3, [pc, #528]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a83      	ldr	r2, [pc, #524]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e02e      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x9c>
 80039c2:	4b7f      	ldr	r3, [pc, #508]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7e      	ldr	r2, [pc, #504]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b7c      	ldr	r3, [pc, #496]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7b      	ldr	r2, [pc, #492]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0xc0>
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a72      	ldr	r2, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 8003a00:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a6e      	ldr	r2, [pc, #440]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6b      	ldr	r2, [pc, #428]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fd fd4e 	bl	80014c0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fd fd4a 	bl	80014c0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e229      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b61      	ldr	r3, [pc, #388]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xe8>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fd fd3a 	bl	80014c0 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fd fd36 	bl	80014c0 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e215      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x110>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d069      	beq.n	8003b52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7e:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x190>
 8003a96:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x17a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1e9      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	493d      	ldr	r1, [pc, #244]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e040      	b.n	8003b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fcec 	bl	80014c0 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fd fce8 	bl	80014c0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1c7      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4929      	ldr	r1, [pc, #164]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
 8003b1e:	e018      	b.n	8003b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fcc8 	bl	80014c0 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fd fcc4 	bl	80014c0 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1a3      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d038      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d019      	beq.n	8003b9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fd fca5 	bl	80014c0 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fd fca1 	bl	80014c0 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e180      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x23a>
 8003b98:	e01a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fd fc8b 	bl	80014c0 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fd fc87 	bl	80014c0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d903      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e166      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
 8003bc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc4:	4b92      	ldr	r3, [pc, #584]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a4 	beq.w	8003d26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	4b89      	ldr	r3, [pc, #548]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a88      	ldr	r2, [pc, #544]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b86      	ldr	r3, [pc, #536]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b83      	ldr	r3, [pc, #524]	; (8003e14 <HAL_RCC_OscConfig+0x4d4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c12:	4b80      	ldr	r3, [pc, #512]	; (8003e14 <HAL_RCC_OscConfig+0x4d4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7f      	ldr	r2, [pc, #508]	; (8003e14 <HAL_RCC_OscConfig+0x4d4>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fd fc4f 	bl	80014c0 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fd fc4b 	bl	80014c0 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b64      	cmp	r3, #100	; 0x64
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e12a      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c38:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x4d4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x31a>
 8003c4c:	4b70      	ldr	r3, [pc, #448]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	e02d      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x33c>
 8003c62:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a6a      	ldr	r2, [pc, #424]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6e:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	e01c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCC_OscConfig+0x35e>
 8003c84:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a61      	ldr	r2, [pc, #388]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c90:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	e00b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a5b      	ldr	r2, [pc, #364]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a58      	ldr	r2, [pc, #352]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fd fbff 	bl	80014c0 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd fbfb 	bl	80014c0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0d8      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ee      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x386>
 8003ce8:	e014      	b.n	8003d14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fd fbe9 	bl	80014c0 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fd fbe5 	bl	80014c0 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0c2      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d08:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ee      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d105      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80ae 	beq.w	8003e8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d06d      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d14b      	bne.n	8003ddc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d44:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a31      	ldr	r2, [pc, #196]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd fbb6 	bl	80014c0 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fd fbb2 	bl	80014c0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e091      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	019b      	lsls	r3, r3, #6
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	071b      	lsls	r3, r3, #28
 8003da2:	491b      	ldr	r1, [pc, #108]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fb84 	bl	80014c0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fd fb80 	bl	80014c0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e05f      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x47c>
 8003dda:	e057      	b.n	8003e8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fd fb6a 	bl	80014c0 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd fb66 	bl	80014c0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e045      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4b0>
 8003e0e:	e03d      	b.n	8003e8c <HAL_RCC_OscConfig+0x54c>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <HAL_RCC_OscConfig+0x558>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d030      	beq.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d129      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d122      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d119      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10f      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d107      	bne.n	8003e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800

08003e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0d0      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d910      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 020f 	bic.w	r2, r3, #15
 8003eca:	4965      	ldr	r1, [pc, #404]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d020      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003efc:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f14:	4b53      	ldr	r3, [pc, #332]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a52      	ldr	r2, [pc, #328]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f20:	4b50      	ldr	r3, [pc, #320]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	494d      	ldr	r1, [pc, #308]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d040      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d115      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07f      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e073      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e06b      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f023 0203 	bic.w	r2, r3, #3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4936      	ldr	r1, [pc, #216]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f90:	f7fd fa96 	bl	80014c0 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7fd fa92 	bl	80014c0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e053      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 020c 	and.w	r2, r3, #12
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1eb      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d210      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 020f 	bic.w	r2, r3, #15
 8003fd6:	4922      	ldr	r1, [pc, #136]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e032      	b.n	8004056 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	4916      	ldr	r1, [pc, #88]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	490e      	ldr	r1, [pc, #56]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402e:	f000 f821 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8004032:	4601      	mov	r1, r0
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	4a0a      	ldr	r2, [pc, #40]	; (8004068 <HAL_RCC_ClockConfig+0x1cc>)
 8004040:	5cd3      	ldrb	r3, [r2, r3]
 8004042:	fa21 f303 	lsr.w	r3, r1, r3
 8004046:	4a09      	ldr	r2, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1d0>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_ClockConfig+0x1d4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc ff2a 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023c00 	.word	0x40023c00
 8004064:	40023800 	.word	0x40023800
 8004068:	08019a80 	.word	0x08019a80
 800406c:	20000000 	.word	0x20000000
 8004070:	20000004 	.word	0x20000004

08004074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	2300      	movs	r3, #0
 8004084:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800408a:	4b63      	ldr	r3, [pc, #396]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b04      	cmp	r3, #4
 8004094:	d007      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x32>
 8004096:	2b08      	cmp	r3, #8
 8004098:	d008      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x38>
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 80b4 	bne.w	8004208 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040a0:	4b5e      	ldr	r3, [pc, #376]	; (800421c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80040a2:	60bb      	str	r3, [r7, #8]
      break;
 80040a4:	e0b3      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a6:	4b5e      	ldr	r3, [pc, #376]	; (8004220 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80040a8:	60bb      	str	r3, [r7, #8]
      break;
 80040aa:	e0b0      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ac:	4b5a      	ldr	r3, [pc, #360]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040b6:	4b58      	ldr	r3, [pc, #352]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04a      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b55      	ldr	r3, [pc, #340]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	f04f 0400 	mov.w	r4, #0
 80040cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	ea03 0501 	and.w	r5, r3, r1
 80040d8:	ea04 0602 	and.w	r6, r4, r2
 80040dc:	4629      	mov	r1, r5
 80040de:	4632      	mov	r2, r6
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	f04f 0400 	mov.w	r4, #0
 80040e8:	0154      	lsls	r4, r2, #5
 80040ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040ee:	014b      	lsls	r3, r1, #5
 80040f0:	4619      	mov	r1, r3
 80040f2:	4622      	mov	r2, r4
 80040f4:	1b49      	subs	r1, r1, r5
 80040f6:	eb62 0206 	sbc.w	r2, r2, r6
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	f04f 0400 	mov.w	r4, #0
 8004102:	0194      	lsls	r4, r2, #6
 8004104:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004108:	018b      	lsls	r3, r1, #6
 800410a:	1a5b      	subs	r3, r3, r1
 800410c:	eb64 0402 	sbc.w	r4, r4, r2
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	00e2      	lsls	r2, r4, #3
 800411a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800411e:	00d9      	lsls	r1, r3, #3
 8004120:	460b      	mov	r3, r1
 8004122:	4614      	mov	r4, r2
 8004124:	195b      	adds	r3, r3, r5
 8004126:	eb44 0406 	adc.w	r4, r4, r6
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	0262      	lsls	r2, r4, #9
 8004134:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004138:	0259      	lsls	r1, r3, #9
 800413a:	460b      	mov	r3, r1
 800413c:	4614      	mov	r4, r2
 800413e:	4618      	mov	r0, r3
 8004140:	4621      	mov	r1, r4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f04f 0400 	mov.w	r4, #0
 8004148:	461a      	mov	r2, r3
 800414a:	4623      	mov	r3, r4
 800414c:	f7fc f8e0 	bl	8000310 <__aeabi_uldivmod>
 8004150:	4603      	mov	r3, r0
 8004152:	460c      	mov	r4, r1
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	e049      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004158:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	099b      	lsrs	r3, r3, #6
 800415e:	f04f 0400 	mov.w	r4, #0
 8004162:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	ea03 0501 	and.w	r5, r3, r1
 800416e:	ea04 0602 	and.w	r6, r4, r2
 8004172:	4629      	mov	r1, r5
 8004174:	4632      	mov	r2, r6
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	f04f 0400 	mov.w	r4, #0
 800417e:	0154      	lsls	r4, r2, #5
 8004180:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004184:	014b      	lsls	r3, r1, #5
 8004186:	4619      	mov	r1, r3
 8004188:	4622      	mov	r2, r4
 800418a:	1b49      	subs	r1, r1, r5
 800418c:	eb62 0206 	sbc.w	r2, r2, r6
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	f04f 0400 	mov.w	r4, #0
 8004198:	0194      	lsls	r4, r2, #6
 800419a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800419e:	018b      	lsls	r3, r1, #6
 80041a0:	1a5b      	subs	r3, r3, r1
 80041a2:	eb64 0402 	sbc.w	r4, r4, r2
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	00e2      	lsls	r2, r4, #3
 80041b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041b4:	00d9      	lsls	r1, r3, #3
 80041b6:	460b      	mov	r3, r1
 80041b8:	4614      	mov	r4, r2
 80041ba:	195b      	adds	r3, r3, r5
 80041bc:	eb44 0406 	adc.w	r4, r4, r6
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	02a2      	lsls	r2, r4, #10
 80041ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041ce:	0299      	lsls	r1, r3, #10
 80041d0:	460b      	mov	r3, r1
 80041d2:	4614      	mov	r4, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	4621      	mov	r1, r4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f04f 0400 	mov.w	r4, #0
 80041de:	461a      	mov	r2, r3
 80041e0:	4623      	mov	r3, r4
 80041e2:	f7fc f895 	bl	8000310 <__aeabi_uldivmod>
 80041e6:	4603      	mov	r3, r0
 80041e8:	460c      	mov	r4, r1
 80041ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	60bb      	str	r3, [r7, #8]
      break;
 8004206:	e002      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800420a:	60bb      	str	r3, [r7, #8]
      break;
 800420c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420e:	68bb      	ldr	r3, [r7, #8]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004218:	40023800 	.word	0x40023800
 800421c:	00f42400 	.word	0x00f42400
 8004220:	007a1200 	.word	0x007a1200

08004224 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_RCC_GetHCLKFreq+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000000 	.word	0x20000000

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004240:	f7ff fff0 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004244:	4601      	mov	r1, r0
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	0a9b      	lsrs	r3, r3, #10
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4a03      	ldr	r2, [pc, #12]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004252:	5cd3      	ldrb	r3, [r2, r3]
 8004254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40023800 	.word	0x40023800
 8004260:	08019a90 	.word	0x08019a90

08004264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004268:	f7ff ffdc 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 800426c:	4601      	mov	r1, r0
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	0b5b      	lsrs	r3, r3, #13
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	4a03      	ldr	r2, [pc, #12]	; (8004288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800427a:	5cd3      	ldrb	r3, [r2, r3]
 800427c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40023800 	.word	0x40023800
 8004288:	08019a90 	.word	0x08019a90

0800428c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	220f      	movs	r2, #15
 800429a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800429c:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_RCC_GetClockConfig+0x5c>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0203 	and.w	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <HAL_RCC_GetClockConfig+0x5c>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <HAL_RCC_GetClockConfig+0x5c>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_GetClockConfig+0x5c>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	08db      	lsrs	r3, r3, #3
 80042c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <HAL_RCC_GetClockConfig+0x60>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	601a      	str	r2, [r3, #0]
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40023c00 	.word	0x40023c00

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004318:	4b69      	ldr	r3, [pc, #420]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a68      	ldr	r2, [pc, #416]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004322:	6093      	str	r3, [r2, #8]
 8004324:	4b66      	ldr	r3, [pc, #408]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	4964      	ldr	r1, [pc, #400]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800433a:	2301      	movs	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d017      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800434a:	4b5d      	ldr	r3, [pc, #372]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	4959      	ldr	r1, [pc, #356]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004368:	d101      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800436a:	2301      	movs	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d017      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004386:	4b4e      	ldr	r3, [pc, #312]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	494a      	ldr	r1, [pc, #296]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a4:	d101      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043c2:	2301      	movs	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 808b 	beq.w	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043d4:	4b3a      	ldr	r3, [pc, #232]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	4a39      	ldr	r2, [pc, #228]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043de:	6413      	str	r3, [r2, #64]	; 0x40
 80043e0:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043ec:	4b35      	ldr	r3, [pc, #212]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a34      	ldr	r2, [pc, #208]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f8:	f7fd f862 	bl	80014c0 <HAL_GetTick>
 80043fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fd f85e 	bl	80014c0 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e38d      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004412:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d035      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	429a      	cmp	r2, r3
 800443a:	d02e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800443c:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004446:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444a:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004450:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004452:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800445e:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004464:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d114      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd f826 	bl	80014c0 <HAL_GetTick>
 8004474:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004476:	e00a      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fd f822 	bl	80014c0 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e34f      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0ee      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a6:	d111      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044b4:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044b6:	400b      	ands	r3, r1
 80044b8:	4901      	ldr	r1, [pc, #4]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
 80044be:	e00b      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40007000 	.word	0x40007000
 80044c8:	0ffffcff 	.word	0x0ffffcff
 80044cc:	4bb3      	ldr	r3, [pc, #716]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4ab2      	ldr	r2, [pc, #712]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044d6:	6093      	str	r3, [r2, #8]
 80044d8:	4bb0      	ldr	r3, [pc, #704]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e4:	49ad      	ldr	r1, [pc, #692]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d010      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044f6:	4ba9      	ldr	r3, [pc, #676]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044fc:	4aa7      	ldr	r2, [pc, #668]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004502:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004506:	4ba5      	ldr	r3, [pc, #660]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004508:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	49a2      	ldr	r1, [pc, #648]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004524:	4b9d      	ldr	r3, [pc, #628]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004532:	499a      	ldr	r1, [pc, #616]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004546:	4b95      	ldr	r3, [pc, #596]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004554:	4991      	ldr	r1, [pc, #580]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004568:	4b8c      	ldr	r3, [pc, #560]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004576:	4989      	ldr	r1, [pc, #548]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800458a:	4b84      	ldr	r3, [pc, #528]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004590:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	4980      	ldr	r1, [pc, #512]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ac:	4b7b      	ldr	r3, [pc, #492]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	f023 0203 	bic.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	4978      	ldr	r1, [pc, #480]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ce:	4b73      	ldr	r3, [pc, #460]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	f023 020c 	bic.w	r2, r3, #12
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045dc:	496f      	ldr	r1, [pc, #444]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045f0:	4b6a      	ldr	r3, [pc, #424]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	4967      	ldr	r1, [pc, #412]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004612:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004620:	495e      	ldr	r1, [pc, #376]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004634:	4b59      	ldr	r3, [pc, #356]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	4956      	ldr	r1, [pc, #344]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004656:	4b51      	ldr	r3, [pc, #324]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	494d      	ldr	r1, [pc, #308]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004678:	4b48      	ldr	r3, [pc, #288]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	4945      	ldr	r1, [pc, #276]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800469a:	4b40      	ldr	r3, [pc, #256]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a8:	493c      	ldr	r1, [pc, #240]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046bc:	4b37      	ldr	r3, [pc, #220]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ca:	4934      	ldr	r1, [pc, #208]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d011      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046de:	4b2f      	ldr	r3, [pc, #188]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ec:	492b      	ldr	r1, [pc, #172]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800470e:	2301      	movs	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800471e:	4b1f      	ldr	r3, [pc, #124]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	491b      	ldr	r1, [pc, #108]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004740:	4b16      	ldr	r3, [pc, #88]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004750:	4912      	ldr	r1, [pc, #72]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004764:	4b0d      	ldr	r3, [pc, #52]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004774:	4909      	ldr	r1, [pc, #36]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00f      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	e002      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	4985      	ldr	r1, [pc, #532]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047b4:	4b80      	ldr	r3, [pc, #512]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c4:	497c      	ldr	r1, [pc, #496]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d005      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047da:	f040 80d6 	bne.w	800498a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047de:	4b76      	ldr	r3, [pc, #472]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a75      	ldr	r2, [pc, #468]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ea:	f7fc fe69 	bl	80014c0 <HAL_GetTick>
 80047ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047f2:	f7fc fe65 	bl	80014c0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	; 0x64
 80047fe:	d901      	bls.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e194      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004804:	4b6c      	ldr	r3, [pc, #432]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d021      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	2b00      	cmp	r3, #0
 8004822:	d11d      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004824:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004832:	4b61      	ldr	r3, [pc, #388]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004838:	0e1b      	lsrs	r3, r3, #24
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	019a      	lsls	r2, r3, #6
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	071b      	lsls	r3, r3, #28
 8004858:	4957      	ldr	r1, [pc, #348]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800487e:	2b00      	cmp	r3, #0
 8004880:	d02e      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488a:	d129      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800488c:	4b4a      	ldr	r3, [pc, #296]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a0:	0f1b      	lsrs	r3, r3, #28
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	019a      	lsls	r2, r3, #6
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	071b      	lsls	r3, r3, #28
 80048c0:	493d      	ldr	r1, [pc, #244]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048c8:	4b3b      	ldr	r3, [pc, #236]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ce:	f023 021f 	bic.w	r2, r3, #31
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	3b01      	subs	r3, #1
 80048d8:	4937      	ldr	r1, [pc, #220]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01d      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ec:	4b32      	ldr	r3, [pc, #200]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f2:	0e1b      	lsrs	r3, r3, #24
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048fa:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004900:	0f1b      	lsrs	r3, r3, #28
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	019a      	lsls	r2, r3, #6
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	041b      	lsls	r3, r3, #16
 8004914:	431a      	orrs	r2, r3
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	431a      	orrs	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	071b      	lsls	r3, r3, #28
 8004920:	4925      	ldr	r1, [pc, #148]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d011      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	019a      	lsls	r2, r3, #6
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	061b      	lsls	r3, r3, #24
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	071b      	lsls	r3, r3, #28
 8004950:	4919      	ldr	r1, [pc, #100]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800495e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fc fdac 	bl	80014c0 <HAL_GetTick>
 8004968:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800496c:	f7fc fda8 	bl	80014c0 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	; 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e0d7      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800497e:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b01      	cmp	r3, #1
 800498e:	f040 80cd 	bne.w	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004992:	4b09      	ldr	r3, [pc, #36]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a08      	ldr	r2, [pc, #32]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800499c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499e:	f7fc fd8f 	bl	80014c0 <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049a4:	e00a      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a6:	f7fc fd8b 	bl	80014c0 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b64      	cmp	r3, #100	; 0x64
 80049b2:	d903      	bls.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e0ba      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80049b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049bc:	4b5e      	ldr	r3, [pc, #376]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c8:	d0ed      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d02e      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d12a      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049f2:	4b51      	ldr	r3, [pc, #324]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80049f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a00:	4b4d      	ldr	r3, [pc, #308]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	0f1b      	lsrs	r3, r3, #28
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	019a      	lsls	r2, r3, #6
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	061b      	lsls	r3, r3, #24
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	071b      	lsls	r3, r3, #28
 8004a26:	4944      	ldr	r1, [pc, #272]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a2e:	4b42      	ldr	r3, [pc, #264]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	493d      	ldr	r1, [pc, #244]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d022      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a5c:	d11d      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a5e:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	0e1b      	lsrs	r3, r3, #24
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a6c:	4b32      	ldr	r3, [pc, #200]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	0f1b      	lsrs	r3, r3, #28
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	019a      	lsls	r2, r3, #6
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	431a      	orrs	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	061b      	lsls	r3, r3, #24
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	071b      	lsls	r3, r3, #28
 8004a92:	4929      	ldr	r1, [pc, #164]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d028      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aa6:	4b24      	ldr	r3, [pc, #144]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	0e1b      	lsrs	r3, r3, #24
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ab4:	4b20      	ldr	r3, [pc, #128]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	0c1b      	lsrs	r3, r3, #16
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	019a      	lsls	r2, r3, #6
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	431a      	orrs	r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	061b      	lsls	r3, r3, #24
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	071b      	lsls	r3, r3, #28
 8004ada:	4917      	ldr	r1, [pc, #92]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	4911      	ldr	r1, [pc, #68]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b04:	f7fc fcdc 	bl	80014c0 <HAL_GetTick>
 8004b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b0c:	f7fc fcd8 	bl	80014c0 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	; 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e007      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b2a:	d1ef      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800

08004b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e01d      	b.n	8004b8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fc f85c 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f000 fa36 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <HAL_TIM_Base_Start_IT+0x50>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b06      	cmp	r3, #6
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x42>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc4:	d007      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0201 	orr.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	00010007 	.word	0x00010007

08004be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d122      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d11b      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0202 	mvn.w	r2, #2
 8004c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9c0 	bl	8004fb0 <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9b2 	bl	8004f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f9c3 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0204 	mvn.w	r2, #4
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f996 	bl	8004fb0 <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f988 	bl	8004f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f999 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d122      	bne.n	8004cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0208 	mvn.w	r2, #8
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f96c 	bl	8004fb0 <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f95e 	bl	8004f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f96f 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d122      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d11b      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0210 	mvn.w	r2, #16
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2208      	movs	r2, #8
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f942 	bl	8004fb0 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f934 	bl	8004f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f945 	bl	8004fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d10e      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0201 	mvn.w	r2, #1
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fb ff00 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d10e      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d84:	2b80      	cmp	r3, #128	; 0x80
 8004d86:	d107      	bne.n	8004d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fafc 	bl	8005390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da6:	d10e      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	d107      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 faef 	bl	80053a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b40      	cmp	r3, #64	; 0x40
 8004dd2:	d10e      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dde:	2b40      	cmp	r3, #64	; 0x40
 8004de0:	d107      	bne.n	8004df2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8f3 	bl	8004fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d10e      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0320 	and.w	r3, r3, #32
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d107      	bne.n	8004e1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f06f 0220 	mvn.w	r2, #32
 8004e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 faaf 	bl	800537c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_ConfigClockSource+0x18>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e0a6      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x166>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4b4f      	ldr	r3, [pc, #316]	; (8004f98 <HAL_TIM_ConfigClockSource+0x170>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d067      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0x120>
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d80b      	bhi.n	8004e94 <HAL_TIM_ConfigClockSource+0x6c>
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d073      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0x140>
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d802      	bhi.n	8004e8a <HAL_TIM_ConfigClockSource+0x62>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d06f      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e88:	e078      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d06c      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0x140>
 8004e8e:	2b30      	cmp	r3, #48	; 0x30
 8004e90:	d06a      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e92:	e073      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e94:	2b70      	cmp	r3, #112	; 0x70
 8004e96:	d00d      	beq.n	8004eb4 <HAL_TIM_ConfigClockSource+0x8c>
 8004e98:	2b70      	cmp	r3, #112	; 0x70
 8004e9a:	d804      	bhi.n	8004ea6 <HAL_TIM_ConfigClockSource+0x7e>
 8004e9c:	2b50      	cmp	r3, #80	; 0x50
 8004e9e:	d033      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0xe0>
 8004ea0:	2b60      	cmp	r3, #96	; 0x60
 8004ea2:	d041      	beq.n	8004f28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ea4:	e06a      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eaa:	d066      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0x152>
 8004eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb0:	d017      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004eb2:	e063      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	6899      	ldr	r1, [r3, #8]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f000 f9ac 	bl	8005220 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ed6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	609a      	str	r2, [r3, #8]
      break;
 8004ee0:	e04c      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6899      	ldr	r1, [r3, #8]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f000 f995 	bl	8005220 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f04:	609a      	str	r2, [r3, #8]
      break;
 8004f06:	e039      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	f000 f909 	bl	800512c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2150      	movs	r1, #80	; 0x50
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f962 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004f26:	e029      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	6859      	ldr	r1, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	461a      	mov	r2, r3
 8004f36:	f000 f928 	bl	800518a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2160      	movs	r1, #96	; 0x60
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f952 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004f46:	e019      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6859      	ldr	r1, [r3, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f000 f8e9 	bl	800512c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2140      	movs	r1, #64	; 0x40
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 f942 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004f66:	e009      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 f939 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004f78:	e000      	b.n	8004f7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	fffeff88 	.word	0xfffeff88

08004f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a40      	ldr	r2, [pc, #256]	; (8005100 <TIM_Base_SetConfig+0x114>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d00f      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a3d      	ldr	r2, [pc, #244]	; (8005104 <TIM_Base_SetConfig+0x118>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a3c      	ldr	r2, [pc, #240]	; (8005108 <TIM_Base_SetConfig+0x11c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3b      	ldr	r2, [pc, #236]	; (800510c <TIM_Base_SetConfig+0x120>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3a      	ldr	r2, [pc, #232]	; (8005110 <TIM_Base_SetConfig+0x124>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2f      	ldr	r2, [pc, #188]	; (8005100 <TIM_Base_SetConfig+0x114>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d02b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d027      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <TIM_Base_SetConfig+0x118>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d023      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2b      	ldr	r2, [pc, #172]	; (8005108 <TIM_Base_SetConfig+0x11c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01f      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2a      	ldr	r2, [pc, #168]	; (800510c <TIM_Base_SetConfig+0x120>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a29      	ldr	r2, [pc, #164]	; (8005110 <TIM_Base_SetConfig+0x124>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d017      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a28      	ldr	r2, [pc, #160]	; (8005114 <TIM_Base_SetConfig+0x128>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a27      	ldr	r2, [pc, #156]	; (8005118 <TIM_Base_SetConfig+0x12c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00f      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a26      	ldr	r2, [pc, #152]	; (800511c <TIM_Base_SetConfig+0x130>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00b      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <TIM_Base_SetConfig+0x134>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a24      	ldr	r2, [pc, #144]	; (8005124 <TIM_Base_SetConfig+0x138>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d003      	beq.n	800509e <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a23      	ldr	r2, [pc, #140]	; (8005128 <TIM_Base_SetConfig+0x13c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d108      	bne.n	80050b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <TIM_Base_SetConfig+0x114>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0xf8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a0c      	ldr	r2, [pc, #48]	; (8005110 <TIM_Base_SetConfig+0x124>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d103      	bne.n	80050ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	615a      	str	r2, [r3, #20]
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40000400 	.word	0x40000400
 8005108:	40000800 	.word	0x40000800
 800510c:	40000c00 	.word	0x40000c00
 8005110:	40010400 	.word	0x40010400
 8005114:	40014000 	.word	0x40014000
 8005118:	40014400 	.word	0x40014400
 800511c:	40014800 	.word	0x40014800
 8005120:	40001800 	.word	0x40001800
 8005124:	40001c00 	.word	0x40001c00
 8005128:	40002000 	.word	0x40002000

0800512c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 030a 	bic.w	r3, r3, #10
 8005168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518a:	b480      	push	{r7}
 800518c:	b087      	sub	sp, #28
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0210 	bic.w	r2, r3, #16
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	031b      	lsls	r3, r3, #12
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	f043 0307 	orr.w	r3, r3, #7
 800520c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800523a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	021a      	lsls	r2, r3, #8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	431a      	orrs	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005274:	2302      	movs	r3, #2
 8005276:	e06d      	b.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a30      	ldr	r2, [pc, #192]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2f      	ldr	r2, [pc, #188]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d108      	bne.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80052b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a20      	ldr	r2, [pc, #128]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d022      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ea:	d01d      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d018      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00e      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a15      	ldr	r2, [pc, #84]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d10c      	bne.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	4313      	orrs	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40010000 	.word	0x40010000
 8005364:	40010400 	.word	0x40010400
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40014000 	.word	0x40014000
 8005378:	40001800 	.word	0x40001800

0800537c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e040      	b.n	800544c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb fc46 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	; 0x24
 80053e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0201 	bic.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fb26 	bl	8005a48 <UART_SetConfig>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e022      	b.n	800544c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fdc4 	bl	8005f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fe4b 	bl	80060e0 <UART_CheckIdleState>
 800544a:	4603      	mov	r3, r0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	; 0x28
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005468:	2b20      	cmp	r3, #32
 800546a:	d17f      	bne.n	800556c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_UART_Transmit+0x24>
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e078      	b.n	800556e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_UART_Transmit+0x36>
 8005486:	2302      	movs	r3, #2
 8005488:	e071      	b.n	800556e <HAL_UART_Transmit+0x11a>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2221      	movs	r2, #33	; 0x21
 800549c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800549e:	f7fc f80f 	bl	80014c0 <HAL_GetTick>
 80054a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054bc:	d108      	bne.n	80054d0 <HAL_UART_Transmit+0x7c>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d104      	bne.n	80054d0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	e003      	b.n	80054d8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80054e0:	e02c      	b.n	800553c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fe3c 	bl	800616a <UART_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e038      	b.n	800556e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005510:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	3302      	adds	r3, #2
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e007      	b.n	800552a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	781a      	ldrb	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	3301      	adds	r3, #1
 8005528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1cc      	bne.n	80054e2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2200      	movs	r2, #0
 8005550:	2140      	movs	r1, #64	; 0x40
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fe09 	bl	800616a <UART_WaitOnFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e005      	b.n	800556e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	4613      	mov	r3, r2
 8005584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800558a:	2b20      	cmp	r3, #32
 800558c:	d16c      	bne.n	8005668 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_UART_Receive_DMA+0x22>
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e065      	b.n	800566a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_UART_Receive_DMA+0x34>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e05e      	b.n	800566a <HAL_UART_Receive_DMA+0xf2>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2222      	movs	r2, #34	; 0x22
 80055cc:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d02a      	beq.n	800562c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055da:	4a26      	ldr	r2, [pc, #152]	; (8005674 <HAL_UART_Receive_DMA+0xfc>)
 80055dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e2:	4a25      	ldr	r2, [pc, #148]	; (8005678 <HAL_UART_Receive_DMA+0x100>)
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	4a24      	ldr	r2, [pc, #144]	; (800567c <HAL_UART_Receive_DMA+0x104>)
 80055ec:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f2:	2200      	movs	r2, #0
 80055f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3324      	adds	r3, #36	; 0x24
 8005600:	4619      	mov	r1, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	461a      	mov	r2, r3
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	f7fc f917 	bl	800183c <HAL_DMA_Start_IT>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00b      	beq.n	800562c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2210      	movs	r2, #16
 8005618:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e01e      	b.n	800566a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005642:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005662:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	080062cb 	.word	0x080062cb
 8005678:	0800632f 	.word	0x0800632f
 800567c:	0800634b 	.word	0x0800634b

08005680 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005692:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b80      	cmp	r3, #128	; 0x80
 80056a0:	d126      	bne.n	80056f0 <HAL_UART_DMAStop+0x70>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b21      	cmp	r3, #33	; 0x21
 80056a6:	d123      	bne.n	80056f0 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056b6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d014      	beq.n	80056ea <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fc f919 	bl	80018fc <HAL_DMA_Abort>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00c      	beq.n	80056ea <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fc fb2d 	bl	8001d34 <HAL_DMA_GetError>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d104      	bne.n	80056ea <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2210      	movs	r2, #16
 80056e4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e031      	b.n	800574e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 fdb8 	bl	8006260 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d126      	bne.n	800574c <HAL_UART_DMAStop+0xcc>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b22      	cmp	r3, #34	; 0x22
 8005702:	d123      	bne.n	800574c <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005712:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d014      	beq.n	8005746 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005720:	4618      	mov	r0, r3
 8005722:	f7fc f8eb 	bl	80018fc <HAL_DMA_Abort>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005730:	4618      	mov	r0, r3
 8005732:	f7fc faff 	bl	8001d34 <HAL_DMA_GetError>
 8005736:	4603      	mov	r3, r0
 8005738:	2b20      	cmp	r3, #32
 800573a:	d104      	bne.n	8005746 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2210      	movs	r2, #16
 8005740:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e003      	b.n	800574e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fd9f 	bl	800628a <UART_EndRxTransfer>
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	f640 030f 	movw	r3, #2063	; 0x80f
 800577e:	4013      	ands	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d113      	bne.n	80057b0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00e      	beq.n	80057b0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d009      	beq.n	80057b0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8114 	beq.w	80059ce <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
      }
      return;
 80057ae:	e10e      	b.n	80059ce <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80d6 	beq.w	8005964 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d105      	bne.n	80057ce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80cb 	beq.w	8005964 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <HAL_UART_IRQHandler+0x9e>
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ee:	f043 0201 	orr.w	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <HAL_UART_IRQHandler+0xc6>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2202      	movs	r2, #2
 8005810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005816:	f043 0204 	orr.w	r2, r3, #4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <HAL_UART_IRQHandler+0xee>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2204      	movs	r2, #4
 8005838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583e:	f043 0202 	orr.w	r2, r3, #2
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d013      	beq.n	8005878 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d104      	bne.n	8005864 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2208      	movs	r2, #8
 800586a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005870:	f043 0208 	orr.w	r2, r3, #8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00f      	beq.n	80058a2 <HAL_UART_IRQHandler+0x14a>
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8093 	beq.w	80059d2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d004      	beq.n	80058ee <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d031      	beq.n	8005952 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fccb 	bl	800628a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d123      	bne.n	800594a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005910:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d013      	beq.n	8005942 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591e:	4a30      	ldr	r2, [pc, #192]	; (80059e0 <HAL_UART_IRQHandler+0x288>)
 8005920:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005926:	4618      	mov	r0, r3
 8005928:	f7fc f858 	bl	80019dc <HAL_DMA_Abort_IT>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800593c:	4610      	mov	r0, r2
 800593e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e00e      	b.n	8005960 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f86c 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	e00a      	b.n	8005960 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f868 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	e006      	b.n	8005960 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f864 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800595e:	e038      	b.n	80059d2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	bf00      	nop
    return;
 8005962:	e036      	b.n	80059d2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00d      	beq.n	800598a <HAL_UART_IRQHandler+0x232>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005980:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f856 	bl	8005a34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005988:	e026      	b.n	80059d8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d017      	beq.n	80059d6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
    }
    return;
 80059ae:	e012      	b.n	80059d6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <HAL_UART_IRQHandler+0x280>
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fd12 	bl	80063ee <UART_EndTransmit_IT>
    return;
 80059ca:	bf00      	nop
 80059cc:	e004      	b.n	80059d8 <HAL_UART_IRQHandler+0x280>
      return;
 80059ce:	bf00      	nop
 80059d0:	e002      	b.n	80059d8 <HAL_UART_IRQHandler+0x280>
    return;
 80059d2:	bf00      	nop
 80059d4:	e000      	b.n	80059d8 <HAL_UART_IRQHandler+0x280>
    return;
 80059d6:	bf00      	nop
  }

}
 80059d8:	3720      	adds	r7, #32
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	080063c3 	.word	0x080063c3

080059e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4bb1      	ldr	r3, [pc, #708]	; (8005d3c <UART_SetConfig+0x2f4>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6812      	ldr	r2, [r2, #0]
 8005a7e:	6939      	ldr	r1, [r7, #16]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a9f      	ldr	r2, [pc, #636]	; (8005d40 <UART_SetConfig+0x2f8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d121      	bne.n	8005b0c <UART_SetConfig+0xc4>
 8005ac8:	4b9e      	ldr	r3, [pc, #632]	; (8005d44 <UART_SetConfig+0x2fc>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d816      	bhi.n	8005b04 <UART_SetConfig+0xbc>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0x94>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005aed 	.word	0x08005aed
 8005ae0:	08005af9 	.word	0x08005af9
 8005ae4:	08005af3 	.word	0x08005af3
 8005ae8:	08005aff 	.word	0x08005aff
 8005aec:	2301      	movs	r3, #1
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e151      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005af2:	2302      	movs	r3, #2
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e14e      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005af8:	2304      	movs	r3, #4
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e14b      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005afe:	2308      	movs	r3, #8
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e148      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005b04:	2310      	movs	r3, #16
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	bf00      	nop
 8005b0a:	e144      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a8d      	ldr	r2, [pc, #564]	; (8005d48 <UART_SetConfig+0x300>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d134      	bne.n	8005b80 <UART_SetConfig+0x138>
 8005b16:	4b8b      	ldr	r3, [pc, #556]	; (8005d44 <UART_SetConfig+0x2fc>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1c:	f003 030c 	and.w	r3, r3, #12
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d829      	bhi.n	8005b78 <UART_SetConfig+0x130>
 8005b24:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <UART_SetConfig+0xe4>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005b79 	.word	0x08005b79
 8005b34:	08005b79 	.word	0x08005b79
 8005b38:	08005b79 	.word	0x08005b79
 8005b3c:	08005b6d 	.word	0x08005b6d
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b79 	.word	0x08005b79
 8005b48:	08005b79 	.word	0x08005b79
 8005b4c:	08005b67 	.word	0x08005b67
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b79 	.word	0x08005b79
 8005b5c:	08005b73 	.word	0x08005b73
 8005b60:	2300      	movs	r3, #0
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e117      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005b66:	2302      	movs	r3, #2
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e114      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e111      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005b72:	2308      	movs	r3, #8
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e10e      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	bf00      	nop
 8005b7e:	e10a      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a71      	ldr	r2, [pc, #452]	; (8005d4c <UART_SetConfig+0x304>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d120      	bne.n	8005bcc <UART_SetConfig+0x184>
 8005b8a:	4b6e      	ldr	r3, [pc, #440]	; (8005d44 <UART_SetConfig+0x2fc>)
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d00f      	beq.n	8005bb8 <UART_SetConfig+0x170>
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d802      	bhi.n	8005ba2 <UART_SetConfig+0x15a>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <UART_SetConfig+0x164>
 8005ba0:	e010      	b.n	8005bc4 <UART_SetConfig+0x17c>
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d005      	beq.n	8005bb2 <UART_SetConfig+0x16a>
 8005ba6:	2b30      	cmp	r3, #48	; 0x30
 8005ba8:	d009      	beq.n	8005bbe <UART_SetConfig+0x176>
 8005baa:	e00b      	b.n	8005bc4 <UART_SetConfig+0x17c>
 8005bac:	2300      	movs	r3, #0
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e0f1      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e0ee      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e0eb      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e0e8      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	bf00      	nop
 8005bca:	e0e4      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a5f      	ldr	r2, [pc, #380]	; (8005d50 <UART_SetConfig+0x308>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d120      	bne.n	8005c18 <UART_SetConfig+0x1d0>
 8005bd6:	4b5b      	ldr	r3, [pc, #364]	; (8005d44 <UART_SetConfig+0x2fc>)
 8005bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d00f      	beq.n	8005c04 <UART_SetConfig+0x1bc>
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d802      	bhi.n	8005bee <UART_SetConfig+0x1a6>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <UART_SetConfig+0x1b0>
 8005bec:	e010      	b.n	8005c10 <UART_SetConfig+0x1c8>
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d005      	beq.n	8005bfe <UART_SetConfig+0x1b6>
 8005bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8005bf4:	d009      	beq.n	8005c0a <UART_SetConfig+0x1c2>
 8005bf6:	e00b      	b.n	8005c10 <UART_SetConfig+0x1c8>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e0cb      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e0c8      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c04:	2304      	movs	r3, #4
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e0c5      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e0c2      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c10:	2310      	movs	r3, #16
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	bf00      	nop
 8005c16:	e0be      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a4d      	ldr	r2, [pc, #308]	; (8005d54 <UART_SetConfig+0x30c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d124      	bne.n	8005c6c <UART_SetConfig+0x224>
 8005c22:	4b48      	ldr	r3, [pc, #288]	; (8005d44 <UART_SetConfig+0x2fc>)
 8005c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c30:	d012      	beq.n	8005c58 <UART_SetConfig+0x210>
 8005c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c36:	d802      	bhi.n	8005c3e <UART_SetConfig+0x1f6>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d007      	beq.n	8005c4c <UART_SetConfig+0x204>
 8005c3c:	e012      	b.n	8005c64 <UART_SetConfig+0x21c>
 8005c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c42:	d006      	beq.n	8005c52 <UART_SetConfig+0x20a>
 8005c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c48:	d009      	beq.n	8005c5e <UART_SetConfig+0x216>
 8005c4a:	e00b      	b.n	8005c64 <UART_SetConfig+0x21c>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e0a1      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c52:	2302      	movs	r3, #2
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e09e      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e09b      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c5e:	2308      	movs	r3, #8
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e098      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c64:	2310      	movs	r3, #16
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	bf00      	nop
 8005c6a:	e094      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a39      	ldr	r2, [pc, #228]	; (8005d58 <UART_SetConfig+0x310>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d124      	bne.n	8005cc0 <UART_SetConfig+0x278>
 8005c76:	4b33      	ldr	r3, [pc, #204]	; (8005d44 <UART_SetConfig+0x2fc>)
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c84:	d012      	beq.n	8005cac <UART_SetConfig+0x264>
 8005c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8a:	d802      	bhi.n	8005c92 <UART_SetConfig+0x24a>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <UART_SetConfig+0x258>
 8005c90:	e012      	b.n	8005cb8 <UART_SetConfig+0x270>
 8005c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c96:	d006      	beq.n	8005ca6 <UART_SetConfig+0x25e>
 8005c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c9c:	d009      	beq.n	8005cb2 <UART_SetConfig+0x26a>
 8005c9e:	e00b      	b.n	8005cb8 <UART_SetConfig+0x270>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e077      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e074      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005cac:	2304      	movs	r3, #4
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e071      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e06e      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	bf00      	nop
 8005cbe:	e06a      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a25      	ldr	r2, [pc, #148]	; (8005d5c <UART_SetConfig+0x314>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d124      	bne.n	8005d14 <UART_SetConfig+0x2cc>
 8005cca:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <UART_SetConfig+0x2fc>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd8:	d012      	beq.n	8005d00 <UART_SetConfig+0x2b8>
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d802      	bhi.n	8005ce6 <UART_SetConfig+0x29e>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <UART_SetConfig+0x2ac>
 8005ce4:	e012      	b.n	8005d0c <UART_SetConfig+0x2c4>
 8005ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cea:	d006      	beq.n	8005cfa <UART_SetConfig+0x2b2>
 8005cec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cf0:	d009      	beq.n	8005d06 <UART_SetConfig+0x2be>
 8005cf2:	e00b      	b.n	8005d0c <UART_SetConfig+0x2c4>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e04d      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e04a      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d00:	2304      	movs	r3, #4
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e047      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d06:	2308      	movs	r3, #8
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e044      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	bf00      	nop
 8005d12:	e040      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <UART_SetConfig+0x318>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d139      	bne.n	8005d92 <UART_SetConfig+0x34a>
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <UART_SetConfig+0x2fc>)
 8005d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d2c:	d027      	beq.n	8005d7e <UART_SetConfig+0x336>
 8005d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d32:	d817      	bhi.n	8005d64 <UART_SetConfig+0x31c>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01c      	beq.n	8005d72 <UART_SetConfig+0x32a>
 8005d38:	e027      	b.n	8005d8a <UART_SetConfig+0x342>
 8005d3a:	bf00      	nop
 8005d3c:	efff69f3 	.word	0xefff69f3
 8005d40:	40011000 	.word	0x40011000
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40004400 	.word	0x40004400
 8005d4c:	40004800 	.word	0x40004800
 8005d50:	40004c00 	.word	0x40004c00
 8005d54:	40005000 	.word	0x40005000
 8005d58:	40011400 	.word	0x40011400
 8005d5c:	40007800 	.word	0x40007800
 8005d60:	40007c00 	.word	0x40007c00
 8005d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d68:	d006      	beq.n	8005d78 <UART_SetConfig+0x330>
 8005d6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d6e:	d009      	beq.n	8005d84 <UART_SetConfig+0x33c>
 8005d70:	e00b      	b.n	8005d8a <UART_SetConfig+0x342>
 8005d72:	2300      	movs	r3, #0
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e00e      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	77fb      	strb	r3, [r7, #31]
 8005d7c:	e00b      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d7e:	2304      	movs	r3, #4
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e008      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d84:	2308      	movs	r3, #8
 8005d86:	77fb      	strb	r3, [r7, #31]
 8005d88:	e005      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	77fb      	strb	r3, [r7, #31]
 8005d8e:	bf00      	nop
 8005d90:	e001      	b.n	8005d96 <UART_SetConfig+0x34e>
 8005d92:	2310      	movs	r3, #16
 8005d94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9e:	d17f      	bne.n	8005ea0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005da0:	7ffb      	ldrb	r3, [r7, #31]
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d85c      	bhi.n	8005e60 <UART_SetConfig+0x418>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <UART_SetConfig+0x364>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005df1 	.word	0x08005df1
 8005db4:	08005e11 	.word	0x08005e11
 8005db8:	08005e61 	.word	0x08005e61
 8005dbc:	08005e29 	.word	0x08005e29
 8005dc0:	08005e61 	.word	0x08005e61
 8005dc4:	08005e61 	.word	0x08005e61
 8005dc8:	08005e61 	.word	0x08005e61
 8005dcc:	08005e49 	.word	0x08005e49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dd0:	f7fe fa34 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8005dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	005a      	lsls	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	441a      	add	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	61bb      	str	r3, [r7, #24]
        break;
 8005dee:	e03a      	b.n	8005e66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df0:	f7fe fa38 	bl	8004264 <HAL_RCC_GetPCLK2Freq>
 8005df4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	005a      	lsls	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	441a      	add	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	61bb      	str	r3, [r7, #24]
        break;
 8005e0e:	e02a      	b.n	8005e66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	085a      	lsrs	r2, r3, #1
 8005e16:	4b5f      	ldr	r3, [pc, #380]	; (8005f94 <UART_SetConfig+0x54c>)
 8005e18:	4413      	add	r3, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6852      	ldr	r2, [r2, #4]
 8005e1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	61bb      	str	r3, [r7, #24]
        break;
 8005e26:	e01e      	b.n	8005e66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e28:	f7fe f924 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8005e2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	005a      	lsls	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	441a      	add	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	61bb      	str	r3, [r7, #24]
        break;
 8005e46:	e00e      	b.n	8005e66 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	61bb      	str	r3, [r7, #24]
        break;
 8005e5e:	e002      	b.n	8005e66 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	75fb      	strb	r3, [r7, #23]
        break;
 8005e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b0f      	cmp	r3, #15
 8005e6a:	d916      	bls.n	8005e9a <UART_SetConfig+0x452>
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e72:	d212      	bcs.n	8005e9a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f023 030f 	bic.w	r3, r3, #15
 8005e7c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	897b      	ldrh	r3, [r7, #10]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	897a      	ldrh	r2, [r7, #10]
 8005e96:	60da      	str	r2, [r3, #12]
 8005e98:	e070      	b.n	8005f7c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
 8005e9e:	e06d      	b.n	8005f7c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d859      	bhi.n	8005f5a <UART_SetConfig+0x512>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x464>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005f0d 	.word	0x08005f0d
 8005eb8:	08005f5b 	.word	0x08005f5b
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005f5b 	.word	0x08005f5b
 8005ec4:	08005f5b 	.word	0x08005f5b
 8005ec8:	08005f5b 	.word	0x08005f5b
 8005ecc:	08005f43 	.word	0x08005f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fe f9b4 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8005ed4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	085a      	lsrs	r2, r3, #1
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	441a      	add	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	61bb      	str	r3, [r7, #24]
        break;
 8005eec:	e038      	b.n	8005f60 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eee:	f7fe f9b9 	bl	8004264 <HAL_RCC_GetPCLK2Freq>
 8005ef2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	085a      	lsrs	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	441a      	add	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	61bb      	str	r3, [r7, #24]
        break;
 8005f0a:	e029      	b.n	8005f60 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	085a      	lsrs	r2, r3, #1
 8005f12:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <UART_SetConfig+0x550>)
 8005f14:	4413      	add	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6852      	ldr	r2, [r2, #4]
 8005f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	61bb      	str	r3, [r7, #24]
        break;
 8005f22:	e01d      	b.n	8005f60 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f24:	f7fe f8a6 	bl	8004074 <HAL_RCC_GetSysClockFreq>
 8005f28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	085a      	lsrs	r2, r3, #1
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	441a      	add	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	61bb      	str	r3, [r7, #24]
        break;
 8005f40:	e00e      	b.n	8005f60 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	61bb      	str	r3, [r7, #24]
        break;
 8005f58:	e002      	b.n	8005f60 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
        break;
 8005f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	2b0f      	cmp	r3, #15
 8005f64:	d908      	bls.n	8005f78 <UART_SetConfig+0x530>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d204      	bcs.n	8005f78 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	e001      	b.n	8005f7c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	01e84800 	.word	0x01e84800
 8005f98:	00f42400 	.word	0x00f42400

08005f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01a      	beq.n	80060b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800609a:	d10a      	bne.n	80060b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060ee:	f7fb f9e7 	bl	80014c0 <HAL_GetTick>
 80060f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d10e      	bne.n	8006120 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006102:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f82a 	bl	800616a <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e020      	b.n	8006162 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d10e      	bne.n	800614c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f814 	bl	800616a <UART_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e00a      	b.n	8006162 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617a:	e05d      	b.n	8006238 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006182:	d059      	beq.n	8006238 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006184:	f7fb f99c 	bl	80014c0 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	429a      	cmp	r2, r3
 8006192:	d302      	bcc.n	800619a <UART_WaitOnFlagUntilTimeout+0x30>
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d11b      	bne.n	80061d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e042      	b.n	8006258 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d02b      	beq.n	8006238 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ee:	d123      	bne.n	8006238 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061f8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006208:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e00f      	b.n	8006258 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	69da      	ldr	r2, [r3, #28]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4013      	ands	r3, r2
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	429a      	cmp	r2, r3
 8006246:	bf0c      	ite	eq
 8006248:	2301      	moveq	r3, #1
 800624a:	2300      	movne	r3, #0
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	429a      	cmp	r2, r3
 8006254:	d092      	beq.n	800617c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006276:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062a0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e0:	d01e      	beq.n	8006320 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0201 	bic.w	r2, r2, #1
 8006308:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006318:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff fb69 	bl	80059f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff fb65 	bl	8005a0c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b086      	sub	sp, #24
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006362:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	d109      	bne.n	8006386 <UART_DMAError+0x3c>
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b21      	cmp	r3, #33	; 0x21
 8006376:	d106      	bne.n	8006386 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2200      	movs	r2, #0
 800637c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006380:	6978      	ldr	r0, [r7, #20]
 8006382:	f7ff ff6d 	bl	8006260 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d109      	bne.n	80063a8 <UART_DMAError+0x5e>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b22      	cmp	r3, #34	; 0x22
 8006398:	d106      	bne.n	80063a8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80063a2:	6978      	ldr	r0, [r7, #20]
 80063a4:	f7ff ff71 	bl	800628a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ac:	f043 0210 	orr.w	r2, r3, #16
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063b4:	6978      	ldr	r0, [r7, #20]
 80063b6:	f7ff fb33 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ba:	bf00      	nop
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff fb1d 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006404:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fae6 	bl	80059e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006420:	b084      	sub	sp, #16
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	f107 001c 	add.w	r0, r7, #28
 800642e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	2b01      	cmp	r3, #1
 8006436:	d120      	bne.n	800647a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	4b20      	ldr	r3, [pc, #128]	; (80064cc <USB_CoreInit+0xac>)
 800644a:	4013      	ands	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800645c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa52 	bl	8006918 <USB_CoreReset>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	e010      	b.n	800649c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fa46 	bl	8006918 <USB_CoreReset>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10b      	bne.n	80064ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f043 0206 	orr.w	r2, r3, #6
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c6:	b004      	add	sp, #16
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	ffbdffbf 	.word	0xffbdffbf

080064d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f023 0201 	bic.w	r2, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d106      	bne.n	800651e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60da      	str	r2, [r3, #12]
 800651c:	e00b      	b.n	8006536 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	e001      	b.n	8006536 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e003      	b.n	800653e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006536:	2032      	movs	r0, #50	; 0x32
 8006538:	f7fa ffce 	bl	80014d8 <HAL_Delay>

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006548:	b084      	sub	sp, #16
 800654a:	b580      	push	{r7, lr}
 800654c:	b086      	sub	sp, #24
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006562:	2300      	movs	r3, #0
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	e009      	b.n	800657c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	3340      	adds	r3, #64	; 0x40
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	2200      	movs	r2, #0
 8006574:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	3301      	adds	r3, #1
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b0e      	cmp	r3, #14
 8006580:	d9f2      	bls.n	8006568 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d11c      	bne.n	80065c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006596:	f043 0302 	orr.w	r3, r3, #2
 800659a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	e005      	b.n	80065ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065d4:	461a      	mov	r2, r3
 80065d6:	2300      	movs	r3, #0
 80065d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e0:	4619      	mov	r1, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	461a      	mov	r2, r3
 80065ea:	680b      	ldr	r3, [r1, #0]
 80065ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10c      	bne.n	800660e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065fa:	2100      	movs	r1, #0
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f959 	bl	80068b4 <USB_SetDevSpeed>
 8006602:	e018      	b.n	8006636 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006604:	2101      	movs	r1, #1
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f954 	bl	80068b4 <USB_SetDevSpeed>
 800660c:	e013      	b.n	8006636 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	2b03      	cmp	r3, #3
 8006612:	d10c      	bne.n	800662e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d104      	bne.n	8006624 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800661a:	2100      	movs	r1, #0
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f949 	bl	80068b4 <USB_SetDevSpeed>
 8006622:	e008      	b.n	8006636 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006624:	2101      	movs	r1, #1
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f944 	bl	80068b4 <USB_SetDevSpeed>
 800662c:	e003      	b.n	8006636 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800662e:	2103      	movs	r1, #3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f93f 	bl	80068b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006636:	2110      	movs	r1, #16
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8f3 	bl	8006824 <USB_FlushTxFifo>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f911 	bl	8006870 <USB_FlushRxFifo>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	461a      	mov	r2, r3
 8006660:	2300      	movs	r3, #0
 8006662:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006676:	461a      	mov	r2, r3
 8006678:	2300      	movs	r3, #0
 800667a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	e043      	b.n	800670a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006698:	d118      	bne.n	80066cc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	461a      	mov	r2, r3
 80066ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	e013      	b.n	80066de <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c2:	461a      	mov	r2, r3
 80066c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e008      	b.n	80066de <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	461a      	mov	r2, r3
 80066da:	2300      	movs	r3, #0
 80066dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	461a      	mov	r2, r3
 80066ec:	2300      	movs	r3, #0
 80066ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	461a      	mov	r2, r3
 80066fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006702:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	3301      	adds	r3, #1
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	429a      	cmp	r2, r3
 8006710:	d3b7      	bcc.n	8006682 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006712:	2300      	movs	r3, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e043      	b.n	80067a0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800672a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800672e:	d118      	bne.n	8006762 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	461a      	mov	r2, r3
 8006744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e013      	b.n	8006774 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	461a      	mov	r2, r3
 800675a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	e008      	b.n	8006774 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	461a      	mov	r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	461a      	mov	r2, r3
 8006782:	2300      	movs	r3, #0
 8006784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	461a      	mov	r2, r3
 8006794:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3301      	adds	r3, #1
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d3b7      	bcc.n	8006718 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d105      	bne.n	80067dc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f043 0210 	orr.w	r2, r3, #16
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699a      	ldr	r2, [r3, #24]
 80067e0:	4b0e      	ldr	r3, [pc, #56]	; (800681c <USB_DevInit+0x2d4>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f043 0208 	orr.w	r2, r3, #8
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d105      	bne.n	800680c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	4b06      	ldr	r3, [pc, #24]	; (8006820 <USB_DevInit+0x2d8>)
 8006806:	4313      	orrs	r3, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800680c:	7dfb      	ldrb	r3, [r7, #23]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006818:	b004      	add	sp, #16
 800681a:	4770      	bx	lr
 800681c:	803c3800 	.word	0x803c3800
 8006820:	40000004 	.word	0x40000004

08006824 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	019b      	lsls	r3, r3, #6
 8006836:	f043 0220 	orr.w	r2, r3, #32
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a09      	ldr	r2, [pc, #36]	; (800686c <USB_FlushTxFifo+0x48>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e006      	b.n	800685e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0320 	and.w	r3, r3, #32
 8006858:	2b20      	cmp	r3, #32
 800685a:	d0f0      	beq.n	800683e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	00030d40 	.word	0x00030d40

08006870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2210      	movs	r2, #16
 8006880:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <USB_FlushRxFifo+0x40>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e006      	b.n	80068a2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b10      	cmp	r3, #16
 800689e:	d0f0      	beq.n	8006882 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	00030d40 	.word	0x00030d40

080068b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068d4:	4313      	orrs	r3, r2
 80068d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006900:	f043 0302 	orr.w	r3, r3, #2
 8006904:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006906:	2003      	movs	r0, #3
 8006908:	f7fa fde6 	bl	80014d8 <HAL_Delay>

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a13      	ldr	r2, [pc, #76]	; (800697c <USB_CoreReset+0x64>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e01b      	b.n	800696e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	daf2      	bge.n	8006924 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a09      	ldr	r2, [pc, #36]	; (800697c <USB_CoreReset+0x64>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d901      	bls.n	8006960 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e006      	b.n	800696e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	d0f0      	beq.n	800694e <USB_CoreReset+0x36>

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	00030d40 	.word	0x00030d40

08006980 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006980:	b5b0      	push	{r4, r5, r7, lr}
 8006982:	b08e      	sub	sp, #56	; 0x38
 8006984:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006986:	4ba0      	ldr	r3, [pc, #640]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006988:	22c0      	movs	r2, #192	; 0xc0
 800698a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800698c:	4b9e      	ldr	r3, [pc, #632]	; (8006c08 <MX_LWIP_Init+0x288>)
 800698e:	22a8      	movs	r2, #168	; 0xa8
 8006990:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8006992:	4b9d      	ldr	r3, [pc, #628]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006994:	2201      	movs	r2, #1
 8006996:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 70;
 8006998:	4b9b      	ldr	r3, [pc, #620]	; (8006c08 <MX_LWIP_Init+0x288>)
 800699a:	2246      	movs	r2, #70	; 0x46
 800699c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800699e:	4b9b      	ldr	r3, [pc, #620]	; (8006c0c <MX_LWIP_Init+0x28c>)
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80069a4:	4b99      	ldr	r3, [pc, #612]	; (8006c0c <MX_LWIP_Init+0x28c>)
 80069a6:	22ff      	movs	r2, #255	; 0xff
 80069a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80069aa:	4b98      	ldr	r3, [pc, #608]	; (8006c0c <MX_LWIP_Init+0x28c>)
 80069ac:	22ff      	movs	r2, #255	; 0xff
 80069ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80069b0:	4b96      	ldr	r3, [pc, #600]	; (8006c0c <MX_LWIP_Init+0x28c>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80069b6:	4b96      	ldr	r3, [pc, #600]	; (8006c10 <MX_LWIP_Init+0x290>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80069bc:	4b94      	ldr	r3, [pc, #592]	; (8006c10 <MX_LWIP_Init+0x290>)
 80069be:	2200      	movs	r2, #0
 80069c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80069c2:	4b93      	ldr	r3, [pc, #588]	; (8006c10 <MX_LWIP_Init+0x290>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80069c8:	4b91      	ldr	r3, [pc, #580]	; (8006c10 <MX_LWIP_Init+0x290>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80069ce:	2100      	movs	r1, #0
 80069d0:	2000      	movs	r0, #0
 80069d2:	f003 fdc7 	bl	800a564 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80069d6:	4b8c      	ldr	r3, [pc, #560]	; (8006c08 <MX_LWIP_Init+0x288>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	061a      	lsls	r2, r3, #24
 80069dc:	4b8a      	ldr	r3, [pc, #552]	; (8006c08 <MX_LWIP_Init+0x288>)
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	041b      	lsls	r3, r3, #16
 80069e2:	431a      	orrs	r2, r3
 80069e4:	4b88      	ldr	r3, [pc, #544]	; (8006c08 <MX_LWIP_Init+0x288>)
 80069e6:	789b      	ldrb	r3, [r3, #2]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	4313      	orrs	r3, r2
 80069ec:	4a86      	ldr	r2, [pc, #536]	; (8006c08 <MX_LWIP_Init+0x288>)
 80069ee:	78d2      	ldrb	r2, [r2, #3]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	061a      	lsls	r2, r3, #24
 80069f4:	4b84      	ldr	r3, [pc, #528]	; (8006c08 <MX_LWIP_Init+0x288>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	0619      	lsls	r1, r3, #24
 80069fa:	4b83      	ldr	r3, [pc, #524]	; (8006c08 <MX_LWIP_Init+0x288>)
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	041b      	lsls	r3, r3, #16
 8006a00:	4319      	orrs	r1, r3
 8006a02:	4b81      	ldr	r3, [pc, #516]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a04:	789b      	ldrb	r3, [r3, #2]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	497f      	ldr	r1, [pc, #508]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a0c:	78c9      	ldrb	r1, [r1, #3]
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a16:	431a      	orrs	r2, r3
 8006a18:	4b7b      	ldr	r3, [pc, #492]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	0619      	lsls	r1, r3, #24
 8006a1e:	4b7a      	ldr	r3, [pc, #488]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	041b      	lsls	r3, r3, #16
 8006a24:	4319      	orrs	r1, r3
 8006a26:	4b78      	ldr	r3, [pc, #480]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a28:	789b      	ldrb	r3, [r3, #2]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	4976      	ldr	r1, [pc, #472]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a30:	78c9      	ldrb	r1, [r1, #3]
 8006a32:	430b      	orrs	r3, r1
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	4b72      	ldr	r3, [pc, #456]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	0619      	lsls	r1, r3, #24
 8006a42:	4b71      	ldr	r3, [pc, #452]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	041b      	lsls	r3, r3, #16
 8006a48:	4319      	orrs	r1, r3
 8006a4a:	4b6f      	ldr	r3, [pc, #444]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a4c:	789b      	ldrb	r3, [r3, #2]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	430b      	orrs	r3, r1
 8006a52:	496d      	ldr	r1, [pc, #436]	; (8006c08 <MX_LWIP_Init+0x288>)
 8006a54:	78c9      	ldrb	r1, [r1, #3]
 8006a56:	430b      	orrs	r3, r1
 8006a58:	0e1b      	lsrs	r3, r3, #24
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	4a6d      	ldr	r2, [pc, #436]	; (8006c14 <MX_LWIP_Init+0x294>)
 8006a5e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006a60:	4b6a      	ldr	r3, [pc, #424]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	061a      	lsls	r2, r3, #24
 8006a66:	4b69      	ldr	r3, [pc, #420]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006a68:	785b      	ldrb	r3, [r3, #1]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	4b67      	ldr	r3, [pc, #412]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006a70:	789b      	ldrb	r3, [r3, #2]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	4313      	orrs	r3, r2
 8006a76:	4a65      	ldr	r2, [pc, #404]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006a78:	78d2      	ldrb	r2, [r2, #3]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	061a      	lsls	r2, r3, #24
 8006a7e:	4b63      	ldr	r3, [pc, #396]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	0619      	lsls	r1, r3, #24
 8006a84:	4b61      	ldr	r3, [pc, #388]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	041b      	lsls	r3, r3, #16
 8006a8a:	4319      	orrs	r1, r3
 8006a8c:	4b5f      	ldr	r3, [pc, #380]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006a8e:	789b      	ldrb	r3, [r3, #2]
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	430b      	orrs	r3, r1
 8006a94:	495d      	ldr	r1, [pc, #372]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006a96:	78c9      	ldrb	r1, [r1, #3]
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	4b5a      	ldr	r3, [pc, #360]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	0619      	lsls	r1, r3, #24
 8006aa8:	4b58      	ldr	r3, [pc, #352]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	4319      	orrs	r1, r3
 8006ab0:	4b56      	ldr	r3, [pc, #344]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006ab2:	789b      	ldrb	r3, [r3, #2]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	4954      	ldr	r1, [pc, #336]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006aba:	78c9      	ldrb	r1, [r1, #3]
 8006abc:	430b      	orrs	r3, r1
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	4b51      	ldr	r3, [pc, #324]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	0619      	lsls	r1, r3, #24
 8006acc:	4b4f      	ldr	r3, [pc, #316]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	4319      	orrs	r1, r3
 8006ad4:	4b4d      	ldr	r3, [pc, #308]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006ad6:	789b      	ldrb	r3, [r3, #2]
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	430b      	orrs	r3, r1
 8006adc:	494b      	ldr	r1, [pc, #300]	; (8006c0c <MX_LWIP_Init+0x28c>)
 8006ade:	78c9      	ldrb	r1, [r1, #3]
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	0e1b      	lsrs	r3, r3, #24
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	4a4c      	ldr	r2, [pc, #304]	; (8006c18 <MX_LWIP_Init+0x298>)
 8006ae8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006aea:	4b49      	ldr	r3, [pc, #292]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	061a      	lsls	r2, r3, #24
 8006af0:	4b47      	ldr	r3, [pc, #284]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	431a      	orrs	r2, r3
 8006af8:	4b45      	ldr	r3, [pc, #276]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006afa:	789b      	ldrb	r3, [r3, #2]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	4313      	orrs	r3, r2
 8006b00:	4a43      	ldr	r2, [pc, #268]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b02:	78d2      	ldrb	r2, [r2, #3]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	061a      	lsls	r2, r3, #24
 8006b08:	4b41      	ldr	r3, [pc, #260]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	0619      	lsls	r1, r3, #24
 8006b0e:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	041b      	lsls	r3, r3, #16
 8006b14:	4319      	orrs	r1, r3
 8006b16:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b18:	789b      	ldrb	r3, [r3, #2]
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	493c      	ldr	r1, [pc, #240]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b20:	78c9      	ldrb	r1, [r1, #3]
 8006b22:	430b      	orrs	r3, r1
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	4b38      	ldr	r3, [pc, #224]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	0619      	lsls	r1, r3, #24
 8006b32:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	041b      	lsls	r3, r3, #16
 8006b38:	4319      	orrs	r1, r3
 8006b3a:	4b35      	ldr	r3, [pc, #212]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b3c:	789b      	ldrb	r3, [r3, #2]
 8006b3e:	021b      	lsls	r3, r3, #8
 8006b40:	430b      	orrs	r3, r1
 8006b42:	4933      	ldr	r1, [pc, #204]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b44:	78c9      	ldrb	r1, [r1, #3]
 8006b46:	430b      	orrs	r3, r1
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	4b2f      	ldr	r3, [pc, #188]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	0619      	lsls	r1, r3, #24
 8006b56:	4b2e      	ldr	r3, [pc, #184]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	4319      	orrs	r1, r3
 8006b5e:	4b2c      	ldr	r3, [pc, #176]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b60:	789b      	ldrb	r3, [r3, #2]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	430b      	orrs	r3, r1
 8006b66:	492a      	ldr	r1, [pc, #168]	; (8006c10 <MX_LWIP_Init+0x290>)
 8006b68:	78c9      	ldrb	r1, [r1, #3]
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	0e1b      	lsrs	r3, r3, #24
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <MX_LWIP_Init+0x29c>)
 8006b72:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006b74:	4b2a      	ldr	r3, [pc, #168]	; (8006c20 <MX_LWIP_Init+0x2a0>)
 8006b76:	9302      	str	r3, [sp, #8]
 8006b78:	4b2a      	ldr	r3, [pc, #168]	; (8006c24 <MX_LWIP_Init+0x2a4>)
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	4b26      	ldr	r3, [pc, #152]	; (8006c1c <MX_LWIP_Init+0x29c>)
 8006b82:	4a25      	ldr	r2, [pc, #148]	; (8006c18 <MX_LWIP_Init+0x298>)
 8006b84:	4923      	ldr	r1, [pc, #140]	; (8006c14 <MX_LWIP_Init+0x294>)
 8006b86:	4828      	ldr	r0, [pc, #160]	; (8006c28 <MX_LWIP_Init+0x2a8>)
 8006b88:	f005 f8c0 	bl	800bd0c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006b8c:	4826      	ldr	r0, [pc, #152]	; (8006c28 <MX_LWIP_Init+0x2a8>)
 8006b8e:	f005 fa6f 	bl	800c070 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006b92:	4b25      	ldr	r3, [pc, #148]	; (8006c28 <MX_LWIP_Init+0x2a8>)
 8006b94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006b98:	089b      	lsrs	r3, r3, #2
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006ba4:	4820      	ldr	r0, [pc, #128]	; (8006c28 <MX_LWIP_Init+0x2a8>)
 8006ba6:	f005 fa73 	bl	800c090 <netif_set_up>
 8006baa:	e002      	b.n	8006bb2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006bac:	481e      	ldr	r0, [pc, #120]	; (8006c28 <MX_LWIP_Init+0x2a8>)
 8006bae:	f005 fadb 	bl	800c168 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006bb2:	491e      	ldr	r1, [pc, #120]	; (8006c2c <MX_LWIP_Init+0x2ac>)
 8006bb4:	481c      	ldr	r0, [pc, #112]	; (8006c28 <MX_LWIP_Init+0x2a8>)
 8006bb6:	f005 fb6d 	bl	800c294 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	623b      	str	r3, [r7, #32]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8006bc2:	f107 0320 	add.w	r3, r7, #32
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fd8f 	bl	80076ec <osSemaphoreCreate>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <MX_LWIP_Init+0x2b0>)
 8006bd2:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8006bd4:	4b17      	ldr	r3, [pc, #92]	; (8006c34 <MX_LWIP_Init+0x2b4>)
 8006bd6:	4a14      	ldr	r2, [pc, #80]	; (8006c28 <MX_LWIP_Init+0x2a8>)
 8006bd8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006bda:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <MX_LWIP_Init+0x2b0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a15      	ldr	r2, [pc, #84]	; (8006c34 <MX_LWIP_Init+0x2b4>)
 8006be0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8006be2:	4b15      	ldr	r3, [pc, #84]	; (8006c38 <MX_LWIP_Init+0x2b8>)
 8006be4:	1d3c      	adds	r4, r7, #4
 8006be6:	461d      	mov	r5, r3
 8006be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006bf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8006bf4:	1d3b      	adds	r3, r7, #4
 8006bf6:	490f      	ldr	r1, [pc, #60]	; (8006c34 <MX_LWIP_Init+0x2b4>)
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fc7a 	bl	80074f2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006bfe:	bf00      	nop
 8006c00:	3728      	adds	r7, #40	; 0x28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bdb0      	pop	{r4, r5, r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20004cf4 	.word	0x20004cf4
 8006c0c:	20004cf0 	.word	0x20004cf0
 8006c10:	20004cb4 	.word	0x20004cb4
 8006c14:	20004cec 	.word	0x20004cec
 8006c18:	20004cf8 	.word	0x20004cf8
 8006c1c:	20004cfc 	.word	0x20004cfc
 8006c20:	0800a4a1 	.word	0x0800a4a1
 8006c24:	08007281 	.word	0x08007281
 8006c28:	20004cb8 	.word	0x20004cb8
 8006c2c:	08007365 	.word	0x08007365
 8006c30:	200002fc 	.word	0x200002fc
 8006c34:	20004cac 	.word	0x20004cac
 8006c38:	08016d3c 	.word	0x08016d3c

08006c3c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08e      	sub	sp, #56	; 0x38
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	605a      	str	r2, [r3, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
 8006c50:	60da      	str	r2, [r3, #12]
 8006c52:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a52      	ldr	r2, [pc, #328]	; (8006da4 <HAL_ETH_MspInit+0x168>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	f040 809e 	bne.w	8006d9c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006c60:	4b51      	ldr	r3, [pc, #324]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	4a50      	ldr	r2, [pc, #320]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c6c:	4b4e      	ldr	r3, [pc, #312]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c74:	623b      	str	r3, [r7, #32]
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	4b4b      	ldr	r3, [pc, #300]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7c:	4a4a      	ldr	r2, [pc, #296]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c82:	6313      	str	r3, [r2, #48]	; 0x30
 8006c84:	4b48      	ldr	r3, [pc, #288]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4b45      	ldr	r3, [pc, #276]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	4a44      	ldr	r2, [pc, #272]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c9c:	4b42      	ldr	r3, [pc, #264]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ca8:	4b3f      	ldr	r3, [pc, #252]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	4a3e      	ldr	r2, [pc, #248]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cae:	f043 0304 	orr.w	r3, r3, #4
 8006cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8006cb4:	4b3c      	ldr	r3, [pc, #240]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cc0:	4b39      	ldr	r3, [pc, #228]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	4a38      	ldr	r2, [pc, #224]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	6313      	str	r3, [r2, #48]	; 0x30
 8006ccc:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cd8:	4b33      	ldr	r3, [pc, #204]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	4a32      	ldr	r2, [pc, #200]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cde:	f043 0302 	orr.w	r3, r3, #2
 8006ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce4:	4b30      	ldr	r3, [pc, #192]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006cf0:	4b2d      	ldr	r3, [pc, #180]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	; (8006da8 <HAL_ETH_MspInit+0x16c>)
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006d08:	2332      	movs	r3, #50	; 0x32
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d14:	2303      	movs	r3, #3
 8006d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d18:	230b      	movs	r3, #11
 8006d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d20:	4619      	mov	r1, r3
 8006d22:	4822      	ldr	r0, [pc, #136]	; (8006dac <HAL_ETH_MspInit+0x170>)
 8006d24:	f7fc fa86 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006d28:	2386      	movs	r3, #134	; 0x86
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d34:	2303      	movs	r3, #3
 8006d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d38:	230b      	movs	r3, #11
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d40:	4619      	mov	r1, r3
 8006d42:	481b      	ldr	r0, [pc, #108]	; (8006db0 <HAL_ETH_MspInit+0x174>)
 8006d44:	f7fc fa76 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d4e:	2302      	movs	r3, #2
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d56:	2303      	movs	r3, #3
 8006d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d5a:	230b      	movs	r3, #11
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d62:	4619      	mov	r1, r3
 8006d64:	4813      	ldr	r0, [pc, #76]	; (8006db4 <HAL_ETH_MspInit+0x178>)
 8006d66:	f7fc fa65 	bl	8003234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006d6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d70:	2302      	movs	r3, #2
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d7c:	230b      	movs	r3, #11
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d84:	4619      	mov	r1, r3
 8006d86:	480c      	ldr	r0, [pc, #48]	; (8006db8 <HAL_ETH_MspInit+0x17c>)
 8006d88:	f7fc fa54 	bl	8003234 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2105      	movs	r1, #5
 8006d90:	203d      	movs	r0, #61	; 0x3d
 8006d92:	f7fa fc7b 	bl	800168c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006d96:	203d      	movs	r0, #61	; 0x3d
 8006d98:	f7fa fc94 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	3738      	adds	r7, #56	; 0x38
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40028000 	.word	0x40028000
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40020800 	.word	0x40020800
 8006db0:	40020000 	.word	0x40020000
 8006db4:	40020400 	.word	0x40020400
 8006db8:	40021800 	.word	0x40021800

08006dbc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <HAL_ETH_RxCpltCallback+0x1c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fd11 	bl	80077f0 <osSemaphoreRelease>
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000300 	.word	0x20000300

08006ddc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006ddc:	b5b0      	push	{r4, r5, r7, lr}
 8006dde:	b090      	sub	sp, #64	; 0x40
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006de8:	4b5c      	ldr	r3, [pc, #368]	; (8006f5c <low_level_init+0x180>)
 8006dea:	4a5d      	ldr	r2, [pc, #372]	; (8006f60 <low_level_init+0x184>)
 8006dec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006dee:	4b5b      	ldr	r3, [pc, #364]	; (8006f5c <low_level_init+0x180>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006df4:	4b59      	ldr	r3, [pc, #356]	; (8006f5c <low_level_init+0x180>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8006e00:	2380      	movs	r3, #128	; 0x80
 8006e02:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8006e06:	23e1      	movs	r3, #225	; 0xe1
 8006e08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8006e12:	2300      	movs	r3, #0
 8006e14:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8006e1e:	4a4f      	ldr	r2, [pc, #316]	; (8006f5c <low_level_init+0x180>)
 8006e20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e24:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006e26:	4b4d      	ldr	r3, [pc, #308]	; (8006f5c <low_level_init+0x180>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006e2c:	4b4b      	ldr	r3, [pc, #300]	; (8006f5c <low_level_init+0x180>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006e32:	4b4a      	ldr	r3, [pc, #296]	; (8006f5c <low_level_init+0x180>)
 8006e34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e38:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006e3a:	4848      	ldr	r0, [pc, #288]	; (8006f5c <low_level_init+0x180>)
 8006e3c:	f7fb f864 	bl	8001f08 <HAL_ETH_Init>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006e46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e54:	f043 0304 	orr.w	r3, r3, #4
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006e60:	2304      	movs	r3, #4
 8006e62:	4a40      	ldr	r2, [pc, #256]	; (8006f64 <low_level_init+0x188>)
 8006e64:	4940      	ldr	r1, [pc, #256]	; (8006f68 <low_level_init+0x18c>)
 8006e66:	483d      	ldr	r0, [pc, #244]	; (8006f5c <low_level_init+0x180>)
 8006e68:	f7fb f9ea 	bl	8002240 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	4a3f      	ldr	r2, [pc, #252]	; (8006f6c <low_level_init+0x190>)
 8006e70:	493f      	ldr	r1, [pc, #252]	; (8006f70 <low_level_init+0x194>)
 8006e72:	483a      	ldr	r0, [pc, #232]	; (8006f5c <low_level_init+0x180>)
 8006e74:	f7fb fa4d 	bl	8002312 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2206      	movs	r2, #6
 8006e7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006e80:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <low_level_init+0x180>)
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	781a      	ldrb	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006e8c:	4b33      	ldr	r3, [pc, #204]	; (8006f5c <low_level_init+0x180>)
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	785a      	ldrb	r2, [r3, #1]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006e98:	4b30      	ldr	r3, [pc, #192]	; (8006f5c <low_level_init+0x180>)
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	789a      	ldrb	r2, [r3, #2]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006ea4:	4b2d      	ldr	r3, [pc, #180]	; (8006f5c <low_level_init+0x180>)
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	78da      	ldrb	r2, [r3, #3]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006eb0:	4b2a      	ldr	r3, [pc, #168]	; (8006f5c <low_level_init+0x180>)
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	791a      	ldrb	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006ebc:	4b27      	ldr	r3, [pc, #156]	; (8006f5c <low_level_init+0x180>)
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	795a      	ldrb	r2, [r3, #5]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006ece:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ed6:	f043 030a 	orr.w	r3, r3, #10
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eee:	2101      	movs	r1, #1
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fbfb 	bl	80076ec <osSemaphoreCreate>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <low_level_init+0x198>)
 8006efa:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006efc:	4b1e      	ldr	r3, [pc, #120]	; (8006f78 <low_level_init+0x19c>)
 8006efe:	f107 040c 	add.w	r4, r7, #12
 8006f02:	461d      	mov	r5, r3
 8006f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006f10:	f107 030c 	add.w	r3, r7, #12
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 faeb 	bl	80074f2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006f1c:	480f      	ldr	r0, [pc, #60]	; (8006f5c <low_level_init+0x180>)
 8006f1e:	f7fb fd20 	bl	8002962 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006f22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f26:	461a      	mov	r2, r3
 8006f28:	211d      	movs	r1, #29
 8006f2a:	480c      	ldr	r0, [pc, #48]	; (8006f5c <low_level_init+0x180>)
 8006f2c:	f7fb fc4b 	bl	80027c6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	f043 030b 	orr.w	r3, r3, #11
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	211d      	movs	r1, #29
 8006f3e:	4807      	ldr	r0, [pc, #28]	; (8006f5c <low_level_init+0x180>)
 8006f40:	f7fb fca9 	bl	8002896 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006f44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006f48:	461a      	mov	r2, r3
 8006f4a:	211d      	movs	r1, #29
 8006f4c:	4803      	ldr	r0, [pc, #12]	; (8006f5c <low_level_init+0x180>)
 8006f4e:	f7fb fc3a 	bl	80027c6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006f52:	bf00      	nop
 8006f54:	3740      	adds	r7, #64	; 0x40
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bdb0      	pop	{r4, r5, r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	200065d0 	.word	0x200065d0
 8006f60:	40028000 	.word	0x40028000
 8006f64:	20006618 	.word	0x20006618
 8006f68:	20004d00 	.word	0x20004d00
 8006f6c:	20004d80 	.word	0x20004d80
 8006f70:	20006550 	.word	0x20006550
 8006f74:	20000300 	.word	0x20000300
 8006f78:	08016d60 	.word	0x08016d60

08006f7c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006f86:	4b4b      	ldr	r3, [pc, #300]	; (80070b4 <low_level_output+0x138>)
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006f9e:	4b45      	ldr	r3, [pc, #276]	; (80070b4 <low_level_output+0x138>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	623b      	str	r3, [r7, #32]
 8006fac:	e05a      	b.n	8007064 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da03      	bge.n	8006fbe <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006fb6:	23f8      	movs	r3, #248	; 0xf8
 8006fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006fbc:	e05c      	b.n	8007078 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	895b      	ldrh	r3, [r3, #10]
 8006fc2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006fc8:	e02f      	b.n	800702a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	18d0      	adds	r0, r2, r3
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	18d1      	adds	r1, r2, r3
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006fde:	1a9b      	subs	r3, r3, r2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f00e ff34 	bl	8015e4e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da03      	bge.n	8006ffc <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006ff4:	23f8      	movs	r3, #248	; 0xf8
 8006ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006ffa:	e03d      	b.n	8007078 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4413      	add	r3, r2
 8007008:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800700c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007018:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007024:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4413      	add	r3, r2
 8007030:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007034:	4293      	cmp	r3, r2
 8007036:	d8c8      	bhi.n	8006fca <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	18d0      	adds	r0, r2, r3
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4413      	add	r3, r2
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4619      	mov	r1, r3
 800704a:	f00e ff00 	bl	8015e4e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	623b      	str	r3, [r7, #32]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1a1      	bne.n	8006fae <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800706a:	6979      	ldr	r1, [r7, #20]
 800706c:	4811      	ldr	r0, [pc, #68]	; (80070b4 <low_level_output+0x138>)
 800706e:	f7fb f9bd 	bl	80023ec <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007078:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <low_level_output+0x138>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	f241 0314 	movw	r3, #4116	; 0x1014
 8007080:	4413      	add	r3, r2
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00d      	beq.n	80070a8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800708c:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <low_level_output+0x138>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	f241 0314 	movw	r3, #4116	; 0x1014
 8007094:	4413      	add	r3, r2
 8007096:	2220      	movs	r2, #32
 8007098:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <low_level_output+0x138>)
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	f241 0304 	movw	r3, #4100	; 0x1004
 80070a2:	4413      	add	r3, r2
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80070a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3728      	adds	r7, #40	; 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	200065d0 	.word	0x200065d0

080070b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08c      	sub	sp, #48	; 0x30
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80070d8:	2300      	movs	r3, #0
 80070da:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80070dc:	484f      	ldr	r0, [pc, #316]	; (800721c <low_level_input+0x164>)
 80070de:	f7fb fa6f 	bl	80025c0 <HAL_ETH_GetReceivedFrame_IT>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <low_level_input+0x34>

    return NULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e092      	b.n	8007212 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80070ec:	4b4b      	ldr	r3, [pc, #300]	; (800721c <low_level_input+0x164>)
 80070ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80070f2:	4b4a      	ldr	r3, [pc, #296]	; (800721c <low_level_input+0x164>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80070f8:	89fb      	ldrh	r3, [r7, #14]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80070fe:	89fb      	ldrh	r3, [r7, #14]
 8007100:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007104:	4619      	mov	r1, r3
 8007106:	2000      	movs	r0, #0
 8007108:	f005 f98e 	bl	800c428 <pbuf_alloc>
 800710c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d04b      	beq.n	80071ac <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007114:	4b41      	ldr	r3, [pc, #260]	; (800721c <low_level_input+0x164>)
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	62bb      	str	r3, [r7, #40]	; 0x28
 8007122:	e040      	b.n	80071a6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	895b      	ldrh	r3, [r3, #10]
 8007128:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800712e:	e021      	b.n	8007174 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	18d0      	adds	r0, r2, r3
 8007138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	18d1      	adds	r1, r2, r3
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	461a      	mov	r2, r3
 8007148:	f00e fe81 	bl	8015e4e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	4413      	add	r3, r2
 800715e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007162:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800716e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800717e:	4293      	cmp	r3, r2
 8007180:	d8d6      	bhi.n	8007130 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	18d0      	adds	r0, r2, r3
 800718a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4619      	mov	r1, r3
 8007194:	f00e fe5b 	bl	8015e4e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	4413      	add	r3, r2
 800719e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1bb      	bne.n	8007124 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80071ac:	4b1b      	ldr	r3, [pc, #108]	; (800721c <low_level_input+0x164>)
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	e00b      	b.n	80071d0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	3301      	adds	r3, #1
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	4b12      	ldr	r3, [pc, #72]	; (800721c <low_level_input+0x164>)
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d3ee      	bcc.n	80071b8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80071da:	4b10      	ldr	r3, [pc, #64]	; (800721c <low_level_input+0x164>)
 80071dc:	2200      	movs	r2, #0
 80071de:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80071e0:	4b0e      	ldr	r3, [pc, #56]	; (800721c <low_level_input+0x164>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	f241 0314 	movw	r3, #4116	; 0x1014
 80071e8:	4413      	add	r3, r2
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00d      	beq.n	8007210 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80071f4:	4b09      	ldr	r3, [pc, #36]	; (800721c <low_level_input+0x164>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80071fc:	4413      	add	r3, r2
 80071fe:	2280      	movs	r2, #128	; 0x80
 8007200:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <low_level_input+0x164>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	f241 0308 	movw	r3, #4104	; 0x1008
 800720a:	4413      	add	r3, r2
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007212:	4618      	mov	r0, r3
 8007214:	3730      	adds	r7, #48	; 0x30
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200065d0 	.word	0x200065d0

08007220 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800722c:	4b12      	ldr	r3, [pc, #72]	; (8007278 <ethernetif_input+0x58>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007234:	4618      	mov	r0, r3
 8007236:	f000 fa8d 	bl	8007754 <osSemaphoreWait>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f5      	bne.n	800722c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007240:	480e      	ldr	r0, [pc, #56]	; (800727c <ethernetif_input+0x5c>)
 8007242:	f00e fd71 	bl	8015d28 <sys_mutex_lock>
        p = low_level_input( netif );
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f7ff ff36 	bl	80070b8 <low_level_input>
 800724c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	68b8      	ldr	r0, [r7, #8]
 800725c:	4798      	blx	r3
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007264:	68b8      	ldr	r0, [r7, #8]
 8007266:	f005 fbbf 	bl	800c9e8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800726a:	4804      	ldr	r0, [pc, #16]	; (800727c <ethernetif_input+0x5c>)
 800726c:	f00e fd6b 	bl	8015d46 <sys_mutex_unlock>
      } while(p!=NULL);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e4      	bne.n	8007240 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007276:	e7d9      	b.n	800722c <ethernetif_input+0xc>
 8007278:	20000300 	.word	0x20000300
 800727c:	20007de8 	.word	0x20007de8

08007280 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d106      	bne.n	800729c <ethernetif_init+0x1c>
 800728e:	4b0e      	ldr	r3, [pc, #56]	; (80072c8 <ethernetif_init+0x48>)
 8007290:	f240 2233 	movw	r2, #563	; 0x233
 8007294:	490d      	ldr	r1, [pc, #52]	; (80072cc <ethernetif_init+0x4c>)
 8007296:	480e      	ldr	r0, [pc, #56]	; (80072d0 <ethernetif_init+0x50>)
 8007298:	f00e fdec 	bl	8015e74 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2273      	movs	r2, #115	; 0x73
 80072a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2274      	movs	r2, #116	; 0x74
 80072a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a09      	ldr	r2, [pc, #36]	; (80072d4 <ethernetif_init+0x54>)
 80072b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a08      	ldr	r2, [pc, #32]	; (80072d8 <ethernetif_init+0x58>)
 80072b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff fd8f 	bl	8006ddc <low_level_init>

  return ERR_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	08016d7c 	.word	0x08016d7c
 80072cc:	08016d98 	.word	0x08016d98
 80072d0:	08016da8 	.word	0x08016da8
 80072d4:	08013ee1 	.word	0x08013ee1
 80072d8:	08006f7d 	.word	0x08006f7d

080072dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80072e0:	f7fa f8ee 	bl	80014c0 <HAL_GetTick>
 80072e4:	4603      	mov	r3, r0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80072fc:	f107 0308 	add.w	r3, r7, #8
 8007300:	461a      	mov	r2, r3
 8007302:	2101      	movs	r1, #1
 8007304:	4816      	ldr	r0, [pc, #88]	; (8007360 <ethernetif_set_link+0x74>)
 8007306:	f7fb fa5e 	bl	80027c6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	d108      	bne.n	8007334 <ethernetif_set_link+0x48>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f004 ff4d 	bl	800c1cc <netif_set_link_up>
 8007332:	e011      	b.n	8007358 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800733c:	089b      	lsrs	r3, r3, #2
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <ethernetif_set_link+0x6c>
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f004 ff6e 	bl	800c234 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8007358:	20c8      	movs	r0, #200	; 0xc8
 800735a:	f000 f916 	bl	800758a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800735e:	e7cd      	b.n	80072fc <ethernetif_set_link+0x10>
 8007360:	200065d0 	.word	0x200065d0

08007364 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800737a:	089b      	lsrs	r3, r3, #2
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d05d      	beq.n	8007442 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007386:	4b34      	ldr	r3, [pc, #208]	; (8007458 <ethernetif_update_config+0xf4>)
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d03f      	beq.n	800740e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800738e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007392:	2100      	movs	r1, #0
 8007394:	4830      	ldr	r0, [pc, #192]	; (8007458 <ethernetif_update_config+0xf4>)
 8007396:	f7fb fa7e 	bl	8002896 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800739a:	f7fa f891 	bl	80014c0 <HAL_GetTick>
 800739e:	4603      	mov	r3, r0
 80073a0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80073a2:	f107 0308 	add.w	r3, r7, #8
 80073a6:	461a      	mov	r2, r3
 80073a8:	2101      	movs	r1, #1
 80073aa:	482b      	ldr	r0, [pc, #172]	; (8007458 <ethernetif_update_config+0xf4>)
 80073ac:	f7fb fa0b 	bl	80027c6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80073b0:	f7fa f886 	bl	80014c0 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073be:	d828      	bhi.n	8007412 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0eb      	beq.n	80073a2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80073ca:	f107 0308 	add.w	r3, r7, #8
 80073ce:	461a      	mov	r2, r3
 80073d0:	211f      	movs	r1, #31
 80073d2:	4821      	ldr	r0, [pc, #132]	; (8007458 <ethernetif_update_config+0xf4>)
 80073d4:	f7fb f9f7 	bl	80027c6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80073e2:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <ethernetif_update_config+0xf4>)
 80073e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073e8:	60da      	str	r2, [r3, #12]
 80073ea:	e002      	b.n	80073f2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80073ec:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <ethernetif_update_config+0xf4>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80073fc:	4b16      	ldr	r3, [pc, #88]	; (8007458 <ethernetif_update_config+0xf4>)
 80073fe:	2200      	movs	r2, #0
 8007400:	609a      	str	r2, [r3, #8]
 8007402:	e016      	b.n	8007432 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007404:	4b14      	ldr	r3, [pc, #80]	; (8007458 <ethernetif_update_config+0xf4>)
 8007406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	e011      	b.n	8007432 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800740e:	bf00      	nop
 8007410:	e000      	b.n	8007414 <ethernetif_update_config+0xb0>
          goto error;
 8007412:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007414:	4b10      	ldr	r3, [pc, #64]	; (8007458 <ethernetif_update_config+0xf4>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	08db      	lsrs	r3, r3, #3
 800741a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <ethernetif_update_config+0xf4>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007424:	4313      	orrs	r3, r2
 8007426:	b29b      	uxth	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	2100      	movs	r1, #0
 800742c:	480a      	ldr	r0, [pc, #40]	; (8007458 <ethernetif_update_config+0xf4>)
 800742e:	f7fb fa32 	bl	8002896 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007432:	2100      	movs	r1, #0
 8007434:	4808      	ldr	r0, [pc, #32]	; (8007458 <ethernetif_update_config+0xf4>)
 8007436:	f7fb faf3 	bl	8002a20 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800743a:	4807      	ldr	r0, [pc, #28]	; (8007458 <ethernetif_update_config+0xf4>)
 800743c:	f7fb fa91 	bl	8002962 <HAL_ETH_Start>
 8007440:	e002      	b.n	8007448 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <ethernetif_update_config+0xf4>)
 8007444:	f7fb fabc 	bl	80029c0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f807 	bl	800745c <ethernetif_notify_conn_changed>
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200065d0 	.word	0x200065d0

0800745c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800747e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007482:	2b84      	cmp	r3, #132	; 0x84
 8007484:	d005      	beq.n	8007492 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007486:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	3303      	adds	r3, #3
 8007490:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a6:	f3ef 8305 	mrs	r3, IPSR
 80074aa:	607b      	str	r3, [r7, #4]
  return(result);
 80074ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80074c8:	f001 fc88 	bl	8008ddc <vTaskStartScheduler>
  
  return osOK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80074d6:	f7ff ffe3 	bl	80074a0 <inHandlerMode>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80074e0:	f001 fd9a 	bl	8009018 <xTaskGetTickCountFromISR>
 80074e4:	4603      	mov	r3, r0
 80074e6:	e002      	b.n	80074ee <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80074e8:	f001 fd86 	bl	8008ff8 <xTaskGetTickCount>
 80074ec:	4603      	mov	r3, r0
  }
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80074f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f4:	b089      	sub	sp, #36	; 0x24
 80074f6:	af04      	add	r7, sp, #16
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d020      	beq.n	8007546 <osThreadCreate+0x54>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01c      	beq.n	8007546 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685c      	ldr	r4, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681d      	ldr	r5, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691e      	ldr	r6, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff ffa6 	bl	8007470 <makeFreeRtosPriority>
 8007524:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	9100      	str	r1, [sp, #0]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4632      	mov	r2, r6
 8007538:	4629      	mov	r1, r5
 800753a:	4620      	mov	r0, r4
 800753c:	f001 fa81 	bl	8008a42 <xTaskCreateStatic>
 8007540:	4603      	mov	r3, r0
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e01c      	b.n	8007580 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685c      	ldr	r4, [r3, #4]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007552:	b29e      	uxth	r6, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff ff88 	bl	8007470 <makeFreeRtosPriority>
 8007560:	4602      	mov	r2, r0
 8007562:	f107 030c 	add.w	r3, r7, #12
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	9200      	str	r2, [sp, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	4632      	mov	r2, r6
 800756e:	4629      	mov	r1, r5
 8007570:	4620      	mov	r0, r4
 8007572:	f001 fac6 	bl	8008b02 <xTaskCreate>
 8007576:	4603      	mov	r3, r0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d001      	beq.n	8007580 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	e000      	b.n	8007582 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007580:	68fb      	ldr	r3, [r7, #12]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800758a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b084      	sub	sp, #16
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <osDelay+0x16>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	e000      	b.n	80075a2 <osDelay+0x18>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 fbe4 	bl	8008d70 <vTaskDelay>
  
  return osOK;
 80075a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	4619      	mov	r1, r3
 80075c8:	2001      	movs	r0, #1
 80075ca:	f000 fc52 	bl	8007e72 <xQueueCreateMutexStatic>
 80075ce:	4603      	mov	r3, r0
 80075d0:	e003      	b.n	80075da <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80075d2:	2001      	movs	r0, #1
 80075d4:	f000 fc35 	bl	8007e42 <xQueueCreateMutex>
 80075d8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <osMutexWait+0x18>
    return osErrorParameter;
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	e03a      	b.n	8007672 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007606:	d103      	bne.n	8007610 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e009      	b.n	8007624 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <osMutexWait+0x40>
      ticks = 1;
 8007620:	2301      	movs	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007624:	f7ff ff3c 	bl	80074a0 <inHandlerMode>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d017      	beq.n	800765e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	461a      	mov	r2, r3
 8007634:	2100      	movs	r1, #0
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 f858 	bl	80086ec <xQueueReceiveFromISR>
 800763c:	4603      	mov	r3, r0
 800763e:	2b01      	cmp	r3, #1
 8007640:	d001      	beq.n	8007646 <osMutexWait+0x62>
      return osErrorOS;
 8007642:	23ff      	movs	r3, #255	; 0xff
 8007644:	e015      	b.n	8007672 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d011      	beq.n	8007670 <osMutexWait+0x8c>
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <osMutexWait+0x98>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	e008      	b.n	8007670 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 ff33 	bl	80084cc <xQueueSemaphoreTake>
 8007666:	4603      	mov	r3, r0
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <osMutexWait+0x8c>
    return osErrorOS;
 800766c:	23ff      	movs	r3, #255	; 0xff
 800766e:	e000      	b.n	8007672 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	e000ed04 	.word	0xe000ed04

08007680 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800768c:	2300      	movs	r3, #0
 800768e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007690:	f7ff ff06 	bl	80074a0 <inHandlerMode>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d016      	beq.n	80076c8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800769a:	f107 0308 	add.w	r3, r7, #8
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fd9f 	bl	80081e4 <xQueueGiveFromISR>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d001      	beq.n	80076b0 <osMutexRelease+0x30>
      return osErrorOS;
 80076ac:	23ff      	movs	r3, #255	; 0xff
 80076ae:	e017      	b.n	80076e0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d013      	beq.n	80076de <osMutexRelease+0x5e>
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <osMutexRelease+0x68>)
 80076b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	e00a      	b.n	80076de <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80076c8:	2300      	movs	r3, #0
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fbea 	bl	8007ea8 <xQueueGenericSend>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80076da:	23ff      	movs	r3, #255	; 0xff
 80076dc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d010      	beq.n	8007720 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d10b      	bne.n	800771c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	2303      	movs	r3, #3
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	2001      	movs	r0, #1
 8007714:	f000 fa9e 	bl	8007c54 <xQueueGenericCreateStatic>
 8007718:	4603      	mov	r3, r0
 800771a:	e016      	b.n	800774a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	e014      	b.n	800774a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d110      	bne.n	8007748 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8007726:	2203      	movs	r2, #3
 8007728:	2100      	movs	r1, #0
 800772a:	2001      	movs	r0, #1
 800772c:	f000 fb0f 	bl	8007d4e <xQueueGenericCreate>
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <osSemaphoreCreate+0x58>
 8007738:	2300      	movs	r3, #0
 800773a:	2200      	movs	r2, #0
 800773c:	2100      	movs	r1, #0
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fbb2 	bl	8007ea8 <xQueueGenericSend>
      return sema;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	e000      	b.n	800774a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007748:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007768:	2380      	movs	r3, #128	; 0x80
 800776a:	e03a      	b.n	80077e2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007776:	d103      	bne.n	8007780 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	e009      	b.n	8007794 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <osSemaphoreWait+0x40>
      ticks = 1;
 8007790:	2301      	movs	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007794:	f7ff fe84 	bl	80074a0 <inHandlerMode>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800779e:	f107 0308 	add.w	r3, r7, #8
 80077a2:	461a      	mov	r2, r3
 80077a4:	2100      	movs	r1, #0
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 ffa0 	bl	80086ec <xQueueReceiveFromISR>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d001      	beq.n	80077b6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80077b2:	23ff      	movs	r3, #255	; 0xff
 80077b4:	e015      	b.n	80077e2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d011      	beq.n	80077e0 <osSemaphoreWait+0x8c>
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <osSemaphoreWait+0x98>)
 80077be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	e008      	b.n	80077e0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80077ce:	68f9      	ldr	r1, [r7, #12]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fe7b 	bl	80084cc <xQueueSemaphoreTake>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d001      	beq.n	80077e0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80077dc:	23ff      	movs	r3, #255	; 0xff
 80077de:	e000      	b.n	80077e2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007800:	f7ff fe4e 	bl	80074a0 <inHandlerMode>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d016      	beq.n	8007838 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fce7 	bl	80081e4 <xQueueGiveFromISR>
 8007816:	4603      	mov	r3, r0
 8007818:	2b01      	cmp	r3, #1
 800781a:	d001      	beq.n	8007820 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800781c:	23ff      	movs	r3, #255	; 0xff
 800781e:	e017      	b.n	8007850 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d013      	beq.n	800784e <osSemaphoreRelease+0x5e>
 8007826:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <osSemaphoreRelease+0x68>)
 8007828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	e00a      	b.n	800784e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007838:	2300      	movs	r3, #0
 800783a:	2200      	movs	r2, #0
 800783c:	2100      	movs	r1, #0
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fb32 	bl	8007ea8 <xQueueGenericSend>
 8007844:	4603      	mov	r3, r0
 8007846:	2b01      	cmp	r3, #1
 8007848:	d001      	beq.n	800784e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800784a:	23ff      	movs	r3, #255	; 0xff
 800784c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800784e:	68fb      	ldr	r3, [r7, #12]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800785c:	b590      	push	{r4, r7, lr}
 800785e:	b085      	sub	sp, #20
 8007860:	af02      	add	r7, sp, #8
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d012      	beq.n	8007894 <osMessageCreate+0x38>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00e      	beq.n	8007894 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6859      	ldr	r1, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689a      	ldr	r2, [r3, #8]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68dc      	ldr	r4, [r3, #12]
 8007886:	2300      	movs	r3, #0
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	4623      	mov	r3, r4
 800788c:	f000 f9e2 	bl	8007c54 <xQueueGenericCreateStatic>
 8007890:	4603      	mov	r3, r0
 8007892:	e008      	b.n	80078a6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6818      	ldr	r0, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	4619      	mov	r1, r3
 80078a0:	f000 fa55 	bl	8007d4e <xQueueGenericCreate>
 80078a4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd90      	pop	{r4, r7, pc}
	...

080078b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <osMessagePut+0x1e>
    ticks = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80078ce:	f7ff fde7 	bl	80074a0 <inHandlerMode>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d018      	beq.n	800790a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80078d8:	f107 0210 	add.w	r2, r7, #16
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	2300      	movs	r3, #0
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fbe2 	bl	80080ac <xQueueGenericSendFromISR>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d001      	beq.n	80078f2 <osMessagePut+0x42>
      return osErrorOS;
 80078ee:	23ff      	movs	r3, #255	; 0xff
 80078f0:	e018      	b.n	8007924 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d014      	beq.n	8007922 <osMessagePut+0x72>
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <osMessagePut+0x7c>)
 80078fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	e00b      	b.n	8007922 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800790a:	f107 0108 	add.w	r1, r7, #8
 800790e:	2300      	movs	r3, #0
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fac8 	bl	8007ea8 <xQueueGenericSend>
 8007918:	4603      	mov	r3, r0
 800791a:	2b01      	cmp	r3, #1
 800791c:	d001      	beq.n	8007922 <osMessagePut+0x72>
      return osErrorOS;
 800791e:	23ff      	movs	r3, #255	; 0xff
 8007920:	e000      	b.n	8007924 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007930:	b590      	push	{r4, r7, lr}
 8007932:	b08b      	sub	sp, #44	; 0x2c
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800794a:	2380      	movs	r3, #128	; 0x80
 800794c:	617b      	str	r3, [r7, #20]
    return event;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	461c      	mov	r4, r3
 8007952:	f107 0314 	add.w	r3, r7, #20
 8007956:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800795a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800795e:	e054      	b.n	8007a0a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007960:	2300      	movs	r3, #0
 8007962:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800796e:	d103      	bne.n	8007978 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
 8007976:	e009      	b.n	800798c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <osMessageGet+0x5c>
      ticks = 1;
 8007988:	2301      	movs	r3, #1
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800798c:	f7ff fd88 	bl	80074a0 <inHandlerMode>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01c      	beq.n	80079d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007996:	f107 0220 	add.w	r2, r7, #32
 800799a:	f107 0314 	add.w	r3, r7, #20
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	68b8      	ldr	r0, [r7, #8]
 80079a4:	f000 fea2 	bl	80086ec <xQueueReceiveFromISR>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d102      	bne.n	80079b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80079ae:	2310      	movs	r3, #16
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	e001      	b.n	80079b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d01d      	beq.n	80079fa <osMessageGet+0xca>
 80079be:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <osMessageGet+0xe4>)
 80079c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	e014      	b.n	80079fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80079d0:	f107 0314 	add.w	r3, r7, #20
 80079d4:	3304      	adds	r3, #4
 80079d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d8:	4619      	mov	r1, r3
 80079da:	68b8      	ldr	r0, [r7, #8]
 80079dc:	f000 fc94 	bl	8008308 <xQueueReceive>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d102      	bne.n	80079ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80079e6:	2310      	movs	r3, #16
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	e006      	b.n	80079fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <osMessageGet+0xc6>
 80079f2:	2300      	movs	r3, #0
 80079f4:	e000      	b.n	80079f8 <osMessageGet+0xc8>
 80079f6:	2340      	movs	r3, #64	; 0x40
 80079f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	461c      	mov	r4, r3
 80079fe:	f107 0314 	add.w	r3, r7, #20
 8007a02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	372c      	adds	r7, #44	; 0x2c
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd90      	pop	{r4, r7, pc}
 8007a12:	bf00      	nop
 8007a14:	e000ed04 	.word	0xe000ed04

08007a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f103 0208 	add.w	r2, r3, #8
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f103 0208 	add.w	r2, r3, #8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f103 0208 	add.w	r2, r3, #8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007aba:	b480      	push	{r7}
 8007abc:	b085      	sub	sp, #20
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad0:	d103      	bne.n	8007ada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	e00c      	b.n	8007af4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3308      	adds	r3, #8
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e002      	b.n	8007ae8 <vListInsert+0x2e>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d2f6      	bcs.n	8007ae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6892      	ldr	r2, [r2, #8]
 8007b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6852      	ldr	r2, [r2, #4]
 8007b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d103      	bne.n	8007b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	1e5a      	subs	r2, r3, #1
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10b      	bne.n	8007bac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	b672      	cpsid	i
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	b662      	cpsie	i
 8007ba8:	60bb      	str	r3, [r7, #8]
 8007baa:	e7fe      	b.n	8007baa <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007bac:	f002 f884 	bl	8009cb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb8:	68f9      	ldr	r1, [r7, #12]
 8007bba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bbc:	fb01 f303 	mul.w	r3, r1, r3
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	68f9      	ldr	r1, [r7, #12]
 8007be0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	441a      	add	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	22ff      	movs	r2, #255	; 0xff
 8007bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	22ff      	movs	r2, #255	; 0xff
 8007bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d114      	bne.n	8007c2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01a      	beq.n	8007c40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3310      	adds	r3, #16
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 fb50 	bl	80092b4 <xTaskRemoveFromEventList>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d012      	beq.n	8007c40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <xQueueGenericReset+0xd0>)
 8007c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	e009      	b.n	8007c40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3310      	adds	r3, #16
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fef1 	bl	8007a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3324      	adds	r3, #36	; 0x24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff feec 	bl	8007a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c40:	f002 f86c 	bl	8009d1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c44:	2301      	movs	r3, #1
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	; 0x38
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <xQueueGenericCreateStatic+0x2c>
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	b672      	cpsid	i
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	b662      	cpsie	i
 8007c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c7e:	e7fe      	b.n	8007c7e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <xQueueGenericCreateStatic+0x4a>
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	b672      	cpsid	i
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	b662      	cpsie	i
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c9c:	e7fe      	b.n	8007c9c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <xQueueGenericCreateStatic+0x56>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <xQueueGenericCreateStatic+0x5a>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <xQueueGenericCreateStatic+0x5c>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10b      	bne.n	8007ccc <xQueueGenericCreateStatic+0x78>
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	b672      	cpsid	i
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	b662      	cpsie	i
 8007cc8:	623b      	str	r3, [r7, #32]
 8007cca:	e7fe      	b.n	8007cca <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <xQueueGenericCreateStatic+0x84>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <xQueueGenericCreateStatic+0x88>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <xQueueGenericCreateStatic+0x8a>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <xQueueGenericCreateStatic+0xa6>
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	b672      	cpsid	i
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	b662      	cpsie	i
 8007cf6:	61fb      	str	r3, [r7, #28]
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cfa:	2348      	movs	r3, #72	; 0x48
 8007cfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b48      	cmp	r3, #72	; 0x48
 8007d02:	d00b      	beq.n	8007d1c <xQueueGenericCreateStatic+0xc8>
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	b672      	cpsid	i
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	b662      	cpsie	i
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	e7fe      	b.n	8007d1a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00d      	beq.n	8007d44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d30:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	68b9      	ldr	r1, [r7, #8]
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f846 	bl	8007dd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3730      	adds	r7, #48	; 0x30
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b08a      	sub	sp, #40	; 0x28
 8007d52:	af02      	add	r7, sp, #8
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10b      	bne.n	8007d7a <xQueueGenericCreate+0x2c>
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	b672      	cpsid	i
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	b662      	cpsie	i
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	e7fe      	b.n	8007d78 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	61fb      	str	r3, [r7, #28]
 8007d84:	e004      	b.n	8007d90 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	fb02 f303 	mul.w	r3, r2, r3
 8007d8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	3348      	adds	r3, #72	; 0x48
 8007d94:	4618      	mov	r0, r3
 8007d96:	f002 f8b1 	bl	8009efc <pvPortMalloc>
 8007d9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d011      	beq.n	8007dc6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	3348      	adds	r3, #72	; 0x48
 8007daa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007db4:	79fa      	ldrb	r2, [r7, #7]
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f805 	bl	8007dd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
	}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	e002      	b.n	8007df2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dfe:	2101      	movs	r1, #1
 8007e00:	69b8      	ldr	r0, [r7, #24]
 8007e02:	f7ff febd 	bl	8007b80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2200      	movs	r2, #0
 8007e32:	2100      	movs	r1, #0
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f837 	bl	8007ea8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	2300      	movs	r3, #0
 8007e52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6939      	ldr	r1, [r7, #16]
 8007e5a:	6978      	ldr	r0, [r7, #20]
 8007e5c:	f7ff ff77 	bl	8007d4e <xQueueGenericCreate>
 8007e60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff ffd3 	bl	8007e0e <prvInitialiseMutex>

		return xNewQueue;
 8007e68:	68fb      	ldr	r3, [r7, #12]
	}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b088      	sub	sp, #32
 8007e76:	af02      	add	r7, sp, #8
 8007e78:	4603      	mov	r3, r0
 8007e7a:	6039      	str	r1, [r7, #0]
 8007e7c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	2300      	movs	r3, #0
 8007e84:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	6939      	ldr	r1, [r7, #16]
 8007e90:	6978      	ldr	r0, [r7, #20]
 8007e92:	f7ff fedf 	bl	8007c54 <xQueueGenericCreateStatic>
 8007e96:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff ffb8 	bl	8007e0e <prvInitialiseMutex>

		return xNewQueue;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
	}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08e      	sub	sp, #56	; 0x38
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10b      	bne.n	8007edc <xQueueGenericSend+0x34>
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	b672      	cpsid	i
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	b662      	cpsie	i
 8007ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eda:	e7fe      	b.n	8007eda <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d103      	bne.n	8007eea <xQueueGenericSend+0x42>
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <xQueueGenericSend+0x46>
 8007eea:	2301      	movs	r3, #1
 8007eec:	e000      	b.n	8007ef0 <xQueueGenericSend+0x48>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <xQueueGenericSend+0x64>
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	b672      	cpsid	i
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	b662      	cpsie	i
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
 8007f0a:	e7fe      	b.n	8007f0a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d103      	bne.n	8007f1a <xQueueGenericSend+0x72>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <xQueueGenericSend+0x76>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <xQueueGenericSend+0x78>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <xQueueGenericSend+0x94>
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	e7fe      	b.n	8007f3a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f3c:	f001 fb78 	bl	8009630 <xTaskGetSchedulerState>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <xQueueGenericSend+0xa4>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <xQueueGenericSend+0xa8>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <xQueueGenericSend+0xaa>
 8007f50:	2300      	movs	r3, #0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10b      	bne.n	8007f6e <xQueueGenericSend+0xc6>
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	b672      	cpsid	i
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	b662      	cpsie	i
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	e7fe      	b.n	8007f6c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f6e:	f001 fea3 	bl	8009cb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d302      	bcc.n	8007f84 <xQueueGenericSend+0xdc>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d129      	bne.n	8007fd8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	68b9      	ldr	r1, [r7, #8]
 8007f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f8a:	f000 fc4a 	bl	8008822 <prvCopyDataToQueue>
 8007f8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d010      	beq.n	8007fba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	3324      	adds	r3, #36	; 0x24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 f989 	bl	80092b4 <xTaskRemoveFromEventList>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d013      	beq.n	8007fd0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fa8:	4b3f      	ldr	r3, [pc, #252]	; (80080a8 <xQueueGenericSend+0x200>)
 8007faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	e00a      	b.n	8007fd0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fc0:	4b39      	ldr	r3, [pc, #228]	; (80080a8 <xQueueGenericSend+0x200>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fd0:	f001 fea4 	bl	8009d1c <vPortExitCritical>
				return pdPASS;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e063      	b.n	80080a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d103      	bne.n	8007fe6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fde:	f001 fe9d 	bl	8009d1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e05c      	b.n	80080a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fec:	f107 0314 	add.w	r3, r7, #20
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f001 f9c3 	bl	800937c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ffa:	f001 fe8f 	bl	8009d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ffe:	f000 ff4f 	bl	8008ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008002:	f001 fe59 	bl	8009cb8 <vPortEnterCritical>
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800800c:	b25b      	sxtb	r3, r3
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008012:	d103      	bne.n	800801c <xQueueGenericSend+0x174>
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008022:	b25b      	sxtb	r3, r3
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008028:	d103      	bne.n	8008032 <xQueueGenericSend+0x18a>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008032:	f001 fe73 	bl	8009d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008036:	1d3a      	adds	r2, r7, #4
 8008038:	f107 0314 	add.w	r3, r7, #20
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f001 f9b2 	bl	80093a8 <xTaskCheckForTimeOut>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d124      	bne.n	8008094 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800804a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800804c:	f000 fce1 	bl	8008a12 <prvIsQueueFull>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d018      	beq.n	8008088 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	3310      	adds	r3, #16
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	4611      	mov	r1, r2
 800805e:	4618      	mov	r0, r3
 8008060:	f001 f902 	bl	8009268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008066:	f000 fc6c 	bl	8008942 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800806a:	f000 ff27 	bl	8008ebc <xTaskResumeAll>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	f47f af7c 	bne.w	8007f6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <xQueueGenericSend+0x200>)
 8008078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	e772      	b.n	8007f6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808a:	f000 fc5a 	bl	8008942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800808e:	f000 ff15 	bl	8008ebc <xTaskResumeAll>
 8008092:	e76c      	b.n	8007f6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008096:	f000 fc54 	bl	8008942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800809a:	f000 ff0f 	bl	8008ebc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800809e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3738      	adds	r7, #56	; 0x38
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	e000ed04 	.word	0xe000ed04

080080ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08e      	sub	sp, #56	; 0x38
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <xQueueGenericSendFromISR+0x30>
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	b672      	cpsid	i
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	b662      	cpsie	i
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
 80080da:	e7fe      	b.n	80080da <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <xQueueGenericSendFromISR+0x3e>
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <xQueueGenericSendFromISR+0x42>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <xQueueGenericSendFromISR+0x44>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10b      	bne.n	800810c <xQueueGenericSendFromISR+0x60>
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	b672      	cpsid	i
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	b662      	cpsie	i
 8008108:	623b      	str	r3, [r7, #32]
 800810a:	e7fe      	b.n	800810a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d103      	bne.n	800811a <xQueueGenericSendFromISR+0x6e>
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <xQueueGenericSendFromISR+0x72>
 800811a:	2301      	movs	r3, #1
 800811c:	e000      	b.n	8008120 <xQueueGenericSendFromISR+0x74>
 800811e:	2300      	movs	r3, #0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <xQueueGenericSendFromISR+0x90>
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	b672      	cpsid	i
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	b662      	cpsie	i
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	e7fe      	b.n	800813a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800813c:	f001 fe9c 	bl	8009e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008140:	f3ef 8211 	mrs	r2, BASEPRI
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	b672      	cpsid	i
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	b662      	cpsie	i
 8008158:	61ba      	str	r2, [r7, #24]
 800815a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800815c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008168:	429a      	cmp	r2, r3
 800816a:	d302      	bcc.n	8008172 <xQueueGenericSendFromISR+0xc6>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d12c      	bne.n	80081cc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008182:	f000 fb4e 	bl	8008822 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008186:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800818a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800818e:	d112      	bne.n	80081b6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d016      	beq.n	80081c6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	3324      	adds	r3, #36	; 0x24
 800819c:	4618      	mov	r0, r3
 800819e:	f001 f889 	bl	80092b4 <xTaskRemoveFromEventList>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00e      	beq.n	80081c6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	e007      	b.n	80081c6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081ba:	3301      	adds	r3, #1
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	b25a      	sxtb	r2, r3
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081c6:	2301      	movs	r3, #1
 80081c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80081ca:	e001      	b.n	80081d0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	637b      	str	r3, [r7, #52]	; 0x34
 80081d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3738      	adds	r7, #56	; 0x38
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08e      	sub	sp, #56	; 0x38
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10b      	bne.n	8008210 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	b672      	cpsid	i
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	b662      	cpsie	i
 800820c:	623b      	str	r3, [r7, #32]
 800820e:	e7fe      	b.n	800820e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <xQueueGiveFromISR+0x4c>
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	b672      	cpsid	i
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	b662      	cpsie	i
 800822c:	61fb      	str	r3, [r7, #28]
 800822e:	e7fe      	b.n	800822e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d103      	bne.n	8008240 <xQueueGiveFromISR+0x5c>
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <xQueueGiveFromISR+0x60>
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <xQueueGiveFromISR+0x62>
 8008244:	2300      	movs	r3, #0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10b      	bne.n	8008262 <xQueueGiveFromISR+0x7e>
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	b672      	cpsid	i
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	b662      	cpsie	i
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	e7fe      	b.n	8008260 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008262:	f001 fe09 	bl	8009e78 <vPortValidateInterruptPriority>
	__asm volatile
 8008266:	f3ef 8211 	mrs	r2, BASEPRI
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	b672      	cpsid	i
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	b662      	cpsie	i
 800827e:	617a      	str	r2, [r7, #20]
 8008280:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008282:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008284:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008292:	429a      	cmp	r2, r3
 8008294:	d22b      	bcs.n	80082ee <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800829c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b0:	d112      	bne.n	80082d8 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d016      	beq.n	80082e8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	3324      	adds	r3, #36	; 0x24
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fff8 	bl	80092b4 <xTaskRemoveFromEventList>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00e      	beq.n	80082e8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2201      	movs	r2, #1
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	e007      	b.n	80082e8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082dc:	3301      	adds	r3, #1
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	b25a      	sxtb	r2, r3
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082e8:	2301      	movs	r3, #1
 80082ea:	637b      	str	r3, [r7, #52]	; 0x34
 80082ec:	e001      	b.n	80082f2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	637b      	str	r3, [r7, #52]	; 0x34
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3738      	adds	r7, #56	; 0x38
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08c      	sub	sp, #48	; 0x30
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008314:	2300      	movs	r3, #0
 8008316:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10b      	bne.n	800833a <xQueueReceive+0x32>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	623b      	str	r3, [r7, #32]
 8008338:	e7fe      	b.n	8008338 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d103      	bne.n	8008348 <xQueueReceive+0x40>
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <xQueueReceive+0x44>
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <xQueueReceive+0x46>
 800834c:	2300      	movs	r3, #0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10b      	bne.n	800836a <xQueueReceive+0x62>
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	b672      	cpsid	i
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	b662      	cpsie	i
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e7fe      	b.n	8008368 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800836a:	f001 f961 	bl	8009630 <xTaskGetSchedulerState>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d102      	bne.n	800837a <xQueueReceive+0x72>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <xQueueReceive+0x76>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueReceive+0x78>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10b      	bne.n	800839c <xQueueReceive+0x94>
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	b672      	cpsid	i
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	b662      	cpsie	i
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	e7fe      	b.n	800839a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800839c:	f001 fc8c 	bl	8009cb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01f      	beq.n	80083ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083ac:	68b9      	ldr	r1, [r7, #8]
 80083ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b0:	f000 faa1 	bl	80088f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	1e5a      	subs	r2, r3, #1
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00f      	beq.n	80083e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	3310      	adds	r3, #16
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 ff73 	bl	80092b4 <xTaskRemoveFromEventList>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083d4:	4b3c      	ldr	r3, [pc, #240]	; (80084c8 <xQueueReceive+0x1c0>)
 80083d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083e4:	f001 fc9a 	bl	8009d1c <vPortExitCritical>
				return pdPASS;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e069      	b.n	80084c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083f2:	f001 fc93 	bl	8009d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e062      	b.n	80084c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008400:	f107 0310 	add.w	r3, r7, #16
 8008404:	4618      	mov	r0, r3
 8008406:	f000 ffb9 	bl	800937c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800840a:	2301      	movs	r3, #1
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800840e:	f001 fc85 	bl	8009d1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008412:	f000 fd45 	bl	8008ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008416:	f001 fc4f 	bl	8009cb8 <vPortEnterCritical>
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008420:	b25b      	sxtb	r3, r3
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008426:	d103      	bne.n	8008430 <xQueueReceive+0x128>
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008436:	b25b      	sxtb	r3, r3
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800843c:	d103      	bne.n	8008446 <xQueueReceive+0x13e>
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008446:	f001 fc69 	bl	8009d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800844a:	1d3a      	adds	r2, r7, #4
 800844c:	f107 0310 	add.w	r3, r7, #16
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f000 ffa8 	bl	80093a8 <xTaskCheckForTimeOut>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d123      	bne.n	80084a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800845e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008460:	f000 fac1 	bl	80089e6 <prvIsQueueEmpty>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d017      	beq.n	800849a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	3324      	adds	r3, #36	; 0x24
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	4611      	mov	r1, r2
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fef8 	bl	8009268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847a:	f000 fa62 	bl	8008942 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800847e:	f000 fd1d 	bl	8008ebc <xTaskResumeAll>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d189      	bne.n	800839c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <xQueueReceive+0x1c0>)
 800848a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	e780      	b.n	800839c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800849a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800849c:	f000 fa51 	bl	8008942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084a0:	f000 fd0c 	bl	8008ebc <xTaskResumeAll>
 80084a4:	e77a      	b.n	800839c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a8:	f000 fa4b 	bl	8008942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ac:	f000 fd06 	bl	8008ebc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b2:	f000 fa98 	bl	80089e6 <prvIsQueueEmpty>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f43f af6f 	beq.w	800839c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3730      	adds	r7, #48	; 0x30
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000ed04 	.word	0xe000ed04

080084cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08e      	sub	sp, #56	; 0x38
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80084de:	2300      	movs	r3, #0
 80084e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10b      	bne.n	8008500 <xQueueSemaphoreTake+0x34>
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	b672      	cpsid	i
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	b662      	cpsie	i
 80084fc:	623b      	str	r3, [r7, #32]
 80084fe:	e7fe      	b.n	80084fe <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <xQueueSemaphoreTake+0x54>
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	b672      	cpsid	i
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	b662      	cpsie	i
 800851c:	61fb      	str	r3, [r7, #28]
 800851e:	e7fe      	b.n	800851e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008520:	f001 f886 	bl	8009630 <xTaskGetSchedulerState>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <xQueueSemaphoreTake+0x64>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <xQueueSemaphoreTake+0x68>
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <xQueueSemaphoreTake+0x6a>
 8008534:	2300      	movs	r3, #0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10b      	bne.n	8008552 <xQueueSemaphoreTake+0x86>
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	b672      	cpsid	i
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	b662      	cpsie	i
 800854e:	61bb      	str	r3, [r7, #24]
 8008550:	e7fe      	b.n	8008550 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008552:	f001 fbb1 	bl	8009cb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	2b00      	cmp	r3, #0
 8008560:	d024      	beq.n	80085ac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	1e5a      	subs	r2, r3, #1
 8008566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008568:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008572:	f001 fa1f 	bl	80099b4 <pvTaskIncrementMutexHeldCount>
 8008576:	4602      	mov	r2, r0
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00f      	beq.n	80085a4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	3310      	adds	r3, #16
 8008588:	4618      	mov	r0, r3
 800858a:	f000 fe93 	bl	80092b4 <xTaskRemoveFromEventList>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d007      	beq.n	80085a4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008594:	4b54      	ldr	r3, [pc, #336]	; (80086e8 <xQueueSemaphoreTake+0x21c>)
 8008596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085a4:	f001 fbba 	bl	8009d1c <vPortExitCritical>
				return pdPASS;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e098      	b.n	80086de <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d112      	bne.n	80085d8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <xQueueSemaphoreTake+0x104>
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	b672      	cpsid	i
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	b662      	cpsie	i
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	e7fe      	b.n	80085ce <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80085d0:	f001 fba4 	bl	8009d1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e082      	b.n	80086de <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d106      	bne.n	80085ec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 feca 	bl	800937c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085e8:	2301      	movs	r3, #1
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085ec:	f001 fb96 	bl	8009d1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085f0:	f000 fc56 	bl	8008ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085f4:	f001 fb60 	bl	8009cb8 <vPortEnterCritical>
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085fe:	b25b      	sxtb	r3, r3
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008604:	d103      	bne.n	800860e <xQueueSemaphoreTake+0x142>
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008614:	b25b      	sxtb	r3, r3
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800861a:	d103      	bne.n	8008624 <xQueueSemaphoreTake+0x158>
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008624:	f001 fb7a 	bl	8009d1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008628:	463a      	mov	r2, r7
 800862a:	f107 030c 	add.w	r3, r7, #12
 800862e:	4611      	mov	r1, r2
 8008630:	4618      	mov	r0, r3
 8008632:	f000 feb9 	bl	80093a8 <xTaskCheckForTimeOut>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d132      	bne.n	80086a2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800863c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800863e:	f000 f9d2 	bl	80089e6 <prvIsQueueEmpty>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d026      	beq.n	8008696 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d109      	bne.n	8008664 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008650:	f001 fb32 	bl	8009cb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	4618      	mov	r0, r3
 800865a:	f001 f807 	bl	800966c <xTaskPriorityInherit>
 800865e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008660:	f001 fb5c 	bl	8009d1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	3324      	adds	r3, #36	; 0x24
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	4611      	mov	r1, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fdfb 	bl	8009268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008672:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008674:	f000 f965 	bl	8008942 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008678:	f000 fc20 	bl	8008ebc <xTaskResumeAll>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	f47f af67 	bne.w	8008552 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008684:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <xQueueSemaphoreTake+0x21c>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	e75d      	b.n	8008552 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008698:	f000 f953 	bl	8008942 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800869c:	f000 fc0e 	bl	8008ebc <xTaskResumeAll>
 80086a0:	e757      	b.n	8008552 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086a4:	f000 f94d 	bl	8008942 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086a8:	f000 fc08 	bl	8008ebc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086ae:	f000 f99a 	bl	80089e6 <prvIsQueueEmpty>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f43f af4c 	beq.w	8008552 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00d      	beq.n	80086dc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80086c0:	f001 fafa 	bl	8009cb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80086c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086c6:	f000 f894 	bl	80087f2 <prvGetDisinheritPriorityAfterTimeout>
 80086ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 f8d2 	bl	800987c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80086d8:	f001 fb20 	bl	8009d1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3738      	adds	r7, #56	; 0x38
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08e      	sub	sp, #56	; 0x38
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10b      	bne.n	800871a <xQueueReceiveFromISR+0x2e>
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	b672      	cpsid	i
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	b662      	cpsie	i
 8008716:	623b      	str	r3, [r7, #32]
 8008718:	e7fe      	b.n	8008718 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <xQueueReceiveFromISR+0x3c>
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <xQueueReceiveFromISR+0x40>
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <xQueueReceiveFromISR+0x42>
 800872c:	2300      	movs	r3, #0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <xQueueReceiveFromISR+0x5e>
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	b672      	cpsid	i
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	b662      	cpsie	i
 8008746:	61fb      	str	r3, [r7, #28]
 8008748:	e7fe      	b.n	8008748 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800874a:	f001 fb95 	bl	8009e78 <vPortValidateInterruptPriority>
	__asm volatile
 800874e:	f3ef 8211 	mrs	r2, BASEPRI
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	b672      	cpsid	i
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	b662      	cpsie	i
 8008766:	61ba      	str	r2, [r7, #24]
 8008768:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800876a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800876c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	d02f      	beq.n	80087da <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008788:	f000 f8b5 	bl	80088f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	1e5a      	subs	r2, r3, #1
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008794:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800879c:	d112      	bne.n	80087c4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d016      	beq.n	80087d4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	3310      	adds	r3, #16
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fd82 	bl	80092b4 <xTaskRemoveFromEventList>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00b      	beq.n	80087d4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e007      	b.n	80087d4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087c8:	3301      	adds	r3, #1
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	b25a      	sxtb	r2, r3
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087d4:	2301      	movs	r3, #1
 80087d6:	637b      	str	r3, [r7, #52]	; 0x34
 80087d8:	e001      	b.n	80087de <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3738      	adds	r7, #56	; 0x38
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d006      	beq.n	8008810 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f1c3 0307 	rsb	r3, r3, #7
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	e001      	b.n	8008814 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008814:	68fb      	ldr	r3, [r7, #12]
	}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b086      	sub	sp, #24
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10d      	bne.n	800885c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d14d      	bne.n	80088e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	4618      	mov	r0, r3
 800884e:	f000 ff8d 	bl	800976c <xTaskPriorityDisinherit>
 8008852:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	609a      	str	r2, [r3, #8]
 800885a:	e043      	b.n	80088e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d119      	bne.n	8008896 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6858      	ldr	r0, [r3, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	461a      	mov	r2, r3
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	f00d faee 	bl	8015e4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	441a      	add	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	429a      	cmp	r2, r3
 800888a:	d32b      	bcc.n	80088e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	605a      	str	r2, [r3, #4]
 8008894:	e026      	b.n	80088e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	68d8      	ldr	r0, [r3, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	461a      	mov	r2, r3
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	f00d fad4 	bl	8015e4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	425b      	negs	r3, r3
 80088b0:	441a      	add	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d207      	bcs.n	80088d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	425b      	negs	r3, r3
 80088cc:	441a      	add	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d105      	bne.n	80088e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80088ec:	697b      	ldr	r3, [r7, #20]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	d018      	beq.n	800893a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	441a      	add	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	429a      	cmp	r2, r3
 8008920:	d303      	bcc.n	800892a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68d9      	ldr	r1, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	461a      	mov	r2, r3
 8008934:	6838      	ldr	r0, [r7, #0]
 8008936:	f00d fa8a 	bl	8015e4e <memcpy>
	}
}
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800894a:	f001 f9b5 	bl	8009cb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008954:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008956:	e011      	b.n	800897c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d012      	beq.n	8008986 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3324      	adds	r3, #36	; 0x24
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fca5 	bl	80092b4 <xTaskRemoveFromEventList>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008970:	f000 fd7e 	bl	8009470 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	3b01      	subs	r3, #1
 8008978:	b2db      	uxtb	r3, r3
 800897a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800897c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008980:	2b00      	cmp	r3, #0
 8008982:	dce9      	bgt.n	8008958 <prvUnlockQueue+0x16>
 8008984:	e000      	b.n	8008988 <prvUnlockQueue+0x46>
					break;
 8008986:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	22ff      	movs	r2, #255	; 0xff
 800898c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008990:	f001 f9c4 	bl	8009d1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008994:	f001 f990 	bl	8009cb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800899e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089a0:	e011      	b.n	80089c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d012      	beq.n	80089d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3310      	adds	r3, #16
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fc80 	bl	80092b4 <xTaskRemoveFromEventList>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089ba:	f000 fd59 	bl	8009470 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089be:	7bbb      	ldrb	r3, [r7, #14]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dce9      	bgt.n	80089a2 <prvUnlockQueue+0x60>
 80089ce:	e000      	b.n	80089d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	22ff      	movs	r2, #255	; 0xff
 80089d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80089da:	f001 f99f 	bl	8009d1c <vPortExitCritical>
}
 80089de:	bf00      	nop
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089ee:	f001 f963 	bl	8009cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	e001      	b.n	8008a04 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a04:	f001 f98a 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 8008a08:	68fb      	ldr	r3, [r7, #12]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a1a:	f001 f94d 	bl	8009cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d102      	bne.n	8008a30 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	e001      	b.n	8008a34 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a34:	f001 f972 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 8008a38:	68fb      	ldr	r3, [r7, #12]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b08e      	sub	sp, #56	; 0x38
 8008a46:	af04      	add	r7, sp, #16
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
 8008a4e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10b      	bne.n	8008a6e <xTaskCreateStatic+0x2c>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	b672      	cpsid	i
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	b662      	cpsie	i
 8008a6a:	623b      	str	r3, [r7, #32]
 8008a6c:	e7fe      	b.n	8008a6c <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10b      	bne.n	8008a8c <xTaskCreateStatic+0x4a>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	b672      	cpsid	i
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	b662      	cpsie	i
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	e7fe      	b.n	8008a8a <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a8c:	2354      	movs	r3, #84	; 0x54
 8008a8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	2b54      	cmp	r3, #84	; 0x54
 8008a94:	d00b      	beq.n	8008aae <xTaskCreateStatic+0x6c>
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	b672      	cpsid	i
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	b662      	cpsie	i
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	e7fe      	b.n	8008aac <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008aae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01e      	beq.n	8008af4 <xTaskCreateStatic+0xb2>
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d01b      	beq.n	8008af4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	2202      	movs	r2, #2
 8008aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9303      	str	r3, [sp, #12]
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	9302      	str	r3, [sp, #8]
 8008ad6:	f107 0314 	add.w	r3, r7, #20
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 f850 	bl	8008b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aee:	f000 f8d5 	bl	8008c9c <prvAddNewTaskToReadyList>
 8008af2:	e001      	b.n	8008af8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008af8:	697b      	ldr	r3, [r7, #20]
	}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3728      	adds	r7, #40	; 0x28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b08c      	sub	sp, #48	; 0x30
 8008b06:	af04      	add	r7, sp, #16
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	603b      	str	r3, [r7, #0]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 f9f0 	bl	8009efc <pvPortMalloc>
 8008b1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00e      	beq.n	8008b42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b24:	2054      	movs	r0, #84	; 0x54
 8008b26:	f001 f9e9 	bl	8009efc <pvPortMalloc>
 8008b2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
 8008b38:	e005      	b.n	8008b46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f001 faa6 	bl	800a08c <vPortFree>
 8008b40:	e001      	b.n	8008b46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d017      	beq.n	8008b7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 f80e 	bl	8008b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b70:	69f8      	ldr	r0, [r7, #28]
 8008b72:	f000 f893 	bl	8008c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b76:	2301      	movs	r3, #1
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	e002      	b.n	8008b82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b82:	69bb      	ldr	r3, [r7, #24]
	}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008ba4:	440b      	add	r3, r1
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	f023 0307 	bic.w	r3, r3, #7
 8008bb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <prvInitialiseNewTask+0x4a>
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	b672      	cpsid	i
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	b662      	cpsie	i
 8008bd2:	617b      	str	r3, [r7, #20]
 8008bd4:	e7fe      	b.n	8008bd4 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01f      	beq.n	8008c1c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bdc:	2300      	movs	r3, #0
 8008bde:	61fb      	str	r3, [r7, #28]
 8008be0:	e012      	b.n	8008c08 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	4413      	add	r3, r2
 8008be8:	7819      	ldrb	r1, [r3, #0]
 8008bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	4413      	add	r3, r2
 8008bf0:	3334      	adds	r3, #52	; 0x34
 8008bf2:	460a      	mov	r2, r1
 8008bf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d006      	beq.n	8008c10 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	3301      	adds	r3, #1
 8008c06:	61fb      	str	r3, [r7, #28]
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	2b0f      	cmp	r3, #15
 8008c0c:	d9e9      	bls.n	8008be2 <prvInitialiseNewTask+0x56>
 8008c0e:	e000      	b.n	8008c12 <prvInitialiseNewTask+0x86>
			{
				break;
 8008c10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c1a:	e003      	b.n	8008c24 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	2b06      	cmp	r3, #6
 8008c28:	d901      	bls.n	8008c2e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c2a:	2306      	movs	r3, #6
 8008c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c38:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	3304      	adds	r3, #4
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fe ff07 	bl	8007a58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	3318      	adds	r3, #24
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe ff02 	bl	8007a58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	f1c3 0207 	rsb	r2, r3, #7
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	69b8      	ldr	r0, [r7, #24]
 8008c7e:	f000 ff13 	bl	8009aa8 <pxPortInitialiseStack>
 8008c82:	4602      	mov	r2, r0
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c94:	bf00      	nop
 8008c96:	3720      	adds	r7, #32
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ca4:	f001 f808 	bl	8009cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ca8:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <prvAddNewTaskToReadyList+0xb8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	4a29      	ldr	r2, [pc, #164]	; (8008d54 <prvAddNewTaskToReadyList+0xb8>)
 8008cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cb2:	4b29      	ldr	r3, [pc, #164]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cba:	4a27      	ldr	r2, [pc, #156]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cc0:	4b24      	ldr	r3, [pc, #144]	; (8008d54 <prvAddNewTaskToReadyList+0xb8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d110      	bne.n	8008cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cc8:	f000 fbf6 	bl	80094b8 <prvInitialiseTaskLists>
 8008ccc:	e00d      	b.n	8008cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cce:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <prvAddNewTaskToReadyList+0xc0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cd6:	4b20      	ldr	r3, [pc, #128]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d802      	bhi.n	8008cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ce4:	4a1c      	ldr	r2, [pc, #112]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cea:	4b1d      	ldr	r3, [pc, #116]	; (8008d60 <prvAddNewTaskToReadyList+0xc4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	4a1b      	ldr	r2, [pc, #108]	; (8008d60 <prvAddNewTaskToReadyList+0xc4>)
 8008cf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	409a      	lsls	r2, r3
 8008cfc:	4b19      	ldr	r3, [pc, #100]	; (8008d64 <prvAddNewTaskToReadyList+0xc8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <prvAddNewTaskToReadyList+0xc8>)
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4a15      	ldr	r2, [pc, #84]	; (8008d68 <prvAddNewTaskToReadyList+0xcc>)
 8008d14:	441a      	add	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7fe fea8 	bl	8007a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d22:	f000 fffb 	bl	8009d1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <prvAddNewTaskToReadyList+0xc0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00e      	beq.n	8008d4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d2e:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <prvAddNewTaskToReadyList+0xbc>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d207      	bcs.n	8008d4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <prvAddNewTaskToReadyList+0xd0>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000404 	.word	0x20000404
 8008d58:	20000304 	.word	0x20000304
 8008d5c:	20000410 	.word	0x20000410
 8008d60:	20000420 	.word	0x20000420
 8008d64:	2000040c 	.word	0x2000040c
 8008d68:	20000308 	.word	0x20000308
 8008d6c:	e000ed04 	.word	0xe000ed04

08008d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d018      	beq.n	8008db4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d82:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <vTaskDelay+0x64>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00b      	beq.n	8008da2 <vTaskDelay+0x32>
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	b672      	cpsid	i
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	b662      	cpsie	i
 8008d9e:	60bb      	str	r3, [r7, #8]
 8008da0:	e7fe      	b.n	8008da0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008da2:	f000 f87d 	bl	8008ea0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008da6:	2100      	movs	r1, #0
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fe17 	bl	80099dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dae:	f000 f885 	bl	8008ebc <xTaskResumeAll>
 8008db2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d107      	bne.n	8008dca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008dba:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <vTaskDelay+0x68>)
 8008dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc0:	601a      	str	r2, [r3, #0]
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	2000042c 	.word	0x2000042c
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	; 0x28
 8008de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dea:	463a      	mov	r2, r7
 8008dec:	1d39      	adds	r1, r7, #4
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f7 fc0c 	bl	8000610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	9202      	str	r2, [sp, #8]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	2300      	movs	r3, #0
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	2300      	movs	r3, #0
 8008e08:	460a      	mov	r2, r1
 8008e0a:	491f      	ldr	r1, [pc, #124]	; (8008e88 <vTaskStartScheduler+0xac>)
 8008e0c:	481f      	ldr	r0, [pc, #124]	; (8008e8c <vTaskStartScheduler+0xb0>)
 8008e0e:	f7ff fe18 	bl	8008a42 <xTaskCreateStatic>
 8008e12:	4602      	mov	r2, r0
 8008e14:	4b1e      	ldr	r3, [pc, #120]	; (8008e90 <vTaskStartScheduler+0xb4>)
 8008e16:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <vTaskStartScheduler+0xb4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e20:	2301      	movs	r3, #1
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	e001      	b.n	8008e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d117      	bne.n	8008e60 <vTaskStartScheduler+0x84>
 8008e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e34:	b672      	cpsid	i
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	b662      	cpsie	i
 8008e44:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e46:	4b13      	ldr	r3, [pc, #76]	; (8008e94 <vTaskStartScheduler+0xb8>)
 8008e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e4e:	4b12      	ldr	r3, [pc, #72]	; (8008e98 <vTaskStartScheduler+0xbc>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e54:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <vTaskStartScheduler+0xc0>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e5a:	f000 feb1 	bl	8009bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e5e:	e00f      	b.n	8008e80 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e66:	d10b      	bne.n	8008e80 <vTaskStartScheduler+0xa4>
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	b672      	cpsid	i
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	b662      	cpsie	i
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	e7fe      	b.n	8008e7e <vTaskStartScheduler+0xa2>
}
 8008e80:	bf00      	nop
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	08016dd0 	.word	0x08016dd0
 8008e8c:	08009489 	.word	0x08009489
 8008e90:	20000428 	.word	0x20000428
 8008e94:	20000424 	.word	0x20000424
 8008e98:	20000410 	.word	0x20000410
 8008e9c:	20000408 	.word	0x20000408

08008ea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ea4:	4b04      	ldr	r3, [pc, #16]	; (8008eb8 <vTaskSuspendAll+0x18>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	4a03      	ldr	r2, [pc, #12]	; (8008eb8 <vTaskSuspendAll+0x18>)
 8008eac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008eae:	bf00      	nop
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	2000042c 	.word	0x2000042c

08008ebc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008eca:	4b42      	ldr	r3, [pc, #264]	; (8008fd4 <xTaskResumeAll+0x118>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10b      	bne.n	8008eea <xTaskResumeAll+0x2e>
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	b672      	cpsid	i
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	b662      	cpsie	i
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	e7fe      	b.n	8008ee8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008eea:	f000 fee5 	bl	8009cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008eee:	4b39      	ldr	r3, [pc, #228]	; (8008fd4 <xTaskResumeAll+0x118>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	4a37      	ldr	r2, [pc, #220]	; (8008fd4 <xTaskResumeAll+0x118>)
 8008ef6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef8:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <xTaskResumeAll+0x118>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d161      	bne.n	8008fc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f00:	4b35      	ldr	r3, [pc, #212]	; (8008fd8 <xTaskResumeAll+0x11c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d05d      	beq.n	8008fc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f08:	e02e      	b.n	8008f68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f0a:	4b34      	ldr	r3, [pc, #208]	; (8008fdc <xTaskResumeAll+0x120>)
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3318      	adds	r3, #24
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe fe08 	bl	8007b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe fe03 	bl	8007b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	409a      	lsls	r2, r3
 8008f2e:	4b2c      	ldr	r3, [pc, #176]	; (8008fe0 <xTaskResumeAll+0x124>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	4a2a      	ldr	r2, [pc, #168]	; (8008fe0 <xTaskResumeAll+0x124>)
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4a27      	ldr	r2, [pc, #156]	; (8008fe4 <xTaskResumeAll+0x128>)
 8008f46:	441a      	add	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	f7fe fd8f 	bl	8007a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f58:	4b23      	ldr	r3, [pc, #140]	; (8008fe8 <xTaskResumeAll+0x12c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d302      	bcc.n	8008f68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f62:	4b22      	ldr	r3, [pc, #136]	; (8008fec <xTaskResumeAll+0x130>)
 8008f64:	2201      	movs	r2, #1
 8008f66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f68:	4b1c      	ldr	r3, [pc, #112]	; (8008fdc <xTaskResumeAll+0x120>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1cc      	bne.n	8008f0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f76:	f000 fb3b 	bl	80095f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <xTaskResumeAll+0x134>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d010      	beq.n	8008fa8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f86:	f000 f859 	bl	800903c <xTaskIncrementTick>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f90:	4b16      	ldr	r3, [pc, #88]	; (8008fec <xTaskResumeAll+0x130>)
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f1      	bne.n	8008f86 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008fa2:	4b13      	ldr	r3, [pc, #76]	; (8008ff0 <xTaskResumeAll+0x134>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fa8:	4b10      	ldr	r3, [pc, #64]	; (8008fec <xTaskResumeAll+0x130>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d009      	beq.n	8008fc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fb4:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <xTaskResumeAll+0x138>)
 8008fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fc4:	f000 feaa 	bl	8009d1c <vPortExitCritical>

	return xAlreadyYielded;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	2000042c 	.word	0x2000042c
 8008fd8:	20000404 	.word	0x20000404
 8008fdc:	200003c4 	.word	0x200003c4
 8008fe0:	2000040c 	.word	0x2000040c
 8008fe4:	20000308 	.word	0x20000308
 8008fe8:	20000304 	.word	0x20000304
 8008fec:	20000418 	.word	0x20000418
 8008ff0:	20000414 	.word	0x20000414
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ffe:	4b05      	ldr	r3, [pc, #20]	; (8009014 <xTaskGetTickCount+0x1c>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009004:	687b      	ldr	r3, [r7, #4]
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000408 	.word	0x20000408

08009018 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800901e:	f000 ff2b 	bl	8009e78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009022:	2300      	movs	r3, #0
 8009024:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009026:	4b04      	ldr	r3, [pc, #16]	; (8009038 <xTaskGetTickCountFromISR+0x20>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800902c:	683b      	ldr	r3, [r7, #0]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000408 	.word	0x20000408

0800903c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009042:	2300      	movs	r3, #0
 8009044:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009046:	4b4f      	ldr	r3, [pc, #316]	; (8009184 <xTaskIncrementTick+0x148>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f040 8089 	bne.w	8009162 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009050:	4b4d      	ldr	r3, [pc, #308]	; (8009188 <xTaskIncrementTick+0x14c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3301      	adds	r3, #1
 8009056:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009058:	4a4b      	ldr	r2, [pc, #300]	; (8009188 <xTaskIncrementTick+0x14c>)
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d121      	bne.n	80090a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009064:	4b49      	ldr	r3, [pc, #292]	; (800918c <xTaskIncrementTick+0x150>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <xTaskIncrementTick+0x4a>
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	b672      	cpsid	i
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	b662      	cpsie	i
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	e7fe      	b.n	8009084 <xTaskIncrementTick+0x48>
 8009086:	4b41      	ldr	r3, [pc, #260]	; (800918c <xTaskIncrementTick+0x150>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	4b40      	ldr	r3, [pc, #256]	; (8009190 <xTaskIncrementTick+0x154>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a3e      	ldr	r2, [pc, #248]	; (800918c <xTaskIncrementTick+0x150>)
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	4a3e      	ldr	r2, [pc, #248]	; (8009190 <xTaskIncrementTick+0x154>)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	4b3e      	ldr	r3, [pc, #248]	; (8009194 <xTaskIncrementTick+0x158>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	4a3c      	ldr	r2, [pc, #240]	; (8009194 <xTaskIncrementTick+0x158>)
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	f000 faa4 	bl	80095f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090a8:	4b3b      	ldr	r3, [pc, #236]	; (8009198 <xTaskIncrementTick+0x15c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d348      	bcc.n	8009144 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090b2:	4b36      	ldr	r3, [pc, #216]	; (800918c <xTaskIncrementTick+0x150>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090bc:	4b36      	ldr	r3, [pc, #216]	; (8009198 <xTaskIncrementTick+0x15c>)
 80090be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090c2:	601a      	str	r2, [r3, #0]
					break;
 80090c4:	e03e      	b.n	8009144 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c6:	4b31      	ldr	r3, [pc, #196]	; (800918c <xTaskIncrementTick+0x150>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d203      	bcs.n	80090e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090de:	4a2e      	ldr	r2, [pc, #184]	; (8009198 <xTaskIncrementTick+0x15c>)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090e4:	e02e      	b.n	8009144 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	3304      	adds	r3, #4
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe fd1e 	bl	8007b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d004      	beq.n	8009102 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	3318      	adds	r3, #24
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fd15 	bl	8007b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	2201      	movs	r2, #1
 8009108:	409a      	lsls	r2, r3
 800910a:	4b24      	ldr	r3, [pc, #144]	; (800919c <xTaskIncrementTick+0x160>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4313      	orrs	r3, r2
 8009110:	4a22      	ldr	r2, [pc, #136]	; (800919c <xTaskIncrementTick+0x160>)
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4a1f      	ldr	r2, [pc, #124]	; (80091a0 <xTaskIncrementTick+0x164>)
 8009122:	441a      	add	r2, r3
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7fe fca1 	bl	8007a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009134:	4b1b      	ldr	r3, [pc, #108]	; (80091a4 <xTaskIncrementTick+0x168>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	429a      	cmp	r2, r3
 800913c:	d3b9      	bcc.n	80090b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800913e:	2301      	movs	r3, #1
 8009140:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009142:	e7b6      	b.n	80090b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009144:	4b17      	ldr	r3, [pc, #92]	; (80091a4 <xTaskIncrementTick+0x168>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914a:	4915      	ldr	r1, [pc, #84]	; (80091a0 <xTaskIncrementTick+0x164>)
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	440b      	add	r3, r1
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d907      	bls.n	800916c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800915c:	2301      	movs	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e004      	b.n	800916c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009162:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <xTaskIncrementTick+0x16c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <xTaskIncrementTick+0x16c>)
 800916a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <xTaskIncrementTick+0x170>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009178:	697b      	ldr	r3, [r7, #20]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	2000042c 	.word	0x2000042c
 8009188:	20000408 	.word	0x20000408
 800918c:	200003bc 	.word	0x200003bc
 8009190:	200003c0 	.word	0x200003c0
 8009194:	2000041c 	.word	0x2000041c
 8009198:	20000424 	.word	0x20000424
 800919c:	2000040c 	.word	0x2000040c
 80091a0:	20000308 	.word	0x20000308
 80091a4:	20000304 	.word	0x20000304
 80091a8:	20000414 	.word	0x20000414
 80091ac:	20000418 	.word	0x20000418

080091b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091b6:	4b27      	ldr	r3, [pc, #156]	; (8009254 <vTaskSwitchContext+0xa4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091be:	4b26      	ldr	r3, [pc, #152]	; (8009258 <vTaskSwitchContext+0xa8>)
 80091c0:	2201      	movs	r2, #1
 80091c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091c4:	e040      	b.n	8009248 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80091c6:	4b24      	ldr	r3, [pc, #144]	; (8009258 <vTaskSwitchContext+0xa8>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091cc:	4b23      	ldr	r3, [pc, #140]	; (800925c <vTaskSwitchContext+0xac>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	fab3 f383 	clz	r3, r3
 80091d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	f1c3 031f 	rsb	r3, r3, #31
 80091e0:	617b      	str	r3, [r7, #20]
 80091e2:	491f      	ldr	r1, [pc, #124]	; (8009260 <vTaskSwitchContext+0xb0>)
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10b      	bne.n	800920e <vTaskSwitchContext+0x5e>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	b672      	cpsid	i
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	b662      	cpsie	i
 800920a:	607b      	str	r3, [r7, #4]
 800920c:	e7fe      	b.n	800920c <vTaskSwitchContext+0x5c>
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4613      	mov	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4a11      	ldr	r2, [pc, #68]	; (8009260 <vTaskSwitchContext+0xb0>)
 800921a:	4413      	add	r3, r2
 800921c:	613b      	str	r3, [r7, #16]
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	605a      	str	r2, [r3, #4]
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3308      	adds	r3, #8
 8009230:	429a      	cmp	r2, r3
 8009232:	d104      	bne.n	800923e <vTaskSwitchContext+0x8e>
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	605a      	str	r2, [r3, #4]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	4a07      	ldr	r2, [pc, #28]	; (8009264 <vTaskSwitchContext+0xb4>)
 8009246:	6013      	str	r3, [r2, #0]
}
 8009248:	bf00      	nop
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	2000042c 	.word	0x2000042c
 8009258:	20000418 	.word	0x20000418
 800925c:	2000040c 	.word	0x2000040c
 8009260:	20000308 	.word	0x20000308
 8009264:	20000304 	.word	0x20000304

08009268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10b      	bne.n	8009290 <vTaskPlaceOnEventList+0x28>
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	b672      	cpsid	i
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	b662      	cpsie	i
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	e7fe      	b.n	800928e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <vTaskPlaceOnEventList+0x48>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3318      	adds	r3, #24
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7fe fc0e 	bl	8007aba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800929e:	2101      	movs	r1, #1
 80092a0:	6838      	ldr	r0, [r7, #0]
 80092a2:	f000 fb9b 	bl	80099dc <prvAddCurrentTaskToDelayedList>
}
 80092a6:	bf00      	nop
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000304 	.word	0x20000304

080092b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10b      	bne.n	80092e2 <xTaskRemoveFromEventList+0x2e>
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	b672      	cpsid	i
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	b662      	cpsie	i
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e7fe      	b.n	80092e0 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	3318      	adds	r3, #24
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fc20 	bl	8007b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ec:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <xTaskRemoveFromEventList+0xb0>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d11c      	bne.n	800932e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	3304      	adds	r3, #4
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe fc17 	bl	8007b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009302:	2201      	movs	r2, #1
 8009304:	409a      	lsls	r2, r3
 8009306:	4b18      	ldr	r3, [pc, #96]	; (8009368 <xTaskRemoveFromEventList+0xb4>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4313      	orrs	r3, r2
 800930c:	4a16      	ldr	r2, [pc, #88]	; (8009368 <xTaskRemoveFromEventList+0xb4>)
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4a13      	ldr	r2, [pc, #76]	; (800936c <xTaskRemoveFromEventList+0xb8>)
 800931e:	441a      	add	r2, r3
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	3304      	adds	r3, #4
 8009324:	4619      	mov	r1, r3
 8009326:	4610      	mov	r0, r2
 8009328:	f7fe fba3 	bl	8007a72 <vListInsertEnd>
 800932c:	e005      	b.n	800933a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	3318      	adds	r3, #24
 8009332:	4619      	mov	r1, r3
 8009334:	480e      	ldr	r0, [pc, #56]	; (8009370 <xTaskRemoveFromEventList+0xbc>)
 8009336:	f7fe fb9c 	bl	8007a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <xTaskRemoveFromEventList+0xc0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009344:	429a      	cmp	r2, r3
 8009346:	d905      	bls.n	8009354 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009348:	2301      	movs	r3, #1
 800934a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800934c:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <xTaskRemoveFromEventList+0xc4>)
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e001      	b.n	8009358 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009358:	697b      	ldr	r3, [r7, #20]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	2000042c 	.word	0x2000042c
 8009368:	2000040c 	.word	0x2000040c
 800936c:	20000308 	.word	0x20000308
 8009370:	200003c4 	.word	0x200003c4
 8009374:	20000304 	.word	0x20000304
 8009378:	20000418 	.word	0x20000418

0800937c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009384:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <vTaskInternalSetTimeOutState+0x24>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800938c:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <vTaskInternalSetTimeOutState+0x28>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	605a      	str	r2, [r3, #4]
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	2000041c 	.word	0x2000041c
 80093a4:	20000408 	.word	0x20000408

080093a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10b      	bne.n	80093d0 <xTaskCheckForTimeOut+0x28>
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	b672      	cpsid	i
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	b662      	cpsie	i
 80093cc:	613b      	str	r3, [r7, #16]
 80093ce:	e7fe      	b.n	80093ce <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10b      	bne.n	80093ee <xTaskCheckForTimeOut+0x46>
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	b672      	cpsid	i
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	b662      	cpsie	i
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e7fe      	b.n	80093ec <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80093ee:	f000 fc63 	bl	8009cb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093f2:	4b1d      	ldr	r3, [pc, #116]	; (8009468 <xTaskCheckForTimeOut+0xc0>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800940a:	d102      	bne.n	8009412 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	e023      	b.n	800945a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	4b15      	ldr	r3, [pc, #84]	; (800946c <xTaskCheckForTimeOut+0xc4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d007      	beq.n	800942e <xTaskCheckForTimeOut+0x86>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	429a      	cmp	r2, r3
 8009426:	d302      	bcc.n	800942e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009428:	2301      	movs	r3, #1
 800942a:	61fb      	str	r3, [r7, #28]
 800942c:	e015      	b.n	800945a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	429a      	cmp	r2, r3
 8009436:	d20b      	bcs.n	8009450 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff ff99 	bl	800937c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	61fb      	str	r3, [r7, #28]
 800944e:	e004      	b.n	800945a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009456:	2301      	movs	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800945a:	f000 fc5f 	bl	8009d1c <vPortExitCritical>

	return xReturn;
 800945e:	69fb      	ldr	r3, [r7, #28]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000408 	.word	0x20000408
 800946c:	2000041c 	.word	0x2000041c

08009470 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009474:	4b03      	ldr	r3, [pc, #12]	; (8009484 <vTaskMissedYield+0x14>)
 8009476:	2201      	movs	r2, #1
 8009478:	601a      	str	r2, [r3, #0]
}
 800947a:	bf00      	nop
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	20000418 	.word	0x20000418

08009488 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009490:	f000 f852 	bl	8009538 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009494:	4b06      	ldr	r3, [pc, #24]	; (80094b0 <prvIdleTask+0x28>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d9f9      	bls.n	8009490 <prvIdleTask+0x8>
			{
				taskYIELD();
 800949c:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <prvIdleTask+0x2c>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094ac:	e7f0      	b.n	8009490 <prvIdleTask+0x8>
 80094ae:	bf00      	nop
 80094b0:	20000308 	.word	0x20000308
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094be:	2300      	movs	r3, #0
 80094c0:	607b      	str	r3, [r7, #4]
 80094c2:	e00c      	b.n	80094de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4a12      	ldr	r2, [pc, #72]	; (8009518 <prvInitialiseTaskLists+0x60>)
 80094d0:	4413      	add	r3, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe faa0 	bl	8007a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3301      	adds	r3, #1
 80094dc:	607b      	str	r3, [r7, #4]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b06      	cmp	r3, #6
 80094e2:	d9ef      	bls.n	80094c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094e4:	480d      	ldr	r0, [pc, #52]	; (800951c <prvInitialiseTaskLists+0x64>)
 80094e6:	f7fe fa97 	bl	8007a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094ea:	480d      	ldr	r0, [pc, #52]	; (8009520 <prvInitialiseTaskLists+0x68>)
 80094ec:	f7fe fa94 	bl	8007a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094f0:	480c      	ldr	r0, [pc, #48]	; (8009524 <prvInitialiseTaskLists+0x6c>)
 80094f2:	f7fe fa91 	bl	8007a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094f6:	480c      	ldr	r0, [pc, #48]	; (8009528 <prvInitialiseTaskLists+0x70>)
 80094f8:	f7fe fa8e 	bl	8007a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094fc:	480b      	ldr	r0, [pc, #44]	; (800952c <prvInitialiseTaskLists+0x74>)
 80094fe:	f7fe fa8b 	bl	8007a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009502:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <prvInitialiseTaskLists+0x78>)
 8009504:	4a05      	ldr	r2, [pc, #20]	; (800951c <prvInitialiseTaskLists+0x64>)
 8009506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <prvInitialiseTaskLists+0x7c>)
 800950a:	4a05      	ldr	r2, [pc, #20]	; (8009520 <prvInitialiseTaskLists+0x68>)
 800950c:	601a      	str	r2, [r3, #0]
}
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20000308 	.word	0x20000308
 800951c:	20000394 	.word	0x20000394
 8009520:	200003a8 	.word	0x200003a8
 8009524:	200003c4 	.word	0x200003c4
 8009528:	200003d8 	.word	0x200003d8
 800952c:	200003f0 	.word	0x200003f0
 8009530:	200003bc 	.word	0x200003bc
 8009534:	200003c0 	.word	0x200003c0

08009538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800953e:	e019      	b.n	8009574 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009540:	f000 fbba 	bl	8009cb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009544:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <prvCheckTasksWaitingTermination+0x4c>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3304      	adds	r3, #4
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe faeb 	bl	8007b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <prvCheckTasksWaitingTermination+0x50>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3b01      	subs	r3, #1
 800955c:	4a0a      	ldr	r2, [pc, #40]	; (8009588 <prvCheckTasksWaitingTermination+0x50>)
 800955e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <prvCheckTasksWaitingTermination+0x54>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3b01      	subs	r3, #1
 8009566:	4a09      	ldr	r2, [pc, #36]	; (800958c <prvCheckTasksWaitingTermination+0x54>)
 8009568:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800956a:	f000 fbd7 	bl	8009d1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f80e 	bl	8009590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009574:	4b05      	ldr	r3, [pc, #20]	; (800958c <prvCheckTasksWaitingTermination+0x54>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e1      	bne.n	8009540 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	200003d8 	.word	0x200003d8
 8009588:	20000404 	.word	0x20000404
 800958c:	200003ec 	.word	0x200003ec

08009590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d108      	bne.n	80095b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fd70 	bl	800a08c <vPortFree>
				vPortFree( pxTCB );
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fd6d 	bl	800a08c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095b2:	e019      	b.n	80095e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d103      	bne.n	80095c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fd64 	bl	800a08c <vPortFree>
	}
 80095c4:	e010      	b.n	80095e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d00b      	beq.n	80095e8 <prvDeleteTCB+0x58>
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	b672      	cpsid	i
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	b662      	cpsie	i
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	e7fe      	b.n	80095e6 <prvDeleteTCB+0x56>
	}
 80095e8:	bf00      	nop
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095f6:	4b0c      	ldr	r3, [pc, #48]	; (8009628 <prvResetNextTaskUnblockTime+0x38>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d104      	bne.n	800960a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <prvResetNextTaskUnblockTime+0x3c>)
 8009602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009606:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009608:	e008      	b.n	800961c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800960a:	4b07      	ldr	r3, [pc, #28]	; (8009628 <prvResetNextTaskUnblockTime+0x38>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4a04      	ldr	r2, [pc, #16]	; (800962c <prvResetNextTaskUnblockTime+0x3c>)
 800961a:	6013      	str	r3, [r2, #0]
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	200003bc 	.word	0x200003bc
 800962c:	20000424 	.word	0x20000424

08009630 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009636:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <xTaskGetSchedulerState+0x34>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d102      	bne.n	8009644 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800963e:	2301      	movs	r3, #1
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	e008      	b.n	8009656 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009644:	4b08      	ldr	r3, [pc, #32]	; (8009668 <xTaskGetSchedulerState+0x38>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d102      	bne.n	8009652 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800964c:	2302      	movs	r3, #2
 800964e:	607b      	str	r3, [r7, #4]
 8009650:	e001      	b.n	8009656 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009652:	2300      	movs	r3, #0
 8009654:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009656:	687b      	ldr	r3, [r7, #4]
	}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	20000410 	.word	0x20000410
 8009668:	2000042c 	.word	0x2000042c

0800966c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d069      	beq.n	8009756 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009686:	4b36      	ldr	r3, [pc, #216]	; (8009760 <xTaskPriorityInherit+0xf4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	429a      	cmp	r2, r3
 800968e:	d259      	bcs.n	8009744 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	db06      	blt.n	80096a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009698:	4b31      	ldr	r3, [pc, #196]	; (8009760 <xTaskPriorityInherit+0xf4>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	f1c3 0207 	rsb	r2, r3, #7
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6959      	ldr	r1, [r3, #20]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4a2b      	ldr	r2, [pc, #172]	; (8009764 <xTaskPriorityInherit+0xf8>)
 80096b8:	4413      	add	r3, r2
 80096ba:	4299      	cmp	r1, r3
 80096bc:	d13a      	bne.n	8009734 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	3304      	adds	r3, #4
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe fa32 	bl	8007b2c <uxListRemove>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d115      	bne.n	80096fa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d2:	4924      	ldr	r1, [pc, #144]	; (8009764 <xTaskPriorityInherit+0xf8>)
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <xTaskPriorityInherit+0x8e>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	2201      	movs	r2, #1
 80096ea:	fa02 f303 	lsl.w	r3, r2, r3
 80096ee:	43da      	mvns	r2, r3
 80096f0:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <xTaskPriorityInherit+0xfc>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4013      	ands	r3, r2
 80096f6:	4a1c      	ldr	r2, [pc, #112]	; (8009768 <xTaskPriorityInherit+0xfc>)
 80096f8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096fa:	4b19      	ldr	r3, [pc, #100]	; (8009760 <xTaskPriorityInherit+0xf4>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	2201      	movs	r2, #1
 800970a:	409a      	lsls	r2, r3
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <xTaskPriorityInherit+0xfc>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4313      	orrs	r3, r2
 8009712:	4a15      	ldr	r2, [pc, #84]	; (8009768 <xTaskPriorityInherit+0xfc>)
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971a:	4613      	mov	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4a10      	ldr	r2, [pc, #64]	; (8009764 <xTaskPriorityInherit+0xf8>)
 8009724:	441a      	add	r2, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	3304      	adds	r3, #4
 800972a:	4619      	mov	r1, r3
 800972c:	4610      	mov	r0, r2
 800972e:	f7fe f9a0 	bl	8007a72 <vListInsertEnd>
 8009732:	e004      	b.n	800973e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009734:	4b0a      	ldr	r3, [pc, #40]	; (8009760 <xTaskPriorityInherit+0xf4>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800973e:	2301      	movs	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	e008      	b.n	8009756 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <xTaskPriorityInherit+0xf4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974e:	429a      	cmp	r2, r3
 8009750:	d201      	bcs.n	8009756 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009752:	2301      	movs	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009756:	68fb      	ldr	r3, [r7, #12]
	}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20000304 	.word	0x20000304
 8009764:	20000308 	.word	0x20000308
 8009768:	2000040c 	.word	0x2000040c

0800976c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009778:	2300      	movs	r3, #0
 800977a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d070      	beq.n	8009864 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009782:	4b3b      	ldr	r3, [pc, #236]	; (8009870 <xTaskPriorityDisinherit+0x104>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	429a      	cmp	r2, r3
 800978a:	d00b      	beq.n	80097a4 <xTaskPriorityDisinherit+0x38>
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	b672      	cpsid	i
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	b662      	cpsie	i
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	e7fe      	b.n	80097a2 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <xTaskPriorityDisinherit+0x58>
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	b672      	cpsid	i
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	b662      	cpsie	i
 80097c0:	60bb      	str	r3, [r7, #8]
 80097c2:	e7fe      	b.n	80097c2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097c8:	1e5a      	subs	r2, r3, #1
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d044      	beq.n	8009864 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d140      	bne.n	8009864 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe f9a0 	bl	8007b2c <uxListRemove>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d115      	bne.n	800981e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f6:	491f      	ldr	r1, [pc, #124]	; (8009874 <xTaskPriorityDisinherit+0x108>)
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	440b      	add	r3, r1
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <xTaskPriorityDisinherit+0xb2>
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	2201      	movs	r2, #1
 800980e:	fa02 f303 	lsl.w	r3, r2, r3
 8009812:	43da      	mvns	r2, r3
 8009814:	4b18      	ldr	r3, [pc, #96]	; (8009878 <xTaskPriorityDisinherit+0x10c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4013      	ands	r3, r2
 800981a:	4a17      	ldr	r2, [pc, #92]	; (8009878 <xTaskPriorityDisinherit+0x10c>)
 800981c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982a:	f1c3 0207 	rsb	r2, r3, #7
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009836:	2201      	movs	r2, #1
 8009838:	409a      	lsls	r2, r3
 800983a:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <xTaskPriorityDisinherit+0x10c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4313      	orrs	r3, r2
 8009840:	4a0d      	ldr	r2, [pc, #52]	; (8009878 <xTaskPriorityDisinherit+0x10c>)
 8009842:	6013      	str	r3, [r2, #0]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4a08      	ldr	r2, [pc, #32]	; (8009874 <xTaskPriorityDisinherit+0x108>)
 8009852:	441a      	add	r2, r3
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	3304      	adds	r3, #4
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7fe f909 	bl	8007a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009860:	2301      	movs	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009864:	697b      	ldr	r3, [r7, #20]
	}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000304 	.word	0x20000304
 8009874:	20000308 	.word	0x20000308
 8009878:	2000040c 	.word	0x2000040c

0800987c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800988a:	2301      	movs	r3, #1
 800988c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	f000 8085 	beq.w	80099a0 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10b      	bne.n	80098b6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	b672      	cpsid	i
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	b662      	cpsie	i
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e7fe      	b.n	80098b4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d902      	bls.n	80098c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	61fb      	str	r3, [r7, #28]
 80098c4:	e002      	b.n	80098cc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d0:	69fa      	ldr	r2, [r7, #28]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d064      	beq.n	80099a0 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d15f      	bne.n	80099a0 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80098e0:	4b31      	ldr	r3, [pc, #196]	; (80099a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d10b      	bne.n	8009902 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	b672      	cpsid	i
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	b662      	cpsie	i
 80098fe:	60bb      	str	r3, [r7, #8]
 8009900:	e7fe      	b.n	8009900 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009906:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	69fa      	ldr	r2, [r7, #28]
 800990c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	2b00      	cmp	r3, #0
 8009914:	db04      	blt.n	8009920 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	f1c3 0207 	rsb	r2, r3, #7
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	6959      	ldr	r1, [r3, #20]
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4a1f      	ldr	r2, [pc, #124]	; (80099ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009930:	4413      	add	r3, r2
 8009932:	4299      	cmp	r1, r3
 8009934:	d134      	bne.n	80099a0 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	3304      	adds	r3, #4
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe f8f6 	bl	8007b2c <uxListRemove>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d115      	bne.n	8009972 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994a:	4918      	ldr	r1, [pc, #96]	; (80099ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800994c:	4613      	mov	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	440b      	add	r3, r1
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10a      	bne.n	8009972 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	2201      	movs	r2, #1
 8009962:	fa02 f303 	lsl.w	r3, r2, r3
 8009966:	43da      	mvns	r2, r3
 8009968:	4b11      	ldr	r3, [pc, #68]	; (80099b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4013      	ands	r3, r2
 800996e:	4a10      	ldr	r2, [pc, #64]	; (80099b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009970:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	2201      	movs	r2, #1
 8009978:	409a      	lsls	r2, r3
 800997a:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4313      	orrs	r3, r2
 8009980:	4a0b      	ldr	r2, [pc, #44]	; (80099b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009988:	4613      	mov	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4a06      	ldr	r2, [pc, #24]	; (80099ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009992:	441a      	add	r2, r3
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	3304      	adds	r3, #4
 8009998:	4619      	mov	r1, r3
 800999a:	4610      	mov	r0, r2
 800999c:	f7fe f869 	bl	8007a72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099a0:	bf00      	nop
 80099a2:	3720      	adds	r7, #32
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20000304 	.word	0x20000304
 80099ac:	20000308 	.word	0x20000308
 80099b0:	2000040c 	.word	0x2000040c

080099b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80099b4:	b480      	push	{r7}
 80099b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099b8:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d004      	beq.n	80099ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099c0:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099c6:	3201      	adds	r2, #1
 80099c8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80099ca:	4b03      	ldr	r3, [pc, #12]	; (80099d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099cc:	681b      	ldr	r3, [r3, #0]
	}
 80099ce:	4618      	mov	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	20000304 	.word	0x20000304

080099dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099e6:	4b29      	ldr	r3, [pc, #164]	; (8009a8c <prvAddCurrentTaskToDelayedList+0xb0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ec:	4b28      	ldr	r3, [pc, #160]	; (8009a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe f89a 	bl	8007b2c <uxListRemove>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10b      	bne.n	8009a16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80099fe:	4b24      	ldr	r3, [pc, #144]	; (8009a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a04:	2201      	movs	r2, #1
 8009a06:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0a:	43da      	mvns	r2, r3
 8009a0c:	4b21      	ldr	r3, [pc, #132]	; (8009a94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4013      	ands	r3, r2
 8009a12:	4a20      	ldr	r2, [pc, #128]	; (8009a94 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a1c:	d10a      	bne.n	8009a34 <prvAddCurrentTaskToDelayedList+0x58>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d007      	beq.n	8009a34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a24:	4b1a      	ldr	r3, [pc, #104]	; (8009a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	481a      	ldr	r0, [pc, #104]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009a2e:	f7fe f820 	bl	8007a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a32:	e026      	b.n	8009a82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4413      	add	r3, r2
 8009a3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a3c:	4b14      	ldr	r3, [pc, #80]	; (8009a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d209      	bcs.n	8009a60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a4c:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	4b0f      	ldr	r3, [pc, #60]	; (8009a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3304      	adds	r3, #4
 8009a56:	4619      	mov	r1, r3
 8009a58:	4610      	mov	r0, r2
 8009a5a:	f7fe f82e 	bl	8007aba <vListInsert>
}
 8009a5e:	e010      	b.n	8009a82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a60:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	4b0a      	ldr	r3, [pc, #40]	; (8009a90 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7fe f824 	bl	8007aba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a72:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d202      	bcs.n	8009a82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a7c:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	6013      	str	r3, [r2, #0]
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000408 	.word	0x20000408
 8009a90:	20000304 	.word	0x20000304
 8009a94:	2000040c 	.word	0x2000040c
 8009a98:	200003f0 	.word	0x200003f0
 8009a9c:	200003c0 	.word	0x200003c0
 8009aa0:	200003bc 	.word	0x200003bc
 8009aa4:	20000424 	.word	0x20000424

08009aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3b04      	subs	r3, #4
 8009ab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3b04      	subs	r3, #4
 8009ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f023 0201 	bic.w	r2, r3, #1
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3b04      	subs	r3, #4
 8009ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ad8:	4a0c      	ldr	r2, [pc, #48]	; (8009b0c <pxPortInitialiseStack+0x64>)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3b14      	subs	r3, #20
 8009ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3b04      	subs	r3, #4
 8009aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f06f 0202 	mvn.w	r2, #2
 8009af6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3b20      	subs	r3, #32
 8009afc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009afe:	68fb      	ldr	r3, [r7, #12]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	08009b11 	.word	0x08009b11

08009b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b1a:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <prvTaskExitError+0x58>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b22:	d00b      	beq.n	8009b3c <prvTaskExitError+0x2c>
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	b672      	cpsid	i
 8009b2a:	f383 8811 	msr	BASEPRI, r3
 8009b2e:	f3bf 8f6f 	isb	sy
 8009b32:	f3bf 8f4f 	dsb	sy
 8009b36:	b662      	cpsie	i
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e7fe      	b.n	8009b3a <prvTaskExitError+0x2a>
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	b672      	cpsid	i
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	b662      	cpsie	i
 8009b50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b52:	bf00      	nop
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0fc      	beq.n	8009b54 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b5a:	bf00      	nop
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	2000000c 	.word	0x2000000c
 8009b6c:	00000000 	.word	0x00000000

08009b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b70:	4b07      	ldr	r3, [pc, #28]	; (8009b90 <pxCurrentTCBConst2>)
 8009b72:	6819      	ldr	r1, [r3, #0]
 8009b74:	6808      	ldr	r0, [r1, #0]
 8009b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7a:	f380 8809 	msr	PSP, r0
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f04f 0000 	mov.w	r0, #0
 8009b86:	f380 8811 	msr	BASEPRI, r0
 8009b8a:	4770      	bx	lr
 8009b8c:	f3af 8000 	nop.w

08009b90 <pxCurrentTCBConst2>:
 8009b90:	20000304 	.word	0x20000304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop

08009b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b98:	4808      	ldr	r0, [pc, #32]	; (8009bbc <prvPortStartFirstTask+0x24>)
 8009b9a:	6800      	ldr	r0, [r0, #0]
 8009b9c:	6800      	ldr	r0, [r0, #0]
 8009b9e:	f380 8808 	msr	MSP, r0
 8009ba2:	f04f 0000 	mov.w	r0, #0
 8009ba6:	f380 8814 	msr	CONTROL, r0
 8009baa:	b662      	cpsie	i
 8009bac:	b661      	cpsie	f
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	df00      	svc	0
 8009bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bba:	bf00      	nop
 8009bbc:	e000ed08 	.word	0xe000ed08

08009bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bc6:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <xPortStartScheduler+0xe0>)
 8009bc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	22ff      	movs	r2, #255	; 0xff
 8009bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009be0:	78fb      	ldrb	r3, [r7, #3]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	4b2e      	ldr	r3, [pc, #184]	; (8009ca4 <xPortStartScheduler+0xe4>)
 8009bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bee:	4b2e      	ldr	r3, [pc, #184]	; (8009ca8 <xPortStartScheduler+0xe8>)
 8009bf0:	2207      	movs	r2, #7
 8009bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bf4:	e009      	b.n	8009c0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	; (8009ca8 <xPortStartScheduler+0xe8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	4a2a      	ldr	r2, [pc, #168]	; (8009ca8 <xPortStartScheduler+0xe8>)
 8009bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c00:	78fb      	ldrb	r3, [r7, #3]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c0a:	78fb      	ldrb	r3, [r7, #3]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c12:	2b80      	cmp	r3, #128	; 0x80
 8009c14:	d0ef      	beq.n	8009bf6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c16:	4b24      	ldr	r3, [pc, #144]	; (8009ca8 <xPortStartScheduler+0xe8>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f1c3 0307 	rsb	r3, r3, #7
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d00b      	beq.n	8009c3a <xPortStartScheduler+0x7a>
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	b672      	cpsid	i
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	b662      	cpsie	i
 8009c36:	60bb      	str	r3, [r7, #8]
 8009c38:	e7fe      	b.n	8009c38 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ca8 <xPortStartScheduler+0xe8>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	021b      	lsls	r3, r3, #8
 8009c40:	4a19      	ldr	r2, [pc, #100]	; (8009ca8 <xPortStartScheduler+0xe8>)
 8009c42:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c44:	4b18      	ldr	r3, [pc, #96]	; (8009ca8 <xPortStartScheduler+0xe8>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c4c:	4a16      	ldr	r2, [pc, #88]	; (8009ca8 <xPortStartScheduler+0xe8>)
 8009c4e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c58:	4b14      	ldr	r3, [pc, #80]	; (8009cac <xPortStartScheduler+0xec>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a13      	ldr	r2, [pc, #76]	; (8009cac <xPortStartScheduler+0xec>)
 8009c5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c62:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c64:	4b11      	ldr	r3, [pc, #68]	; (8009cac <xPortStartScheduler+0xec>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a10      	ldr	r2, [pc, #64]	; (8009cac <xPortStartScheduler+0xec>)
 8009c6a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c6e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c70:	f000 f8d4 	bl	8009e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <xPortStartScheduler+0xf0>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c7a:	f000 f8f3 	bl	8009e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c7e:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <xPortStartScheduler+0xf4>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a0c      	ldr	r2, [pc, #48]	; (8009cb4 <xPortStartScheduler+0xf4>)
 8009c84:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c88:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c8a:	f7ff ff85 	bl	8009b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c8e:	f7ff fa8f 	bl	80091b0 <vTaskSwitchContext>
	prvTaskExitError();
 8009c92:	f7ff ff3d 	bl	8009b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	e000e400 	.word	0xe000e400
 8009ca4:	20000430 	.word	0x20000430
 8009ca8:	20000434 	.word	0x20000434
 8009cac:	e000ed20 	.word	0xe000ed20
 8009cb0:	2000000c 	.word	0x2000000c
 8009cb4:	e000ef34 	.word	0xe000ef34

08009cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	b672      	cpsid	i
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	b662      	cpsie	i
 8009cd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cd4:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <vPortEnterCritical+0x5c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	4a0e      	ldr	r2, [pc, #56]	; (8009d14 <vPortEnterCritical+0x5c>)
 8009cdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cde:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <vPortEnterCritical+0x5c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d110      	bne.n	8009d08 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <vPortEnterCritical+0x60>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00b      	beq.n	8009d08 <vPortEnterCritical+0x50>
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	b672      	cpsid	i
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	b662      	cpsie	i
 8009d04:	603b      	str	r3, [r7, #0]
 8009d06:	e7fe      	b.n	8009d06 <vPortEnterCritical+0x4e>
	}
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	2000000c 	.word	0x2000000c
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d22:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <vPortExitCritical+0x50>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10b      	bne.n	8009d42 <vPortExitCritical+0x26>
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	b672      	cpsid	i
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	b662      	cpsie	i
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	e7fe      	b.n	8009d40 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8009d42:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <vPortExitCritical+0x50>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <vPortExitCritical+0x50>)
 8009d4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d4c:	4b07      	ldr	r3, [pc, #28]	; (8009d6c <vPortExitCritical+0x50>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d104      	bne.n	8009d5e <vPortExitCritical+0x42>
 8009d54:	2300      	movs	r3, #0
 8009d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d5e:	bf00      	nop
 8009d60:	370c      	adds	r7, #12
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	2000000c 	.word	0x2000000c

08009d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d70:	f3ef 8009 	mrs	r0, PSP
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <pxCurrentTCBConst>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	f01e 0f10 	tst.w	lr, #16
 8009d80:	bf08      	it	eq
 8009d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8a:	6010      	str	r0, [r2, #0]
 8009d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d94:	b672      	cpsid	i
 8009d96:	f380 8811 	msr	BASEPRI, r0
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	b662      	cpsie	i
 8009da4:	f7ff fa04 	bl	80091b0 <vTaskSwitchContext>
 8009da8:	f04f 0000 	mov.w	r0, #0
 8009dac:	f380 8811 	msr	BASEPRI, r0
 8009db0:	bc09      	pop	{r0, r3}
 8009db2:	6819      	ldr	r1, [r3, #0]
 8009db4:	6808      	ldr	r0, [r1, #0]
 8009db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dba:	f01e 0f10 	tst.w	lr, #16
 8009dbe:	bf08      	it	eq
 8009dc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009dc4:	f380 8809 	msr	PSP, r0
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop

08009dd0 <pxCurrentTCBConst>:
 8009dd0:	20000304 	.word	0x20000304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop

08009dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	b672      	cpsid	i
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	b662      	cpsie	i
 8009df2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009df4:	f7ff f922 	bl	800903c <xTaskIncrementTick>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dfe:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <SysTick_Handler+0x40>)
 8009e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	2300      	movs	r3, #0
 8009e08:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	e000ed04 	.word	0xe000ed04

08009e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e20:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <vPortSetupTimerInterrupt+0x34>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e26:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <vPortSetupTimerInterrupt+0x38>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <vPortSetupTimerInterrupt+0x3c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <vPortSetupTimerInterrupt+0x40>)
 8009e32:	fba2 2303 	umull	r2, r3, r2, r3
 8009e36:	099b      	lsrs	r3, r3, #6
 8009e38:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <vPortSetupTimerInterrupt+0x44>)
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e3e:	4b04      	ldr	r3, [pc, #16]	; (8009e50 <vPortSetupTimerInterrupt+0x34>)
 8009e40:	2207      	movs	r2, #7
 8009e42:	601a      	str	r2, [r3, #0]
}
 8009e44:	bf00      	nop
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	e000e010 	.word	0xe000e010
 8009e54:	e000e018 	.word	0xe000e018
 8009e58:	20000000 	.word	0x20000000
 8009e5c:	10624dd3 	.word	0x10624dd3
 8009e60:	e000e014 	.word	0xe000e014

08009e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e74 <vPortEnableVFP+0x10>
 8009e68:	6801      	ldr	r1, [r0, #0]
 8009e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e6e:	6001      	str	r1, [r0, #0]
 8009e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e72:	bf00      	nop
 8009e74:	e000ed88 	.word	0xe000ed88

08009e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e7e:	f3ef 8305 	mrs	r3, IPSR
 8009e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b0f      	cmp	r3, #15
 8009e88:	d915      	bls.n	8009eb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e8a:	4a18      	ldr	r2, [pc, #96]	; (8009eec <vPortValidateInterruptPriority+0x74>)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4413      	add	r3, r2
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e94:	4b16      	ldr	r3, [pc, #88]	; (8009ef0 <vPortValidateInterruptPriority+0x78>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	7afa      	ldrb	r2, [r7, #11]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d20b      	bcs.n	8009eb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	b672      	cpsid	i
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	b662      	cpsie	i
 8009eb2:	607b      	str	r3, [r7, #4]
 8009eb4:	e7fe      	b.n	8009eb4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009eb6:	4b0f      	ldr	r3, [pc, #60]	; (8009ef4 <vPortValidateInterruptPriority+0x7c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <vPortValidateInterruptPriority+0x80>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d90b      	bls.n	8009ede <vPortValidateInterruptPriority+0x66>
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	b672      	cpsid	i
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	b662      	cpsie	i
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	e7fe      	b.n	8009edc <vPortValidateInterruptPriority+0x64>
	}
 8009ede:	bf00      	nop
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	e000e3f0 	.word	0xe000e3f0
 8009ef0:	20000430 	.word	0x20000430
 8009ef4:	e000ed0c 	.word	0xe000ed0c
 8009ef8:	20000434 	.word	0x20000434

08009efc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08a      	sub	sp, #40	; 0x28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f04:	2300      	movs	r3, #0
 8009f06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f08:	f7fe ffca 	bl	8008ea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f0c:	4b5a      	ldr	r3, [pc, #360]	; (800a078 <pvPortMalloc+0x17c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f14:	f000 f916 	bl	800a144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f18:	4b58      	ldr	r3, [pc, #352]	; (800a07c <pvPortMalloc+0x180>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4013      	ands	r3, r2
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f040 8090 	bne.w	800a046 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d01e      	beq.n	8009f6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d015      	beq.n	8009f6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f023 0307 	bic.w	r3, r3, #7
 8009f44:	3308      	adds	r3, #8
 8009f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f003 0307 	and.w	r3, r3, #7
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00b      	beq.n	8009f6a <pvPortMalloc+0x6e>
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	b672      	cpsid	i
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	b662      	cpsie	i
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	e7fe      	b.n	8009f68 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d06a      	beq.n	800a046 <pvPortMalloc+0x14a>
 8009f70:	4b43      	ldr	r3, [pc, #268]	; (800a080 <pvPortMalloc+0x184>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d865      	bhi.n	800a046 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f7a:	4b42      	ldr	r3, [pc, #264]	; (800a084 <pvPortMalloc+0x188>)
 8009f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f7e:	4b41      	ldr	r3, [pc, #260]	; (800a084 <pvPortMalloc+0x188>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f84:	e004      	b.n	8009f90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d903      	bls.n	8009fa2 <pvPortMalloc+0xa6>
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1f1      	bne.n	8009f86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fa2:	4b35      	ldr	r3, [pc, #212]	; (800a078 <pvPortMalloc+0x17c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d04c      	beq.n	800a046 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2208      	movs	r2, #8
 8009fb2:	4413      	add	r3, r2
 8009fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	1ad2      	subs	r2, r2, r3
 8009fc6:	2308      	movs	r3, #8
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d920      	bls.n	800a010 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	f003 0307 	and.w	r3, r3, #7
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <pvPortMalloc+0xfc>
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	b672      	cpsid	i
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	b662      	cpsie	i
 8009ff4:	613b      	str	r3, [r7, #16]
 8009ff6:	e7fe      	b.n	8009ff6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a00a:	69b8      	ldr	r0, [r7, #24]
 800a00c:	f000 f8fc 	bl	800a208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a010:	4b1b      	ldr	r3, [pc, #108]	; (800a080 <pvPortMalloc+0x184>)
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	4a19      	ldr	r2, [pc, #100]	; (800a080 <pvPortMalloc+0x184>)
 800a01c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a01e:	4b18      	ldr	r3, [pc, #96]	; (800a080 <pvPortMalloc+0x184>)
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	4b19      	ldr	r3, [pc, #100]	; (800a088 <pvPortMalloc+0x18c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d203      	bcs.n	800a032 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a02a:	4b15      	ldr	r3, [pc, #84]	; (800a080 <pvPortMalloc+0x184>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a16      	ldr	r2, [pc, #88]	; (800a088 <pvPortMalloc+0x18c>)
 800a030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	4b11      	ldr	r3, [pc, #68]	; (800a07c <pvPortMalloc+0x180>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a046:	f7fe ff39 	bl	8008ebc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <pvPortMalloc+0x170>
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	b672      	cpsid	i
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	b662      	cpsie	i
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e7fe      	b.n	800a06a <pvPortMalloc+0x16e>
	return pvReturn;
 800a06c:	69fb      	ldr	r3, [r7, #28]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3728      	adds	r7, #40	; 0x28
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	20004040 	.word	0x20004040
 800a07c:	2000404c 	.word	0x2000404c
 800a080:	20004044 	.word	0x20004044
 800a084:	20004038 	.word	0x20004038
 800a088:	20004048 	.word	0x20004048

0800a08c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d04a      	beq.n	800a134 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a09e:	2308      	movs	r3, #8
 800a0a0:	425b      	negs	r3, r3
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	4b22      	ldr	r3, [pc, #136]	; (800a13c <vPortFree+0xb0>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10b      	bne.n	800a0d2 <vPortFree+0x46>
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	b672      	cpsid	i
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	b662      	cpsie	i
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	e7fe      	b.n	800a0d0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00b      	beq.n	800a0f2 <vPortFree+0x66>
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	b672      	cpsid	i
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	b662      	cpsie	i
 800a0ee:	60bb      	str	r3, [r7, #8]
 800a0f0:	e7fe      	b.n	800a0f0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	4b11      	ldr	r3, [pc, #68]	; (800a13c <vPortFree+0xb0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d019      	beq.n	800a134 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d115      	bne.n	800a134 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <vPortFree+0xb0>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	43db      	mvns	r3, r3
 800a112:	401a      	ands	r2, r3
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a118:	f7fe fec2 	bl	8008ea0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <vPortFree+0xb4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4413      	add	r3, r2
 800a126:	4a06      	ldr	r2, [pc, #24]	; (800a140 <vPortFree+0xb4>)
 800a128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a12a:	6938      	ldr	r0, [r7, #16]
 800a12c:	f000 f86c 	bl	800a208 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a130:	f7fe fec4 	bl	8008ebc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a134:	bf00      	nop
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	2000404c 	.word	0x2000404c
 800a140:	20004044 	.word	0x20004044

0800a144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a14a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a14e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a150:	4b27      	ldr	r3, [pc, #156]	; (800a1f0 <prvHeapInit+0xac>)
 800a152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00c      	beq.n	800a178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3307      	adds	r3, #7
 800a162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 0307 	bic.w	r3, r3, #7
 800a16a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	1ad3      	subs	r3, r2, r3
 800a172:	4a1f      	ldr	r2, [pc, #124]	; (800a1f0 <prvHeapInit+0xac>)
 800a174:	4413      	add	r3, r2
 800a176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a17c:	4a1d      	ldr	r2, [pc, #116]	; (800a1f4 <prvHeapInit+0xb0>)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a182:	4b1c      	ldr	r3, [pc, #112]	; (800a1f4 <prvHeapInit+0xb0>)
 800a184:	2200      	movs	r2, #0
 800a186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	4413      	add	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a190:	2208      	movs	r2, #8
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f023 0307 	bic.w	r3, r3, #7
 800a19e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4a15      	ldr	r2, [pc, #84]	; (800a1f8 <prvHeapInit+0xb4>)
 800a1a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1a6:	4b14      	ldr	r3, [pc, #80]	; (800a1f8 <prvHeapInit+0xb4>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1ae:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <prvHeapInit+0xb4>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	1ad2      	subs	r2, r2, r3
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <prvHeapInit+0xb4>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	4a0a      	ldr	r2, [pc, #40]	; (800a1fc <prvHeapInit+0xb8>)
 800a1d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4a09      	ldr	r2, [pc, #36]	; (800a200 <prvHeapInit+0xbc>)
 800a1da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1dc:	4b09      	ldr	r3, [pc, #36]	; (800a204 <prvHeapInit+0xc0>)
 800a1de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1e2:	601a      	str	r2, [r3, #0]
}
 800a1e4:	bf00      	nop
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	20000438 	.word	0x20000438
 800a1f4:	20004038 	.word	0x20004038
 800a1f8:	20004040 	.word	0x20004040
 800a1fc:	20004048 	.word	0x20004048
 800a200:	20004044 	.word	0x20004044
 800a204:	2000404c 	.word	0x2000404c

0800a208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a210:	4b28      	ldr	r3, [pc, #160]	; (800a2b4 <prvInsertBlockIntoFreeList+0xac>)
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	e002      	b.n	800a21c <prvInsertBlockIntoFreeList+0x14>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d8f7      	bhi.n	800a216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	4413      	add	r3, r2
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	429a      	cmp	r2, r3
 800a236:	d108      	bne.n	800a24a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	441a      	add	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	441a      	add	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d118      	bne.n	800a290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d00d      	beq.n	800a286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	441a      	add	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	e008      	b.n	800a298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a286:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	e003      	b.n	800a298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d002      	beq.n	800a2a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2a6:	bf00      	nop
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	20004038 	.word	0x20004038
 800a2b8:	20004040 	.word	0x20004040

0800a2bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a2c6:	f008 ffcd 	bl	8013264 <sys_timeouts_sleeptime>
 800a2ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d2:	d10b      	bne.n	800a2ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a2d4:	4813      	ldr	r0, [pc, #76]	; (800a324 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2d6:	f00b fd36 	bl	8015d46 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a2da:	2200      	movs	r2, #0
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f00b fca8 	bl	8015c34 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a2e4:	480f      	ldr	r0, [pc, #60]	; (800a324 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2e6:	f00b fd1f 	bl	8015d28 <sys_mutex_lock>
    return;
 800a2ea:	e018      	b.n	800a31e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d102      	bne.n	800a2f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a2f2:	f008 ff7d 	bl	80131f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a2f6:	e7e6      	b.n	800a2c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a2f8:	480a      	ldr	r0, [pc, #40]	; (800a324 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2fa:	f00b fd24 	bl	8015d46 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f00b fc96 	bl	8015c34 <sys_arch_mbox_fetch>
 800a308:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a30a:	4806      	ldr	r0, [pc, #24]	; (800a324 <tcpip_timeouts_mbox_fetch+0x68>)
 800a30c:	f00b fd0c 	bl	8015d28 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a316:	d102      	bne.n	800a31e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a318:	f008 ff6a 	bl	80131f0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a31c:	e7d3      	b.n	800a2c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20007de8 	.word	0x20007de8

0800a328 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a330:	4810      	ldr	r0, [pc, #64]	; (800a374 <tcpip_thread+0x4c>)
 800a332:	f00b fcf9 	bl	8015d28 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a336:	4b10      	ldr	r3, [pc, #64]	; (800a378 <tcpip_thread+0x50>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d005      	beq.n	800a34a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a33e:	4b0e      	ldr	r3, [pc, #56]	; (800a378 <tcpip_thread+0x50>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a0e      	ldr	r2, [pc, #56]	; (800a37c <tcpip_thread+0x54>)
 800a344:	6812      	ldr	r2, [r2, #0]
 800a346:	4610      	mov	r0, r2
 800a348:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a34a:	f107 030c 	add.w	r3, r7, #12
 800a34e:	4619      	mov	r1, r3
 800a350:	480b      	ldr	r0, [pc, #44]	; (800a380 <tcpip_thread+0x58>)
 800a352:	f7ff ffb3 	bl	800a2bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d106      	bne.n	800a36a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a35c:	4b09      	ldr	r3, [pc, #36]	; (800a384 <tcpip_thread+0x5c>)
 800a35e:	2291      	movs	r2, #145	; 0x91
 800a360:	4909      	ldr	r1, [pc, #36]	; (800a388 <tcpip_thread+0x60>)
 800a362:	480a      	ldr	r0, [pc, #40]	; (800a38c <tcpip_thread+0x64>)
 800a364:	f00b fd86 	bl	8015e74 <iprintf>
      continue;
 800a368:	e003      	b.n	800a372 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f80f 	bl	800a390 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a372:	e7ea      	b.n	800a34a <tcpip_thread+0x22>
 800a374:	20007de8 	.word	0x20007de8
 800a378:	20004050 	.word	0x20004050
 800a37c:	20004054 	.word	0x20004054
 800a380:	20004058 	.word	0x20004058
 800a384:	08016dd8 	.word	0x08016dd8
 800a388:	08016e08 	.word	0x08016e08
 800a38c:	08016e28 	.word	0x08016e28

0800a390 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d018      	beq.n	800a3d2 <tcpip_thread_handle_msg+0x42>
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d021      	beq.n	800a3e8 <tcpip_thread_handle_msg+0x58>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d126      	bne.n	800a3f6 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6850      	ldr	r0, [r2, #4]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6892      	ldr	r2, [r2, #8]
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	4798      	blx	r3
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d004      	beq.n	800a3c8 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f002 fb10 	bl	800c9e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	2009      	movs	r0, #9
 800a3cc:	f001 fc6c 	bl	800bca8 <memp_free>
      break;
 800a3d0:	e018      	b.n	800a404 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6892      	ldr	r2, [r2, #8]
 800a3da:	4610      	mov	r0, r2
 800a3dc:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	2008      	movs	r0, #8
 800a3e2:	f001 fc61 	bl	800bca8 <memp_free>
      break;
 800a3e6:	e00d      	b.n	800a404 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	6892      	ldr	r2, [r2, #8]
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	4798      	blx	r3
      break;
 800a3f4:	e006      	b.n	800a404 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a3f6:	4b05      	ldr	r3, [pc, #20]	; (800a40c <tcpip_thread_handle_msg+0x7c>)
 800a3f8:	22cf      	movs	r2, #207	; 0xcf
 800a3fa:	4905      	ldr	r1, [pc, #20]	; (800a410 <tcpip_thread_handle_msg+0x80>)
 800a3fc:	4805      	ldr	r0, [pc, #20]	; (800a414 <tcpip_thread_handle_msg+0x84>)
 800a3fe:	f00b fd39 	bl	8015e74 <iprintf>
      break;
 800a402:	bf00      	nop
  }
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	08016dd8 	.word	0x08016dd8
 800a410:	08016e08 	.word	0x08016e08
 800a414:	08016e28 	.word	0x08016e28

0800a418 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a424:	481a      	ldr	r0, [pc, #104]	; (800a490 <tcpip_inpkt+0x78>)
 800a426:	f00b fc44 	bl	8015cb2 <sys_mbox_valid>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d105      	bne.n	800a43c <tcpip_inpkt+0x24>
 800a430:	4b18      	ldr	r3, [pc, #96]	; (800a494 <tcpip_inpkt+0x7c>)
 800a432:	22fc      	movs	r2, #252	; 0xfc
 800a434:	4918      	ldr	r1, [pc, #96]	; (800a498 <tcpip_inpkt+0x80>)
 800a436:	4819      	ldr	r0, [pc, #100]	; (800a49c <tcpip_inpkt+0x84>)
 800a438:	f00b fd1c 	bl	8015e74 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a43c:	2009      	movs	r0, #9
 800a43e:	f001 fbe1 	bl	800bc04 <memp_malloc>
 800a442:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d102      	bne.n	800a450 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a44a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a44e:	e01a      	b.n	800a486 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	2200      	movs	r2, #0
 800a454:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a468:	6979      	ldr	r1, [r7, #20]
 800a46a:	4809      	ldr	r0, [pc, #36]	; (800a490 <tcpip_inpkt+0x78>)
 800a46c:	f00b fbc8 	bl	8015c00 <sys_mbox_trypost>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d006      	beq.n	800a484 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a476:	6979      	ldr	r1, [r7, #20]
 800a478:	2009      	movs	r0, #9
 800a47a:	f001 fc15 	bl	800bca8 <memp_free>
    return ERR_MEM;
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a482:	e000      	b.n	800a486 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a484:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a486:	4618      	mov	r0, r3
 800a488:	3718      	adds	r7, #24
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20004058 	.word	0x20004058
 800a494:	08016dd8 	.word	0x08016dd8
 800a498:	08016e50 	.word	0x08016e50
 800a49c:	08016e28 	.word	0x08016e28

0800a4a0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4b0:	f003 0318 	and.w	r3, r3, #24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d006      	beq.n	800a4c6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a4b8:	4a08      	ldr	r2, [pc, #32]	; (800a4dc <tcpip_input+0x3c>)
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff ffab 	bl	800a418 <tcpip_inpkt>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	e005      	b.n	800a4d2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a4c6:	4a06      	ldr	r2, [pc, #24]	; (800a4e0 <tcpip_input+0x40>)
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7ff ffa4 	bl	800a418 <tcpip_inpkt>
 800a4d0:	4603      	mov	r3, r0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	08015a11 	.word	0x08015a11
 800a4e0:	08014931 	.word	0x08014931

0800a4e4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a4ee:	4819      	ldr	r0, [pc, #100]	; (800a554 <tcpip_try_callback+0x70>)
 800a4f0:	f00b fbdf 	bl	8015cb2 <sys_mbox_valid>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d106      	bne.n	800a508 <tcpip_try_callback+0x24>
 800a4fa:	4b17      	ldr	r3, [pc, #92]	; (800a558 <tcpip_try_callback+0x74>)
 800a4fc:	f240 125d 	movw	r2, #349	; 0x15d
 800a500:	4916      	ldr	r1, [pc, #88]	; (800a55c <tcpip_try_callback+0x78>)
 800a502:	4817      	ldr	r0, [pc, #92]	; (800a560 <tcpip_try_callback+0x7c>)
 800a504:	f00b fcb6 	bl	8015e74 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a508:	2008      	movs	r0, #8
 800a50a:	f001 fb7b 	bl	800bc04 <memp_malloc>
 800a50e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d102      	bne.n	800a51c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a51a:	e017      	b.n	800a54c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2201      	movs	r2, #1
 800a520:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a52e:	68f9      	ldr	r1, [r7, #12]
 800a530:	4808      	ldr	r0, [pc, #32]	; (800a554 <tcpip_try_callback+0x70>)
 800a532:	f00b fb65 	bl	8015c00 <sys_mbox_trypost>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d006      	beq.n	800a54a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a53c:	68f9      	ldr	r1, [r7, #12]
 800a53e:	2008      	movs	r0, #8
 800a540:	f001 fbb2 	bl	800bca8 <memp_free>
    return ERR_MEM;
 800a544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a548:	e000      	b.n	800a54c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20004058 	.word	0x20004058
 800a558:	08016dd8 	.word	0x08016dd8
 800a55c:	08016e50 	.word	0x08016e50
 800a560:	08016e28 	.word	0x08016e28

0800a564 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af02      	add	r7, sp, #8
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a56e:	f000 fec1 	bl	800b2f4 <lwip_init>

  tcpip_init_done = initfunc;
 800a572:	4a17      	ldr	r2, [pc, #92]	; (800a5d0 <tcpip_init+0x6c>)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a578:	4a16      	ldr	r2, [pc, #88]	; (800a5d4 <tcpip_init+0x70>)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a57e:	2106      	movs	r1, #6
 800a580:	4815      	ldr	r0, [pc, #84]	; (800a5d8 <tcpip_init+0x74>)
 800a582:	f00b fb1b 	bl	8015bbc <sys_mbox_new>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d006      	beq.n	800a59a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a58c:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <tcpip_init+0x78>)
 800a58e:	f240 2261 	movw	r2, #609	; 0x261
 800a592:	4913      	ldr	r1, [pc, #76]	; (800a5e0 <tcpip_init+0x7c>)
 800a594:	4813      	ldr	r0, [pc, #76]	; (800a5e4 <tcpip_init+0x80>)
 800a596:	f00b fc6d 	bl	8015e74 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a59a:	4813      	ldr	r0, [pc, #76]	; (800a5e8 <tcpip_init+0x84>)
 800a59c:	f00b fba8 	bl	8015cf0 <sys_mutex_new>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d006      	beq.n	800a5b4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a5a6:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <tcpip_init+0x78>)
 800a5a8:	f240 2265 	movw	r2, #613	; 0x265
 800a5ac:	490f      	ldr	r1, [pc, #60]	; (800a5ec <tcpip_init+0x88>)
 800a5ae:	480d      	ldr	r0, [pc, #52]	; (800a5e4 <tcpip_init+0x80>)
 800a5b0:	f00b fc60 	bl	8015e74 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5bc:	2200      	movs	r2, #0
 800a5be:	490c      	ldr	r1, [pc, #48]	; (800a5f0 <tcpip_init+0x8c>)
 800a5c0:	480c      	ldr	r0, [pc, #48]	; (800a5f4 <tcpip_init+0x90>)
 800a5c2:	f00b fbcd 	bl	8015d60 <sys_thread_new>
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20004050 	.word	0x20004050
 800a5d4:	20004054 	.word	0x20004054
 800a5d8:	20004058 	.word	0x20004058
 800a5dc:	08016dd8 	.word	0x08016dd8
 800a5e0:	08016e60 	.word	0x08016e60
 800a5e4:	08016e28 	.word	0x08016e28
 800a5e8:	20007de8 	.word	0x20007de8
 800a5ec:	08016e84 	.word	0x08016e84
 800a5f0:	0800a329 	.word	0x0800a329
 800a5f4:	08016ea8 	.word	0x08016ea8

0800a5f8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <fs_open+0x16>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d102      	bne.n	800a614 <fs_open+0x1c>
    return ERR_ARG;
 800a60e:	f06f 030f 	mvn.w	r3, #15
 800a612:	e028      	b.n	800a666 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a614:	4b16      	ldr	r3, [pc, #88]	; (800a670 <fs_open+0x78>)
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	e020      	b.n	800a65c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	4619      	mov	r1, r3
 800a620:	6838      	ldr	r0, [r7, #0]
 800a622:	f7f5 fe0d 	bl	8000240 <strcmp>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d114      	bne.n	800a656 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68da      	ldr	r2, [r3, #12]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	7c1a      	ldrb	r2, [r3, #16]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	e007      	b.n	800a666 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1db      	bne.n	800a61a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a662:	f06f 0305 	mvn.w	r3, #5
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	0802a5a4 	.word	0x0802a5a4

0800a674 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	1ad3      	subs	r3, r2, r3
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a6ae:	222c      	movs	r2, #44	; 0x2c
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f00b fbd6 	bl	8015e64 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a6c6:	202c      	movs	r0, #44	; 0x2c
 800a6c8:	f001 f91a 	bl	800b900 <mem_malloc>
 800a6cc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <http_state_alloc+0x1a>
    http_state_init(ret);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7ff ffe6 	bl	800a6a6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a6da:	687b      	ldr	r3, [r7, #4]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d007      	beq.n	800a704 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7ff ffbb 	bl	800a674 <fs_close>
    hs->handle = NULL;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d007      	beq.n	800a71c <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	4618      	mov	r0, r3
 800a712:	f002 f969 	bl	800c9e8 <pbuf_free>
    hs->req = NULL;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d005      	beq.n	800a73e <http_state_free+0x1a>
    http_state_eof(hs);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff ffd6 	bl	800a6e4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 ff47 	bl	800b5cc <mem_free>
  }
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
 800a754:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d106      	bne.n	800a76a <http_write+0x22>
 800a75c:	4b2c      	ldr	r3, [pc, #176]	; (800a810 <http_write+0xc8>)
 800a75e:	f240 2219 	movw	r2, #537	; 0x219
 800a762:	492c      	ldr	r1, [pc, #176]	; (800a814 <http_write+0xcc>)
 800a764:	482c      	ldr	r0, [pc, #176]	; (800a818 <http_write+0xd0>)
 800a766:	f00b fb85 	bl	8015e74 <iprintf>
  len = *length;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a770:	8afb      	ldrh	r3, [r7, #22]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <http_write+0x32>
    return ERR_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	e045      	b.n	800a806 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a780:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a782:	8aba      	ldrh	r2, [r7, #20]
 800a784:	8afb      	ldrh	r3, [r7, #22]
 800a786:	429a      	cmp	r2, r3
 800a788:	d201      	bcs.n	800a78e <http_write+0x46>
    len = max_len;
 800a78a:	8abb      	ldrh	r3, [r7, #20]
 800a78c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a796:	8afa      	ldrh	r2, [r7, #22]
 800a798:	8abb      	ldrh	r3, [r7, #20]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d901      	bls.n	800a7a2 <http_write+0x5a>
    len = max_len;
 800a79e:	8abb      	ldrh	r3, [r7, #20]
 800a7a0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	8afa      	ldrh	r2, [r7, #22]
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f006 fea7 	bl	80114fc <tcp_write>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a7b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7ba:	d10f      	bne.n	800a7dc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d004      	beq.n	800a7d0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d902      	bls.n	800a7d6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	82fb      	strh	r3, [r7, #22]
 800a7d4:	e002      	b.n	800a7dc <http_write+0x94>
      } else {
        len /= 2;
 800a7d6:	8afb      	ldrh	r3, [r7, #22]
 800a7d8:	085b      	lsrs	r3, r3, #1
 800a7da:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a7dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7e4:	d102      	bne.n	800a7ec <http_write+0xa4>
 800a7e6:	8afb      	ldrh	r3, [r7, #22]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d8da      	bhi.n	800a7a2 <http_write+0x5a>

  if (err == ERR_OK) {
 800a7ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d103      	bne.n	800a7fc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	8afa      	ldrh	r2, [r7, #22]
 800a7f8:	801a      	strh	r2, [r3, #0]
 800a7fa:	e002      	b.n	800a802 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a802:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	08016ef8 	.word	0x08016ef8
 800a814:	08016f30 	.word	0x08016f30
 800a818:	08016f40 	.word	0x08016f40

0800a81c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	4613      	mov	r3, r2
 800a828:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a82a:	2100      	movs	r1, #0
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f003 ff29 	bl	800e684 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a832:	2100      	movs	r1, #0
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f003 ff37 	bl	800e6a8 <tcp_recv>
  altcp_err(pcb, NULL);
 800a83a:	2100      	movs	r1, #0
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f003 ff77 	bl	800e730 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a842:	2200      	movs	r2, #0
 800a844:	2100      	movs	r1, #0
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f003 ffac 	bl	800e7a4 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a84c:	2100      	movs	r1, #0
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f003 ff4c 	bl	800e6ec <tcp_sent>
  if (hs != NULL) {
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a85a:	68b8      	ldr	r0, [r7, #8]
 800a85c:	f7ff ff62 	bl	800a724 <http_state_free>
  }

  if (abort_conn) {
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f002 fe4a 	bl	800d500 <tcp_abort>
    return ERR_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	e00f      	b.n	800a890 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f002 fd5b 	bl	800d32c <tcp_close>
 800a876:	4603      	mov	r3, r0
 800a878:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a87a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d004      	beq.n	800a88c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a882:	2204      	movs	r2, #4
 800a884:	4904      	ldr	r1, [pc, #16]	; (800a898 <http_close_or_abort_conn+0x7c>)
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f003 ff8c 	bl	800e7a4 <tcp_poll>
  }
  return err;
 800a88c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3718      	adds	r7, #24
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	0800af5f 	.word	0x0800af5f

0800a89c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7ff ffb6 	bl	800a81c <http_close_or_abort_conn>
 800a8b0:	4603      	mov	r3, r0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff ffe8 	bl	800a89c <http_close_conn>
  }
}
 800a8cc:	bf00      	nop
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d105      	bne.n	800a8f2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff ffe6 	bl	800a8ba <http_eof>
    return 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e016      	b.n	800a920 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fec6 	bl	800a688 <fs_bytes_left>
 800a8fc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b00      	cmp	r3, #0
 800a902:	dc05      	bgt.n	800a910 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff ffd7 	bl	800a8ba <http_eof>
    return 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	e007      	b.n	800a920 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <http_check_eof+0x54>)
 800a912:	f240 429d 	movw	r2, #1181	; 0x49d
 800a916:	4905      	ldr	r1, [pc, #20]	; (800a92c <http_check_eof+0x58>)
 800a918:	4805      	ldr	r0, [pc, #20]	; (800a930 <http_check_eof+0x5c>)
 800a91a:	f00b faab 	bl	8015e74 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a91e:	2301      	movs	r3, #1
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	08016ef8 	.word	0x08016ef8
 800a92c:	08016f68 	.word	0x08016f68
 800a930:	08016f40 	.word	0x08016f40

0800a934 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d803      	bhi.n	800a956 <http_send_data_nonssi+0x22>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a952:	b29b      	uxth	r3, r3
 800a954:	e001      	b.n	800a95a <http_send_data_nonssi+0x26>
 800a956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a95a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	6999      	ldr	r1, [r3, #24]
 800a960:	f107 020c 	add.w	r2, r7, #12
 800a964:	2300      	movs	r3, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff feee 	bl	800a748 <http_write>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10d      	bne.n	800a994 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a978:	2301      	movs	r3, #1
 800a97a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	89ba      	ldrh	r2, [r7, #12]
 800a982:	441a      	add	r2, r3
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	89ba      	ldrh	r2, [r7, #12]
 800a98e:	1a9a      	subs	r2, r3, r2
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a994:	7bfb      	ldrb	r3, [r7, #15]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3710      	adds	r7, #16
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <http_send+0x18>
    return 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e025      	b.n	800aa02 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d108      	bne.n	800a9d0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff ff87 	bl	800a8d4 <http_check_eof>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <http_send+0x32>
      return 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e018      	b.n	800aa02 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff ffae 	bl	800a934 <http_send_data_nonssi>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10d      	bne.n	800aa00 <http_send+0x62>
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff fe4d 	bl	800a688 <fs_bytes_left>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dc05      	bgt.n	800aa00 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff ff5f 	bl	800a8ba <http_eof>
    return 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e000      	b.n	800aa02 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
	...

0800aa0c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	4a1c      	ldr	r2, [pc, #112]	; (800aa8c <http_get_404_file+0x80>)
 800aa1a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4619      	mov	r1, r3
 800aa24:	4610      	mov	r0, r2
 800aa26:	f7ff fde7 	bl	800a5f8 <fs_open>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800aa2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d024      	beq.n	800aa80 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	4a15      	ldr	r2, [pc, #84]	; (800aa90 <http_get_404_file+0x84>)
 800aa3a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4619      	mov	r1, r3
 800aa44:	4610      	mov	r0, r2
 800aa46:	f7ff fdd7 	bl	800a5f8 <fs_open>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aa4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d014      	beq.n	800aa80 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	4a0e      	ldr	r2, [pc, #56]	; (800aa94 <http_get_404_file+0x88>)
 800aa5a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f7ff fdc7 	bl	800a5f8 <fs_open>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800aa6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d004      	beq.n	800aa80 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]
        return NULL;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e000      	b.n	800aa82 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800aa80:	687b      	ldr	r3, [r7, #4]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	08016fa0 	.word	0x08016fa0
 800aa90:	08016fac 	.word	0x08016fac
 800aa94:	08016fb8 	.word	0x08016fb8

0800aa98 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08e      	sub	sp, #56	; 0x38
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <http_parse_request+0x24>
 800aaae:	4b65      	ldr	r3, [pc, #404]	; (800ac44 <http_parse_request+0x1ac>)
 800aab0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800aab4:	4964      	ldr	r1, [pc, #400]	; (800ac48 <http_parse_request+0x1b0>)
 800aab6:	4865      	ldr	r0, [pc, #404]	; (800ac4c <http_parse_request+0x1b4>)
 800aab8:	f00b f9dc 	bl	8015e74 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d106      	bne.n	800aad0 <http_parse_request+0x38>
 800aac2:	4b60      	ldr	r3, [pc, #384]	; (800ac44 <http_parse_request+0x1ac>)
 800aac4:	f240 72af 	movw	r2, #1967	; 0x7af
 800aac8:	4961      	ldr	r1, [pc, #388]	; (800ac50 <http_parse_request+0x1b8>)
 800aaca:	4860      	ldr	r0, [pc, #384]	; (800ac4c <http_parse_request+0x1b4>)
 800aacc:	f00b f9d2 	bl	8015e74 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d103      	bne.n	800aae0 <http_parse_request+0x48>
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800aae0:	f06f 0307 	mvn.w	r3, #7
 800aae4:	e0aa      	b.n	800ac3c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d103      	bne.n	800aaf6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaf2:	621a      	str	r2, [r3, #32]
 800aaf4:	e005      	b.n	800ab02 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aafc:	4618      	mov	r0, r3
 800aafe:	f002 f841 	bl	800cb84 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ab02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab04:	f002 f816 	bl	800cb34 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d012      	beq.n	800ab38 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	891b      	ldrh	r3, [r3, #8]
 800ab18:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	bf28      	it	cs
 800ab20:	4613      	movcs	r3, r2
 800ab22:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6a18      	ldr	r0, [r3, #32]
 800ab28:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	4949      	ldr	r1, [pc, #292]	; (800ac54 <http_parse_request+0x1bc>)
 800ab2e:	f002 f951 	bl	800cdd4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800ab32:	4b48      	ldr	r3, [pc, #288]	; (800ac54 <http_parse_request+0x1bc>)
 800ab34:	637b      	str	r3, [r7, #52]	; 0x34
 800ab36:	e005      	b.n	800ab44 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	895b      	ldrh	r3, [r3, #10]
 800ab42:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800ab44:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab46:	2b06      	cmp	r3, #6
 800ab48:	d963      	bls.n	800ac12 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800ab4a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	4942      	ldr	r1, [pc, #264]	; (800ac58 <http_parse_request+0x1c0>)
 800ab50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab52:	f000 fb99 	bl	800b288 <lwip_strnstr>
 800ab56:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d059      	beq.n	800ac12 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800ab62:	2204      	movs	r2, #4
 800ab64:	493d      	ldr	r1, [pc, #244]	; (800ac5c <http_parse_request+0x1c4>)
 800ab66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab68:	f00b f9dd 	bl	8015f26 <strncmp>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d117      	bne.n	800aba2 <http_parse_request+0x10a>
        sp1 = data + 3;
 800ab72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab74:	3303      	adds	r3, #3
 800ab76:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	8b7a      	ldrh	r2, [r7, #26]
 800ab90:	4933      	ldr	r1, [pc, #204]	; (800ac60 <http_parse_request+0x1c8>)
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fb78 	bl	800b288 <lwip_strnstr>
 800ab98:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d111      	bne.n	800abc4 <http_parse_request+0x12c>
 800aba0:	e006      	b.n	800abb0 <http_parse_request+0x118>
        data[4] = 0;
 800aba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba4:	3304      	adds	r3, #4
 800aba6:	2200      	movs	r2, #0
 800aba8:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800abaa:	f06f 030f 	mvn.w	r3, #15
 800abae:	e045      	b.n	800ac3c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	3301      	adds	r3, #1
 800abb4:	8b7a      	ldrh	r2, [r7, #26]
 800abb6:	4928      	ldr	r1, [pc, #160]	; (800ac58 <http_parse_request+0x1c0>)
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 fb65 	bl	800b288 <lwip_strnstr>
 800abbe:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800abc0:	2301      	movs	r3, #1
 800abc2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	69fa      	ldr	r2, [r7, #28]
 800abc8:	3201      	adds	r2, #1
 800abca:	1a9b      	subs	r3, r3, r2
 800abcc:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01e      	beq.n	800ac12 <http_parse_request+0x17a>
 800abd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d91a      	bls.n	800ac12 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800abdc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800abde:	461a      	mov	r2, r3
 800abe0:	4920      	ldr	r1, [pc, #128]	; (800ac64 <http_parse_request+0x1cc>)
 800abe2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800abe4:	f000 fb50 	bl	800b288 <lwip_strnstr>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d011      	beq.n	800ac12 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	3301      	adds	r3, #1
 800abf2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800abfa:	8b3b      	ldrh	r3, [r7, #24]
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	4413      	add	r3, r2
 800ac00:	2200      	movs	r2, #0
 800ac02:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800ac04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac06:	6979      	ldr	r1, [r7, #20]
 800ac08:	68b8      	ldr	r0, [r7, #8]
 800ac0a:	f000 f82d 	bl	800ac68 <http_find_file>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	e014      	b.n	800ac3c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f001 ff74 	bl	800cb04 <pbuf_clen>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	891b      	ldrh	r3, [r3, #8]
 800ac26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac2a:	d205      	bcs.n	800ac38 <http_parse_request+0x1a0>
 800ac2c:	8a7b      	ldrh	r3, [r7, #18]
 800ac2e:	2b05      	cmp	r3, #5
 800ac30:	d802      	bhi.n	800ac38 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800ac32:	f06f 0304 	mvn.w	r3, #4
 800ac36:	e001      	b.n	800ac3c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800ac38:	f06f 030f 	mvn.w	r3, #15
  }
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3738      	adds	r7, #56	; 0x38
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	08016ef8 	.word	0x08016ef8
 800ac48:	08016fc4 	.word	0x08016fc4
 800ac4c:	08016f40 	.word	0x08016f40
 800ac50:	08016fd0 	.word	0x08016fd0
 800ac54:	2000405c 	.word	0x2000405c
 800ac58:	08016fdc 	.word	0x08016fdc
 800ac5c:	08016fe0 	.word	0x08016fe0
 800ac60:	08016fe8 	.word	0x08016fe8
 800ac64:	08016fec 	.word	0x08016fec

0800ac68 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b092      	sub	sp, #72	; 0x48
 800ac6c:	af02      	add	r7, sp, #8
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7f5 fae5 	bl	8000254 <strlen>
 800ac8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d06b      	beq.n	800ad6a <http_find_file+0x102>
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	3b01      	subs	r3, #1
 800ac98:	4413      	add	r3, r2
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	2b2f      	cmp	r3, #47	; 0x2f
 800ac9e:	d164      	bne.n	800ad6a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800aca0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800aca2:	4a53      	ldr	r2, [pc, #332]	; (800adf0 <http_find_file+0x188>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d102      	bne.n	800acae <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d15d      	bne.n	800ad6a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	3b01      	subs	r3, #1
 800acb2:	2b3f      	cmp	r3, #63	; 0x3f
 800acb4:	bf28      	it	cs
 800acb6:	233f      	movcs	r3, #63	; 0x3f
 800acb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00a      	beq.n	800acd6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc4:	4619      	mov	r1, r3
 800acc6:	484a      	ldr	r0, [pc, #296]	; (800adf0 <http_find_file+0x188>)
 800acc8:	f00b f8c1 	bl	8015e4e <memcpy>
      http_uri_buf[copy_len] = 0;
 800accc:	4a48      	ldr	r2, [pc, #288]	; (800adf0 <http_find_file+0x188>)
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	4413      	add	r3, r2
 800acd2:	2200      	movs	r2, #0
 800acd4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acda:	e043      	b.n	800ad64 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d028      	beq.n	800ad34 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800ace8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01e      	beq.n	800ad2e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800acf0:	4a40      	ldr	r2, [pc, #256]	; (800adf4 <http_find_file+0x18c>)
 800acf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7f5 faab 	bl	8000254 <strlen>
 800acfe:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	4293      	cmp	r3, r2
 800ad06:	bf28      	it	cs
 800ad08:	4613      	movcs	r3, r2
 800ad0a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	4a38      	ldr	r2, [pc, #224]	; (800adf0 <http_find_file+0x188>)
 800ad10:	1898      	adds	r0, r3, r2
 800ad12:	4a38      	ldr	r2, [pc, #224]	; (800adf4 <http_find_file+0x18c>)
 800ad14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad1a:	69ba      	ldr	r2, [r7, #24]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	f00b f896 	bl	8015e4e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800ad22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	4413      	add	r3, r2
 800ad28:	4a31      	ldr	r2, [pc, #196]	; (800adf0 <http_find_file+0x188>)
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800ad2e:	4b30      	ldr	r3, [pc, #192]	; (800adf0 <http_find_file+0x188>)
 800ad30:	633b      	str	r3, [r7, #48]	; 0x30
 800ad32:	e004      	b.n	800ad3e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800ad34:	4a2f      	ldr	r2, [pc, #188]	; (800adf4 <http_find_file+0x18c>)
 800ad36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7ff fc58 	bl	800a5f8 <fs_open>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800ad4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d104      	bne.n	800ad5e <http_find_file+0xf6>
        uri = file_name;
 800ad54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad56:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800ad5c:	e005      	b.n	800ad6a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad60:	3301      	adds	r3, #1
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	d9b8      	bls.n	800acdc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d124      	bne.n	800adba <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	213f      	movs	r1, #63	; 0x3f
 800ad74:	4618      	mov	r0, r3
 800ad76:	f00b f8c9 	bl	8015f0c <strchr>
 800ad7a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800ad7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d005      	beq.n	800ad8e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800ad82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad84:	2200      	movs	r2, #0
 800ad86:	701a      	strb	r2, [r3, #0]
      params++;
 800ad88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	4611      	mov	r1, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fc2f 	bl	800a5f8 <fs_open>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ad9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d102      	bne.n	800adac <http_find_file+0x144>
      file = &hs->file_handle;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	63bb      	str	r3, [r7, #56]	; 0x38
 800adaa:	e006      	b.n	800adba <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800adac:	f107 0308 	add.w	r3, r7, #8
 800adb0:	4619      	mov	r1, r3
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7ff fe2a 	bl	800aa0c <http_get_404_file>
 800adb8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800adba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d106      	bne.n	800adce <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800adc0:	f107 0308 	add.w	r3, r7, #8
 800adc4:	4619      	mov	r1, r3
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f7ff fe20 	bl	800aa0c <http_get_404_file>
 800adcc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	4613      	mov	r3, r2
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 f809 	bl	800adf8 <http_init_file>
 800ade6:	4603      	mov	r3, r0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3740      	adds	r7, #64	; 0x40
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	2000445c 	.word	0x2000445c
 800adf4:	0802a5b8 	.word	0x0802a5b8

0800adf8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
 800ae04:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d05d      	beq.n	800aec8 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d106      	bne.n	800ae22 <http_init_file+0x2a>
 800ae14:	4b35      	ldr	r3, [pc, #212]	; (800aeec <http_init_file+0xf4>)
 800ae16:	f640 120b 	movw	r2, #2315	; 0x90b
 800ae1a:	4935      	ldr	r1, [pc, #212]	; (800aef0 <http_init_file+0xf8>)
 800ae1c:	4835      	ldr	r0, [pc, #212]	; (800aef4 <http_init_file+0xfc>)
 800ae1e:	f00b f829 	bl	8015e74 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	da06      	bge.n	800ae46 <http_init_file+0x4e>
 800ae38:	4b2c      	ldr	r3, [pc, #176]	; (800aeec <http_init_file+0xf4>)
 800ae3a:	f640 1234 	movw	r2, #2356	; 0x934
 800ae3e:	492e      	ldr	r1, [pc, #184]	; (800aef8 <http_init_file+0x100>)
 800ae40:	482c      	ldr	r0, [pc, #176]	; (800aef4 <http_init_file+0xfc>)
 800ae42:	f00b f817 	bl	8015e74 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	7c1b      	ldrb	r3, [r3, #16]
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <http_init_file+0x7c>
 800ae66:	4b21      	ldr	r3, [pc, #132]	; (800aeec <http_init_file+0xf4>)
 800ae68:	f640 1244 	movw	r2, #2372	; 0x944
 800ae6c:	4923      	ldr	r1, [pc, #140]	; (800aefc <http_init_file+0x104>)
 800ae6e:	4821      	ldr	r0, [pc, #132]	; (800aef4 <http_init_file+0xfc>)
 800ae70:	f00b f800 	bl	8015e74 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d033      	beq.n	800aee2 <http_init_file+0xea>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	7c1b      	ldrb	r3, [r3, #16]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d02c      	beq.n	800aee2 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6998      	ldr	r0, [r3, #24]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	461a      	mov	r2, r3
 800ae92:	491b      	ldr	r1, [pc, #108]	; (800af00 <http_init_file+0x108>)
 800ae94:	f000 f9f8 	bl	800b288 <lwip_strnstr>
 800ae98:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d020      	beq.n	800aee2 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	3304      	adds	r3, #4
 800aea4:	461a      	mov	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	699a      	ldr	r2, [r3, #24]
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	441a      	add	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	1ad2      	subs	r2, r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	625a      	str	r2, [r3, #36]	; 0x24
 800aec6:	e00c      	b.n	800aee2 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	08016ef8 	.word	0x08016ef8
 800aef0:	08016ff4 	.word	0x08016ff4
 800aef4:	08016f40 	.word	0x08016f40
 800aef8:	08017008 	.word	0x08017008
 800aefc:	08017028 	.word	0x08017028
 800af00:	08016fec 	.word	0x08016fec

0800af04 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <http_err+0x1c>
    http_state_free(hs);
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f7ff fc02 	bl	800a724 <http_state_free>
  }
}
 800af20:	bf00      	nop
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	4613      	mov	r3, r2
 800af34:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <http_sent+0x1c>
    return ERR_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	e008      	b.n	800af56 <http_sent+0x2e>
  }

  hs->retries = 0;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800af4c:	6979      	ldr	r1, [r7, #20]
 800af4e:	68b8      	ldr	r0, [r7, #8]
 800af50:	f7ff fd25 	bl	800a99e <http_send>

  return ERR_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3718      	adds	r7, #24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d107      	bne.n	800af82 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800af72:	2100      	movs	r1, #0
 800af74:	6838      	ldr	r0, [r7, #0]
 800af76:	f7ff fc91 	bl	800a89c <http_close_conn>
 800af7a:	4603      	mov	r3, r0
 800af7c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800af7e:	2300      	movs	r3, #0
 800af80:	e021      	b.n	800afc6 <http_poll+0x68>
  } else {
    hs->retries++;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af88:	3301      	adds	r3, #1
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af98:	2b04      	cmp	r3, #4
 800af9a:	d105      	bne.n	800afa8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800af9c:	68f9      	ldr	r1, [r7, #12]
 800af9e:	6838      	ldr	r0, [r7, #0]
 800afa0:	f7ff fc7c 	bl	800a89c <http_close_conn>
      return ERR_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	e00e      	b.n	800afc6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d009      	beq.n	800afc4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800afb0:	68f9      	ldr	r1, [r7, #12]
 800afb2:	6838      	ldr	r0, [r7, #0]
 800afb4:	f7ff fcf3 	bl	800a99e <http_send>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d002      	beq.n	800afc4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800afbe:	6838      	ldr	r0, [r7, #0]
 800afc0:	f007 f888 	bl	80120d4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
	...

0800afd0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800afe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d105      	bne.n	800aff6 <http_recv+0x26>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <http_recv+0x26>
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d111      	bne.n	800b01a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d008      	beq.n	800b00e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	891b      	ldrh	r3, [r3, #8]
 800b000:	4619      	mov	r1, r3
 800b002:	68b8      	ldr	r0, [r7, #8]
 800b004:	f002 fc56 	bl	800d8b4 <tcp_recved>
      pbuf_free(p);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f001 fced 	bl	800c9e8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b00e:	6979      	ldr	r1, [r7, #20]
 800b010:	68b8      	ldr	r0, [r7, #8]
 800b012:	f7ff fc43 	bl	800a89c <http_close_conn>
    return ERR_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	e055      	b.n	800b0c6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	891b      	ldrh	r3, [r3, #8]
 800b01e:	4619      	mov	r1, r3
 800b020:	68b8      	ldr	r0, [r7, #8]
 800b022:	f002 fc47 	bl	800d8b4 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d147      	bne.n	800b0be <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	6979      	ldr	r1, [r7, #20]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fd30 	bl	800aa98 <http_parse_request>
 800b038:	4603      	mov	r3, r0
 800b03a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b03c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d015      	beq.n	800b070 <http_recv+0xa0>
 800b044:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b048:	f113 0f05 	cmn.w	r3, #5
 800b04c:	d010      	beq.n	800b070 <http_recv+0xa0>
 800b04e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b052:	f113 0f10 	cmn.w	r3, #16
 800b056:	d00b      	beq.n	800b070 <http_recv+0xa0>
 800b058:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b05c:	f113 0f08 	cmn.w	r3, #8
 800b060:	d006      	beq.n	800b070 <http_recv+0xa0>
 800b062:	4b1b      	ldr	r3, [pc, #108]	; (800b0d0 <http_recv+0x100>)
 800b064:	f640 2205 	movw	r2, #2565	; 0xa05
 800b068:	491a      	ldr	r1, [pc, #104]	; (800b0d4 <http_recv+0x104>)
 800b06a:	481b      	ldr	r0, [pc, #108]	; (800b0d8 <http_recv+0x108>)
 800b06c:	f00a ff02 	bl	8015e74 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b070:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b074:	f113 0f05 	cmn.w	r3, #5
 800b078:	d00b      	beq.n	800b092 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d007      	beq.n	800b092 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	4618      	mov	r0, r3
 800b088:	f001 fcae 	bl	800c9e8 <pbuf_free>
          hs->req = NULL;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	2200      	movs	r2, #0
 800b090:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f001 fca8 	bl	800c9e8 <pbuf_free>
      if (parsed == ERR_OK) {
 800b098:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d104      	bne.n	800b0aa <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b0a0:	6979      	ldr	r1, [r7, #20]
 800b0a2:	68b8      	ldr	r0, [r7, #8]
 800b0a4:	f7ff fc7b 	bl	800a99e <http_send>
 800b0a8:	e00c      	b.n	800b0c4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b0aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b0ae:	f113 0f10 	cmn.w	r3, #16
 800b0b2:	d107      	bne.n	800b0c4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b0b4:	6979      	ldr	r1, [r7, #20]
 800b0b6:	68b8      	ldr	r0, [r7, #8]
 800b0b8:	f7ff fbf0 	bl	800a89c <http_close_conn>
 800b0bc:	e002      	b.n	800b0c4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f001 fc92 	bl	800c9e8 <pbuf_free>
    }
  }
  return ERR_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	08016ef8 	.word	0x08016ef8
 800b0d4:	08017054 	.word	0x08017054
 800b0d8:	08016f40 	.word	0x08016f40

0800b0dc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b0ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d102      	bne.n	800b0f8 <http_accept+0x1c>
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d102      	bne.n	800b0fe <http_accept+0x22>
    return ERR_VAL;
 800b0f8:	f06f 0305 	mvn.w	r3, #5
 800b0fc:	e025      	b.n	800b14a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b0fe:	2101      	movs	r1, #1
 800b100:	68b8      	ldr	r0, [r7, #8]
 800b102:	f003 f8b7 	bl	800e274 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b106:	f7ff fadb 	bl	800a6c0 <http_state_alloc>
 800b10a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d102      	bne.n	800b118 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b116:	e018      	b.n	800b14a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b11e:	6979      	ldr	r1, [r7, #20]
 800b120:	68b8      	ldr	r0, [r7, #8]
 800b122:	f003 faaf 	bl	800e684 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b126:	490b      	ldr	r1, [pc, #44]	; (800b154 <http_accept+0x78>)
 800b128:	68b8      	ldr	r0, [r7, #8]
 800b12a:	f003 fabd 	bl	800e6a8 <tcp_recv>
  altcp_err(pcb, http_err);
 800b12e:	490a      	ldr	r1, [pc, #40]	; (800b158 <http_accept+0x7c>)
 800b130:	68b8      	ldr	r0, [r7, #8]
 800b132:	f003 fafd 	bl	800e730 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b136:	2204      	movs	r2, #4
 800b138:	4908      	ldr	r1, [pc, #32]	; (800b15c <http_accept+0x80>)
 800b13a:	68b8      	ldr	r0, [r7, #8]
 800b13c:	f003 fb32 	bl	800e7a4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b140:	4907      	ldr	r1, [pc, #28]	; (800b160 <http_accept+0x84>)
 800b142:	68b8      	ldr	r0, [r7, #8]
 800b144:	f003 fad2 	bl	800e6ec <tcp_sent>

  return ERR_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	0800afd1 	.word	0x0800afd1
 800b158:	0800af05 	.word	0x0800af05
 800b15c:	0800af5f 	.word	0x0800af5f
 800b160:	0800af29 	.word	0x0800af29

0800b164 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d029      	beq.n	800b1ca <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b176:	2101      	movs	r1, #1
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f003 f87b 	bl	800e274 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b17e:	887b      	ldrh	r3, [r7, #2]
 800b180:	461a      	mov	r2, r3
 800b182:	4914      	ldr	r1, [pc, #80]	; (800b1d4 <httpd_init_pcb+0x70>)
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f002 f9c7 	bl	800d518 <tcp_bind>
 800b18a:	4603      	mov	r3, r0
 800b18c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b18e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d006      	beq.n	800b1a4 <httpd_init_pcb+0x40>
 800b196:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <httpd_init_pcb+0x74>)
 800b198:	f640 2257 	movw	r2, #2647	; 0xa57
 800b19c:	490f      	ldr	r1, [pc, #60]	; (800b1dc <httpd_init_pcb+0x78>)
 800b19e:	4810      	ldr	r0, [pc, #64]	; (800b1e0 <httpd_init_pcb+0x7c>)
 800b1a0:	f00a fe68 	bl	8015e74 <iprintf>
    pcb = altcp_listen(pcb);
 800b1a4:	21ff      	movs	r1, #255	; 0xff
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f002 fa6e 	bl	800d688 <tcp_listen_with_backlog>
 800b1ac:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d106      	bne.n	800b1c2 <httpd_init_pcb+0x5e>
 800b1b4:	4b08      	ldr	r3, [pc, #32]	; (800b1d8 <httpd_init_pcb+0x74>)
 800b1b6:	f640 2259 	movw	r2, #2649	; 0xa59
 800b1ba:	490a      	ldr	r1, [pc, #40]	; (800b1e4 <httpd_init_pcb+0x80>)
 800b1bc:	4808      	ldr	r0, [pc, #32]	; (800b1e0 <httpd_init_pcb+0x7c>)
 800b1be:	f00a fe59 	bl	8015e74 <iprintf>
    altcp_accept(pcb, http_accept);
 800b1c2:	4909      	ldr	r1, [pc, #36]	; (800b1e8 <httpd_init_pcb+0x84>)
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f003 fad5 	bl	800e774 <tcp_accept>
  }
}
 800b1ca:	bf00      	nop
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0802a6f0 	.word	0x0802a6f0
 800b1d8:	08016ef8 	.word	0x08016ef8
 800b1dc:	08017080 	.word	0x08017080
 800b1e0:	08016f40 	.word	0x08016f40
 800b1e4:	0801709c 	.word	0x0801709c
 800b1e8:	0800b0dd 	.word	0x0800b0dd

0800b1ec <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b1f2:	202e      	movs	r0, #46	; 0x2e
 800b1f4:	f003 fa38 	bl	800e668 <tcp_new_ip_type>
 800b1f8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d106      	bne.n	800b20e <httpd_init+0x22>
 800b200:	4b07      	ldr	r3, [pc, #28]	; (800b220 <httpd_init+0x34>)
 800b202:	f640 2272 	movw	r2, #2674	; 0xa72
 800b206:	4907      	ldr	r1, [pc, #28]	; (800b224 <httpd_init+0x38>)
 800b208:	4807      	ldr	r0, [pc, #28]	; (800b228 <httpd_init+0x3c>)
 800b20a:	f00a fe33 	bl	8015e74 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b20e:	2150      	movs	r1, #80	; 0x50
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f7ff ffa7 	bl	800b164 <httpd_init_pcb>
}
 800b216:	bf00      	nop
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	08016ef8 	.word	0x08016ef8
 800b224:	080170bc 	.word	0x080170bc
 800b228:	08016f40 	.word	0x08016f40

0800b22c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b236:	88fb      	ldrh	r3, [r7, #6]
 800b238:	021b      	lsls	r3, r3, #8
 800b23a:	b21a      	sxth	r2, r3
 800b23c:	88fb      	ldrh	r3, [r7, #6]
 800b23e:	0a1b      	lsrs	r3, r3, #8
 800b240:	b29b      	uxth	r3, r3
 800b242:	b21b      	sxth	r3, r3
 800b244:	4313      	orrs	r3, r2
 800b246:	b21b      	sxth	r3, r3
 800b248:	b29b      	uxth	r3, r3
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b256:	b480      	push	{r7}
 800b258:	b083      	sub	sp, #12
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	061a      	lsls	r2, r3, #24
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	021b      	lsls	r3, r3, #8
 800b266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b26a:	431a      	orrs	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	0a1b      	lsrs	r3, r3, #8
 800b270:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b274:	431a      	orrs	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	0e1b      	lsrs	r3, r3, #24
 800b27a:	4313      	orrs	r3, r2
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b294:	68b8      	ldr	r0, [r7, #8]
 800b296:	f7f4 ffdd 	bl	8000254 <strlen>
 800b29a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	e022      	b.n	800b2ec <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	617b      	str	r3, [r7, #20]
 800b2aa:	e012      	b.n	800b2d2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	781a      	ldrb	r2, [r3, #0]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d109      	bne.n	800b2cc <lwip_strnstr+0x44>
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	6978      	ldr	r0, [r7, #20]
 800b2be:	f00a fe32 	bl	8015f26 <strncmp>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	e00f      	b.n	800b2ec <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d007      	beq.n	800b2ea <lwip_strnstr+0x62>
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	441a      	add	r2, r3
 800b2e0:	68f9      	ldr	r1, [r7, #12]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	440b      	add	r3, r1
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d9e0      	bls.n	800b2ac <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b2fe:	f00a fce9 	bl	8015cd4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b302:	f000 f8d5 	bl	800b4b0 <mem_init>
  memp_init();
 800b306:	f000 fc31 	bl	800bb6c <memp_init>
  pbuf_init();
  netif_init();
 800b30a:	f000 fcf7 	bl	800bcfc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b30e:	f007 ffe1 	bl	80132d4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b312:	f001 fe03 	bl	800cf1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b316:	f007 ff25 	bl	8013164 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b32e:	4b05      	ldr	r3, [pc, #20]	; (800b344 <ptr_to_mem+0x20>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	88fb      	ldrh	r3, [r7, #6]
 800b334:	4413      	add	r3, r2
}
 800b336:	4618      	mov	r0, r3
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	2000449c 	.word	0x2000449c

0800b348 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a05      	ldr	r2, [pc, #20]	; (800b368 <mem_to_ptr+0x20>)
 800b354:	6812      	ldr	r2, [r2, #0]
 800b356:	1a9b      	subs	r3, r3, r2
 800b358:	b29b      	uxth	r3, r3
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	2000449c 	.word	0x2000449c

0800b36c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b36c:	b590      	push	{r4, r7, lr}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b374:	4b45      	ldr	r3, [pc, #276]	; (800b48c <plug_holes+0x120>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d206      	bcs.n	800b38c <plug_holes+0x20>
 800b37e:	4b44      	ldr	r3, [pc, #272]	; (800b490 <plug_holes+0x124>)
 800b380:	f240 12df 	movw	r2, #479	; 0x1df
 800b384:	4943      	ldr	r1, [pc, #268]	; (800b494 <plug_holes+0x128>)
 800b386:	4844      	ldr	r0, [pc, #272]	; (800b498 <plug_holes+0x12c>)
 800b388:	f00a fd74 	bl	8015e74 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b38c:	4b43      	ldr	r3, [pc, #268]	; (800b49c <plug_holes+0x130>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	429a      	cmp	r2, r3
 800b394:	d306      	bcc.n	800b3a4 <plug_holes+0x38>
 800b396:	4b3e      	ldr	r3, [pc, #248]	; (800b490 <plug_holes+0x124>)
 800b398:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b39c:	4940      	ldr	r1, [pc, #256]	; (800b4a0 <plug_holes+0x134>)
 800b39e:	483e      	ldr	r0, [pc, #248]	; (800b498 <plug_holes+0x12c>)
 800b3a0:	f00a fd68 	bl	8015e74 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	791b      	ldrb	r3, [r3, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d006      	beq.n	800b3ba <plug_holes+0x4e>
 800b3ac:	4b38      	ldr	r3, [pc, #224]	; (800b490 <plug_holes+0x124>)
 800b3ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b3b2:	493c      	ldr	r1, [pc, #240]	; (800b4a4 <plug_holes+0x138>)
 800b3b4:	4838      	ldr	r0, [pc, #224]	; (800b498 <plug_holes+0x12c>)
 800b3b6:	f00a fd5d 	bl	8015e74 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3c2:	d906      	bls.n	800b3d2 <plug_holes+0x66>
 800b3c4:	4b32      	ldr	r3, [pc, #200]	; (800b490 <plug_holes+0x124>)
 800b3c6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b3ca:	4937      	ldr	r1, [pc, #220]	; (800b4a8 <plug_holes+0x13c>)
 800b3cc:	4832      	ldr	r0, [pc, #200]	; (800b498 <plug_holes+0x12c>)
 800b3ce:	f00a fd51 	bl	8015e74 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	881b      	ldrh	r3, [r3, #0]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff ffa4 	bl	800b324 <ptr_to_mem>
 800b3dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d024      	beq.n	800b430 <plug_holes+0xc4>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	791b      	ldrb	r3, [r3, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d120      	bne.n	800b430 <plug_holes+0xc4>
 800b3ee:	4b2b      	ldr	r3, [pc, #172]	; (800b49c <plug_holes+0x130>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d01b      	beq.n	800b430 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b3f8:	4b2c      	ldr	r3, [pc, #176]	; (800b4ac <plug_holes+0x140>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d102      	bne.n	800b408 <plug_holes+0x9c>
      lfree = mem;
 800b402:	4a2a      	ldr	r2, [pc, #168]	; (800b4ac <plug_holes+0x140>)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	881a      	ldrh	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	881b      	ldrh	r3, [r3, #0]
 800b414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b418:	d00a      	beq.n	800b430 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	4618      	mov	r0, r3
 800b420:	f7ff ff80 	bl	800b324 <ptr_to_mem>
 800b424:	4604      	mov	r4, r0
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7ff ff8e 	bl	800b348 <mem_to_ptr>
 800b42c:	4603      	mov	r3, r0
 800b42e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	885b      	ldrh	r3, [r3, #2]
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff ff75 	bl	800b324 <ptr_to_mem>
 800b43a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d01f      	beq.n	800b484 <plug_holes+0x118>
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	791b      	ldrb	r3, [r3, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d11b      	bne.n	800b484 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b44c:	4b17      	ldr	r3, [pc, #92]	; (800b4ac <plug_holes+0x140>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d102      	bne.n	800b45c <plug_holes+0xf0>
      lfree = pmem;
 800b456:	4a15      	ldr	r2, [pc, #84]	; (800b4ac <plug_holes+0x140>)
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	881a      	ldrh	r2, [r3, #0]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b46c:	d00a      	beq.n	800b484 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff ff56 	bl	800b324 <ptr_to_mem>
 800b478:	4604      	mov	r4, r0
 800b47a:	68b8      	ldr	r0, [r7, #8]
 800b47c:	f7ff ff64 	bl	800b348 <mem_to_ptr>
 800b480:	4603      	mov	r3, r0
 800b482:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b484:	bf00      	nop
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd90      	pop	{r4, r7, pc}
 800b48c:	2000449c 	.word	0x2000449c
 800b490:	080170d8 	.word	0x080170d8
 800b494:	08017108 	.word	0x08017108
 800b498:	08017120 	.word	0x08017120
 800b49c:	200044a0 	.word	0x200044a0
 800b4a0:	08017148 	.word	0x08017148
 800b4a4:	08017164 	.word	0x08017164
 800b4a8:	08017180 	.word	0x08017180
 800b4ac:	200044a8 	.word	0x200044a8

0800b4b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b4b6:	4b1f      	ldr	r3, [pc, #124]	; (800b534 <mem_init+0x84>)
 800b4b8:	3303      	adds	r3, #3
 800b4ba:	f023 0303 	bic.w	r3, r3, #3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	4b1d      	ldr	r3, [pc, #116]	; (800b538 <mem_init+0x88>)
 800b4c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b4c4:	4b1c      	ldr	r3, [pc, #112]	; (800b538 <mem_init+0x88>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b4d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b4de:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b4e2:	f7ff ff1f 	bl	800b324 <ptr_to_mem>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	4b14      	ldr	r3, [pc, #80]	; (800b53c <mem_init+0x8c>)
 800b4ea:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800b4ec:	4b13      	ldr	r3, [pc, #76]	; (800b53c <mem_init+0x8c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b4f4:	4b11      	ldr	r3, [pc, #68]	; (800b53c <mem_init+0x8c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b4fc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <mem_init+0x8c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b506:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b508:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <mem_init+0x88>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a0c      	ldr	r2, [pc, #48]	; (800b540 <mem_init+0x90>)
 800b50e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b510:	480c      	ldr	r0, [pc, #48]	; (800b544 <mem_init+0x94>)
 800b512:	f00a fbed 	bl	8015cf0 <sys_mutex_new>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d006      	beq.n	800b52a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b51c:	4b0a      	ldr	r3, [pc, #40]	; (800b548 <mem_init+0x98>)
 800b51e:	f240 221f 	movw	r2, #543	; 0x21f
 800b522:	490a      	ldr	r1, [pc, #40]	; (800b54c <mem_init+0x9c>)
 800b524:	480a      	ldr	r0, [pc, #40]	; (800b550 <mem_init+0xa0>)
 800b526:	f00a fca5 	bl	8015e74 <iprintf>
  }
}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	20007e04 	.word	0x20007e04
 800b538:	2000449c 	.word	0x2000449c
 800b53c:	200044a0 	.word	0x200044a0
 800b540:	200044a8 	.word	0x200044a8
 800b544:	200044a4 	.word	0x200044a4
 800b548:	080170d8 	.word	0x080170d8
 800b54c:	080171ac 	.word	0x080171ac
 800b550:	08017120 	.word	0x08017120

0800b554 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7ff fef3 	bl	800b348 <mem_to_ptr>
 800b562:	4603      	mov	r3, r0
 800b564:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff feda 	bl	800b324 <ptr_to_mem>
 800b570:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff fed4 	bl	800b324 <ptr_to_mem>
 800b57c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b586:	d818      	bhi.n	800b5ba <mem_link_valid+0x66>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	885b      	ldrh	r3, [r3, #2]
 800b58c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b590:	d813      	bhi.n	800b5ba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b596:	8afa      	ldrh	r2, [r7, #22]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d004      	beq.n	800b5a6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	8afa      	ldrh	r2, [r7, #22]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d109      	bne.n	800b5ba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b5a6:	4b08      	ldr	r3, [pc, #32]	; (800b5c8 <mem_link_valid+0x74>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d006      	beq.n	800b5be <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	885b      	ldrh	r3, [r3, #2]
 800b5b4:	8afa      	ldrh	r2, [r7, #22]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d001      	beq.n	800b5be <mem_link_valid+0x6a>
    return 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	e000      	b.n	800b5c0 <mem_link_valid+0x6c>
  }
  return 1;
 800b5be:	2301      	movs	r3, #1
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3718      	adds	r7, #24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	200044a0 	.word	0x200044a0

0800b5cc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d070      	beq.n	800b6bc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f003 0303 	and.w	r3, r3, #3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00d      	beq.n	800b600 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b5e4:	4b37      	ldr	r3, [pc, #220]	; (800b6c4 <mem_free+0xf8>)
 800b5e6:	f240 2273 	movw	r2, #627	; 0x273
 800b5ea:	4937      	ldr	r1, [pc, #220]	; (800b6c8 <mem_free+0xfc>)
 800b5ec:	4837      	ldr	r0, [pc, #220]	; (800b6cc <mem_free+0x100>)
 800b5ee:	f00a fc41 	bl	8015e74 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b5f2:	f00a fbdb 	bl	8015dac <sys_arch_protect>
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f00a fbe5 	bl	8015dc8 <sys_arch_unprotect>
    return;
 800b5fe:	e05e      	b.n	800b6be <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3b08      	subs	r3, #8
 800b604:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b606:	4b32      	ldr	r3, [pc, #200]	; (800b6d0 <mem_free+0x104>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	69fa      	ldr	r2, [r7, #28]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d306      	bcc.n	800b61e <mem_free+0x52>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f103 020c 	add.w	r2, r3, #12
 800b616:	4b2f      	ldr	r3, [pc, #188]	; (800b6d4 <mem_free+0x108>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d90d      	bls.n	800b63a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b61e:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <mem_free+0xf8>)
 800b620:	f240 227f 	movw	r2, #639	; 0x27f
 800b624:	492c      	ldr	r1, [pc, #176]	; (800b6d8 <mem_free+0x10c>)
 800b626:	4829      	ldr	r0, [pc, #164]	; (800b6cc <mem_free+0x100>)
 800b628:	f00a fc24 	bl	8015e74 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b62c:	f00a fbbe 	bl	8015dac <sys_arch_protect>
 800b630:	6138      	str	r0, [r7, #16]
 800b632:	6938      	ldr	r0, [r7, #16]
 800b634:	f00a fbc8 	bl	8015dc8 <sys_arch_unprotect>
    return;
 800b638:	e041      	b.n	800b6be <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b63a:	4828      	ldr	r0, [pc, #160]	; (800b6dc <mem_free+0x110>)
 800b63c:	f00a fb74 	bl	8015d28 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	791b      	ldrb	r3, [r3, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d110      	bne.n	800b66a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b648:	4b1e      	ldr	r3, [pc, #120]	; (800b6c4 <mem_free+0xf8>)
 800b64a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b64e:	4924      	ldr	r1, [pc, #144]	; (800b6e0 <mem_free+0x114>)
 800b650:	481e      	ldr	r0, [pc, #120]	; (800b6cc <mem_free+0x100>)
 800b652:	f00a fc0f 	bl	8015e74 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b656:	4821      	ldr	r0, [pc, #132]	; (800b6dc <mem_free+0x110>)
 800b658:	f00a fb75 	bl	8015d46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b65c:	f00a fba6 	bl	8015dac <sys_arch_protect>
 800b660:	6178      	str	r0, [r7, #20]
 800b662:	6978      	ldr	r0, [r7, #20]
 800b664:	f00a fbb0 	bl	8015dc8 <sys_arch_unprotect>
    return;
 800b668:	e029      	b.n	800b6be <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b66a:	69f8      	ldr	r0, [r7, #28]
 800b66c:	f7ff ff72 	bl	800b554 <mem_link_valid>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d110      	bne.n	800b698 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b676:	4b13      	ldr	r3, [pc, #76]	; (800b6c4 <mem_free+0xf8>)
 800b678:	f240 2295 	movw	r2, #661	; 0x295
 800b67c:	4919      	ldr	r1, [pc, #100]	; (800b6e4 <mem_free+0x118>)
 800b67e:	4813      	ldr	r0, [pc, #76]	; (800b6cc <mem_free+0x100>)
 800b680:	f00a fbf8 	bl	8015e74 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b684:	4815      	ldr	r0, [pc, #84]	; (800b6dc <mem_free+0x110>)
 800b686:	f00a fb5e 	bl	8015d46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b68a:	f00a fb8f 	bl	8015dac <sys_arch_protect>
 800b68e:	61b8      	str	r0, [r7, #24]
 800b690:	69b8      	ldr	r0, [r7, #24]
 800b692:	f00a fb99 	bl	8015dc8 <sys_arch_unprotect>
    return;
 800b696:	e012      	b.n	800b6be <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	2200      	movs	r2, #0
 800b69c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b69e:	4b12      	ldr	r3, [pc, #72]	; (800b6e8 <mem_free+0x11c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	69fa      	ldr	r2, [r7, #28]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d202      	bcs.n	800b6ae <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b6a8:	4a0f      	ldr	r2, [pc, #60]	; (800b6e8 <mem_free+0x11c>)
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b6ae:	69f8      	ldr	r0, [r7, #28]
 800b6b0:	f7ff fe5c 	bl	800b36c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b6b4:	4809      	ldr	r0, [pc, #36]	; (800b6dc <mem_free+0x110>)
 800b6b6:	f00a fb46 	bl	8015d46 <sys_mutex_unlock>
 800b6ba:	e000      	b.n	800b6be <mem_free+0xf2>
    return;
 800b6bc:	bf00      	nop
}
 800b6be:	3720      	adds	r7, #32
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	080170d8 	.word	0x080170d8
 800b6c8:	080171c8 	.word	0x080171c8
 800b6cc:	08017120 	.word	0x08017120
 800b6d0:	2000449c 	.word	0x2000449c
 800b6d4:	200044a0 	.word	0x200044a0
 800b6d8:	080171ec 	.word	0x080171ec
 800b6dc:	200044a4 	.word	0x200044a4
 800b6e0:	08017208 	.word	0x08017208
 800b6e4:	08017230 	.word	0x08017230
 800b6e8:	200044a8 	.word	0x200044a8

0800b6ec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b6f8:	887b      	ldrh	r3, [r7, #2]
 800b6fa:	3303      	adds	r3, #3
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	f023 0303 	bic.w	r3, r3, #3
 800b702:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b704:	8bfb      	ldrh	r3, [r7, #30]
 800b706:	2b0b      	cmp	r3, #11
 800b708:	d801      	bhi.n	800b70e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b70a:	230c      	movs	r3, #12
 800b70c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b70e:	8bfb      	ldrh	r3, [r7, #30]
 800b710:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b714:	d803      	bhi.n	800b71e <mem_trim+0x32>
 800b716:	8bfa      	ldrh	r2, [r7, #30]
 800b718:	887b      	ldrh	r3, [r7, #2]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d201      	bcs.n	800b722 <mem_trim+0x36>
    return NULL;
 800b71e:	2300      	movs	r3, #0
 800b720:	e0d8      	b.n	800b8d4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b722:	4b6e      	ldr	r3, [pc, #440]	; (800b8dc <mem_trim+0x1f0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d304      	bcc.n	800b736 <mem_trim+0x4a>
 800b72c:	4b6c      	ldr	r3, [pc, #432]	; (800b8e0 <mem_trim+0x1f4>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d306      	bcc.n	800b744 <mem_trim+0x58>
 800b736:	4b6b      	ldr	r3, [pc, #428]	; (800b8e4 <mem_trim+0x1f8>)
 800b738:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b73c:	496a      	ldr	r1, [pc, #424]	; (800b8e8 <mem_trim+0x1fc>)
 800b73e:	486b      	ldr	r0, [pc, #428]	; (800b8ec <mem_trim+0x200>)
 800b740:	f00a fb98 	bl	8015e74 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b744:	4b65      	ldr	r3, [pc, #404]	; (800b8dc <mem_trim+0x1f0>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d304      	bcc.n	800b758 <mem_trim+0x6c>
 800b74e:	4b64      	ldr	r3, [pc, #400]	; (800b8e0 <mem_trim+0x1f4>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	429a      	cmp	r2, r3
 800b756:	d307      	bcc.n	800b768 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b758:	f00a fb28 	bl	8015dac <sys_arch_protect>
 800b75c:	60b8      	str	r0, [r7, #8]
 800b75e:	68b8      	ldr	r0, [r7, #8]
 800b760:	f00a fb32 	bl	8015dc8 <sys_arch_unprotect>
    return rmem;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	e0b5      	b.n	800b8d4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3b08      	subs	r3, #8
 800b76c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b76e:	69b8      	ldr	r0, [r7, #24]
 800b770:	f7ff fdea 	bl	800b348 <mem_to_ptr>
 800b774:	4603      	mov	r3, r0
 800b776:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	881a      	ldrh	r2, [r3, #0]
 800b77c:	8afb      	ldrh	r3, [r7, #22]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	b29b      	uxth	r3, r3
 800b782:	3b08      	subs	r3, #8
 800b784:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b786:	8bfa      	ldrh	r2, [r7, #30]
 800b788:	8abb      	ldrh	r3, [r7, #20]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d906      	bls.n	800b79c <mem_trim+0xb0>
 800b78e:	4b55      	ldr	r3, [pc, #340]	; (800b8e4 <mem_trim+0x1f8>)
 800b790:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b794:	4956      	ldr	r1, [pc, #344]	; (800b8f0 <mem_trim+0x204>)
 800b796:	4855      	ldr	r0, [pc, #340]	; (800b8ec <mem_trim+0x200>)
 800b798:	f00a fb6c 	bl	8015e74 <iprintf>
  if (newsize > size) {
 800b79c:	8bfa      	ldrh	r2, [r7, #30]
 800b79e:	8abb      	ldrh	r3, [r7, #20]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d901      	bls.n	800b7a8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	e095      	b.n	800b8d4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b7a8:	8bfa      	ldrh	r2, [r7, #30]
 800b7aa:	8abb      	ldrh	r3, [r7, #20]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d101      	bne.n	800b7b4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	e08f      	b.n	800b8d4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b7b4:	484f      	ldr	r0, [pc, #316]	; (800b8f4 <mem_trim+0x208>)
 800b7b6:	f00a fab7 	bl	8015d28 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff fdb0 	bl	800b324 <ptr_to_mem>
 800b7c4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	791b      	ldrb	r3, [r3, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d13f      	bne.n	800b84e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	881b      	ldrh	r3, [r3, #0]
 800b7d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7d6:	d106      	bne.n	800b7e6 <mem_trim+0xfa>
 800b7d8:	4b42      	ldr	r3, [pc, #264]	; (800b8e4 <mem_trim+0x1f8>)
 800b7da:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b7de:	4946      	ldr	r1, [pc, #280]	; (800b8f8 <mem_trim+0x20c>)
 800b7e0:	4842      	ldr	r0, [pc, #264]	; (800b8ec <mem_trim+0x200>)
 800b7e2:	f00a fb47 	bl	8015e74 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	881b      	ldrh	r3, [r3, #0]
 800b7ea:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b7ec:	8afa      	ldrh	r2, [r7, #22]
 800b7ee:	8bfb      	ldrh	r3, [r7, #30]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b7f8:	4b40      	ldr	r3, [pc, #256]	; (800b8fc <mem_trim+0x210>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d106      	bne.n	800b810 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b802:	89fb      	ldrh	r3, [r7, #14]
 800b804:	4618      	mov	r0, r3
 800b806:	f7ff fd8d 	bl	800b324 <ptr_to_mem>
 800b80a:	4602      	mov	r2, r0
 800b80c:	4b3b      	ldr	r3, [pc, #236]	; (800b8fc <mem_trim+0x210>)
 800b80e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b810:	89fb      	ldrh	r3, [r7, #14]
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff fd86 	bl	800b324 <ptr_to_mem>
 800b818:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2200      	movs	r2, #0
 800b81e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	89ba      	ldrh	r2, [r7, #12]
 800b824:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	8afa      	ldrh	r2, [r7, #22]
 800b82a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	89fa      	ldrh	r2, [r7, #14]
 800b830:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b83a:	d047      	beq.n	800b8cc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff fd6f 	bl	800b324 <ptr_to_mem>
 800b846:	4602      	mov	r2, r0
 800b848:	89fb      	ldrh	r3, [r7, #14]
 800b84a:	8053      	strh	r3, [r2, #2]
 800b84c:	e03e      	b.n	800b8cc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b84e:	8bfb      	ldrh	r3, [r7, #30]
 800b850:	f103 0214 	add.w	r2, r3, #20
 800b854:	8abb      	ldrh	r3, [r7, #20]
 800b856:	429a      	cmp	r2, r3
 800b858:	d838      	bhi.n	800b8cc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b85a:	8afa      	ldrh	r2, [r7, #22]
 800b85c:	8bfb      	ldrh	r3, [r7, #30]
 800b85e:	4413      	add	r3, r2
 800b860:	b29b      	uxth	r3, r3
 800b862:	3308      	adds	r3, #8
 800b864:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b86e:	d106      	bne.n	800b87e <mem_trim+0x192>
 800b870:	4b1c      	ldr	r3, [pc, #112]	; (800b8e4 <mem_trim+0x1f8>)
 800b872:	f240 3216 	movw	r2, #790	; 0x316
 800b876:	4920      	ldr	r1, [pc, #128]	; (800b8f8 <mem_trim+0x20c>)
 800b878:	481c      	ldr	r0, [pc, #112]	; (800b8ec <mem_trim+0x200>)
 800b87a:	f00a fafb 	bl	8015e74 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b87e:	89fb      	ldrh	r3, [r7, #14]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff fd4f 	bl	800b324 <ptr_to_mem>
 800b886:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b888:	4b1c      	ldr	r3, [pc, #112]	; (800b8fc <mem_trim+0x210>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d202      	bcs.n	800b898 <mem_trim+0x1ac>
      lfree = mem2;
 800b892:	4a1a      	ldr	r2, [pc, #104]	; (800b8fc <mem_trim+0x210>)
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	2200      	movs	r2, #0
 800b89c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	881a      	ldrh	r2, [r3, #0]
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	8afa      	ldrh	r2, [r7, #22]
 800b8aa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	89fa      	ldrh	r2, [r7, #14]
 800b8b0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	881b      	ldrh	r3, [r3, #0]
 800b8b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8ba:	d007      	beq.n	800b8cc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	881b      	ldrh	r3, [r3, #0]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff fd2f 	bl	800b324 <ptr_to_mem>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	89fb      	ldrh	r3, [r7, #14]
 800b8ca:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b8cc:	4809      	ldr	r0, [pc, #36]	; (800b8f4 <mem_trim+0x208>)
 800b8ce:	f00a fa3a 	bl	8015d46 <sys_mutex_unlock>
  return rmem;
 800b8d2:	687b      	ldr	r3, [r7, #4]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	2000449c 	.word	0x2000449c
 800b8e0:	200044a0 	.word	0x200044a0
 800b8e4:	080170d8 	.word	0x080170d8
 800b8e8:	08017264 	.word	0x08017264
 800b8ec:	08017120 	.word	0x08017120
 800b8f0:	0801727c 	.word	0x0801727c
 800b8f4:	200044a4 	.word	0x200044a4
 800b8f8:	0801729c 	.word	0x0801729c
 800b8fc:	200044a8 	.word	0x200044a8

0800b900 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	4603      	mov	r3, r0
 800b908:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b90a:	88fb      	ldrh	r3, [r7, #6]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <mem_malloc+0x14>
    return NULL;
 800b910:	2300      	movs	r3, #0
 800b912:	e0e2      	b.n	800bada <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b914:	88fb      	ldrh	r3, [r7, #6]
 800b916:	3303      	adds	r3, #3
 800b918:	b29b      	uxth	r3, r3
 800b91a:	f023 0303 	bic.w	r3, r3, #3
 800b91e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b920:	8bbb      	ldrh	r3, [r7, #28]
 800b922:	2b0b      	cmp	r3, #11
 800b924:	d801      	bhi.n	800b92a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b926:	230c      	movs	r3, #12
 800b928:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b92a:	8bbb      	ldrh	r3, [r7, #28]
 800b92c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b930:	d803      	bhi.n	800b93a <mem_malloc+0x3a>
 800b932:	8bba      	ldrh	r2, [r7, #28]
 800b934:	88fb      	ldrh	r3, [r7, #6]
 800b936:	429a      	cmp	r2, r3
 800b938:	d201      	bcs.n	800b93e <mem_malloc+0x3e>
    return NULL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	e0cd      	b.n	800bada <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b93e:	4869      	ldr	r0, [pc, #420]	; (800bae4 <mem_malloc+0x1e4>)
 800b940:	f00a f9f2 	bl	8015d28 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b944:	4b68      	ldr	r3, [pc, #416]	; (800bae8 <mem_malloc+0x1e8>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff fcfd 	bl	800b348 <mem_to_ptr>
 800b94e:	4603      	mov	r3, r0
 800b950:	83fb      	strh	r3, [r7, #30]
 800b952:	e0b7      	b.n	800bac4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b954:	8bfb      	ldrh	r3, [r7, #30]
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff fce4 	bl	800b324 <ptr_to_mem>
 800b95c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	791b      	ldrb	r3, [r3, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	f040 80a7 	bne.w	800bab6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	461a      	mov	r2, r3
 800b96e:	8bfb      	ldrh	r3, [r7, #30]
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	f1a3 0208 	sub.w	r2, r3, #8
 800b976:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b978:	429a      	cmp	r2, r3
 800b97a:	f0c0 809c 	bcc.w	800bab6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	8bfb      	ldrh	r3, [r7, #30]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	f1a3 0208 	sub.w	r2, r3, #8
 800b98c:	8bbb      	ldrh	r3, [r7, #28]
 800b98e:	3314      	adds	r3, #20
 800b990:	429a      	cmp	r2, r3
 800b992:	d333      	bcc.n	800b9fc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b994:	8bfa      	ldrh	r2, [r7, #30]
 800b996:	8bbb      	ldrh	r3, [r7, #28]
 800b998:	4413      	add	r3, r2
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	3308      	adds	r3, #8
 800b99e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b9a0:	8a7b      	ldrh	r3, [r7, #18]
 800b9a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9a6:	d106      	bne.n	800b9b6 <mem_malloc+0xb6>
 800b9a8:	4b50      	ldr	r3, [pc, #320]	; (800baec <mem_malloc+0x1ec>)
 800b9aa:	f240 3287 	movw	r2, #903	; 0x387
 800b9ae:	4950      	ldr	r1, [pc, #320]	; (800baf0 <mem_malloc+0x1f0>)
 800b9b0:	4850      	ldr	r0, [pc, #320]	; (800baf4 <mem_malloc+0x1f4>)
 800b9b2:	f00a fa5f 	bl	8015e74 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b9b6:	8a7b      	ldrh	r3, [r7, #18]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7ff fcb3 	bl	800b324 <ptr_to_mem>
 800b9be:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	881a      	ldrh	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8bfa      	ldrh	r2, [r7, #30]
 800b9d2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	8a7a      	ldrh	r2, [r7, #18]
 800b9d8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9e8:	d00b      	beq.n	800ba02 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff fc98 	bl	800b324 <ptr_to_mem>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	8a7b      	ldrh	r3, [r7, #18]
 800b9f8:	8053      	strh	r3, [r2, #2]
 800b9fa:	e002      	b.n	800ba02 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ba02:	4b39      	ldr	r3, [pc, #228]	; (800bae8 <mem_malloc+0x1e8>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d127      	bne.n	800ba5c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ba0c:	4b36      	ldr	r3, [pc, #216]	; (800bae8 <mem_malloc+0x1e8>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ba12:	e005      	b.n	800ba20 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	881b      	ldrh	r3, [r3, #0]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7ff fc83 	bl	800b324 <ptr_to_mem>
 800ba1e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	791b      	ldrb	r3, [r3, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d004      	beq.n	800ba32 <mem_malloc+0x132>
 800ba28:	4b33      	ldr	r3, [pc, #204]	; (800baf8 <mem_malloc+0x1f8>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	69ba      	ldr	r2, [r7, #24]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d1f0      	bne.n	800ba14 <mem_malloc+0x114>
          }
          lfree = cur;
 800ba32:	4a2d      	ldr	r2, [pc, #180]	; (800bae8 <mem_malloc+0x1e8>)
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ba38:	4b2b      	ldr	r3, [pc, #172]	; (800bae8 <mem_malloc+0x1e8>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	4b2e      	ldr	r3, [pc, #184]	; (800baf8 <mem_malloc+0x1f8>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d00b      	beq.n	800ba5c <mem_malloc+0x15c>
 800ba44:	4b28      	ldr	r3, [pc, #160]	; (800bae8 <mem_malloc+0x1e8>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	791b      	ldrb	r3, [r3, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d006      	beq.n	800ba5c <mem_malloc+0x15c>
 800ba4e:	4b27      	ldr	r3, [pc, #156]	; (800baec <mem_malloc+0x1ec>)
 800ba50:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ba54:	4929      	ldr	r1, [pc, #164]	; (800bafc <mem_malloc+0x1fc>)
 800ba56:	4827      	ldr	r0, [pc, #156]	; (800baf4 <mem_malloc+0x1f4>)
 800ba58:	f00a fa0c 	bl	8015e74 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ba5c:	4821      	ldr	r0, [pc, #132]	; (800bae4 <mem_malloc+0x1e4>)
 800ba5e:	f00a f972 	bl	8015d46 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ba62:	8bba      	ldrh	r2, [r7, #28]
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	4413      	add	r3, r2
 800ba68:	3308      	adds	r3, #8
 800ba6a:	4a23      	ldr	r2, [pc, #140]	; (800baf8 <mem_malloc+0x1f8>)
 800ba6c:	6812      	ldr	r2, [r2, #0]
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d906      	bls.n	800ba80 <mem_malloc+0x180>
 800ba72:	4b1e      	ldr	r3, [pc, #120]	; (800baec <mem_malloc+0x1ec>)
 800ba74:	f240 32ba 	movw	r2, #954	; 0x3ba
 800ba78:	4921      	ldr	r1, [pc, #132]	; (800bb00 <mem_malloc+0x200>)
 800ba7a:	481e      	ldr	r0, [pc, #120]	; (800baf4 <mem_malloc+0x1f4>)
 800ba7c:	f00a f9fa 	bl	8015e74 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d006      	beq.n	800ba98 <mem_malloc+0x198>
 800ba8a:	4b18      	ldr	r3, [pc, #96]	; (800baec <mem_malloc+0x1ec>)
 800ba8c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ba90:	491c      	ldr	r1, [pc, #112]	; (800bb04 <mem_malloc+0x204>)
 800ba92:	4818      	ldr	r0, [pc, #96]	; (800baf4 <mem_malloc+0x1f4>)
 800ba94:	f00a f9ee 	bl	8015e74 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f003 0303 	and.w	r3, r3, #3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d006      	beq.n	800bab0 <mem_malloc+0x1b0>
 800baa2:	4b12      	ldr	r3, [pc, #72]	; (800baec <mem_malloc+0x1ec>)
 800baa4:	f240 32be 	movw	r2, #958	; 0x3be
 800baa8:	4917      	ldr	r1, [pc, #92]	; (800bb08 <mem_malloc+0x208>)
 800baaa:	4812      	ldr	r0, [pc, #72]	; (800baf4 <mem_malloc+0x1f4>)
 800baac:	f00a f9e2 	bl	8015e74 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	3308      	adds	r3, #8
 800bab4:	e011      	b.n	800bada <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bab6:	8bfb      	ldrh	r3, [r7, #30]
 800bab8:	4618      	mov	r0, r3
 800baba:	f7ff fc33 	bl	800b324 <ptr_to_mem>
 800babe:	4603      	mov	r3, r0
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bac4:	8bfa      	ldrh	r2, [r7, #30]
 800bac6:	8bbb      	ldrh	r3, [r7, #28]
 800bac8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bacc:	429a      	cmp	r2, r3
 800bace:	f4ff af41 	bcc.w	800b954 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bad2:	4804      	ldr	r0, [pc, #16]	; (800bae4 <mem_malloc+0x1e4>)
 800bad4:	f00a f937 	bl	8015d46 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3720      	adds	r7, #32
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	200044a4 	.word	0x200044a4
 800bae8:	200044a8 	.word	0x200044a8
 800baec:	080170d8 	.word	0x080170d8
 800baf0:	0801729c 	.word	0x0801729c
 800baf4:	08017120 	.word	0x08017120
 800baf8:	200044a0 	.word	0x200044a0
 800bafc:	080172b0 	.word	0x080172b0
 800bb00:	080172cc 	.word	0x080172cc
 800bb04:	080172fc 	.word	0x080172fc
 800bb08:	0801732c 	.word	0x0801732c

0800bb0c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	3303      	adds	r3, #3
 800bb22:	f023 0303 	bic.w	r3, r3, #3
 800bb26:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	e011      	b.n	800bb52 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	881b      	ldrh	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	4413      	add	r3, r2
 800bb4a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	885b      	ldrh	r3, [r3, #2]
 800bb56:	461a      	mov	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	dbe7      	blt.n	800bb2e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bb5e:	bf00      	nop
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
	...

0800bb6c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bb72:	2300      	movs	r3, #0
 800bb74:	80fb      	strh	r3, [r7, #6]
 800bb76:	e009      	b.n	800bb8c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bb78:	88fb      	ldrh	r3, [r7, #6]
 800bb7a:	4a08      	ldr	r2, [pc, #32]	; (800bb9c <memp_init+0x30>)
 800bb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff ffc3 	bl	800bb0c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bb86:	88fb      	ldrh	r3, [r7, #6]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	80fb      	strh	r3, [r7, #6]
 800bb8c:	88fb      	ldrh	r3, [r7, #6]
 800bb8e:	2b0c      	cmp	r3, #12
 800bb90:	d9f2      	bls.n	800bb78 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	0802a67c 	.word	0x0802a67c

0800bba0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bba8:	f00a f900 	bl	8015dac <sys_arch_protect>
 800bbac:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d015      	beq.n	800bbe8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	6812      	ldr	r2, [r2, #0]
 800bbc4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f003 0303 	and.w	r3, r3, #3
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d006      	beq.n	800bbde <do_memp_malloc_pool+0x3e>
 800bbd0:	4b09      	ldr	r3, [pc, #36]	; (800bbf8 <do_memp_malloc_pool+0x58>)
 800bbd2:	f240 1219 	movw	r2, #281	; 0x119
 800bbd6:	4909      	ldr	r1, [pc, #36]	; (800bbfc <do_memp_malloc_pool+0x5c>)
 800bbd8:	4809      	ldr	r0, [pc, #36]	; (800bc00 <do_memp_malloc_pool+0x60>)
 800bbda:	f00a f94b 	bl	8015e74 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f00a f8f2 	bl	8015dc8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	e003      	b.n	800bbf0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f00a f8ed 	bl	8015dc8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	08017350 	.word	0x08017350
 800bbfc:	08017380 	.word	0x08017380
 800bc00:	080173a4 	.word	0x080173a4

0800bc04 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	2b0c      	cmp	r3, #12
 800bc12:	d908      	bls.n	800bc26 <memp_malloc+0x22>
 800bc14:	4b0a      	ldr	r3, [pc, #40]	; (800bc40 <memp_malloc+0x3c>)
 800bc16:	f240 1257 	movw	r2, #343	; 0x157
 800bc1a:	490a      	ldr	r1, [pc, #40]	; (800bc44 <memp_malloc+0x40>)
 800bc1c:	480a      	ldr	r0, [pc, #40]	; (800bc48 <memp_malloc+0x44>)
 800bc1e:	f00a f929 	bl	8015e74 <iprintf>
 800bc22:	2300      	movs	r3, #0
 800bc24:	e008      	b.n	800bc38 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bc26:	79fb      	ldrb	r3, [r7, #7]
 800bc28:	4a08      	ldr	r2, [pc, #32]	; (800bc4c <memp_malloc+0x48>)
 800bc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff ffb6 	bl	800bba0 <do_memp_malloc_pool>
 800bc34:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bc36:	68fb      	ldr	r3, [r7, #12]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	08017350 	.word	0x08017350
 800bc44:	080173e0 	.word	0x080173e0
 800bc48:	080173a4 	.word	0x080173a4
 800bc4c:	0802a67c 	.word	0x0802a67c

0800bc50 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	f003 0303 	and.w	r3, r3, #3
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d006      	beq.n	800bc72 <do_memp_free_pool+0x22>
 800bc64:	4b0d      	ldr	r3, [pc, #52]	; (800bc9c <do_memp_free_pool+0x4c>)
 800bc66:	f240 126d 	movw	r2, #365	; 0x16d
 800bc6a:	490d      	ldr	r1, [pc, #52]	; (800bca0 <do_memp_free_pool+0x50>)
 800bc6c:	480d      	ldr	r0, [pc, #52]	; (800bca4 <do_memp_free_pool+0x54>)
 800bc6e:	f00a f901 	bl	8015e74 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bc76:	f00a f899 	bl	8015dac <sys_arch_protect>
 800bc7a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bc8e:	68b8      	ldr	r0, [r7, #8]
 800bc90:	f00a f89a 	bl	8015dc8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bc94:	bf00      	nop
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	08017350 	.word	0x08017350
 800bca0:	08017400 	.word	0x08017400
 800bca4:	080173a4 	.word	0x080173a4

0800bca8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	6039      	str	r1, [r7, #0]
 800bcb2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	2b0c      	cmp	r3, #12
 800bcb8:	d907      	bls.n	800bcca <memp_free+0x22>
 800bcba:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <memp_free+0x44>)
 800bcbc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bcc0:	490b      	ldr	r1, [pc, #44]	; (800bcf0 <memp_free+0x48>)
 800bcc2:	480c      	ldr	r0, [pc, #48]	; (800bcf4 <memp_free+0x4c>)
 800bcc4:	f00a f8d6 	bl	8015e74 <iprintf>
 800bcc8:	e00c      	b.n	800bce4 <memp_free+0x3c>

  if (mem == NULL) {
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d008      	beq.n	800bce2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bcd0:	79fb      	ldrb	r3, [r7, #7]
 800bcd2:	4a09      	ldr	r2, [pc, #36]	; (800bcf8 <memp_free+0x50>)
 800bcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7ff ffb8 	bl	800bc50 <do_memp_free_pool>
 800bce0:	e000      	b.n	800bce4 <memp_free+0x3c>
    return;
 800bce2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	08017350 	.word	0x08017350
 800bcf0:	08017420 	.word	0x08017420
 800bcf4:	080173a4 	.word	0x080173a4
 800bcf8:	0802a67c 	.word	0x0802a67c

0800bcfc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bd00:	bf00      	nop
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
	...

0800bd0c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b086      	sub	sp, #24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
 800bd18:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d108      	bne.n	800bd32 <netif_add+0x26>
 800bd20:	4b57      	ldr	r3, [pc, #348]	; (800be80 <netif_add+0x174>)
 800bd22:	f240 1227 	movw	r2, #295	; 0x127
 800bd26:	4957      	ldr	r1, [pc, #348]	; (800be84 <netif_add+0x178>)
 800bd28:	4857      	ldr	r0, [pc, #348]	; (800be88 <netif_add+0x17c>)
 800bd2a:	f00a f8a3 	bl	8015e74 <iprintf>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	e0a2      	b.n	800be78 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d108      	bne.n	800bd4a <netif_add+0x3e>
 800bd38:	4b51      	ldr	r3, [pc, #324]	; (800be80 <netif_add+0x174>)
 800bd3a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bd3e:	4953      	ldr	r1, [pc, #332]	; (800be8c <netif_add+0x180>)
 800bd40:	4851      	ldr	r0, [pc, #324]	; (800be88 <netif_add+0x17c>)
 800bd42:	f00a f897 	bl	8015e74 <iprintf>
 800bd46:	2300      	movs	r3, #0
 800bd48:	e096      	b.n	800be78 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bd50:	4b4f      	ldr	r3, [pc, #316]	; (800be90 <netif_add+0x184>)
 800bd52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bd5a:	4b4d      	ldr	r3, [pc, #308]	; (800be90 <netif_add+0x184>)
 800bd5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bd64:	4b4a      	ldr	r3, [pc, #296]	; (800be90 <netif_add+0x184>)
 800bd66:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4a45      	ldr	r2, [pc, #276]	; (800be94 <netif_add+0x188>)
 800bd7e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6a3a      	ldr	r2, [r7, #32]
 800bd98:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bd9a:	4b3f      	ldr	r3, [pc, #252]	; (800be98 <netif_add+0x18c>)
 800bd9c:	781a      	ldrb	r2, [r3, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	68b9      	ldr	r1, [r7, #8]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 f913 	bl	800bfdc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	4798      	blx	r3
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <netif_add+0xba>
    return NULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e058      	b.n	800be78 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bdcc:	2bff      	cmp	r3, #255	; 0xff
 800bdce:	d103      	bne.n	800bdd8 <netif_add+0xcc>
        netif->num = 0;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bddc:	4b2f      	ldr	r3, [pc, #188]	; (800be9c <netif_add+0x190>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	617b      	str	r3, [r7, #20]
 800bde2:	e02b      	b.n	800be3c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d106      	bne.n	800bdfa <netif_add+0xee>
 800bdec:	4b24      	ldr	r3, [pc, #144]	; (800be80 <netif_add+0x174>)
 800bdee:	f240 128b 	movw	r2, #395	; 0x18b
 800bdf2:	492b      	ldr	r1, [pc, #172]	; (800bea0 <netif_add+0x194>)
 800bdf4:	4824      	ldr	r0, [pc, #144]	; (800be88 <netif_add+0x17c>)
 800bdf6:	f00a f83d 	bl	8015e74 <iprintf>
        num_netifs++;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2bff      	cmp	r3, #255	; 0xff
 800be04:	dd06      	ble.n	800be14 <netif_add+0x108>
 800be06:	4b1e      	ldr	r3, [pc, #120]	; (800be80 <netif_add+0x174>)
 800be08:	f240 128d 	movw	r2, #397	; 0x18d
 800be0c:	4925      	ldr	r1, [pc, #148]	; (800bea4 <netif_add+0x198>)
 800be0e:	481e      	ldr	r0, [pc, #120]	; (800be88 <netif_add+0x17c>)
 800be10:	f00a f830 	bl	8015e74 <iprintf>
        if (netif2->num == netif->num) {
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be20:	429a      	cmp	r2, r3
 800be22:	d108      	bne.n	800be36 <netif_add+0x12a>
          netif->num++;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be2a:	3301      	adds	r3, #1
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800be34:	e005      	b.n	800be42 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	617b      	str	r3, [r7, #20]
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1d0      	bne.n	800bde4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1be      	bne.n	800bdc6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be4e:	2bfe      	cmp	r3, #254	; 0xfe
 800be50:	d103      	bne.n	800be5a <netif_add+0x14e>
    netif_num = 0;
 800be52:	4b11      	ldr	r3, [pc, #68]	; (800be98 <netif_add+0x18c>)
 800be54:	2200      	movs	r2, #0
 800be56:	701a      	strb	r2, [r3, #0]
 800be58:	e006      	b.n	800be68 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be60:	3301      	adds	r3, #1
 800be62:	b2da      	uxtb	r2, r3
 800be64:	4b0c      	ldr	r3, [pc, #48]	; (800be98 <netif_add+0x18c>)
 800be66:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800be68:	4b0c      	ldr	r3, [pc, #48]	; (800be9c <netif_add+0x190>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800be70:	4a0a      	ldr	r2, [pc, #40]	; (800be9c <netif_add+0x190>)
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800be76:	68fb      	ldr	r3, [r7, #12]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	0801743c 	.word	0x0801743c
 800be84:	080174d0 	.word	0x080174d0
 800be88:	0801748c 	.word	0x0801748c
 800be8c:	080174ec 	.word	0x080174ec
 800be90:	0802a6f0 	.word	0x0802a6f0
 800be94:	0800c2b7 	.word	0x0800c2b7
 800be98:	200044e0 	.word	0x200044e0
 800be9c:	2000b4f0 	.word	0x2000b4f0
 800bea0:	08017510 	.word	0x08017510
 800bea4:	08017524 	.word	0x08017524

0800bea8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800beb2:	6839      	ldr	r1, [r7, #0]
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f002 fe1b 	bl	800eaf0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f007 fb93 	bl	80135e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bec2:	bf00      	nop
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d106      	bne.n	800beec <netif_do_set_ipaddr+0x20>
 800bede:	4b1d      	ldr	r3, [pc, #116]	; (800bf54 <netif_do_set_ipaddr+0x88>)
 800bee0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bee4:	491c      	ldr	r1, [pc, #112]	; (800bf58 <netif_do_set_ipaddr+0x8c>)
 800bee6:	481d      	ldr	r0, [pc, #116]	; (800bf5c <netif_do_set_ipaddr+0x90>)
 800bee8:	f009 ffc4 	bl	8015e74 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d106      	bne.n	800bf00 <netif_do_set_ipaddr+0x34>
 800bef2:	4b18      	ldr	r3, [pc, #96]	; (800bf54 <netif_do_set_ipaddr+0x88>)
 800bef4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bef8:	4917      	ldr	r1, [pc, #92]	; (800bf58 <netif_do_set_ipaddr+0x8c>)
 800befa:	4818      	ldr	r0, [pc, #96]	; (800bf5c <netif_do_set_ipaddr+0x90>)
 800befc:	f009 ffba 	bl	8015e74 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3304      	adds	r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d01c      	beq.n	800bf48 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3304      	adds	r3, #4
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bf1e:	f107 0314 	add.w	r3, r7, #20
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7ff ffbf 	bl	800bea8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <netif_do_set_ipaddr+0x6a>
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	e000      	b.n	800bf38 <netif_do_set_ipaddr+0x6c>
 800bf36:	2300      	movs	r3, #0
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f000 f8d2 	bl	800c0e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bf44:	2301      	movs	r3, #1
 800bf46:	e000      	b.n	800bf4a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	0801743c 	.word	0x0801743c
 800bf58:	08017554 	.word	0x08017554
 800bf5c:	0801748c 	.word	0x0801748c

0800bf60 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3308      	adds	r3, #8
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d00a      	beq.n	800bf90 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <netif_do_set_netmask+0x26>
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	e000      	b.n	800bf88 <netif_do_set_netmask+0x28>
 800bf86:	2300      	movs	r3, #0
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e000      	b.n	800bf92 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	60f8      	str	r0, [r7, #12]
 800bfa6:	60b9      	str	r1, [r7, #8]
 800bfa8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	330c      	adds	r3, #12
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d00a      	beq.n	800bfce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <netif_do_set_gw+0x26>
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	e000      	b.n	800bfc6 <netif_do_set_gw+0x28>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e000      	b.n	800bfd0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
 800bfe8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bfee:	2300      	movs	r3, #0
 800bff0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d101      	bne.n	800bffc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bff8:	4b1c      	ldr	r3, [pc, #112]	; (800c06c <netif_set_addr+0x90>)
 800bffa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c002:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <netif_set_addr+0x90>)
 800c004:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d101      	bne.n	800c010 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c00c:	4b17      	ldr	r3, [pc, #92]	; (800c06c <netif_set_addr+0x90>)
 800c00e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d003      	beq.n	800c01e <netif_set_addr+0x42>
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <netif_set_addr+0x46>
 800c01e:	2301      	movs	r3, #1
 800c020:	e000      	b.n	800c024 <netif_set_addr+0x48>
 800c022:	2300      	movs	r3, #0
 800c024:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d006      	beq.n	800c03a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c02c:	f107 0310 	add.w	r3, r7, #16
 800c030:	461a      	mov	r2, r3
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff ff49 	bl	800becc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c03a:	69fa      	ldr	r2, [r7, #28]
 800c03c:	6879      	ldr	r1, [r7, #4]
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7ff ff8e 	bl	800bf60 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f7ff ffa8 	bl	800bf9e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d106      	bne.n	800c062 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c054:	f107 0310 	add.w	r3, r7, #16
 800c058:	461a      	mov	r2, r3
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f7ff ff35 	bl	800becc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c062:	bf00      	nop
 800c064:	3720      	adds	r7, #32
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	0802a6f0 	.word	0x0802a6f0

0800c070 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c078:	4a04      	ldr	r2, [pc, #16]	; (800c08c <netif_set_default+0x1c>)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c07e:	bf00      	nop
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	2000b4f4 	.word	0x2000b4f4

0800c090 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d107      	bne.n	800c0ae <netif_set_up+0x1e>
 800c09e:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <netif_set_up+0x4c>)
 800c0a0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c0a4:	490e      	ldr	r1, [pc, #56]	; (800c0e0 <netif_set_up+0x50>)
 800c0a6:	480f      	ldr	r0, [pc, #60]	; (800c0e4 <netif_set_up+0x54>)
 800c0a8:	f009 fee4 	bl	8015e74 <iprintf>
 800c0ac:	e013      	b.n	800c0d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10c      	bne.n	800c0d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c0c2:	f043 0301 	orr.w	r3, r3, #1
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c0ce:	2103      	movs	r1, #3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f809 	bl	800c0e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	0801743c 	.word	0x0801743c
 800c0e0:	080175c4 	.word	0x080175c4
 800c0e4:	0801748c 	.word	0x0801748c

0800c0e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d106      	bne.n	800c108 <netif_issue_reports+0x20>
 800c0fa:	4b18      	ldr	r3, [pc, #96]	; (800c15c <netif_issue_reports+0x74>)
 800c0fc:	f240 326d 	movw	r2, #877	; 0x36d
 800c100:	4917      	ldr	r1, [pc, #92]	; (800c160 <netif_issue_reports+0x78>)
 800c102:	4818      	ldr	r0, [pc, #96]	; (800c164 <netif_issue_reports+0x7c>)
 800c104:	f009 feb6 	bl	8015e74 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c10e:	f003 0304 	and.w	r3, r3, #4
 800c112:	2b00      	cmp	r3, #0
 800c114:	d01e      	beq.n	800c154 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c11c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c120:	2b00      	cmp	r3, #0
 800c122:	d017      	beq.n	800c154 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c124:	78fb      	ldrb	r3, [r7, #3]
 800c126:	f003 0301 	and.w	r3, r3, #1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d013      	beq.n	800c156 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	3304      	adds	r3, #4
 800c132:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00e      	beq.n	800c156 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c13e:	f003 0308 	and.w	r3, r3, #8
 800c142:	2b00      	cmp	r3, #0
 800c144:	d007      	beq.n	800c156 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3304      	adds	r3, #4
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f008 f9b5 	bl	80144bc <etharp_request>
 800c152:	e000      	b.n	800c156 <netif_issue_reports+0x6e>
    return;
 800c154:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	0801743c 	.word	0x0801743c
 800c160:	080175e0 	.word	0x080175e0
 800c164:	0801748c 	.word	0x0801748c

0800c168 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d107      	bne.n	800c186 <netif_set_down+0x1e>
 800c176:	4b12      	ldr	r3, [pc, #72]	; (800c1c0 <netif_set_down+0x58>)
 800c178:	f240 329b 	movw	r2, #923	; 0x39b
 800c17c:	4911      	ldr	r1, [pc, #68]	; (800c1c4 <netif_set_down+0x5c>)
 800c17e:	4812      	ldr	r0, [pc, #72]	; (800c1c8 <netif_set_down+0x60>)
 800c180:	f009 fe78 	bl	8015e74 <iprintf>
 800c184:	e019      	b.n	800c1ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	2b00      	cmp	r3, #0
 800c192:	d012      	beq.n	800c1ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c19a:	f023 0301 	bic.w	r3, r3, #1
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c1ac:	f003 0308 	and.w	r3, r3, #8
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f007 fd3f 	bl	8013c38 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	0801743c 	.word	0x0801743c
 800c1c4:	08017604 	.word	0x08017604
 800c1c8:	0801748c 	.word	0x0801748c

0800c1cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d107      	bne.n	800c1ea <netif_set_link_up+0x1e>
 800c1da:	4b13      	ldr	r3, [pc, #76]	; (800c228 <netif_set_link_up+0x5c>)
 800c1dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c1e0:	4912      	ldr	r1, [pc, #72]	; (800c22c <netif_set_link_up+0x60>)
 800c1e2:	4813      	ldr	r0, [pc, #76]	; (800c230 <netif_set_link_up+0x64>)
 800c1e4:	f009 fe46 	bl	8015e74 <iprintf>
 800c1e8:	e01b      	b.n	800c222 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c1f0:	f003 0304 	and.w	r3, r3, #4
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d114      	bne.n	800c222 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c1fe:	f043 0304 	orr.w	r3, r3, #4
 800c202:	b2da      	uxtb	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c20a:	2103      	movs	r1, #3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff ff6b 	bl	800c0e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	69db      	ldr	r3, [r3, #28]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <netif_set_link_up+0x56>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	69db      	ldr	r3, [r3, #28]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	0801743c 	.word	0x0801743c
 800c22c:	08017624 	.word	0x08017624
 800c230:	0801748c 	.word	0x0801748c

0800c234 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d107      	bne.n	800c252 <netif_set_link_down+0x1e>
 800c242:	4b11      	ldr	r3, [pc, #68]	; (800c288 <netif_set_link_down+0x54>)
 800c244:	f240 4206 	movw	r2, #1030	; 0x406
 800c248:	4910      	ldr	r1, [pc, #64]	; (800c28c <netif_set_link_down+0x58>)
 800c24a:	4811      	ldr	r0, [pc, #68]	; (800c290 <netif_set_link_down+0x5c>)
 800c24c:	f009 fe12 	bl	8015e74 <iprintf>
 800c250:	e017      	b.n	800c282 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c258:	f003 0304 	and.w	r3, r3, #4
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d010      	beq.n	800c282 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c266:	f023 0304 	bic.w	r3, r3, #4
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	69db      	ldr	r3, [r3, #28]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <netif_set_link_down+0x4e>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	0801743c 	.word	0x0801743c
 800c28c:	08017648 	.word	0x08017648
 800c290:	0801748c 	.word	0x0801748c

0800c294 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d002      	beq.n	800c2aa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	61da      	str	r2, [r3, #28]
  }
}
 800c2aa:	bf00      	nop
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b085      	sub	sp, #20
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c2c2:	f06f 030b 	mvn.w	r3, #11
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3714      	adds	r7, #20
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
	...

0800c2d4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c2de:	79fb      	ldrb	r3, [r7, #7]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d013      	beq.n	800c30c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c2e4:	4b0d      	ldr	r3, [pc, #52]	; (800c31c <netif_get_by_index+0x48>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	e00c      	b.n	800c306 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	79fa      	ldrb	r2, [r7, #7]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d101      	bne.n	800c300 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	e006      	b.n	800c30e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	60fb      	str	r3, [r7, #12]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d1ef      	bne.n	800c2ec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	2000b4f0 	.word	0x2000b4f0

0800c320 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c326:	f009 fd41 	bl	8015dac <sys_arch_protect>
 800c32a:	6038      	str	r0, [r7, #0]
 800c32c:	4b0d      	ldr	r3, [pc, #52]	; (800c364 <pbuf_free_ooseq+0x44>)
 800c32e:	2200      	movs	r2, #0
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	6838      	ldr	r0, [r7, #0]
 800c334:	f009 fd48 	bl	8015dc8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c338:	4b0b      	ldr	r3, [pc, #44]	; (800c368 <pbuf_free_ooseq+0x48>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	607b      	str	r3, [r7, #4]
 800c33e:	e00a      	b.n	800c356 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c344:	2b00      	cmp	r3, #0
 800c346:	d003      	beq.n	800c350 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f002 fc0f 	bl	800eb6c <tcp_free_ooseq>
      return;
 800c34e:	e005      	b.n	800c35c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	607b      	str	r3, [r7, #4]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1f1      	bne.n	800c340 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	2000b4f8 	.word	0x2000b4f8
 800c368:	2000b500 	.word	0x2000b500

0800c36c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c374:	f7ff ffd4 	bl	800c320 <pbuf_free_ooseq>
}
 800c378:	bf00      	nop
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c386:	f009 fd11 	bl	8015dac <sys_arch_protect>
 800c38a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c38c:	4b0f      	ldr	r3, [pc, #60]	; (800c3cc <pbuf_pool_is_empty+0x4c>)
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c392:	4b0e      	ldr	r3, [pc, #56]	; (800c3cc <pbuf_pool_is_empty+0x4c>)
 800c394:	2201      	movs	r2, #1
 800c396:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f009 fd15 	bl	8015dc8 <sys_arch_unprotect>

  if (!queued) {
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10f      	bne.n	800c3c4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	480a      	ldr	r0, [pc, #40]	; (800c3d0 <pbuf_pool_is_empty+0x50>)
 800c3a8:	f7fe f89c 	bl	800a4e4 <tcpip_try_callback>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d008      	beq.n	800c3c4 <pbuf_pool_is_empty+0x44>
 800c3b2:	f009 fcfb 	bl	8015dac <sys_arch_protect>
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	4b04      	ldr	r3, [pc, #16]	; (800c3cc <pbuf_pool_is_empty+0x4c>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	701a      	strb	r2, [r3, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f009 fd02 	bl	8015dc8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	2000b4f8 	.word	0x2000b4f8
 800c3d0:	0800c36d 	.word	0x0800c36d

0800c3d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	4611      	mov	r1, r2
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	80fb      	strh	r3, [r7, #6]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	88fa      	ldrh	r2, [r7, #6]
 800c3fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	88ba      	ldrh	r2, [r7, #4]
 800c400:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c402:	8b3b      	ldrh	r3, [r7, #24]
 800c404:	b2da      	uxtb	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	7f3a      	ldrb	r2, [r7, #28]
 800c40e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2201      	movs	r2, #1
 800c414:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	73da      	strb	r2, [r3, #15]
}
 800c41c:	bf00      	nop
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08c      	sub	sp, #48	; 0x30
 800c42c:	af02      	add	r7, sp, #8
 800c42e:	4603      	mov	r3, r0
 800c430:	71fb      	strb	r3, [r7, #7]
 800c432:	460b      	mov	r3, r1
 800c434:	80bb      	strh	r3, [r7, #4]
 800c436:	4613      	mov	r3, r2
 800c438:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c43e:	887b      	ldrh	r3, [r7, #2]
 800c440:	2b41      	cmp	r3, #65	; 0x41
 800c442:	d00b      	beq.n	800c45c <pbuf_alloc+0x34>
 800c444:	2b41      	cmp	r3, #65	; 0x41
 800c446:	dc02      	bgt.n	800c44e <pbuf_alloc+0x26>
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d007      	beq.n	800c45c <pbuf_alloc+0x34>
 800c44c:	e0c2      	b.n	800c5d4 <pbuf_alloc+0x1ac>
 800c44e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c452:	d00b      	beq.n	800c46c <pbuf_alloc+0x44>
 800c454:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c458:	d070      	beq.n	800c53c <pbuf_alloc+0x114>
 800c45a:	e0bb      	b.n	800c5d4 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c45c:	887a      	ldrh	r2, [r7, #2]
 800c45e:	88bb      	ldrh	r3, [r7, #4]
 800c460:	4619      	mov	r1, r3
 800c462:	2000      	movs	r0, #0
 800c464:	f000 f8d2 	bl	800c60c <pbuf_alloc_reference>
 800c468:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c46a:	e0bd      	b.n	800c5e8 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c470:	2300      	movs	r3, #0
 800c472:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c474:	88bb      	ldrh	r3, [r7, #4]
 800c476:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c478:	200c      	movs	r0, #12
 800c47a:	f7ff fbc3 	bl	800bc04 <memp_malloc>
 800c47e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d109      	bne.n	800c49a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800c486:	f7ff ff7b 	bl	800c380 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800c490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c492:	f000 faa9 	bl	800c9e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c496:	2300      	movs	r3, #0
 800c498:	e0a7      	b.n	800c5ea <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c49a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c49c:	3303      	adds	r3, #3
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	f023 0303 	bic.w	r3, r3, #3
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	8b7a      	ldrh	r2, [r7, #26]
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	bf28      	it	cs
 800c4b2:	4613      	movcs	r3, r2
 800c4b4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c4b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4b8:	3310      	adds	r3, #16
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	4413      	add	r3, r2
 800c4be:	3303      	adds	r3, #3
 800c4c0:	f023 0303 	bic.w	r3, r3, #3
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	89f9      	ldrh	r1, [r7, #14]
 800c4c8:	8b7a      	ldrh	r2, [r7, #26]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	9301      	str	r3, [sp, #4]
 800c4ce:	887b      	ldrh	r3, [r7, #2]
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4601      	mov	r1, r0
 800c4d6:	6938      	ldr	r0, [r7, #16]
 800c4d8:	f7ff ff7c 	bl	800c3d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	f003 0303 	and.w	r3, r3, #3
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <pbuf_alloc+0xce>
 800c4e8:	4b42      	ldr	r3, [pc, #264]	; (800c5f4 <pbuf_alloc+0x1cc>)
 800c4ea:	f240 1201 	movw	r2, #257	; 0x101
 800c4ee:	4942      	ldr	r1, [pc, #264]	; (800c5f8 <pbuf_alloc+0x1d0>)
 800c4f0:	4842      	ldr	r0, [pc, #264]	; (800c5fc <pbuf_alloc+0x1d4>)
 800c4f2:	f009 fcbf 	bl	8015e74 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c4f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4f8:	3303      	adds	r3, #3
 800c4fa:	f023 0303 	bic.w	r3, r3, #3
 800c4fe:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c502:	d106      	bne.n	800c512 <pbuf_alloc+0xea>
 800c504:	4b3b      	ldr	r3, [pc, #236]	; (800c5f4 <pbuf_alloc+0x1cc>)
 800c506:	f240 1203 	movw	r2, #259	; 0x103
 800c50a:	493d      	ldr	r1, [pc, #244]	; (800c600 <pbuf_alloc+0x1d8>)
 800c50c:	483b      	ldr	r0, [pc, #236]	; (800c5fc <pbuf_alloc+0x1d4>)
 800c50e:	f009 fcb1 	bl	8015e74 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	2b00      	cmp	r3, #0
 800c516:	d102      	bne.n	800c51e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	627b      	str	r3, [r7, #36]	; 0x24
 800c51c:	e002      	b.n	800c524 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	693a      	ldr	r2, [r7, #16]
 800c522:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c528:	8b7a      	ldrh	r2, [r7, #26]
 800c52a:	89fb      	ldrh	r3, [r7, #14]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c534:	8b7b      	ldrh	r3, [r7, #26]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d19e      	bne.n	800c478 <pbuf_alloc+0x50>
      break;
 800c53a:	e055      	b.n	800c5e8 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c53c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c53e:	3303      	adds	r3, #3
 800c540:	b29b      	uxth	r3, r3
 800c542:	f023 0303 	bic.w	r3, r3, #3
 800c546:	b29a      	uxth	r2, r3
 800c548:	88bb      	ldrh	r3, [r7, #4]
 800c54a:	3303      	adds	r3, #3
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	f023 0303 	bic.w	r3, r3, #3
 800c552:	b29b      	uxth	r3, r3
 800c554:	4413      	add	r3, r2
 800c556:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c558:	8b3b      	ldrh	r3, [r7, #24]
 800c55a:	3310      	adds	r3, #16
 800c55c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c55e:	8b3a      	ldrh	r2, [r7, #24]
 800c560:	88bb      	ldrh	r3, [r7, #4]
 800c562:	3303      	adds	r3, #3
 800c564:	f023 0303 	bic.w	r3, r3, #3
 800c568:	429a      	cmp	r2, r3
 800c56a:	d306      	bcc.n	800c57a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c56c:	8afa      	ldrh	r2, [r7, #22]
 800c56e:	88bb      	ldrh	r3, [r7, #4]
 800c570:	3303      	adds	r3, #3
 800c572:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c576:	429a      	cmp	r2, r3
 800c578:	d201      	bcs.n	800c57e <pbuf_alloc+0x156>
        return NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	e035      	b.n	800c5ea <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c57e:	8afb      	ldrh	r3, [r7, #22]
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff f9bd 	bl	800b900 <mem_malloc>
 800c586:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <pbuf_alloc+0x16a>
        return NULL;
 800c58e:	2300      	movs	r3, #0
 800c590:	e02b      	b.n	800c5ea <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c594:	3310      	adds	r3, #16
 800c596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c598:	4413      	add	r3, r2
 800c59a:	3303      	adds	r3, #3
 800c59c:	f023 0303 	bic.w	r3, r3, #3
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	88b9      	ldrh	r1, [r7, #4]
 800c5a4:	88ba      	ldrh	r2, [r7, #4]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	887b      	ldrh	r3, [r7, #2]
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4601      	mov	r1, r0
 800c5b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5b4:	f7ff ff0e 	bl	800c3d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	f003 0303 	and.w	r3, r3, #3
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d010      	beq.n	800c5e6 <pbuf_alloc+0x1be>
 800c5c4:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <pbuf_alloc+0x1cc>)
 800c5c6:	f240 1223 	movw	r2, #291	; 0x123
 800c5ca:	490e      	ldr	r1, [pc, #56]	; (800c604 <pbuf_alloc+0x1dc>)
 800c5cc:	480b      	ldr	r0, [pc, #44]	; (800c5fc <pbuf_alloc+0x1d4>)
 800c5ce:	f009 fc51 	bl	8015e74 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c5d2:	e008      	b.n	800c5e6 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <pbuf_alloc+0x1cc>)
 800c5d6:	f240 1227 	movw	r2, #295	; 0x127
 800c5da:	490b      	ldr	r1, [pc, #44]	; (800c608 <pbuf_alloc+0x1e0>)
 800c5dc:	4807      	ldr	r0, [pc, #28]	; (800c5fc <pbuf_alloc+0x1d4>)
 800c5de:	f009 fc49 	bl	8015e74 <iprintf>
      return NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e001      	b.n	800c5ea <pbuf_alloc+0x1c2>
      break;
 800c5e6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3728      	adds	r7, #40	; 0x28
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	0801766c 	.word	0x0801766c
 800c5f8:	0801769c 	.word	0x0801769c
 800c5fc:	080176cc 	.word	0x080176cc
 800c600:	080176f4 	.word	0x080176f4
 800c604:	08017728 	.word	0x08017728
 800c608:	08017754 	.word	0x08017754

0800c60c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af02      	add	r7, sp, #8
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	807b      	strh	r3, [r7, #2]
 800c618:	4613      	mov	r3, r2
 800c61a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c61c:	883b      	ldrh	r3, [r7, #0]
 800c61e:	2b41      	cmp	r3, #65	; 0x41
 800c620:	d009      	beq.n	800c636 <pbuf_alloc_reference+0x2a>
 800c622:	883b      	ldrh	r3, [r7, #0]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d006      	beq.n	800c636 <pbuf_alloc_reference+0x2a>
 800c628:	4b0f      	ldr	r3, [pc, #60]	; (800c668 <pbuf_alloc_reference+0x5c>)
 800c62a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c62e:	490f      	ldr	r1, [pc, #60]	; (800c66c <pbuf_alloc_reference+0x60>)
 800c630:	480f      	ldr	r0, [pc, #60]	; (800c670 <pbuf_alloc_reference+0x64>)
 800c632:	f009 fc1f 	bl	8015e74 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c636:	200b      	movs	r0, #11
 800c638:	f7ff fae4 	bl	800bc04 <memp_malloc>
 800c63c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c644:	2300      	movs	r3, #0
 800c646:	e00b      	b.n	800c660 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c648:	8879      	ldrh	r1, [r7, #2]
 800c64a:	887a      	ldrh	r2, [r7, #2]
 800c64c:	2300      	movs	r3, #0
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	883b      	ldrh	r3, [r7, #0]
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	460b      	mov	r3, r1
 800c656:	6879      	ldr	r1, [r7, #4]
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7ff febb 	bl	800c3d4 <pbuf_init_alloced_pbuf>
  return p;
 800c65e:	68fb      	ldr	r3, [r7, #12]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	0801766c 	.word	0x0801766c
 800c66c:	08017770 	.word	0x08017770
 800c670:	080176cc 	.word	0x080176cc

0800c674 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b088      	sub	sp, #32
 800c678:	af02      	add	r7, sp, #8
 800c67a:	607b      	str	r3, [r7, #4]
 800c67c:	4603      	mov	r3, r0
 800c67e:	73fb      	strb	r3, [r7, #15]
 800c680:	460b      	mov	r3, r1
 800c682:	81bb      	strh	r3, [r7, #12]
 800c684:	4613      	mov	r3, r2
 800c686:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c688:	7bfb      	ldrb	r3, [r7, #15]
 800c68a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c68c:	8a7b      	ldrh	r3, [r7, #18]
 800c68e:	3303      	adds	r3, #3
 800c690:	f023 0203 	bic.w	r2, r3, #3
 800c694:	89bb      	ldrh	r3, [r7, #12]
 800c696:	441a      	add	r2, r3
 800c698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d901      	bls.n	800c6a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e018      	b.n	800c6d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c6a8:	8a7b      	ldrh	r3, [r7, #18]
 800c6aa:	3303      	adds	r3, #3
 800c6ac:	f023 0303 	bic.w	r3, r3, #3
 800c6b0:	6a3a      	ldr	r2, [r7, #32]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]
 800c6b6:	e001      	b.n	800c6bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	89b9      	ldrh	r1, [r7, #12]
 800c6c0:	89ba      	ldrh	r2, [r7, #12]
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	897b      	ldrh	r3, [r7, #10]
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	6979      	ldr	r1, [r7, #20]
 800c6ce:	f7ff fe81 	bl	800c3d4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c6d2:	687b      	ldr	r3, [r7, #4]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d106      	bne.n	800c6fc <pbuf_realloc+0x20>
 800c6ee:	4b3a      	ldr	r3, [pc, #232]	; (800c7d8 <pbuf_realloc+0xfc>)
 800c6f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c6f4:	4939      	ldr	r1, [pc, #228]	; (800c7dc <pbuf_realloc+0x100>)
 800c6f6:	483a      	ldr	r0, [pc, #232]	; (800c7e0 <pbuf_realloc+0x104>)
 800c6f8:	f009 fbbc 	bl	8015e74 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	891b      	ldrh	r3, [r3, #8]
 800c700:	887a      	ldrh	r2, [r7, #2]
 800c702:	429a      	cmp	r2, r3
 800c704:	d264      	bcs.n	800c7d0 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	891a      	ldrh	r2, [r3, #8]
 800c70a:	887b      	ldrh	r3, [r7, #2]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c710:	887b      	ldrh	r3, [r7, #2]
 800c712:	817b      	strh	r3, [r7, #10]
  q = p;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c718:	e018      	b.n	800c74c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	895b      	ldrh	r3, [r3, #10]
 800c71e:	897a      	ldrh	r2, [r7, #10]
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	891a      	ldrh	r2, [r3, #8]
 800c728:	893b      	ldrh	r3, [r7, #8]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <pbuf_realloc+0x70>
 800c73e:	4b26      	ldr	r3, [pc, #152]	; (800c7d8 <pbuf_realloc+0xfc>)
 800c740:	f240 12af 	movw	r2, #431	; 0x1af
 800c744:	4927      	ldr	r1, [pc, #156]	; (800c7e4 <pbuf_realloc+0x108>)
 800c746:	4826      	ldr	r0, [pc, #152]	; (800c7e0 <pbuf_realloc+0x104>)
 800c748:	f009 fb94 	bl	8015e74 <iprintf>
  while (rem_len > q->len) {
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	895b      	ldrh	r3, [r3, #10]
 800c750:	897a      	ldrh	r2, [r7, #10]
 800c752:	429a      	cmp	r2, r3
 800c754:	d8e1      	bhi.n	800c71a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	7b1b      	ldrb	r3, [r3, #12]
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d122      	bne.n	800c7a8 <pbuf_realloc+0xcc>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	895b      	ldrh	r3, [r3, #10]
 800c766:	897a      	ldrh	r2, [r7, #10]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d01d      	beq.n	800c7a8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	7b5b      	ldrb	r3, [r3, #13]
 800c770:	f003 0302 	and.w	r3, r3, #2
 800c774:	2b00      	cmp	r3, #0
 800c776:	d117      	bne.n	800c7a8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	461a      	mov	r2, r3
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	b29a      	uxth	r2, r3
 800c784:	897b      	ldrh	r3, [r7, #10]
 800c786:	4413      	add	r3, r2
 800c788:	b29b      	uxth	r3, r3
 800c78a:	4619      	mov	r1, r3
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7fe ffad 	bl	800b6ec <mem_trim>
 800c792:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d106      	bne.n	800c7a8 <pbuf_realloc+0xcc>
 800c79a:	4b0f      	ldr	r3, [pc, #60]	; (800c7d8 <pbuf_realloc+0xfc>)
 800c79c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c7a0:	4911      	ldr	r1, [pc, #68]	; (800c7e8 <pbuf_realloc+0x10c>)
 800c7a2:	480f      	ldr	r0, [pc, #60]	; (800c7e0 <pbuf_realloc+0x104>)
 800c7a4:	f009 fb66 	bl	8015e74 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	897a      	ldrh	r2, [r7, #10]
 800c7ac:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	895a      	ldrh	r2, [r3, #10]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d004      	beq.n	800c7c8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f000 f910 	bl	800c9e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	e000      	b.n	800c7d2 <pbuf_realloc+0xf6>
    return;
 800c7d0:	bf00      	nop

}
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	0801766c 	.word	0x0801766c
 800c7dc:	08017784 	.word	0x08017784
 800c7e0:	080176cc 	.word	0x080176cc
 800c7e4:	0801779c 	.word	0x0801779c
 800c7e8:	080177b4 	.word	0x080177b4

0800c7ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d106      	bne.n	800c80e <pbuf_add_header_impl+0x22>
 800c800:	4b2b      	ldr	r3, [pc, #172]	; (800c8b0 <pbuf_add_header_impl+0xc4>)
 800c802:	f240 12df 	movw	r2, #479	; 0x1df
 800c806:	492b      	ldr	r1, [pc, #172]	; (800c8b4 <pbuf_add_header_impl+0xc8>)
 800c808:	482b      	ldr	r0, [pc, #172]	; (800c8b8 <pbuf_add_header_impl+0xcc>)
 800c80a:	f009 fb33 	bl	8015e74 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d003      	beq.n	800c81c <pbuf_add_header_impl+0x30>
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c81a:	d301      	bcc.n	800c820 <pbuf_add_header_impl+0x34>
    return 1;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e043      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <pbuf_add_header_impl+0x3e>
    return 0;
 800c826:	2300      	movs	r3, #0
 800c828:	e03e      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	891a      	ldrh	r2, [r3, #8]
 800c832:	8a7b      	ldrh	r3, [r7, #18]
 800c834:	4413      	add	r3, r2
 800c836:	b29b      	uxth	r3, r3
 800c838:	8a7a      	ldrh	r2, [r7, #18]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d901      	bls.n	800c842 <pbuf_add_header_impl+0x56>
    return 1;
 800c83e:	2301      	movs	r3, #1
 800c840:	e032      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	7b1b      	ldrb	r3, [r3, #12]
 800c846:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c848:	8a3b      	ldrh	r3, [r7, #16]
 800c84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00c      	beq.n	800c86c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	425b      	negs	r3, r3
 800c85a:	4413      	add	r3, r2
 800c85c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3310      	adds	r3, #16
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	429a      	cmp	r2, r3
 800c866:	d20d      	bcs.n	800c884 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c868:	2301      	movs	r3, #1
 800c86a:	e01d      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c86c:	79fb      	ldrb	r3, [r7, #7]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d006      	beq.n	800c880 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	425b      	negs	r3, r3
 800c87a:	4413      	add	r3, r2
 800c87c:	617b      	str	r3, [r7, #20]
 800c87e:	e001      	b.n	800c884 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c880:	2301      	movs	r3, #1
 800c882:	e011      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	895a      	ldrh	r2, [r3, #10]
 800c88e:	8a7b      	ldrh	r3, [r7, #18]
 800c890:	4413      	add	r3, r2
 800c892:	b29a      	uxth	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	891a      	ldrh	r2, [r3, #8]
 800c89c:	8a7b      	ldrh	r3, [r7, #18]
 800c89e:	4413      	add	r3, r2
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	811a      	strh	r2, [r3, #8]


  return 0;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	0801766c 	.word	0x0801766c
 800c8b4:	080177d0 	.word	0x080177d0
 800c8b8:	080176cc 	.word	0x080176cc

0800c8bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff ff8e 	bl	800c7ec <pbuf_add_header_impl>
 800c8d0:	4603      	mov	r3, r0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
	...

0800c8dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d106      	bne.n	800c8fa <pbuf_remove_header+0x1e>
 800c8ec:	4b20      	ldr	r3, [pc, #128]	; (800c970 <pbuf_remove_header+0x94>)
 800c8ee:	f240 224b 	movw	r2, #587	; 0x24b
 800c8f2:	4920      	ldr	r1, [pc, #128]	; (800c974 <pbuf_remove_header+0x98>)
 800c8f4:	4820      	ldr	r0, [pc, #128]	; (800c978 <pbuf_remove_header+0x9c>)
 800c8f6:	f009 fabd 	bl	8015e74 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d003      	beq.n	800c908 <pbuf_remove_header+0x2c>
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c906:	d301      	bcc.n	800c90c <pbuf_remove_header+0x30>
    return 1;
 800c908:	2301      	movs	r3, #1
 800c90a:	e02c      	b.n	800c966 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <pbuf_remove_header+0x3a>
    return 0;
 800c912:	2300      	movs	r3, #0
 800c914:	e027      	b.n	800c966 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	895b      	ldrh	r3, [r3, #10]
 800c91e:	89fa      	ldrh	r2, [r7, #14]
 800c920:	429a      	cmp	r2, r3
 800c922:	d908      	bls.n	800c936 <pbuf_remove_header+0x5a>
 800c924:	4b12      	ldr	r3, [pc, #72]	; (800c970 <pbuf_remove_header+0x94>)
 800c926:	f240 2255 	movw	r2, #597	; 0x255
 800c92a:	4914      	ldr	r1, [pc, #80]	; (800c97c <pbuf_remove_header+0xa0>)
 800c92c:	4812      	ldr	r0, [pc, #72]	; (800c978 <pbuf_remove_header+0x9c>)
 800c92e:	f009 faa1 	bl	8015e74 <iprintf>
 800c932:	2301      	movs	r3, #1
 800c934:	e017      	b.n	800c966 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	441a      	add	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	895a      	ldrh	r2, [r3, #10]
 800c94c:	89fb      	ldrh	r3, [r7, #14]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	b29a      	uxth	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	891a      	ldrh	r2, [r3, #8]
 800c95a:	89fb      	ldrh	r3, [r7, #14]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	0801766c 	.word	0x0801766c
 800c974:	080177d0 	.word	0x080177d0
 800c978:	080176cc 	.word	0x080176cc
 800c97c:	080177dc 	.word	0x080177dc

0800c980 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	807b      	strh	r3, [r7, #2]
 800c98c:	4613      	mov	r3, r2
 800c98e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c990:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c994:	2b00      	cmp	r3, #0
 800c996:	da08      	bge.n	800c9aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c99c:	425b      	negs	r3, r3
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7ff ff9b 	bl	800c8dc <pbuf_remove_header>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	e007      	b.n	800c9ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c9aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9ae:	787a      	ldrb	r2, [r7, #1]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7ff ff1a 	bl	800c7ec <pbuf_add_header_impl>
 800c9b8:	4603      	mov	r3, r0
  }
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c9ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff ffd2 	bl	800c980 <pbuf_header_impl>
 800c9dc:	4603      	mov	r3, r0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
	...

0800c9e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b088      	sub	sp, #32
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10b      	bne.n	800ca0e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d106      	bne.n	800ca0a <pbuf_free+0x22>
 800c9fc:	4b3b      	ldr	r3, [pc, #236]	; (800caec <pbuf_free+0x104>)
 800c9fe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ca02:	493b      	ldr	r1, [pc, #236]	; (800caf0 <pbuf_free+0x108>)
 800ca04:	483b      	ldr	r0, [pc, #236]	; (800caf4 <pbuf_free+0x10c>)
 800ca06:	f009 fa35 	bl	8015e74 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e069      	b.n	800cae2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ca12:	e062      	b.n	800cada <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ca14:	f009 f9ca 	bl	8015dac <sys_arch_protect>
 800ca18:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7b9b      	ldrb	r3, [r3, #14]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d106      	bne.n	800ca30 <pbuf_free+0x48>
 800ca22:	4b32      	ldr	r3, [pc, #200]	; (800caec <pbuf_free+0x104>)
 800ca24:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ca28:	4933      	ldr	r1, [pc, #204]	; (800caf8 <pbuf_free+0x110>)
 800ca2a:	4832      	ldr	r0, [pc, #200]	; (800caf4 <pbuf_free+0x10c>)
 800ca2c:	f009 fa22 	bl	8015e74 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7b9b      	ldrb	r3, [r3, #14]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	739a      	strb	r2, [r3, #14]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	7b9b      	ldrb	r3, [r3, #14]
 800ca40:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ca42:	69b8      	ldr	r0, [r7, #24]
 800ca44:	f009 f9c0 	bl	8015dc8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d143      	bne.n	800cad6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	7b1b      	ldrb	r3, [r3, #12]
 800ca58:	f003 030f 	and.w	r3, r3, #15
 800ca5c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	7b5b      	ldrb	r3, [r3, #13]
 800ca62:	f003 0302 	and.w	r3, r3, #2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d011      	beq.n	800ca8e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d106      	bne.n	800ca84 <pbuf_free+0x9c>
 800ca76:	4b1d      	ldr	r3, [pc, #116]	; (800caec <pbuf_free+0x104>)
 800ca78:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ca7c:	491f      	ldr	r1, [pc, #124]	; (800cafc <pbuf_free+0x114>)
 800ca7e:	481d      	ldr	r0, [pc, #116]	; (800caf4 <pbuf_free+0x10c>)
 800ca80:	f009 f9f8 	bl	8015e74 <iprintf>
        pc->custom_free_function(p);
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	4798      	blx	r3
 800ca8c:	e01d      	b.n	800caca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d104      	bne.n	800ca9e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	200c      	movs	r0, #12
 800ca98:	f7ff f906 	bl	800bca8 <memp_free>
 800ca9c:	e015      	b.n	800caca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d104      	bne.n	800caae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	200b      	movs	r0, #11
 800caa8:	f7ff f8fe 	bl	800bca8 <memp_free>
 800caac:	e00d      	b.n	800caca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <pbuf_free+0xd4>
          mem_free(p);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7fe fd89 	bl	800b5cc <mem_free>
 800caba:	e006      	b.n	800caca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cabc:	4b0b      	ldr	r3, [pc, #44]	; (800caec <pbuf_free+0x104>)
 800cabe:	f240 320f 	movw	r2, #783	; 0x30f
 800cac2:	490f      	ldr	r1, [pc, #60]	; (800cb00 <pbuf_free+0x118>)
 800cac4:	480b      	ldr	r0, [pc, #44]	; (800caf4 <pbuf_free+0x10c>)
 800cac6:	f009 f9d5 	bl	8015e74 <iprintf>
        }
      }
      count++;
 800caca:	7ffb      	ldrb	r3, [r7, #31]
 800cacc:	3301      	adds	r3, #1
 800cace:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	607b      	str	r3, [r7, #4]
 800cad4:	e001      	b.n	800cada <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d199      	bne.n	800ca14 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cae0:	7ffb      	ldrb	r3, [r7, #31]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3720      	adds	r7, #32
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	0801766c 	.word	0x0801766c
 800caf0:	080177d0 	.word	0x080177d0
 800caf4:	080176cc 	.word	0x080176cc
 800caf8:	080177fc 	.word	0x080177fc
 800cafc:	08017814 	.word	0x08017814
 800cb00:	08017838 	.word	0x08017838

0800cb04 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cb10:	e005      	b.n	800cb1e <pbuf_clen+0x1a>
    ++len;
 800cb12:	89fb      	ldrh	r3, [r7, #14]
 800cb14:	3301      	adds	r3, #1
 800cb16:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1f6      	bne.n	800cb12 <pbuf_clen+0xe>
  }
  return len;
 800cb24:	89fb      	ldrh	r3, [r7, #14]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
	...

0800cb34 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d016      	beq.n	800cb70 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cb42:	f009 f933 	bl	8015dac <sys_arch_protect>
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	7b9b      	ldrb	r3, [r3, #14]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	739a      	strb	r2, [r3, #14]
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f009 f937 	bl	8015dc8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7b9b      	ldrb	r3, [r3, #14]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <pbuf_ref+0x3c>
 800cb62:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <pbuf_ref+0x44>)
 800cb64:	f240 3242 	movw	r2, #834	; 0x342
 800cb68:	4904      	ldr	r1, [pc, #16]	; (800cb7c <pbuf_ref+0x48>)
 800cb6a:	4805      	ldr	r0, [pc, #20]	; (800cb80 <pbuf_ref+0x4c>)
 800cb6c:	f009 f982 	bl	8015e74 <iprintf>
  }
}
 800cb70:	bf00      	nop
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	0801766c 	.word	0x0801766c
 800cb7c:	0801784c 	.word	0x0801784c
 800cb80:	080176cc 	.word	0x080176cc

0800cb84 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <pbuf_cat+0x16>
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d107      	bne.n	800cbaa <pbuf_cat+0x26>
 800cb9a:	4b20      	ldr	r3, [pc, #128]	; (800cc1c <pbuf_cat+0x98>)
 800cb9c:	f240 325a 	movw	r2, #858	; 0x35a
 800cba0:	491f      	ldr	r1, [pc, #124]	; (800cc20 <pbuf_cat+0x9c>)
 800cba2:	4820      	ldr	r0, [pc, #128]	; (800cc24 <pbuf_cat+0xa0>)
 800cba4:	f009 f966 	bl	8015e74 <iprintf>
 800cba8:	e034      	b.n	800cc14 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	60fb      	str	r3, [r7, #12]
 800cbae:	e00a      	b.n	800cbc6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	891a      	ldrh	r2, [r3, #8]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	891b      	ldrh	r3, [r3, #8]
 800cbb8:	4413      	add	r3, r2
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	60fb      	str	r3, [r7, #12]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1f0      	bne.n	800cbb0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	891a      	ldrh	r2, [r3, #8]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	895b      	ldrh	r3, [r3, #10]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d006      	beq.n	800cbe8 <pbuf_cat+0x64>
 800cbda:	4b10      	ldr	r3, [pc, #64]	; (800cc1c <pbuf_cat+0x98>)
 800cbdc:	f240 3262 	movw	r2, #866	; 0x362
 800cbe0:	4911      	ldr	r1, [pc, #68]	; (800cc28 <pbuf_cat+0xa4>)
 800cbe2:	4810      	ldr	r0, [pc, #64]	; (800cc24 <pbuf_cat+0xa0>)
 800cbe4:	f009 f946 	bl	8015e74 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d006      	beq.n	800cbfe <pbuf_cat+0x7a>
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <pbuf_cat+0x98>)
 800cbf2:	f240 3263 	movw	r2, #867	; 0x363
 800cbf6:	490d      	ldr	r1, [pc, #52]	; (800cc2c <pbuf_cat+0xa8>)
 800cbf8:	480a      	ldr	r0, [pc, #40]	; (800cc24 <pbuf_cat+0xa0>)
 800cbfa:	f009 f93b 	bl	8015e74 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	891a      	ldrh	r2, [r3, #8]
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	891b      	ldrh	r3, [r3, #8]
 800cc06:	4413      	add	r3, r2
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	0801766c 	.word	0x0801766c
 800cc20:	08017860 	.word	0x08017860
 800cc24:	080176cc 	.word	0x080176cc
 800cc28:	08017898 	.word	0x08017898
 800cc2c:	080178c8 	.word	0x080178c8

0800cc30 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d008      	beq.n	800cc5a <pbuf_copy+0x2a>
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d005      	beq.n	800cc5a <pbuf_copy+0x2a>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	891a      	ldrh	r2, [r3, #8]
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	891b      	ldrh	r3, [r3, #8]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d209      	bcs.n	800cc6e <pbuf_copy+0x3e>
 800cc5a:	4b57      	ldr	r3, [pc, #348]	; (800cdb8 <pbuf_copy+0x188>)
 800cc5c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800cc60:	4956      	ldr	r1, [pc, #344]	; (800cdbc <pbuf_copy+0x18c>)
 800cc62:	4857      	ldr	r0, [pc, #348]	; (800cdc0 <pbuf_copy+0x190>)
 800cc64:	f009 f906 	bl	8015e74 <iprintf>
 800cc68:	f06f 030f 	mvn.w	r3, #15
 800cc6c:	e09f      	b.n	800cdae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	895b      	ldrh	r3, [r3, #10]
 800cc72:	461a      	mov	r2, r3
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	1ad2      	subs	r2, r2, r3
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	895b      	ldrh	r3, [r3, #10]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	1acb      	subs	r3, r1, r3
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d306      	bcc.n	800cc94 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	895b      	ldrh	r3, [r3, #10]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	60fb      	str	r3, [r7, #12]
 800cc92:	e005      	b.n	800cca0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	895b      	ldrh	r3, [r3, #10]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685a      	ldr	r2, [r3, #4]
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	18d0      	adds	r0, r2, r3
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	4413      	add	r3, r2
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	f009 f8cb 	bl	8015e4e <memcpy>
    offset_to += len;
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	895b      	ldrh	r3, [r3, #10]
 800cccc:	461a      	mov	r2, r3
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d906      	bls.n	800cce2 <pbuf_copy+0xb2>
 800ccd4:	4b38      	ldr	r3, [pc, #224]	; (800cdb8 <pbuf_copy+0x188>)
 800ccd6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ccda:	493a      	ldr	r1, [pc, #232]	; (800cdc4 <pbuf_copy+0x194>)
 800ccdc:	4838      	ldr	r0, [pc, #224]	; (800cdc0 <pbuf_copy+0x190>)
 800ccde:	f009 f8c9 	bl	8015e74 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	895b      	ldrh	r3, [r3, #10]
 800cce6:	461a      	mov	r2, r3
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d906      	bls.n	800ccfc <pbuf_copy+0xcc>
 800ccee:	4b32      	ldr	r3, [pc, #200]	; (800cdb8 <pbuf_copy+0x188>)
 800ccf0:	f240 32da 	movw	r2, #986	; 0x3da
 800ccf4:	4934      	ldr	r1, [pc, #208]	; (800cdc8 <pbuf_copy+0x198>)
 800ccf6:	4832      	ldr	r0, [pc, #200]	; (800cdc0 <pbuf_copy+0x190>)
 800ccf8:	f009 f8bc 	bl	8015e74 <iprintf>
    if (offset_from >= p_from->len) {
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	895b      	ldrh	r3, [r3, #10]
 800cd00:	461a      	mov	r2, r3
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d304      	bcc.n	800cd12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	895b      	ldrh	r3, [r3, #10]
 800cd16:	461a      	mov	r2, r3
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d114      	bne.n	800cd48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10c      	bne.n	800cd48 <pbuf_copy+0x118>
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d009      	beq.n	800cd48 <pbuf_copy+0x118>
 800cd34:	4b20      	ldr	r3, [pc, #128]	; (800cdb8 <pbuf_copy+0x188>)
 800cd36:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cd3a:	4924      	ldr	r1, [pc, #144]	; (800cdcc <pbuf_copy+0x19c>)
 800cd3c:	4820      	ldr	r0, [pc, #128]	; (800cdc0 <pbuf_copy+0x190>)
 800cd3e:	f009 f899 	bl	8015e74 <iprintf>
 800cd42:	f06f 030f 	mvn.w	r3, #15
 800cd46:	e032      	b.n	800cdae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d013      	beq.n	800cd76 <pbuf_copy+0x146>
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	895a      	ldrh	r2, [r3, #10]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	891b      	ldrh	r3, [r3, #8]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d10d      	bne.n	800cd76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d009      	beq.n	800cd76 <pbuf_copy+0x146>
 800cd62:	4b15      	ldr	r3, [pc, #84]	; (800cdb8 <pbuf_copy+0x188>)
 800cd64:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800cd68:	4919      	ldr	r1, [pc, #100]	; (800cdd0 <pbuf_copy+0x1a0>)
 800cd6a:	4815      	ldr	r0, [pc, #84]	; (800cdc0 <pbuf_copy+0x190>)
 800cd6c:	f009 f882 	bl	8015e74 <iprintf>
 800cd70:	f06f 0305 	mvn.w	r3, #5
 800cd74:	e01b      	b.n	800cdae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d013      	beq.n	800cda4 <pbuf_copy+0x174>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	895a      	ldrh	r2, [r3, #10]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	891b      	ldrh	r3, [r3, #8]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d10d      	bne.n	800cda4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d009      	beq.n	800cda4 <pbuf_copy+0x174>
 800cd90:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <pbuf_copy+0x188>)
 800cd92:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800cd96:	490e      	ldr	r1, [pc, #56]	; (800cdd0 <pbuf_copy+0x1a0>)
 800cd98:	4809      	ldr	r0, [pc, #36]	; (800cdc0 <pbuf_copy+0x190>)
 800cd9a:	f009 f86b 	bl	8015e74 <iprintf>
 800cd9e:	f06f 0305 	mvn.w	r3, #5
 800cda2:	e004      	b.n	800cdae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f47f af61 	bne.w	800cc6e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3718      	adds	r7, #24
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	0801766c 	.word	0x0801766c
 800cdbc:	08017914 	.word	0x08017914
 800cdc0:	080176cc 	.word	0x080176cc
 800cdc4:	08017944 	.word	0x08017944
 800cdc8:	0801795c 	.word	0x0801795c
 800cdcc:	08017978 	.word	0x08017978
 800cdd0:	08017988 	.word	0x08017988

0800cdd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b088      	sub	sp, #32
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4611      	mov	r1, r2
 800cde0:	461a      	mov	r2, r3
 800cde2:	460b      	mov	r3, r1
 800cde4:	80fb      	strh	r3, [r7, #6]
 800cde6:	4613      	mov	r3, r2
 800cde8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d108      	bne.n	800ce0a <pbuf_copy_partial+0x36>
 800cdf8:	4b2b      	ldr	r3, [pc, #172]	; (800cea8 <pbuf_copy_partial+0xd4>)
 800cdfa:	f240 420a 	movw	r2, #1034	; 0x40a
 800cdfe:	492b      	ldr	r1, [pc, #172]	; (800ceac <pbuf_copy_partial+0xd8>)
 800ce00:	482b      	ldr	r0, [pc, #172]	; (800ceb0 <pbuf_copy_partial+0xdc>)
 800ce02:	f009 f837 	bl	8015e74 <iprintf>
 800ce06:	2300      	movs	r3, #0
 800ce08:	e04a      	b.n	800cea0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d108      	bne.n	800ce22 <pbuf_copy_partial+0x4e>
 800ce10:	4b25      	ldr	r3, [pc, #148]	; (800cea8 <pbuf_copy_partial+0xd4>)
 800ce12:	f240 420b 	movw	r2, #1035	; 0x40b
 800ce16:	4927      	ldr	r1, [pc, #156]	; (800ceb4 <pbuf_copy_partial+0xe0>)
 800ce18:	4825      	ldr	r0, [pc, #148]	; (800ceb0 <pbuf_copy_partial+0xdc>)
 800ce1a:	f009 f82b 	bl	8015e74 <iprintf>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e03e      	b.n	800cea0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	61fb      	str	r3, [r7, #28]
 800ce26:	e034      	b.n	800ce92 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ce28:	88bb      	ldrh	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00a      	beq.n	800ce44 <pbuf_copy_partial+0x70>
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	895b      	ldrh	r3, [r3, #10]
 800ce32:	88ba      	ldrh	r2, [r7, #4]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d305      	bcc.n	800ce44 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	895b      	ldrh	r3, [r3, #10]
 800ce3c:	88ba      	ldrh	r2, [r7, #4]
 800ce3e:	1ad3      	subs	r3, r2, r3
 800ce40:	80bb      	strh	r3, [r7, #4]
 800ce42:	e023      	b.n	800ce8c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	895a      	ldrh	r2, [r3, #10]
 800ce48:	88bb      	ldrh	r3, [r7, #4]
 800ce4a:	1ad3      	subs	r3, r2, r3
 800ce4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ce4e:	8b3a      	ldrh	r2, [r7, #24]
 800ce50:	88fb      	ldrh	r3, [r7, #6]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d901      	bls.n	800ce5a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ce56:	88fb      	ldrh	r3, [r7, #6]
 800ce58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ce5a:	8b7b      	ldrh	r3, [r7, #26]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	18d0      	adds	r0, r2, r3
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	88bb      	ldrh	r3, [r7, #4]
 800ce66:	4413      	add	r3, r2
 800ce68:	8b3a      	ldrh	r2, [r7, #24]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	f008 ffef 	bl	8015e4e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ce70:	8afa      	ldrh	r2, [r7, #22]
 800ce72:	8b3b      	ldrh	r3, [r7, #24]
 800ce74:	4413      	add	r3, r2
 800ce76:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ce78:	8b7a      	ldrh	r2, [r7, #26]
 800ce7a:	8b3b      	ldrh	r3, [r7, #24]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ce80:	88fa      	ldrh	r2, [r7, #6]
 800ce82:	8b3b      	ldrh	r3, [r7, #24]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	61fb      	str	r3, [r7, #28]
 800ce92:	88fb      	ldrh	r3, [r7, #6]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <pbuf_copy_partial+0xca>
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1c4      	bne.n	800ce28 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ce9e:	8afb      	ldrh	r3, [r7, #22]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3720      	adds	r7, #32
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	0801766c 	.word	0x0801766c
 800ceac:	080179b4 	.word	0x080179b4
 800ceb0:	080176cc 	.word	0x080176cc
 800ceb4:	080179d4 	.word	0x080179d4

0800ceb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	603a      	str	r2, [r7, #0]
 800cec2:	71fb      	strb	r3, [r7, #7]
 800cec4:	460b      	mov	r3, r1
 800cec6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	8919      	ldrh	r1, [r3, #8]
 800cecc:	88ba      	ldrh	r2, [r7, #4]
 800cece:	79fb      	ldrb	r3, [r7, #7]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff faa9 	bl	800c428 <pbuf_alloc>
 800ced6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <pbuf_clone+0x2a>
    return NULL;
 800cede:	2300      	movs	r3, #0
 800cee0:	e011      	b.n	800cf06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	68f8      	ldr	r0, [r7, #12]
 800cee6:	f7ff fea3 	bl	800cc30 <pbuf_copy>
 800ceea:	4603      	mov	r3, r0
 800ceec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ceee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d006      	beq.n	800cf04 <pbuf_clone+0x4c>
 800cef6:	4b06      	ldr	r3, [pc, #24]	; (800cf10 <pbuf_clone+0x58>)
 800cef8:	f240 5224 	movw	r2, #1316	; 0x524
 800cefc:	4905      	ldr	r1, [pc, #20]	; (800cf14 <pbuf_clone+0x5c>)
 800cefe:	4806      	ldr	r0, [pc, #24]	; (800cf18 <pbuf_clone+0x60>)
 800cf00:	f008 ffb8 	bl	8015e74 <iprintf>
  return q;
 800cf04:	68fb      	ldr	r3, [r7, #12]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	0801766c 	.word	0x0801766c
 800cf14:	08017ae0 	.word	0x08017ae0
 800cf18:	080176cc 	.word	0x080176cc

0800cf1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cf20:	f008 ffc0 	bl	8015ea4 <rand>
 800cf24:	4603      	mov	r3, r0
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	4b01      	ldr	r3, [pc, #4]	; (800cf3c <tcp_init+0x20>)
 800cf36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cf38:	bf00      	nop
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20000010 	.word	0x20000010

0800cf40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7d1b      	ldrb	r3, [r3, #20]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d105      	bne.n	800cf5c <tcp_free+0x1c>
 800cf50:	4b06      	ldr	r3, [pc, #24]	; (800cf6c <tcp_free+0x2c>)
 800cf52:	22d4      	movs	r2, #212	; 0xd4
 800cf54:	4906      	ldr	r1, [pc, #24]	; (800cf70 <tcp_free+0x30>)
 800cf56:	4807      	ldr	r0, [pc, #28]	; (800cf74 <tcp_free+0x34>)
 800cf58:	f008 ff8c 	bl	8015e74 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cf5c:	6879      	ldr	r1, [r7, #4]
 800cf5e:	2001      	movs	r0, #1
 800cf60:	f7fe fea2 	bl	800bca8 <memp_free>
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	08017b6c 	.word	0x08017b6c
 800cf70:	08017b9c 	.word	0x08017b9c
 800cf74:	08017bb0 	.word	0x08017bb0

0800cf78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	7d1b      	ldrb	r3, [r3, #20]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d105      	bne.n	800cf94 <tcp_free_listen+0x1c>
 800cf88:	4b06      	ldr	r3, [pc, #24]	; (800cfa4 <tcp_free_listen+0x2c>)
 800cf8a:	22df      	movs	r2, #223	; 0xdf
 800cf8c:	4906      	ldr	r1, [pc, #24]	; (800cfa8 <tcp_free_listen+0x30>)
 800cf8e:	4807      	ldr	r0, [pc, #28]	; (800cfac <tcp_free_listen+0x34>)
 800cf90:	f008 ff70 	bl	8015e74 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	2002      	movs	r0, #2
 800cf98:	f7fe fe86 	bl	800bca8 <memp_free>
}
 800cf9c:	bf00      	nop
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	08017b6c 	.word	0x08017b6c
 800cfa8:	08017bd8 	.word	0x08017bd8
 800cfac:	08017bb0 	.word	0x08017bb0

0800cfb0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cfb4:	f001 f852 	bl	800e05c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cfb8:	4b07      	ldr	r3, [pc, #28]	; (800cfd8 <tcp_tmr+0x28>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	4b05      	ldr	r3, [pc, #20]	; (800cfd8 <tcp_tmr+0x28>)
 800cfc2:	701a      	strb	r2, [r3, #0]
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <tcp_tmr+0x28>)
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cfd0:	f000 fd06 	bl	800d9e0 <tcp_slowtmr>
  }
}
 800cfd4:	bf00      	nop
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	200044e1 	.word	0x200044e1

0800cfdc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d105      	bne.n	800cff8 <tcp_remove_listener+0x1c>
 800cfec:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <tcp_remove_listener+0x48>)
 800cfee:	22ff      	movs	r2, #255	; 0xff
 800cff0:	490d      	ldr	r1, [pc, #52]	; (800d028 <tcp_remove_listener+0x4c>)
 800cff2:	480e      	ldr	r0, [pc, #56]	; (800d02c <tcp_remove_listener+0x50>)
 800cff4:	f008 ff3e 	bl	8015e74 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	e00a      	b.n	800d014 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d002:	683a      	ldr	r2, [r7, #0]
 800d004:	429a      	cmp	r2, r3
 800d006:	d102      	bne.n	800d00e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1f1      	bne.n	800cffe <tcp_remove_listener+0x22>
    }
  }
}
 800d01a:	bf00      	nop
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	08017b6c 	.word	0x08017b6c
 800d028:	08017bf4 	.word	0x08017bf4
 800d02c:	08017bb0 	.word	0x08017bb0

0800d030 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <tcp_listen_closed+0x1c>
 800d03e:	4b14      	ldr	r3, [pc, #80]	; (800d090 <tcp_listen_closed+0x60>)
 800d040:	f240 1211 	movw	r2, #273	; 0x111
 800d044:	4913      	ldr	r1, [pc, #76]	; (800d094 <tcp_listen_closed+0x64>)
 800d046:	4814      	ldr	r0, [pc, #80]	; (800d098 <tcp_listen_closed+0x68>)
 800d048:	f008 ff14 	bl	8015e74 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	7d1b      	ldrb	r3, [r3, #20]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d006      	beq.n	800d062 <tcp_listen_closed+0x32>
 800d054:	4b0e      	ldr	r3, [pc, #56]	; (800d090 <tcp_listen_closed+0x60>)
 800d056:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d05a:	4910      	ldr	r1, [pc, #64]	; (800d09c <tcp_listen_closed+0x6c>)
 800d05c:	480e      	ldr	r0, [pc, #56]	; (800d098 <tcp_listen_closed+0x68>)
 800d05e:	f008 ff09 	bl	8015e74 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d062:	2301      	movs	r3, #1
 800d064:	60fb      	str	r3, [r7, #12]
 800d066:	e00b      	b.n	800d080 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d068:	4a0d      	ldr	r2, [pc, #52]	; (800d0a0 <tcp_listen_closed+0x70>)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff ffb1 	bl	800cfdc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3301      	adds	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2b03      	cmp	r3, #3
 800d084:	d9f0      	bls.n	800d068 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d086:	bf00      	nop
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	08017b6c 	.word	0x08017b6c
 800d094:	08017c1c 	.word	0x08017c1c
 800d098:	08017bb0 	.word	0x08017bb0
 800d09c:	08017c28 	.word	0x08017c28
 800d0a0:	0802a6c8 	.word	0x0802a6c8

0800d0a4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d0a4:	b5b0      	push	{r4, r5, r7, lr}
 800d0a6:	b088      	sub	sp, #32
 800d0a8:	af04      	add	r7, sp, #16
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d106      	bne.n	800d0c4 <tcp_close_shutdown+0x20>
 800d0b6:	4b61      	ldr	r3, [pc, #388]	; (800d23c <tcp_close_shutdown+0x198>)
 800d0b8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d0bc:	4960      	ldr	r1, [pc, #384]	; (800d240 <tcp_close_shutdown+0x19c>)
 800d0be:	4861      	ldr	r0, [pc, #388]	; (800d244 <tcp_close_shutdown+0x1a0>)
 800d0c0:	f008 fed8 	bl	8015e74 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d0c4:	78fb      	ldrb	r3, [r7, #3]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d066      	beq.n	800d198 <tcp_close_shutdown+0xf4>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	7d1b      	ldrb	r3, [r3, #20]
 800d0ce:	2b04      	cmp	r3, #4
 800d0d0:	d003      	beq.n	800d0da <tcp_close_shutdown+0x36>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	7d1b      	ldrb	r3, [r3, #20]
 800d0d6:	2b07      	cmp	r3, #7
 800d0d8:	d15e      	bne.n	800d198 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d104      	bne.n	800d0ec <tcp_close_shutdown+0x48>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d0ea:	d055      	beq.n	800d198 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	8b5b      	ldrh	r3, [r3, #26]
 800d0f0:	f003 0310 	and.w	r3, r3, #16
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d106      	bne.n	800d106 <tcp_close_shutdown+0x62>
 800d0f8:	4b50      	ldr	r3, [pc, #320]	; (800d23c <tcp_close_shutdown+0x198>)
 800d0fa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d0fe:	4952      	ldr	r1, [pc, #328]	; (800d248 <tcp_close_shutdown+0x1a4>)
 800d100:	4850      	ldr	r0, [pc, #320]	; (800d244 <tcp_close_shutdown+0x1a0>)
 800d102:	f008 feb7 	bl	8015e74 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d10e:	687d      	ldr	r5, [r7, #4]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3304      	adds	r3, #4
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	8ad2      	ldrh	r2, [r2, #22]
 800d118:	6879      	ldr	r1, [r7, #4]
 800d11a:	8b09      	ldrh	r1, [r1, #24]
 800d11c:	9102      	str	r1, [sp, #8]
 800d11e:	9201      	str	r2, [sp, #4]
 800d120:	9300      	str	r3, [sp, #0]
 800d122:	462b      	mov	r3, r5
 800d124:	4622      	mov	r2, r4
 800d126:	4601      	mov	r1, r0
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f005 fd99 	bl	8012c60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f001 fb68 	bl	800e804 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d134:	4b45      	ldr	r3, [pc, #276]	; (800d24c <tcp_close_shutdown+0x1a8>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d105      	bne.n	800d14a <tcp_close_shutdown+0xa6>
 800d13e:	4b43      	ldr	r3, [pc, #268]	; (800d24c <tcp_close_shutdown+0x1a8>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	4a41      	ldr	r2, [pc, #260]	; (800d24c <tcp_close_shutdown+0x1a8>)
 800d146:	6013      	str	r3, [r2, #0]
 800d148:	e013      	b.n	800d172 <tcp_close_shutdown+0xce>
 800d14a:	4b40      	ldr	r3, [pc, #256]	; (800d24c <tcp_close_shutdown+0x1a8>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	e00c      	b.n	800d16c <tcp_close_shutdown+0xc8>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d104      	bne.n	800d166 <tcp_close_shutdown+0xc2>
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	68da      	ldr	r2, [r3, #12]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	60da      	str	r2, [r3, #12]
 800d164:	e005      	b.n	800d172 <tcp_close_shutdown+0xce>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	60fb      	str	r3, [r7, #12]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1ef      	bne.n	800d152 <tcp_close_shutdown+0xae>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	60da      	str	r2, [r3, #12]
 800d178:	4b35      	ldr	r3, [pc, #212]	; (800d250 <tcp_close_shutdown+0x1ac>)
 800d17a:	2201      	movs	r2, #1
 800d17c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d17e:	4b35      	ldr	r3, [pc, #212]	; (800d254 <tcp_close_shutdown+0x1b0>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	429a      	cmp	r2, r3
 800d186:	d102      	bne.n	800d18e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d188:	f003 fffa 	bl	8011180 <tcp_trigger_input_pcb_close>
 800d18c:	e002      	b.n	800d194 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7ff fed6 	bl	800cf40 <tcp_free>
      }
      return ERR_OK;
 800d194:	2300      	movs	r3, #0
 800d196:	e04d      	b.n	800d234 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	7d1b      	ldrb	r3, [r3, #20]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d02d      	beq.n	800d1fc <tcp_close_shutdown+0x158>
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d036      	beq.n	800d212 <tcp_close_shutdown+0x16e>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d13f      	bne.n	800d228 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	8adb      	ldrh	r3, [r3, #22]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d021      	beq.n	800d1f4 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d1b0:	4b29      	ldr	r3, [pc, #164]	; (800d258 <tcp_close_shutdown+0x1b4>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d105      	bne.n	800d1c6 <tcp_close_shutdown+0x122>
 800d1ba:	4b27      	ldr	r3, [pc, #156]	; (800d258 <tcp_close_shutdown+0x1b4>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	4a25      	ldr	r2, [pc, #148]	; (800d258 <tcp_close_shutdown+0x1b4>)
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	e013      	b.n	800d1ee <tcp_close_shutdown+0x14a>
 800d1c6:	4b24      	ldr	r3, [pc, #144]	; (800d258 <tcp_close_shutdown+0x1b4>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60bb      	str	r3, [r7, #8]
 800d1cc:	e00c      	b.n	800d1e8 <tcp_close_shutdown+0x144>
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d104      	bne.n	800d1e2 <tcp_close_shutdown+0x13e>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68da      	ldr	r2, [r3, #12]
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	60da      	str	r2, [r3, #12]
 800d1e0:	e005      	b.n	800d1ee <tcp_close_shutdown+0x14a>
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	60bb      	str	r3, [r7, #8]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1ef      	bne.n	800d1ce <tcp_close_shutdown+0x12a>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff fea3 	bl	800cf40 <tcp_free>
      break;
 800d1fa:	e01a      	b.n	800d232 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7ff ff17 	bl	800d030 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d202:	6879      	ldr	r1, [r7, #4]
 800d204:	4815      	ldr	r0, [pc, #84]	; (800d25c <tcp_close_shutdown+0x1b8>)
 800d206:	f001 fb4d 	bl	800e8a4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff feb4 	bl	800cf78 <tcp_free_listen>
      break;
 800d210:	e00f      	b.n	800d232 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d212:	6879      	ldr	r1, [r7, #4]
 800d214:	480d      	ldr	r0, [pc, #52]	; (800d24c <tcp_close_shutdown+0x1a8>)
 800d216:	f001 fb45 	bl	800e8a4 <tcp_pcb_remove>
 800d21a:	4b0d      	ldr	r3, [pc, #52]	; (800d250 <tcp_close_shutdown+0x1ac>)
 800d21c:	2201      	movs	r2, #1
 800d21e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7ff fe8d 	bl	800cf40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d226:	e004      	b.n	800d232 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f819 	bl	800d260 <tcp_close_shutdown_fin>
 800d22e:	4603      	mov	r3, r0
 800d230:	e000      	b.n	800d234 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bdb0      	pop	{r4, r5, r7, pc}
 800d23c:	08017b6c 	.word	0x08017b6c
 800d240:	08017c40 	.word	0x08017c40
 800d244:	08017bb0 	.word	0x08017bb0
 800d248:	08017c60 	.word	0x08017c60
 800d24c:	2000b500 	.word	0x2000b500
 800d250:	2000b4fc 	.word	0x2000b4fc
 800d254:	2000b514 	.word	0x2000b514
 800d258:	2000b50c 	.word	0x2000b50c
 800d25c:	2000b508 	.word	0x2000b508

0800d260 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d106      	bne.n	800d27c <tcp_close_shutdown_fin+0x1c>
 800d26e:	4b2c      	ldr	r3, [pc, #176]	; (800d320 <tcp_close_shutdown_fin+0xc0>)
 800d270:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d274:	492b      	ldr	r1, [pc, #172]	; (800d324 <tcp_close_shutdown_fin+0xc4>)
 800d276:	482c      	ldr	r0, [pc, #176]	; (800d328 <tcp_close_shutdown_fin+0xc8>)
 800d278:	f008 fdfc 	bl	8015e74 <iprintf>

  switch (pcb->state) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	7d1b      	ldrb	r3, [r3, #20]
 800d280:	2b04      	cmp	r3, #4
 800d282:	d010      	beq.n	800d2a6 <tcp_close_shutdown_fin+0x46>
 800d284:	2b07      	cmp	r3, #7
 800d286:	d01b      	beq.n	800d2c0 <tcp_close_shutdown_fin+0x60>
 800d288:	2b03      	cmp	r3, #3
 800d28a:	d126      	bne.n	800d2da <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f004 fde3 	bl	8011e58 <tcp_send_fin>
 800d292:	4603      	mov	r3, r0
 800d294:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d11f      	bne.n	800d2de <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2205      	movs	r2, #5
 800d2a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d2a4:	e01b      	b.n	800d2de <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f004 fdd6 	bl	8011e58 <tcp_send_fin>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d2b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d114      	bne.n	800d2e2 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2205      	movs	r2, #5
 800d2bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d2be:	e010      	b.n	800d2e2 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f004 fdc9 	bl	8011e58 <tcp_send_fin>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d109      	bne.n	800d2e6 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2209      	movs	r2, #9
 800d2d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d2d8:	e005      	b.n	800d2e6 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e01c      	b.n	800d318 <tcp_close_shutdown_fin+0xb8>
      break;
 800d2de:	bf00      	nop
 800d2e0:	e002      	b.n	800d2e8 <tcp_close_shutdown_fin+0x88>
      break;
 800d2e2:	bf00      	nop
 800d2e4:	e000      	b.n	800d2e8 <tcp_close_shutdown_fin+0x88>
      break;
 800d2e6:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d2e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d103      	bne.n	800d2f8 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f004 feef 	bl	80120d4 <tcp_output>
 800d2f6:	e00d      	b.n	800d314 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800d2f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d300:	d108      	bne.n	800d314 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	8b5b      	ldrh	r3, [r3, #26]
 800d306:	f043 0308 	orr.w	r3, r3, #8
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	e001      	b.n	800d318 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800d314:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	08017b6c 	.word	0x08017b6c
 800d324:	08017c1c 	.word	0x08017c1c
 800d328:	08017bb0 	.word	0x08017bb0

0800d32c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d109      	bne.n	800d34e <tcp_close+0x22>
 800d33a:	4b0f      	ldr	r3, [pc, #60]	; (800d378 <tcp_close+0x4c>)
 800d33c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d340:	490e      	ldr	r1, [pc, #56]	; (800d37c <tcp_close+0x50>)
 800d342:	480f      	ldr	r0, [pc, #60]	; (800d380 <tcp_close+0x54>)
 800d344:	f008 fd96 	bl	8015e74 <iprintf>
 800d348:	f06f 030f 	mvn.w	r3, #15
 800d34c:	e00f      	b.n	800d36e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	7d1b      	ldrb	r3, [r3, #20]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d006      	beq.n	800d364 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	8b5b      	ldrh	r3, [r3, #26]
 800d35a:	f043 0310 	orr.w	r3, r3, #16
 800d35e:	b29a      	uxth	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d364:	2101      	movs	r1, #1
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7ff fe9c 	bl	800d0a4 <tcp_close_shutdown>
 800d36c:	4603      	mov	r3, r0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	08017b6c 	.word	0x08017b6c
 800d37c:	08017c7c 	.word	0x08017c7c
 800d380:	08017bb0 	.word	0x08017bb0

0800d384 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08e      	sub	sp, #56	; 0x38
 800d388:	af04      	add	r7, sp, #16
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d107      	bne.n	800d3a4 <tcp_abandon+0x20>
 800d394:	4b52      	ldr	r3, [pc, #328]	; (800d4e0 <tcp_abandon+0x15c>)
 800d396:	f240 223d 	movw	r2, #573	; 0x23d
 800d39a:	4952      	ldr	r1, [pc, #328]	; (800d4e4 <tcp_abandon+0x160>)
 800d39c:	4852      	ldr	r0, [pc, #328]	; (800d4e8 <tcp_abandon+0x164>)
 800d39e:	f008 fd69 	bl	8015e74 <iprintf>
 800d3a2:	e099      	b.n	800d4d8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7d1b      	ldrb	r3, [r3, #20]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d106      	bne.n	800d3ba <tcp_abandon+0x36>
 800d3ac:	4b4c      	ldr	r3, [pc, #304]	; (800d4e0 <tcp_abandon+0x15c>)
 800d3ae:	f240 2241 	movw	r2, #577	; 0x241
 800d3b2:	494e      	ldr	r1, [pc, #312]	; (800d4ec <tcp_abandon+0x168>)
 800d3b4:	484c      	ldr	r0, [pc, #304]	; (800d4e8 <tcp_abandon+0x164>)
 800d3b6:	f008 fd5d 	bl	8015e74 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	7d1b      	ldrb	r3, [r3, #20]
 800d3be:	2b0a      	cmp	r3, #10
 800d3c0:	d107      	bne.n	800d3d2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	484a      	ldr	r0, [pc, #296]	; (800d4f0 <tcp_abandon+0x16c>)
 800d3c6:	f001 fa6d 	bl	800e8a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7ff fdb8 	bl	800cf40 <tcp_free>
 800d3d0:	e082      	b.n	800d4d8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3de:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7d1b      	ldrb	r3, [r3, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d126      	bne.n	800d44a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	8adb      	ldrh	r3, [r3, #22]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d02e      	beq.n	800d462 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d404:	4b3b      	ldr	r3, [pc, #236]	; (800d4f4 <tcp_abandon+0x170>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d105      	bne.n	800d41a <tcp_abandon+0x96>
 800d40e:	4b39      	ldr	r3, [pc, #228]	; (800d4f4 <tcp_abandon+0x170>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	4a37      	ldr	r2, [pc, #220]	; (800d4f4 <tcp_abandon+0x170>)
 800d416:	6013      	str	r3, [r2, #0]
 800d418:	e013      	b.n	800d442 <tcp_abandon+0xbe>
 800d41a:	4b36      	ldr	r3, [pc, #216]	; (800d4f4 <tcp_abandon+0x170>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	61fb      	str	r3, [r7, #28]
 800d420:	e00c      	b.n	800d43c <tcp_abandon+0xb8>
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d104      	bne.n	800d436 <tcp_abandon+0xb2>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68da      	ldr	r2, [r3, #12]
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	60da      	str	r2, [r3, #12]
 800d434:	e005      	b.n	800d442 <tcp_abandon+0xbe>
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	61fb      	str	r3, [r7, #28]
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1ef      	bne.n	800d422 <tcp_abandon+0x9e>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	60da      	str	r2, [r3, #12]
 800d448:	e00b      	b.n	800d462 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	8adb      	ldrh	r3, [r3, #22]
 800d452:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d454:	6879      	ldr	r1, [r7, #4]
 800d456:	4828      	ldr	r0, [pc, #160]	; (800d4f8 <tcp_abandon+0x174>)
 800d458:	f001 fa24 	bl	800e8a4 <tcp_pcb_remove>
 800d45c:	4b27      	ldr	r3, [pc, #156]	; (800d4fc <tcp_abandon+0x178>)
 800d45e:	2201      	movs	r2, #1
 800d460:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d466:	2b00      	cmp	r3, #0
 800d468:	d004      	beq.n	800d474 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 fed4 	bl	800e21c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d004      	beq.n	800d486 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d480:	4618      	mov	r0, r3
 800d482:	f000 fecb 	bl	800e21c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d004      	beq.n	800d498 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d492:	4618      	mov	r0, r3
 800d494:	f000 fec2 	bl	800e21c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00e      	beq.n	800d4bc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d49e:	6879      	ldr	r1, [r7, #4]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	8b12      	ldrh	r2, [r2, #24]
 800d4a8:	9202      	str	r2, [sp, #8]
 800d4aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d4ac:	9201      	str	r2, [sp, #4]
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	69b9      	ldr	r1, [r7, #24]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f005 fbd2 	bl	8012c60 <tcp_rst>
    }
    last_state = pcb->state;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	7d1b      	ldrb	r3, [r3, #20]
 800d4c0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff fd3c 	bl	800cf40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d004      	beq.n	800d4d8 <tcp_abandon+0x154>
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	f06f 010c 	mvn.w	r1, #12
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	4798      	blx	r3
  }
}
 800d4d8:	3728      	adds	r7, #40	; 0x28
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	08017b6c 	.word	0x08017b6c
 800d4e4:	08017cb0 	.word	0x08017cb0
 800d4e8:	08017bb0 	.word	0x08017bb0
 800d4ec:	08017ccc 	.word	0x08017ccc
 800d4f0:	2000b510 	.word	0x2000b510
 800d4f4:	2000b50c 	.word	0x2000b50c
 800d4f8:	2000b500 	.word	0x2000b500
 800d4fc:	2000b4fc 	.word	0x2000b4fc

0800d500 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d508:	2101      	movs	r1, #1
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7ff ff3a 	bl	800d384 <tcp_abandon>
}
 800d510:	bf00      	nop
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b088      	sub	sp, #32
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	4613      	mov	r3, r2
 800d524:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d526:	2304      	movs	r3, #4
 800d528:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d530:	4b3e      	ldr	r3, [pc, #248]	; (800d62c <tcp_bind+0x114>)
 800d532:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d109      	bne.n	800d54e <tcp_bind+0x36>
 800d53a:	4b3d      	ldr	r3, [pc, #244]	; (800d630 <tcp_bind+0x118>)
 800d53c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d540:	493c      	ldr	r1, [pc, #240]	; (800d634 <tcp_bind+0x11c>)
 800d542:	483d      	ldr	r0, [pc, #244]	; (800d638 <tcp_bind+0x120>)
 800d544:	f008 fc96 	bl	8015e74 <iprintf>
 800d548:	f06f 030f 	mvn.w	r3, #15
 800d54c:	e06a      	b.n	800d624 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	7d1b      	ldrb	r3, [r3, #20]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d009      	beq.n	800d56a <tcp_bind+0x52>
 800d556:	4b36      	ldr	r3, [pc, #216]	; (800d630 <tcp_bind+0x118>)
 800d558:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d55c:	4937      	ldr	r1, [pc, #220]	; (800d63c <tcp_bind+0x124>)
 800d55e:	4836      	ldr	r0, [pc, #216]	; (800d638 <tcp_bind+0x120>)
 800d560:	f008 fc88 	bl	8015e74 <iprintf>
 800d564:	f06f 0305 	mvn.w	r3, #5
 800d568:	e05c      	b.n	800d624 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d56a:	88fb      	ldrh	r3, [r7, #6]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d109      	bne.n	800d584 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d570:	f000 f9f0 	bl	800d954 <tcp_new_port>
 800d574:	4603      	mov	r3, r0
 800d576:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d578:	88fb      	ldrh	r3, [r7, #6]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d135      	bne.n	800d5ea <tcp_bind+0xd2>
      return ERR_BUF;
 800d57e:	f06f 0301 	mvn.w	r3, #1
 800d582:	e04f      	b.n	800d624 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d584:	2300      	movs	r3, #0
 800d586:	61fb      	str	r3, [r7, #28]
 800d588:	e02b      	b.n	800d5e2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d58a:	4a2d      	ldr	r2, [pc, #180]	; (800d640 <tcp_bind+0x128>)
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	61bb      	str	r3, [r7, #24]
 800d596:	e01e      	b.n	800d5d6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	8adb      	ldrh	r3, [r3, #22]
 800d59c:	88fa      	ldrh	r2, [r7, #6]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d116      	bne.n	800d5d0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d5a2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d010      	beq.n	800d5ca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00c      	beq.n	800d5ca <tcp_bind+0xb2>
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d009      	beq.n	800d5ca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d005      	beq.n	800d5ca <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d102      	bne.n	800d5d0 <tcp_bind+0xb8>
              return ERR_USE;
 800d5ca:	f06f 0307 	mvn.w	r3, #7
 800d5ce:	e029      	b.n	800d624 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	61bb      	str	r3, [r7, #24]
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1dd      	bne.n	800d598 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	61fb      	str	r3, [r7, #28]
 800d5e2:	69fa      	ldr	r2, [r7, #28]
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	dbcf      	blt.n	800d58a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00c      	beq.n	800d60a <tcp_bind+0xf2>
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d008      	beq.n	800d60a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d002      	beq.n	800d604 <tcp_bind+0xec>
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	e000      	b.n	800d606 <tcp_bind+0xee>
 800d604:	2300      	movs	r3, #0
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	88fa      	ldrh	r2, [r7, #6]
 800d60e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d610:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <tcp_bind+0x12c>)
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	60da      	str	r2, [r3, #12]
 800d618:	4a0a      	ldr	r2, [pc, #40]	; (800d644 <tcp_bind+0x12c>)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6013      	str	r3, [r2, #0]
 800d61e:	f005 fce1 	bl	8012fe4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3720      	adds	r7, #32
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	0802a6f0 	.word	0x0802a6f0
 800d630:	08017b6c 	.word	0x08017b6c
 800d634:	08017d00 	.word	0x08017d00
 800d638:	08017bb0 	.word	0x08017bb0
 800d63c:	08017d18 	.word	0x08017d18
 800d640:	0802a6c8 	.word	0x0802a6c8
 800d644:	2000b50c 	.word	0x2000b50c

0800d648 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	4613      	mov	r3, r2
 800d654:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d106      	bne.n	800d66a <tcp_accept_null+0x22>
 800d65c:	4b07      	ldr	r3, [pc, #28]	; (800d67c <tcp_accept_null+0x34>)
 800d65e:	f240 320f 	movw	r2, #783	; 0x30f
 800d662:	4907      	ldr	r1, [pc, #28]	; (800d680 <tcp_accept_null+0x38>)
 800d664:	4807      	ldr	r0, [pc, #28]	; (800d684 <tcp_accept_null+0x3c>)
 800d666:	f008 fc05 	bl	8015e74 <iprintf>

  tcp_abort(pcb);
 800d66a:	68b8      	ldr	r0, [r7, #8]
 800d66c:	f7ff ff48 	bl	800d500 <tcp_abort>

  return ERR_ABRT;
 800d670:	f06f 030c 	mvn.w	r3, #12
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	08017b6c 	.word	0x08017b6c
 800d680:	08017d40 	.word	0x08017d40
 800d684:	08017bb0 	.word	0x08017bb0

0800d688 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d694:	78fb      	ldrb	r3, [r7, #3]
 800d696:	2200      	movs	r2, #0
 800d698:	4619      	mov	r1, r3
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f806 	bl	800d6ac <tcp_listen_with_backlog_and_err>
 800d6a0:	4603      	mov	r3, r0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	607a      	str	r2, [r7, #4]
 800d6b8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d109      	bne.n	800d6d8 <tcp_listen_with_backlog_and_err+0x2c>
 800d6c4:	4b47      	ldr	r3, [pc, #284]	; (800d7e4 <tcp_listen_with_backlog_and_err+0x138>)
 800d6c6:	f240 3259 	movw	r2, #857	; 0x359
 800d6ca:	4947      	ldr	r1, [pc, #284]	; (800d7e8 <tcp_listen_with_backlog_and_err+0x13c>)
 800d6cc:	4847      	ldr	r0, [pc, #284]	; (800d7ec <tcp_listen_with_backlog_and_err+0x140>)
 800d6ce:	f008 fbd1 	bl	8015e74 <iprintf>
 800d6d2:	23f0      	movs	r3, #240	; 0xf0
 800d6d4:	76fb      	strb	r3, [r7, #27]
 800d6d6:	e079      	b.n	800d7cc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	7d1b      	ldrb	r3, [r3, #20]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d009      	beq.n	800d6f4 <tcp_listen_with_backlog_and_err+0x48>
 800d6e0:	4b40      	ldr	r3, [pc, #256]	; (800d7e4 <tcp_listen_with_backlog_and_err+0x138>)
 800d6e2:	f240 325a 	movw	r2, #858	; 0x35a
 800d6e6:	4942      	ldr	r1, [pc, #264]	; (800d7f0 <tcp_listen_with_backlog_and_err+0x144>)
 800d6e8:	4840      	ldr	r0, [pc, #256]	; (800d7ec <tcp_listen_with_backlog_and_err+0x140>)
 800d6ea:	f008 fbc3 	bl	8015e74 <iprintf>
 800d6ee:	23f1      	movs	r3, #241	; 0xf1
 800d6f0:	76fb      	strb	r3, [r7, #27]
 800d6f2:	e06b      	b.n	800d7cc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	7d1b      	ldrb	r3, [r3, #20]
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d104      	bne.n	800d706 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d700:	23f7      	movs	r3, #247	; 0xf7
 800d702:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d704:	e062      	b.n	800d7cc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d706:	2002      	movs	r0, #2
 800d708:	f7fe fa7c 	bl	800bc04 <memp_malloc>
 800d70c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d102      	bne.n	800d71a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d714:	23ff      	movs	r3, #255	; 0xff
 800d716:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d718:	e058      	b.n	800d7cc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	691a      	ldr	r2, [r3, #16]
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	8ada      	ldrh	r2, [r3, #22]
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	2201      	movs	r2, #1
 800d72e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	7d5a      	ldrb	r2, [r3, #21]
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	7a5a      	ldrb	r2, [r3, #9]
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	2200      	movs	r2, #0
 800d744:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	7ada      	ldrb	r2, [r3, #11]
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	7a9a      	ldrb	r2, [r3, #10]
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	8adb      	ldrh	r3, [r3, #22]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d021      	beq.n	800d7aa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d766:	4b23      	ldr	r3, [pc, #140]	; (800d7f4 <tcp_listen_with_backlog_and_err+0x148>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d105      	bne.n	800d77c <tcp_listen_with_backlog_and_err+0xd0>
 800d770:	4b20      	ldr	r3, [pc, #128]	; (800d7f4 <tcp_listen_with_backlog_and_err+0x148>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	4a1f      	ldr	r2, [pc, #124]	; (800d7f4 <tcp_listen_with_backlog_and_err+0x148>)
 800d778:	6013      	str	r3, [r2, #0]
 800d77a:	e013      	b.n	800d7a4 <tcp_listen_with_backlog_and_err+0xf8>
 800d77c:	4b1d      	ldr	r3, [pc, #116]	; (800d7f4 <tcp_listen_with_backlog_and_err+0x148>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	617b      	str	r3, [r7, #20]
 800d782:	e00c      	b.n	800d79e <tcp_listen_with_backlog_and_err+0xf2>
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d104      	bne.n	800d798 <tcp_listen_with_backlog_and_err+0xec>
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	68da      	ldr	r2, [r3, #12]
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	60da      	str	r2, [r3, #12]
 800d796:	e005      	b.n	800d7a4 <tcp_listen_with_backlog_and_err+0xf8>
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	617b      	str	r3, [r7, #20]
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1ef      	bne.n	800d784 <tcp_listen_with_backlog_and_err+0xd8>
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7ff fbc8 	bl	800cf40 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	4a11      	ldr	r2, [pc, #68]	; (800d7f8 <tcp_listen_with_backlog_and_err+0x14c>)
 800d7b4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d7b6:	4b11      	ldr	r3, [pc, #68]	; (800d7fc <tcp_listen_with_backlog_and_err+0x150>)
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	60da      	str	r2, [r3, #12]
 800d7be:	4a0f      	ldr	r2, [pc, #60]	; (800d7fc <tcp_listen_with_backlog_and_err+0x150>)
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	f005 fc0e 	bl	8012fe4 <tcp_timer_needed>
  res = ERR_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d002      	beq.n	800d7d8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	7efa      	ldrb	r2, [r7, #27]
 800d7d6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3720      	adds	r7, #32
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	08017b6c 	.word	0x08017b6c
 800d7e8:	08017d60 	.word	0x08017d60
 800d7ec:	08017bb0 	.word	0x08017bb0
 800d7f0:	08017d90 	.word	0x08017d90
 800d7f4:	2000b50c 	.word	0x2000b50c
 800d7f8:	0800d649 	.word	0x0800d649
 800d7fc:	2000b508 	.word	0x2000b508

0800d800 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d106      	bne.n	800d81c <tcp_update_rcv_ann_wnd+0x1c>
 800d80e:	4b25      	ldr	r3, [pc, #148]	; (800d8a4 <tcp_update_rcv_ann_wnd+0xa4>)
 800d810:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d814:	4924      	ldr	r1, [pc, #144]	; (800d8a8 <tcp_update_rcv_ann_wnd+0xa8>)
 800d816:	4825      	ldr	r0, [pc, #148]	; (800d8ac <tcp_update_rcv_ann_wnd+0xac>)
 800d818:	f008 fb2c 	bl	8015e74 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d824:	4413      	add	r3, r2
 800d826:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d830:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d834:	bf28      	it	cs
 800d836:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d83a:	b292      	uxth	r2, r2
 800d83c:	4413      	add	r3, r2
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	db08      	blt.n	800d858 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	1ad3      	subs	r3, r2, r3
 800d856:	e020      	b.n	800d89a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	2b00      	cmp	r3, #0
 800d864:	dd03      	ble.n	800d86e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d86c:	e014      	b.n	800d898 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d880:	d306      	bcc.n	800d890 <tcp_update_rcv_ann_wnd+0x90>
 800d882:	4b08      	ldr	r3, [pc, #32]	; (800d8a4 <tcp_update_rcv_ann_wnd+0xa4>)
 800d884:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d888:	4909      	ldr	r1, [pc, #36]	; (800d8b0 <tcp_update_rcv_ann_wnd+0xb0>)
 800d88a:	4808      	ldr	r0, [pc, #32]	; (800d8ac <tcp_update_rcv_ann_wnd+0xac>)
 800d88c:	f008 faf2 	bl	8015e74 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	b29a      	uxth	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d898:	2300      	movs	r3, #0
  }
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	08017b6c 	.word	0x08017b6c
 800d8a8:	08017dc8 	.word	0x08017dc8
 800d8ac:	08017bb0 	.word	0x08017bb0
 800d8b0:	08017dec 	.word	0x08017dec

0800d8b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d107      	bne.n	800d8d6 <tcp_recved+0x22>
 800d8c6:	4b1f      	ldr	r3, [pc, #124]	; (800d944 <tcp_recved+0x90>)
 800d8c8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d8cc:	491e      	ldr	r1, [pc, #120]	; (800d948 <tcp_recved+0x94>)
 800d8ce:	481f      	ldr	r0, [pc, #124]	; (800d94c <tcp_recved+0x98>)
 800d8d0:	f008 fad0 	bl	8015e74 <iprintf>
 800d8d4:	e032      	b.n	800d93c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	7d1b      	ldrb	r3, [r3, #20]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d106      	bne.n	800d8ec <tcp_recved+0x38>
 800d8de:	4b19      	ldr	r3, [pc, #100]	; (800d944 <tcp_recved+0x90>)
 800d8e0:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d8e4:	491a      	ldr	r1, [pc, #104]	; (800d950 <tcp_recved+0x9c>)
 800d8e6:	4819      	ldr	r0, [pc, #100]	; (800d94c <tcp_recved+0x98>)
 800d8e8:	f008 fac4 	bl	8015e74 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d8f0:	887b      	ldrh	r3, [r7, #2]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d8f6:	89fb      	ldrh	r3, [r7, #14]
 800d8f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8fc:	d804      	bhi.n	800d908 <tcp_recved+0x54>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d902:	89fa      	ldrh	r2, [r7, #14]
 800d904:	429a      	cmp	r2, r3
 800d906:	d204      	bcs.n	800d912 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d90e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d910:	e002      	b.n	800d918 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	89fa      	ldrh	r2, [r7, #14]
 800d916:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ff71 	bl	800d800 <tcp_update_rcv_ann_wnd>
 800d91e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d926:	d309      	bcc.n	800d93c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	8b5b      	ldrh	r3, [r3, #26]
 800d92c:	f043 0302 	orr.w	r3, r3, #2
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f004 fbcc 	bl	80120d4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	08017b6c 	.word	0x08017b6c
 800d948:	08017e08 	.word	0x08017e08
 800d94c:	08017bb0 	.word	0x08017bb0
 800d950:	08017e20 	.word	0x08017e20

0800d954 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d95e:	4b1e      	ldr	r3, [pc, #120]	; (800d9d8 <tcp_new_port+0x84>)
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	3301      	adds	r3, #1
 800d964:	b29a      	uxth	r2, r3
 800d966:	4b1c      	ldr	r3, [pc, #112]	; (800d9d8 <tcp_new_port+0x84>)
 800d968:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d96a:	4b1b      	ldr	r3, [pc, #108]	; (800d9d8 <tcp_new_port+0x84>)
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d972:	4293      	cmp	r3, r2
 800d974:	d103      	bne.n	800d97e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d976:	4b18      	ldr	r3, [pc, #96]	; (800d9d8 <tcp_new_port+0x84>)
 800d978:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d97c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d97e:	2300      	movs	r3, #0
 800d980:	71fb      	strb	r3, [r7, #7]
 800d982:	e01e      	b.n	800d9c2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d984:	79fb      	ldrb	r3, [r7, #7]
 800d986:	4a15      	ldr	r2, [pc, #84]	; (800d9dc <tcp_new_port+0x88>)
 800d988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	603b      	str	r3, [r7, #0]
 800d990:	e011      	b.n	800d9b6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	8ada      	ldrh	r2, [r3, #22]
 800d996:	4b10      	ldr	r3, [pc, #64]	; (800d9d8 <tcp_new_port+0x84>)
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d108      	bne.n	800d9b0 <tcp_new_port+0x5c>
        n++;
 800d99e:	88bb      	ldrh	r3, [r7, #4]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d9a4:	88bb      	ldrh	r3, [r7, #4]
 800d9a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9aa:	d3d8      	bcc.n	800d95e <tcp_new_port+0xa>
          return 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	e00d      	b.n	800d9cc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	603b      	str	r3, [r7, #0]
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1ea      	bne.n	800d992 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d9bc:	79fb      	ldrb	r3, [r7, #7]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	71fb      	strb	r3, [r7, #7]
 800d9c2:	79fb      	ldrb	r3, [r7, #7]
 800d9c4:	2b03      	cmp	r3, #3
 800d9c6:	d9dd      	bls.n	800d984 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d9c8:	4b03      	ldr	r3, [pc, #12]	; (800d9d8 <tcp_new_port+0x84>)
 800d9ca:	881b      	ldrh	r3, [r3, #0]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr
 800d9d8:	20000010 	.word	0x20000010
 800d9dc:	0802a6c8 	.word	0x0802a6c8

0800d9e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d9e0:	b5b0      	push	{r4, r5, r7, lr}
 800d9e2:	b090      	sub	sp, #64	; 0x40
 800d9e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d9ec:	4b94      	ldr	r3, [pc, #592]	; (800dc40 <tcp_slowtmr+0x260>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	4a93      	ldr	r2, [pc, #588]	; (800dc40 <tcp_slowtmr+0x260>)
 800d9f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d9f6:	4b93      	ldr	r3, [pc, #588]	; (800dc44 <tcp_slowtmr+0x264>)
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	4b91      	ldr	r3, [pc, #580]	; (800dc44 <tcp_slowtmr+0x264>)
 800da00:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800da02:	2300      	movs	r3, #0
 800da04:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800da06:	4b90      	ldr	r3, [pc, #576]	; (800dc48 <tcp_slowtmr+0x268>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800da0c:	e29d      	b.n	800df4a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	7d1b      	ldrb	r3, [r3, #20]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d106      	bne.n	800da24 <tcp_slowtmr+0x44>
 800da16:	4b8d      	ldr	r3, [pc, #564]	; (800dc4c <tcp_slowtmr+0x26c>)
 800da18:	f240 42be 	movw	r2, #1214	; 0x4be
 800da1c:	498c      	ldr	r1, [pc, #560]	; (800dc50 <tcp_slowtmr+0x270>)
 800da1e:	488d      	ldr	r0, [pc, #564]	; (800dc54 <tcp_slowtmr+0x274>)
 800da20:	f008 fa28 	bl	8015e74 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800da24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da26:	7d1b      	ldrb	r3, [r3, #20]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d106      	bne.n	800da3a <tcp_slowtmr+0x5a>
 800da2c:	4b87      	ldr	r3, [pc, #540]	; (800dc4c <tcp_slowtmr+0x26c>)
 800da2e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800da32:	4989      	ldr	r1, [pc, #548]	; (800dc58 <tcp_slowtmr+0x278>)
 800da34:	4887      	ldr	r0, [pc, #540]	; (800dc54 <tcp_slowtmr+0x274>)
 800da36:	f008 fa1d 	bl	8015e74 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	7d1b      	ldrb	r3, [r3, #20]
 800da3e:	2b0a      	cmp	r3, #10
 800da40:	d106      	bne.n	800da50 <tcp_slowtmr+0x70>
 800da42:	4b82      	ldr	r3, [pc, #520]	; (800dc4c <tcp_slowtmr+0x26c>)
 800da44:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800da48:	4984      	ldr	r1, [pc, #528]	; (800dc5c <tcp_slowtmr+0x27c>)
 800da4a:	4882      	ldr	r0, [pc, #520]	; (800dc54 <tcp_slowtmr+0x274>)
 800da4c:	f008 fa12 	bl	8015e74 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800da50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da52:	7f9a      	ldrb	r2, [r3, #30]
 800da54:	4b7b      	ldr	r3, [pc, #492]	; (800dc44 <tcp_slowtmr+0x264>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d105      	bne.n	800da68 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800da60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800da66:	e270      	b.n	800df4a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800da68:	4b76      	ldr	r3, [pc, #472]	; (800dc44 <tcp_slowtmr+0x264>)
 800da6a:	781a      	ldrb	r2, [r3, #0]
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800da70:	2300      	movs	r3, #0
 800da72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800da76:	2300      	movs	r3, #0
 800da78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800da7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7e:	7d1b      	ldrb	r3, [r3, #20]
 800da80:	2b02      	cmp	r3, #2
 800da82:	d10a      	bne.n	800da9a <tcp_slowtmr+0xba>
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da8a:	2b05      	cmp	r3, #5
 800da8c:	d905      	bls.n	800da9a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800da8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da92:	3301      	adds	r3, #1
 800da94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da98:	e11e      	b.n	800dcd8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800da9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800daa0:	2b0b      	cmp	r3, #11
 800daa2:	d905      	bls.n	800dab0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800daa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daa8:	3301      	adds	r3, #1
 800daaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800daae:	e113      	b.n	800dcd8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d075      	beq.n	800dba6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800daba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d006      	beq.n	800dad0 <tcp_slowtmr+0xf0>
 800dac2:	4b62      	ldr	r3, [pc, #392]	; (800dc4c <tcp_slowtmr+0x26c>)
 800dac4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dac8:	4965      	ldr	r1, [pc, #404]	; (800dc60 <tcp_slowtmr+0x280>)
 800daca:	4862      	ldr	r0, [pc, #392]	; (800dc54 <tcp_slowtmr+0x274>)
 800dacc:	f008 f9d2 	bl	8015e74 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d106      	bne.n	800dae6 <tcp_slowtmr+0x106>
 800dad8:	4b5c      	ldr	r3, [pc, #368]	; (800dc4c <tcp_slowtmr+0x26c>)
 800dada:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dade:	4961      	ldr	r1, [pc, #388]	; (800dc64 <tcp_slowtmr+0x284>)
 800dae0:	485c      	ldr	r0, [pc, #368]	; (800dc54 <tcp_slowtmr+0x274>)
 800dae2:	f008 f9c7 	bl	8015e74 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800daec:	2b0b      	cmp	r3, #11
 800daee:	d905      	bls.n	800dafc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800daf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daf4:	3301      	adds	r3, #1
 800daf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dafa:	e0ed      	b.n	800dcd8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db02:	3b01      	subs	r3, #1
 800db04:	4a58      	ldr	r2, [pc, #352]	; (800dc68 <tcp_slowtmr+0x288>)
 800db06:	5cd3      	ldrb	r3, [r2, r3]
 800db08:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800db0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800db10:	7c7a      	ldrb	r2, [r7, #17]
 800db12:	429a      	cmp	r2, r3
 800db14:	d907      	bls.n	800db26 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800db1c:	3301      	adds	r3, #1
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db22:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800db26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800db2c:	7c7a      	ldrb	r2, [r7, #17]
 800db2e:	429a      	cmp	r2, r3
 800db30:	f200 80d2 	bhi.w	800dcd8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800db34:	2301      	movs	r3, #1
 800db36:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d108      	bne.n	800db54 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800db42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db44:	f005 f980 	bl	8012e48 <tcp_zero_window_probe>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d014      	beq.n	800db78 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800db4e:	2300      	movs	r3, #0
 800db50:	623b      	str	r3, [r7, #32]
 800db52:	e011      	b.n	800db78 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800db54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db5a:	4619      	mov	r1, r3
 800db5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db5e:	f004 f833 	bl	8011bc8 <tcp_split_unsent_seg>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d107      	bne.n	800db78 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800db68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db6a:	f004 fab3 	bl	80120d4 <tcp_output>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d101      	bne.n	800db78 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800db74:	2300      	movs	r3, #0
 800db76:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800db78:	6a3b      	ldr	r3, [r7, #32]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f000 80ac 	beq.w	800dcd8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800db88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db8e:	2b06      	cmp	r3, #6
 800db90:	f200 80a2 	bhi.w	800dcd8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db9a:	3301      	adds	r3, #1
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800dba4:	e098      	b.n	800dcd8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	db0f      	blt.n	800dbd0 <tcp_slowtmr+0x1f0>
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dbb6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d008      	beq.n	800dbd0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800dbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	b21a      	sxth	r2, r3
 800dbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800dbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	db7b      	blt.n	800dcd8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dbe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbe2:	f004 fd6f 	bl	80126c4 <tcp_rexmit_rto_prepare>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d007      	beq.n	800dbfc <tcp_slowtmr+0x21c>
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d171      	bne.n	800dcd8 <tcp_slowtmr+0x2f8>
 800dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d06d      	beq.n	800dcd8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	7d1b      	ldrb	r3, [r3, #20]
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d03a      	beq.n	800dc7a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc0a:	2b0c      	cmp	r3, #12
 800dc0c:	bf28      	it	cs
 800dc0e:	230c      	movcs	r3, #12
 800dc10:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800dc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dc18:	10db      	asrs	r3, r3, #3
 800dc1a:	b21b      	sxth	r3, r3
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc24:	4413      	add	r3, r2
 800dc26:	7efa      	ldrb	r2, [r7, #27]
 800dc28:	4910      	ldr	r1, [pc, #64]	; (800dc6c <tcp_slowtmr+0x28c>)
 800dc2a:	5c8a      	ldrb	r2, [r1, r2]
 800dc2c:	4093      	lsls	r3, r2
 800dc2e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dc36:	4293      	cmp	r3, r2
 800dc38:	dc1a      	bgt.n	800dc70 <tcp_slowtmr+0x290>
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	b21a      	sxth	r2, r3
 800dc3e:	e019      	b.n	800dc74 <tcp_slowtmr+0x294>
 800dc40:	2000b504 	.word	0x2000b504
 800dc44:	200044e2 	.word	0x200044e2
 800dc48:	2000b500 	.word	0x2000b500
 800dc4c:	08017b6c 	.word	0x08017b6c
 800dc50:	08017eb0 	.word	0x08017eb0
 800dc54:	08017bb0 	.word	0x08017bb0
 800dc58:	08017edc 	.word	0x08017edc
 800dc5c:	08017f08 	.word	0x08017f08
 800dc60:	08017f38 	.word	0x08017f38
 800dc64:	08017f6c 	.word	0x08017f6c
 800dc68:	0802a6c0 	.word	0x0802a6c0
 800dc6c:	0802a6b0 	.word	0x0802a6b0
 800dc70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800dc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	bf28      	it	cs
 800dc90:	4613      	movcs	r3, r2
 800dc92:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dc94:	8a7b      	ldrh	r3, [r7, #18]
 800dc96:	085b      	lsrs	r3, r3, #1
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d206      	bcs.n	800dcc0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800dcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dccc:	2200      	movs	r2, #0
 800dcce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800dcd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcd4:	f004 fd66 	bl	80127a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800dcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcda:	7d1b      	ldrb	r3, [r3, #20]
 800dcdc:	2b06      	cmp	r3, #6
 800dcde:	d111      	bne.n	800dd04 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce2:	8b5b      	ldrh	r3, [r3, #26]
 800dce4:	f003 0310 	and.w	r3, r3, #16
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00b      	beq.n	800dd04 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dcec:	4b9c      	ldr	r3, [pc, #624]	; (800df60 <tcp_slowtmr+0x580>)
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	6a1b      	ldr	r3, [r3, #32]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	2b28      	cmp	r3, #40	; 0x28
 800dcf8:	d904      	bls.n	800dd04 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dcfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcfe:	3301      	adds	r3, #1
 800dd00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd06:	7a5b      	ldrb	r3, [r3, #9]
 800dd08:	f003 0308 	and.w	r3, r3, #8
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d04a      	beq.n	800dda6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800dd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd12:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dd14:	2b04      	cmp	r3, #4
 800dd16:	d003      	beq.n	800dd20 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dd1c:	2b07      	cmp	r3, #7
 800dd1e:	d142      	bne.n	800dda6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd20:	4b8f      	ldr	r3, [pc, #572]	; (800df60 <tcp_slowtmr+0x580>)
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd26:	6a1b      	ldr	r3, [r3, #32]
 800dd28:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dd30:	4b8c      	ldr	r3, [pc, #560]	; (800df64 <tcp_slowtmr+0x584>)
 800dd32:	440b      	add	r3, r1
 800dd34:	498c      	ldr	r1, [pc, #560]	; (800df68 <tcp_slowtmr+0x588>)
 800dd36:	fba1 1303 	umull	r1, r3, r1, r3
 800dd3a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d90a      	bls.n	800dd56 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800dd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd44:	3301      	adds	r3, #1
 800dd46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800dd4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd4e:	3301      	adds	r3, #1
 800dd50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd54:	e027      	b.n	800dda6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd56:	4b82      	ldr	r3, [pc, #520]	; (800df60 <tcp_slowtmr+0x580>)
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5c:	6a1b      	ldr	r3, [r3, #32]
 800dd5e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd62:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd68:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	4b7f      	ldr	r3, [pc, #508]	; (800df6c <tcp_slowtmr+0x58c>)
 800dd70:	fb03 f300 	mul.w	r3, r3, r0
 800dd74:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dd76:	497c      	ldr	r1, [pc, #496]	; (800df68 <tcp_slowtmr+0x588>)
 800dd78:	fba1 1303 	umull	r1, r3, r1, r3
 800dd7c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d911      	bls.n	800dda6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800dd82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd84:	f005 f820 	bl	8012dc8 <tcp_keepalive>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dd8e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d107      	bne.n	800dda6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d011      	beq.n	800ddd2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ddae:	4b6c      	ldr	r3, [pc, #432]	; (800df60 <tcp_slowtmr+0x580>)
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb4:	6a1b      	ldr	r3, [r3, #32]
 800ddb6:	1ad2      	subs	r2, r2, r3
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	440b      	add	r3, r1
 800ddc6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d302      	bcc.n	800ddd2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ddcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddce:	f000 fecd 	bl	800eb6c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	7d1b      	ldrb	r3, [r3, #20]
 800ddd6:	2b03      	cmp	r3, #3
 800ddd8:	d10b      	bne.n	800ddf2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ddda:	4b61      	ldr	r3, [pc, #388]	; (800df60 <tcp_slowtmr+0x580>)
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde0:	6a1b      	ldr	r3, [r3, #32]
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	2b28      	cmp	r3, #40	; 0x28
 800dde6:	d904      	bls.n	800ddf2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800dde8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddec:	3301      	adds	r3, #1
 800ddee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ddf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf4:	7d1b      	ldrb	r3, [r3, #20]
 800ddf6:	2b09      	cmp	r3, #9
 800ddf8:	d10b      	bne.n	800de12 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ddfa:	4b59      	ldr	r3, [pc, #356]	; (800df60 <tcp_slowtmr+0x580>)
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de00:	6a1b      	ldr	r3, [r3, #32]
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	2bf0      	cmp	r3, #240	; 0xf0
 800de06:	d904      	bls.n	800de12 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800de08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de0c:	3301      	adds	r3, #1
 800de0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800de12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de16:	2b00      	cmp	r3, #0
 800de18:	d060      	beq.n	800dedc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800de1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de20:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800de22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de24:	f000 fcee 	bl	800e804 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800de28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d010      	beq.n	800de50 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800de2e:	4b50      	ldr	r3, [pc, #320]	; (800df70 <tcp_slowtmr+0x590>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de34:	429a      	cmp	r2, r3
 800de36:	d106      	bne.n	800de46 <tcp_slowtmr+0x466>
 800de38:	4b4e      	ldr	r3, [pc, #312]	; (800df74 <tcp_slowtmr+0x594>)
 800de3a:	f240 526d 	movw	r2, #1389	; 0x56d
 800de3e:	494e      	ldr	r1, [pc, #312]	; (800df78 <tcp_slowtmr+0x598>)
 800de40:	484e      	ldr	r0, [pc, #312]	; (800df7c <tcp_slowtmr+0x59c>)
 800de42:	f008 f817 	bl	8015e74 <iprintf>
        prev->next = pcb->next;
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	68da      	ldr	r2, [r3, #12]
 800de4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4c:	60da      	str	r2, [r3, #12]
 800de4e:	e00f      	b.n	800de70 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800de50:	4b47      	ldr	r3, [pc, #284]	; (800df70 <tcp_slowtmr+0x590>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de56:	429a      	cmp	r2, r3
 800de58:	d006      	beq.n	800de68 <tcp_slowtmr+0x488>
 800de5a:	4b46      	ldr	r3, [pc, #280]	; (800df74 <tcp_slowtmr+0x594>)
 800de5c:	f240 5271 	movw	r2, #1393	; 0x571
 800de60:	4947      	ldr	r1, [pc, #284]	; (800df80 <tcp_slowtmr+0x5a0>)
 800de62:	4846      	ldr	r0, [pc, #280]	; (800df7c <tcp_slowtmr+0x59c>)
 800de64:	f008 f806 	bl	8015e74 <iprintf>
        tcp_active_pcbs = pcb->next;
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	4a40      	ldr	r2, [pc, #256]	; (800df70 <tcp_slowtmr+0x590>)
 800de6e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800de70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de74:	2b00      	cmp	r3, #0
 800de76:	d013      	beq.n	800dea0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800de7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800de80:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	3304      	adds	r3, #4
 800de86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de88:	8ad2      	ldrh	r2, [r2, #22]
 800de8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de8c:	8b09      	ldrh	r1, [r1, #24]
 800de8e:	9102      	str	r1, [sp, #8]
 800de90:	9201      	str	r2, [sp, #4]
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	462b      	mov	r3, r5
 800de96:	4622      	mov	r2, r4
 800de98:	4601      	mov	r1, r0
 800de9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de9c:	f004 fee0 	bl	8012c60 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea8:	7d1b      	ldrb	r3, [r3, #20]
 800deaa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800deb6:	6838      	ldr	r0, [r7, #0]
 800deb8:	f7ff f842 	bl	800cf40 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800debc:	4b31      	ldr	r3, [pc, #196]	; (800df84 <tcp_slowtmr+0x5a4>)
 800debe:	2200      	movs	r2, #0
 800dec0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d004      	beq.n	800ded2 <tcp_slowtmr+0x4f2>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f06f 010c 	mvn.w	r1, #12
 800dece:	68b8      	ldr	r0, [r7, #8]
 800ded0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ded2:	4b2c      	ldr	r3, [pc, #176]	; (800df84 <tcp_slowtmr+0x5a4>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d037      	beq.n	800df4a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800deda:	e592      	b.n	800da02 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dede:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	7f1b      	ldrb	r3, [r3, #28]
 800deea:	3301      	adds	r3, #1
 800deec:	b2da      	uxtb	r2, r3
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	7f1a      	ldrb	r2, [r3, #28]
 800def6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def8:	7f5b      	ldrb	r3, [r3, #29]
 800defa:	429a      	cmp	r2, r3
 800defc:	d325      	bcc.n	800df4a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df00:	2200      	movs	r2, #0
 800df02:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800df04:	4b1f      	ldr	r3, [pc, #124]	; (800df84 <tcp_slowtmr+0x5a4>)
 800df06:	2200      	movs	r2, #0
 800df08:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00b      	beq.n	800df2c <tcp_slowtmr+0x54c>
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df1c:	6912      	ldr	r2, [r2, #16]
 800df1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df20:	4610      	mov	r0, r2
 800df22:	4798      	blx	r3
 800df24:	4603      	mov	r3, r0
 800df26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800df2a:	e002      	b.n	800df32 <tcp_slowtmr+0x552>
 800df2c:	2300      	movs	r3, #0
 800df2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800df32:	4b14      	ldr	r3, [pc, #80]	; (800df84 <tcp_slowtmr+0x5a4>)
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d000      	beq.n	800df3c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800df3a:	e562      	b.n	800da02 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800df3c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800df40:	2b00      	cmp	r3, #0
 800df42:	d102      	bne.n	800df4a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800df44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df46:	f004 f8c5 	bl	80120d4 <tcp_output>
  while (pcb != NULL) {
 800df4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f47f ad5e 	bne.w	800da0e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800df52:	2300      	movs	r3, #0
 800df54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800df56:	4b0c      	ldr	r3, [pc, #48]	; (800df88 <tcp_slowtmr+0x5a8>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800df5c:	e069      	b.n	800e032 <tcp_slowtmr+0x652>
 800df5e:	bf00      	nop
 800df60:	2000b504 	.word	0x2000b504
 800df64:	000a4cb8 	.word	0x000a4cb8
 800df68:	10624dd3 	.word	0x10624dd3
 800df6c:	000124f8 	.word	0x000124f8
 800df70:	2000b500 	.word	0x2000b500
 800df74:	08017b6c 	.word	0x08017b6c
 800df78:	08017fa4 	.word	0x08017fa4
 800df7c:	08017bb0 	.word	0x08017bb0
 800df80:	08017fd0 	.word	0x08017fd0
 800df84:	2000b4fc 	.word	0x2000b4fc
 800df88:	2000b510 	.word	0x2000b510
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	7d1b      	ldrb	r3, [r3, #20]
 800df90:	2b0a      	cmp	r3, #10
 800df92:	d006      	beq.n	800dfa2 <tcp_slowtmr+0x5c2>
 800df94:	4b2a      	ldr	r3, [pc, #168]	; (800e040 <tcp_slowtmr+0x660>)
 800df96:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800df9a:	492a      	ldr	r1, [pc, #168]	; (800e044 <tcp_slowtmr+0x664>)
 800df9c:	482a      	ldr	r0, [pc, #168]	; (800e048 <tcp_slowtmr+0x668>)
 800df9e:	f007 ff69 	bl	8015e74 <iprintf>
    pcb_remove = 0;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dfa8:	4b28      	ldr	r3, [pc, #160]	; (800e04c <tcp_slowtmr+0x66c>)
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfae:	6a1b      	ldr	r3, [r3, #32]
 800dfb0:	1ad3      	subs	r3, r2, r3
 800dfb2:	2bf0      	cmp	r3, #240	; 0xf0
 800dfb4:	d904      	bls.n	800dfc0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800dfb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfba:	3301      	adds	r3, #1
 800dfbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dfc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d02f      	beq.n	800e028 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dfc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfca:	f000 fc1b 	bl	800e804 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d010      	beq.n	800dff6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dfd4:	4b1e      	ldr	r3, [pc, #120]	; (800e050 <tcp_slowtmr+0x670>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d106      	bne.n	800dfec <tcp_slowtmr+0x60c>
 800dfde:	4b18      	ldr	r3, [pc, #96]	; (800e040 <tcp_slowtmr+0x660>)
 800dfe0:	f240 52af 	movw	r2, #1455	; 0x5af
 800dfe4:	491b      	ldr	r1, [pc, #108]	; (800e054 <tcp_slowtmr+0x674>)
 800dfe6:	4818      	ldr	r0, [pc, #96]	; (800e048 <tcp_slowtmr+0x668>)
 800dfe8:	f007 ff44 	bl	8015e74 <iprintf>
        prev->next = pcb->next;
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	68da      	ldr	r2, [r3, #12]
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	60da      	str	r2, [r3, #12]
 800dff4:	e00f      	b.n	800e016 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dff6:	4b16      	ldr	r3, [pc, #88]	; (800e050 <tcp_slowtmr+0x670>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d006      	beq.n	800e00e <tcp_slowtmr+0x62e>
 800e000:	4b0f      	ldr	r3, [pc, #60]	; (800e040 <tcp_slowtmr+0x660>)
 800e002:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e006:	4914      	ldr	r1, [pc, #80]	; (800e058 <tcp_slowtmr+0x678>)
 800e008:	480f      	ldr	r0, [pc, #60]	; (800e048 <tcp_slowtmr+0x668>)
 800e00a:	f007 ff33 	bl	8015e74 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	4a0f      	ldr	r2, [pc, #60]	; (800e050 <tcp_slowtmr+0x670>)
 800e014:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e018:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e020:	69f8      	ldr	r0, [r7, #28]
 800e022:	f7fe ff8d 	bl	800cf40 <tcp_free>
 800e026:	e004      	b.n	800e032 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e034:	2b00      	cmp	r3, #0
 800e036:	d1a9      	bne.n	800df8c <tcp_slowtmr+0x5ac>
    }
  }
}
 800e038:	bf00      	nop
 800e03a:	3730      	adds	r7, #48	; 0x30
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bdb0      	pop	{r4, r5, r7, pc}
 800e040:	08017b6c 	.word	0x08017b6c
 800e044:	08017ffc 	.word	0x08017ffc
 800e048:	08017bb0 	.word	0x08017bb0
 800e04c:	2000b504 	.word	0x2000b504
 800e050:	2000b510 	.word	0x2000b510
 800e054:	0801802c 	.word	0x0801802c
 800e058:	08018054 	.word	0x08018054

0800e05c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e062:	4b2d      	ldr	r3, [pc, #180]	; (800e118 <tcp_fasttmr+0xbc>)
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	3301      	adds	r3, #1
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	4b2b      	ldr	r3, [pc, #172]	; (800e118 <tcp_fasttmr+0xbc>)
 800e06c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e06e:	4b2b      	ldr	r3, [pc, #172]	; (800e11c <tcp_fasttmr+0xc0>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e074:	e048      	b.n	800e108 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	7f9a      	ldrb	r2, [r3, #30]
 800e07a:	4b27      	ldr	r3, [pc, #156]	; (800e118 <tcp_fasttmr+0xbc>)
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d03f      	beq.n	800e102 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e082:	4b25      	ldr	r3, [pc, #148]	; (800e118 <tcp_fasttmr+0xbc>)
 800e084:	781a      	ldrb	r2, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	8b5b      	ldrh	r3, [r3, #26]
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	2b00      	cmp	r3, #0
 800e094:	d010      	beq.n	800e0b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	8b5b      	ldrh	r3, [r3, #26]
 800e09a:	f043 0302 	orr.w	r3, r3, #2
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f004 f815 	bl	80120d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	8b5b      	ldrh	r3, [r3, #26]
 800e0ae:	f023 0303 	bic.w	r3, r3, #3
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	8b5b      	ldrh	r3, [r3, #26]
 800e0bc:	f003 0308 	and.w	r3, r3, #8
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d009      	beq.n	800e0d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	8b5b      	ldrh	r3, [r3, #26]
 800e0c8:	f023 0308 	bic.w	r3, r3, #8
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7ff f8c4 	bl	800d260 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00a      	beq.n	800e0fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e0e6:	4b0e      	ldr	r3, [pc, #56]	; (800e120 <tcp_fasttmr+0xc4>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 f819 	bl	800e124 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e0f2:	4b0b      	ldr	r3, [pc, #44]	; (800e120 <tcp_fasttmr+0xc4>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d000      	beq.n	800e0fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e0fa:	e7b8      	b.n	800e06e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	607b      	str	r3, [r7, #4]
 800e100:	e002      	b.n	800e108 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1b3      	bne.n	800e076 <tcp_fasttmr+0x1a>
    }
  }
}
 800e10e:	bf00      	nop
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	200044e2 	.word	0x200044e2
 800e11c:	2000b500 	.word	0x2000b500
 800e120:	2000b4fc 	.word	0x2000b4fc

0800e124 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e124:	b590      	push	{r4, r7, lr}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d109      	bne.n	800e146 <tcp_process_refused_data+0x22>
 800e132:	4b37      	ldr	r3, [pc, #220]	; (800e210 <tcp_process_refused_data+0xec>)
 800e134:	f240 6209 	movw	r2, #1545	; 0x609
 800e138:	4936      	ldr	r1, [pc, #216]	; (800e214 <tcp_process_refused_data+0xf0>)
 800e13a:	4837      	ldr	r0, [pc, #220]	; (800e218 <tcp_process_refused_data+0xf4>)
 800e13c:	f007 fe9a 	bl	8015e74 <iprintf>
 800e140:	f06f 030f 	mvn.w	r3, #15
 800e144:	e060      	b.n	800e208 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e14a:	7b5b      	ldrb	r3, [r3, #13]
 800e14c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e152:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00b      	beq.n	800e17c <tcp_process_refused_data+0x58>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6918      	ldr	r0, [r3, #16]
 800e16e:	2300      	movs	r3, #0
 800e170:	68ba      	ldr	r2, [r7, #8]
 800e172:	6879      	ldr	r1, [r7, #4]
 800e174:	47a0      	blx	r4
 800e176:	4603      	mov	r3, r0
 800e178:	73fb      	strb	r3, [r7, #15]
 800e17a:	e007      	b.n	800e18c <tcp_process_refused_data+0x68>
 800e17c:	2300      	movs	r3, #0
 800e17e:	68ba      	ldr	r2, [r7, #8]
 800e180:	6879      	ldr	r1, [r7, #4]
 800e182:	2000      	movs	r0, #0
 800e184:	f000 f8c0 	bl	800e308 <tcp_recv_null>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e18c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d12a      	bne.n	800e1ea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e194:	7bbb      	ldrb	r3, [r7, #14]
 800e196:	f003 0320 	and.w	r3, r3, #32
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d033      	beq.n	800e206 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e1a6:	d005      	beq.n	800e1b4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	b29a      	uxth	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d00b      	beq.n	800e1d6 <tcp_process_refused_data+0xb2>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6918      	ldr	r0, [r3, #16]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	6879      	ldr	r1, [r7, #4]
 800e1ce:	47a0      	blx	r4
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]
 800e1d4:	e001      	b.n	800e1da <tcp_process_refused_data+0xb6>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e1da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1de:	f113 0f0d 	cmn.w	r3, #13
 800e1e2:	d110      	bne.n	800e206 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e1e4:	f06f 030c 	mvn.w	r3, #12
 800e1e8:	e00e      	b.n	800e208 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e1ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ee:	f113 0f0d 	cmn.w	r3, #13
 800e1f2:	d102      	bne.n	800e1fa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e1f4:	f06f 030c 	mvn.w	r3, #12
 800e1f8:	e006      	b.n	800e208 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e200:	f06f 0304 	mvn.w	r3, #4
 800e204:	e000      	b.n	800e208 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3714      	adds	r7, #20
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd90      	pop	{r4, r7, pc}
 800e210:	08017b6c 	.word	0x08017b6c
 800e214:	0801807c 	.word	0x0801807c
 800e218:	08017bb0 	.word	0x08017bb0

0800e21c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e224:	e007      	b.n	800e236 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 f809 	bl	800e244 <tcp_seg_free>
    seg = next;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1f4      	bne.n	800e226 <tcp_segs_free+0xa>
  }
}
 800e23c:	bf00      	nop
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00c      	beq.n	800e26c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d004      	beq.n	800e264 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fe fbc2 	bl	800c9e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e264:	6879      	ldr	r1, [r7, #4]
 800e266:	2003      	movs	r0, #3
 800e268:	f7fd fd1e 	bl	800bca8 <memp_free>
  }
}
 800e26c:	bf00      	nop
 800e26e:	3708      	adds	r7, #8
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}

0800e274 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	460b      	mov	r3, r1
 800e27e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d107      	bne.n	800e296 <tcp_setprio+0x22>
 800e286:	4b07      	ldr	r3, [pc, #28]	; (800e2a4 <tcp_setprio+0x30>)
 800e288:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800e28c:	4906      	ldr	r1, [pc, #24]	; (800e2a8 <tcp_setprio+0x34>)
 800e28e:	4807      	ldr	r0, [pc, #28]	; (800e2ac <tcp_setprio+0x38>)
 800e290:	f007 fdf0 	bl	8015e74 <iprintf>
 800e294:	e002      	b.n	800e29c <tcp_setprio+0x28>

  pcb->prio = prio;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	78fa      	ldrb	r2, [r7, #3]
 800e29a:	755a      	strb	r2, [r3, #21]
}
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	08017b6c 	.word	0x08017b6c
 800e2a8:	080180a4 	.word	0x080180a4
 800e2ac:	08017bb0 	.word	0x08017bb0

0800e2b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d106      	bne.n	800e2cc <tcp_seg_copy+0x1c>
 800e2be:	4b0f      	ldr	r3, [pc, #60]	; (800e2fc <tcp_seg_copy+0x4c>)
 800e2c0:	f240 6282 	movw	r2, #1666	; 0x682
 800e2c4:	490e      	ldr	r1, [pc, #56]	; (800e300 <tcp_seg_copy+0x50>)
 800e2c6:	480f      	ldr	r0, [pc, #60]	; (800e304 <tcp_seg_copy+0x54>)
 800e2c8:	f007 fdd4 	bl	8015e74 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e2cc:	2003      	movs	r0, #3
 800e2ce:	f7fd fc99 	bl	800bc04 <memp_malloc>
 800e2d2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d101      	bne.n	800e2de <tcp_seg_copy+0x2e>
    return NULL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e00a      	b.n	800e2f4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e2de:	2210      	movs	r2, #16
 800e2e0:	6879      	ldr	r1, [r7, #4]
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f007 fdb3 	bl	8015e4e <memcpy>
  pbuf_ref(cseg->p);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fe fc21 	bl	800cb34 <pbuf_ref>
  return cseg;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	08017b6c 	.word	0x08017b6c
 800e300:	080180c0 	.word	0x080180c0
 800e304:	08017bb0 	.word	0x08017bb0

0800e308 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d109      	bne.n	800e330 <tcp_recv_null+0x28>
 800e31c:	4b12      	ldr	r3, [pc, #72]	; (800e368 <tcp_recv_null+0x60>)
 800e31e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e322:	4912      	ldr	r1, [pc, #72]	; (800e36c <tcp_recv_null+0x64>)
 800e324:	4812      	ldr	r0, [pc, #72]	; (800e370 <tcp_recv_null+0x68>)
 800e326:	f007 fda5 	bl	8015e74 <iprintf>
 800e32a:	f06f 030f 	mvn.w	r3, #15
 800e32e:	e016      	b.n	800e35e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d009      	beq.n	800e34a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	891b      	ldrh	r3, [r3, #8]
 800e33a:	4619      	mov	r1, r3
 800e33c:	68b8      	ldr	r0, [r7, #8]
 800e33e:	f7ff fab9 	bl	800d8b4 <tcp_recved>
    pbuf_free(p);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7fe fb50 	bl	800c9e8 <pbuf_free>
 800e348:	e008      	b.n	800e35c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e34a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d104      	bne.n	800e35c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e352:	68b8      	ldr	r0, [r7, #8]
 800e354:	f7fe ffea 	bl	800d32c <tcp_close>
 800e358:	4603      	mov	r3, r0
 800e35a:	e000      	b.n	800e35e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	08017b6c 	.word	0x08017b6c
 800e36c:	080180dc 	.word	0x080180dc
 800e370:	08017bb0 	.word	0x08017bb0

0800e374 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	4603      	mov	r3, r0
 800e37c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e37e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e382:	2b00      	cmp	r3, #0
 800e384:	db01      	blt.n	800e38a <tcp_kill_prio+0x16>
 800e386:	79fb      	ldrb	r3, [r7, #7]
 800e388:	e000      	b.n	800e38c <tcp_kill_prio+0x18>
 800e38a:	237f      	movs	r3, #127	; 0x7f
 800e38c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e38e:	7afb      	ldrb	r3, [r7, #11]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d034      	beq.n	800e3fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e394:	7afb      	ldrb	r3, [r7, #11]
 800e396:	3b01      	subs	r3, #1
 800e398:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e39a:	2300      	movs	r3, #0
 800e39c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3a2:	4b19      	ldr	r3, [pc, #100]	; (800e408 <tcp_kill_prio+0x94>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	617b      	str	r3, [r7, #20]
 800e3a8:	e01f      	b.n	800e3ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	7d5b      	ldrb	r3, [r3, #21]
 800e3ae:	7afa      	ldrb	r2, [r7, #11]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d80c      	bhi.n	800e3ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e3b8:	7afa      	ldrb	r2, [r7, #11]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d112      	bne.n	800e3e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e3be:	4b13      	ldr	r3, [pc, #76]	; (800e40c <tcp_kill_prio+0x98>)
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	1ad3      	subs	r3, r2, r3
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d80a      	bhi.n	800e3e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e3ce:	4b0f      	ldr	r3, [pc, #60]	; (800e40c <tcp_kill_prio+0x98>)
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	1ad3      	subs	r3, r2, r3
 800e3d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	7d5b      	ldrb	r3, [r3, #21]
 800e3e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	617b      	str	r3, [r7, #20]
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d1dc      	bne.n	800e3aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d004      	beq.n	800e400 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e3f6:	6938      	ldr	r0, [r7, #16]
 800e3f8:	f7ff f882 	bl	800d500 <tcp_abort>
 800e3fc:	e000      	b.n	800e400 <tcp_kill_prio+0x8c>
    return;
 800e3fe:	bf00      	nop
  }
}
 800e400:	3718      	adds	r7, #24
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	2000b500 	.word	0x2000b500
 800e40c:	2000b504 	.word	0x2000b504

0800e410 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b086      	sub	sp, #24
 800e414:	af00      	add	r7, sp, #0
 800e416:	4603      	mov	r3, r0
 800e418:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	2b08      	cmp	r3, #8
 800e41e:	d009      	beq.n	800e434 <tcp_kill_state+0x24>
 800e420:	79fb      	ldrb	r3, [r7, #7]
 800e422:	2b09      	cmp	r3, #9
 800e424:	d006      	beq.n	800e434 <tcp_kill_state+0x24>
 800e426:	4b1a      	ldr	r3, [pc, #104]	; (800e490 <tcp_kill_state+0x80>)
 800e428:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e42c:	4919      	ldr	r1, [pc, #100]	; (800e494 <tcp_kill_state+0x84>)
 800e42e:	481a      	ldr	r0, [pc, #104]	; (800e498 <tcp_kill_state+0x88>)
 800e430:	f007 fd20 	bl	8015e74 <iprintf>

  inactivity = 0;
 800e434:	2300      	movs	r3, #0
 800e436:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e438:	2300      	movs	r3, #0
 800e43a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e43c:	4b17      	ldr	r3, [pc, #92]	; (800e49c <tcp_kill_state+0x8c>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	617b      	str	r3, [r7, #20]
 800e442:	e017      	b.n	800e474 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	7d1b      	ldrb	r3, [r3, #20]
 800e448:	79fa      	ldrb	r2, [r7, #7]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d10f      	bne.n	800e46e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e44e:	4b14      	ldr	r3, [pc, #80]	; (800e4a0 <tcp_kill_state+0x90>)
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	6a1b      	ldr	r3, [r3, #32]
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d807      	bhi.n	800e46e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e45e:	4b10      	ldr	r3, [pc, #64]	; (800e4a0 <tcp_kill_state+0x90>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	1ad3      	subs	r3, r2, r3
 800e468:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	617b      	str	r3, [r7, #20]
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1e4      	bne.n	800e444 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d003      	beq.n	800e488 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e480:	2100      	movs	r1, #0
 800e482:	6938      	ldr	r0, [r7, #16]
 800e484:	f7fe ff7e 	bl	800d384 <tcp_abandon>
  }
}
 800e488:	bf00      	nop
 800e48a:	3718      	adds	r7, #24
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	08017b6c 	.word	0x08017b6c
 800e494:	080180f8 	.word	0x080180f8
 800e498:	08017bb0 	.word	0x08017bb0
 800e49c:	2000b500 	.word	0x2000b500
 800e4a0:	2000b504 	.word	0x2000b504

0800e4a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4b2:	4b12      	ldr	r3, [pc, #72]	; (800e4fc <tcp_kill_timewait+0x58>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	60fb      	str	r3, [r7, #12]
 800e4b8:	e012      	b.n	800e4e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e4ba:	4b11      	ldr	r3, [pc, #68]	; (800e500 <tcp_kill_timewait+0x5c>)
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d807      	bhi.n	800e4da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e4ca:	4b0d      	ldr	r3, [pc, #52]	; (800e500 <tcp_kill_timewait+0x5c>)
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6a1b      	ldr	r3, [r3, #32]
 800e4d2:	1ad3      	subs	r3, r2, r3
 800e4d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	60fb      	str	r3, [r7, #12]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1e9      	bne.n	800e4ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d002      	beq.n	800e4f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e4ec:	68b8      	ldr	r0, [r7, #8]
 800e4ee:	f7ff f807 	bl	800d500 <tcp_abort>
  }
}
 800e4f2:	bf00      	nop
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	2000b510 	.word	0x2000b510
 800e500:	2000b504 	.word	0x2000b504

0800e504 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e50a:	4b10      	ldr	r3, [pc, #64]	; (800e54c <tcp_handle_closepend+0x48>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e510:	e014      	b.n	800e53c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8b5b      	ldrh	r3, [r3, #26]
 800e51c:	f003 0308 	and.w	r3, r3, #8
 800e520:	2b00      	cmp	r3, #0
 800e522:	d009      	beq.n	800e538 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	8b5b      	ldrh	r3, [r3, #26]
 800e528:	f023 0308 	bic.w	r3, r3, #8
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7fe fe94 	bl	800d260 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d1e7      	bne.n	800e512 <tcp_handle_closepend+0xe>
  }
}
 800e542:	bf00      	nop
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	2000b500 	.word	0x2000b500

0800e550 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e55a:	2001      	movs	r0, #1
 800e55c:	f7fd fb52 	bl	800bc04 <memp_malloc>
 800e560:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d126      	bne.n	800e5b6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e568:	f7ff ffcc 	bl	800e504 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e56c:	f7ff ff9a 	bl	800e4a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e570:	2001      	movs	r0, #1
 800e572:	f7fd fb47 	bl	800bc04 <memp_malloc>
 800e576:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d11b      	bne.n	800e5b6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e57e:	2009      	movs	r0, #9
 800e580:	f7ff ff46 	bl	800e410 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e584:	2001      	movs	r0, #1
 800e586:	f7fd fb3d 	bl	800bc04 <memp_malloc>
 800e58a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d111      	bne.n	800e5b6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e592:	2008      	movs	r0, #8
 800e594:	f7ff ff3c 	bl	800e410 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e598:	2001      	movs	r0, #1
 800e59a:	f7fd fb33 	bl	800bc04 <memp_malloc>
 800e59e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d107      	bne.n	800e5b6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fee3 	bl	800e374 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e5ae:	2001      	movs	r0, #1
 800e5b0:	f7fd fb28 	bl	800bc04 <memp_malloc>
 800e5b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d03f      	beq.n	800e63c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e5bc:	229c      	movs	r2, #156	; 0x9c
 800e5be:	2100      	movs	r1, #0
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f007 fc4f 	bl	8015e64 <memset>
    pcb->prio = prio;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	79fa      	ldrb	r2, [r7, #7]
 800e5ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e5d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e5dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	22ff      	movs	r2, #255	; 0xff
 800e5ea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e5f2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2206      	movs	r2, #6
 800e5f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2206      	movs	r2, #6
 800e600:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e608:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2201      	movs	r2, #1
 800e60e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e612:	4b0d      	ldr	r3, [pc, #52]	; (800e648 <tcp_alloc+0xf8>)
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e61a:	4b0c      	ldr	r3, [pc, #48]	; (800e64c <tcp_alloc+0xfc>)
 800e61c:	781a      	ldrb	r2, [r3, #0]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e628:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4a08      	ldr	r2, [pc, #32]	; (800e650 <tcp_alloc+0x100>)
 800e630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	4a07      	ldr	r2, [pc, #28]	; (800e654 <tcp_alloc+0x104>)
 800e638:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e63c:	68fb      	ldr	r3, [r7, #12]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	2000b504 	.word	0x2000b504
 800e64c:	200044e2 	.word	0x200044e2
 800e650:	0800e309 	.word	0x0800e309
 800e654:	006ddd00 	.word	0x006ddd00

0800e658 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800e65c:	2040      	movs	r0, #64	; 0x40
 800e65e:	f7ff ff77 	bl	800e550 <tcp_alloc>
 800e662:	4603      	mov	r3, r0
}
 800e664:	4618      	mov	r0, r3
 800e666:	bd80      	pop	{r7, pc}

0800e668 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	4603      	mov	r3, r0
 800e670:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e672:	2040      	movs	r0, #64	; 0x40
 800e674:	f7ff ff6c 	bl	800e550 <tcp_alloc>
 800e678:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e67a:	68fb      	ldr	r3, [r7, #12]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	611a      	str	r2, [r3, #16]
  }
}
 800e69a:	bf00      	nop
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
	...

0800e6a8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00e      	beq.n	800e6d6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	7d1b      	ldrb	r3, [r3, #20]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d106      	bne.n	800e6ce <tcp_recv+0x26>
 800e6c0:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <tcp_recv+0x38>)
 800e6c2:	f240 72df 	movw	r2, #2015	; 0x7df
 800e6c6:	4907      	ldr	r1, [pc, #28]	; (800e6e4 <tcp_recv+0x3c>)
 800e6c8:	4807      	ldr	r0, [pc, #28]	; (800e6e8 <tcp_recv+0x40>)
 800e6ca:	f007 fbd3 	bl	8015e74 <iprintf>
    pcb->recv = recv;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	683a      	ldr	r2, [r7, #0]
 800e6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e6d6:	bf00      	nop
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	08017b6c 	.word	0x08017b6c
 800e6e4:	08018108 	.word	0x08018108
 800e6e8:	08017bb0 	.word	0x08017bb0

0800e6ec <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00e      	beq.n	800e71a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	7d1b      	ldrb	r3, [r3, #20]
 800e700:	2b01      	cmp	r3, #1
 800e702:	d106      	bne.n	800e712 <tcp_sent+0x26>
 800e704:	4b07      	ldr	r3, [pc, #28]	; (800e724 <tcp_sent+0x38>)
 800e706:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e70a:	4907      	ldr	r1, [pc, #28]	; (800e728 <tcp_sent+0x3c>)
 800e70c:	4807      	ldr	r0, [pc, #28]	; (800e72c <tcp_sent+0x40>)
 800e70e:	f007 fbb1 	bl	8015e74 <iprintf>
    pcb->sent = sent;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e71a:	bf00      	nop
 800e71c:	3708      	adds	r7, #8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	08017b6c 	.word	0x08017b6c
 800e728:	08018130 	.word	0x08018130
 800e72c:	08017bb0 	.word	0x08017bb0

0800e730 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d00e      	beq.n	800e75e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	7d1b      	ldrb	r3, [r3, #20]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d106      	bne.n	800e756 <tcp_err+0x26>
 800e748:	4b07      	ldr	r3, [pc, #28]	; (800e768 <tcp_err+0x38>)
 800e74a:	f640 020d 	movw	r2, #2061	; 0x80d
 800e74e:	4907      	ldr	r1, [pc, #28]	; (800e76c <tcp_err+0x3c>)
 800e750:	4807      	ldr	r0, [pc, #28]	; (800e770 <tcp_err+0x40>)
 800e752:	f007 fb8f 	bl	8015e74 <iprintf>
    pcb->errf = err;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e75e:	bf00      	nop
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	08017b6c 	.word	0x08017b6c
 800e76c:	08018158 	.word	0x08018158
 800e770:	08017bb0 	.word	0x08017bb0

0800e774 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d008      	beq.n	800e796 <tcp_accept+0x22>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d104      	bne.n	800e796 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	683a      	ldr	r2, [r7, #0]
 800e794:	619a      	str	r2, [r3, #24]
  }
}
 800e796:	bf00      	nop
 800e798:	3714      	adds	r7, #20
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
	...

0800e7a4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d107      	bne.n	800e7c8 <tcp_poll+0x24>
 800e7b8:	4b0e      	ldr	r3, [pc, #56]	; (800e7f4 <tcp_poll+0x50>)
 800e7ba:	f640 023d 	movw	r2, #2109	; 0x83d
 800e7be:	490e      	ldr	r1, [pc, #56]	; (800e7f8 <tcp_poll+0x54>)
 800e7c0:	480e      	ldr	r0, [pc, #56]	; (800e7fc <tcp_poll+0x58>)
 800e7c2:	f007 fb57 	bl	8015e74 <iprintf>
 800e7c6:	e011      	b.n	800e7ec <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	7d1b      	ldrb	r3, [r3, #20]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d106      	bne.n	800e7de <tcp_poll+0x3a>
 800e7d0:	4b08      	ldr	r3, [pc, #32]	; (800e7f4 <tcp_poll+0x50>)
 800e7d2:	f640 023e 	movw	r2, #2110	; 0x83e
 800e7d6:	490a      	ldr	r1, [pc, #40]	; (800e800 <tcp_poll+0x5c>)
 800e7d8:	4808      	ldr	r0, [pc, #32]	; (800e7fc <tcp_poll+0x58>)
 800e7da:	f007 fb4b 	bl	8015e74 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	68ba      	ldr	r2, [r7, #8]
 800e7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	79fa      	ldrb	r2, [r7, #7]
 800e7ea:	775a      	strb	r2, [r3, #29]
}
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	08017b6c 	.word	0x08017b6c
 800e7f8:	08018180 	.word	0x08018180
 800e7fc:	08017bb0 	.word	0x08017bb0
 800e800:	08018198 	.word	0x08018198

0800e804 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d107      	bne.n	800e822 <tcp_pcb_purge+0x1e>
 800e812:	4b21      	ldr	r3, [pc, #132]	; (800e898 <tcp_pcb_purge+0x94>)
 800e814:	f640 0251 	movw	r2, #2129	; 0x851
 800e818:	4920      	ldr	r1, [pc, #128]	; (800e89c <tcp_pcb_purge+0x98>)
 800e81a:	4821      	ldr	r0, [pc, #132]	; (800e8a0 <tcp_pcb_purge+0x9c>)
 800e81c:	f007 fb2a 	bl	8015e74 <iprintf>
 800e820:	e037      	b.n	800e892 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	7d1b      	ldrb	r3, [r3, #20]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d033      	beq.n	800e892 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e82e:	2b0a      	cmp	r3, #10
 800e830:	d02f      	beq.n	800e892 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e836:	2b01      	cmp	r3, #1
 800e838:	d02b      	beq.n	800e892 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d007      	beq.n	800e852 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe f8ce 	bl	800c9e8 <pbuf_free>
      pcb->refused_data = NULL;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e856:	2b00      	cmp	r3, #0
 800e858:	d002      	beq.n	800e860 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 f986 	bl	800eb6c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e866:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7ff fcd5 	bl	800e21c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e876:	4618      	mov	r0, r3
 800e878:	f7ff fcd0 	bl	800e21c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	66da      	str	r2, [r3, #108]	; 0x6c
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	08017b6c 	.word	0x08017b6c
 800e89c:	080181b8 	.word	0x080181b8
 800e8a0:	08017bb0 	.word	0x08017bb0

0800e8a4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d106      	bne.n	800e8c2 <tcp_pcb_remove+0x1e>
 800e8b4:	4b3e      	ldr	r3, [pc, #248]	; (800e9b0 <tcp_pcb_remove+0x10c>)
 800e8b6:	f640 0283 	movw	r2, #2179	; 0x883
 800e8ba:	493e      	ldr	r1, [pc, #248]	; (800e9b4 <tcp_pcb_remove+0x110>)
 800e8bc:	483e      	ldr	r0, [pc, #248]	; (800e9b8 <tcp_pcb_remove+0x114>)
 800e8be:	f007 fad9 	bl	8015e74 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d106      	bne.n	800e8d6 <tcp_pcb_remove+0x32>
 800e8c8:	4b39      	ldr	r3, [pc, #228]	; (800e9b0 <tcp_pcb_remove+0x10c>)
 800e8ca:	f640 0284 	movw	r2, #2180	; 0x884
 800e8ce:	493b      	ldr	r1, [pc, #236]	; (800e9bc <tcp_pcb_remove+0x118>)
 800e8d0:	4839      	ldr	r0, [pc, #228]	; (800e9b8 <tcp_pcb_remove+0x114>)
 800e8d2:	f007 facf 	bl	8015e74 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	429a      	cmp	r2, r3
 800e8de:	d105      	bne.n	800e8ec <tcp_pcb_remove+0x48>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68da      	ldr	r2, [r3, #12]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	601a      	str	r2, [r3, #0]
 800e8ea:	e013      	b.n	800e914 <tcp_pcb_remove+0x70>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	60fb      	str	r3, [r7, #12]
 800e8f2:	e00c      	b.n	800e90e <tcp_pcb_remove+0x6a>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	683a      	ldr	r2, [r7, #0]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d104      	bne.n	800e908 <tcp_pcb_remove+0x64>
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	68da      	ldr	r2, [r3, #12]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	60da      	str	r2, [r3, #12]
 800e906:	e005      	b.n	800e914 <tcp_pcb_remove+0x70>
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	60fb      	str	r3, [r7, #12]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1ef      	bne.n	800e8f4 <tcp_pcb_remove+0x50>
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2200      	movs	r2, #0
 800e918:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e91a:	6838      	ldr	r0, [r7, #0]
 800e91c:	f7ff ff72 	bl	800e804 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	7d1b      	ldrb	r3, [r3, #20]
 800e924:	2b0a      	cmp	r3, #10
 800e926:	d013      	beq.n	800e950 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d00f      	beq.n	800e950 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	8b5b      	ldrh	r3, [r3, #26]
 800e934:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d009      	beq.n	800e950 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	8b5b      	ldrh	r3, [r3, #26]
 800e940:	f043 0302 	orr.w	r3, r3, #2
 800e944:	b29a      	uxth	r2, r3
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e94a:	6838      	ldr	r0, [r7, #0]
 800e94c:	f003 fbc2 	bl	80120d4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	7d1b      	ldrb	r3, [r3, #20]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d020      	beq.n	800e99a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d006      	beq.n	800e96e <tcp_pcb_remove+0xca>
 800e960:	4b13      	ldr	r3, [pc, #76]	; (800e9b0 <tcp_pcb_remove+0x10c>)
 800e962:	f640 0293 	movw	r2, #2195	; 0x893
 800e966:	4916      	ldr	r1, [pc, #88]	; (800e9c0 <tcp_pcb_remove+0x11c>)
 800e968:	4813      	ldr	r0, [pc, #76]	; (800e9b8 <tcp_pcb_remove+0x114>)
 800e96a:	f007 fa83 	bl	8015e74 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e972:	2b00      	cmp	r3, #0
 800e974:	d006      	beq.n	800e984 <tcp_pcb_remove+0xe0>
 800e976:	4b0e      	ldr	r3, [pc, #56]	; (800e9b0 <tcp_pcb_remove+0x10c>)
 800e978:	f640 0294 	movw	r2, #2196	; 0x894
 800e97c:	4911      	ldr	r1, [pc, #68]	; (800e9c4 <tcp_pcb_remove+0x120>)
 800e97e:	480e      	ldr	r0, [pc, #56]	; (800e9b8 <tcp_pcb_remove+0x114>)
 800e980:	f007 fa78 	bl	8015e74 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d006      	beq.n	800e99a <tcp_pcb_remove+0xf6>
 800e98c:	4b08      	ldr	r3, [pc, #32]	; (800e9b0 <tcp_pcb_remove+0x10c>)
 800e98e:	f640 0296 	movw	r2, #2198	; 0x896
 800e992:	490d      	ldr	r1, [pc, #52]	; (800e9c8 <tcp_pcb_remove+0x124>)
 800e994:	4808      	ldr	r0, [pc, #32]	; (800e9b8 <tcp_pcb_remove+0x114>)
 800e996:	f007 fa6d 	bl	8015e74 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2200      	movs	r2, #0
 800e99e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e9a6:	bf00      	nop
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	08017b6c 	.word	0x08017b6c
 800e9b4:	080181d4 	.word	0x080181d4
 800e9b8:	08017bb0 	.word	0x08017bb0
 800e9bc:	080181f0 	.word	0x080181f0
 800e9c0:	08018210 	.word	0x08018210
 800e9c4:	08018228 	.word	0x08018228
 800e9c8:	08018244 	.word	0x08018244

0800e9cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d106      	bne.n	800e9e8 <tcp_next_iss+0x1c>
 800e9da:	4b0a      	ldr	r3, [pc, #40]	; (800ea04 <tcp_next_iss+0x38>)
 800e9dc:	f640 02af 	movw	r2, #2223	; 0x8af
 800e9e0:	4909      	ldr	r1, [pc, #36]	; (800ea08 <tcp_next_iss+0x3c>)
 800e9e2:	480a      	ldr	r0, [pc, #40]	; (800ea0c <tcp_next_iss+0x40>)
 800e9e4:	f007 fa46 	bl	8015e74 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e9e8:	4b09      	ldr	r3, [pc, #36]	; (800ea10 <tcp_next_iss+0x44>)
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	4b09      	ldr	r3, [pc, #36]	; (800ea14 <tcp_next_iss+0x48>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	4a07      	ldr	r2, [pc, #28]	; (800ea10 <tcp_next_iss+0x44>)
 800e9f4:	6013      	str	r3, [r2, #0]
  return iss;
 800e9f6:	4b06      	ldr	r3, [pc, #24]	; (800ea10 <tcp_next_iss+0x44>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	08017b6c 	.word	0x08017b6c
 800ea08:	0801825c 	.word	0x0801825c
 800ea0c:	08017bb0 	.word	0x08017bb0
 800ea10:	20000014 	.word	0x20000014
 800ea14:	2000b504 	.word	0x2000b504

0800ea18 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b086      	sub	sp, #24
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	4603      	mov	r3, r0
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]
 800ea24:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d106      	bne.n	800ea3a <tcp_eff_send_mss_netif+0x22>
 800ea2c:	4b14      	ldr	r3, [pc, #80]	; (800ea80 <tcp_eff_send_mss_netif+0x68>)
 800ea2e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ea32:	4914      	ldr	r1, [pc, #80]	; (800ea84 <tcp_eff_send_mss_netif+0x6c>)
 800ea34:	4814      	ldr	r0, [pc, #80]	; (800ea88 <tcp_eff_send_mss_netif+0x70>)
 800ea36:	f007 fa1d 	bl	8015e74 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d101      	bne.n	800ea44 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ea40:	89fb      	ldrh	r3, [r7, #14]
 800ea42:	e019      	b.n	800ea78 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea48:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ea4a:	8afb      	ldrh	r3, [r7, #22]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d012      	beq.n	800ea76 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ea50:	2328      	movs	r3, #40	; 0x28
 800ea52:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ea54:	8afa      	ldrh	r2, [r7, #22]
 800ea56:	8abb      	ldrh	r3, [r7, #20]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d904      	bls.n	800ea66 <tcp_eff_send_mss_netif+0x4e>
 800ea5c:	8afa      	ldrh	r2, [r7, #22]
 800ea5e:	8abb      	ldrh	r3, [r7, #20]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	e000      	b.n	800ea68 <tcp_eff_send_mss_netif+0x50>
 800ea66:	2300      	movs	r3, #0
 800ea68:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ea6a:	8a7a      	ldrh	r2, [r7, #18]
 800ea6c:	89fb      	ldrh	r3, [r7, #14]
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	bf28      	it	cs
 800ea72:	4613      	movcs	r3, r2
 800ea74:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ea76:	89fb      	ldrh	r3, [r7, #14]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3718      	adds	r7, #24
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	08017b6c 	.word	0x08017b6c
 800ea84:	08018278 	.word	0x08018278
 800ea88:	08017bb0 	.word	0x08017bb0

0800ea8c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d119      	bne.n	800ead4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eaa0:	4b10      	ldr	r3, [pc, #64]	; (800eae4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eaa2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800eaa6:	4910      	ldr	r1, [pc, #64]	; (800eae8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eaa8:	4810      	ldr	r0, [pc, #64]	; (800eaec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eaaa:	f007 f9e3 	bl	8015e74 <iprintf>

  while (pcb != NULL) {
 800eaae:	e011      	b.n	800ead4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d108      	bne.n	800eace <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f7fe fd1c 	bl	800d500 <tcp_abort>
      pcb = next;
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	60fb      	str	r3, [r7, #12]
 800eacc:	e002      	b.n	800ead4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1ea      	bne.n	800eab0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800eada:	bf00      	nop
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	08017b6c 	.word	0x08017b6c
 800eae8:	080182a0 	.word	0x080182a0
 800eaec:	08017bb0 	.word	0x08017bb0

0800eaf0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d02a      	beq.n	800eb56 <tcp_netif_ip_addr_changed+0x66>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d026      	beq.n	800eb56 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eb08:	4b15      	ldr	r3, [pc, #84]	; (800eb60 <tcp_netif_ip_addr_changed+0x70>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f7ff ffbc 	bl	800ea8c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eb14:	4b13      	ldr	r3, [pc, #76]	; (800eb64 <tcp_netif_ip_addr_changed+0x74>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f7ff ffb6 	bl	800ea8c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d017      	beq.n	800eb56 <tcp_netif_ip_addr_changed+0x66>
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d013      	beq.n	800eb56 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb2e:	4b0e      	ldr	r3, [pc, #56]	; (800eb68 <tcp_netif_ip_addr_changed+0x78>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	60fb      	str	r3, [r7, #12]
 800eb34:	e00c      	b.n	800eb50 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d103      	bne.n	800eb4a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1ef      	bne.n	800eb36 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800eb56:	bf00      	nop
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	2000b500 	.word	0x2000b500
 800eb64:	2000b50c 	.word	0x2000b50c
 800eb68:	2000b508 	.word	0x2000b508

0800eb6c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d007      	beq.n	800eb8c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7ff fb4b 	bl	800e21c <tcp_segs_free>
    pcb->ooseq = NULL;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eb8c:	bf00      	nop
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eb94:	b590      	push	{r4, r7, lr}
 800eb96:	b08d      	sub	sp, #52	; 0x34
 800eb98:	af04      	add	r7, sp, #16
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d105      	bne.n	800ebb0 <tcp_input+0x1c>
 800eba4:	4b9b      	ldr	r3, [pc, #620]	; (800ee14 <tcp_input+0x280>)
 800eba6:	2283      	movs	r2, #131	; 0x83
 800eba8:	499b      	ldr	r1, [pc, #620]	; (800ee18 <tcp_input+0x284>)
 800ebaa:	489c      	ldr	r0, [pc, #624]	; (800ee1c <tcp_input+0x288>)
 800ebac:	f007 f962 	bl	8015e74 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	4a9a      	ldr	r2, [pc, #616]	; (800ee20 <tcp_input+0x28c>)
 800ebb6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	895b      	ldrh	r3, [r3, #10]
 800ebbc:	2b13      	cmp	r3, #19
 800ebbe:	f240 83c4 	bls.w	800f34a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ebc2:	4b98      	ldr	r3, [pc, #608]	; (800ee24 <tcp_input+0x290>)
 800ebc4:	695a      	ldr	r2, [r3, #20]
 800ebc6:	4b97      	ldr	r3, [pc, #604]	; (800ee24 <tcp_input+0x290>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4619      	mov	r1, r3
 800ebcc:	4610      	mov	r0, r2
 800ebce:	f006 f8a9 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f040 83ba 	bne.w	800f34e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ebda:	4b92      	ldr	r3, [pc, #584]	; (800ee24 <tcp_input+0x290>)
 800ebdc:	695b      	ldr	r3, [r3, #20]
 800ebde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ebe2:	2be0      	cmp	r3, #224	; 0xe0
 800ebe4:	f000 83b3 	beq.w	800f34e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ebe8:	4b8d      	ldr	r3, [pc, #564]	; (800ee20 <tcp_input+0x28c>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	899b      	ldrh	r3, [r3, #12]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fc fb1b 	bl	800b22c <lwip_htons>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	0b1b      	lsrs	r3, r3, #12
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ec02:	7cbb      	ldrb	r3, [r7, #18]
 800ec04:	2b13      	cmp	r3, #19
 800ec06:	f240 83a2 	bls.w	800f34e <tcp_input+0x7ba>
 800ec0a:	7cbb      	ldrb	r3, [r7, #18]
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	891b      	ldrh	r3, [r3, #8]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	f200 839b 	bhi.w	800f34e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ec18:	7cbb      	ldrb	r3, [r7, #18]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	3b14      	subs	r3, #20
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	4b81      	ldr	r3, [pc, #516]	; (800ee28 <tcp_input+0x294>)
 800ec22:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ec24:	4b81      	ldr	r3, [pc, #516]	; (800ee2c <tcp_input+0x298>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	895a      	ldrh	r2, [r3, #10]
 800ec2e:	7cbb      	ldrb	r3, [r7, #18]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d309      	bcc.n	800ec4a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ec36:	4b7c      	ldr	r3, [pc, #496]	; (800ee28 <tcp_input+0x294>)
 800ec38:	881a      	ldrh	r2, [r3, #0]
 800ec3a:	4b7d      	ldr	r3, [pc, #500]	; (800ee30 <tcp_input+0x29c>)
 800ec3c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ec3e:	7cbb      	ldrb	r3, [r7, #18]
 800ec40:	4619      	mov	r1, r3
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7fd fe4a 	bl	800c8dc <pbuf_remove_header>
 800ec48:	e04e      	b.n	800ece8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d105      	bne.n	800ec5e <tcp_input+0xca>
 800ec52:	4b70      	ldr	r3, [pc, #448]	; (800ee14 <tcp_input+0x280>)
 800ec54:	22c2      	movs	r2, #194	; 0xc2
 800ec56:	4977      	ldr	r1, [pc, #476]	; (800ee34 <tcp_input+0x2a0>)
 800ec58:	4870      	ldr	r0, [pc, #448]	; (800ee1c <tcp_input+0x288>)
 800ec5a:	f007 f90b 	bl	8015e74 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ec5e:	2114      	movs	r1, #20
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7fd fe3b 	bl	800c8dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	895a      	ldrh	r2, [r3, #10]
 800ec6a:	4b71      	ldr	r3, [pc, #452]	; (800ee30 <tcp_input+0x29c>)
 800ec6c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ec6e:	4b6e      	ldr	r3, [pc, #440]	; (800ee28 <tcp_input+0x294>)
 800ec70:	881a      	ldrh	r2, [r3, #0]
 800ec72:	4b6f      	ldr	r3, [pc, #444]	; (800ee30 <tcp_input+0x29c>)
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	1ad3      	subs	r3, r2, r3
 800ec78:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ec7a:	4b6d      	ldr	r3, [pc, #436]	; (800ee30 <tcp_input+0x29c>)
 800ec7c:	881b      	ldrh	r3, [r3, #0]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7fd fe2b 	bl	800c8dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	895b      	ldrh	r3, [r3, #10]
 800ec8c:	8a3a      	ldrh	r2, [r7, #16]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	f200 835f 	bhi.w	800f352 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	4a64      	ldr	r2, [pc, #400]	; (800ee2c <tcp_input+0x298>)
 800ec9c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	8a3a      	ldrh	r2, [r7, #16]
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fd fe18 	bl	800c8dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	891a      	ldrh	r2, [r3, #8]
 800ecb0:	8a3b      	ldrh	r3, [r7, #16]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	895b      	ldrh	r3, [r3, #10]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d005      	beq.n	800ecce <tcp_input+0x13a>
 800ecc2:	4b54      	ldr	r3, [pc, #336]	; (800ee14 <tcp_input+0x280>)
 800ecc4:	22df      	movs	r2, #223	; 0xdf
 800ecc6:	495c      	ldr	r1, [pc, #368]	; (800ee38 <tcp_input+0x2a4>)
 800ecc8:	4854      	ldr	r0, [pc, #336]	; (800ee1c <tcp_input+0x288>)
 800ecca:	f007 f8d3 	bl	8015e74 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	891a      	ldrh	r2, [r3, #8]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	891b      	ldrh	r3, [r3, #8]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d005      	beq.n	800ece8 <tcp_input+0x154>
 800ecdc:	4b4d      	ldr	r3, [pc, #308]	; (800ee14 <tcp_input+0x280>)
 800ecde:	22e0      	movs	r2, #224	; 0xe0
 800ece0:	4956      	ldr	r1, [pc, #344]	; (800ee3c <tcp_input+0x2a8>)
 800ece2:	484e      	ldr	r0, [pc, #312]	; (800ee1c <tcp_input+0x288>)
 800ece4:	f007 f8c6 	bl	8015e74 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ece8:	4b4d      	ldr	r3, [pc, #308]	; (800ee20 <tcp_input+0x28c>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	4b4b      	ldr	r3, [pc, #300]	; (800ee20 <tcp_input+0x28c>)
 800ecf2:	681c      	ldr	r4, [r3, #0]
 800ecf4:	4610      	mov	r0, r2
 800ecf6:	f7fc fa99 	bl	800b22c <lwip_htons>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ecfe:	4b48      	ldr	r3, [pc, #288]	; (800ee20 <tcp_input+0x28c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	885b      	ldrh	r3, [r3, #2]
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	4b46      	ldr	r3, [pc, #280]	; (800ee20 <tcp_input+0x28c>)
 800ed08:	681c      	ldr	r4, [r3, #0]
 800ed0a:	4610      	mov	r0, r2
 800ed0c:	f7fc fa8e 	bl	800b22c <lwip_htons>
 800ed10:	4603      	mov	r3, r0
 800ed12:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ed14:	4b42      	ldr	r3, [pc, #264]	; (800ee20 <tcp_input+0x28c>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	685a      	ldr	r2, [r3, #4]
 800ed1a:	4b41      	ldr	r3, [pc, #260]	; (800ee20 <tcp_input+0x28c>)
 800ed1c:	681c      	ldr	r4, [r3, #0]
 800ed1e:	4610      	mov	r0, r2
 800ed20:	f7fc fa99 	bl	800b256 <lwip_htonl>
 800ed24:	4603      	mov	r3, r0
 800ed26:	6063      	str	r3, [r4, #4]
 800ed28:	6863      	ldr	r3, [r4, #4]
 800ed2a:	4a45      	ldr	r2, [pc, #276]	; (800ee40 <tcp_input+0x2ac>)
 800ed2c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ed2e:	4b3c      	ldr	r3, [pc, #240]	; (800ee20 <tcp_input+0x28c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	689a      	ldr	r2, [r3, #8]
 800ed34:	4b3a      	ldr	r3, [pc, #232]	; (800ee20 <tcp_input+0x28c>)
 800ed36:	681c      	ldr	r4, [r3, #0]
 800ed38:	4610      	mov	r0, r2
 800ed3a:	f7fc fa8c 	bl	800b256 <lwip_htonl>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	60a3      	str	r3, [r4, #8]
 800ed42:	68a3      	ldr	r3, [r4, #8]
 800ed44:	4a3f      	ldr	r2, [pc, #252]	; (800ee44 <tcp_input+0x2b0>)
 800ed46:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ed48:	4b35      	ldr	r3, [pc, #212]	; (800ee20 <tcp_input+0x28c>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	89db      	ldrh	r3, [r3, #14]
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	4b33      	ldr	r3, [pc, #204]	; (800ee20 <tcp_input+0x28c>)
 800ed52:	681c      	ldr	r4, [r3, #0]
 800ed54:	4610      	mov	r0, r2
 800ed56:	f7fc fa69 	bl	800b22c <lwip_htons>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ed5e:	4b30      	ldr	r3, [pc, #192]	; (800ee20 <tcp_input+0x28c>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	899b      	ldrh	r3, [r3, #12]
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fc fa60 	bl	800b22c <lwip_htons>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed74:	b2da      	uxtb	r2, r3
 800ed76:	4b34      	ldr	r3, [pc, #208]	; (800ee48 <tcp_input+0x2b4>)
 800ed78:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	891a      	ldrh	r2, [r3, #8]
 800ed7e:	4b33      	ldr	r3, [pc, #204]	; (800ee4c <tcp_input+0x2b8>)
 800ed80:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ed82:	4b31      	ldr	r3, [pc, #196]	; (800ee48 <tcp_input+0x2b4>)
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	f003 0303 	and.w	r3, r3, #3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00c      	beq.n	800eda8 <tcp_input+0x214>
    tcplen++;
 800ed8e:	4b2f      	ldr	r3, [pc, #188]	; (800ee4c <tcp_input+0x2b8>)
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	3301      	adds	r3, #1
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	4b2d      	ldr	r3, [pc, #180]	; (800ee4c <tcp_input+0x2b8>)
 800ed98:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	891a      	ldrh	r2, [r3, #8]
 800ed9e:	4b2b      	ldr	r3, [pc, #172]	; (800ee4c <tcp_input+0x2b8>)
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	f200 82d7 	bhi.w	800f356 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800eda8:	2300      	movs	r3, #0
 800edaa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edac:	4b28      	ldr	r3, [pc, #160]	; (800ee50 <tcp_input+0x2bc>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	61fb      	str	r3, [r7, #28]
 800edb2:	e09d      	b.n	800eef0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	7d1b      	ldrb	r3, [r3, #20]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d105      	bne.n	800edc8 <tcp_input+0x234>
 800edbc:	4b15      	ldr	r3, [pc, #84]	; (800ee14 <tcp_input+0x280>)
 800edbe:	22fb      	movs	r2, #251	; 0xfb
 800edc0:	4924      	ldr	r1, [pc, #144]	; (800ee54 <tcp_input+0x2c0>)
 800edc2:	4816      	ldr	r0, [pc, #88]	; (800ee1c <tcp_input+0x288>)
 800edc4:	f007 f856 	bl	8015e74 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	7d1b      	ldrb	r3, [r3, #20]
 800edcc:	2b0a      	cmp	r3, #10
 800edce:	d105      	bne.n	800eddc <tcp_input+0x248>
 800edd0:	4b10      	ldr	r3, [pc, #64]	; (800ee14 <tcp_input+0x280>)
 800edd2:	22fc      	movs	r2, #252	; 0xfc
 800edd4:	4920      	ldr	r1, [pc, #128]	; (800ee58 <tcp_input+0x2c4>)
 800edd6:	4811      	ldr	r0, [pc, #68]	; (800ee1c <tcp_input+0x288>)
 800edd8:	f007 f84c 	bl	8015e74 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	7d1b      	ldrb	r3, [r3, #20]
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d105      	bne.n	800edf0 <tcp_input+0x25c>
 800ede4:	4b0b      	ldr	r3, [pc, #44]	; (800ee14 <tcp_input+0x280>)
 800ede6:	22fd      	movs	r2, #253	; 0xfd
 800ede8:	491c      	ldr	r1, [pc, #112]	; (800ee5c <tcp_input+0x2c8>)
 800edea:	480c      	ldr	r0, [pc, #48]	; (800ee1c <tcp_input+0x288>)
 800edec:	f007 f842 	bl	8015e74 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	7a1b      	ldrb	r3, [r3, #8]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d033      	beq.n	800ee60 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	7a1a      	ldrb	r2, [r3, #8]
 800edfc:	4b09      	ldr	r3, [pc, #36]	; (800ee24 <tcp_input+0x290>)
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee04:	3301      	adds	r3, #1
 800ee06:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d029      	beq.n	800ee60 <tcp_input+0x2cc>
      prev = pcb;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	61bb      	str	r3, [r7, #24]
      continue;
 800ee10:	e06b      	b.n	800eeea <tcp_input+0x356>
 800ee12:	bf00      	nop
 800ee14:	080182d4 	.word	0x080182d4
 800ee18:	08018308 	.word	0x08018308
 800ee1c:	08018320 	.word	0x08018320
 800ee20:	200044f4 	.word	0x200044f4
 800ee24:	20007dec 	.word	0x20007dec
 800ee28:	200044f8 	.word	0x200044f8
 800ee2c:	200044fc 	.word	0x200044fc
 800ee30:	200044fa 	.word	0x200044fa
 800ee34:	08018348 	.word	0x08018348
 800ee38:	08018358 	.word	0x08018358
 800ee3c:	08018364 	.word	0x08018364
 800ee40:	20004504 	.word	0x20004504
 800ee44:	20004508 	.word	0x20004508
 800ee48:	20004510 	.word	0x20004510
 800ee4c:	2000450e 	.word	0x2000450e
 800ee50:	2000b500 	.word	0x2000b500
 800ee54:	08018384 	.word	0x08018384
 800ee58:	080183ac 	.word	0x080183ac
 800ee5c:	080183d8 	.word	0x080183d8
    }

    if (pcb->remote_port == tcphdr->src &&
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	8b1a      	ldrh	r2, [r3, #24]
 800ee64:	4b94      	ldr	r3, [pc, #592]	; (800f0b8 <tcp_input+0x524>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	881b      	ldrh	r3, [r3, #0]
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d13a      	bne.n	800eee6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	8ada      	ldrh	r2, [r3, #22]
 800ee74:	4b90      	ldr	r3, [pc, #576]	; (800f0b8 <tcp_input+0x524>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	885b      	ldrh	r3, [r3, #2]
 800ee7a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d132      	bne.n	800eee6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	685a      	ldr	r2, [r3, #4]
 800ee84:	4b8d      	ldr	r3, [pc, #564]	; (800f0bc <tcp_input+0x528>)
 800ee86:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d12c      	bne.n	800eee6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	4b8a      	ldr	r3, [pc, #552]	; (800f0bc <tcp_input+0x528>)
 800ee92:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d126      	bne.n	800eee6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	69fa      	ldr	r2, [r7, #28]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d106      	bne.n	800eeb0 <tcp_input+0x31c>
 800eea2:	4b87      	ldr	r3, [pc, #540]	; (800f0c0 <tcp_input+0x52c>)
 800eea4:	f240 120d 	movw	r2, #269	; 0x10d
 800eea8:	4986      	ldr	r1, [pc, #536]	; (800f0c4 <tcp_input+0x530>)
 800eeaa:	4887      	ldr	r0, [pc, #540]	; (800f0c8 <tcp_input+0x534>)
 800eeac:	f006 ffe2 	bl	8015e74 <iprintf>
      if (prev != NULL) {
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00a      	beq.n	800eecc <tcp_input+0x338>
        prev->next = pcb->next;
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	68da      	ldr	r2, [r3, #12]
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800eebe:	4b83      	ldr	r3, [pc, #524]	; (800f0cc <tcp_input+0x538>)
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800eec6:	4a81      	ldr	r2, [pc, #516]	; (800f0cc <tcp_input+0x538>)
 800eec8:	69fb      	ldr	r3, [r7, #28]
 800eeca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	69fa      	ldr	r2, [r7, #28]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d111      	bne.n	800eefa <tcp_input+0x366>
 800eed6:	4b7a      	ldr	r3, [pc, #488]	; (800f0c0 <tcp_input+0x52c>)
 800eed8:	f240 1215 	movw	r2, #277	; 0x115
 800eedc:	497c      	ldr	r1, [pc, #496]	; (800f0d0 <tcp_input+0x53c>)
 800eede:	487a      	ldr	r0, [pc, #488]	; (800f0c8 <tcp_input+0x534>)
 800eee0:	f006 ffc8 	bl	8015e74 <iprintf>
      break;
 800eee4:	e009      	b.n	800eefa <tcp_input+0x366>
    }
    prev = pcb;
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	61fb      	str	r3, [r7, #28]
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f47f af5e 	bne.w	800edb4 <tcp_input+0x220>
 800eef8:	e000      	b.n	800eefc <tcp_input+0x368>
      break;
 800eefa:	bf00      	nop
  }

  if (pcb == NULL) {
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f040 8095 	bne.w	800f02e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef04:	4b73      	ldr	r3, [pc, #460]	; (800f0d4 <tcp_input+0x540>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	61fb      	str	r3, [r7, #28]
 800ef0a:	e03f      	b.n	800ef8c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	7d1b      	ldrb	r3, [r3, #20]
 800ef10:	2b0a      	cmp	r3, #10
 800ef12:	d006      	beq.n	800ef22 <tcp_input+0x38e>
 800ef14:	4b6a      	ldr	r3, [pc, #424]	; (800f0c0 <tcp_input+0x52c>)
 800ef16:	f240 121f 	movw	r2, #287	; 0x11f
 800ef1a:	496f      	ldr	r1, [pc, #444]	; (800f0d8 <tcp_input+0x544>)
 800ef1c:	486a      	ldr	r0, [pc, #424]	; (800f0c8 <tcp_input+0x534>)
 800ef1e:	f006 ffa9 	bl	8015e74 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	7a1b      	ldrb	r3, [r3, #8]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d009      	beq.n	800ef3e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	7a1a      	ldrb	r2, [r3, #8]
 800ef2e:	4b63      	ldr	r3, [pc, #396]	; (800f0bc <tcp_input+0x528>)
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef36:	3301      	adds	r3, #1
 800ef38:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d122      	bne.n	800ef84 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	8b1a      	ldrh	r2, [r3, #24]
 800ef42:	4b5d      	ldr	r3, [pc, #372]	; (800f0b8 <tcp_input+0x524>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	881b      	ldrh	r3, [r3, #0]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d11b      	bne.n	800ef86 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	8ada      	ldrh	r2, [r3, #22]
 800ef52:	4b59      	ldr	r3, [pc, #356]	; (800f0b8 <tcp_input+0x524>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	885b      	ldrh	r3, [r3, #2]
 800ef58:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d113      	bne.n	800ef86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	685a      	ldr	r2, [r3, #4]
 800ef62:	4b56      	ldr	r3, [pc, #344]	; (800f0bc <tcp_input+0x528>)
 800ef64:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d10d      	bne.n	800ef86 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	4b53      	ldr	r3, [pc, #332]	; (800f0bc <tcp_input+0x528>)
 800ef70:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d107      	bne.n	800ef86 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ef76:	69f8      	ldr	r0, [r7, #28]
 800ef78:	f000 fb52 	bl	800f620 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7fd fd33 	bl	800c9e8 <pbuf_free>
        return;
 800ef82:	e1ee      	b.n	800f362 <tcp_input+0x7ce>
        continue;
 800ef84:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	61fb      	str	r3, [r7, #28]
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1bc      	bne.n	800ef0c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ef92:	2300      	movs	r3, #0
 800ef94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef96:	4b51      	ldr	r3, [pc, #324]	; (800f0dc <tcp_input+0x548>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	617b      	str	r3, [r7, #20]
 800ef9c:	e02a      	b.n	800eff4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ef9e:	697b      	ldr	r3, [r7, #20]
 800efa0:	7a1b      	ldrb	r3, [r3, #8]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00c      	beq.n	800efc0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	7a1a      	ldrb	r2, [r3, #8]
 800efaa:	4b44      	ldr	r3, [pc, #272]	; (800f0bc <tcp_input+0x528>)
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800efb2:	3301      	adds	r3, #1
 800efb4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d002      	beq.n	800efc0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	61bb      	str	r3, [r7, #24]
        continue;
 800efbe:	e016      	b.n	800efee <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	8ada      	ldrh	r2, [r3, #22]
 800efc4:	4b3c      	ldr	r3, [pc, #240]	; (800f0b8 <tcp_input+0x524>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	885b      	ldrh	r3, [r3, #2]
 800efca:	b29b      	uxth	r3, r3
 800efcc:	429a      	cmp	r2, r3
 800efce:	d10c      	bne.n	800efea <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	4b39      	ldr	r3, [pc, #228]	; (800f0bc <tcp_input+0x528>)
 800efd6:	695b      	ldr	r3, [r3, #20]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d00f      	beq.n	800effc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d00d      	beq.n	800effe <tcp_input+0x46a>
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d009      	beq.n	800effe <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	617b      	str	r3, [r7, #20]
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1d1      	bne.n	800ef9e <tcp_input+0x40a>
 800effa:	e000      	b.n	800effe <tcp_input+0x46a>
            break;
 800effc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d014      	beq.n	800f02e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00a      	beq.n	800f020 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	68da      	ldr	r2, [r3, #12]
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f012:	4b32      	ldr	r3, [pc, #200]	; (800f0dc <tcp_input+0x548>)
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f01a:	4a30      	ldr	r2, [pc, #192]	; (800f0dc <tcp_input+0x548>)
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f020:	6978      	ldr	r0, [r7, #20]
 800f022:	f000 f9ff 	bl	800f424 <tcp_listen_input>
      }
      pbuf_free(p);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7fd fcde 	bl	800c9e8 <pbuf_free>
      return;
 800f02c:	e199      	b.n	800f362 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f02e:	69fb      	ldr	r3, [r7, #28]
 800f030:	2b00      	cmp	r3, #0
 800f032:	f000 8160 	beq.w	800f2f6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f036:	4b2a      	ldr	r3, [pc, #168]	; (800f0e0 <tcp_input+0x54c>)
 800f038:	2200      	movs	r2, #0
 800f03a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	891a      	ldrh	r2, [r3, #8]
 800f040:	4b27      	ldr	r3, [pc, #156]	; (800f0e0 <tcp_input+0x54c>)
 800f042:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f044:	4a26      	ldr	r2, [pc, #152]	; (800f0e0 <tcp_input+0x54c>)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f04a:	4b1b      	ldr	r3, [pc, #108]	; (800f0b8 <tcp_input+0x524>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a24      	ldr	r2, [pc, #144]	; (800f0e0 <tcp_input+0x54c>)
 800f050:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f052:	4b24      	ldr	r3, [pc, #144]	; (800f0e4 <tcp_input+0x550>)
 800f054:	2200      	movs	r2, #0
 800f056:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f058:	4b23      	ldr	r3, [pc, #140]	; (800f0e8 <tcp_input+0x554>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f05e:	4b23      	ldr	r3, [pc, #140]	; (800f0ec <tcp_input+0x558>)
 800f060:	2200      	movs	r2, #0
 800f062:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f064:	4b22      	ldr	r3, [pc, #136]	; (800f0f0 <tcp_input+0x55c>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	f003 0308 	and.w	r3, r3, #8
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d006      	beq.n	800f07e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	7b5b      	ldrb	r3, [r3, #13]
 800f074:	f043 0301 	orr.w	r3, r3, #1
 800f078:	b2da      	uxtb	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f082:	2b00      	cmp	r3, #0
 800f084:	d038      	beq.n	800f0f8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f086:	69f8      	ldr	r0, [r7, #28]
 800f088:	f7ff f84c 	bl	800e124 <tcp_process_refused_data>
 800f08c:	4603      	mov	r3, r0
 800f08e:	f113 0f0d 	cmn.w	r3, #13
 800f092:	d007      	beq.n	800f0a4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d02d      	beq.n	800f0f8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f09c:	4b15      	ldr	r3, [pc, #84]	; (800f0f4 <tcp_input+0x560>)
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d029      	beq.n	800f0f8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f0a4:	69fb      	ldr	r3, [r7, #28]
 800f0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f040 8104 	bne.w	800f2b6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f0ae:	69f8      	ldr	r0, [r7, #28]
 800f0b0:	f003 fe28 	bl	8012d04 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f0b4:	e0ff      	b.n	800f2b6 <tcp_input+0x722>
 800f0b6:	bf00      	nop
 800f0b8:	200044f4 	.word	0x200044f4
 800f0bc:	20007dec 	.word	0x20007dec
 800f0c0:	080182d4 	.word	0x080182d4
 800f0c4:	08018400 	.word	0x08018400
 800f0c8:	08018320 	.word	0x08018320
 800f0cc:	2000b500 	.word	0x2000b500
 800f0d0:	0801842c 	.word	0x0801842c
 800f0d4:	2000b510 	.word	0x2000b510
 800f0d8:	08018458 	.word	0x08018458
 800f0dc:	2000b508 	.word	0x2000b508
 800f0e0:	200044e4 	.word	0x200044e4
 800f0e4:	20004514 	.word	0x20004514
 800f0e8:	20004511 	.word	0x20004511
 800f0ec:	2000450c 	.word	0x2000450c
 800f0f0:	20004510 	.word	0x20004510
 800f0f4:	2000450e 	.word	0x2000450e
      }
    }
    tcp_input_pcb = pcb;
 800f0f8:	4a9b      	ldr	r2, [pc, #620]	; (800f368 <tcp_input+0x7d4>)
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f0fe:	69f8      	ldr	r0, [r7, #28]
 800f100:	f000 fb0a 	bl	800f718 <tcp_process>
 800f104:	4603      	mov	r3, r0
 800f106:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f108:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f10c:	f113 0f0d 	cmn.w	r3, #13
 800f110:	f000 80d3 	beq.w	800f2ba <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f114:	4b95      	ldr	r3, [pc, #596]	; (800f36c <tcp_input+0x7d8>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	f003 0308 	and.w	r3, r3, #8
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d015      	beq.n	800f14c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f126:	2b00      	cmp	r3, #0
 800f128:	d008      	beq.n	800f13c <tcp_input+0x5a8>
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f130:	69fa      	ldr	r2, [r7, #28]
 800f132:	6912      	ldr	r2, [r2, #16]
 800f134:	f06f 010d 	mvn.w	r1, #13
 800f138:	4610      	mov	r0, r2
 800f13a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f13c:	69f9      	ldr	r1, [r7, #28]
 800f13e:	488c      	ldr	r0, [pc, #560]	; (800f370 <tcp_input+0x7dc>)
 800f140:	f7ff fbb0 	bl	800e8a4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f144:	69f8      	ldr	r0, [r7, #28]
 800f146:	f7fd fefb 	bl	800cf40 <tcp_free>
 800f14a:	e0c1      	b.n	800f2d0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f150:	4b88      	ldr	r3, [pc, #544]	; (800f374 <tcp_input+0x7e0>)
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d01d      	beq.n	800f194 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f158:	4b86      	ldr	r3, [pc, #536]	; (800f374 <tcp_input+0x7e0>)
 800f15a:	881b      	ldrh	r3, [r3, #0]
 800f15c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00a      	beq.n	800f17e <tcp_input+0x5ea>
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f16e:	69fa      	ldr	r2, [r7, #28]
 800f170:	6910      	ldr	r0, [r2, #16]
 800f172:	89fa      	ldrh	r2, [r7, #14]
 800f174:	69f9      	ldr	r1, [r7, #28]
 800f176:	4798      	blx	r3
 800f178:	4603      	mov	r3, r0
 800f17a:	74fb      	strb	r3, [r7, #19]
 800f17c:	e001      	b.n	800f182 <tcp_input+0x5ee>
 800f17e:	2300      	movs	r3, #0
 800f180:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f182:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f186:	f113 0f0d 	cmn.w	r3, #13
 800f18a:	f000 8098 	beq.w	800f2be <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f18e:	4b79      	ldr	r3, [pc, #484]	; (800f374 <tcp_input+0x7e0>)
 800f190:	2200      	movs	r2, #0
 800f192:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f194:	69f8      	ldr	r0, [r7, #28]
 800f196:	f000 f905 	bl	800f3a4 <tcp_input_delayed_close>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f040 8090 	bne.w	800f2c2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f1a2:	4b75      	ldr	r3, [pc, #468]	; (800f378 <tcp_input+0x7e4>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d041      	beq.n	800f22e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d006      	beq.n	800f1c0 <tcp_input+0x62c>
 800f1b2:	4b72      	ldr	r3, [pc, #456]	; (800f37c <tcp_input+0x7e8>)
 800f1b4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f1b8:	4971      	ldr	r1, [pc, #452]	; (800f380 <tcp_input+0x7ec>)
 800f1ba:	4872      	ldr	r0, [pc, #456]	; (800f384 <tcp_input+0x7f0>)
 800f1bc:	f006 fe5a 	bl	8015e74 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f1c0:	69fb      	ldr	r3, [r7, #28]
 800f1c2:	8b5b      	ldrh	r3, [r3, #26]
 800f1c4:	f003 0310 	and.w	r3, r3, #16
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d008      	beq.n	800f1de <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f1cc:	4b6a      	ldr	r3, [pc, #424]	; (800f378 <tcp_input+0x7e4>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7fd fc09 	bl	800c9e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f1d6:	69f8      	ldr	r0, [r7, #28]
 800f1d8:	f7fe f992 	bl	800d500 <tcp_abort>
            goto aborted;
 800f1dc:	e078      	b.n	800f2d0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00c      	beq.n	800f202 <tcp_input+0x66e>
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	6918      	ldr	r0, [r3, #16]
 800f1f2:	4b61      	ldr	r3, [pc, #388]	; (800f378 <tcp_input+0x7e4>)
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	69f9      	ldr	r1, [r7, #28]
 800f1fa:	47a0      	blx	r4
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	74fb      	strb	r3, [r7, #19]
 800f200:	e008      	b.n	800f214 <tcp_input+0x680>
 800f202:	4b5d      	ldr	r3, [pc, #372]	; (800f378 <tcp_input+0x7e4>)
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	2300      	movs	r3, #0
 800f208:	69f9      	ldr	r1, [r7, #28]
 800f20a:	2000      	movs	r0, #0
 800f20c:	f7ff f87c 	bl	800e308 <tcp_recv_null>
 800f210:	4603      	mov	r3, r0
 800f212:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f214:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f218:	f113 0f0d 	cmn.w	r3, #13
 800f21c:	d053      	beq.n	800f2c6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f21e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d003      	beq.n	800f22e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f226:	4b54      	ldr	r3, [pc, #336]	; (800f378 <tcp_input+0x7e4>)
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f22e:	4b4f      	ldr	r3, [pc, #316]	; (800f36c <tcp_input+0x7d8>)
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	f003 0320 	and.w	r3, r3, #32
 800f236:	2b00      	cmp	r3, #0
 800f238:	d030      	beq.n	800f29c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f23a:	69fb      	ldr	r3, [r7, #28]
 800f23c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d009      	beq.n	800f256 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f242:	69fb      	ldr	r3, [r7, #28]
 800f244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f246:	7b5a      	ldrb	r2, [r3, #13]
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f24c:	f042 0220 	orr.w	r2, r2, #32
 800f250:	b2d2      	uxtb	r2, r2
 800f252:	735a      	strb	r2, [r3, #13]
 800f254:	e022      	b.n	800f29c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f25a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f25e:	d005      	beq.n	800f26c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f264:	3301      	adds	r3, #1
 800f266:	b29a      	uxth	r2, r3
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00b      	beq.n	800f28e <tcp_input+0x6fa>
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	6918      	ldr	r0, [r3, #16]
 800f280:	2300      	movs	r3, #0
 800f282:	2200      	movs	r2, #0
 800f284:	69f9      	ldr	r1, [r7, #28]
 800f286:	47a0      	blx	r4
 800f288:	4603      	mov	r3, r0
 800f28a:	74fb      	strb	r3, [r7, #19]
 800f28c:	e001      	b.n	800f292 <tcp_input+0x6fe>
 800f28e:	2300      	movs	r3, #0
 800f290:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f292:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f296:	f113 0f0d 	cmn.w	r3, #13
 800f29a:	d016      	beq.n	800f2ca <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f29c:	4b32      	ldr	r3, [pc, #200]	; (800f368 <tcp_input+0x7d4>)
 800f29e:	2200      	movs	r2, #0
 800f2a0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f2a2:	69f8      	ldr	r0, [r7, #28]
 800f2a4:	f000 f87e 	bl	800f3a4 <tcp_input_delayed_close>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d10f      	bne.n	800f2ce <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f2ae:	69f8      	ldr	r0, [r7, #28]
 800f2b0:	f002 ff10 	bl	80120d4 <tcp_output>
 800f2b4:	e00c      	b.n	800f2d0 <tcp_input+0x73c>
        goto aborted;
 800f2b6:	bf00      	nop
 800f2b8:	e00a      	b.n	800f2d0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f2ba:	bf00      	nop
 800f2bc:	e008      	b.n	800f2d0 <tcp_input+0x73c>
              goto aborted;
 800f2be:	bf00      	nop
 800f2c0:	e006      	b.n	800f2d0 <tcp_input+0x73c>
          goto aborted;
 800f2c2:	bf00      	nop
 800f2c4:	e004      	b.n	800f2d0 <tcp_input+0x73c>
            goto aborted;
 800f2c6:	bf00      	nop
 800f2c8:	e002      	b.n	800f2d0 <tcp_input+0x73c>
              goto aborted;
 800f2ca:	bf00      	nop
 800f2cc:	e000      	b.n	800f2d0 <tcp_input+0x73c>
          goto aborted;
 800f2ce:	bf00      	nop
    tcp_input_pcb = NULL;
 800f2d0:	4b25      	ldr	r3, [pc, #148]	; (800f368 <tcp_input+0x7d4>)
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f2d6:	4b28      	ldr	r3, [pc, #160]	; (800f378 <tcp_input+0x7e4>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f2dc:	4b2a      	ldr	r3, [pc, #168]	; (800f388 <tcp_input+0x7f4>)
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d03d      	beq.n	800f360 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800f2e4:	4b28      	ldr	r3, [pc, #160]	; (800f388 <tcp_input+0x7f4>)
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fd fb7d 	bl	800c9e8 <pbuf_free>
      inseg.p = NULL;
 800f2ee:	4b26      	ldr	r3, [pc, #152]	; (800f388 <tcp_input+0x7f4>)
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f2f4:	e034      	b.n	800f360 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f2f6:	4b25      	ldr	r3, [pc, #148]	; (800f38c <tcp_input+0x7f8>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	899b      	ldrh	r3, [r3, #12]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fb ff94 	bl	800b22c <lwip_htons>
 800f304:	4603      	mov	r3, r0
 800f306:	b2db      	uxtb	r3, r3
 800f308:	f003 0304 	and.w	r3, r3, #4
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d118      	bne.n	800f342 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f310:	4b1f      	ldr	r3, [pc, #124]	; (800f390 <tcp_input+0x7fc>)
 800f312:	6819      	ldr	r1, [r3, #0]
 800f314:	4b1f      	ldr	r3, [pc, #124]	; (800f394 <tcp_input+0x800>)
 800f316:	881b      	ldrh	r3, [r3, #0]
 800f318:	461a      	mov	r2, r3
 800f31a:	4b1f      	ldr	r3, [pc, #124]	; (800f398 <tcp_input+0x804>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f320:	4b1a      	ldr	r3, [pc, #104]	; (800f38c <tcp_input+0x7f8>)
 800f322:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f324:	885b      	ldrh	r3, [r3, #2]
 800f326:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f328:	4a18      	ldr	r2, [pc, #96]	; (800f38c <tcp_input+0x7f8>)
 800f32a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f32c:	8812      	ldrh	r2, [r2, #0]
 800f32e:	b292      	uxth	r2, r2
 800f330:	9202      	str	r2, [sp, #8]
 800f332:	9301      	str	r3, [sp, #4]
 800f334:	4b19      	ldr	r3, [pc, #100]	; (800f39c <tcp_input+0x808>)
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	4b19      	ldr	r3, [pc, #100]	; (800f3a0 <tcp_input+0x80c>)
 800f33a:	4602      	mov	r2, r0
 800f33c:	2000      	movs	r0, #0
 800f33e:	f003 fc8f 	bl	8012c60 <tcp_rst>
    pbuf_free(p);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7fd fb50 	bl	800c9e8 <pbuf_free>
  return;
 800f348:	e00a      	b.n	800f360 <tcp_input+0x7cc>
    goto dropped;
 800f34a:	bf00      	nop
 800f34c:	e004      	b.n	800f358 <tcp_input+0x7c4>
dropped:
 800f34e:	bf00      	nop
 800f350:	e002      	b.n	800f358 <tcp_input+0x7c4>
      goto dropped;
 800f352:	bf00      	nop
 800f354:	e000      	b.n	800f358 <tcp_input+0x7c4>
      goto dropped;
 800f356:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7fd fb45 	bl	800c9e8 <pbuf_free>
 800f35e:	e000      	b.n	800f362 <tcp_input+0x7ce>
  return;
 800f360:	bf00      	nop
}
 800f362:	3724      	adds	r7, #36	; 0x24
 800f364:	46bd      	mov	sp, r7
 800f366:	bd90      	pop	{r4, r7, pc}
 800f368:	2000b514 	.word	0x2000b514
 800f36c:	20004511 	.word	0x20004511
 800f370:	2000b500 	.word	0x2000b500
 800f374:	2000450c 	.word	0x2000450c
 800f378:	20004514 	.word	0x20004514
 800f37c:	080182d4 	.word	0x080182d4
 800f380:	08018488 	.word	0x08018488
 800f384:	08018320 	.word	0x08018320
 800f388:	200044e4 	.word	0x200044e4
 800f38c:	200044f4 	.word	0x200044f4
 800f390:	20004508 	.word	0x20004508
 800f394:	2000450e 	.word	0x2000450e
 800f398:	20004504 	.word	0x20004504
 800f39c:	20007dfc 	.word	0x20007dfc
 800f3a0:	20007e00 	.word	0x20007e00

0800f3a4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <tcp_input_delayed_close+0x1c>
 800f3b2:	4b17      	ldr	r3, [pc, #92]	; (800f410 <tcp_input_delayed_close+0x6c>)
 800f3b4:	f240 225a 	movw	r2, #602	; 0x25a
 800f3b8:	4916      	ldr	r1, [pc, #88]	; (800f414 <tcp_input_delayed_close+0x70>)
 800f3ba:	4817      	ldr	r0, [pc, #92]	; (800f418 <tcp_input_delayed_close+0x74>)
 800f3bc:	f006 fd5a 	bl	8015e74 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f3c0:	4b16      	ldr	r3, [pc, #88]	; (800f41c <tcp_input_delayed_close+0x78>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	f003 0310 	and.w	r3, r3, #16
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01c      	beq.n	800f406 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	8b5b      	ldrh	r3, [r3, #26]
 800f3d0:	f003 0310 	and.w	r3, r3, #16
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d10d      	bne.n	800f3f4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d008      	beq.n	800f3f4 <tcp_input_delayed_close+0x50>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	6912      	ldr	r2, [r2, #16]
 800f3ec:	f06f 010e 	mvn.w	r1, #14
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f3f4:	6879      	ldr	r1, [r7, #4]
 800f3f6:	480a      	ldr	r0, [pc, #40]	; (800f420 <tcp_input_delayed_close+0x7c>)
 800f3f8:	f7ff fa54 	bl	800e8a4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7fd fd9f 	bl	800cf40 <tcp_free>
    return 1;
 800f402:	2301      	movs	r3, #1
 800f404:	e000      	b.n	800f408 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	080182d4 	.word	0x080182d4
 800f414:	080184a4 	.word	0x080184a4
 800f418:	08018320 	.word	0x08018320
 800f41c:	20004511 	.word	0x20004511
 800f420:	2000b500 	.word	0x2000b500

0800f424 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f424:	b590      	push	{r4, r7, lr}
 800f426:	b08b      	sub	sp, #44	; 0x2c
 800f428:	af04      	add	r7, sp, #16
 800f42a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f42c:	4b6f      	ldr	r3, [pc, #444]	; (800f5ec <tcp_listen_input+0x1c8>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	f003 0304 	and.w	r3, r3, #4
 800f434:	2b00      	cmp	r3, #0
 800f436:	f040 80d3 	bne.w	800f5e0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d106      	bne.n	800f44e <tcp_listen_input+0x2a>
 800f440:	4b6b      	ldr	r3, [pc, #428]	; (800f5f0 <tcp_listen_input+0x1cc>)
 800f442:	f240 2281 	movw	r2, #641	; 0x281
 800f446:	496b      	ldr	r1, [pc, #428]	; (800f5f4 <tcp_listen_input+0x1d0>)
 800f448:	486b      	ldr	r0, [pc, #428]	; (800f5f8 <tcp_listen_input+0x1d4>)
 800f44a:	f006 fd13 	bl	8015e74 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f44e:	4b67      	ldr	r3, [pc, #412]	; (800f5ec <tcp_listen_input+0x1c8>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	f003 0310 	and.w	r3, r3, #16
 800f456:	2b00      	cmp	r3, #0
 800f458:	d019      	beq.n	800f48e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f45a:	4b68      	ldr	r3, [pc, #416]	; (800f5fc <tcp_listen_input+0x1d8>)
 800f45c:	6819      	ldr	r1, [r3, #0]
 800f45e:	4b68      	ldr	r3, [pc, #416]	; (800f600 <tcp_listen_input+0x1dc>)
 800f460:	881b      	ldrh	r3, [r3, #0]
 800f462:	461a      	mov	r2, r3
 800f464:	4b67      	ldr	r3, [pc, #412]	; (800f604 <tcp_listen_input+0x1e0>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f46a:	4b67      	ldr	r3, [pc, #412]	; (800f608 <tcp_listen_input+0x1e4>)
 800f46c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f46e:	885b      	ldrh	r3, [r3, #2]
 800f470:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f472:	4a65      	ldr	r2, [pc, #404]	; (800f608 <tcp_listen_input+0x1e4>)
 800f474:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f476:	8812      	ldrh	r2, [r2, #0]
 800f478:	b292      	uxth	r2, r2
 800f47a:	9202      	str	r2, [sp, #8]
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	4b63      	ldr	r3, [pc, #396]	; (800f60c <tcp_listen_input+0x1e8>)
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	4b63      	ldr	r3, [pc, #396]	; (800f610 <tcp_listen_input+0x1ec>)
 800f484:	4602      	mov	r2, r0
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f003 fbea 	bl	8012c60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f48c:	e0aa      	b.n	800f5e4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800f48e:	4b57      	ldr	r3, [pc, #348]	; (800f5ec <tcp_listen_input+0x1c8>)
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	f003 0302 	and.w	r3, r3, #2
 800f496:	2b00      	cmp	r3, #0
 800f498:	f000 80a4 	beq.w	800f5e4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	7d5b      	ldrb	r3, [r3, #21]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff f855 	bl	800e550 <tcp_alloc>
 800f4a6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d111      	bne.n	800f4d2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	699b      	ldr	r3, [r3, #24]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00a      	beq.n	800f4cc <tcp_listen_input+0xa8>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	699b      	ldr	r3, [r3, #24]
 800f4ba:	687a      	ldr	r2, [r7, #4]
 800f4bc:	6910      	ldr	r0, [r2, #16]
 800f4be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	4798      	blx	r3
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	73bb      	strb	r3, [r7, #14]
      return;
 800f4ca:	e08c      	b.n	800f5e6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f4cc:	23f0      	movs	r3, #240	; 0xf0
 800f4ce:	73bb      	strb	r3, [r7, #14]
      return;
 800f4d0:	e089      	b.n	800f5e6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f4d2:	4b50      	ldr	r3, [pc, #320]	; (800f614 <tcp_listen_input+0x1f0>)
 800f4d4:	695a      	ldr	r2, [r3, #20]
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f4da:	4b4e      	ldr	r3, [pc, #312]	; (800f614 <tcp_listen_input+0x1f0>)
 800f4dc:	691a      	ldr	r2, [r3, #16]
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8ada      	ldrh	r2, [r3, #22]
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f4ea:	4b47      	ldr	r3, [pc, #284]	; (800f608 <tcp_listen_input+0x1e4>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	881b      	ldrh	r3, [r3, #0]
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	2203      	movs	r2, #3
 800f4fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f4fc:	4b41      	ldr	r3, [pc, #260]	; (800f604 <tcp_listen_input+0x1e0>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	1c5a      	adds	r2, r3, #1
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f50e:	6978      	ldr	r0, [r7, #20]
 800f510:	f7ff fa5c 	bl	800e9cc <tcp_next_iss>
 800f514:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	693a      	ldr	r2, [r7, #16]
 800f526:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	693a      	ldr	r2, [r7, #16]
 800f52c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f52e:	4b35      	ldr	r3, [pc, #212]	; (800f604 <tcp_listen_input+0x1e0>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	1e5a      	subs	r2, r3, #1
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	691a      	ldr	r2, [r3, #16]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	7a5b      	ldrb	r3, [r3, #9]
 800f54a:	f003 030c 	and.w	r3, r3, #12
 800f54e:	b2da      	uxtb	r2, r3
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	7a1a      	ldrb	r2, [r3, #8]
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f55c:	4b2e      	ldr	r3, [pc, #184]	; (800f618 <tcp_listen_input+0x1f4>)
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	60da      	str	r2, [r3, #12]
 800f564:	4a2c      	ldr	r2, [pc, #176]	; (800f618 <tcp_listen_input+0x1f4>)
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	6013      	str	r3, [r2, #0]
 800f56a:	f003 fd3b 	bl	8012fe4 <tcp_timer_needed>
 800f56e:	4b2b      	ldr	r3, [pc, #172]	; (800f61c <tcp_listen_input+0x1f8>)
 800f570:	2201      	movs	r2, #1
 800f572:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f574:	6978      	ldr	r0, [r7, #20]
 800f576:	f001 fd8f 	bl	8011098 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f57a:	4b23      	ldr	r3, [pc, #140]	; (800f608 <tcp_listen_input+0x1e4>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	89db      	ldrh	r3, [r3, #14]
 800f580:	b29a      	uxth	r2, r3
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	3304      	adds	r3, #4
 800f59c:	4618      	mov	r0, r3
 800f59e:	f005 f92d 	bl	80147fc <ip4_route>
 800f5a2:	4601      	mov	r1, r0
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	3304      	adds	r3, #4
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f7ff fa34 	bl	800ea18 <tcp_eff_send_mss_netif>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f5b8:	2112      	movs	r1, #18
 800f5ba:	6978      	ldr	r0, [r7, #20]
 800f5bc:	f002 fc9c 	bl	8011ef8 <tcp_enqueue_flags>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f5c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d004      	beq.n	800f5d6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	6978      	ldr	r0, [r7, #20]
 800f5d0:	f7fd fed8 	bl	800d384 <tcp_abandon>
      return;
 800f5d4:	e007      	b.n	800f5e6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800f5d6:	6978      	ldr	r0, [r7, #20]
 800f5d8:	f002 fd7c 	bl	80120d4 <tcp_output>
  return;
 800f5dc:	bf00      	nop
 800f5de:	e001      	b.n	800f5e4 <tcp_listen_input+0x1c0>
    return;
 800f5e0:	bf00      	nop
 800f5e2:	e000      	b.n	800f5e6 <tcp_listen_input+0x1c2>
  return;
 800f5e4:	bf00      	nop
}
 800f5e6:	371c      	adds	r7, #28
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd90      	pop	{r4, r7, pc}
 800f5ec:	20004510 	.word	0x20004510
 800f5f0:	080182d4 	.word	0x080182d4
 800f5f4:	080184cc 	.word	0x080184cc
 800f5f8:	08018320 	.word	0x08018320
 800f5fc:	20004508 	.word	0x20004508
 800f600:	2000450e 	.word	0x2000450e
 800f604:	20004504 	.word	0x20004504
 800f608:	200044f4 	.word	0x200044f4
 800f60c:	20007dfc 	.word	0x20007dfc
 800f610:	20007e00 	.word	0x20007e00
 800f614:	20007dec 	.word	0x20007dec
 800f618:	2000b500 	.word	0x2000b500
 800f61c:	2000b4fc 	.word	0x2000b4fc

0800f620 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b086      	sub	sp, #24
 800f624:	af04      	add	r7, sp, #16
 800f626:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f628:	4b30      	ldr	r3, [pc, #192]	; (800f6ec <tcp_timewait_input+0xcc>)
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	f003 0304 	and.w	r3, r3, #4
 800f630:	2b00      	cmp	r3, #0
 800f632:	d154      	bne.n	800f6de <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d106      	bne.n	800f648 <tcp_timewait_input+0x28>
 800f63a:	4b2d      	ldr	r3, [pc, #180]	; (800f6f0 <tcp_timewait_input+0xd0>)
 800f63c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f640:	492c      	ldr	r1, [pc, #176]	; (800f6f4 <tcp_timewait_input+0xd4>)
 800f642:	482d      	ldr	r0, [pc, #180]	; (800f6f8 <tcp_timewait_input+0xd8>)
 800f644:	f006 fc16 	bl	8015e74 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f648:	4b28      	ldr	r3, [pc, #160]	; (800f6ec <tcp_timewait_input+0xcc>)
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	f003 0302 	and.w	r3, r3, #2
 800f650:	2b00      	cmp	r3, #0
 800f652:	d02a      	beq.n	800f6aa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f654:	4b29      	ldr	r3, [pc, #164]	; (800f6fc <tcp_timewait_input+0xdc>)
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65c:	1ad3      	subs	r3, r2, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	db2d      	blt.n	800f6be <tcp_timewait_input+0x9e>
 800f662:	4b26      	ldr	r3, [pc, #152]	; (800f6fc <tcp_timewait_input+0xdc>)
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66a:	6879      	ldr	r1, [r7, #4]
 800f66c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f66e:	440b      	add	r3, r1
 800f670:	1ad3      	subs	r3, r2, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	dc23      	bgt.n	800f6be <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f676:	4b22      	ldr	r3, [pc, #136]	; (800f700 <tcp_timewait_input+0xe0>)
 800f678:	6819      	ldr	r1, [r3, #0]
 800f67a:	4b22      	ldr	r3, [pc, #136]	; (800f704 <tcp_timewait_input+0xe4>)
 800f67c:	881b      	ldrh	r3, [r3, #0]
 800f67e:	461a      	mov	r2, r3
 800f680:	4b1e      	ldr	r3, [pc, #120]	; (800f6fc <tcp_timewait_input+0xdc>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f686:	4b20      	ldr	r3, [pc, #128]	; (800f708 <tcp_timewait_input+0xe8>)
 800f688:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f68a:	885b      	ldrh	r3, [r3, #2]
 800f68c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f68e:	4a1e      	ldr	r2, [pc, #120]	; (800f708 <tcp_timewait_input+0xe8>)
 800f690:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f692:	8812      	ldrh	r2, [r2, #0]
 800f694:	b292      	uxth	r2, r2
 800f696:	9202      	str	r2, [sp, #8]
 800f698:	9301      	str	r3, [sp, #4]
 800f69a:	4b1c      	ldr	r3, [pc, #112]	; (800f70c <tcp_timewait_input+0xec>)
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	4b1c      	ldr	r3, [pc, #112]	; (800f710 <tcp_timewait_input+0xf0>)
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f003 fadc 	bl	8012c60 <tcp_rst>
      return;
 800f6a8:	e01c      	b.n	800f6e4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800f6aa:	4b10      	ldr	r3, [pc, #64]	; (800f6ec <tcp_timewait_input+0xcc>)
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	f003 0301 	and.w	r3, r3, #1
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d003      	beq.n	800f6be <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f6b6:	4b17      	ldr	r3, [pc, #92]	; (800f714 <tcp_timewait_input+0xf4>)
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f6be:	4b11      	ldr	r3, [pc, #68]	; (800f704 <tcp_timewait_input+0xe4>)
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00d      	beq.n	800f6e2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	8b5b      	ldrh	r3, [r3, #26]
 800f6ca:	f043 0302 	orr.w	r3, r3, #2
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f002 fcfd 	bl	80120d4 <tcp_output>
  }
  return;
 800f6da:	bf00      	nop
 800f6dc:	e001      	b.n	800f6e2 <tcp_timewait_input+0xc2>
    return;
 800f6de:	bf00      	nop
 800f6e0:	e000      	b.n	800f6e4 <tcp_timewait_input+0xc4>
  return;
 800f6e2:	bf00      	nop
}
 800f6e4:	3708      	adds	r7, #8
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	20004510 	.word	0x20004510
 800f6f0:	080182d4 	.word	0x080182d4
 800f6f4:	080184ec 	.word	0x080184ec
 800f6f8:	08018320 	.word	0x08018320
 800f6fc:	20004504 	.word	0x20004504
 800f700:	20004508 	.word	0x20004508
 800f704:	2000450e 	.word	0x2000450e
 800f708:	200044f4 	.word	0x200044f4
 800f70c:	20007dfc 	.word	0x20007dfc
 800f710:	20007e00 	.word	0x20007e00
 800f714:	2000b504 	.word	0x2000b504

0800f718 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f718:	b590      	push	{r4, r7, lr}
 800f71a:	b08d      	sub	sp, #52	; 0x34
 800f71c:	af04      	add	r7, sp, #16
 800f71e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f720:	2300      	movs	r3, #0
 800f722:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f724:	2300      	movs	r3, #0
 800f726:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d106      	bne.n	800f73c <tcp_process+0x24>
 800f72e:	4ba5      	ldr	r3, [pc, #660]	; (800f9c4 <tcp_process+0x2ac>)
 800f730:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f734:	49a4      	ldr	r1, [pc, #656]	; (800f9c8 <tcp_process+0x2b0>)
 800f736:	48a5      	ldr	r0, [pc, #660]	; (800f9cc <tcp_process+0x2b4>)
 800f738:	f006 fb9c 	bl	8015e74 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f73c:	4ba4      	ldr	r3, [pc, #656]	; (800f9d0 <tcp_process+0x2b8>)
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	f003 0304 	and.w	r3, r3, #4
 800f744:	2b00      	cmp	r3, #0
 800f746:	d04e      	beq.n	800f7e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	2b02      	cmp	r3, #2
 800f74e:	d108      	bne.n	800f762 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f754:	4b9f      	ldr	r3, [pc, #636]	; (800f9d4 <tcp_process+0x2bc>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d123      	bne.n	800f7a4 <tcp_process+0x8c>
        acceptable = 1;
 800f75c:	2301      	movs	r3, #1
 800f75e:	76fb      	strb	r3, [r7, #27]
 800f760:	e020      	b.n	800f7a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f766:	4b9c      	ldr	r3, [pc, #624]	; (800f9d8 <tcp_process+0x2c0>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d102      	bne.n	800f774 <tcp_process+0x5c>
        acceptable = 1;
 800f76e:	2301      	movs	r3, #1
 800f770:	76fb      	strb	r3, [r7, #27]
 800f772:	e017      	b.n	800f7a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f774:	4b98      	ldr	r3, [pc, #608]	; (800f9d8 <tcp_process+0x2c0>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	db10      	blt.n	800f7a4 <tcp_process+0x8c>
 800f782:	4b95      	ldr	r3, [pc, #596]	; (800f9d8 <tcp_process+0x2c0>)
 800f784:	681a      	ldr	r2, [r3, #0]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f78e:	440b      	add	r3, r1
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	2b00      	cmp	r3, #0
 800f794:	dc06      	bgt.n	800f7a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	8b5b      	ldrh	r3, [r3, #26]
 800f79a:	f043 0302 	orr.w	r3, r3, #2
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f7a4:	7efb      	ldrb	r3, [r7, #27]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d01b      	beq.n	800f7e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	7d1b      	ldrb	r3, [r3, #20]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d106      	bne.n	800f7c0 <tcp_process+0xa8>
 800f7b2:	4b84      	ldr	r3, [pc, #528]	; (800f9c4 <tcp_process+0x2ac>)
 800f7b4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f7b8:	4988      	ldr	r1, [pc, #544]	; (800f9dc <tcp_process+0x2c4>)
 800f7ba:	4884      	ldr	r0, [pc, #528]	; (800f9cc <tcp_process+0x2b4>)
 800f7bc:	f006 fb5a 	bl	8015e74 <iprintf>
      recv_flags |= TF_RESET;
 800f7c0:	4b87      	ldr	r3, [pc, #540]	; (800f9e0 <tcp_process+0x2c8>)
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	f043 0308 	orr.w	r3, r3, #8
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	4b85      	ldr	r3, [pc, #532]	; (800f9e0 <tcp_process+0x2c8>)
 800f7cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	8b5b      	ldrh	r3, [r3, #26]
 800f7d2:	f023 0301 	bic.w	r3, r3, #1
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f7dc:	f06f 030d 	mvn.w	r3, #13
 800f7e0:	e37a      	b.n	800fed8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	e378      	b.n	800fed8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f7e6:	4b7a      	ldr	r3, [pc, #488]	; (800f9d0 <tcp_process+0x2b8>)
 800f7e8:	781b      	ldrb	r3, [r3, #0]
 800f7ea:	f003 0302 	and.w	r3, r3, #2
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d010      	beq.n	800f814 <tcp_process+0xfc>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	7d1b      	ldrb	r3, [r3, #20]
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	d00c      	beq.n	800f814 <tcp_process+0xfc>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	7d1b      	ldrb	r3, [r3, #20]
 800f7fe:	2b03      	cmp	r3, #3
 800f800:	d008      	beq.n	800f814 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	8b5b      	ldrh	r3, [r3, #26]
 800f806:	f043 0302 	orr.w	r3, r3, #2
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f810:	2300      	movs	r3, #0
 800f812:	e361      	b.n	800fed8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	8b5b      	ldrh	r3, [r3, #26]
 800f818:	f003 0310 	and.w	r3, r3, #16
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d103      	bne.n	800f828 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f820:	4b70      	ldr	r3, [pc, #448]	; (800f9e4 <tcp_process+0x2cc>)
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2200      	movs	r2, #0
 800f834:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f001 fc2d 	bl	8011098 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	7d1b      	ldrb	r3, [r3, #20]
 800f842:	3b02      	subs	r3, #2
 800f844:	2b07      	cmp	r3, #7
 800f846:	f200 8337 	bhi.w	800feb8 <tcp_process+0x7a0>
 800f84a:	a201      	add	r2, pc, #4	; (adr r2, 800f850 <tcp_process+0x138>)
 800f84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f850:	0800f871 	.word	0x0800f871
 800f854:	0800faa1 	.word	0x0800faa1
 800f858:	0800fc19 	.word	0x0800fc19
 800f85c:	0800fc43 	.word	0x0800fc43
 800f860:	0800fd67 	.word	0x0800fd67
 800f864:	0800fc19 	.word	0x0800fc19
 800f868:	0800fdf3 	.word	0x0800fdf3
 800f86c:	0800fe83 	.word	0x0800fe83
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f870:	4b57      	ldr	r3, [pc, #348]	; (800f9d0 <tcp_process+0x2b8>)
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	f003 0310 	and.w	r3, r3, #16
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f000 80e4 	beq.w	800fa46 <tcp_process+0x32e>
 800f87e:	4b54      	ldr	r3, [pc, #336]	; (800f9d0 <tcp_process+0x2b8>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	f003 0302 	and.w	r3, r3, #2
 800f886:	2b00      	cmp	r3, #0
 800f888:	f000 80dd 	beq.w	800fa46 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f890:	1c5a      	adds	r2, r3, #1
 800f892:	4b50      	ldr	r3, [pc, #320]	; (800f9d4 <tcp_process+0x2bc>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	429a      	cmp	r2, r3
 800f898:	f040 80d5 	bne.w	800fa46 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f89c:	4b4e      	ldr	r3, [pc, #312]	; (800f9d8 <tcp_process+0x2c0>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	1c5a      	adds	r2, r3, #1
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f8ae:	4b49      	ldr	r3, [pc, #292]	; (800f9d4 <tcp_process+0x2bc>)
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f8b6:	4b4c      	ldr	r3, [pc, #304]	; (800f9e8 <tcp_process+0x2d0>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	89db      	ldrh	r3, [r3, #14]
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f8d0:	4b41      	ldr	r3, [pc, #260]	; (800f9d8 <tcp_process+0x2c0>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	1e5a      	subs	r2, r3, #1
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2204      	movs	r2, #4
 800f8de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	3304      	adds	r3, #4
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f004 ff87 	bl	80147fc <ip4_route>
 800f8ee:	4601      	mov	r1, r0
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	3304      	adds	r3, #4
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f7ff f88e 	bl	800ea18 <tcp_eff_send_mss_netif>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	461a      	mov	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f908:	009a      	lsls	r2, r3, #2
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f90e:	005b      	lsls	r3, r3, #1
 800f910:	f241 111c 	movw	r1, #4380	; 0x111c
 800f914:	428b      	cmp	r3, r1
 800f916:	bf38      	it	cc
 800f918:	460b      	movcc	r3, r1
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d204      	bcs.n	800f928 <tcp_process+0x210>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	b29b      	uxth	r3, r3
 800f926:	e00d      	b.n	800f944 <tcp_process+0x22c>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f92c:	005b      	lsls	r3, r3, #1
 800f92e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f932:	4293      	cmp	r3, r2
 800f934:	d904      	bls.n	800f940 <tcp_process+0x228>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f93a:	005b      	lsls	r3, r3, #1
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	e001      	b.n	800f944 <tcp_process+0x22c>
 800f940:	f241 131c 	movw	r3, #4380	; 0x111c
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f950:	2b00      	cmp	r3, #0
 800f952:	d106      	bne.n	800f962 <tcp_process+0x24a>
 800f954:	4b1b      	ldr	r3, [pc, #108]	; (800f9c4 <tcp_process+0x2ac>)
 800f956:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f95a:	4924      	ldr	r1, [pc, #144]	; (800f9ec <tcp_process+0x2d4>)
 800f95c:	481b      	ldr	r0, [pc, #108]	; (800f9cc <tcp_process+0x2b4>)
 800f95e:	f006 fa89 	bl	8015e74 <iprintf>
        --pcb->snd_queuelen;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f968:	3b01      	subs	r3, #1
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f976:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d111      	bne.n	800f9a2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f982:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d106      	bne.n	800f998 <tcp_process+0x280>
 800f98a:	4b0e      	ldr	r3, [pc, #56]	; (800f9c4 <tcp_process+0x2ac>)
 800f98c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f990:	4917      	ldr	r1, [pc, #92]	; (800f9f0 <tcp_process+0x2d8>)
 800f992:	480e      	ldr	r0, [pc, #56]	; (800f9cc <tcp_process+0x2b4>)
 800f994:	f006 fa6e 	bl	8015e74 <iprintf>
          pcb->unsent = rseg->next;
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	66da      	str	r2, [r3, #108]	; 0x6c
 800f9a0:	e003      	b.n	800f9aa <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f9aa:	69f8      	ldr	r0, [r7, #28]
 800f9ac:	f7fe fc4a 	bl	800e244 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d11d      	bne.n	800f9f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9be:	861a      	strh	r2, [r3, #48]	; 0x30
 800f9c0:	e01f      	b.n	800fa02 <tcp_process+0x2ea>
 800f9c2:	bf00      	nop
 800f9c4:	080182d4 	.word	0x080182d4
 800f9c8:	0801850c 	.word	0x0801850c
 800f9cc:	08018320 	.word	0x08018320
 800f9d0:	20004510 	.word	0x20004510
 800f9d4:	20004508 	.word	0x20004508
 800f9d8:	20004504 	.word	0x20004504
 800f9dc:	08018528 	.word	0x08018528
 800f9e0:	20004511 	.word	0x20004511
 800f9e4:	2000b504 	.word	0x2000b504
 800f9e8:	200044f4 	.word	0x200044f4
 800f9ec:	08018548 	.word	0x08018548
 800f9f0:	08018560 	.word	0x08018560
        } else {
          pcb->rtime = 0;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00a      	beq.n	800fa22 <tcp_process+0x30a>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	6910      	ldr	r0, [r2, #16]
 800fa16:	2200      	movs	r2, #0
 800fa18:	6879      	ldr	r1, [r7, #4]
 800fa1a:	4798      	blx	r3
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	76bb      	strb	r3, [r7, #26]
 800fa20:	e001      	b.n	800fa26 <tcp_process+0x30e>
 800fa22:	2300      	movs	r3, #0
 800fa24:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fa26:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa2a:	f113 0f0d 	cmn.w	r3, #13
 800fa2e:	d102      	bne.n	800fa36 <tcp_process+0x31e>
          return ERR_ABRT;
 800fa30:	f06f 030c 	mvn.w	r3, #12
 800fa34:	e250      	b.n	800fed8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	8b5b      	ldrh	r3, [r3, #26]
 800fa3a:	f043 0302 	orr.w	r3, r3, #2
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fa44:	e23a      	b.n	800febc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fa46:	4b9d      	ldr	r3, [pc, #628]	; (800fcbc <tcp_process+0x5a4>)
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	f003 0310 	and.w	r3, r3, #16
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f000 8234 	beq.w	800febc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa54:	4b9a      	ldr	r3, [pc, #616]	; (800fcc0 <tcp_process+0x5a8>)
 800fa56:	6819      	ldr	r1, [r3, #0]
 800fa58:	4b9a      	ldr	r3, [pc, #616]	; (800fcc4 <tcp_process+0x5ac>)
 800fa5a:	881b      	ldrh	r3, [r3, #0]
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	4b9a      	ldr	r3, [pc, #616]	; (800fcc8 <tcp_process+0x5b0>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa64:	4b99      	ldr	r3, [pc, #612]	; (800fccc <tcp_process+0x5b4>)
 800fa66:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa68:	885b      	ldrh	r3, [r3, #2]
 800fa6a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa6c:	4a97      	ldr	r2, [pc, #604]	; (800fccc <tcp_process+0x5b4>)
 800fa6e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa70:	8812      	ldrh	r2, [r2, #0]
 800fa72:	b292      	uxth	r2, r2
 800fa74:	9202      	str	r2, [sp, #8]
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	4b95      	ldr	r3, [pc, #596]	; (800fcd0 <tcp_process+0x5b8>)
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	4b95      	ldr	r3, [pc, #596]	; (800fcd4 <tcp_process+0x5bc>)
 800fa7e:	4602      	mov	r2, r0
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f003 f8ed 	bl	8012c60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa8c:	2b05      	cmp	r3, #5
 800fa8e:	f200 8215 	bhi.w	800febc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2200      	movs	r2, #0
 800fa96:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f002 feab 	bl	80127f4 <tcp_rexmit_rto>
      break;
 800fa9e:	e20d      	b.n	800febc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800faa0:	4b86      	ldr	r3, [pc, #536]	; (800fcbc <tcp_process+0x5a4>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	f003 0310 	and.w	r3, r3, #16
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f000 80a1 	beq.w	800fbf0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800faae:	4b84      	ldr	r3, [pc, #528]	; (800fcc0 <tcp_process+0x5a8>)
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	3b01      	subs	r3, #1
 800faba:	2b00      	cmp	r3, #0
 800fabc:	db7e      	blt.n	800fbbc <tcp_process+0x4a4>
 800fabe:	4b80      	ldr	r3, [pc, #512]	; (800fcc0 <tcp_process+0x5a8>)
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	2b00      	cmp	r3, #0
 800faca:	dc77      	bgt.n	800fbbc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2204      	movs	r2, #4
 800fad0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d102      	bne.n	800fae0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fada:	23fa      	movs	r3, #250	; 0xfa
 800fadc:	76bb      	strb	r3, [r7, #26]
 800fade:	e01d      	b.n	800fb1c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fae4:	699b      	ldr	r3, [r3, #24]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d106      	bne.n	800faf8 <tcp_process+0x3e0>
 800faea:	4b7b      	ldr	r3, [pc, #492]	; (800fcd8 <tcp_process+0x5c0>)
 800faec:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800faf0:	497a      	ldr	r1, [pc, #488]	; (800fcdc <tcp_process+0x5c4>)
 800faf2:	487b      	ldr	r0, [pc, #492]	; (800fce0 <tcp_process+0x5c8>)
 800faf4:	f006 f9be 	bl	8015e74 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fafc:	699b      	ldr	r3, [r3, #24]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00a      	beq.n	800fb18 <tcp_process+0x400>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb06:	699b      	ldr	r3, [r3, #24]
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	6910      	ldr	r0, [r2, #16]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	6879      	ldr	r1, [r7, #4]
 800fb10:	4798      	blx	r3
 800fb12:	4603      	mov	r3, r0
 800fb14:	76bb      	strb	r3, [r7, #26]
 800fb16:	e001      	b.n	800fb1c <tcp_process+0x404>
 800fb18:	23f0      	movs	r3, #240	; 0xf0
 800fb1a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fb1c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d00a      	beq.n	800fb3a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fb24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb28:	f113 0f0d 	cmn.w	r3, #13
 800fb2c:	d002      	beq.n	800fb34 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f7fd fce6 	bl	800d500 <tcp_abort>
            }
            return ERR_ABRT;
 800fb34:	f06f 030c 	mvn.w	r3, #12
 800fb38:	e1ce      	b.n	800fed8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fae0 	bl	8010100 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fb40:	4b68      	ldr	r3, [pc, #416]	; (800fce4 <tcp_process+0x5cc>)
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d005      	beq.n	800fb54 <tcp_process+0x43c>
            recv_acked--;
 800fb48:	4b66      	ldr	r3, [pc, #408]	; (800fce4 <tcp_process+0x5cc>)
 800fb4a:	881b      	ldrh	r3, [r3, #0]
 800fb4c:	3b01      	subs	r3, #1
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	4b64      	ldr	r3, [pc, #400]	; (800fce4 <tcp_process+0x5cc>)
 800fb52:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb58:	009a      	lsls	r2, r3, #2
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb5e:	005b      	lsls	r3, r3, #1
 800fb60:	f241 111c 	movw	r1, #4380	; 0x111c
 800fb64:	428b      	cmp	r3, r1
 800fb66:	bf38      	it	cc
 800fb68:	460b      	movcc	r3, r1
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d204      	bcs.n	800fb78 <tcp_process+0x460>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb72:	009b      	lsls	r3, r3, #2
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	e00d      	b.n	800fb94 <tcp_process+0x47c>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb7c:	005b      	lsls	r3, r3, #1
 800fb7e:	f241 121c 	movw	r2, #4380	; 0x111c
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d904      	bls.n	800fb90 <tcp_process+0x478>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb8a:	005b      	lsls	r3, r3, #1
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	e001      	b.n	800fb94 <tcp_process+0x47c>
 800fb90:	f241 131c 	movw	r3, #4380	; 0x111c
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fb9a:	4b53      	ldr	r3, [pc, #332]	; (800fce8 <tcp_process+0x5d0>)
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	f003 0320 	and.w	r3, r3, #32
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d037      	beq.n	800fc16 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	8b5b      	ldrh	r3, [r3, #26]
 800fbaa:	f043 0302 	orr.w	r3, r3, #2
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2207      	movs	r2, #7
 800fbb8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fbba:	e02c      	b.n	800fc16 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbbc:	4b40      	ldr	r3, [pc, #256]	; (800fcc0 <tcp_process+0x5a8>)
 800fbbe:	6819      	ldr	r1, [r3, #0]
 800fbc0:	4b40      	ldr	r3, [pc, #256]	; (800fcc4 <tcp_process+0x5ac>)
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	4b40      	ldr	r3, [pc, #256]	; (800fcc8 <tcp_process+0x5b0>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbcc:	4b3f      	ldr	r3, [pc, #252]	; (800fccc <tcp_process+0x5b4>)
 800fbce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbd0:	885b      	ldrh	r3, [r3, #2]
 800fbd2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbd4:	4a3d      	ldr	r2, [pc, #244]	; (800fccc <tcp_process+0x5b4>)
 800fbd6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbd8:	8812      	ldrh	r2, [r2, #0]
 800fbda:	b292      	uxth	r2, r2
 800fbdc:	9202      	str	r2, [sp, #8]
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	4b3b      	ldr	r3, [pc, #236]	; (800fcd0 <tcp_process+0x5b8>)
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	4b3b      	ldr	r3, [pc, #236]	; (800fcd4 <tcp_process+0x5bc>)
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f003 f839 	bl	8012c60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fbee:	e167      	b.n	800fec0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fbf0:	4b32      	ldr	r3, [pc, #200]	; (800fcbc <tcp_process+0x5a4>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	f003 0302 	and.w	r3, r3, #2
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f000 8161 	beq.w	800fec0 <tcp_process+0x7a8>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc02:	1e5a      	subs	r2, r3, #1
 800fc04:	4b30      	ldr	r3, [pc, #192]	; (800fcc8 <tcp_process+0x5b0>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	f040 8159 	bne.w	800fec0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f002 fe12 	bl	8012838 <tcp_rexmit>
      break;
 800fc14:	e154      	b.n	800fec0 <tcp_process+0x7a8>
 800fc16:	e153      	b.n	800fec0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 fa71 	bl	8010100 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fc1e:	4b32      	ldr	r3, [pc, #200]	; (800fce8 <tcp_process+0x5d0>)
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	f003 0320 	and.w	r3, r3, #32
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	f000 814c 	beq.w	800fec4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	8b5b      	ldrh	r3, [r3, #26]
 800fc30:	f043 0302 	orr.w	r3, r3, #2
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2207      	movs	r2, #7
 800fc3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc40:	e140      	b.n	800fec4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f000 fa5c 	bl	8010100 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fc48:	4b27      	ldr	r3, [pc, #156]	; (800fce8 <tcp_process+0x5d0>)
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	f003 0320 	and.w	r3, r3, #32
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d071      	beq.n	800fd38 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc54:	4b19      	ldr	r3, [pc, #100]	; (800fcbc <tcp_process+0x5a4>)
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	f003 0310 	and.w	r3, r3, #16
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d060      	beq.n	800fd22 <tcp_process+0x60a>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc64:	4b16      	ldr	r3, [pc, #88]	; (800fcc0 <tcp_process+0x5a8>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d15a      	bne.n	800fd22 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d156      	bne.n	800fd22 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	8b5b      	ldrh	r3, [r3, #26]
 800fc78:	f043 0302 	orr.w	r3, r3, #2
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7fe fdbe 	bl	800e804 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fc88:	4b18      	ldr	r3, [pc, #96]	; (800fcec <tcp_process+0x5d4>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d105      	bne.n	800fc9e <tcp_process+0x586>
 800fc92:	4b16      	ldr	r3, [pc, #88]	; (800fcec <tcp_process+0x5d4>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	4a14      	ldr	r2, [pc, #80]	; (800fcec <tcp_process+0x5d4>)
 800fc9a:	6013      	str	r3, [r2, #0]
 800fc9c:	e02e      	b.n	800fcfc <tcp_process+0x5e4>
 800fc9e:	4b13      	ldr	r3, [pc, #76]	; (800fcec <tcp_process+0x5d4>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	617b      	str	r3, [r7, #20]
 800fca4:	e027      	b.n	800fcf6 <tcp_process+0x5de>
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d11f      	bne.n	800fcf0 <tcp_process+0x5d8>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	68da      	ldr	r2, [r3, #12]
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	60da      	str	r2, [r3, #12]
 800fcb8:	e020      	b.n	800fcfc <tcp_process+0x5e4>
 800fcba:	bf00      	nop
 800fcbc:	20004510 	.word	0x20004510
 800fcc0:	20004508 	.word	0x20004508
 800fcc4:	2000450e 	.word	0x2000450e
 800fcc8:	20004504 	.word	0x20004504
 800fccc:	200044f4 	.word	0x200044f4
 800fcd0:	20007dfc 	.word	0x20007dfc
 800fcd4:	20007e00 	.word	0x20007e00
 800fcd8:	080182d4 	.word	0x080182d4
 800fcdc:	08018574 	.word	0x08018574
 800fce0:	08018320 	.word	0x08018320
 800fce4:	2000450c 	.word	0x2000450c
 800fce8:	20004511 	.word	0x20004511
 800fcec:	2000b500 	.word	0x2000b500
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	617b      	str	r3, [r7, #20]
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d1d4      	bne.n	800fca6 <tcp_process+0x58e>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	60da      	str	r2, [r3, #12]
 800fd02:	4b77      	ldr	r3, [pc, #476]	; (800fee0 <tcp_process+0x7c8>)
 800fd04:	2201      	movs	r2, #1
 800fd06:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	220a      	movs	r2, #10
 800fd0c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fd0e:	4b75      	ldr	r3, [pc, #468]	; (800fee4 <tcp_process+0x7cc>)
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	60da      	str	r2, [r3, #12]
 800fd16:	4a73      	ldr	r2, [pc, #460]	; (800fee4 <tcp_process+0x7cc>)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6013      	str	r3, [r2, #0]
 800fd1c:	f003 f962 	bl	8012fe4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fd20:	e0d2      	b.n	800fec8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	8b5b      	ldrh	r3, [r3, #26]
 800fd26:	f043 0302 	orr.w	r3, r3, #2
 800fd2a:	b29a      	uxth	r2, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2208      	movs	r2, #8
 800fd34:	751a      	strb	r2, [r3, #20]
      break;
 800fd36:	e0c7      	b.n	800fec8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd38:	4b6b      	ldr	r3, [pc, #428]	; (800fee8 <tcp_process+0x7d0>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	f003 0310 	and.w	r3, r3, #16
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 80c1 	beq.w	800fec8 <tcp_process+0x7b0>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd4a:	4b68      	ldr	r3, [pc, #416]	; (800feec <tcp_process+0x7d4>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	f040 80ba 	bne.w	800fec8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f040 80b5 	bne.w	800fec8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2206      	movs	r2, #6
 800fd62:	751a      	strb	r2, [r3, #20]
      break;
 800fd64:	e0b0      	b.n	800fec8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f9ca 	bl	8010100 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fd6c:	4b60      	ldr	r3, [pc, #384]	; (800fef0 <tcp_process+0x7d8>)
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	f003 0320 	and.w	r3, r3, #32
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f000 80a9 	beq.w	800fecc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	8b5b      	ldrh	r3, [r3, #26]
 800fd7e:	f043 0302 	orr.w	r3, r3, #2
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7fe fd3b 	bl	800e804 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fd8e:	4b59      	ldr	r3, [pc, #356]	; (800fef4 <tcp_process+0x7dc>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d105      	bne.n	800fda4 <tcp_process+0x68c>
 800fd98:	4b56      	ldr	r3, [pc, #344]	; (800fef4 <tcp_process+0x7dc>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	4a55      	ldr	r2, [pc, #340]	; (800fef4 <tcp_process+0x7dc>)
 800fda0:	6013      	str	r3, [r2, #0]
 800fda2:	e013      	b.n	800fdcc <tcp_process+0x6b4>
 800fda4:	4b53      	ldr	r3, [pc, #332]	; (800fef4 <tcp_process+0x7dc>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	613b      	str	r3, [r7, #16]
 800fdaa:	e00c      	b.n	800fdc6 <tcp_process+0x6ae>
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d104      	bne.n	800fdc0 <tcp_process+0x6a8>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	68da      	ldr	r2, [r3, #12]
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	60da      	str	r2, [r3, #12]
 800fdbe:	e005      	b.n	800fdcc <tcp_process+0x6b4>
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	613b      	str	r3, [r7, #16]
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d1ef      	bne.n	800fdac <tcp_process+0x694>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	60da      	str	r2, [r3, #12]
 800fdd2:	4b43      	ldr	r3, [pc, #268]	; (800fee0 <tcp_process+0x7c8>)
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	220a      	movs	r2, #10
 800fddc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fdde:	4b41      	ldr	r3, [pc, #260]	; (800fee4 <tcp_process+0x7cc>)
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	60da      	str	r2, [r3, #12]
 800fde6:	4a3f      	ldr	r2, [pc, #252]	; (800fee4 <tcp_process+0x7cc>)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6013      	str	r3, [r2, #0]
 800fdec:	f003 f8fa 	bl	8012fe4 <tcp_timer_needed>
      }
      break;
 800fdf0:	e06c      	b.n	800fecc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 f984 	bl	8010100 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fdf8:	4b3b      	ldr	r3, [pc, #236]	; (800fee8 <tcp_process+0x7d0>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	f003 0310 	and.w	r3, r3, #16
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d065      	beq.n	800fed0 <tcp_process+0x7b8>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe08:	4b38      	ldr	r3, [pc, #224]	; (800feec <tcp_process+0x7d4>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d15f      	bne.n	800fed0 <tcp_process+0x7b8>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d15b      	bne.n	800fed0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7fe fcf3 	bl	800e804 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fe1e:	4b35      	ldr	r3, [pc, #212]	; (800fef4 <tcp_process+0x7dc>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d105      	bne.n	800fe34 <tcp_process+0x71c>
 800fe28:	4b32      	ldr	r3, [pc, #200]	; (800fef4 <tcp_process+0x7dc>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	4a31      	ldr	r2, [pc, #196]	; (800fef4 <tcp_process+0x7dc>)
 800fe30:	6013      	str	r3, [r2, #0]
 800fe32:	e013      	b.n	800fe5c <tcp_process+0x744>
 800fe34:	4b2f      	ldr	r3, [pc, #188]	; (800fef4 <tcp_process+0x7dc>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	60fb      	str	r3, [r7, #12]
 800fe3a:	e00c      	b.n	800fe56 <tcp_process+0x73e>
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d104      	bne.n	800fe50 <tcp_process+0x738>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68da      	ldr	r2, [r3, #12]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	60da      	str	r2, [r3, #12]
 800fe4e:	e005      	b.n	800fe5c <tcp_process+0x744>
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	60fb      	str	r3, [r7, #12]
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1ef      	bne.n	800fe3c <tcp_process+0x724>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	60da      	str	r2, [r3, #12]
 800fe62:	4b1f      	ldr	r3, [pc, #124]	; (800fee0 <tcp_process+0x7c8>)
 800fe64:	2201      	movs	r2, #1
 800fe66:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	220a      	movs	r2, #10
 800fe6c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fe6e:	4b1d      	ldr	r3, [pc, #116]	; (800fee4 <tcp_process+0x7cc>)
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	60da      	str	r2, [r3, #12]
 800fe76:	4a1b      	ldr	r2, [pc, #108]	; (800fee4 <tcp_process+0x7cc>)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6013      	str	r3, [r2, #0]
 800fe7c:	f003 f8b2 	bl	8012fe4 <tcp_timer_needed>
      }
      break;
 800fe80:	e026      	b.n	800fed0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 f93c 	bl	8010100 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fe88:	4b17      	ldr	r3, [pc, #92]	; (800fee8 <tcp_process+0x7d0>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f003 0310 	and.w	r3, r3, #16
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d01f      	beq.n	800fed4 <tcp_process+0x7bc>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe98:	4b14      	ldr	r3, [pc, #80]	; (800feec <tcp_process+0x7d4>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d119      	bne.n	800fed4 <tcp_process+0x7bc>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d115      	bne.n	800fed4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fea8:	4b11      	ldr	r3, [pc, #68]	; (800fef0 <tcp_process+0x7d8>)
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	f043 0310 	orr.w	r3, r3, #16
 800feb0:	b2da      	uxtb	r2, r3
 800feb2:	4b0f      	ldr	r3, [pc, #60]	; (800fef0 <tcp_process+0x7d8>)
 800feb4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800feb6:	e00d      	b.n	800fed4 <tcp_process+0x7bc>
    default:
      break;
 800feb8:	bf00      	nop
 800feba:	e00c      	b.n	800fed6 <tcp_process+0x7be>
      break;
 800febc:	bf00      	nop
 800febe:	e00a      	b.n	800fed6 <tcp_process+0x7be>
      break;
 800fec0:	bf00      	nop
 800fec2:	e008      	b.n	800fed6 <tcp_process+0x7be>
      break;
 800fec4:	bf00      	nop
 800fec6:	e006      	b.n	800fed6 <tcp_process+0x7be>
      break;
 800fec8:	bf00      	nop
 800feca:	e004      	b.n	800fed6 <tcp_process+0x7be>
      break;
 800fecc:	bf00      	nop
 800fece:	e002      	b.n	800fed6 <tcp_process+0x7be>
      break;
 800fed0:	bf00      	nop
 800fed2:	e000      	b.n	800fed6 <tcp_process+0x7be>
      break;
 800fed4:	bf00      	nop
  }
  return ERR_OK;
 800fed6:	2300      	movs	r3, #0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3724      	adds	r7, #36	; 0x24
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd90      	pop	{r4, r7, pc}
 800fee0:	2000b4fc 	.word	0x2000b4fc
 800fee4:	2000b510 	.word	0x2000b510
 800fee8:	20004510 	.word	0x20004510
 800feec:	20004508 	.word	0x20004508
 800fef0:	20004511 	.word	0x20004511
 800fef4:	2000b500 	.word	0x2000b500

0800fef8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fef8:	b590      	push	{r4, r7, lr}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d106      	bne.n	800ff16 <tcp_oos_insert_segment+0x1e>
 800ff08:	4b3b      	ldr	r3, [pc, #236]	; (800fff8 <tcp_oos_insert_segment+0x100>)
 800ff0a:	f240 421f 	movw	r2, #1055	; 0x41f
 800ff0e:	493b      	ldr	r1, [pc, #236]	; (800fffc <tcp_oos_insert_segment+0x104>)
 800ff10:	483b      	ldr	r0, [pc, #236]	; (8010000 <tcp_oos_insert_segment+0x108>)
 800ff12:	f005 ffaf 	bl	8015e74 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	68db      	ldr	r3, [r3, #12]
 800ff1a:	899b      	ldrh	r3, [r3, #12]
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fb f984 	bl	800b22c <lwip_htons>
 800ff24:	4603      	mov	r3, r0
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d028      	beq.n	800ff82 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ff30:	6838      	ldr	r0, [r7, #0]
 800ff32:	f7fe f973 	bl	800e21c <tcp_segs_free>
    next = NULL;
 800ff36:	2300      	movs	r3, #0
 800ff38:	603b      	str	r3, [r7, #0]
 800ff3a:	e056      	b.n	800ffea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	899b      	ldrh	r3, [r3, #12]
 800ff42:	b29b      	uxth	r3, r3
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7fb f971 	bl	800b22c <lwip_htons>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	f003 0301 	and.w	r3, r3, #1
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00d      	beq.n	800ff72 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	68db      	ldr	r3, [r3, #12]
 800ff5a:	899b      	ldrh	r3, [r3, #12]
 800ff5c:	b29c      	uxth	r4, r3
 800ff5e:	2001      	movs	r0, #1
 800ff60:	f7fb f964 	bl	800b22c <lwip_htons>
 800ff64:	4603      	mov	r3, r0
 800ff66:	461a      	mov	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	4322      	orrs	r2, r4
 800ff6e:	b292      	uxth	r2, r2
 800ff70:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f7fe f961 	bl	800e244 <tcp_seg_free>
    while (next &&
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00e      	beq.n	800ffa6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	891b      	ldrh	r3, [r3, #8]
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	4b1d      	ldr	r3, [pc, #116]	; (8010004 <tcp_oos_insert_segment+0x10c>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	441a      	add	r2, r3
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	6839      	ldr	r1, [r7, #0]
 800ff9c:	8909      	ldrh	r1, [r1, #8]
 800ff9e:	440b      	add	r3, r1
 800ffa0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	daca      	bge.n	800ff3c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01e      	beq.n	800ffea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	891b      	ldrh	r3, [r3, #8]
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	4b14      	ldr	r3, [pc, #80]	; (8010004 <tcp_oos_insert_segment+0x10c>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	441a      	add	r2, r3
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	dd12      	ble.n	800ffea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	4b0d      	ldr	r3, [pc, #52]	; (8010004 <tcp_oos_insert_segment+0x10c>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	1ad3      	subs	r3, r2, r3
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	685a      	ldr	r2, [r3, #4]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	891b      	ldrh	r3, [r3, #8]
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	4610      	mov	r0, r2
 800ffe6:	f7fc fb79 	bl	800c6dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	683a      	ldr	r2, [r7, #0]
 800ffee:	601a      	str	r2, [r3, #0]
}
 800fff0:	bf00      	nop
 800fff2:	3714      	adds	r7, #20
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd90      	pop	{r4, r7, pc}
 800fff8:	080182d4 	.word	0x080182d4
 800fffc:	08018594 	.word	0x08018594
 8010000:	08018320 	.word	0x08018320
 8010004:	20004504 	.word	0x20004504

08010008 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010008:	b5b0      	push	{r4, r5, r7, lr}
 801000a:	b086      	sub	sp, #24
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
 8010014:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010016:	e03e      	b.n	8010096 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	4618      	mov	r0, r3
 8010028:	f7fc fd6c 	bl	800cb04 <pbuf_clen>
 801002c:	4603      	mov	r3, r0
 801002e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010036:	8a7a      	ldrh	r2, [r7, #18]
 8010038:	429a      	cmp	r2, r3
 801003a:	d906      	bls.n	801004a <tcp_free_acked_segments+0x42>
 801003c:	4b2a      	ldr	r3, [pc, #168]	; (80100e8 <tcp_free_acked_segments+0xe0>)
 801003e:	f240 4257 	movw	r2, #1111	; 0x457
 8010042:	492a      	ldr	r1, [pc, #168]	; (80100ec <tcp_free_acked_segments+0xe4>)
 8010044:	482a      	ldr	r0, [pc, #168]	; (80100f0 <tcp_free_acked_segments+0xe8>)
 8010046:	f005 ff15 	bl	8015e74 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010050:	8a7b      	ldrh	r3, [r7, #18]
 8010052:	1ad3      	subs	r3, r2, r3
 8010054:	b29a      	uxth	r2, r3
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	891a      	ldrh	r2, [r3, #8]
 8010060:	4b24      	ldr	r3, [pc, #144]	; (80100f4 <tcp_free_acked_segments+0xec>)
 8010062:	881b      	ldrh	r3, [r3, #0]
 8010064:	4413      	add	r3, r2
 8010066:	b29a      	uxth	r2, r3
 8010068:	4b22      	ldr	r3, [pc, #136]	; (80100f4 <tcp_free_acked_segments+0xec>)
 801006a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801006c:	6978      	ldr	r0, [r7, #20]
 801006e:	f7fe f8e9 	bl	800e244 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00c      	beq.n	8010096 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d109      	bne.n	8010096 <tcp_free_acked_segments+0x8e>
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d106      	bne.n	8010096 <tcp_free_acked_segments+0x8e>
 8010088:	4b17      	ldr	r3, [pc, #92]	; (80100e8 <tcp_free_acked_segments+0xe0>)
 801008a:	f240 4262 	movw	r2, #1122	; 0x462
 801008e:	491a      	ldr	r1, [pc, #104]	; (80100f8 <tcp_free_acked_segments+0xf0>)
 8010090:	4817      	ldr	r0, [pc, #92]	; (80100f0 <tcp_free_acked_segments+0xe8>)
 8010092:	f005 feef 	bl	8015e74 <iprintf>
  while (seg_list != NULL &&
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d020      	beq.n	80100de <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fb f8d7 	bl	800b256 <lwip_htonl>
 80100a8:	4604      	mov	r4, r0
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	891b      	ldrh	r3, [r3, #8]
 80100ae:	461d      	mov	r5, r3
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	899b      	ldrh	r3, [r3, #12]
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fb f8b7 	bl	800b22c <lwip_htons>
 80100be:	4603      	mov	r3, r0
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	f003 0303 	and.w	r3, r3, #3
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d001      	beq.n	80100ce <tcp_free_acked_segments+0xc6>
 80100ca:	2301      	movs	r3, #1
 80100cc:	e000      	b.n	80100d0 <tcp_free_acked_segments+0xc8>
 80100ce:	2300      	movs	r3, #0
 80100d0:	442b      	add	r3, r5
 80100d2:	18e2      	adds	r2, r4, r3
 80100d4:	4b09      	ldr	r3, [pc, #36]	; (80100fc <tcp_free_acked_segments+0xf4>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80100da:	2b00      	cmp	r3, #0
 80100dc:	dd9c      	ble.n	8010018 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80100de:	68bb      	ldr	r3, [r7, #8]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3718      	adds	r7, #24
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bdb0      	pop	{r4, r5, r7, pc}
 80100e8:	080182d4 	.word	0x080182d4
 80100ec:	080185bc 	.word	0x080185bc
 80100f0:	08018320 	.word	0x08018320
 80100f4:	2000450c 	.word	0x2000450c
 80100f8:	080185e4 	.word	0x080185e4
 80100fc:	20004508 	.word	0x20004508

08010100 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010100:	b5b0      	push	{r4, r5, r7, lr}
 8010102:	b094      	sub	sp, #80	; 0x50
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010108:	2300      	movs	r3, #0
 801010a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d106      	bne.n	8010120 <tcp_receive+0x20>
 8010112:	4ba6      	ldr	r3, [pc, #664]	; (80103ac <tcp_receive+0x2ac>)
 8010114:	f240 427b 	movw	r2, #1147	; 0x47b
 8010118:	49a5      	ldr	r1, [pc, #660]	; (80103b0 <tcp_receive+0x2b0>)
 801011a:	48a6      	ldr	r0, [pc, #664]	; (80103b4 <tcp_receive+0x2b4>)
 801011c:	f005 feaa 	bl	8015e74 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	7d1b      	ldrb	r3, [r3, #20]
 8010124:	2b03      	cmp	r3, #3
 8010126:	d806      	bhi.n	8010136 <tcp_receive+0x36>
 8010128:	4ba0      	ldr	r3, [pc, #640]	; (80103ac <tcp_receive+0x2ac>)
 801012a:	f240 427c 	movw	r2, #1148	; 0x47c
 801012e:	49a2      	ldr	r1, [pc, #648]	; (80103b8 <tcp_receive+0x2b8>)
 8010130:	48a0      	ldr	r0, [pc, #640]	; (80103b4 <tcp_receive+0x2b4>)
 8010132:	f005 fe9f 	bl	8015e74 <iprintf>

  if (flags & TCP_ACK) {
 8010136:	4ba1      	ldr	r3, [pc, #644]	; (80103bc <tcp_receive+0x2bc>)
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	f003 0310 	and.w	r3, r3, #16
 801013e:	2b00      	cmp	r3, #0
 8010140:	f000 8263 	beq.w	801060a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801014a:	461a      	mov	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010150:	4413      	add	r3, r2
 8010152:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010158:	4b99      	ldr	r3, [pc, #612]	; (80103c0 <tcp_receive+0x2c0>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	2b00      	cmp	r3, #0
 8010160:	db1b      	blt.n	801019a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010166:	4b96      	ldr	r3, [pc, #600]	; (80103c0 <tcp_receive+0x2c0>)
 8010168:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801016a:	429a      	cmp	r2, r3
 801016c:	d106      	bne.n	801017c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010172:	4b94      	ldr	r3, [pc, #592]	; (80103c4 <tcp_receive+0x2c4>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	1ad3      	subs	r3, r2, r3
 8010178:	2b00      	cmp	r3, #0
 801017a:	db0e      	blt.n	801019a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010180:	4b90      	ldr	r3, [pc, #576]	; (80103c4 <tcp_receive+0x2c4>)
 8010182:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010184:	429a      	cmp	r2, r3
 8010186:	d125      	bne.n	80101d4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010188:	4b8f      	ldr	r3, [pc, #572]	; (80103c8 <tcp_receive+0x2c8>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	89db      	ldrh	r3, [r3, #14]
 801018e:	b29a      	uxth	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010196:	429a      	cmp	r2, r3
 8010198:	d91c      	bls.n	80101d4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801019a:	4b8b      	ldr	r3, [pc, #556]	; (80103c8 <tcp_receive+0x2c8>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	89db      	ldrh	r3, [r3, #14]
 80101a0:	b29a      	uxth	r2, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d205      	bcs.n	80101c4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80101c4:	4b7e      	ldr	r3, [pc, #504]	; (80103c0 <tcp_receive+0x2c0>)
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80101cc:	4b7d      	ldr	r3, [pc, #500]	; (80103c4 <tcp_receive+0x2c4>)
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80101d4:	4b7b      	ldr	r3, [pc, #492]	; (80103c4 <tcp_receive+0x2c4>)
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	2b00      	cmp	r3, #0
 80101e0:	dc58      	bgt.n	8010294 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80101e2:	4b7a      	ldr	r3, [pc, #488]	; (80103cc <tcp_receive+0x2cc>)
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d14b      	bne.n	8010282 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80101f4:	4413      	add	r3, r2
 80101f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d142      	bne.n	8010282 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010202:	2b00      	cmp	r3, #0
 8010204:	db3d      	blt.n	8010282 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801020a:	4b6e      	ldr	r3, [pc, #440]	; (80103c4 <tcp_receive+0x2c4>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	429a      	cmp	r2, r3
 8010210:	d137      	bne.n	8010282 <tcp_receive+0x182>
              found_dupack = 1;
 8010212:	2301      	movs	r3, #1
 8010214:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801021c:	2bff      	cmp	r3, #255	; 0xff
 801021e:	d007      	beq.n	8010230 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010226:	3301      	adds	r3, #1
 8010228:	b2da      	uxtb	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010236:	2b03      	cmp	r3, #3
 8010238:	d91b      	bls.n	8010272 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010244:	4413      	add	r3, r2
 8010246:	b29a      	uxth	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801024e:	429a      	cmp	r2, r3
 8010250:	d30a      	bcc.n	8010268 <tcp_receive+0x168>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801025c:	4413      	add	r3, r2
 801025e:	b29a      	uxth	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010266:	e004      	b.n	8010272 <tcp_receive+0x172>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801026e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010278:	2b02      	cmp	r3, #2
 801027a:	d902      	bls.n	8010282 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f002 fb47 	bl	8012910 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010284:	2b00      	cmp	r3, #0
 8010286:	f040 8160 	bne.w	801054a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2200      	movs	r2, #0
 801028e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010292:	e15a      	b.n	801054a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010294:	4b4b      	ldr	r3, [pc, #300]	; (80103c4 <tcp_receive+0x2c4>)
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	3b01      	subs	r3, #1
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f2c0 814d 	blt.w	8010540 <tcp_receive+0x440>
 80102a6:	4b47      	ldr	r3, [pc, #284]	; (80103c4 <tcp_receive+0x2c4>)
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102ae:	1ad3      	subs	r3, r2, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f300 8145 	bgt.w	8010540 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	8b5b      	ldrh	r3, [r3, #26]
 80102ba:	f003 0304 	and.w	r3, r3, #4
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d010      	beq.n	80102e4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	8b5b      	ldrh	r3, [r3, #26]
 80102c6:	f023 0304 	bic.w	r3, r3, #4
 80102ca:	b29a      	uxth	r2, r3
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2200      	movs	r2, #0
 80102e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80102f2:	10db      	asrs	r3, r3, #3
 80102f4:	b21b      	sxth	r3, r3
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80102fe:	b29b      	uxth	r3, r3
 8010300:	4413      	add	r3, r2
 8010302:	b29b      	uxth	r3, r3
 8010304:	b21a      	sxth	r2, r3
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801030c:	4b2d      	ldr	r3, [pc, #180]	; (80103c4 <tcp_receive+0x2c4>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	b29a      	uxth	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010316:	b29b      	uxth	r3, r3
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2200      	movs	r2, #0
 8010320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010324:	4b27      	ldr	r3, [pc, #156]	; (80103c4 <tcp_receive+0x2c4>)
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	7d1b      	ldrb	r3, [r3, #20]
 8010330:	2b03      	cmp	r3, #3
 8010332:	f240 8096 	bls.w	8010462 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010342:	429a      	cmp	r2, r3
 8010344:	d244      	bcs.n	80103d0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	8b5b      	ldrh	r3, [r3, #26]
 801034a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801034e:	2b00      	cmp	r3, #0
 8010350:	d001      	beq.n	8010356 <tcp_receive+0x256>
 8010352:	2301      	movs	r3, #1
 8010354:	e000      	b.n	8010358 <tcp_receive+0x258>
 8010356:	2302      	movs	r3, #2
 8010358:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801035c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010360:	b29a      	uxth	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010366:	fb12 f303 	smulbb	r3, r2, r3
 801036a:	b29b      	uxth	r3, r3
 801036c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801036e:	4293      	cmp	r3, r2
 8010370:	bf28      	it	cs
 8010372:	4613      	movcs	r3, r2
 8010374:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801037c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801037e:	4413      	add	r3, r2
 8010380:	b29a      	uxth	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010388:	429a      	cmp	r2, r3
 801038a:	d309      	bcc.n	80103a0 <tcp_receive+0x2a0>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010392:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010394:	4413      	add	r3, r2
 8010396:	b29a      	uxth	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801039e:	e060      	b.n	8010462 <tcp_receive+0x362>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80103aa:	e05a      	b.n	8010462 <tcp_receive+0x362>
 80103ac:	080182d4 	.word	0x080182d4
 80103b0:	08018604 	.word	0x08018604
 80103b4:	08018320 	.word	0x08018320
 80103b8:	08018620 	.word	0x08018620
 80103bc:	20004510 	.word	0x20004510
 80103c0:	20004504 	.word	0x20004504
 80103c4:	20004508 	.word	0x20004508
 80103c8:	200044f4 	.word	0x200044f4
 80103cc:	2000450e 	.word	0x2000450e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103d8:	4413      	add	r3, r2
 80103da:	b29a      	uxth	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d309      	bcc.n	80103fa <tcp_receive+0x2fa>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103ee:	4413      	add	r3, r2
 80103f0:	b29a      	uxth	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80103f8:	e004      	b.n	8010404 <tcp_receive+0x304>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010410:	429a      	cmp	r2, r3
 8010412:	d326      	bcc.n	8010462 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010434:	4413      	add	r3, r2
 8010436:	b29a      	uxth	r2, r3
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801043e:	429a      	cmp	r2, r3
 8010440:	d30a      	bcc.n	8010458 <tcp_receive+0x358>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801044c:	4413      	add	r3, r2
 801044e:	b29a      	uxth	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010456:	e004      	b.n	8010462 <tcp_receive+0x362>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801045e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801046a:	4a98      	ldr	r2, [pc, #608]	; (80106cc <tcp_receive+0x5cc>)
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7ff fdcb 	bl	8010008 <tcp_free_acked_segments>
 8010472:	4602      	mov	r2, r0
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010480:	4a93      	ldr	r2, [pc, #588]	; (80106d0 <tcp_receive+0x5d0>)
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7ff fdc0 	bl	8010008 <tcp_free_acked_segments>
 8010488:	4602      	mov	r2, r0
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010492:	2b00      	cmp	r3, #0
 8010494:	d104      	bne.n	80104a0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801049c:	861a      	strh	r2, [r3, #48]	; 0x30
 801049e:	e002      	b.n	80104a6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d103      	bne.n	80104bc <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80104c2:	4b84      	ldr	r3, [pc, #528]	; (80106d4 <tcp_receive+0x5d4>)
 80104c4:	881b      	ldrh	r3, [r3, #0]
 80104c6:	4413      	add	r3, r2
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	8b5b      	ldrh	r3, [r3, #26]
 80104d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d035      	beq.n	8010548 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d118      	bne.n	8010516 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00c      	beq.n	8010506 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f4:	68db      	ldr	r3, [r3, #12]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fa feac 	bl	800b256 <lwip_htonl>
 80104fe:	4603      	mov	r3, r0
 8010500:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010502:	2b00      	cmp	r3, #0
 8010504:	dc20      	bgt.n	8010548 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	8b5b      	ldrh	r3, [r3, #26]
 801050a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801050e:	b29a      	uxth	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010514:	e018      	b.n	8010548 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	4618      	mov	r0, r3
 8010524:	f7fa fe97 	bl	800b256 <lwip_htonl>
 8010528:	4603      	mov	r3, r0
 801052a:	1ae3      	subs	r3, r4, r3
 801052c:	2b00      	cmp	r3, #0
 801052e:	dc0b      	bgt.n	8010548 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	8b5b      	ldrh	r3, [r3, #26]
 8010534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010538:	b29a      	uxth	r2, r3
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801053e:	e003      	b.n	8010548 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f002 fbdf 	bl	8012d04 <tcp_send_empty_ack>
 8010546:	e000      	b.n	801054a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010548:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801054e:	2b00      	cmp	r3, #0
 8010550:	d05b      	beq.n	801060a <tcp_receive+0x50a>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010556:	4b60      	ldr	r3, [pc, #384]	; (80106d8 <tcp_receive+0x5d8>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	1ad3      	subs	r3, r2, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	da54      	bge.n	801060a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010560:	4b5e      	ldr	r3, [pc, #376]	; (80106dc <tcp_receive+0x5dc>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	b29a      	uxth	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801056a:	b29b      	uxth	r3, r3
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	b29b      	uxth	r3, r3
 8010570:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010574:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801057e:	10db      	asrs	r3, r3, #3
 8010580:	b21b      	sxth	r3, r3
 8010582:	b29b      	uxth	r3, r3
 8010584:	1ad3      	subs	r3, r2, r3
 8010586:	b29b      	uxth	r3, r3
 8010588:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010592:	b29a      	uxth	r2, r3
 8010594:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010598:	4413      	add	r3, r2
 801059a:	b29b      	uxth	r3, r3
 801059c:	b21a      	sxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80105a2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	da05      	bge.n	80105b6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80105aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80105ae:	425b      	negs	r3, r3
 80105b0:	b29b      	uxth	r3, r3
 80105b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80105b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105c0:	109b      	asrs	r3, r3, #2
 80105c2:	b21b      	sxth	r3, r3
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80105da:	4413      	add	r3, r2
 80105dc:	b29b      	uxth	r3, r3
 80105de:	b21a      	sxth	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105ea:	10db      	asrs	r3, r3, #3
 80105ec:	b21b      	sxth	r3, r3
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	4413      	add	r3, r2
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	b21a      	sxth	r2, r3
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801060a:	4b35      	ldr	r3, [pc, #212]	; (80106e0 <tcp_receive+0x5e0>)
 801060c:	881b      	ldrh	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	f000 84e1 	beq.w	8010fd6 <tcp_receive+0xed6>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	7d1b      	ldrb	r3, [r3, #20]
 8010618:	2b06      	cmp	r3, #6
 801061a:	f200 84dc 	bhi.w	8010fd6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010622:	4b30      	ldr	r3, [pc, #192]	; (80106e4 <tcp_receive+0x5e4>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	1ad3      	subs	r3, r2, r3
 8010628:	3b01      	subs	r3, #1
 801062a:	2b00      	cmp	r3, #0
 801062c:	f2c0 808e 	blt.w	801074c <tcp_receive+0x64c>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010634:	4b2a      	ldr	r3, [pc, #168]	; (80106e0 <tcp_receive+0x5e0>)
 8010636:	881b      	ldrh	r3, [r3, #0]
 8010638:	4619      	mov	r1, r3
 801063a:	4b2a      	ldr	r3, [pc, #168]	; (80106e4 <tcp_receive+0x5e4>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	440b      	add	r3, r1
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	3301      	adds	r3, #1
 8010644:	2b00      	cmp	r3, #0
 8010646:	f300 8081 	bgt.w	801074c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801064a:	4b27      	ldr	r3, [pc, #156]	; (80106e8 <tcp_receive+0x5e8>)
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010654:	4b23      	ldr	r3, [pc, #140]	; (80106e4 <tcp_receive+0x5e4>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	1ad3      	subs	r3, r2, r3
 801065a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801065c:	4b22      	ldr	r3, [pc, #136]	; (80106e8 <tcp_receive+0x5e8>)
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d106      	bne.n	8010672 <tcp_receive+0x572>
 8010664:	4b21      	ldr	r3, [pc, #132]	; (80106ec <tcp_receive+0x5ec>)
 8010666:	f240 5294 	movw	r2, #1428	; 0x594
 801066a:	4921      	ldr	r1, [pc, #132]	; (80106f0 <tcp_receive+0x5f0>)
 801066c:	4821      	ldr	r0, [pc, #132]	; (80106f4 <tcp_receive+0x5f4>)
 801066e:	f005 fc01 	bl	8015e74 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010674:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010678:	4293      	cmp	r3, r2
 801067a:	d906      	bls.n	801068a <tcp_receive+0x58a>
 801067c:	4b1b      	ldr	r3, [pc, #108]	; (80106ec <tcp_receive+0x5ec>)
 801067e:	f240 5295 	movw	r2, #1429	; 0x595
 8010682:	491d      	ldr	r1, [pc, #116]	; (80106f8 <tcp_receive+0x5f8>)
 8010684:	481b      	ldr	r0, [pc, #108]	; (80106f4 <tcp_receive+0x5f4>)
 8010686:	f005 fbf5 	bl	8015e74 <iprintf>
      off = (u16_t)off32;
 801068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010690:	4b15      	ldr	r3, [pc, #84]	; (80106e8 <tcp_receive+0x5e8>)
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	891b      	ldrh	r3, [r3, #8]
 8010696:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801069a:	429a      	cmp	r2, r3
 801069c:	d906      	bls.n	80106ac <tcp_receive+0x5ac>
 801069e:	4b13      	ldr	r3, [pc, #76]	; (80106ec <tcp_receive+0x5ec>)
 80106a0:	f240 5297 	movw	r2, #1431	; 0x597
 80106a4:	4915      	ldr	r1, [pc, #84]	; (80106fc <tcp_receive+0x5fc>)
 80106a6:	4813      	ldr	r0, [pc, #76]	; (80106f4 <tcp_receive+0x5f4>)
 80106a8:	f005 fbe4 	bl	8015e74 <iprintf>
      inseg.len -= off;
 80106ac:	4b0e      	ldr	r3, [pc, #56]	; (80106e8 <tcp_receive+0x5e8>)
 80106ae:	891a      	ldrh	r2, [r3, #8]
 80106b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106b4:	1ad3      	subs	r3, r2, r3
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	4b0b      	ldr	r3, [pc, #44]	; (80106e8 <tcp_receive+0x5e8>)
 80106ba:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80106bc:	4b0a      	ldr	r3, [pc, #40]	; (80106e8 <tcp_receive+0x5e8>)
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	891a      	ldrh	r2, [r3, #8]
 80106c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106c6:	1ad3      	subs	r3, r2, r3
 80106c8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80106ca:	e029      	b.n	8010720 <tcp_receive+0x620>
 80106cc:	0801863c 	.word	0x0801863c
 80106d0:	08018644 	.word	0x08018644
 80106d4:	2000450c 	.word	0x2000450c
 80106d8:	20004508 	.word	0x20004508
 80106dc:	2000b504 	.word	0x2000b504
 80106e0:	2000450e 	.word	0x2000450e
 80106e4:	20004504 	.word	0x20004504
 80106e8:	200044e4 	.word	0x200044e4
 80106ec:	080182d4 	.word	0x080182d4
 80106f0:	0801864c 	.word	0x0801864c
 80106f4:	08018320 	.word	0x08018320
 80106f8:	0801865c 	.word	0x0801865c
 80106fc:	0801866c 	.word	0x0801866c
        off -= p->len;
 8010700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010702:	895b      	ldrh	r3, [r3, #10]
 8010704:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010708:	1ad3      	subs	r3, r2, r3
 801070a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801070e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010710:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010712:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010716:	2200      	movs	r2, #0
 8010718:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801071a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010722:	895b      	ldrh	r3, [r3, #10]
 8010724:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010728:	429a      	cmp	r2, r3
 801072a:	d8e9      	bhi.n	8010700 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801072c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010730:	4619      	mov	r1, r3
 8010732:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010734:	f7fc f8d2 	bl	800c8dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801073c:	4a91      	ldr	r2, [pc, #580]	; (8010984 <tcp_receive+0x884>)
 801073e:	6013      	str	r3, [r2, #0]
 8010740:	4b91      	ldr	r3, [pc, #580]	; (8010988 <tcp_receive+0x888>)
 8010742:	68db      	ldr	r3, [r3, #12]
 8010744:	4a8f      	ldr	r2, [pc, #572]	; (8010984 <tcp_receive+0x884>)
 8010746:	6812      	ldr	r2, [r2, #0]
 8010748:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801074a:	e00d      	b.n	8010768 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801074c:	4b8d      	ldr	r3, [pc, #564]	; (8010984 <tcp_receive+0x884>)
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010754:	1ad3      	subs	r3, r2, r3
 8010756:	2b00      	cmp	r3, #0
 8010758:	da06      	bge.n	8010768 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	8b5b      	ldrh	r3, [r3, #26]
 801075e:	f043 0302 	orr.w	r3, r3, #2
 8010762:	b29a      	uxth	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010768:	4b86      	ldr	r3, [pc, #536]	; (8010984 <tcp_receive+0x884>)
 801076a:	681a      	ldr	r2, [r3, #0]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	2b00      	cmp	r3, #0
 8010774:	f2c0 842a 	blt.w	8010fcc <tcp_receive+0xecc>
 8010778:	4b82      	ldr	r3, [pc, #520]	; (8010984 <tcp_receive+0x884>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010780:	6879      	ldr	r1, [r7, #4]
 8010782:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010784:	440b      	add	r3, r1
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	3301      	adds	r3, #1
 801078a:	2b00      	cmp	r3, #0
 801078c:	f300 841e 	bgt.w	8010fcc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010794:	4b7b      	ldr	r3, [pc, #492]	; (8010984 <tcp_receive+0x884>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	429a      	cmp	r2, r3
 801079a:	f040 829a 	bne.w	8010cd2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801079e:	4b7a      	ldr	r3, [pc, #488]	; (8010988 <tcp_receive+0x888>)
 80107a0:	891c      	ldrh	r4, [r3, #8]
 80107a2:	4b79      	ldr	r3, [pc, #484]	; (8010988 <tcp_receive+0x888>)
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	899b      	ldrh	r3, [r3, #12]
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fa fd3e 	bl	800b22c <lwip_htons>
 80107b0:	4603      	mov	r3, r0
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	f003 0303 	and.w	r3, r3, #3
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d001      	beq.n	80107c0 <tcp_receive+0x6c0>
 80107bc:	2301      	movs	r3, #1
 80107be:	e000      	b.n	80107c2 <tcp_receive+0x6c2>
 80107c0:	2300      	movs	r3, #0
 80107c2:	4423      	add	r3, r4
 80107c4:	b29a      	uxth	r2, r3
 80107c6:	4b71      	ldr	r3, [pc, #452]	; (801098c <tcp_receive+0x88c>)
 80107c8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80107ce:	4b6f      	ldr	r3, [pc, #444]	; (801098c <tcp_receive+0x88c>)
 80107d0:	881b      	ldrh	r3, [r3, #0]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d275      	bcs.n	80108c2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80107d6:	4b6c      	ldr	r3, [pc, #432]	; (8010988 <tcp_receive+0x888>)
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	899b      	ldrh	r3, [r3, #12]
 80107dc:	b29b      	uxth	r3, r3
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fa fd24 	bl	800b22c <lwip_htons>
 80107e4:	4603      	mov	r3, r0
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	f003 0301 	and.w	r3, r3, #1
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d01f      	beq.n	8010830 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80107f0:	4b65      	ldr	r3, [pc, #404]	; (8010988 <tcp_receive+0x888>)
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	899b      	ldrh	r3, [r3, #12]
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	b21b      	sxth	r3, r3
 80107fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80107fe:	b21c      	sxth	r4, r3
 8010800:	4b61      	ldr	r3, [pc, #388]	; (8010988 <tcp_receive+0x888>)
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	899b      	ldrh	r3, [r3, #12]
 8010806:	b29b      	uxth	r3, r3
 8010808:	4618      	mov	r0, r3
 801080a:	f7fa fd0f 	bl	800b22c <lwip_htons>
 801080e:	4603      	mov	r3, r0
 8010810:	b2db      	uxtb	r3, r3
 8010812:	b29b      	uxth	r3, r3
 8010814:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010818:	b29b      	uxth	r3, r3
 801081a:	4618      	mov	r0, r3
 801081c:	f7fa fd06 	bl	800b22c <lwip_htons>
 8010820:	4603      	mov	r3, r0
 8010822:	b21b      	sxth	r3, r3
 8010824:	4323      	orrs	r3, r4
 8010826:	b21a      	sxth	r2, r3
 8010828:	4b57      	ldr	r3, [pc, #348]	; (8010988 <tcp_receive+0x888>)
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	b292      	uxth	r2, r2
 801082e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010834:	4b54      	ldr	r3, [pc, #336]	; (8010988 <tcp_receive+0x888>)
 8010836:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010838:	4b53      	ldr	r3, [pc, #332]	; (8010988 <tcp_receive+0x888>)
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	899b      	ldrh	r3, [r3, #12]
 801083e:	b29b      	uxth	r3, r3
 8010840:	4618      	mov	r0, r3
 8010842:	f7fa fcf3 	bl	800b22c <lwip_htons>
 8010846:	4603      	mov	r3, r0
 8010848:	b2db      	uxtb	r3, r3
 801084a:	f003 0302 	and.w	r3, r3, #2
 801084e:	2b00      	cmp	r3, #0
 8010850:	d005      	beq.n	801085e <tcp_receive+0x75e>
            inseg.len -= 1;
 8010852:	4b4d      	ldr	r3, [pc, #308]	; (8010988 <tcp_receive+0x888>)
 8010854:	891b      	ldrh	r3, [r3, #8]
 8010856:	3b01      	subs	r3, #1
 8010858:	b29a      	uxth	r2, r3
 801085a:	4b4b      	ldr	r3, [pc, #300]	; (8010988 <tcp_receive+0x888>)
 801085c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801085e:	4b4a      	ldr	r3, [pc, #296]	; (8010988 <tcp_receive+0x888>)
 8010860:	685a      	ldr	r2, [r3, #4]
 8010862:	4b49      	ldr	r3, [pc, #292]	; (8010988 <tcp_receive+0x888>)
 8010864:	891b      	ldrh	r3, [r3, #8]
 8010866:	4619      	mov	r1, r3
 8010868:	4610      	mov	r0, r2
 801086a:	f7fb ff37 	bl	800c6dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801086e:	4b46      	ldr	r3, [pc, #280]	; (8010988 <tcp_receive+0x888>)
 8010870:	891c      	ldrh	r4, [r3, #8]
 8010872:	4b45      	ldr	r3, [pc, #276]	; (8010988 <tcp_receive+0x888>)
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	899b      	ldrh	r3, [r3, #12]
 8010878:	b29b      	uxth	r3, r3
 801087a:	4618      	mov	r0, r3
 801087c:	f7fa fcd6 	bl	800b22c <lwip_htons>
 8010880:	4603      	mov	r3, r0
 8010882:	b2db      	uxtb	r3, r3
 8010884:	f003 0303 	and.w	r3, r3, #3
 8010888:	2b00      	cmp	r3, #0
 801088a:	d001      	beq.n	8010890 <tcp_receive+0x790>
 801088c:	2301      	movs	r3, #1
 801088e:	e000      	b.n	8010892 <tcp_receive+0x792>
 8010890:	2300      	movs	r3, #0
 8010892:	4423      	add	r3, r4
 8010894:	b29a      	uxth	r2, r3
 8010896:	4b3d      	ldr	r3, [pc, #244]	; (801098c <tcp_receive+0x88c>)
 8010898:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801089a:	4b3c      	ldr	r3, [pc, #240]	; (801098c <tcp_receive+0x88c>)
 801089c:	881b      	ldrh	r3, [r3, #0]
 801089e:	461a      	mov	r2, r3
 80108a0:	4b38      	ldr	r3, [pc, #224]	; (8010984 <tcp_receive+0x884>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	441a      	add	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108aa:	6879      	ldr	r1, [r7, #4]
 80108ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108ae:	440b      	add	r3, r1
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d006      	beq.n	80108c2 <tcp_receive+0x7c2>
 80108b4:	4b36      	ldr	r3, [pc, #216]	; (8010990 <tcp_receive+0x890>)
 80108b6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80108ba:	4936      	ldr	r1, [pc, #216]	; (8010994 <tcp_receive+0x894>)
 80108bc:	4836      	ldr	r0, [pc, #216]	; (8010998 <tcp_receive+0x898>)
 80108be:	f005 fad9 	bl	8015e74 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	f000 80e7 	beq.w	8010a9a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108cc:	4b2e      	ldr	r3, [pc, #184]	; (8010988 <tcp_receive+0x888>)
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	899b      	ldrh	r3, [r3, #12]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7fa fca9 	bl	800b22c <lwip_htons>
 80108da:	4603      	mov	r3, r0
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d010      	beq.n	8010908 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80108e6:	e00a      	b.n	80108fe <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108ec:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f7fd fca3 	bl	800e244 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010902:	2b00      	cmp	r3, #0
 8010904:	d1f0      	bne.n	80108e8 <tcp_receive+0x7e8>
 8010906:	e0c8      	b.n	8010a9a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801090c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801090e:	e052      	b.n	80109b6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	899b      	ldrh	r3, [r3, #12]
 8010916:	b29b      	uxth	r3, r3
 8010918:	4618      	mov	r0, r3
 801091a:	f7fa fc87 	bl	800b22c <lwip_htons>
 801091e:	4603      	mov	r3, r0
 8010920:	b2db      	uxtb	r3, r3
 8010922:	f003 0301 	and.w	r3, r3, #1
 8010926:	2b00      	cmp	r3, #0
 8010928:	d03d      	beq.n	80109a6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801092a:	4b17      	ldr	r3, [pc, #92]	; (8010988 <tcp_receive+0x888>)
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	899b      	ldrh	r3, [r3, #12]
 8010930:	b29b      	uxth	r3, r3
 8010932:	4618      	mov	r0, r3
 8010934:	f7fa fc7a 	bl	800b22c <lwip_htons>
 8010938:	4603      	mov	r3, r0
 801093a:	b2db      	uxtb	r3, r3
 801093c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010940:	2b00      	cmp	r3, #0
 8010942:	d130      	bne.n	80109a6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010944:	4b10      	ldr	r3, [pc, #64]	; (8010988 <tcp_receive+0x888>)
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	899b      	ldrh	r3, [r3, #12]
 801094a:	b29c      	uxth	r4, r3
 801094c:	2001      	movs	r0, #1
 801094e:	f7fa fc6d 	bl	800b22c <lwip_htons>
 8010952:	4603      	mov	r3, r0
 8010954:	461a      	mov	r2, r3
 8010956:	4b0c      	ldr	r3, [pc, #48]	; (8010988 <tcp_receive+0x888>)
 8010958:	68db      	ldr	r3, [r3, #12]
 801095a:	4322      	orrs	r2, r4
 801095c:	b292      	uxth	r2, r2
 801095e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010960:	4b09      	ldr	r3, [pc, #36]	; (8010988 <tcp_receive+0x888>)
 8010962:	891c      	ldrh	r4, [r3, #8]
 8010964:	4b08      	ldr	r3, [pc, #32]	; (8010988 <tcp_receive+0x888>)
 8010966:	68db      	ldr	r3, [r3, #12]
 8010968:	899b      	ldrh	r3, [r3, #12]
 801096a:	b29b      	uxth	r3, r3
 801096c:	4618      	mov	r0, r3
 801096e:	f7fa fc5d 	bl	800b22c <lwip_htons>
 8010972:	4603      	mov	r3, r0
 8010974:	b2db      	uxtb	r3, r3
 8010976:	f003 0303 	and.w	r3, r3, #3
 801097a:	2b00      	cmp	r3, #0
 801097c:	d00e      	beq.n	801099c <tcp_receive+0x89c>
 801097e:	2301      	movs	r3, #1
 8010980:	e00d      	b.n	801099e <tcp_receive+0x89e>
 8010982:	bf00      	nop
 8010984:	20004504 	.word	0x20004504
 8010988:	200044e4 	.word	0x200044e4
 801098c:	2000450e 	.word	0x2000450e
 8010990:	080182d4 	.word	0x080182d4
 8010994:	0801867c 	.word	0x0801867c
 8010998:	08018320 	.word	0x08018320
 801099c:	2300      	movs	r3, #0
 801099e:	4423      	add	r3, r4
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	4b98      	ldr	r3, [pc, #608]	; (8010c04 <tcp_receive+0xb04>)
 80109a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80109a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80109aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80109b0:	6938      	ldr	r0, [r7, #16]
 80109b2:	f7fd fc47 	bl	800e244 <tcp_seg_free>
            while (next &&
 80109b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00e      	beq.n	80109da <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80109bc:	4b91      	ldr	r3, [pc, #580]	; (8010c04 <tcp_receive+0xb04>)
 80109be:	881b      	ldrh	r3, [r3, #0]
 80109c0:	461a      	mov	r2, r3
 80109c2:	4b91      	ldr	r3, [pc, #580]	; (8010c08 <tcp_receive+0xb08>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	441a      	add	r2, r3
 80109c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ca:	68db      	ldr	r3, [r3, #12]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109d0:	8909      	ldrh	r1, [r1, #8]
 80109d2:	440b      	add	r3, r1
 80109d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	da9a      	bge.n	8010910 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80109da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d059      	beq.n	8010a94 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80109e0:	4b88      	ldr	r3, [pc, #544]	; (8010c04 <tcp_receive+0xb04>)
 80109e2:	881b      	ldrh	r3, [r3, #0]
 80109e4:	461a      	mov	r2, r3
 80109e6:	4b88      	ldr	r3, [pc, #544]	; (8010c08 <tcp_receive+0xb08>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	441a      	add	r2, r3
 80109ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	dd4d      	ble.n	8010a94 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80109f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	4b81      	ldr	r3, [pc, #516]	; (8010c08 <tcp_receive+0xb08>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	1ad3      	subs	r3, r2, r3
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	4b80      	ldr	r3, [pc, #512]	; (8010c0c <tcp_receive+0xb0c>)
 8010a0c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a0e:	4b7f      	ldr	r3, [pc, #508]	; (8010c0c <tcp_receive+0xb0c>)
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	899b      	ldrh	r3, [r3, #12]
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fa fc08 	bl	800b22c <lwip_htons>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	f003 0302 	and.w	r3, r3, #2
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d005      	beq.n	8010a34 <tcp_receive+0x934>
                inseg.len -= 1;
 8010a28:	4b78      	ldr	r3, [pc, #480]	; (8010c0c <tcp_receive+0xb0c>)
 8010a2a:	891b      	ldrh	r3, [r3, #8]
 8010a2c:	3b01      	subs	r3, #1
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	4b76      	ldr	r3, [pc, #472]	; (8010c0c <tcp_receive+0xb0c>)
 8010a32:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010a34:	4b75      	ldr	r3, [pc, #468]	; (8010c0c <tcp_receive+0xb0c>)
 8010a36:	685a      	ldr	r2, [r3, #4]
 8010a38:	4b74      	ldr	r3, [pc, #464]	; (8010c0c <tcp_receive+0xb0c>)
 8010a3a:	891b      	ldrh	r3, [r3, #8]
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	4610      	mov	r0, r2
 8010a40:	f7fb fe4c 	bl	800c6dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010a44:	4b71      	ldr	r3, [pc, #452]	; (8010c0c <tcp_receive+0xb0c>)
 8010a46:	891c      	ldrh	r4, [r3, #8]
 8010a48:	4b70      	ldr	r3, [pc, #448]	; (8010c0c <tcp_receive+0xb0c>)
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	899b      	ldrh	r3, [r3, #12]
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fa fbeb 	bl	800b22c <lwip_htons>
 8010a56:	4603      	mov	r3, r0
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	f003 0303 	and.w	r3, r3, #3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d001      	beq.n	8010a66 <tcp_receive+0x966>
 8010a62:	2301      	movs	r3, #1
 8010a64:	e000      	b.n	8010a68 <tcp_receive+0x968>
 8010a66:	2300      	movs	r3, #0
 8010a68:	4423      	add	r3, r4
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	4b65      	ldr	r3, [pc, #404]	; (8010c04 <tcp_receive+0xb04>)
 8010a6e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010a70:	4b64      	ldr	r3, [pc, #400]	; (8010c04 <tcp_receive+0xb04>)
 8010a72:	881b      	ldrh	r3, [r3, #0]
 8010a74:	461a      	mov	r2, r3
 8010a76:	4b64      	ldr	r3, [pc, #400]	; (8010c08 <tcp_receive+0xb08>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	441a      	add	r2, r3
 8010a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a7e:	68db      	ldr	r3, [r3, #12]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d006      	beq.n	8010a94 <tcp_receive+0x994>
 8010a86:	4b62      	ldr	r3, [pc, #392]	; (8010c10 <tcp_receive+0xb10>)
 8010a88:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8010a8c:	4961      	ldr	r1, [pc, #388]	; (8010c14 <tcp_receive+0xb14>)
 8010a8e:	4862      	ldr	r0, [pc, #392]	; (8010c18 <tcp_receive+0xb18>)
 8010a90:	f005 f9f0 	bl	8015e74 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a98:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010a9a:	4b5a      	ldr	r3, [pc, #360]	; (8010c04 <tcp_receive+0xb04>)
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	4b59      	ldr	r3, [pc, #356]	; (8010c08 <tcp_receive+0xb08>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	441a      	add	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010aae:	4b55      	ldr	r3, [pc, #340]	; (8010c04 <tcp_receive+0xb04>)
 8010ab0:	881b      	ldrh	r3, [r3, #0]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d206      	bcs.n	8010ac4 <tcp_receive+0x9c4>
 8010ab6:	4b56      	ldr	r3, [pc, #344]	; (8010c10 <tcp_receive+0xb10>)
 8010ab8:	f240 6207 	movw	r2, #1543	; 0x607
 8010abc:	4957      	ldr	r1, [pc, #348]	; (8010c1c <tcp_receive+0xb1c>)
 8010abe:	4856      	ldr	r0, [pc, #344]	; (8010c18 <tcp_receive+0xb18>)
 8010ac0:	f005 f9d8 	bl	8015e74 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ac8:	4b4e      	ldr	r3, [pc, #312]	; (8010c04 <tcp_receive+0xb04>)
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	b29a      	uxth	r2, r3
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7fc fe93 	bl	800d800 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010ada:	4b4c      	ldr	r3, [pc, #304]	; (8010c0c <tcp_receive+0xb0c>)
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	891b      	ldrh	r3, [r3, #8]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d006      	beq.n	8010af2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010ae4:	4b49      	ldr	r3, [pc, #292]	; (8010c0c <tcp_receive+0xb0c>)
 8010ae6:	685b      	ldr	r3, [r3, #4]
 8010ae8:	4a4d      	ldr	r2, [pc, #308]	; (8010c20 <tcp_receive+0xb20>)
 8010aea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010aec:	4b47      	ldr	r3, [pc, #284]	; (8010c0c <tcp_receive+0xb0c>)
 8010aee:	2200      	movs	r2, #0
 8010af0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010af2:	4b46      	ldr	r3, [pc, #280]	; (8010c0c <tcp_receive+0xb0c>)
 8010af4:	68db      	ldr	r3, [r3, #12]
 8010af6:	899b      	ldrh	r3, [r3, #12]
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fa fb96 	bl	800b22c <lwip_htons>
 8010b00:	4603      	mov	r3, r0
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	f003 0301 	and.w	r3, r3, #1
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f000 80b8 	beq.w	8010c7e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010b0e:	4b45      	ldr	r3, [pc, #276]	; (8010c24 <tcp_receive+0xb24>)
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	f043 0320 	orr.w	r3, r3, #32
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	4b42      	ldr	r3, [pc, #264]	; (8010c24 <tcp_receive+0xb24>)
 8010b1a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010b1c:	e0af      	b.n	8010c7e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b22:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	4a36      	ldr	r2, [pc, #216]	; (8010c08 <tcp_receive+0xb08>)
 8010b2e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	891b      	ldrh	r3, [r3, #8]
 8010b34:	461c      	mov	r4, r3
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	68db      	ldr	r3, [r3, #12]
 8010b3a:	899b      	ldrh	r3, [r3, #12]
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fa fb74 	bl	800b22c <lwip_htons>
 8010b44:	4603      	mov	r3, r0
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	f003 0303 	and.w	r3, r3, #3
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d001      	beq.n	8010b54 <tcp_receive+0xa54>
 8010b50:	2301      	movs	r3, #1
 8010b52:	e000      	b.n	8010b56 <tcp_receive+0xa56>
 8010b54:	2300      	movs	r3, #0
 8010b56:	191a      	adds	r2, r3, r4
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b5c:	441a      	add	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b66:	461c      	mov	r4, r3
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	891b      	ldrh	r3, [r3, #8]
 8010b6c:	461d      	mov	r5, r3
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	899b      	ldrh	r3, [r3, #12]
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7fa fb58 	bl	800b22c <lwip_htons>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	b2db      	uxtb	r3, r3
 8010b80:	f003 0303 	and.w	r3, r3, #3
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <tcp_receive+0xa8c>
 8010b88:	2301      	movs	r3, #1
 8010b8a:	e000      	b.n	8010b8e <tcp_receive+0xa8e>
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	442b      	add	r3, r5
 8010b90:	429c      	cmp	r4, r3
 8010b92:	d206      	bcs.n	8010ba2 <tcp_receive+0xaa2>
 8010b94:	4b1e      	ldr	r3, [pc, #120]	; (8010c10 <tcp_receive+0xb10>)
 8010b96:	f240 622c 	movw	r2, #1580	; 0x62c
 8010b9a:	4923      	ldr	r1, [pc, #140]	; (8010c28 <tcp_receive+0xb28>)
 8010b9c:	481e      	ldr	r0, [pc, #120]	; (8010c18 <tcp_receive+0xb18>)
 8010b9e:	f005 f969 	bl	8015e74 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	891b      	ldrh	r3, [r3, #8]
 8010ba6:	461c      	mov	r4, r3
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	899b      	ldrh	r3, [r3, #12]
 8010bae:	b29b      	uxth	r3, r3
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7fa fb3b 	bl	800b22c <lwip_htons>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	f003 0303 	and.w	r3, r3, #3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d001      	beq.n	8010bc6 <tcp_receive+0xac6>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e000      	b.n	8010bc8 <tcp_receive+0xac8>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	1919      	adds	r1, r3, r4
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010bce:	b28b      	uxth	r3, r1
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f7fc fe11 	bl	800d800 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	891b      	ldrh	r3, [r3, #8]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d028      	beq.n	8010c3a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010be8:	4b0d      	ldr	r3, [pc, #52]	; (8010c20 <tcp_receive+0xb20>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d01d      	beq.n	8010c2c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010bf0:	4b0b      	ldr	r3, [pc, #44]	; (8010c20 <tcp_receive+0xb20>)
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	4610      	mov	r0, r2
 8010bfc:	f7fb ffc2 	bl	800cb84 <pbuf_cat>
 8010c00:	e018      	b.n	8010c34 <tcp_receive+0xb34>
 8010c02:	bf00      	nop
 8010c04:	2000450e 	.word	0x2000450e
 8010c08:	20004504 	.word	0x20004504
 8010c0c:	200044e4 	.word	0x200044e4
 8010c10:	080182d4 	.word	0x080182d4
 8010c14:	080186b4 	.word	0x080186b4
 8010c18:	08018320 	.word	0x08018320
 8010c1c:	080186f0 	.word	0x080186f0
 8010c20:	20004514 	.word	0x20004514
 8010c24:	20004511 	.word	0x20004511
 8010c28:	08018710 	.word	0x08018710
            } else {
              recv_data = cseg->p;
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	4a70      	ldr	r2, [pc, #448]	; (8010df4 <tcp_receive+0xcf4>)
 8010c32:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	2200      	movs	r2, #0
 8010c38:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	899b      	ldrh	r3, [r3, #12]
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fa faf2 	bl	800b22c <lwip_htons>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	b2db      	uxtb	r3, r3
 8010c4c:	f003 0301 	and.w	r3, r3, #1
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d00d      	beq.n	8010c70 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010c54:	4b68      	ldr	r3, [pc, #416]	; (8010df8 <tcp_receive+0xcf8>)
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	f043 0320 	orr.w	r3, r3, #32
 8010c5c:	b2da      	uxtb	r2, r3
 8010c5e:	4b66      	ldr	r3, [pc, #408]	; (8010df8 <tcp_receive+0xcf8>)
 8010c60:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	7d1b      	ldrb	r3, [r3, #20]
 8010c66:	2b04      	cmp	r3, #4
 8010c68:	d102      	bne.n	8010c70 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2207      	movs	r2, #7
 8010c6e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010c78:	68b8      	ldr	r0, [r7, #8]
 8010c7a:	f7fd fae3 	bl	800e244 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d008      	beq.n	8010c98 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	685a      	ldr	r2, [r3, #4]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010c92:	429a      	cmp	r2, r3
 8010c94:	f43f af43 	beq.w	8010b1e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	8b5b      	ldrh	r3, [r3, #26]
 8010c9c:	f003 0301 	and.w	r3, r3, #1
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00e      	beq.n	8010cc2 <tcp_receive+0xbc2>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	8b5b      	ldrh	r3, [r3, #26]
 8010ca8:	f023 0301 	bic.w	r3, r3, #1
 8010cac:	b29a      	uxth	r2, r3
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	835a      	strh	r2, [r3, #26]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	8b5b      	ldrh	r3, [r3, #26]
 8010cb6:	f043 0302 	orr.w	r3, r3, #2
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010cc0:	e188      	b.n	8010fd4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	8b5b      	ldrh	r3, [r3, #26]
 8010cc6:	f043 0301 	orr.w	r3, r3, #1
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010cd0:	e180      	b.n	8010fd4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d106      	bne.n	8010ce8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010cda:	4848      	ldr	r0, [pc, #288]	; (8010dfc <tcp_receive+0xcfc>)
 8010cdc:	f7fd fae8 	bl	800e2b0 <tcp_seg_copy>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	675a      	str	r2, [r3, #116]	; 0x74
 8010ce6:	e16d      	b.n	8010fc4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8010cf2:	e157      	b.n	8010fa4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	685a      	ldr	r2, [r3, #4]
 8010cfa:	4b41      	ldr	r3, [pc, #260]	; (8010e00 <tcp_receive+0xd00>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d11d      	bne.n	8010d3e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010d02:	4b3e      	ldr	r3, [pc, #248]	; (8010dfc <tcp_receive+0xcfc>)
 8010d04:	891a      	ldrh	r2, [r3, #8]
 8010d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d08:	891b      	ldrh	r3, [r3, #8]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	f240 814f 	bls.w	8010fae <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d10:	483a      	ldr	r0, [pc, #232]	; (8010dfc <tcp_receive+0xcfc>)
 8010d12:	f7fd facd 	bl	800e2b0 <tcp_seg_copy>
 8010d16:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	f000 8149 	beq.w	8010fb2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d003      	beq.n	8010d2e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d28:	697a      	ldr	r2, [r7, #20]
 8010d2a:	601a      	str	r2, [r3, #0]
 8010d2c:	e002      	b.n	8010d34 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	697a      	ldr	r2, [r7, #20]
 8010d32:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010d34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d36:	6978      	ldr	r0, [r7, #20]
 8010d38:	f7ff f8de 	bl	800fef8 <tcp_oos_insert_segment>
                }
                break;
 8010d3c:	e139      	b.n	8010fb2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d117      	bne.n	8010d74 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010d44:	4b2e      	ldr	r3, [pc, #184]	; (8010e00 <tcp_receive+0xd00>)
 8010d46:	681a      	ldr	r2, [r3, #0]
 8010d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	1ad3      	subs	r3, r2, r3
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	da57      	bge.n	8010e04 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d54:	4829      	ldr	r0, [pc, #164]	; (8010dfc <tcp_receive+0xcfc>)
 8010d56:	f7fd faab 	bl	800e2b0 <tcp_seg_copy>
 8010d5a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f000 8129 	beq.w	8010fb6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	69ba      	ldr	r2, [r7, #24]
 8010d68:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010d6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d6c:	69b8      	ldr	r0, [r7, #24]
 8010d6e:	f7ff f8c3 	bl	800fef8 <tcp_oos_insert_segment>
                  }
                  break;
 8010d72:	e120      	b.n	8010fb6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010d74:	4b22      	ldr	r3, [pc, #136]	; (8010e00 <tcp_receive+0xd00>)
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	3b01      	subs	r3, #1
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	db3e      	blt.n	8010e04 <tcp_receive+0xd04>
 8010d86:	4b1e      	ldr	r3, [pc, #120]	; (8010e00 <tcp_receive+0xd00>)
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	3301      	adds	r3, #1
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	dc35      	bgt.n	8010e04 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d98:	4818      	ldr	r0, [pc, #96]	; (8010dfc <tcp_receive+0xcfc>)
 8010d9a:	f7fd fa89 	bl	800e2b0 <tcp_seg_copy>
 8010d9e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f000 8109 	beq.w	8010fba <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010db0:	8912      	ldrh	r2, [r2, #8]
 8010db2:	441a      	add	r2, r3
 8010db4:	4b12      	ldr	r3, [pc, #72]	; (8010e00 <tcp_receive+0xd00>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	dd12      	ble.n	8010de4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010dbe:	4b10      	ldr	r3, [pc, #64]	; (8010e00 <tcp_receive+0xd00>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	1ad3      	subs	r3, r2, r3
 8010dce:	b29a      	uxth	r2, r3
 8010dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd6:	685a      	ldr	r2, [r3, #4]
 8010dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dda:	891b      	ldrh	r3, [r3, #8]
 8010ddc:	4619      	mov	r1, r3
 8010dde:	4610      	mov	r0, r2
 8010de0:	f7fb fc7c 	bl	800c6dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de6:	69fa      	ldr	r2, [r7, #28]
 8010de8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010dec:	69f8      	ldr	r0, [r7, #28]
 8010dee:	f7ff f883 	bl	800fef8 <tcp_oos_insert_segment>
                  }
                  break;
 8010df2:	e0e2      	b.n	8010fba <tcp_receive+0xeba>
 8010df4:	20004514 	.word	0x20004514
 8010df8:	20004511 	.word	0x20004511
 8010dfc:	200044e4 	.word	0x200044e4
 8010e00:	20004504 	.word	0x20004504
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e06:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f040 80c6 	bne.w	8010f9e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010e12:	4b80      	ldr	r3, [pc, #512]	; (8011014 <tcp_receive+0xf14>)
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f340 80bd 	ble.w	8010f9e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	899b      	ldrh	r3, [r3, #12]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7fa f9fd 	bl	800b22c <lwip_htons>
 8010e32:	4603      	mov	r3, r0
 8010e34:	b2db      	uxtb	r3, r3
 8010e36:	f003 0301 	and.w	r3, r3, #1
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f040 80bf 	bne.w	8010fbe <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010e40:	4875      	ldr	r0, [pc, #468]	; (8011018 <tcp_receive+0xf18>)
 8010e42:	f7fd fa35 	bl	800e2b0 <tcp_seg_copy>
 8010e46:	4602      	mov	r2, r0
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f000 80b6 	beq.w	8010fc2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e5e:	8912      	ldrh	r2, [r2, #8]
 8010e60:	441a      	add	r2, r3
 8010e62:	4b6c      	ldr	r3, [pc, #432]	; (8011014 <tcp_receive+0xf14>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	dd12      	ble.n	8010e92 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010e6c:	4b69      	ldr	r3, [pc, #420]	; (8011014 <tcp_receive+0xf14>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	b29a      	uxth	r2, r3
 8010e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	1ad3      	subs	r3, r2, r3
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e80:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e84:	685a      	ldr	r2, [r3, #4]
 8010e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e88:	891b      	ldrh	r3, [r3, #8]
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	4610      	mov	r0, r2
 8010e8e:	f7fb fc25 	bl	800c6dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010e92:	4b62      	ldr	r3, [pc, #392]	; (801101c <tcp_receive+0xf1c>)
 8010e94:	881b      	ldrh	r3, [r3, #0]
 8010e96:	461a      	mov	r2, r3
 8010e98:	4b5e      	ldr	r3, [pc, #376]	; (8011014 <tcp_receive+0xf14>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	441a      	add	r2, r3
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea2:	6879      	ldr	r1, [r7, #4]
 8010ea4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ea6:	440b      	add	r3, r1
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f340 8089 	ble.w	8010fc2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	899b      	ldrh	r3, [r3, #12]
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7fa f9b6 	bl	800b22c <lwip_htons>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	f003 0301 	and.w	r3, r3, #1
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d022      	beq.n	8010f12 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	899b      	ldrh	r3, [r3, #12]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	b21b      	sxth	r3, r3
 8010ed8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010edc:	b21c      	sxth	r4, r3
 8010ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	899b      	ldrh	r3, [r3, #12]
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fa f99f 	bl	800b22c <lwip_htons>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	b2db      	uxtb	r3, r3
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fa f996 	bl	800b22c <lwip_htons>
 8010f00:	4603      	mov	r3, r0
 8010f02:	b21b      	sxth	r3, r3
 8010f04:	4323      	orrs	r3, r4
 8010f06:	b21a      	sxth	r2, r3
 8010f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	b292      	uxth	r2, r2
 8010f10:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f16:	b29a      	uxth	r2, r3
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f1c:	4413      	add	r3, r2
 8010f1e:	b299      	uxth	r1, r3
 8010f20:	4b3c      	ldr	r3, [pc, #240]	; (8011014 <tcp_receive+0xf14>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	b29a      	uxth	r2, r3
 8010f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	1a8a      	subs	r2, r1, r2
 8010f2c:	b292      	uxth	r2, r2
 8010f2e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	685a      	ldr	r2, [r3, #4]
 8010f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	891b      	ldrh	r3, [r3, #8]
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	4610      	mov	r0, r2
 8010f40:	f7fb fbcc 	bl	800c6dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	891c      	ldrh	r4, [r3, #8]
 8010f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	899b      	ldrh	r3, [r3, #12]
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fa f969 	bl	800b22c <lwip_htons>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	f003 0303 	and.w	r3, r3, #3
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d001      	beq.n	8010f6a <tcp_receive+0xe6a>
 8010f66:	2301      	movs	r3, #1
 8010f68:	e000      	b.n	8010f6c <tcp_receive+0xe6c>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	4423      	add	r3, r4
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	4b2a      	ldr	r3, [pc, #168]	; (801101c <tcp_receive+0xf1c>)
 8010f72:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f74:	4b29      	ldr	r3, [pc, #164]	; (801101c <tcp_receive+0xf1c>)
 8010f76:	881b      	ldrh	r3, [r3, #0]
 8010f78:	461a      	mov	r2, r3
 8010f7a:	4b26      	ldr	r3, [pc, #152]	; (8011014 <tcp_receive+0xf14>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	441a      	add	r2, r3
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f84:	6879      	ldr	r1, [r7, #4]
 8010f86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f88:	440b      	add	r3, r1
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d019      	beq.n	8010fc2 <tcp_receive+0xec2>
 8010f8e:	4b24      	ldr	r3, [pc, #144]	; (8011020 <tcp_receive+0xf20>)
 8010f90:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010f94:	4923      	ldr	r1, [pc, #140]	; (8011024 <tcp_receive+0xf24>)
 8010f96:	4824      	ldr	r0, [pc, #144]	; (8011028 <tcp_receive+0xf28>)
 8010f98:	f004 ff6c 	bl	8015e74 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010f9c:	e011      	b.n	8010fc2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f47f aea4 	bne.w	8010cf4 <tcp_receive+0xbf4>
 8010fac:	e00a      	b.n	8010fc4 <tcp_receive+0xec4>
                break;
 8010fae:	bf00      	nop
 8010fb0:	e008      	b.n	8010fc4 <tcp_receive+0xec4>
                break;
 8010fb2:	bf00      	nop
 8010fb4:	e006      	b.n	8010fc4 <tcp_receive+0xec4>
                  break;
 8010fb6:	bf00      	nop
 8010fb8:	e004      	b.n	8010fc4 <tcp_receive+0xec4>
                  break;
 8010fba:	bf00      	nop
 8010fbc:	e002      	b.n	8010fc4 <tcp_receive+0xec4>
                  break;
 8010fbe:	bf00      	nop
 8010fc0:	e000      	b.n	8010fc4 <tcp_receive+0xec4>
                break;
 8010fc2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f001 fe9d 	bl	8012d04 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010fca:	e003      	b.n	8010fd4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f001 fe99 	bl	8012d04 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fd2:	e01a      	b.n	801100a <tcp_receive+0xf0a>
 8010fd4:	e019      	b.n	801100a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010fd6:	4b0f      	ldr	r3, [pc, #60]	; (8011014 <tcp_receive+0xf14>)
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fde:	1ad3      	subs	r3, r2, r3
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	db0a      	blt.n	8010ffa <tcp_receive+0xefa>
 8010fe4:	4b0b      	ldr	r3, [pc, #44]	; (8011014 <tcp_receive+0xf14>)
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fec:	6879      	ldr	r1, [r7, #4]
 8010fee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010ff0:	440b      	add	r3, r1
 8010ff2:	1ad3      	subs	r3, r2, r3
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dd07      	ble.n	801100a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	8b5b      	ldrh	r3, [r3, #26]
 8010ffe:	f043 0302 	orr.w	r3, r3, #2
 8011002:	b29a      	uxth	r2, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011008:	e7ff      	b.n	801100a <tcp_receive+0xf0a>
 801100a:	bf00      	nop
 801100c:	3750      	adds	r7, #80	; 0x50
 801100e:	46bd      	mov	sp, r7
 8011010:	bdb0      	pop	{r4, r5, r7, pc}
 8011012:	bf00      	nop
 8011014:	20004504 	.word	0x20004504
 8011018:	200044e4 	.word	0x200044e4
 801101c:	2000450e 	.word	0x2000450e
 8011020:	080182d4 	.word	0x080182d4
 8011024:	0801867c 	.word	0x0801867c
 8011028:	08018320 	.word	0x08018320

0801102c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011032:	4b15      	ldr	r3, [pc, #84]	; (8011088 <tcp_get_next_optbyte+0x5c>)
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	1c5a      	adds	r2, r3, #1
 8011038:	b291      	uxth	r1, r2
 801103a:	4a13      	ldr	r2, [pc, #76]	; (8011088 <tcp_get_next_optbyte+0x5c>)
 801103c:	8011      	strh	r1, [r2, #0]
 801103e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011040:	4b12      	ldr	r3, [pc, #72]	; (801108c <tcp_get_next_optbyte+0x60>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d004      	beq.n	8011052 <tcp_get_next_optbyte+0x26>
 8011048:	4b11      	ldr	r3, [pc, #68]	; (8011090 <tcp_get_next_optbyte+0x64>)
 801104a:	881b      	ldrh	r3, [r3, #0]
 801104c:	88fa      	ldrh	r2, [r7, #6]
 801104e:	429a      	cmp	r2, r3
 8011050:	d208      	bcs.n	8011064 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011052:	4b10      	ldr	r3, [pc, #64]	; (8011094 <tcp_get_next_optbyte+0x68>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3314      	adds	r3, #20
 8011058:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801105a:	88fb      	ldrh	r3, [r7, #6]
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	4413      	add	r3, r2
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	e00b      	b.n	801107c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011064:	88fb      	ldrh	r3, [r7, #6]
 8011066:	b2da      	uxtb	r2, r3
 8011068:	4b09      	ldr	r3, [pc, #36]	; (8011090 <tcp_get_next_optbyte+0x64>)
 801106a:	881b      	ldrh	r3, [r3, #0]
 801106c:	b2db      	uxtb	r3, r3
 801106e:	1ad3      	subs	r3, r2, r3
 8011070:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011072:	4b06      	ldr	r3, [pc, #24]	; (801108c <tcp_get_next_optbyte+0x60>)
 8011074:	681a      	ldr	r2, [r3, #0]
 8011076:	797b      	ldrb	r3, [r7, #5]
 8011078:	4413      	add	r3, r2
 801107a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801107c:	4618      	mov	r0, r3
 801107e:	370c      	adds	r7, #12
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr
 8011088:	20004500 	.word	0x20004500
 801108c:	200044fc 	.word	0x200044fc
 8011090:	200044fa 	.word	0x200044fa
 8011094:	200044f4 	.word	0x200044f4

08011098 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d106      	bne.n	80110b4 <tcp_parseopt+0x1c>
 80110a6:	4b31      	ldr	r3, [pc, #196]	; (801116c <tcp_parseopt+0xd4>)
 80110a8:	f240 727d 	movw	r2, #1917	; 0x77d
 80110ac:	4930      	ldr	r1, [pc, #192]	; (8011170 <tcp_parseopt+0xd8>)
 80110ae:	4831      	ldr	r0, [pc, #196]	; (8011174 <tcp_parseopt+0xdc>)
 80110b0:	f004 fee0 	bl	8015e74 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80110b4:	4b30      	ldr	r3, [pc, #192]	; (8011178 <tcp_parseopt+0xe0>)
 80110b6:	881b      	ldrh	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d053      	beq.n	8011164 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80110bc:	4b2f      	ldr	r3, [pc, #188]	; (801117c <tcp_parseopt+0xe4>)
 80110be:	2200      	movs	r2, #0
 80110c0:	801a      	strh	r2, [r3, #0]
 80110c2:	e043      	b.n	801114c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 80110c4:	f7ff ffb2 	bl	801102c <tcp_get_next_optbyte>
 80110c8:	4603      	mov	r3, r0
 80110ca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80110cc:	7bfb      	ldrb	r3, [r7, #15]
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d03c      	beq.n	801114c <tcp_parseopt+0xb4>
 80110d2:	2b02      	cmp	r3, #2
 80110d4:	d002      	beq.n	80110dc <tcp_parseopt+0x44>
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d03f      	beq.n	801115a <tcp_parseopt+0xc2>
 80110da:	e026      	b.n	801112a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80110dc:	f7ff ffa6 	bl	801102c <tcp_get_next_optbyte>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b04      	cmp	r3, #4
 80110e4:	d13b      	bne.n	801115e <tcp_parseopt+0xc6>
 80110e6:	4b25      	ldr	r3, [pc, #148]	; (801117c <tcp_parseopt+0xe4>)
 80110e8:	881b      	ldrh	r3, [r3, #0]
 80110ea:	3302      	adds	r3, #2
 80110ec:	4a22      	ldr	r2, [pc, #136]	; (8011178 <tcp_parseopt+0xe0>)
 80110ee:	8812      	ldrh	r2, [r2, #0]
 80110f0:	4293      	cmp	r3, r2
 80110f2:	dc34      	bgt.n	801115e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80110f4:	f7ff ff9a 	bl	801102c <tcp_get_next_optbyte>
 80110f8:	4603      	mov	r3, r0
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	021b      	lsls	r3, r3, #8
 80110fe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011100:	f7ff ff94 	bl	801102c <tcp_get_next_optbyte>
 8011104:	4603      	mov	r3, r0
 8011106:	b29a      	uxth	r2, r3
 8011108:	89bb      	ldrh	r3, [r7, #12]
 801110a:	4313      	orrs	r3, r2
 801110c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801110e:	89bb      	ldrh	r3, [r7, #12]
 8011110:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011114:	d804      	bhi.n	8011120 <tcp_parseopt+0x88>
 8011116:	89bb      	ldrh	r3, [r7, #12]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d001      	beq.n	8011120 <tcp_parseopt+0x88>
 801111c:	89ba      	ldrh	r2, [r7, #12]
 801111e:	e001      	b.n	8011124 <tcp_parseopt+0x8c>
 8011120:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011128:	e010      	b.n	801114c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801112a:	f7ff ff7f 	bl	801102c <tcp_get_next_optbyte>
 801112e:	4603      	mov	r3, r0
 8011130:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011132:	7afb      	ldrb	r3, [r7, #11]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d914      	bls.n	8011162 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011138:	7afb      	ldrb	r3, [r7, #11]
 801113a:	b29a      	uxth	r2, r3
 801113c:	4b0f      	ldr	r3, [pc, #60]	; (801117c <tcp_parseopt+0xe4>)
 801113e:	881b      	ldrh	r3, [r3, #0]
 8011140:	4413      	add	r3, r2
 8011142:	b29b      	uxth	r3, r3
 8011144:	3b02      	subs	r3, #2
 8011146:	b29a      	uxth	r2, r3
 8011148:	4b0c      	ldr	r3, [pc, #48]	; (801117c <tcp_parseopt+0xe4>)
 801114a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801114c:	4b0b      	ldr	r3, [pc, #44]	; (801117c <tcp_parseopt+0xe4>)
 801114e:	881a      	ldrh	r2, [r3, #0]
 8011150:	4b09      	ldr	r3, [pc, #36]	; (8011178 <tcp_parseopt+0xe0>)
 8011152:	881b      	ldrh	r3, [r3, #0]
 8011154:	429a      	cmp	r2, r3
 8011156:	d3b5      	bcc.n	80110c4 <tcp_parseopt+0x2c>
 8011158:	e004      	b.n	8011164 <tcp_parseopt+0xcc>
          return;
 801115a:	bf00      	nop
 801115c:	e002      	b.n	8011164 <tcp_parseopt+0xcc>
            return;
 801115e:	bf00      	nop
 8011160:	e000      	b.n	8011164 <tcp_parseopt+0xcc>
            return;
 8011162:	bf00      	nop
      }
    }
  }
}
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	080182d4 	.word	0x080182d4
 8011170:	08018738 	.word	0x08018738
 8011174:	08018320 	.word	0x08018320
 8011178:	200044f8 	.word	0x200044f8
 801117c:	20004500 	.word	0x20004500

08011180 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011180:	b480      	push	{r7}
 8011182:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011184:	4b05      	ldr	r3, [pc, #20]	; (801119c <tcp_trigger_input_pcb_close+0x1c>)
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	f043 0310 	orr.w	r3, r3, #16
 801118c:	b2da      	uxtb	r2, r3
 801118e:	4b03      	ldr	r3, [pc, #12]	; (801119c <tcp_trigger_input_pcb_close+0x1c>)
 8011190:	701a      	strb	r2, [r3, #0]
}
 8011192:	bf00      	nop
 8011194:	46bd      	mov	sp, r7
 8011196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119a:	4770      	bx	lr
 801119c:	20004511 	.word	0x20004511

080111a0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00a      	beq.n	80111c8 <tcp_route+0x28>
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	7a1b      	ldrb	r3, [r3, #8]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d006      	beq.n	80111c8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	7a1b      	ldrb	r3, [r3, #8]
 80111be:	4618      	mov	r0, r3
 80111c0:	f7fb f888 	bl	800c2d4 <netif_get_by_index>
 80111c4:	4603      	mov	r3, r0
 80111c6:	e003      	b.n	80111d0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f003 fb17 	bl	80147fc <ip4_route>
 80111ce:	4603      	mov	r3, r0
  }
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3710      	adds	r7, #16
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}

080111d8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80111d8:	b590      	push	{r4, r7, lr}
 80111da:	b087      	sub	sp, #28
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	4613      	mov	r3, r2
 80111e6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d105      	bne.n	80111fa <tcp_create_segment+0x22>
 80111ee:	4b44      	ldr	r3, [pc, #272]	; (8011300 <tcp_create_segment+0x128>)
 80111f0:	22a3      	movs	r2, #163	; 0xa3
 80111f2:	4944      	ldr	r1, [pc, #272]	; (8011304 <tcp_create_segment+0x12c>)
 80111f4:	4844      	ldr	r0, [pc, #272]	; (8011308 <tcp_create_segment+0x130>)
 80111f6:	f004 fe3d 	bl	8015e74 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d105      	bne.n	801120c <tcp_create_segment+0x34>
 8011200:	4b3f      	ldr	r3, [pc, #252]	; (8011300 <tcp_create_segment+0x128>)
 8011202:	22a4      	movs	r2, #164	; 0xa4
 8011204:	4941      	ldr	r1, [pc, #260]	; (801130c <tcp_create_segment+0x134>)
 8011206:	4840      	ldr	r0, [pc, #256]	; (8011308 <tcp_create_segment+0x130>)
 8011208:	f004 fe34 	bl	8015e74 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801120c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	b2db      	uxtb	r3, r3
 8011214:	f003 0304 	and.w	r3, r3, #4
 8011218:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801121a:	2003      	movs	r0, #3
 801121c:	f7fa fcf2 	bl	800bc04 <memp_malloc>
 8011220:	6138      	str	r0, [r7, #16]
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d104      	bne.n	8011232 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011228:	68b8      	ldr	r0, [r7, #8]
 801122a:	f7fb fbdd 	bl	800c9e8 <pbuf_free>
    return NULL;
 801122e:	2300      	movs	r3, #0
 8011230:	e061      	b.n	80112f6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011238:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	2200      	movs	r2, #0
 801123e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	68ba      	ldr	r2, [r7, #8]
 8011244:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	891a      	ldrh	r2, [r3, #8]
 801124a:	7dfb      	ldrb	r3, [r7, #23]
 801124c:	b29b      	uxth	r3, r3
 801124e:	429a      	cmp	r2, r3
 8011250:	d205      	bcs.n	801125e <tcp_create_segment+0x86>
 8011252:	4b2b      	ldr	r3, [pc, #172]	; (8011300 <tcp_create_segment+0x128>)
 8011254:	22b0      	movs	r2, #176	; 0xb0
 8011256:	492e      	ldr	r1, [pc, #184]	; (8011310 <tcp_create_segment+0x138>)
 8011258:	482b      	ldr	r0, [pc, #172]	; (8011308 <tcp_create_segment+0x130>)
 801125a:	f004 fe0b 	bl	8015e74 <iprintf>
  seg->len = p->tot_len - optlen;
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	891a      	ldrh	r2, [r3, #8]
 8011262:	7dfb      	ldrb	r3, [r7, #23]
 8011264:	b29b      	uxth	r3, r3
 8011266:	1ad3      	subs	r3, r2, r3
 8011268:	b29a      	uxth	r2, r3
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801126e:	2114      	movs	r1, #20
 8011270:	68b8      	ldr	r0, [r7, #8]
 8011272:	f7fb fb23 	bl	800c8bc <pbuf_add_header>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d004      	beq.n	8011286 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801127c:	6938      	ldr	r0, [r7, #16]
 801127e:	f7fc ffe1 	bl	800e244 <tcp_seg_free>
    return NULL;
 8011282:	2300      	movs	r3, #0
 8011284:	e037      	b.n	80112f6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	685a      	ldr	r2, [r3, #4]
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	8ada      	ldrh	r2, [r3, #22]
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	68dc      	ldr	r4, [r3, #12]
 8011298:	4610      	mov	r0, r2
 801129a:	f7f9 ffc7 	bl	800b22c <lwip_htons>
 801129e:	4603      	mov	r3, r0
 80112a0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	8b1a      	ldrh	r2, [r3, #24]
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	68dc      	ldr	r4, [r3, #12]
 80112aa:	4610      	mov	r0, r2
 80112ac:	f7f9 ffbe 	bl	800b22c <lwip_htons>
 80112b0:	4603      	mov	r3, r0
 80112b2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	68dc      	ldr	r4, [r3, #12]
 80112b8:	6838      	ldr	r0, [r7, #0]
 80112ba:	f7f9 ffcc 	bl	800b256 <lwip_htonl>
 80112be:	4603      	mov	r3, r0
 80112c0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80112c2:	7dfb      	ldrb	r3, [r7, #23]
 80112c4:	089b      	lsrs	r3, r3, #2
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	3305      	adds	r3, #5
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	031b      	lsls	r3, r3, #12
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	79fb      	ldrb	r3, [r7, #7]
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	4313      	orrs	r3, r2
 80112d8:	b29a      	uxth	r2, r3
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	68dc      	ldr	r4, [r3, #12]
 80112de:	4610      	mov	r0, r2
 80112e0:	f7f9 ffa4 	bl	800b22c <lwip_htons>
 80112e4:	4603      	mov	r3, r0
 80112e6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	2200      	movs	r2, #0
 80112ee:	749a      	strb	r2, [r3, #18]
 80112f0:	2200      	movs	r2, #0
 80112f2:	74da      	strb	r2, [r3, #19]
  return seg;
 80112f4:	693b      	ldr	r3, [r7, #16]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	371c      	adds	r7, #28
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd90      	pop	{r4, r7, pc}
 80112fe:	bf00      	nop
 8011300:	08018754 	.word	0x08018754
 8011304:	08018788 	.word	0x08018788
 8011308:	080187a8 	.word	0x080187a8
 801130c:	080187d0 	.word	0x080187d0
 8011310:	080187f4 	.word	0x080187f4

08011314 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b086      	sub	sp, #24
 8011318:	af00      	add	r7, sp, #0
 801131a:	607b      	str	r3, [r7, #4]
 801131c:	4603      	mov	r3, r0
 801131e:	73fb      	strb	r3, [r7, #15]
 8011320:	460b      	mov	r3, r1
 8011322:	81bb      	strh	r3, [r7, #12]
 8011324:	4613      	mov	r3, r2
 8011326:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011328:	89bb      	ldrh	r3, [r7, #12]
 801132a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d105      	bne.n	801133e <tcp_pbuf_prealloc+0x2a>
 8011332:	4b30      	ldr	r3, [pc, #192]	; (80113f4 <tcp_pbuf_prealloc+0xe0>)
 8011334:	22e8      	movs	r2, #232	; 0xe8
 8011336:	4930      	ldr	r1, [pc, #192]	; (80113f8 <tcp_pbuf_prealloc+0xe4>)
 8011338:	4830      	ldr	r0, [pc, #192]	; (80113fc <tcp_pbuf_prealloc+0xe8>)
 801133a:	f004 fd9b 	bl	8015e74 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801133e:	6a3b      	ldr	r3, [r7, #32]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d105      	bne.n	8011350 <tcp_pbuf_prealloc+0x3c>
 8011344:	4b2b      	ldr	r3, [pc, #172]	; (80113f4 <tcp_pbuf_prealloc+0xe0>)
 8011346:	22e9      	movs	r2, #233	; 0xe9
 8011348:	492d      	ldr	r1, [pc, #180]	; (8011400 <tcp_pbuf_prealloc+0xec>)
 801134a:	482c      	ldr	r0, [pc, #176]	; (80113fc <tcp_pbuf_prealloc+0xe8>)
 801134c:	f004 fd92 	bl	8015e74 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011350:	89ba      	ldrh	r2, [r7, #12]
 8011352:	897b      	ldrh	r3, [r7, #10]
 8011354:	429a      	cmp	r2, r3
 8011356:	d221      	bcs.n	801139c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011358:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801135c:	f003 0302 	and.w	r3, r3, #2
 8011360:	2b00      	cmp	r3, #0
 8011362:	d111      	bne.n	8011388 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011364:	6a3b      	ldr	r3, [r7, #32]
 8011366:	8b5b      	ldrh	r3, [r3, #26]
 8011368:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801136c:	2b00      	cmp	r3, #0
 801136e:	d115      	bne.n	801139c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011370:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011374:	2b00      	cmp	r3, #0
 8011376:	d007      	beq.n	8011388 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011378:	6a3b      	ldr	r3, [r7, #32]
 801137a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801137c:	2b00      	cmp	r3, #0
 801137e:	d103      	bne.n	8011388 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011380:	6a3b      	ldr	r3, [r7, #32]
 8011382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011384:	2b00      	cmp	r3, #0
 8011386:	d009      	beq.n	801139c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011388:	89bb      	ldrh	r3, [r7, #12]
 801138a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801138e:	f023 0203 	bic.w	r2, r3, #3
 8011392:	897b      	ldrh	r3, [r7, #10]
 8011394:	4293      	cmp	r3, r2
 8011396:	bf28      	it	cs
 8011398:	4613      	movcs	r3, r2
 801139a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801139c:	8af9      	ldrh	r1, [r7, #22]
 801139e:	7bfb      	ldrb	r3, [r7, #15]
 80113a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7fb f83f 	bl	800c428 <pbuf_alloc>
 80113aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d101      	bne.n	80113b6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80113b2:	2300      	movs	r3, #0
 80113b4:	e019      	b.n	80113ea <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d006      	beq.n	80113cc <tcp_pbuf_prealloc+0xb8>
 80113be:	4b0d      	ldr	r3, [pc, #52]	; (80113f4 <tcp_pbuf_prealloc+0xe0>)
 80113c0:	f240 120b 	movw	r2, #267	; 0x10b
 80113c4:	490f      	ldr	r1, [pc, #60]	; (8011404 <tcp_pbuf_prealloc+0xf0>)
 80113c6:	480d      	ldr	r0, [pc, #52]	; (80113fc <tcp_pbuf_prealloc+0xe8>)
 80113c8:	f004 fd54 	bl	8015e74 <iprintf>
  *oversize = p->len - length;
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	895a      	ldrh	r2, [r3, #10]
 80113d0:	89bb      	ldrh	r3, [r7, #12]
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	89ba      	ldrh	r2, [r7, #12]
 80113de:	811a      	strh	r2, [r3, #8]
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	891a      	ldrh	r2, [r3, #8]
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	815a      	strh	r2, [r3, #10]
  return p;
 80113e8:	693b      	ldr	r3, [r7, #16]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3718      	adds	r7, #24
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	08018754 	.word	0x08018754
 80113f8:	0801880c 	.word	0x0801880c
 80113fc:	080187a8 	.word	0x080187a8
 8011400:	08018830 	.word	0x08018830
 8011404:	08018850 	.word	0x08018850

08011408 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	460b      	mov	r3, r1
 8011412:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d106      	bne.n	8011428 <tcp_write_checks+0x20>
 801141a:	4b33      	ldr	r3, [pc, #204]	; (80114e8 <tcp_write_checks+0xe0>)
 801141c:	f240 1233 	movw	r2, #307	; 0x133
 8011420:	4932      	ldr	r1, [pc, #200]	; (80114ec <tcp_write_checks+0xe4>)
 8011422:	4833      	ldr	r0, [pc, #204]	; (80114f0 <tcp_write_checks+0xe8>)
 8011424:	f004 fd26 	bl	8015e74 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	7d1b      	ldrb	r3, [r3, #20]
 801142c:	2b04      	cmp	r3, #4
 801142e:	d00e      	beq.n	801144e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011434:	2b07      	cmp	r3, #7
 8011436:	d00a      	beq.n	801144e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801143c:	2b02      	cmp	r3, #2
 801143e:	d006      	beq.n	801144e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011444:	2b03      	cmp	r3, #3
 8011446:	d002      	beq.n	801144e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011448:	f06f 030a 	mvn.w	r3, #10
 801144c:	e048      	b.n	80114e0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801144e:	887b      	ldrh	r3, [r7, #2]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d101      	bne.n	8011458 <tcp_write_checks+0x50>
    return ERR_OK;
 8011454:	2300      	movs	r3, #0
 8011456:	e043      	b.n	80114e0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801145e:	887a      	ldrh	r2, [r7, #2]
 8011460:	429a      	cmp	r2, r3
 8011462:	d909      	bls.n	8011478 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	8b5b      	ldrh	r3, [r3, #26]
 8011468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801146c:	b29a      	uxth	r2, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011476:	e033      	b.n	80114e0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801147e:	2b08      	cmp	r3, #8
 8011480:	d909      	bls.n	8011496 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	8b5b      	ldrh	r3, [r3, #26]
 8011486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801148a:	b29a      	uxth	r2, r3
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011494:	e024      	b.n	80114e0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00f      	beq.n	80114c0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d11a      	bne.n	80114de <tcp_write_checks+0xd6>
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d116      	bne.n	80114de <tcp_write_checks+0xd6>
 80114b0:	4b0d      	ldr	r3, [pc, #52]	; (80114e8 <tcp_write_checks+0xe0>)
 80114b2:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80114b6:	490f      	ldr	r1, [pc, #60]	; (80114f4 <tcp_write_checks+0xec>)
 80114b8:	480d      	ldr	r0, [pc, #52]	; (80114f0 <tcp_write_checks+0xe8>)
 80114ba:	f004 fcdb 	bl	8015e74 <iprintf>
 80114be:	e00e      	b.n	80114de <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d103      	bne.n	80114d0 <tcp_write_checks+0xc8>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d006      	beq.n	80114de <tcp_write_checks+0xd6>
 80114d0:	4b05      	ldr	r3, [pc, #20]	; (80114e8 <tcp_write_checks+0xe0>)
 80114d2:	f240 1259 	movw	r2, #345	; 0x159
 80114d6:	4908      	ldr	r1, [pc, #32]	; (80114f8 <tcp_write_checks+0xf0>)
 80114d8:	4805      	ldr	r0, [pc, #20]	; (80114f0 <tcp_write_checks+0xe8>)
 80114da:	f004 fccb 	bl	8015e74 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80114de:	2300      	movs	r3, #0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}
 80114e8:	08018754 	.word	0x08018754
 80114ec:	08018864 	.word	0x08018864
 80114f0:	080187a8 	.word	0x080187a8
 80114f4:	08018884 	.word	0x08018884
 80114f8:	080188c0 	.word	0x080188c0

080114fc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80114fc:	b590      	push	{r4, r7, lr}
 80114fe:	b09b      	sub	sp, #108	; 0x6c
 8011500:	af04      	add	r7, sp, #16
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	4611      	mov	r1, r2
 8011508:	461a      	mov	r2, r3
 801150a:	460b      	mov	r3, r1
 801150c:	80fb      	strh	r3, [r7, #6]
 801150e:	4613      	mov	r3, r2
 8011510:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011512:	2300      	movs	r3, #0
 8011514:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011516:	2300      	movs	r3, #0
 8011518:	653b      	str	r3, [r7, #80]	; 0x50
 801151a:	2300      	movs	r3, #0
 801151c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801151e:	2300      	movs	r3, #0
 8011520:	64bb      	str	r3, [r7, #72]	; 0x48
 8011522:	2300      	movs	r3, #0
 8011524:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011526:	2300      	movs	r3, #0
 8011528:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801152c:	2300      	movs	r3, #0
 801152e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011532:	2300      	movs	r3, #0
 8011534:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011536:	2300      	movs	r3, #0
 8011538:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d109      	bne.n	8011558 <tcp_write+0x5c>
 8011544:	4ba5      	ldr	r3, [pc, #660]	; (80117dc <tcp_write+0x2e0>)
 8011546:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801154a:	49a5      	ldr	r1, [pc, #660]	; (80117e0 <tcp_write+0x2e4>)
 801154c:	48a5      	ldr	r0, [pc, #660]	; (80117e4 <tcp_write+0x2e8>)
 801154e:	f004 fc91 	bl	8015e74 <iprintf>
 8011552:	f06f 030f 	mvn.w	r3, #15
 8011556:	e32c      	b.n	8011bb2 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801155e:	085b      	lsrs	r3, r3, #1
 8011560:	b29a      	uxth	r2, r3
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011566:	4293      	cmp	r3, r2
 8011568:	bf28      	it	cs
 801156a:	4613      	movcs	r3, r2
 801156c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801156e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011570:	2b00      	cmp	r3, #0
 8011572:	d102      	bne.n	801157a <tcp_write+0x7e>
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011578:	e000      	b.n	801157c <tcp_write+0x80>
 801157a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801157c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d109      	bne.n	8011598 <tcp_write+0x9c>
 8011584:	4b95      	ldr	r3, [pc, #596]	; (80117dc <tcp_write+0x2e0>)
 8011586:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801158a:	4997      	ldr	r1, [pc, #604]	; (80117e8 <tcp_write+0x2ec>)
 801158c:	4895      	ldr	r0, [pc, #596]	; (80117e4 <tcp_write+0x2e8>)
 801158e:	f004 fc71 	bl	8015e74 <iprintf>
 8011592:	f06f 030f 	mvn.w	r3, #15
 8011596:	e30c      	b.n	8011bb2 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011598:	88fb      	ldrh	r3, [r7, #6]
 801159a:	4619      	mov	r1, r3
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f7ff ff33 	bl	8011408 <tcp_write_checks>
 80115a2:	4603      	mov	r3, r0
 80115a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80115a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d002      	beq.n	80115b6 <tcp_write+0xba>
    return err;
 80115b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80115b4:	e2fd      	b.n	8011bb2 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80115c0:	2300      	movs	r3, #0
 80115c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	f000 80f7 	beq.w	80117be <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115d4:	653b      	str	r3, [r7, #80]	; 0x50
 80115d6:	e002      	b.n	80115de <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80115d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d1f8      	bne.n	80115d8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80115e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115e8:	7a9b      	ldrb	r3, [r3, #10]
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	f003 0304 	and.w	r3, r3, #4
 80115f2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80115f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80115f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115f8:	891b      	ldrh	r3, [r3, #8]
 80115fa:	4619      	mov	r1, r3
 80115fc:	8c3b      	ldrh	r3, [r7, #32]
 80115fe:	440b      	add	r3, r1
 8011600:	429a      	cmp	r2, r3
 8011602:	da06      	bge.n	8011612 <tcp_write+0x116>
 8011604:	4b75      	ldr	r3, [pc, #468]	; (80117dc <tcp_write+0x2e0>)
 8011606:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801160a:	4978      	ldr	r1, [pc, #480]	; (80117ec <tcp_write+0x2f0>)
 801160c:	4875      	ldr	r0, [pc, #468]	; (80117e4 <tcp_write+0x2e8>)
 801160e:	f004 fc31 	bl	8015e74 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011614:	891a      	ldrh	r2, [r3, #8]
 8011616:	8c3b      	ldrh	r3, [r7, #32]
 8011618:	4413      	add	r3, r2
 801161a:	b29b      	uxth	r3, r3
 801161c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011628:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801162a:	8a7b      	ldrh	r3, [r7, #18]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d027      	beq.n	8011680 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011630:	8a7b      	ldrh	r3, [r7, #18]
 8011632:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011634:	429a      	cmp	r2, r3
 8011636:	d206      	bcs.n	8011646 <tcp_write+0x14a>
 8011638:	4b68      	ldr	r3, [pc, #416]	; (80117dc <tcp_write+0x2e0>)
 801163a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801163e:	496c      	ldr	r1, [pc, #432]	; (80117f0 <tcp_write+0x2f4>)
 8011640:	4868      	ldr	r0, [pc, #416]	; (80117e4 <tcp_write+0x2e8>)
 8011642:	f004 fc17 	bl	8015e74 <iprintf>
      seg = last_unsent;
 8011646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011648:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801164a:	8a7b      	ldrh	r3, [r7, #18]
 801164c:	88fa      	ldrh	r2, [r7, #6]
 801164e:	429a      	cmp	r2, r3
 8011650:	d901      	bls.n	8011656 <tcp_write+0x15a>
 8011652:	8a7b      	ldrh	r3, [r7, #18]
 8011654:	e000      	b.n	8011658 <tcp_write+0x15c>
 8011656:	88fb      	ldrh	r3, [r7, #6]
 8011658:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801165a:	4293      	cmp	r3, r2
 801165c:	bfa8      	it	ge
 801165e:	4613      	movge	r3, r2
 8011660:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011662:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011666:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011668:	4413      	add	r3, r2
 801166a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801166e:	8a7a      	ldrh	r2, [r7, #18]
 8011670:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011672:	1ad3      	subs	r3, r2, r3
 8011674:	b29b      	uxth	r3, r3
 8011676:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011678:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801167a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011680:	8a7b      	ldrh	r3, [r7, #18]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00b      	beq.n	801169e <tcp_write+0x1a2>
 8011686:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801168a:	88fb      	ldrh	r3, [r7, #6]
 801168c:	429a      	cmp	r2, r3
 801168e:	d006      	beq.n	801169e <tcp_write+0x1a2>
 8011690:	4b52      	ldr	r3, [pc, #328]	; (80117dc <tcp_write+0x2e0>)
 8011692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011696:	4957      	ldr	r1, [pc, #348]	; (80117f4 <tcp_write+0x2f8>)
 8011698:	4852      	ldr	r0, [pc, #328]	; (80117e4 <tcp_write+0x2e8>)
 801169a:	f004 fbeb 	bl	8015e74 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801169e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80116a2:	88fb      	ldrh	r3, [r7, #6]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	f080 8168 	bcs.w	801197a <tcp_write+0x47e>
 80116aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f000 8164 	beq.w	801197a <tcp_write+0x47e>
 80116b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116b4:	891b      	ldrh	r3, [r3, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f000 815f 	beq.w	801197a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80116bc:	88fa      	ldrh	r2, [r7, #6]
 80116be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116c2:	1ad2      	subs	r2, r2, r3
 80116c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80116c6:	4293      	cmp	r3, r2
 80116c8:	bfa8      	it	ge
 80116ca:	4613      	movge	r3, r2
 80116cc:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80116ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80116d2:	797b      	ldrb	r3, [r7, #5]
 80116d4:	f003 0301 	and.w	r3, r3, #1
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d027      	beq.n	801172c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80116dc:	f107 0012 	add.w	r0, r7, #18
 80116e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80116e2:	8bf9      	ldrh	r1, [r7, #30]
 80116e4:	2301      	movs	r3, #1
 80116e6:	9302      	str	r3, [sp, #8]
 80116e8:	797b      	ldrb	r3, [r7, #5]
 80116ea:	9301      	str	r3, [sp, #4]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	9300      	str	r3, [sp, #0]
 80116f0:	4603      	mov	r3, r0
 80116f2:	2000      	movs	r0, #0
 80116f4:	f7ff fe0e 	bl	8011314 <tcp_pbuf_prealloc>
 80116f8:	6578      	str	r0, [r7, #84]	; 0x54
 80116fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f000 8226 	beq.w	8011b4e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011704:	6858      	ldr	r0, [r3, #4]
 8011706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801170a:	68ba      	ldr	r2, [r7, #8]
 801170c:	4413      	add	r3, r2
 801170e:	8bfa      	ldrh	r2, [r7, #30]
 8011710:	4619      	mov	r1, r3
 8011712:	f004 fb9c 	bl	8015e4e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011716:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011718:	f7fb f9f4 	bl	800cb04 <pbuf_clen>
 801171c:	4603      	mov	r3, r0
 801171e:	461a      	mov	r2, r3
 8011720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011724:	4413      	add	r3, r2
 8011726:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801172a:	e041      	b.n	80117b0 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801172c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	637b      	str	r3, [r7, #52]	; 0x34
 8011732:	e002      	b.n	801173a <tcp_write+0x23e>
 8011734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	637b      	str	r3, [r7, #52]	; 0x34
 801173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1f8      	bne.n	8011734 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011744:	7b1b      	ldrb	r3, [r3, #12]
 8011746:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801174a:	2b00      	cmp	r3, #0
 801174c:	d115      	bne.n	801177a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011754:	8952      	ldrh	r2, [r2, #10]
 8011756:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011758:	68ba      	ldr	r2, [r7, #8]
 801175a:	429a      	cmp	r2, r3
 801175c:	d10d      	bne.n	801177a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801175e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011762:	2b00      	cmp	r3, #0
 8011764:	d006      	beq.n	8011774 <tcp_write+0x278>
 8011766:	4b1d      	ldr	r3, [pc, #116]	; (80117dc <tcp_write+0x2e0>)
 8011768:	f240 2231 	movw	r2, #561	; 0x231
 801176c:	4922      	ldr	r1, [pc, #136]	; (80117f8 <tcp_write+0x2fc>)
 801176e:	481d      	ldr	r0, [pc, #116]	; (80117e4 <tcp_write+0x2e8>)
 8011770:	f004 fb80 	bl	8015e74 <iprintf>
          extendlen = seglen;
 8011774:	8bfb      	ldrh	r3, [r7, #30]
 8011776:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011778:	e01a      	b.n	80117b0 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801177a:	8bfb      	ldrh	r3, [r7, #30]
 801177c:	2201      	movs	r2, #1
 801177e:	4619      	mov	r1, r3
 8011780:	2000      	movs	r0, #0
 8011782:	f7fa fe51 	bl	800c428 <pbuf_alloc>
 8011786:	6578      	str	r0, [r7, #84]	; 0x54
 8011788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801178a:	2b00      	cmp	r3, #0
 801178c:	f000 81e1 	beq.w	8011b52 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011790:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011794:	68ba      	ldr	r2, [r7, #8]
 8011796:	441a      	add	r2, r3
 8011798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801179a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801179c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801179e:	f7fb f9b1 	bl	800cb04 <pbuf_clen>
 80117a2:	4603      	mov	r3, r0
 80117a4:	461a      	mov	r2, r3
 80117a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80117aa:	4413      	add	r3, r2
 80117ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80117b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80117b4:	8bfb      	ldrh	r3, [r7, #30]
 80117b6:	4413      	add	r3, r2
 80117b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80117bc:	e0dd      	b.n	801197a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	f000 80d8 	beq.w	801197a <tcp_write+0x47e>
 80117ca:	4b04      	ldr	r3, [pc, #16]	; (80117dc <tcp_write+0x2e0>)
 80117cc:	f240 224b 	movw	r2, #587	; 0x24b
 80117d0:	490a      	ldr	r1, [pc, #40]	; (80117fc <tcp_write+0x300>)
 80117d2:	4804      	ldr	r0, [pc, #16]	; (80117e4 <tcp_write+0x2e8>)
 80117d4:	f004 fb4e 	bl	8015e74 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80117d8:	e0cf      	b.n	801197a <tcp_write+0x47e>
 80117da:	bf00      	nop
 80117dc:	08018754 	.word	0x08018754
 80117e0:	080188f4 	.word	0x080188f4
 80117e4:	080187a8 	.word	0x080187a8
 80117e8:	0801890c 	.word	0x0801890c
 80117ec:	08018940 	.word	0x08018940
 80117f0:	08018958 	.word	0x08018958
 80117f4:	08018978 	.word	0x08018978
 80117f8:	08018998 	.word	0x08018998
 80117fc:	080189c4 	.word	0x080189c4
    struct pbuf *p;
    u16_t left = len - pos;
 8011800:	88fa      	ldrh	r2, [r7, #6]
 8011802:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801180a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801180e:	b29b      	uxth	r3, r3
 8011810:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011812:	1ad3      	subs	r3, r2, r3
 8011814:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011816:	8b7a      	ldrh	r2, [r7, #26]
 8011818:	8bbb      	ldrh	r3, [r7, #28]
 801181a:	4293      	cmp	r3, r2
 801181c:	bf28      	it	cs
 801181e:	4613      	movcs	r3, r2
 8011820:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011822:	797b      	ldrb	r3, [r7, #5]
 8011824:	f003 0301 	and.w	r3, r3, #1
 8011828:	2b00      	cmp	r3, #0
 801182a:	d036      	beq.n	801189a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801182c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011830:	b29a      	uxth	r2, r3
 8011832:	8b3b      	ldrh	r3, [r7, #24]
 8011834:	4413      	add	r3, r2
 8011836:	b299      	uxth	r1, r3
 8011838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801183a:	2b00      	cmp	r3, #0
 801183c:	bf0c      	ite	eq
 801183e:	2301      	moveq	r3, #1
 8011840:	2300      	movne	r3, #0
 8011842:	b2db      	uxtb	r3, r3
 8011844:	f107 0012 	add.w	r0, r7, #18
 8011848:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801184a:	9302      	str	r3, [sp, #8]
 801184c:	797b      	ldrb	r3, [r7, #5]
 801184e:	9301      	str	r3, [sp, #4]
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	9300      	str	r3, [sp, #0]
 8011854:	4603      	mov	r3, r0
 8011856:	2036      	movs	r0, #54	; 0x36
 8011858:	f7ff fd5c 	bl	8011314 <tcp_pbuf_prealloc>
 801185c:	6338      	str	r0, [r7, #48]	; 0x30
 801185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011860:	2b00      	cmp	r3, #0
 8011862:	f000 8178 	beq.w	8011b56 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011868:	895b      	ldrh	r3, [r3, #10]
 801186a:	8b3a      	ldrh	r2, [r7, #24]
 801186c:	429a      	cmp	r2, r3
 801186e:	d906      	bls.n	801187e <tcp_write+0x382>
 8011870:	4b8c      	ldr	r3, [pc, #560]	; (8011aa4 <tcp_write+0x5a8>)
 8011872:	f240 2267 	movw	r2, #615	; 0x267
 8011876:	498c      	ldr	r1, [pc, #560]	; (8011aa8 <tcp_write+0x5ac>)
 8011878:	488c      	ldr	r0, [pc, #560]	; (8011aac <tcp_write+0x5b0>)
 801187a:	f004 fafb 	bl	8015e74 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011880:	685a      	ldr	r2, [r3, #4]
 8011882:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011886:	18d0      	adds	r0, r2, r3
 8011888:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801188c:	68ba      	ldr	r2, [r7, #8]
 801188e:	4413      	add	r3, r2
 8011890:	8b3a      	ldrh	r2, [r7, #24]
 8011892:	4619      	mov	r1, r3
 8011894:	f004 fadb 	bl	8015e4e <memcpy>
 8011898:	e02f      	b.n	80118fa <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801189a:	8a7b      	ldrh	r3, [r7, #18]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d006      	beq.n	80118ae <tcp_write+0x3b2>
 80118a0:	4b80      	ldr	r3, [pc, #512]	; (8011aa4 <tcp_write+0x5a8>)
 80118a2:	f240 2271 	movw	r2, #625	; 0x271
 80118a6:	4982      	ldr	r1, [pc, #520]	; (8011ab0 <tcp_write+0x5b4>)
 80118a8:	4880      	ldr	r0, [pc, #512]	; (8011aac <tcp_write+0x5b0>)
 80118aa:	f004 fae3 	bl	8015e74 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80118ae:	8b3b      	ldrh	r3, [r7, #24]
 80118b0:	2201      	movs	r2, #1
 80118b2:	4619      	mov	r1, r3
 80118b4:	2036      	movs	r0, #54	; 0x36
 80118b6:	f7fa fdb7 	bl	800c428 <pbuf_alloc>
 80118ba:	6178      	str	r0, [r7, #20]
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	f000 814b 	beq.w	8011b5a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80118c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80118c8:	68ba      	ldr	r2, [r7, #8]
 80118ca:	441a      	add	r2, r3
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80118d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80118da:	4619      	mov	r1, r3
 80118dc:	2036      	movs	r0, #54	; 0x36
 80118de:	f7fa fda3 	bl	800c428 <pbuf_alloc>
 80118e2:	6338      	str	r0, [r7, #48]	; 0x30
 80118e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d103      	bne.n	80118f2 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80118ea:	6978      	ldr	r0, [r7, #20]
 80118ec:	f7fb f87c 	bl	800c9e8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80118f0:	e136      	b.n	8011b60 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80118f2:	6979      	ldr	r1, [r7, #20]
 80118f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118f6:	f7fb f945 	bl	800cb84 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80118fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118fc:	f7fb f902 	bl	800cb04 <pbuf_clen>
 8011900:	4603      	mov	r3, r0
 8011902:	461a      	mov	r2, r3
 8011904:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011908:	4413      	add	r3, r2
 801190a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801190e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011912:	2b09      	cmp	r3, #9
 8011914:	d903      	bls.n	801191e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011918:	f7fb f866 	bl	800c9e8 <pbuf_free>
      goto memerr;
 801191c:	e120      	b.n	8011b60 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011922:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011926:	441a      	add	r2, r3
 8011928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801192c:	9300      	str	r3, [sp, #0]
 801192e:	4613      	mov	r3, r2
 8011930:	2200      	movs	r2, #0
 8011932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f7ff fc4f 	bl	80111d8 <tcp_create_segment>
 801193a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801193c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801193e:	2b00      	cmp	r3, #0
 8011940:	f000 810d 	beq.w	8011b5e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011946:	2b00      	cmp	r3, #0
 8011948:	d102      	bne.n	8011950 <tcp_write+0x454>
      queue = seg;
 801194a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801194c:	647b      	str	r3, [r7, #68]	; 0x44
 801194e:	e00c      	b.n	801196a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <tcp_write+0x468>
 8011956:	4b53      	ldr	r3, [pc, #332]	; (8011aa4 <tcp_write+0x5a8>)
 8011958:	f240 22ab 	movw	r2, #683	; 0x2ab
 801195c:	4955      	ldr	r1, [pc, #340]	; (8011ab4 <tcp_write+0x5b8>)
 801195e:	4853      	ldr	r0, [pc, #332]	; (8011aac <tcp_write+0x5b0>)
 8011960:	f004 fa88 	bl	8015e74 <iprintf>
      prev_seg->next = seg;
 8011964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011968:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801196a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801196c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801196e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011972:	8b3b      	ldrh	r3, [r7, #24]
 8011974:	4413      	add	r3, r2
 8011976:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801197a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801197e:	88fb      	ldrh	r3, [r7, #6]
 8011980:	429a      	cmp	r2, r3
 8011982:	f4ff af3d 	bcc.w	8011800 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011986:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011988:	2b00      	cmp	r3, #0
 801198a:	d02c      	beq.n	80119e6 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801198c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011992:	e01e      	b.n	80119d2 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011996:	891a      	ldrh	r2, [r3, #8]
 8011998:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801199a:	4413      	add	r3, r2
 801199c:	b29a      	uxth	r2, r3
 801199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d110      	bne.n	80119cc <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80119aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119b0:	8952      	ldrh	r2, [r2, #10]
 80119b2:	4413      	add	r3, r2
 80119b4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80119b6:	68b9      	ldr	r1, [r7, #8]
 80119b8:	4618      	mov	r0, r3
 80119ba:	f004 fa48 	bl	8015e4e <memcpy>
        p->len += oversize_used;
 80119be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c0:	895a      	ldrh	r2, [r3, #10]
 80119c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119c4:	4413      	add	r3, r2
 80119c6:	b29a      	uxth	r2, r3
 80119c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ca:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80119cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d1dd      	bne.n	8011994 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80119d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119da:	891a      	ldrh	r2, [r3, #8]
 80119dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80119de:	4413      	add	r3, r2
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119e4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80119e6:	8a7a      	ldrh	r2, [r7, #18]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80119ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d018      	beq.n	8011a26 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80119f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d106      	bne.n	8011a08 <tcp_write+0x50c>
 80119fa:	4b2a      	ldr	r3, [pc, #168]	; (8011aa4 <tcp_write+0x5a8>)
 80119fc:	f240 22e1 	movw	r2, #737	; 0x2e1
 8011a00:	492d      	ldr	r1, [pc, #180]	; (8011ab8 <tcp_write+0x5bc>)
 8011a02:	482a      	ldr	r0, [pc, #168]	; (8011aac <tcp_write+0x5b0>)
 8011a04:	f004 fa36 	bl	8015e74 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7fb f8b8 	bl	800cb84 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a16:	891a      	ldrh	r2, [r3, #8]
 8011a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a1a:	891b      	ldrh	r3, [r3, #8]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a22:	811a      	strh	r2, [r3, #8]
 8011a24:	e037      	b.n	8011a96 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8011a26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d034      	beq.n	8011a96 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d003      	beq.n	8011a3a <tcp_write+0x53e>
 8011a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d106      	bne.n	8011a48 <tcp_write+0x54c>
 8011a3a:	4b1a      	ldr	r3, [pc, #104]	; (8011aa4 <tcp_write+0x5a8>)
 8011a3c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011a40:	491e      	ldr	r1, [pc, #120]	; (8011abc <tcp_write+0x5c0>)
 8011a42:	481a      	ldr	r0, [pc, #104]	; (8011aac <tcp_write+0x5b0>)
 8011a44:	f004 fa16 	bl	8015e74 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a4e:	e009      	b.n	8011a64 <tcp_write+0x568>
      p->tot_len += extendlen;
 8011a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a52:	891a      	ldrh	r2, [r3, #8]
 8011a54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a56:	4413      	add	r3, r2
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a5c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d1f1      	bne.n	8011a50 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6e:	891a      	ldrh	r2, [r3, #8]
 8011a70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a72:	4413      	add	r3, r2
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a78:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7c:	895a      	ldrh	r2, [r3, #10]
 8011a7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a80:	4413      	add	r3, r2
 8011a82:	b29a      	uxth	r2, r3
 8011a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a86:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a8a:	891a      	ldrh	r2, [r3, #8]
 8011a8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a8e:	4413      	add	r3, r2
 8011a90:	b29a      	uxth	r2, r3
 8011a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a94:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d111      	bne.n	8011ac0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011aa0:	66da      	str	r2, [r3, #108]	; 0x6c
 8011aa2:	e010      	b.n	8011ac6 <tcp_write+0x5ca>
 8011aa4:	08018754 	.word	0x08018754
 8011aa8:	080189f4 	.word	0x080189f4
 8011aac:	080187a8 	.word	0x080187a8
 8011ab0:	08018a34 	.word	0x08018a34
 8011ab4:	08018a44 	.word	0x08018a44
 8011ab8:	08018a58 	.word	0x08018a58
 8011abc:	08018a90 	.word	0x08018a90
  } else {
    last_unsent->next = queue;
 8011ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ac4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011aca:	88fb      	ldrh	r3, [r7, #6]
 8011acc:	441a      	add	r2, r3
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011ad8:	88fb      	ldrh	r3, [r7, #6]
 8011ada:	1ad3      	subs	r3, r2, r3
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011aea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00e      	beq.n	8011b16 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d10a      	bne.n	8011b16 <tcp_write+0x61a>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d106      	bne.n	8011b16 <tcp_write+0x61a>
 8011b08:	4b2c      	ldr	r3, [pc, #176]	; (8011bbc <tcp_write+0x6c0>)
 8011b0a:	f240 3213 	movw	r2, #787	; 0x313
 8011b0e:	492c      	ldr	r1, [pc, #176]	; (8011bc0 <tcp_write+0x6c4>)
 8011b10:	482c      	ldr	r0, [pc, #176]	; (8011bc4 <tcp_write+0x6c8>)
 8011b12:	f004 f9af 	bl	8015e74 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d016      	beq.n	8011b4a <tcp_write+0x64e>
 8011b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d012      	beq.n	8011b4a <tcp_write+0x64e>
 8011b24:	797b      	ldrb	r3, [r7, #5]
 8011b26:	f003 0302 	and.w	r3, r3, #2
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d10d      	bne.n	8011b4a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	899b      	ldrh	r3, [r3, #12]
 8011b34:	b29c      	uxth	r4, r3
 8011b36:	2008      	movs	r0, #8
 8011b38:	f7f9 fb78 	bl	800b22c <lwip_htons>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	461a      	mov	r2, r3
 8011b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	4322      	orrs	r2, r4
 8011b46:	b292      	uxth	r2, r2
 8011b48:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	e031      	b.n	8011bb2 <tcp_write+0x6b6>
          goto memerr;
 8011b4e:	bf00      	nop
 8011b50:	e006      	b.n	8011b60 <tcp_write+0x664>
            goto memerr;
 8011b52:	bf00      	nop
 8011b54:	e004      	b.n	8011b60 <tcp_write+0x664>
        goto memerr;
 8011b56:	bf00      	nop
 8011b58:	e002      	b.n	8011b60 <tcp_write+0x664>
        goto memerr;
 8011b5a:	bf00      	nop
 8011b5c:	e000      	b.n	8011b60 <tcp_write+0x664>
      goto memerr;
 8011b5e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	8b5b      	ldrh	r3, [r3, #26]
 8011b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d002      	beq.n	8011b7a <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011b74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011b76:	f7fa ff37 	bl	800c9e8 <pbuf_free>
  }
  if (queue != NULL) {
 8011b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d002      	beq.n	8011b86 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8011b80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011b82:	f7fc fb4b 	bl	800e21c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d00e      	beq.n	8011bae <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d10a      	bne.n	8011bae <tcp_write+0x6b2>
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d106      	bne.n	8011bae <tcp_write+0x6b2>
 8011ba0:	4b06      	ldr	r3, [pc, #24]	; (8011bbc <tcp_write+0x6c0>)
 8011ba2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8011ba6:	4906      	ldr	r1, [pc, #24]	; (8011bc0 <tcp_write+0x6c4>)
 8011ba8:	4806      	ldr	r0, [pc, #24]	; (8011bc4 <tcp_write+0x6c8>)
 8011baa:	f004 f963 	bl	8015e74 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	375c      	adds	r7, #92	; 0x5c
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd90      	pop	{r4, r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	08018754 	.word	0x08018754
 8011bc0:	08018ac8 	.word	0x08018ac8
 8011bc4:	080187a8 	.word	0x080187a8

08011bc8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011bc8:	b590      	push	{r4, r7, lr}
 8011bca:	b08b      	sub	sp, #44	; 0x2c
 8011bcc:	af02      	add	r7, sp, #8
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	61fb      	str	r3, [r7, #28]
 8011bd8:	2300      	movs	r3, #0
 8011bda:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d106      	bne.n	8011bf4 <tcp_split_unsent_seg+0x2c>
 8011be6:	4b95      	ldr	r3, [pc, #596]	; (8011e3c <tcp_split_unsent_seg+0x274>)
 8011be8:	f240 324b 	movw	r2, #843	; 0x34b
 8011bec:	4994      	ldr	r1, [pc, #592]	; (8011e40 <tcp_split_unsent_seg+0x278>)
 8011bee:	4895      	ldr	r0, [pc, #596]	; (8011e44 <tcp_split_unsent_seg+0x27c>)
 8011bf0:	f004 f940 	bl	8015e74 <iprintf>

  useg = pcb->unsent;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bf8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d102      	bne.n	8011c06 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c04:	e116      	b.n	8011e34 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011c06:	887b      	ldrh	r3, [r7, #2]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d109      	bne.n	8011c20 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011c0c:	4b8b      	ldr	r3, [pc, #556]	; (8011e3c <tcp_split_unsent_seg+0x274>)
 8011c0e:	f240 3253 	movw	r2, #851	; 0x353
 8011c12:	498d      	ldr	r1, [pc, #564]	; (8011e48 <tcp_split_unsent_seg+0x280>)
 8011c14:	488b      	ldr	r0, [pc, #556]	; (8011e44 <tcp_split_unsent_seg+0x27c>)
 8011c16:	f004 f92d 	bl	8015e74 <iprintf>
    return ERR_VAL;
 8011c1a:	f06f 0305 	mvn.w	r3, #5
 8011c1e:	e109      	b.n	8011e34 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	891b      	ldrh	r3, [r3, #8]
 8011c24:	887a      	ldrh	r2, [r7, #2]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d301      	bcc.n	8011c2e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	e102      	b.n	8011e34 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c32:	887a      	ldrh	r2, [r7, #2]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d906      	bls.n	8011c46 <tcp_split_unsent_seg+0x7e>
 8011c38:	4b80      	ldr	r3, [pc, #512]	; (8011e3c <tcp_split_unsent_seg+0x274>)
 8011c3a:	f240 325b 	movw	r2, #859	; 0x35b
 8011c3e:	4983      	ldr	r1, [pc, #524]	; (8011e4c <tcp_split_unsent_seg+0x284>)
 8011c40:	4880      	ldr	r0, [pc, #512]	; (8011e44 <tcp_split_unsent_seg+0x27c>)
 8011c42:	f004 f917 	bl	8015e74 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	891b      	ldrh	r3, [r3, #8]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d106      	bne.n	8011c5c <tcp_split_unsent_seg+0x94>
 8011c4e:	4b7b      	ldr	r3, [pc, #492]	; (8011e3c <tcp_split_unsent_seg+0x274>)
 8011c50:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011c54:	497e      	ldr	r1, [pc, #504]	; (8011e50 <tcp_split_unsent_seg+0x288>)
 8011c56:	487b      	ldr	r0, [pc, #492]	; (8011e44 <tcp_split_unsent_seg+0x27c>)
 8011c58:	f004 f90c 	bl	8015e74 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	7a9b      	ldrb	r3, [r3, #10]
 8011c60:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011c62:	7bfb      	ldrb	r3, [r7, #15]
 8011c64:	009b      	lsls	r3, r3, #2
 8011c66:	b2db      	uxtb	r3, r3
 8011c68:	f003 0304 	and.w	r3, r3, #4
 8011c6c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	891a      	ldrh	r2, [r3, #8]
 8011c72:	887b      	ldrh	r3, [r7, #2]
 8011c74:	1ad3      	subs	r3, r2, r3
 8011c76:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011c78:	7bbb      	ldrb	r3, [r7, #14]
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	89bb      	ldrh	r3, [r7, #12]
 8011c7e:	4413      	add	r3, r2
 8011c80:	b29b      	uxth	r3, r3
 8011c82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c86:	4619      	mov	r1, r3
 8011c88:	2036      	movs	r0, #54	; 0x36
 8011c8a:	f7fa fbcd 	bl	800c428 <pbuf_alloc>
 8011c8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f000 80b7 	beq.w	8011e06 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	891a      	ldrh	r2, [r3, #8]
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	891b      	ldrh	r3, [r3, #8]
 8011ca2:	1ad3      	subs	r3, r2, r3
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	887b      	ldrh	r3, [r7, #2]
 8011ca8:	4413      	add	r3, r2
 8011caa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	6858      	ldr	r0, [r3, #4]
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	685a      	ldr	r2, [r3, #4]
 8011cb4:	7bbb      	ldrb	r3, [r7, #14]
 8011cb6:	18d1      	adds	r1, r2, r3
 8011cb8:	897b      	ldrh	r3, [r7, #10]
 8011cba:	89ba      	ldrh	r2, [r7, #12]
 8011cbc:	f7fb f88a 	bl	800cdd4 <pbuf_copy_partial>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	89bb      	ldrh	r3, [r7, #12]
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	f040 809f 	bne.w	8011e0a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	68db      	ldr	r3, [r3, #12]
 8011cd0:	899b      	ldrh	r3, [r3, #12]
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7f9 faa9 	bl	800b22c <lwip_htons>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ce2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011ce8:	7efb      	ldrb	r3, [r7, #27]
 8011cea:	f003 0308 	and.w	r3, r3, #8
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d007      	beq.n	8011d02 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011cf2:	7efb      	ldrb	r3, [r7, #27]
 8011cf4:	f023 0308 	bic.w	r3, r3, #8
 8011cf8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011cfa:	7ebb      	ldrb	r3, [r7, #26]
 8011cfc:	f043 0308 	orr.w	r3, r3, #8
 8011d00:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011d02:	7efb      	ldrb	r3, [r7, #27]
 8011d04:	f003 0301 	and.w	r3, r3, #1
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d007      	beq.n	8011d1c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011d0c:	7efb      	ldrb	r3, [r7, #27]
 8011d0e:	f023 0301 	bic.w	r3, r3, #1
 8011d12:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011d14:	7ebb      	ldrb	r3, [r7, #26]
 8011d16:	f043 0301 	orr.w	r3, r3, #1
 8011d1a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	68db      	ldr	r3, [r3, #12]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	4618      	mov	r0, r3
 8011d24:	f7f9 fa97 	bl	800b256 <lwip_htonl>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	887b      	ldrh	r3, [r7, #2]
 8011d2c:	18d1      	adds	r1, r2, r3
 8011d2e:	7eba      	ldrb	r2, [r7, #26]
 8011d30:	7bfb      	ldrb	r3, [r7, #15]
 8011d32:	9300      	str	r3, [sp, #0]
 8011d34:	460b      	mov	r3, r1
 8011d36:	6939      	ldr	r1, [r7, #16]
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7ff fa4d 	bl	80111d8 <tcp_create_segment>
 8011d3e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d063      	beq.n	8011e0e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7fa feda 	bl	800cb04 <pbuf_clen>
 8011d50:	4603      	mov	r3, r0
 8011d52:	461a      	mov	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d5a:	1a9b      	subs	r3, r3, r2
 8011d5c:	b29a      	uxth	r2, r3
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	6858      	ldr	r0, [r3, #4]
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	891a      	ldrh	r2, [r3, #8]
 8011d6e:	89bb      	ldrh	r3, [r7, #12]
 8011d70:	1ad3      	subs	r3, r2, r3
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	4619      	mov	r1, r3
 8011d76:	f7fa fcb1 	bl	800c6dc <pbuf_realloc>
  useg->len -= remainder;
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	891a      	ldrh	r2, [r3, #8]
 8011d7e:	89bb      	ldrh	r3, [r7, #12]
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	899b      	ldrh	r3, [r3, #12]
 8011d8e:	b29c      	uxth	r4, r3
 8011d90:	7efb      	ldrb	r3, [r7, #27]
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7f9 fa49 	bl	800b22c <lwip_htons>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	68db      	ldr	r3, [r3, #12]
 8011da2:	4322      	orrs	r2, r4
 8011da4:	b292      	uxth	r2, r2
 8011da6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fa fea9 	bl	800cb04 <pbuf_clen>
 8011db2:	4603      	mov	r3, r0
 8011db4:	461a      	mov	r2, r3
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dbc:	4413      	add	r3, r2
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fa fe9a 	bl	800cb04 <pbuf_clen>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dda:	4413      	add	r3, r2
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	681a      	ldr	r2, [r3, #0]
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	69fa      	ldr	r2, [r7, #28]
 8011df0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d103      	bne.n	8011e02 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011e02:	2300      	movs	r3, #0
 8011e04:	e016      	b.n	8011e34 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011e06:	bf00      	nop
 8011e08:	e002      	b.n	8011e10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011e0a:	bf00      	nop
 8011e0c:	e000      	b.n	8011e10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011e0e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d006      	beq.n	8011e24 <tcp_split_unsent_seg+0x25c>
 8011e16:	4b09      	ldr	r3, [pc, #36]	; (8011e3c <tcp_split_unsent_seg+0x274>)
 8011e18:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011e1c:	490d      	ldr	r1, [pc, #52]	; (8011e54 <tcp_split_unsent_seg+0x28c>)
 8011e1e:	4809      	ldr	r0, [pc, #36]	; (8011e44 <tcp_split_unsent_seg+0x27c>)
 8011e20:	f004 f828 	bl	8015e74 <iprintf>
  if (p != NULL) {
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d002      	beq.n	8011e30 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011e2a:	6938      	ldr	r0, [r7, #16]
 8011e2c:	f7fa fddc 	bl	800c9e8 <pbuf_free>
  }

  return ERR_MEM;
 8011e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011e34:	4618      	mov	r0, r3
 8011e36:	3724      	adds	r7, #36	; 0x24
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd90      	pop	{r4, r7, pc}
 8011e3c:	08018754 	.word	0x08018754
 8011e40:	08018ae8 	.word	0x08018ae8
 8011e44:	080187a8 	.word	0x080187a8
 8011e48:	08018b0c 	.word	0x08018b0c
 8011e4c:	08018b30 	.word	0x08018b30
 8011e50:	08018b40 	.word	0x08018b40
 8011e54:	08018b50 	.word	0x08018b50

08011e58 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011e58:	b590      	push	{r4, r7, lr}
 8011e5a:	b085      	sub	sp, #20
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d106      	bne.n	8011e74 <tcp_send_fin+0x1c>
 8011e66:	4b21      	ldr	r3, [pc, #132]	; (8011eec <tcp_send_fin+0x94>)
 8011e68:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011e6c:	4920      	ldr	r1, [pc, #128]	; (8011ef0 <tcp_send_fin+0x98>)
 8011e6e:	4821      	ldr	r0, [pc, #132]	; (8011ef4 <tcp_send_fin+0x9c>)
 8011e70:	f004 f800 	bl	8015e74 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d02e      	beq.n	8011eda <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e80:	60fb      	str	r3, [r7, #12]
 8011e82:	e002      	b.n	8011e8a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1f8      	bne.n	8011e84 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	899b      	ldrh	r3, [r3, #12]
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7f9 f9c6 	bl	800b22c <lwip_htons>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	f003 0307 	and.w	r3, r3, #7
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d116      	bne.n	8011eda <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	899b      	ldrh	r3, [r3, #12]
 8011eb2:	b29c      	uxth	r4, r3
 8011eb4:	2001      	movs	r0, #1
 8011eb6:	f7f9 f9b9 	bl	800b22c <lwip_htons>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	4322      	orrs	r2, r4
 8011ec4:	b292      	uxth	r2, r2
 8011ec6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	8b5b      	ldrh	r3, [r3, #26]
 8011ecc:	f043 0320 	orr.w	r3, r3, #32
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	e004      	b.n	8011ee4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011eda:	2101      	movs	r1, #1
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f000 f80b 	bl	8011ef8 <tcp_enqueue_flags>
 8011ee2:	4603      	mov	r3, r0
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3714      	adds	r7, #20
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd90      	pop	{r4, r7, pc}
 8011eec:	08018754 	.word	0x08018754
 8011ef0:	08018b5c 	.word	0x08018b5c
 8011ef4:	080187a8 	.word	0x080187a8

08011ef8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b08a      	sub	sp, #40	; 0x28
 8011efc:	af02      	add	r7, sp, #8
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011f04:	2300      	movs	r3, #0
 8011f06:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011f0c:	78fb      	ldrb	r3, [r7, #3]
 8011f0e:	f003 0303 	and.w	r3, r3, #3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <tcp_enqueue_flags+0x2c>
 8011f16:	4b67      	ldr	r3, [pc, #412]	; (80120b4 <tcp_enqueue_flags+0x1bc>)
 8011f18:	f240 4212 	movw	r2, #1042	; 0x412
 8011f1c:	4966      	ldr	r1, [pc, #408]	; (80120b8 <tcp_enqueue_flags+0x1c0>)
 8011f1e:	4867      	ldr	r0, [pc, #412]	; (80120bc <tcp_enqueue_flags+0x1c4>)
 8011f20:	f003 ffa8 	bl	8015e74 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d106      	bne.n	8011f38 <tcp_enqueue_flags+0x40>
 8011f2a:	4b62      	ldr	r3, [pc, #392]	; (80120b4 <tcp_enqueue_flags+0x1bc>)
 8011f2c:	f240 4213 	movw	r2, #1043	; 0x413
 8011f30:	4963      	ldr	r1, [pc, #396]	; (80120c0 <tcp_enqueue_flags+0x1c8>)
 8011f32:	4862      	ldr	r0, [pc, #392]	; (80120bc <tcp_enqueue_flags+0x1c4>)
 8011f34:	f003 ff9e 	bl	8015e74 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011f38:	78fb      	ldrb	r3, [r7, #3]
 8011f3a:	f003 0302 	and.w	r3, r3, #2
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d001      	beq.n	8011f46 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011f42:	2301      	movs	r3, #1
 8011f44:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011f46:	7ffb      	ldrb	r3, [r7, #31]
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	b2db      	uxtb	r3, r3
 8011f4c:	f003 0304 	and.w	r3, r3, #4
 8011f50:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011f52:	7dfb      	ldrb	r3, [r7, #23]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	2036      	movs	r0, #54	; 0x36
 8011f5e:	f7fa fa63 	bl	800c428 <pbuf_alloc>
 8011f62:	6138      	str	r0, [r7, #16]
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d109      	bne.n	8011f7e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	8b5b      	ldrh	r3, [r3, #26]
 8011f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f7c:	e095      	b.n	80120aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	895a      	ldrh	r2, [r3, #10]
 8011f82:	7dfb      	ldrb	r3, [r7, #23]
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d206      	bcs.n	8011f98 <tcp_enqueue_flags+0xa0>
 8011f8a:	4b4a      	ldr	r3, [pc, #296]	; (80120b4 <tcp_enqueue_flags+0x1bc>)
 8011f8c:	f240 423a 	movw	r2, #1082	; 0x43a
 8011f90:	494c      	ldr	r1, [pc, #304]	; (80120c4 <tcp_enqueue_flags+0x1cc>)
 8011f92:	484a      	ldr	r0, [pc, #296]	; (80120bc <tcp_enqueue_flags+0x1c4>)
 8011f94:	f003 ff6e 	bl	8015e74 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011f9c:	78fa      	ldrb	r2, [r7, #3]
 8011f9e:	7ffb      	ldrb	r3, [r7, #31]
 8011fa0:	9300      	str	r3, [sp, #0]
 8011fa2:	460b      	mov	r3, r1
 8011fa4:	6939      	ldr	r1, [r7, #16]
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f7ff f916 	bl	80111d8 <tcp_create_segment>
 8011fac:	60f8      	str	r0, [r7, #12]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d109      	bne.n	8011fc8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	8b5b      	ldrh	r3, [r3, #26]
 8011fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fbc:	b29a      	uxth	r2, r3
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fc6:	e070      	b.n	80120aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	f003 0303 	and.w	r3, r3, #3
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d006      	beq.n	8011fe2 <tcp_enqueue_flags+0xea>
 8011fd4:	4b37      	ldr	r3, [pc, #220]	; (80120b4 <tcp_enqueue_flags+0x1bc>)
 8011fd6:	f240 4242 	movw	r2, #1090	; 0x442
 8011fda:	493b      	ldr	r1, [pc, #236]	; (80120c8 <tcp_enqueue_flags+0x1d0>)
 8011fdc:	4837      	ldr	r0, [pc, #220]	; (80120bc <tcp_enqueue_flags+0x1c4>)
 8011fde:	f003 ff49 	bl	8015e74 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	891b      	ldrh	r3, [r3, #8]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d006      	beq.n	8011ff8 <tcp_enqueue_flags+0x100>
 8011fea:	4b32      	ldr	r3, [pc, #200]	; (80120b4 <tcp_enqueue_flags+0x1bc>)
 8011fec:	f240 4243 	movw	r2, #1091	; 0x443
 8011ff0:	4936      	ldr	r1, [pc, #216]	; (80120cc <tcp_enqueue_flags+0x1d4>)
 8011ff2:	4832      	ldr	r0, [pc, #200]	; (80120bc <tcp_enqueue_flags+0x1c4>)
 8011ff4:	f003 ff3e 	bl	8015e74 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d103      	bne.n	8012008 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	68fa      	ldr	r2, [r7, #12]
 8012004:	66da      	str	r2, [r3, #108]	; 0x6c
 8012006:	e00d      	b.n	8012024 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801200c:	61bb      	str	r3, [r7, #24]
 801200e:	e002      	b.n	8012016 <tcp_enqueue_flags+0x11e>
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	61bb      	str	r3, [r7, #24]
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d1f8      	bne.n	8012010 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	68fa      	ldr	r2, [r7, #12]
 8012022:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2200      	movs	r2, #0
 8012028:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801202c:	78fb      	ldrb	r3, [r7, #3]
 801202e:	f003 0302 	and.w	r3, r3, #2
 8012032:	2b00      	cmp	r3, #0
 8012034:	d104      	bne.n	8012040 <tcp_enqueue_flags+0x148>
 8012036:	78fb      	ldrb	r3, [r7, #3]
 8012038:	f003 0301 	and.w	r3, r3, #1
 801203c:	2b00      	cmp	r3, #0
 801203e:	d004      	beq.n	801204a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012044:	1c5a      	adds	r2, r3, #1
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801204a:	78fb      	ldrb	r3, [r7, #3]
 801204c:	f003 0301 	and.w	r3, r3, #1
 8012050:	2b00      	cmp	r3, #0
 8012052:	d006      	beq.n	8012062 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	8b5b      	ldrh	r3, [r3, #26]
 8012058:	f043 0320 	orr.w	r3, r3, #32
 801205c:	b29a      	uxth	r2, r3
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	4618      	mov	r0, r3
 8012068:	f7fa fd4c 	bl	800cb04 <pbuf_clen>
 801206c:	4603      	mov	r3, r0
 801206e:	461a      	mov	r2, r3
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012076:	4413      	add	r3, r2
 8012078:	b29a      	uxth	r2, r3
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012086:	2b00      	cmp	r3, #0
 8012088:	d00e      	beq.n	80120a8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801208e:	2b00      	cmp	r3, #0
 8012090:	d10a      	bne.n	80120a8 <tcp_enqueue_flags+0x1b0>
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012096:	2b00      	cmp	r3, #0
 8012098:	d106      	bne.n	80120a8 <tcp_enqueue_flags+0x1b0>
 801209a:	4b06      	ldr	r3, [pc, #24]	; (80120b4 <tcp_enqueue_flags+0x1bc>)
 801209c:	f240 4266 	movw	r2, #1126	; 0x466
 80120a0:	490b      	ldr	r1, [pc, #44]	; (80120d0 <tcp_enqueue_flags+0x1d8>)
 80120a2:	4806      	ldr	r0, [pc, #24]	; (80120bc <tcp_enqueue_flags+0x1c4>)
 80120a4:	f003 fee6 	bl	8015e74 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80120a8:	2300      	movs	r3, #0
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3720      	adds	r7, #32
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	08018754 	.word	0x08018754
 80120b8:	08018b78 	.word	0x08018b78
 80120bc:	080187a8 	.word	0x080187a8
 80120c0:	08018bd0 	.word	0x08018bd0
 80120c4:	08018bf0 	.word	0x08018bf0
 80120c8:	08018c2c 	.word	0x08018c2c
 80120cc:	08018c44 	.word	0x08018c44
 80120d0:	08018c70 	.word	0x08018c70

080120d4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80120d4:	b5b0      	push	{r4, r5, r7, lr}
 80120d6:	b08a      	sub	sp, #40	; 0x28
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d106      	bne.n	80120f0 <tcp_output+0x1c>
 80120e2:	4ba0      	ldr	r3, [pc, #640]	; (8012364 <tcp_output+0x290>)
 80120e4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80120e8:	499f      	ldr	r1, [pc, #636]	; (8012368 <tcp_output+0x294>)
 80120ea:	48a0      	ldr	r0, [pc, #640]	; (801236c <tcp_output+0x298>)
 80120ec:	f003 fec2 	bl	8015e74 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	7d1b      	ldrb	r3, [r3, #20]
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d106      	bne.n	8012106 <tcp_output+0x32>
 80120f8:	4b9a      	ldr	r3, [pc, #616]	; (8012364 <tcp_output+0x290>)
 80120fa:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80120fe:	499c      	ldr	r1, [pc, #624]	; (8012370 <tcp_output+0x29c>)
 8012100:	489a      	ldr	r0, [pc, #616]	; (801236c <tcp_output+0x298>)
 8012102:	f003 feb7 	bl	8015e74 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012106:	4b9b      	ldr	r3, [pc, #620]	; (8012374 <tcp_output+0x2a0>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	687a      	ldr	r2, [r7, #4]
 801210c:	429a      	cmp	r2, r3
 801210e:	d101      	bne.n	8012114 <tcp_output+0x40>
    return ERR_OK;
 8012110:	2300      	movs	r3, #0
 8012112:	e1d2      	b.n	80124ba <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012120:	429a      	cmp	r2, r3
 8012122:	d203      	bcs.n	801212c <tcp_output+0x58>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801212a:	e002      	b.n	8012132 <tcp_output+0x5e>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012132:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012138:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10b      	bne.n	8012158 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	8b5b      	ldrh	r3, [r3, #26]
 8012144:	f003 0302 	and.w	r3, r3, #2
 8012148:	2b00      	cmp	r3, #0
 801214a:	f000 81a9 	beq.w	80124a0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f000 fdd8 	bl	8012d04 <tcp_send_empty_ack>
 8012154:	4603      	mov	r3, r0
 8012156:	e1b0      	b.n	80124ba <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012158:	6879      	ldr	r1, [r7, #4]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	3304      	adds	r3, #4
 801215e:	461a      	mov	r2, r3
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff f81d 	bl	80111a0 <tcp_route>
 8012166:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d102      	bne.n	8012174 <tcp_output+0xa0>
    return ERR_RTE;
 801216e:	f06f 0303 	mvn.w	r3, #3
 8012172:	e1a2      	b.n	80124ba <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d003      	beq.n	8012182 <tcp_output+0xae>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d111      	bne.n	80121a6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d002      	beq.n	801218e <tcp_output+0xba>
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	3304      	adds	r3, #4
 801218c:	e000      	b.n	8012190 <tcp_output+0xbc>
 801218e:	2300      	movs	r3, #0
 8012190:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d102      	bne.n	801219e <tcp_output+0xca>
      return ERR_RTE;
 8012198:	f06f 0303 	mvn.w	r3, #3
 801219c:	e18d      	b.n	80124ba <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80121a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a8:	68db      	ldr	r3, [r3, #12]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7f9 f852 	bl	800b256 <lwip_htonl>
 80121b2:	4602      	mov	r2, r0
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121b8:	1ad3      	subs	r3, r2, r3
 80121ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121bc:	8912      	ldrh	r2, [r2, #8]
 80121be:	4413      	add	r3, r2
 80121c0:	69ba      	ldr	r2, [r7, #24]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d227      	bcs.n	8012216 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121cc:	461a      	mov	r2, r3
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d114      	bne.n	80121fe <tcp_output+0x12a>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d110      	bne.n	80121fe <tcp_output+0x12a>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10b      	bne.n	80121fe <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2200      	movs	r2, #0
 80121ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2201      	movs	r2, #1
 80121f2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2200      	movs	r2, #0
 80121fa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	8b5b      	ldrh	r3, [r3, #26]
 8012202:	f003 0302 	and.w	r3, r3, #2
 8012206:	2b00      	cmp	r3, #0
 8012208:	f000 814c 	beq.w	80124a4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f000 fd79 	bl	8012d04 <tcp_send_empty_ack>
 8012212:	4603      	mov	r3, r0
 8012214:	e151      	b.n	80124ba <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2200      	movs	r2, #0
 801221a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012222:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	2b00      	cmp	r3, #0
 8012228:	f000 811b 	beq.w	8012462 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801222c:	e002      	b.n	8012234 <tcp_output+0x160>
 801222e:	6a3b      	ldr	r3, [r7, #32]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	623b      	str	r3, [r7, #32]
 8012234:	6a3b      	ldr	r3, [r7, #32]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d1f8      	bne.n	801222e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801223c:	e111      	b.n	8012462 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	899b      	ldrh	r3, [r3, #12]
 8012244:	b29b      	uxth	r3, r3
 8012246:	4618      	mov	r0, r3
 8012248:	f7f8 fff0 	bl	800b22c <lwip_htons>
 801224c:	4603      	mov	r3, r0
 801224e:	b2db      	uxtb	r3, r3
 8012250:	f003 0304 	and.w	r3, r3, #4
 8012254:	2b00      	cmp	r3, #0
 8012256:	d006      	beq.n	8012266 <tcp_output+0x192>
 8012258:	4b42      	ldr	r3, [pc, #264]	; (8012364 <tcp_output+0x290>)
 801225a:	f240 5237 	movw	r2, #1335	; 0x537
 801225e:	4946      	ldr	r1, [pc, #280]	; (8012378 <tcp_output+0x2a4>)
 8012260:	4842      	ldr	r0, [pc, #264]	; (801236c <tcp_output+0x298>)
 8012262:	f003 fe07 	bl	8015e74 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801226a:	2b00      	cmp	r3, #0
 801226c:	d01f      	beq.n	80122ae <tcp_output+0x1da>
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	8b5b      	ldrh	r3, [r3, #26]
 8012272:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012276:	2b00      	cmp	r3, #0
 8012278:	d119      	bne.n	80122ae <tcp_output+0x1da>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801227e:	2b00      	cmp	r3, #0
 8012280:	d00b      	beq.n	801229a <tcp_output+0x1c6>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d110      	bne.n	80122ae <tcp_output+0x1da>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012290:	891a      	ldrh	r2, [r3, #8]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012296:	429a      	cmp	r2, r3
 8012298:	d209      	bcs.n	80122ae <tcp_output+0x1da>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d004      	beq.n	80122ae <tcp_output+0x1da>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122aa:	2b08      	cmp	r3, #8
 80122ac:	d901      	bls.n	80122b2 <tcp_output+0x1de>
 80122ae:	2301      	movs	r3, #1
 80122b0:	e000      	b.n	80122b4 <tcp_output+0x1e0>
 80122b2:	2300      	movs	r3, #0
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d106      	bne.n	80122c6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	8b5b      	ldrh	r3, [r3, #26]
 80122bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	f000 80e3 	beq.w	801248c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	7d1b      	ldrb	r3, [r3, #20]
 80122ca:	2b02      	cmp	r3, #2
 80122cc:	d00d      	beq.n	80122ea <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80122ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d0:	68db      	ldr	r3, [r3, #12]
 80122d2:	899b      	ldrh	r3, [r3, #12]
 80122d4:	b29c      	uxth	r4, r3
 80122d6:	2010      	movs	r0, #16
 80122d8:	f7f8 ffa8 	bl	800b22c <lwip_htons>
 80122dc:	4603      	mov	r3, r0
 80122de:	461a      	mov	r2, r3
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	4322      	orrs	r2, r4
 80122e6:	b292      	uxth	r2, r2
 80122e8:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80122ea:	697a      	ldr	r2, [r7, #20]
 80122ec:	6879      	ldr	r1, [r7, #4]
 80122ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122f0:	f000 f908 	bl	8012504 <tcp_output_segment>
 80122f4:	4603      	mov	r3, r0
 80122f6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80122f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d009      	beq.n	8012314 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	8b5b      	ldrh	r3, [r3, #26]
 8012304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012308:	b29a      	uxth	r2, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	835a      	strh	r2, [r3, #26]
      return err;
 801230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012312:	e0d2      	b.n	80124ba <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	7d1b      	ldrb	r3, [r3, #20]
 8012320:	2b02      	cmp	r3, #2
 8012322:	d006      	beq.n	8012332 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	8b5b      	ldrh	r3, [r3, #26]
 8012328:	f023 0303 	bic.w	r3, r3, #3
 801232c:	b29a      	uxth	r2, r3
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012334:	68db      	ldr	r3, [r3, #12]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	4618      	mov	r0, r3
 801233a:	f7f8 ff8c 	bl	800b256 <lwip_htonl>
 801233e:	4604      	mov	r4, r0
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	891b      	ldrh	r3, [r3, #8]
 8012344:	461d      	mov	r5, r3
 8012346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012348:	68db      	ldr	r3, [r3, #12]
 801234a:	899b      	ldrh	r3, [r3, #12]
 801234c:	b29b      	uxth	r3, r3
 801234e:	4618      	mov	r0, r3
 8012350:	f7f8 ff6c 	bl	800b22c <lwip_htons>
 8012354:	4603      	mov	r3, r0
 8012356:	b2db      	uxtb	r3, r3
 8012358:	f003 0303 	and.w	r3, r3, #3
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00d      	beq.n	801237c <tcp_output+0x2a8>
 8012360:	2301      	movs	r3, #1
 8012362:	e00c      	b.n	801237e <tcp_output+0x2aa>
 8012364:	08018754 	.word	0x08018754
 8012368:	08018c98 	.word	0x08018c98
 801236c:	080187a8 	.word	0x080187a8
 8012370:	08018cb0 	.word	0x08018cb0
 8012374:	2000b514 	.word	0x2000b514
 8012378:	08018cd8 	.word	0x08018cd8
 801237c:	2300      	movs	r3, #0
 801237e:	442b      	add	r3, r5
 8012380:	4423      	add	r3, r4
 8012382:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	2b00      	cmp	r3, #0
 801238e:	da02      	bge.n	8012396 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	68ba      	ldr	r2, [r7, #8]
 8012394:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012398:	891b      	ldrh	r3, [r3, #8]
 801239a:	461c      	mov	r4, r3
 801239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	899b      	ldrh	r3, [r3, #12]
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7f8 ff41 	bl	800b22c <lwip_htons>
 80123aa:	4603      	mov	r3, r0
 80123ac:	b2db      	uxtb	r3, r3
 80123ae:	f003 0303 	and.w	r3, r3, #3
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d001      	beq.n	80123ba <tcp_output+0x2e6>
 80123b6:	2301      	movs	r3, #1
 80123b8:	e000      	b.n	80123bc <tcp_output+0x2e8>
 80123ba:	2300      	movs	r3, #0
 80123bc:	4423      	add	r3, r4
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d049      	beq.n	8012456 <tcp_output+0x382>
      seg->next = NULL;
 80123c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c4:	2200      	movs	r2, #0
 80123c6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d105      	bne.n	80123dc <tcp_output+0x308>
        pcb->unacked = seg;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123d4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80123d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d8:	623b      	str	r3, [r7, #32]
 80123da:	e03f      	b.n	801245c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80123dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7f8 ff37 	bl	800b256 <lwip_htonl>
 80123e8:	4604      	mov	r4, r0
 80123ea:	6a3b      	ldr	r3, [r7, #32]
 80123ec:	68db      	ldr	r3, [r3, #12]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7f8 ff30 	bl	800b256 <lwip_htonl>
 80123f6:	4603      	mov	r3, r0
 80123f8:	1ae3      	subs	r3, r4, r3
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	da24      	bge.n	8012448 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	3370      	adds	r3, #112	; 0x70
 8012402:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012404:	e002      	b.n	801240c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d011      	beq.n	8012438 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	f7f8 ff1a 	bl	800b256 <lwip_htonl>
 8012422:	4604      	mov	r4, r0
 8012424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	4618      	mov	r0, r3
 801242c:	f7f8 ff13 	bl	800b256 <lwip_htonl>
 8012430:	4603      	mov	r3, r0
 8012432:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012434:	2b00      	cmp	r3, #0
 8012436:	dbe6      	blt.n	8012406 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	e009      	b.n	801245c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012448:	6a3b      	ldr	r3, [r7, #32]
 801244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801244c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801244e:	6a3b      	ldr	r3, [r7, #32]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	623b      	str	r3, [r7, #32]
 8012454:	e002      	b.n	801245c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012458:	f7fb fef4 	bl	800e244 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012460:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012464:	2b00      	cmp	r3, #0
 8012466:	d012      	beq.n	801248e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246a:	68db      	ldr	r3, [r3, #12]
 801246c:	685b      	ldr	r3, [r3, #4]
 801246e:	4618      	mov	r0, r3
 8012470:	f7f8 fef1 	bl	800b256 <lwip_htonl>
 8012474:	4602      	mov	r2, r0
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801247a:	1ad3      	subs	r3, r2, r3
 801247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801247e:	8912      	ldrh	r2, [r2, #8]
 8012480:	4413      	add	r3, r2
  while (seg != NULL &&
 8012482:	69ba      	ldr	r2, [r7, #24]
 8012484:	429a      	cmp	r2, r3
 8012486:	f4bf aeda 	bcs.w	801223e <tcp_output+0x16a>
 801248a:	e000      	b.n	801248e <tcp_output+0x3ba>
      break;
 801248c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012492:	2b00      	cmp	r3, #0
 8012494:	d108      	bne.n	80124a8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2200      	movs	r2, #0
 801249a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801249e:	e004      	b.n	80124aa <tcp_output+0x3d6>
    goto output_done;
 80124a0:	bf00      	nop
 80124a2:	e002      	b.n	80124aa <tcp_output+0x3d6>
    goto output_done;
 80124a4:	bf00      	nop
 80124a6:	e000      	b.n	80124aa <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80124a8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	8b5b      	ldrh	r3, [r3, #26]
 80124ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80124b8:	2300      	movs	r3, #0
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3728      	adds	r7, #40	; 0x28
 80124be:	46bd      	mov	sp, r7
 80124c0:	bdb0      	pop	{r4, r5, r7, pc}
 80124c2:	bf00      	nop

080124c4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d106      	bne.n	80124e0 <tcp_output_segment_busy+0x1c>
 80124d2:	4b09      	ldr	r3, [pc, #36]	; (80124f8 <tcp_output_segment_busy+0x34>)
 80124d4:	f240 529a 	movw	r2, #1434	; 0x59a
 80124d8:	4908      	ldr	r1, [pc, #32]	; (80124fc <tcp_output_segment_busy+0x38>)
 80124da:	4809      	ldr	r0, [pc, #36]	; (8012500 <tcp_output_segment_busy+0x3c>)
 80124dc:	f003 fcca 	bl	8015e74 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	7b9b      	ldrb	r3, [r3, #14]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d001      	beq.n	80124ee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80124ea:	2301      	movs	r3, #1
 80124ec:	e000      	b.n	80124f0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80124ee:	2300      	movs	r3, #0
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	08018754 	.word	0x08018754
 80124fc:	08018cf0 	.word	0x08018cf0
 8012500:	080187a8 	.word	0x080187a8

08012504 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012504:	b5b0      	push	{r4, r5, r7, lr}
 8012506:	b08c      	sub	sp, #48	; 0x30
 8012508:	af04      	add	r7, sp, #16
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	60b9      	str	r1, [r7, #8]
 801250e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d106      	bne.n	8012524 <tcp_output_segment+0x20>
 8012516:	4b64      	ldr	r3, [pc, #400]	; (80126a8 <tcp_output_segment+0x1a4>)
 8012518:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801251c:	4963      	ldr	r1, [pc, #396]	; (80126ac <tcp_output_segment+0x1a8>)
 801251e:	4864      	ldr	r0, [pc, #400]	; (80126b0 <tcp_output_segment+0x1ac>)
 8012520:	f003 fca8 	bl	8015e74 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d106      	bne.n	8012538 <tcp_output_segment+0x34>
 801252a:	4b5f      	ldr	r3, [pc, #380]	; (80126a8 <tcp_output_segment+0x1a4>)
 801252c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012530:	4960      	ldr	r1, [pc, #384]	; (80126b4 <tcp_output_segment+0x1b0>)
 8012532:	485f      	ldr	r0, [pc, #380]	; (80126b0 <tcp_output_segment+0x1ac>)
 8012534:	f003 fc9e 	bl	8015e74 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d106      	bne.n	801254c <tcp_output_segment+0x48>
 801253e:	4b5a      	ldr	r3, [pc, #360]	; (80126a8 <tcp_output_segment+0x1a4>)
 8012540:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012544:	495c      	ldr	r1, [pc, #368]	; (80126b8 <tcp_output_segment+0x1b4>)
 8012546:	485a      	ldr	r0, [pc, #360]	; (80126b0 <tcp_output_segment+0x1ac>)
 8012548:	f003 fc94 	bl	8015e74 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	f7ff ffb9 	bl	80124c4 <tcp_output_segment_busy>
 8012552:	4603      	mov	r3, r0
 8012554:	2b00      	cmp	r3, #0
 8012556:	d001      	beq.n	801255c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012558:	2300      	movs	r3, #0
 801255a:	e0a0      	b.n	801269e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	68dc      	ldr	r4, [r3, #12]
 8012564:	4610      	mov	r0, r2
 8012566:	f7f8 fe76 	bl	800b256 <lwip_htonl>
 801256a:	4603      	mov	r3, r0
 801256c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	68dc      	ldr	r4, [r3, #12]
 8012576:	4610      	mov	r0, r2
 8012578:	f7f8 fe58 	bl	800b22c <lwip_htons>
 801257c:	4603      	mov	r3, r0
 801257e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012588:	441a      	add	r2, r3
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	3314      	adds	r3, #20
 8012594:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	7a9b      	ldrb	r3, [r3, #10]
 801259a:	f003 0301 	and.w	r3, r3, #1
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d015      	beq.n	80125ce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	3304      	adds	r3, #4
 80125a6:	461a      	mov	r2, r3
 80125a8:	6879      	ldr	r1, [r7, #4]
 80125aa:	f44f 7006 	mov.w	r0, #536	; 0x218
 80125ae:	f7fc fa33 	bl	800ea18 <tcp_eff_send_mss_netif>
 80125b2:	4603      	mov	r3, r0
 80125b4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80125b6:	8b7b      	ldrh	r3, [r7, #26]
 80125b8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80125bc:	4618      	mov	r0, r3
 80125be:	f7f8 fe4a 	bl	800b256 <lwip_htonl>
 80125c2:	4602      	mov	r2, r0
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	3304      	adds	r3, #4
 80125cc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	da02      	bge.n	80125de <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	2200      	movs	r2, #0
 80125dc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d10c      	bne.n	8012600 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80125e6:	4b35      	ldr	r3, [pc, #212]	; (80126bc <tcp_output_segment+0x1b8>)
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	685b      	ldr	r3, [r3, #4]
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7f8 fe2e 	bl	800b256 <lwip_htonl>
 80125fa:	4602      	mov	r2, r0
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	461a      	mov	r2, r3
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	1ad3      	subs	r3, r2, r3
 801260e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	8959      	ldrh	r1, [r3, #10]
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	8b3a      	ldrh	r2, [r7, #24]
 801261c:	1a8a      	subs	r2, r1, r2
 801261e:	b292      	uxth	r2, r2
 8012620:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	8919      	ldrh	r1, [r3, #8]
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	8b3a      	ldrh	r2, [r7, #24]
 801262e:	1a8a      	subs	r2, r1, r2
 8012630:	b292      	uxth	r2, r2
 8012632:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	68fa      	ldr	r2, [r7, #12]
 801263a:	68d2      	ldr	r2, [r2, #12]
 801263c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	2200      	movs	r2, #0
 8012644:	741a      	strb	r2, [r3, #16]
 8012646:	2200      	movs	r2, #0
 8012648:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	68db      	ldr	r3, [r3, #12]
 801264e:	f103 0214 	add.w	r2, r3, #20
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	7a9b      	ldrb	r3, [r3, #10]
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	f003 0304 	and.w	r3, r3, #4
 801265c:	4413      	add	r3, r2
 801265e:	69fa      	ldr	r2, [r7, #28]
 8012660:	429a      	cmp	r2, r3
 8012662:	d006      	beq.n	8012672 <tcp_output_segment+0x16e>
 8012664:	4b10      	ldr	r3, [pc, #64]	; (80126a8 <tcp_output_segment+0x1a4>)
 8012666:	f240 621c 	movw	r2, #1564	; 0x61c
 801266a:	4915      	ldr	r1, [pc, #84]	; (80126c0 <tcp_output_segment+0x1bc>)
 801266c:	4810      	ldr	r0, [pc, #64]	; (80126b0 <tcp_output_segment+0x1ac>)
 801266e:	f003 fc01 	bl	8015e74 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	6858      	ldr	r0, [r3, #4]
 8012676:	68b9      	ldr	r1, [r7, #8]
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	1d1c      	adds	r4, r3, #4
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	7add      	ldrb	r5, [r3, #11]
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	7a9b      	ldrb	r3, [r3, #10]
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	9202      	str	r2, [sp, #8]
 8012688:	2206      	movs	r2, #6
 801268a:	9201      	str	r2, [sp, #4]
 801268c:	9300      	str	r3, [sp, #0]
 801268e:	462b      	mov	r3, r5
 8012690:	4622      	mov	r2, r4
 8012692:	f002 fa6f 	bl	8014b74 <ip4_output_if>
 8012696:	4603      	mov	r3, r0
 8012698:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801269a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3720      	adds	r7, #32
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bdb0      	pop	{r4, r5, r7, pc}
 80126a6:	bf00      	nop
 80126a8:	08018754 	.word	0x08018754
 80126ac:	08018d18 	.word	0x08018d18
 80126b0:	080187a8 	.word	0x080187a8
 80126b4:	08018d38 	.word	0x08018d38
 80126b8:	08018d58 	.word	0x08018d58
 80126bc:	2000b504 	.word	0x2000b504
 80126c0:	08018d7c 	.word	0x08018d7c

080126c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80126c4:	b5b0      	push	{r4, r5, r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d106      	bne.n	80126e0 <tcp_rexmit_rto_prepare+0x1c>
 80126d2:	4b31      	ldr	r3, [pc, #196]	; (8012798 <tcp_rexmit_rto_prepare+0xd4>)
 80126d4:	f240 6263 	movw	r2, #1635	; 0x663
 80126d8:	4930      	ldr	r1, [pc, #192]	; (801279c <tcp_rexmit_rto_prepare+0xd8>)
 80126da:	4831      	ldr	r0, [pc, #196]	; (80127a0 <tcp_rexmit_rto_prepare+0xdc>)
 80126dc:	f003 fbca 	bl	8015e74 <iprintf>

  if (pcb->unacked == NULL) {
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d102      	bne.n	80126ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80126e8:	f06f 0305 	mvn.w	r3, #5
 80126ec:	e050      	b.n	8012790 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126f2:	60fb      	str	r3, [r7, #12]
 80126f4:	e00b      	b.n	801270e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80126f6:	68f8      	ldr	r0, [r7, #12]
 80126f8:	f7ff fee4 	bl	80124c4 <tcp_output_segment_busy>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d002      	beq.n	8012708 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012702:	f06f 0305 	mvn.w	r3, #5
 8012706:	e043      	b.n	8012790 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	60fb      	str	r3, [r7, #12]
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d1ef      	bne.n	80126f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f7ff fed4 	bl	80124c4 <tcp_output_segment_busy>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d002      	beq.n	8012728 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012722:	f06f 0305 	mvn.w	r3, #5
 8012726:	e033      	b.n	8012790 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	8b5b      	ldrh	r3, [r3, #26]
 8012742:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012746:	b29a      	uxth	r2, r3
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	4618      	mov	r0, r3
 8012754:	f7f8 fd7f 	bl	800b256 <lwip_htonl>
 8012758:	4604      	mov	r4, r0
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	891b      	ldrh	r3, [r3, #8]
 801275e:	461d      	mov	r5, r3
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	68db      	ldr	r3, [r3, #12]
 8012764:	899b      	ldrh	r3, [r3, #12]
 8012766:	b29b      	uxth	r3, r3
 8012768:	4618      	mov	r0, r3
 801276a:	f7f8 fd5f 	bl	800b22c <lwip_htons>
 801276e:	4603      	mov	r3, r0
 8012770:	b2db      	uxtb	r3, r3
 8012772:	f003 0303 	and.w	r3, r3, #3
 8012776:	2b00      	cmp	r3, #0
 8012778:	d001      	beq.n	801277e <tcp_rexmit_rto_prepare+0xba>
 801277a:	2301      	movs	r3, #1
 801277c:	e000      	b.n	8012780 <tcp_rexmit_rto_prepare+0xbc>
 801277e:	2300      	movs	r3, #0
 8012780:	442b      	add	r3, r5
 8012782:	18e2      	adds	r2, r4, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2200      	movs	r2, #0
 801278c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801278e:	2300      	movs	r3, #0
}
 8012790:	4618      	mov	r0, r3
 8012792:	3710      	adds	r7, #16
 8012794:	46bd      	mov	sp, r7
 8012796:	bdb0      	pop	{r4, r5, r7, pc}
 8012798:	08018754 	.word	0x08018754
 801279c:	08018d90 	.word	0x08018d90
 80127a0:	080187a8 	.word	0x080187a8

080127a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d106      	bne.n	80127c0 <tcp_rexmit_rto_commit+0x1c>
 80127b2:	4b0d      	ldr	r3, [pc, #52]	; (80127e8 <tcp_rexmit_rto_commit+0x44>)
 80127b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80127b8:	490c      	ldr	r1, [pc, #48]	; (80127ec <tcp_rexmit_rto_commit+0x48>)
 80127ba:	480d      	ldr	r0, [pc, #52]	; (80127f0 <tcp_rexmit_rto_commit+0x4c>)
 80127bc:	f003 fb5a 	bl	8015e74 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127c6:	2bff      	cmp	r3, #255	; 0xff
 80127c8:	d007      	beq.n	80127da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127d0:	3301      	adds	r3, #1
 80127d2:	b2da      	uxtb	r2, r3
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7ff fc7a 	bl	80120d4 <tcp_output>
}
 80127e0:	bf00      	nop
 80127e2:	3708      	adds	r7, #8
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	08018754 	.word	0x08018754
 80127ec:	08018db4 	.word	0x08018db4
 80127f0:	080187a8 	.word	0x080187a8

080127f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d106      	bne.n	8012810 <tcp_rexmit_rto+0x1c>
 8012802:	4b0a      	ldr	r3, [pc, #40]	; (801282c <tcp_rexmit_rto+0x38>)
 8012804:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012808:	4909      	ldr	r1, [pc, #36]	; (8012830 <tcp_rexmit_rto+0x3c>)
 801280a:	480a      	ldr	r0, [pc, #40]	; (8012834 <tcp_rexmit_rto+0x40>)
 801280c:	f003 fb32 	bl	8015e74 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f7ff ff57 	bl	80126c4 <tcp_rexmit_rto_prepare>
 8012816:	4603      	mov	r3, r0
 8012818:	2b00      	cmp	r3, #0
 801281a:	d102      	bne.n	8012822 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f7ff ffc1 	bl	80127a4 <tcp_rexmit_rto_commit>
  }
}
 8012822:	bf00      	nop
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	08018754 	.word	0x08018754
 8012830:	08018dd8 	.word	0x08018dd8
 8012834:	080187a8 	.word	0x080187a8

08012838 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012838:	b590      	push	{r4, r7, lr}
 801283a:	b085      	sub	sp, #20
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d106      	bne.n	8012854 <tcp_rexmit+0x1c>
 8012846:	4b2f      	ldr	r3, [pc, #188]	; (8012904 <tcp_rexmit+0xcc>)
 8012848:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801284c:	492e      	ldr	r1, [pc, #184]	; (8012908 <tcp_rexmit+0xd0>)
 801284e:	482f      	ldr	r0, [pc, #188]	; (801290c <tcp_rexmit+0xd4>)
 8012850:	f003 fb10 	bl	8015e74 <iprintf>

  if (pcb->unacked == NULL) {
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012858:	2b00      	cmp	r3, #0
 801285a:	d102      	bne.n	8012862 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801285c:	f06f 0305 	mvn.w	r3, #5
 8012860:	e04c      	b.n	80128fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012866:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012868:	68b8      	ldr	r0, [r7, #8]
 801286a:	f7ff fe2b 	bl	80124c4 <tcp_output_segment_busy>
 801286e:	4603      	mov	r3, r0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d002      	beq.n	801287a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012874:	f06f 0305 	mvn.w	r3, #5
 8012878:	e040      	b.n	80128fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	336c      	adds	r3, #108	; 0x6c
 8012886:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012888:	e002      	b.n	8012890 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d011      	beq.n	80128bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	68db      	ldr	r3, [r3, #12]
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7f8 fcd8 	bl	800b256 <lwip_htonl>
 80128a6:	4604      	mov	r4, r0
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	68db      	ldr	r3, [r3, #12]
 80128ac:	685b      	ldr	r3, [r3, #4]
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7f8 fcd1 	bl	800b256 <lwip_htonl>
 80128b4:	4603      	mov	r3, r0
 80128b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	dbe6      	blt.n	801288a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	681a      	ldr	r2, [r3, #0]
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	68ba      	ldr	r2, [r7, #8]
 80128c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d103      	bne.n	80128da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2200      	movs	r2, #0
 80128d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128e0:	2bff      	cmp	r3, #255	; 0xff
 80128e2:	d007      	beq.n	80128f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128ea:	3301      	adds	r3, #1
 80128ec:	b2da      	uxtb	r2, r3
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2200      	movs	r2, #0
 80128f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80128fa:	2300      	movs	r3, #0
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3714      	adds	r7, #20
 8012900:	46bd      	mov	sp, r7
 8012902:	bd90      	pop	{r4, r7, pc}
 8012904:	08018754 	.word	0x08018754
 8012908:	08018df4 	.word	0x08018df4
 801290c:	080187a8 	.word	0x080187a8

08012910 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d106      	bne.n	801292c <tcp_rexmit_fast+0x1c>
 801291e:	4b2f      	ldr	r3, [pc, #188]	; (80129dc <tcp_rexmit_fast+0xcc>)
 8012920:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012924:	492e      	ldr	r1, [pc, #184]	; (80129e0 <tcp_rexmit_fast+0xd0>)
 8012926:	482f      	ldr	r0, [pc, #188]	; (80129e4 <tcp_rexmit_fast+0xd4>)
 8012928:	f003 faa4 	bl	8015e74 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012930:	2b00      	cmp	r3, #0
 8012932:	d04f      	beq.n	80129d4 <tcp_rexmit_fast+0xc4>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	8b5b      	ldrh	r3, [r3, #26]
 8012938:	f003 0304 	and.w	r3, r3, #4
 801293c:	2b00      	cmp	r3, #0
 801293e:	d149      	bne.n	80129d4 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f7ff ff79 	bl	8012838 <tcp_rexmit>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d143      	bne.n	80129d4 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012958:	429a      	cmp	r2, r3
 801295a:	d208      	bcs.n	801296e <tcp_rexmit_fast+0x5e>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012962:	2b00      	cmp	r3, #0
 8012964:	da00      	bge.n	8012968 <tcp_rexmit_fast+0x58>
 8012966:	3301      	adds	r3, #1
 8012968:	105b      	asrs	r3, r3, #1
 801296a:	b29b      	uxth	r3, r3
 801296c:	e007      	b.n	801297e <tcp_rexmit_fast+0x6e>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012974:	2b00      	cmp	r3, #0
 8012976:	da00      	bge.n	801297a <tcp_rexmit_fast+0x6a>
 8012978:	3301      	adds	r3, #1
 801297a:	105b      	asrs	r3, r3, #1
 801297c:	b29b      	uxth	r3, r3
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801298a:	461a      	mov	r2, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012990:	005b      	lsls	r3, r3, #1
 8012992:	429a      	cmp	r2, r3
 8012994:	d206      	bcs.n	80129a4 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801299a:	005b      	lsls	r3, r3, #1
 801299c:	b29a      	uxth	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129ae:	4619      	mov	r1, r3
 80129b0:	0049      	lsls	r1, r1, #1
 80129b2:	440b      	add	r3, r1
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	4413      	add	r3, r2
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	8b5b      	ldrh	r3, [r3, #26]
 80129c4:	f043 0304 	orr.w	r3, r3, #4
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2200      	movs	r2, #0
 80129d2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80129d4:	bf00      	nop
 80129d6:	3708      	adds	r7, #8
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	08018754 	.word	0x08018754
 80129e0:	08018e0c 	.word	0x08018e0c
 80129e4:	080187a8 	.word	0x080187a8

080129e8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b086      	sub	sp, #24
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	607b      	str	r3, [r7, #4]
 80129f2:	460b      	mov	r3, r1
 80129f4:	817b      	strh	r3, [r7, #10]
 80129f6:	4613      	mov	r3, r2
 80129f8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80129fa:	897a      	ldrh	r2, [r7, #10]
 80129fc:	893b      	ldrh	r3, [r7, #8]
 80129fe:	4413      	add	r3, r2
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	3314      	adds	r3, #20
 8012a04:	b29b      	uxth	r3, r3
 8012a06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	2022      	movs	r0, #34	; 0x22
 8012a0e:	f7f9 fd0b 	bl	800c428 <pbuf_alloc>
 8012a12:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d04e      	beq.n	8012ab8 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	895b      	ldrh	r3, [r3, #10]
 8012a1e:	461a      	mov	r2, r3
 8012a20:	897b      	ldrh	r3, [r7, #10]
 8012a22:	3314      	adds	r3, #20
 8012a24:	429a      	cmp	r2, r3
 8012a26:	da06      	bge.n	8012a36 <tcp_output_alloc_header_common+0x4e>
 8012a28:	4b26      	ldr	r3, [pc, #152]	; (8012ac4 <tcp_output_alloc_header_common+0xdc>)
 8012a2a:	f240 7224 	movw	r2, #1828	; 0x724
 8012a2e:	4926      	ldr	r1, [pc, #152]	; (8012ac8 <tcp_output_alloc_header_common+0xe0>)
 8012a30:	4826      	ldr	r0, [pc, #152]	; (8012acc <tcp_output_alloc_header_common+0xe4>)
 8012a32:	f003 fa1f 	bl	8015e74 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012a3c:	8c3b      	ldrh	r3, [r7, #32]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7f8 fbf4 	bl	800b22c <lwip_htons>
 8012a44:	4603      	mov	r3, r0
 8012a46:	461a      	mov	r2, r3
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7f8 fbec 	bl	800b22c <lwip_htons>
 8012a54:	4603      	mov	r3, r0
 8012a56:	461a      	mov	r2, r3
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012a62:	68f8      	ldr	r0, [r7, #12]
 8012a64:	f7f8 fbf7 	bl	800b256 <lwip_htonl>
 8012a68:	4602      	mov	r2, r0
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012a6e:	897b      	ldrh	r3, [r7, #10]
 8012a70:	089b      	lsrs	r3, r3, #2
 8012a72:	b29b      	uxth	r3, r3
 8012a74:	3305      	adds	r3, #5
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	031b      	lsls	r3, r3, #12
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	4313      	orrs	r3, r2
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7f8 fbd0 	bl	800b22c <lwip_htons>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	461a      	mov	r2, r3
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012a94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7f8 fbc8 	bl	800b22c <lwip_htons>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	741a      	strb	r2, [r3, #16]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	749a      	strb	r2, [r3, #18]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012ab8:	697b      	ldr	r3, [r7, #20]
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3718      	adds	r7, #24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	08018754 	.word	0x08018754
 8012ac8:	08018e2c 	.word	0x08018e2c
 8012acc:	080187a8 	.word	0x080187a8

08012ad0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012ad0:	b5b0      	push	{r4, r5, r7, lr}
 8012ad2:	b08a      	sub	sp, #40	; 0x28
 8012ad4:	af04      	add	r7, sp, #16
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	607b      	str	r3, [r7, #4]
 8012ada:	460b      	mov	r3, r1
 8012adc:	817b      	strh	r3, [r7, #10]
 8012ade:	4613      	mov	r3, r2
 8012ae0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d106      	bne.n	8012af6 <tcp_output_alloc_header+0x26>
 8012ae8:	4b15      	ldr	r3, [pc, #84]	; (8012b40 <tcp_output_alloc_header+0x70>)
 8012aea:	f240 7242 	movw	r2, #1858	; 0x742
 8012aee:	4915      	ldr	r1, [pc, #84]	; (8012b44 <tcp_output_alloc_header+0x74>)
 8012af0:	4815      	ldr	r0, [pc, #84]	; (8012b48 <tcp_output_alloc_header+0x78>)
 8012af2:	f003 f9bf 	bl	8015e74 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	8adb      	ldrh	r3, [r3, #22]
 8012afe:	68fa      	ldr	r2, [r7, #12]
 8012b00:	8b12      	ldrh	r2, [r2, #24]
 8012b02:	68f9      	ldr	r1, [r7, #12]
 8012b04:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012b06:	893d      	ldrh	r5, [r7, #8]
 8012b08:	897c      	ldrh	r4, [r7, #10]
 8012b0a:	9103      	str	r1, [sp, #12]
 8012b0c:	2110      	movs	r1, #16
 8012b0e:	9102      	str	r1, [sp, #8]
 8012b10:	9201      	str	r2, [sp, #4]
 8012b12:	9300      	str	r3, [sp, #0]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	462a      	mov	r2, r5
 8012b18:	4621      	mov	r1, r4
 8012b1a:	f7ff ff65 	bl	80129e8 <tcp_output_alloc_header_common>
 8012b1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d006      	beq.n	8012b34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b2a:	68fa      	ldr	r2, [r7, #12]
 8012b2c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012b2e:	441a      	add	r2, r3
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012b34:	697b      	ldr	r3, [r7, #20]
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3718      	adds	r7, #24
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b3e:	bf00      	nop
 8012b40:	08018754 	.word	0x08018754
 8012b44:	08018e5c 	.word	0x08018e5c
 8012b48:	080187a8 	.word	0x080187a8

08012b4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b088      	sub	sp, #32
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	60f8      	str	r0, [r7, #12]
 8012b54:	60b9      	str	r1, [r7, #8]
 8012b56:	4611      	mov	r1, r2
 8012b58:	461a      	mov	r2, r3
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	71fb      	strb	r3, [r7, #7]
 8012b5e:	4613      	mov	r3, r2
 8012b60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012b62:	2300      	movs	r3, #0
 8012b64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d106      	bne.n	8012b7a <tcp_output_fill_options+0x2e>
 8012b6c:	4b13      	ldr	r3, [pc, #76]	; (8012bbc <tcp_output_fill_options+0x70>)
 8012b6e:	f240 7256 	movw	r2, #1878	; 0x756
 8012b72:	4913      	ldr	r1, [pc, #76]	; (8012bc0 <tcp_output_fill_options+0x74>)
 8012b74:	4813      	ldr	r0, [pc, #76]	; (8012bc4 <tcp_output_fill_options+0x78>)
 8012b76:	f003 f97d 	bl	8015e74 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	3314      	adds	r3, #20
 8012b84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	f103 0214 	add.w	r2, r3, #20
 8012b8c:	8bfb      	ldrh	r3, [r7, #30]
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	4619      	mov	r1, r3
 8012b92:	79fb      	ldrb	r3, [r7, #7]
 8012b94:	009b      	lsls	r3, r3, #2
 8012b96:	f003 0304 	and.w	r3, r3, #4
 8012b9a:	440b      	add	r3, r1
 8012b9c:	4413      	add	r3, r2
 8012b9e:	697a      	ldr	r2, [r7, #20]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d006      	beq.n	8012bb2 <tcp_output_fill_options+0x66>
 8012ba4:	4b05      	ldr	r3, [pc, #20]	; (8012bbc <tcp_output_fill_options+0x70>)
 8012ba6:	f240 7275 	movw	r2, #1909	; 0x775
 8012baa:	4907      	ldr	r1, [pc, #28]	; (8012bc8 <tcp_output_fill_options+0x7c>)
 8012bac:	4805      	ldr	r0, [pc, #20]	; (8012bc4 <tcp_output_fill_options+0x78>)
 8012bae:	f003 f961 	bl	8015e74 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012bb2:	bf00      	nop
 8012bb4:	3720      	adds	r7, #32
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	08018754 	.word	0x08018754
 8012bc0:	08018e84 	.word	0x08018e84
 8012bc4:	080187a8 	.word	0x080187a8
 8012bc8:	08018d7c 	.word	0x08018d7c

08012bcc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b08a      	sub	sp, #40	; 0x28
 8012bd0:	af04      	add	r7, sp, #16
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	607a      	str	r2, [r7, #4]
 8012bd8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d106      	bne.n	8012bee <tcp_output_control_segment+0x22>
 8012be0:	4b1c      	ldr	r3, [pc, #112]	; (8012c54 <tcp_output_control_segment+0x88>)
 8012be2:	f240 7287 	movw	r2, #1927	; 0x787
 8012be6:	491c      	ldr	r1, [pc, #112]	; (8012c58 <tcp_output_control_segment+0x8c>)
 8012be8:	481c      	ldr	r0, [pc, #112]	; (8012c5c <tcp_output_control_segment+0x90>)
 8012bea:	f003 f943 	bl	8015e74 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	6879      	ldr	r1, [r7, #4]
 8012bf2:	68f8      	ldr	r0, [r7, #12]
 8012bf4:	f7fe fad4 	bl	80111a0 <tcp_route>
 8012bf8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d102      	bne.n	8012c06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012c00:	23fc      	movs	r3, #252	; 0xfc
 8012c02:	75fb      	strb	r3, [r7, #23]
 8012c04:	e01c      	b.n	8012c40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d006      	beq.n	8012c1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	7adb      	ldrb	r3, [r3, #11]
 8012c10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	7a9b      	ldrb	r3, [r3, #10]
 8012c16:	757b      	strb	r3, [r7, #21]
 8012c18:	e003      	b.n	8012c22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012c1a:	23ff      	movs	r3, #255	; 0xff
 8012c1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012c22:	7dba      	ldrb	r2, [r7, #22]
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	9302      	str	r3, [sp, #8]
 8012c28:	2306      	movs	r3, #6
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	7d7b      	ldrb	r3, [r7, #21]
 8012c2e:	9300      	str	r3, [sp, #0]
 8012c30:	4613      	mov	r3, r2
 8012c32:	683a      	ldr	r2, [r7, #0]
 8012c34:	6879      	ldr	r1, [r7, #4]
 8012c36:	68b8      	ldr	r0, [r7, #8]
 8012c38:	f001 ff9c 	bl	8014b74 <ip4_output_if>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012c40:	68b8      	ldr	r0, [r7, #8]
 8012c42:	f7f9 fed1 	bl	800c9e8 <pbuf_free>
  return err;
 8012c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3718      	adds	r7, #24
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	08018754 	.word	0x08018754
 8012c58:	08018eac 	.word	0x08018eac
 8012c5c:	080187a8 	.word	0x080187a8

08012c60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012c60:	b590      	push	{r4, r7, lr}
 8012c62:	b08b      	sub	sp, #44	; 0x2c
 8012c64:	af04      	add	r7, sp, #16
 8012c66:	60f8      	str	r0, [r7, #12]
 8012c68:	60b9      	str	r1, [r7, #8]
 8012c6a:	607a      	str	r2, [r7, #4]
 8012c6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d106      	bne.n	8012c82 <tcp_rst+0x22>
 8012c74:	4b1f      	ldr	r3, [pc, #124]	; (8012cf4 <tcp_rst+0x94>)
 8012c76:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012c7a:	491f      	ldr	r1, [pc, #124]	; (8012cf8 <tcp_rst+0x98>)
 8012c7c:	481f      	ldr	r0, [pc, #124]	; (8012cfc <tcp_rst+0x9c>)
 8012c7e:	f003 f8f9 	bl	8015e74 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d106      	bne.n	8012c96 <tcp_rst+0x36>
 8012c88:	4b1a      	ldr	r3, [pc, #104]	; (8012cf4 <tcp_rst+0x94>)
 8012c8a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012c8e:	491c      	ldr	r1, [pc, #112]	; (8012d00 <tcp_rst+0xa0>)
 8012c90:	481a      	ldr	r0, [pc, #104]	; (8012cfc <tcp_rst+0x9c>)
 8012c92:	f003 f8ef 	bl	8015e74 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c96:	2300      	movs	r3, #0
 8012c98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012c9a:	f246 0308 	movw	r3, #24584	; 0x6008
 8012c9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012ca0:	7dfb      	ldrb	r3, [r7, #23]
 8012ca2:	b29c      	uxth	r4, r3
 8012ca4:	68b8      	ldr	r0, [r7, #8]
 8012ca6:	f7f8 fad6 	bl	800b256 <lwip_htonl>
 8012caa:	4602      	mov	r2, r0
 8012cac:	8abb      	ldrh	r3, [r7, #20]
 8012cae:	9303      	str	r3, [sp, #12]
 8012cb0:	2314      	movs	r3, #20
 8012cb2:	9302      	str	r3, [sp, #8]
 8012cb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012cb6:	9301      	str	r3, [sp, #4]
 8012cb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	4621      	mov	r1, r4
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f7ff fe90 	bl	80129e8 <tcp_output_alloc_header_common>
 8012cc8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00c      	beq.n	8012cea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012cd0:	7dfb      	ldrb	r3, [r7, #23]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	6939      	ldr	r1, [r7, #16]
 8012cd6:	68f8      	ldr	r0, [r7, #12]
 8012cd8:	f7ff ff38 	bl	8012b4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	6939      	ldr	r1, [r7, #16]
 8012ce2:	68f8      	ldr	r0, [r7, #12]
 8012ce4:	f7ff ff72 	bl	8012bcc <tcp_output_control_segment>
 8012ce8:	e000      	b.n	8012cec <tcp_rst+0x8c>
    return;
 8012cea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012cec:	371c      	adds	r7, #28
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd90      	pop	{r4, r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	08018754 	.word	0x08018754
 8012cf8:	08018ed8 	.word	0x08018ed8
 8012cfc:	080187a8 	.word	0x080187a8
 8012d00:	08018ef4 	.word	0x08018ef4

08012d04 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012d04:	b590      	push	{r4, r7, lr}
 8012d06:	b087      	sub	sp, #28
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012d10:	2300      	movs	r3, #0
 8012d12:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d106      	bne.n	8012d28 <tcp_send_empty_ack+0x24>
 8012d1a:	4b28      	ldr	r3, [pc, #160]	; (8012dbc <tcp_send_empty_ack+0xb8>)
 8012d1c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012d20:	4927      	ldr	r1, [pc, #156]	; (8012dc0 <tcp_send_empty_ack+0xbc>)
 8012d22:	4828      	ldr	r0, [pc, #160]	; (8012dc4 <tcp_send_empty_ack+0xc0>)
 8012d24:	f003 f8a6 	bl	8015e74 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d28:	7dfb      	ldrb	r3, [r7, #23]
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	f003 0304 	and.w	r3, r3, #4
 8012d32:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012d34:	7d7b      	ldrb	r3, [r7, #21]
 8012d36:	b29c      	uxth	r4, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7f8 fa8a 	bl	800b256 <lwip_htonl>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2200      	movs	r2, #0
 8012d46:	4621      	mov	r1, r4
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f7ff fec1 	bl	8012ad0 <tcp_output_alloc_header>
 8012d4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d50:	693b      	ldr	r3, [r7, #16]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d109      	bne.n	8012d6a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	8b5b      	ldrh	r3, [r3, #26]
 8012d5a:	f043 0303 	orr.w	r3, r3, #3
 8012d5e:	b29a      	uxth	r2, r3
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012d64:	f06f 0301 	mvn.w	r3, #1
 8012d68:	e023      	b.n	8012db2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012d6a:	7dbb      	ldrb	r3, [r7, #22]
 8012d6c:	7dfa      	ldrb	r2, [r7, #23]
 8012d6e:	6939      	ldr	r1, [r7, #16]
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f7ff feeb 	bl	8012b4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	3304      	adds	r3, #4
 8012d7c:	6939      	ldr	r1, [r7, #16]
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f7ff ff24 	bl	8012bcc <tcp_output_control_segment>
 8012d84:	4603      	mov	r3, r0
 8012d86:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d007      	beq.n	8012da0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	8b5b      	ldrh	r3, [r3, #26]
 8012d94:	f043 0303 	orr.w	r3, r3, #3
 8012d98:	b29a      	uxth	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	835a      	strh	r2, [r3, #26]
 8012d9e:	e006      	b.n	8012dae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	8b5b      	ldrh	r3, [r3, #26]
 8012da4:	f023 0303 	bic.w	r3, r3, #3
 8012da8:	b29a      	uxth	r2, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	371c      	adds	r7, #28
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd90      	pop	{r4, r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	08018754 	.word	0x08018754
 8012dc0:	08018f10 	.word	0x08018f10
 8012dc4:	080187a8 	.word	0x080187a8

08012dc8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012dc8:	b590      	push	{r4, r7, lr}
 8012dca:	b087      	sub	sp, #28
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d106      	bne.n	8012de8 <tcp_keepalive+0x20>
 8012dda:	4b18      	ldr	r3, [pc, #96]	; (8012e3c <tcp_keepalive+0x74>)
 8012ddc:	f640 0224 	movw	r2, #2084	; 0x824
 8012de0:	4917      	ldr	r1, [pc, #92]	; (8012e40 <tcp_keepalive+0x78>)
 8012de2:	4818      	ldr	r0, [pc, #96]	; (8012e44 <tcp_keepalive+0x7c>)
 8012de4:	f003 f846 	bl	8015e74 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012de8:	7dfb      	ldrb	r3, [r7, #23]
 8012dea:	b29c      	uxth	r4, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012df0:	3b01      	subs	r3, #1
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7f8 fa2f 	bl	800b256 <lwip_htonl>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	4621      	mov	r1, r4
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7ff fe66 	bl	8012ad0 <tcp_output_alloc_header>
 8012e04:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d102      	bne.n	8012e12 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e10:	e010      	b.n	8012e34 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012e12:	7dfb      	ldrb	r3, [r7, #23]
 8012e14:	2200      	movs	r2, #0
 8012e16:	6939      	ldr	r1, [r7, #16]
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f7ff fe97 	bl	8012b4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	3304      	adds	r3, #4
 8012e24:	6939      	ldr	r1, [r7, #16]
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f7ff fed0 	bl	8012bcc <tcp_output_control_segment>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	371c      	adds	r7, #28
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd90      	pop	{r4, r7, pc}
 8012e3c:	08018754 	.word	0x08018754
 8012e40:	08018f30 	.word	0x08018f30
 8012e44:	080187a8 	.word	0x080187a8

08012e48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012e48:	b590      	push	{r4, r7, lr}
 8012e4a:	b08b      	sub	sp, #44	; 0x2c
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e50:	2300      	movs	r3, #0
 8012e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d106      	bne.n	8012e6a <tcp_zero_window_probe+0x22>
 8012e5c:	4b4c      	ldr	r3, [pc, #304]	; (8012f90 <tcp_zero_window_probe+0x148>)
 8012e5e:	f640 024f 	movw	r2, #2127	; 0x84f
 8012e62:	494c      	ldr	r1, [pc, #304]	; (8012f94 <tcp_zero_window_probe+0x14c>)
 8012e64:	484c      	ldr	r0, [pc, #304]	; (8012f98 <tcp_zero_window_probe+0x150>)
 8012e66:	f003 f805 	bl	8015e74 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e6e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012e70:	6a3b      	ldr	r3, [r7, #32]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d101      	bne.n	8012e7a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	e086      	b.n	8012f88 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e80:	2bff      	cmp	r3, #255	; 0xff
 8012e82:	d007      	beq.n	8012e94 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	b2da      	uxtb	r2, r3
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012e94:	6a3b      	ldr	r3, [r7, #32]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	899b      	ldrh	r3, [r3, #12]
 8012e9a:	b29b      	uxth	r3, r3
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7f8 f9c5 	bl	800b22c <lwip_htons>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	f003 0301 	and.w	r3, r3, #1
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d005      	beq.n	8012eba <tcp_zero_window_probe+0x72>
 8012eae:	6a3b      	ldr	r3, [r7, #32]
 8012eb0:	891b      	ldrh	r3, [r3, #8]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d101      	bne.n	8012eba <tcp_zero_window_probe+0x72>
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e000      	b.n	8012ebc <tcp_zero_window_probe+0x74>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012ebe:	7ffb      	ldrb	r3, [r7, #31]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	bf0c      	ite	eq
 8012ec4:	2301      	moveq	r3, #1
 8012ec6:	2300      	movne	r3, #0
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ed0:	b299      	uxth	r1, r3
 8012ed2:	6a3b      	ldr	r3, [r7, #32]
 8012ed4:	68db      	ldr	r3, [r3, #12]
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	8bba      	ldrh	r2, [r7, #28]
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f7ff fdf8 	bl	8012ad0 <tcp_output_alloc_header>
 8012ee0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d102      	bne.n	8012eee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012eec:	e04c      	b.n	8012f88 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012ef4:	7ffb      	ldrb	r3, [r7, #31]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d011      	beq.n	8012f1e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	899b      	ldrh	r3, [r3, #12]
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	b21b      	sxth	r3, r3
 8012f02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012f06:	b21c      	sxth	r4, r3
 8012f08:	2011      	movs	r0, #17
 8012f0a:	f7f8 f98f 	bl	800b22c <lwip_htons>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	b21b      	sxth	r3, r3
 8012f12:	4323      	orrs	r3, r4
 8012f14:	b21b      	sxth	r3, r3
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	819a      	strh	r2, [r3, #12]
 8012f1c:	e010      	b.n	8012f40 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	685b      	ldr	r3, [r3, #4]
 8012f22:	3314      	adds	r3, #20
 8012f24:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012f26:	6a3b      	ldr	r3, [r7, #32]
 8012f28:	6858      	ldr	r0, [r3, #4]
 8012f2a:	6a3b      	ldr	r3, [r7, #32]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	891a      	ldrh	r2, [r3, #8]
 8012f30:	6a3b      	ldr	r3, [r7, #32]
 8012f32:	891b      	ldrh	r3, [r3, #8]
 8012f34:	1ad3      	subs	r3, r2, r3
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	2201      	movs	r2, #1
 8012f3a:	6939      	ldr	r1, [r7, #16]
 8012f3c:	f7f9 ff4a 	bl	800cdd4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012f40:	6a3b      	ldr	r3, [r7, #32]
 8012f42:	68db      	ldr	r3, [r3, #12]
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7f8 f985 	bl	800b256 <lwip_htonl>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	3301      	adds	r3, #1
 8012f50:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	da02      	bge.n	8012f64 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	68fa      	ldr	r2, [r7, #12]
 8012f62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f68:	2200      	movs	r2, #0
 8012f6a:	69b9      	ldr	r1, [r7, #24]
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ff fded 	bl	8012b4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	3304      	adds	r3, #4
 8012f78:	69b9      	ldr	r1, [r7, #24]
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f7ff fe26 	bl	8012bcc <tcp_output_control_segment>
 8012f80:	4603      	mov	r3, r0
 8012f82:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012f84:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	372c      	adds	r7, #44	; 0x2c
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd90      	pop	{r4, r7, pc}
 8012f90:	08018754 	.word	0x08018754
 8012f94:	08018f4c 	.word	0x08018f4c
 8012f98:	080187a8 	.word	0x080187a8

08012f9c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012fa4:	f7fa f804 	bl	800cfb0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012fa8:	4b0a      	ldr	r3, [pc, #40]	; (8012fd4 <tcpip_tcp_timer+0x38>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d103      	bne.n	8012fb8 <tcpip_tcp_timer+0x1c>
 8012fb0:	4b09      	ldr	r3, [pc, #36]	; (8012fd8 <tcpip_tcp_timer+0x3c>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d005      	beq.n	8012fc4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012fb8:	2200      	movs	r2, #0
 8012fba:	4908      	ldr	r1, [pc, #32]	; (8012fdc <tcpip_tcp_timer+0x40>)
 8012fbc:	20fa      	movs	r0, #250	; 0xfa
 8012fbe:	f000 f8f1 	bl	80131a4 <sys_timeout>
 8012fc2:	e002      	b.n	8012fca <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012fc4:	4b06      	ldr	r3, [pc, #24]	; (8012fe0 <tcpip_tcp_timer+0x44>)
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	601a      	str	r2, [r3, #0]
  }
}
 8012fca:	bf00      	nop
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	2000b500 	.word	0x2000b500
 8012fd8:	2000b510 	.word	0x2000b510
 8012fdc:	08012f9d 	.word	0x08012f9d
 8012fe0:	20004520 	.word	0x20004520

08012fe4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012fe8:	4b0a      	ldr	r3, [pc, #40]	; (8013014 <tcp_timer_needed+0x30>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10f      	bne.n	8013010 <tcp_timer_needed+0x2c>
 8012ff0:	4b09      	ldr	r3, [pc, #36]	; (8013018 <tcp_timer_needed+0x34>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d103      	bne.n	8013000 <tcp_timer_needed+0x1c>
 8012ff8:	4b08      	ldr	r3, [pc, #32]	; (801301c <tcp_timer_needed+0x38>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d007      	beq.n	8013010 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013000:	4b04      	ldr	r3, [pc, #16]	; (8013014 <tcp_timer_needed+0x30>)
 8013002:	2201      	movs	r2, #1
 8013004:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013006:	2200      	movs	r2, #0
 8013008:	4905      	ldr	r1, [pc, #20]	; (8013020 <tcp_timer_needed+0x3c>)
 801300a:	20fa      	movs	r0, #250	; 0xfa
 801300c:	f000 f8ca 	bl	80131a4 <sys_timeout>
  }
}
 8013010:	bf00      	nop
 8013012:	bd80      	pop	{r7, pc}
 8013014:	20004520 	.word	0x20004520
 8013018:	2000b500 	.word	0x2000b500
 801301c:	2000b510 	.word	0x2000b510
 8013020:	08012f9d 	.word	0x08012f9d

08013024 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b086      	sub	sp, #24
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013030:	200a      	movs	r0, #10
 8013032:	f7f8 fde7 	bl	800bc04 <memp_malloc>
 8013036:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013038:	693b      	ldr	r3, [r7, #16]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d109      	bne.n	8013052 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d151      	bne.n	80130e8 <sys_timeout_abs+0xc4>
 8013044:	4b2a      	ldr	r3, [pc, #168]	; (80130f0 <sys_timeout_abs+0xcc>)
 8013046:	22be      	movs	r2, #190	; 0xbe
 8013048:	492a      	ldr	r1, [pc, #168]	; (80130f4 <sys_timeout_abs+0xd0>)
 801304a:	482b      	ldr	r0, [pc, #172]	; (80130f8 <sys_timeout_abs+0xd4>)
 801304c:	f002 ff12 	bl	8015e74 <iprintf>
    return;
 8013050:	e04a      	b.n	80130e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	2200      	movs	r2, #0
 8013056:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	687a      	ldr	r2, [r7, #4]
 8013062:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	68fa      	ldr	r2, [r7, #12]
 8013068:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801306a:	4b24      	ldr	r3, [pc, #144]	; (80130fc <sys_timeout_abs+0xd8>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d103      	bne.n	801307a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013072:	4a22      	ldr	r2, [pc, #136]	; (80130fc <sys_timeout_abs+0xd8>)
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	6013      	str	r3, [r2, #0]
    return;
 8013078:	e037      	b.n	80130ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	685a      	ldr	r2, [r3, #4]
 801307e:	4b1f      	ldr	r3, [pc, #124]	; (80130fc <sys_timeout_abs+0xd8>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	1ad3      	subs	r3, r2, r3
 8013086:	0fdb      	lsrs	r3, r3, #31
 8013088:	f003 0301 	and.w	r3, r3, #1
 801308c:	b2db      	uxtb	r3, r3
 801308e:	2b00      	cmp	r3, #0
 8013090:	d007      	beq.n	80130a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013092:	4b1a      	ldr	r3, [pc, #104]	; (80130fc <sys_timeout_abs+0xd8>)
 8013094:	681a      	ldr	r2, [r3, #0]
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801309a:	4a18      	ldr	r2, [pc, #96]	; (80130fc <sys_timeout_abs+0xd8>)
 801309c:	693b      	ldr	r3, [r7, #16]
 801309e:	6013      	str	r3, [r2, #0]
 80130a0:	e023      	b.n	80130ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80130a2:	4b16      	ldr	r3, [pc, #88]	; (80130fc <sys_timeout_abs+0xd8>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	617b      	str	r3, [r7, #20]
 80130a8:	e01a      	b.n	80130e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d00b      	beq.n	80130ca <sys_timeout_abs+0xa6>
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	685a      	ldr	r2, [r3, #4]
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	685b      	ldr	r3, [r3, #4]
 80130bc:	1ad3      	subs	r3, r2, r3
 80130be:	0fdb      	lsrs	r3, r3, #31
 80130c0:	f003 0301 	and.w	r3, r3, #1
 80130c4:	b2db      	uxtb	r3, r3
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d007      	beq.n	80130da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	693a      	ldr	r2, [r7, #16]
 80130d6:	601a      	str	r2, [r3, #0]
        break;
 80130d8:	e007      	b.n	80130ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	617b      	str	r3, [r7, #20]
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d1e1      	bne.n	80130aa <sys_timeout_abs+0x86>
 80130e6:	e000      	b.n	80130ea <sys_timeout_abs+0xc6>
    return;
 80130e8:	bf00      	nop
      }
    }
  }
}
 80130ea:	3718      	adds	r7, #24
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}
 80130f0:	08018f70 	.word	0x08018f70
 80130f4:	08018fa4 	.word	0x08018fa4
 80130f8:	08018fe4 	.word	0x08018fe4
 80130fc:	20004518 	.word	0x20004518

08013100 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b086      	sub	sp, #24
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	4798      	blx	r3

  now = sys_now();
 8013112:	f7f4 f8e3 	bl	80072dc <sys_now>
 8013116:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	681a      	ldr	r2, [r3, #0]
 801311c:	4b0f      	ldr	r3, [pc, #60]	; (801315c <lwip_cyclic_timer+0x5c>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4413      	add	r3, r2
 8013122:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013124:	68fa      	ldr	r2, [r7, #12]
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	1ad3      	subs	r3, r2, r3
 801312a:	0fdb      	lsrs	r3, r3, #31
 801312c:	f003 0301 	and.w	r3, r3, #1
 8013130:	b2db      	uxtb	r3, r3
 8013132:	2b00      	cmp	r3, #0
 8013134:	d009      	beq.n	801314a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	4413      	add	r3, r2
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	4907      	ldr	r1, [pc, #28]	; (8013160 <lwip_cyclic_timer+0x60>)
 8013142:	4618      	mov	r0, r3
 8013144:	f7ff ff6e 	bl	8013024 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013148:	e004      	b.n	8013154 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	4904      	ldr	r1, [pc, #16]	; (8013160 <lwip_cyclic_timer+0x60>)
 801314e:	68f8      	ldr	r0, [r7, #12]
 8013150:	f7ff ff68 	bl	8013024 <sys_timeout_abs>
}
 8013154:	bf00      	nop
 8013156:	3718      	adds	r7, #24
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	2000451c 	.word	0x2000451c
 8013160:	08013101 	.word	0x08013101

08013164 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b082      	sub	sp, #8
 8013168:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801316a:	2301      	movs	r3, #1
 801316c:	607b      	str	r3, [r7, #4]
 801316e:	e00e      	b.n	801318e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013170:	4a0a      	ldr	r2, [pc, #40]	; (801319c <sys_timeouts_init+0x38>)
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	00db      	lsls	r3, r3, #3
 801317c:	4a07      	ldr	r2, [pc, #28]	; (801319c <sys_timeouts_init+0x38>)
 801317e:	4413      	add	r3, r2
 8013180:	461a      	mov	r2, r3
 8013182:	4907      	ldr	r1, [pc, #28]	; (80131a0 <sys_timeouts_init+0x3c>)
 8013184:	f000 f80e 	bl	80131a4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	3301      	adds	r3, #1
 801318c:	607b      	str	r3, [r7, #4]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2b02      	cmp	r3, #2
 8013192:	d9ed      	bls.n	8013170 <sys_timeouts_init+0xc>
  }
}
 8013194:	bf00      	nop
 8013196:	3708      	adds	r7, #8
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}
 801319c:	0802a6d8 	.word	0x0802a6d8
 80131a0:	08013101 	.word	0x08013101

080131a4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b086      	sub	sp, #24
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	60f8      	str	r0, [r7, #12]
 80131ac:	60b9      	str	r1, [r7, #8]
 80131ae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80131b6:	d306      	bcc.n	80131c6 <sys_timeout+0x22>
 80131b8:	4b0a      	ldr	r3, [pc, #40]	; (80131e4 <sys_timeout+0x40>)
 80131ba:	f240 1229 	movw	r2, #297	; 0x129
 80131be:	490a      	ldr	r1, [pc, #40]	; (80131e8 <sys_timeout+0x44>)
 80131c0:	480a      	ldr	r0, [pc, #40]	; (80131ec <sys_timeout+0x48>)
 80131c2:	f002 fe57 	bl	8015e74 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80131c6:	f7f4 f889 	bl	80072dc <sys_now>
 80131ca:	4602      	mov	r2, r0
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	4413      	add	r3, r2
 80131d0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80131d2:	687a      	ldr	r2, [r7, #4]
 80131d4:	68b9      	ldr	r1, [r7, #8]
 80131d6:	6978      	ldr	r0, [r7, #20]
 80131d8:	f7ff ff24 	bl	8013024 <sys_timeout_abs>
#endif
}
 80131dc:	bf00      	nop
 80131de:	3718      	adds	r7, #24
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}
 80131e4:	08018f70 	.word	0x08018f70
 80131e8:	0801900c 	.word	0x0801900c
 80131ec:	08018fe4 	.word	0x08018fe4

080131f0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80131f6:	f7f4 f871 	bl	80072dc <sys_now>
 80131fa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80131fc:	4b17      	ldr	r3, [pc, #92]	; (801325c <sys_check_timeouts+0x6c>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d022      	beq.n	801324e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	1ad3      	subs	r3, r2, r3
 8013210:	0fdb      	lsrs	r3, r3, #31
 8013212:	f003 0301 	and.w	r3, r3, #1
 8013216:	b2db      	uxtb	r3, r3
 8013218:	2b00      	cmp	r3, #0
 801321a:	d11a      	bne.n	8013252 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	4a0e      	ldr	r2, [pc, #56]	; (801325c <sys_check_timeouts+0x6c>)
 8013222:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	689b      	ldr	r3, [r3, #8]
 8013228:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	68db      	ldr	r3, [r3, #12]
 801322e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	4a0a      	ldr	r2, [pc, #40]	; (8013260 <sys_check_timeouts+0x70>)
 8013236:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013238:	68b9      	ldr	r1, [r7, #8]
 801323a:	200a      	movs	r0, #10
 801323c:	f7f8 fd34 	bl	800bca8 <memp_free>
    if (handler != NULL) {
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d0da      	beq.n	80131fc <sys_check_timeouts+0xc>
      handler(arg);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6838      	ldr	r0, [r7, #0]
 801324a:	4798      	blx	r3
  do {
 801324c:	e7d6      	b.n	80131fc <sys_check_timeouts+0xc>
      return;
 801324e:	bf00      	nop
 8013250:	e000      	b.n	8013254 <sys_check_timeouts+0x64>
      return;
 8013252:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013254:	3710      	adds	r7, #16
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	20004518 	.word	0x20004518
 8013260:	2000451c 	.word	0x2000451c

08013264 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b082      	sub	sp, #8
 8013268:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801326a:	4b16      	ldr	r3, [pc, #88]	; (80132c4 <sys_timeouts_sleeptime+0x60>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d102      	bne.n	8013278 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013276:	e020      	b.n	80132ba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013278:	f7f4 f830 	bl	80072dc <sys_now>
 801327c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801327e:	4b11      	ldr	r3, [pc, #68]	; (80132c4 <sys_timeouts_sleeptime+0x60>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	685a      	ldr	r2, [r3, #4]
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	1ad3      	subs	r3, r2, r3
 8013288:	0fdb      	lsrs	r3, r3, #31
 801328a:	f003 0301 	and.w	r3, r3, #1
 801328e:	b2db      	uxtb	r3, r3
 8013290:	2b00      	cmp	r3, #0
 8013292:	d001      	beq.n	8013298 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013294:	2300      	movs	r3, #0
 8013296:	e010      	b.n	80132ba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013298:	4b0a      	ldr	r3, [pc, #40]	; (80132c4 <sys_timeouts_sleeptime+0x60>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	685a      	ldr	r2, [r3, #4]
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	1ad3      	subs	r3, r2, r3
 80132a2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	da06      	bge.n	80132b8 <sys_timeouts_sleeptime+0x54>
 80132aa:	4b07      	ldr	r3, [pc, #28]	; (80132c8 <sys_timeouts_sleeptime+0x64>)
 80132ac:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80132b0:	4906      	ldr	r1, [pc, #24]	; (80132cc <sys_timeouts_sleeptime+0x68>)
 80132b2:	4807      	ldr	r0, [pc, #28]	; (80132d0 <sys_timeouts_sleeptime+0x6c>)
 80132b4:	f002 fdde 	bl	8015e74 <iprintf>
    return ret;
 80132b8:	683b      	ldr	r3, [r7, #0]
  }
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3708      	adds	r7, #8
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	20004518 	.word	0x20004518
 80132c8:	08018f70 	.word	0x08018f70
 80132cc:	08019044 	.word	0x08019044
 80132d0:	08018fe4 	.word	0x08018fe4

080132d4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80132d8:	f002 fde4 	bl	8015ea4 <rand>
 80132dc:	4603      	mov	r3, r0
 80132de:	b29b      	uxth	r3, r3
 80132e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	4b01      	ldr	r3, [pc, #4]	; (80132f4 <udp_init+0x20>)
 80132ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80132f0:	bf00      	nop
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	20000018 	.word	0x20000018

080132f8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	60f8      	str	r0, [r7, #12]
 8013300:	60b9      	str	r1, [r7, #8]
 8013302:	4613      	mov	r3, r2
 8013304:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d105      	bne.n	8013318 <udp_input_local_match+0x20>
 801330c:	4b27      	ldr	r3, [pc, #156]	; (80133ac <udp_input_local_match+0xb4>)
 801330e:	2287      	movs	r2, #135	; 0x87
 8013310:	4927      	ldr	r1, [pc, #156]	; (80133b0 <udp_input_local_match+0xb8>)
 8013312:	4828      	ldr	r0, [pc, #160]	; (80133b4 <udp_input_local_match+0xbc>)
 8013314:	f002 fdae 	bl	8015e74 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d105      	bne.n	801332a <udp_input_local_match+0x32>
 801331e:	4b23      	ldr	r3, [pc, #140]	; (80133ac <udp_input_local_match+0xb4>)
 8013320:	2288      	movs	r2, #136	; 0x88
 8013322:	4925      	ldr	r1, [pc, #148]	; (80133b8 <udp_input_local_match+0xc0>)
 8013324:	4823      	ldr	r0, [pc, #140]	; (80133b4 <udp_input_local_match+0xbc>)
 8013326:	f002 fda5 	bl	8015e74 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	7a1b      	ldrb	r3, [r3, #8]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00b      	beq.n	801334a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	7a1a      	ldrb	r2, [r3, #8]
 8013336:	4b21      	ldr	r3, [pc, #132]	; (80133bc <udp_input_local_match+0xc4>)
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801333e:	3301      	adds	r3, #1
 8013340:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013342:	429a      	cmp	r2, r3
 8013344:	d001      	beq.n	801334a <udp_input_local_match+0x52>
    return 0;
 8013346:	2300      	movs	r3, #0
 8013348:	e02b      	b.n	80133a2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801334a:	79fb      	ldrb	r3, [r7, #7]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d018      	beq.n	8013382 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d013      	beq.n	801337e <udp_input_local_match+0x86>
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d00f      	beq.n	801337e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801335e:	4b17      	ldr	r3, [pc, #92]	; (80133bc <udp_input_local_match+0xc4>)
 8013360:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013366:	d00a      	beq.n	801337e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	4b13      	ldr	r3, [pc, #76]	; (80133bc <udp_input_local_match+0xc4>)
 801336e:	695b      	ldr	r3, [r3, #20]
 8013370:	405a      	eors	r2, r3
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	3308      	adds	r3, #8
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801337a:	2b00      	cmp	r3, #0
 801337c:	d110      	bne.n	80133a0 <udp_input_local_match+0xa8>
          return 1;
 801337e:	2301      	movs	r3, #1
 8013380:	e00f      	b.n	80133a2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d009      	beq.n	801339c <udp_input_local_match+0xa4>
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d005      	beq.n	801339c <udp_input_local_match+0xa4>
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	681a      	ldr	r2, [r3, #0]
 8013394:	4b09      	ldr	r3, [pc, #36]	; (80133bc <udp_input_local_match+0xc4>)
 8013396:	695b      	ldr	r3, [r3, #20]
 8013398:	429a      	cmp	r2, r3
 801339a:	d101      	bne.n	80133a0 <udp_input_local_match+0xa8>
        return 1;
 801339c:	2301      	movs	r3, #1
 801339e:	e000      	b.n	80133a2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80133a0:	2300      	movs	r3, #0
}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3710      	adds	r7, #16
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	08019058 	.word	0x08019058
 80133b0:	08019088 	.word	0x08019088
 80133b4:	080190ac 	.word	0x080190ac
 80133b8:	080190d4 	.word	0x080190d4
 80133bc:	20007dec 	.word	0x20007dec

080133c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b08d      	sub	sp, #52	; 0x34
 80133c4:	af02      	add	r7, sp, #8
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d105      	bne.n	80133e0 <udp_input+0x20>
 80133d4:	4b7c      	ldr	r3, [pc, #496]	; (80135c8 <udp_input+0x208>)
 80133d6:	22cf      	movs	r2, #207	; 0xcf
 80133d8:	497c      	ldr	r1, [pc, #496]	; (80135cc <udp_input+0x20c>)
 80133da:	487d      	ldr	r0, [pc, #500]	; (80135d0 <udp_input+0x210>)
 80133dc:	f002 fd4a 	bl	8015e74 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d105      	bne.n	80133f2 <udp_input+0x32>
 80133e6:	4b78      	ldr	r3, [pc, #480]	; (80135c8 <udp_input+0x208>)
 80133e8:	22d0      	movs	r2, #208	; 0xd0
 80133ea:	497a      	ldr	r1, [pc, #488]	; (80135d4 <udp_input+0x214>)
 80133ec:	4878      	ldr	r0, [pc, #480]	; (80135d0 <udp_input+0x210>)
 80133ee:	f002 fd41 	bl	8015e74 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	895b      	ldrh	r3, [r3, #10]
 80133f6:	2b07      	cmp	r3, #7
 80133f8:	d803      	bhi.n	8013402 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f7f9 faf4 	bl	800c9e8 <pbuf_free>
    goto end;
 8013400:	e0de      	b.n	80135c0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013408:	4b73      	ldr	r3, [pc, #460]	; (80135d8 <udp_input+0x218>)
 801340a:	695a      	ldr	r2, [r3, #20]
 801340c:	4b72      	ldr	r3, [pc, #456]	; (80135d8 <udp_input+0x218>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4619      	mov	r1, r3
 8013412:	4610      	mov	r0, r2
 8013414:	f001 fc86 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 8013418:	4603      	mov	r3, r0
 801341a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	881b      	ldrh	r3, [r3, #0]
 8013420:	b29b      	uxth	r3, r3
 8013422:	4618      	mov	r0, r3
 8013424:	f7f7 ff02 	bl	800b22c <lwip_htons>
 8013428:	4603      	mov	r3, r0
 801342a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	885b      	ldrh	r3, [r3, #2]
 8013430:	b29b      	uxth	r3, r3
 8013432:	4618      	mov	r0, r3
 8013434:	f7f7 fefa 	bl	800b22c <lwip_htons>
 8013438:	4603      	mov	r3, r0
 801343a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801343c:	2300      	movs	r3, #0
 801343e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013440:	2300      	movs	r3, #0
 8013442:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013444:	2300      	movs	r3, #0
 8013446:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013448:	4b64      	ldr	r3, [pc, #400]	; (80135dc <udp_input+0x21c>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	627b      	str	r3, [r7, #36]	; 0x24
 801344e:	e054      	b.n	80134fa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013452:	8a5b      	ldrh	r3, [r3, #18]
 8013454:	89fa      	ldrh	r2, [r7, #14]
 8013456:	429a      	cmp	r2, r3
 8013458:	d14a      	bne.n	80134f0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801345a:	7cfb      	ldrb	r3, [r7, #19]
 801345c:	461a      	mov	r2, r3
 801345e:	6839      	ldr	r1, [r7, #0]
 8013460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013462:	f7ff ff49 	bl	80132f8 <udp_input_local_match>
 8013466:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013468:	2b00      	cmp	r3, #0
 801346a:	d041      	beq.n	80134f0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346e:	7c1b      	ldrb	r3, [r3, #16]
 8013470:	f003 0304 	and.w	r3, r3, #4
 8013474:	2b00      	cmp	r3, #0
 8013476:	d11d      	bne.n	80134b4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d102      	bne.n	8013484 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013480:	61fb      	str	r3, [r7, #28]
 8013482:	e017      	b.n	80134b4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013484:	7cfb      	ldrb	r3, [r7, #19]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d014      	beq.n	80134b4 <udp_input+0xf4>
 801348a:	4b53      	ldr	r3, [pc, #332]	; (80135d8 <udp_input+0x218>)
 801348c:	695b      	ldr	r3, [r3, #20]
 801348e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013492:	d10f      	bne.n	80134b4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013494:	69fb      	ldr	r3, [r7, #28]
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	3304      	adds	r3, #4
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	429a      	cmp	r2, r3
 80134a0:	d008      	beq.n	80134b4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80134a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a4:	681a      	ldr	r2, [r3, #0]
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	3304      	adds	r3, #4
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d101      	bne.n	80134b4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80134b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80134b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b6:	8a9b      	ldrh	r3, [r3, #20]
 80134b8:	8a3a      	ldrh	r2, [r7, #16]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d118      	bne.n	80134f0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80134be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d005      	beq.n	80134d2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80134c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c8:	685a      	ldr	r2, [r3, #4]
 80134ca:	4b43      	ldr	r3, [pc, #268]	; (80135d8 <udp_input+0x218>)
 80134cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d10e      	bne.n	80134f0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80134d2:	6a3b      	ldr	r3, [r7, #32]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d014      	beq.n	8013502 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80134d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134da:	68da      	ldr	r2, [r3, #12]
 80134dc:	6a3b      	ldr	r3, [r7, #32]
 80134de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80134e0:	4b3e      	ldr	r3, [pc, #248]	; (80135dc <udp_input+0x21c>)
 80134e2:	681a      	ldr	r2, [r3, #0]
 80134e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80134e8:	4a3c      	ldr	r2, [pc, #240]	; (80135dc <udp_input+0x21c>)
 80134ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80134ee:	e008      	b.n	8013502 <udp_input+0x142>
      }
    }

    prev = pcb;
 80134f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80134f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	627b      	str	r3, [r7, #36]	; 0x24
 80134fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d1a7      	bne.n	8013450 <udp_input+0x90>
 8013500:	e000      	b.n	8013504 <udp_input+0x144>
        break;
 8013502:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013506:	2b00      	cmp	r3, #0
 8013508:	d101      	bne.n	801350e <udp_input+0x14e>
    pcb = uncon_pcb;
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013510:	2b00      	cmp	r3, #0
 8013512:	d002      	beq.n	801351a <udp_input+0x15a>
    for_us = 1;
 8013514:	2301      	movs	r3, #1
 8013516:	76fb      	strb	r3, [r7, #27]
 8013518:	e00a      	b.n	8013530 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	3304      	adds	r3, #4
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	4b2d      	ldr	r3, [pc, #180]	; (80135d8 <udp_input+0x218>)
 8013522:	695b      	ldr	r3, [r3, #20]
 8013524:	429a      	cmp	r2, r3
 8013526:	bf0c      	ite	eq
 8013528:	2301      	moveq	r3, #1
 801352a:	2300      	movne	r3, #0
 801352c:	b2db      	uxtb	r3, r3
 801352e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013530:	7efb      	ldrb	r3, [r7, #27]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d041      	beq.n	80135ba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013536:	2108      	movs	r1, #8
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f7f9 f9cf 	bl	800c8dc <pbuf_remove_header>
 801353e:	4603      	mov	r3, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	d00a      	beq.n	801355a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013544:	4b20      	ldr	r3, [pc, #128]	; (80135c8 <udp_input+0x208>)
 8013546:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801354a:	4925      	ldr	r1, [pc, #148]	; (80135e0 <udp_input+0x220>)
 801354c:	4820      	ldr	r0, [pc, #128]	; (80135d0 <udp_input+0x210>)
 801354e:	f002 fc91 	bl	8015e74 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f7f9 fa48 	bl	800c9e8 <pbuf_free>
      goto end;
 8013558:	e032      	b.n	80135c0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801355c:	2b00      	cmp	r3, #0
 801355e:	d012      	beq.n	8013586 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013562:	699b      	ldr	r3, [r3, #24]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d00a      	beq.n	801357e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356a:	699c      	ldr	r4, [r3, #24]
 801356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356e:	69d8      	ldr	r0, [r3, #28]
 8013570:	8a3b      	ldrh	r3, [r7, #16]
 8013572:	9300      	str	r3, [sp, #0]
 8013574:	4b1b      	ldr	r3, [pc, #108]	; (80135e4 <udp_input+0x224>)
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801357a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801357c:	e021      	b.n	80135c2 <udp_input+0x202>
        pbuf_free(p);
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f7f9 fa32 	bl	800c9e8 <pbuf_free>
        goto end;
 8013584:	e01c      	b.n	80135c0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013586:	7cfb      	ldrb	r3, [r7, #19]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d112      	bne.n	80135b2 <udp_input+0x1f2>
 801358c:	4b12      	ldr	r3, [pc, #72]	; (80135d8 <udp_input+0x218>)
 801358e:	695b      	ldr	r3, [r3, #20]
 8013590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013594:	2be0      	cmp	r3, #224	; 0xe0
 8013596:	d00c      	beq.n	80135b2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013598:	4b0f      	ldr	r3, [pc, #60]	; (80135d8 <udp_input+0x218>)
 801359a:	899b      	ldrh	r3, [r3, #12]
 801359c:	3308      	adds	r3, #8
 801359e:	b29b      	uxth	r3, r3
 80135a0:	b21b      	sxth	r3, r3
 80135a2:	4619      	mov	r1, r3
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f7f9 fa0c 	bl	800c9c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80135aa:	2103      	movs	r1, #3
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f001 f89b 	bl	80146e8 <icmp_dest_unreach>
      pbuf_free(p);
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f7f9 fa18 	bl	800c9e8 <pbuf_free>
  return;
 80135b8:	e003      	b.n	80135c2 <udp_input+0x202>
    pbuf_free(p);
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7f9 fa14 	bl	800c9e8 <pbuf_free>
  return;
 80135c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80135c2:	372c      	adds	r7, #44	; 0x2c
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd90      	pop	{r4, r7, pc}
 80135c8:	08019058 	.word	0x08019058
 80135cc:	080190fc 	.word	0x080190fc
 80135d0:	080190ac 	.word	0x080190ac
 80135d4:	08019114 	.word	0x08019114
 80135d8:	20007dec 	.word	0x20007dec
 80135dc:	2000b518 	.word	0x2000b518
 80135e0:	08019130 	.word	0x08019130
 80135e4:	20007dfc 	.word	0x20007dfc

080135e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80135e8:	b480      	push	{r7}
 80135ea:	b085      	sub	sp, #20
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d01e      	beq.n	8013636 <udp_netif_ip_addr_changed+0x4e>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d01a      	beq.n	8013636 <udp_netif_ip_addr_changed+0x4e>
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d017      	beq.n	8013636 <udp_netif_ip_addr_changed+0x4e>
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d013      	beq.n	8013636 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801360e:	4b0d      	ldr	r3, [pc, #52]	; (8013644 <udp_netif_ip_addr_changed+0x5c>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	60fb      	str	r3, [r7, #12]
 8013614:	e00c      	b.n	8013630 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	681a      	ldr	r2, [r3, #0]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	429a      	cmp	r2, r3
 8013620:	d103      	bne.n	801362a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	68db      	ldr	r3, [r3, #12]
 801362e:	60fb      	str	r3, [r7, #12]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d1ef      	bne.n	8013616 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013636:	bf00      	nop
 8013638:	3714      	adds	r7, #20
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr
 8013642:	bf00      	nop
 8013644:	2000b518 	.word	0x2000b518

08013648 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013650:	4915      	ldr	r1, [pc, #84]	; (80136a8 <etharp_free_entry+0x60>)
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	4613      	mov	r3, r2
 8013656:	005b      	lsls	r3, r3, #1
 8013658:	4413      	add	r3, r2
 801365a:	00db      	lsls	r3, r3, #3
 801365c:	440b      	add	r3, r1
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d013      	beq.n	801368c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013664:	4910      	ldr	r1, [pc, #64]	; (80136a8 <etharp_free_entry+0x60>)
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	4613      	mov	r3, r2
 801366a:	005b      	lsls	r3, r3, #1
 801366c:	4413      	add	r3, r2
 801366e:	00db      	lsls	r3, r3, #3
 8013670:	440b      	add	r3, r1
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4618      	mov	r0, r3
 8013676:	f7f9 f9b7 	bl	800c9e8 <pbuf_free>
    arp_table[i].q = NULL;
 801367a:	490b      	ldr	r1, [pc, #44]	; (80136a8 <etharp_free_entry+0x60>)
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	4613      	mov	r3, r2
 8013680:	005b      	lsls	r3, r3, #1
 8013682:	4413      	add	r3, r2
 8013684:	00db      	lsls	r3, r3, #3
 8013686:	440b      	add	r3, r1
 8013688:	2200      	movs	r2, #0
 801368a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801368c:	4906      	ldr	r1, [pc, #24]	; (80136a8 <etharp_free_entry+0x60>)
 801368e:	687a      	ldr	r2, [r7, #4]
 8013690:	4613      	mov	r3, r2
 8013692:	005b      	lsls	r3, r3, #1
 8013694:	4413      	add	r3, r2
 8013696:	00db      	lsls	r3, r3, #3
 8013698:	440b      	add	r3, r1
 801369a:	3314      	adds	r3, #20
 801369c:	2200      	movs	r2, #0
 801369e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80136a0:	bf00      	nop
 80136a2:	3708      	adds	r7, #8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}
 80136a8:	20004524 	.word	0x20004524

080136ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b082      	sub	sp, #8
 80136b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80136b2:	2300      	movs	r3, #0
 80136b4:	607b      	str	r3, [r7, #4]
 80136b6:	e096      	b.n	80137e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80136b8:	494f      	ldr	r1, [pc, #316]	; (80137f8 <etharp_tmr+0x14c>)
 80136ba:	687a      	ldr	r2, [r7, #4]
 80136bc:	4613      	mov	r3, r2
 80136be:	005b      	lsls	r3, r3, #1
 80136c0:	4413      	add	r3, r2
 80136c2:	00db      	lsls	r3, r3, #3
 80136c4:	440b      	add	r3, r1
 80136c6:	3314      	adds	r3, #20
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80136cc:	78fb      	ldrb	r3, [r7, #3]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	f000 8086 	beq.w	80137e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80136d4:	4948      	ldr	r1, [pc, #288]	; (80137f8 <etharp_tmr+0x14c>)
 80136d6:	687a      	ldr	r2, [r7, #4]
 80136d8:	4613      	mov	r3, r2
 80136da:	005b      	lsls	r3, r3, #1
 80136dc:	4413      	add	r3, r2
 80136de:	00db      	lsls	r3, r3, #3
 80136e0:	440b      	add	r3, r1
 80136e2:	3312      	adds	r3, #18
 80136e4:	881b      	ldrh	r3, [r3, #0]
 80136e6:	3301      	adds	r3, #1
 80136e8:	b298      	uxth	r0, r3
 80136ea:	4943      	ldr	r1, [pc, #268]	; (80137f8 <etharp_tmr+0x14c>)
 80136ec:	687a      	ldr	r2, [r7, #4]
 80136ee:	4613      	mov	r3, r2
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	4413      	add	r3, r2
 80136f4:	00db      	lsls	r3, r3, #3
 80136f6:	440b      	add	r3, r1
 80136f8:	3312      	adds	r3, #18
 80136fa:	4602      	mov	r2, r0
 80136fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80136fe:	493e      	ldr	r1, [pc, #248]	; (80137f8 <etharp_tmr+0x14c>)
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	4613      	mov	r3, r2
 8013704:	005b      	lsls	r3, r3, #1
 8013706:	4413      	add	r3, r2
 8013708:	00db      	lsls	r3, r3, #3
 801370a:	440b      	add	r3, r1
 801370c:	3312      	adds	r3, #18
 801370e:	881b      	ldrh	r3, [r3, #0]
 8013710:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013714:	d215      	bcs.n	8013742 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013716:	4938      	ldr	r1, [pc, #224]	; (80137f8 <etharp_tmr+0x14c>)
 8013718:	687a      	ldr	r2, [r7, #4]
 801371a:	4613      	mov	r3, r2
 801371c:	005b      	lsls	r3, r3, #1
 801371e:	4413      	add	r3, r2
 8013720:	00db      	lsls	r3, r3, #3
 8013722:	440b      	add	r3, r1
 8013724:	3314      	adds	r3, #20
 8013726:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013728:	2b01      	cmp	r3, #1
 801372a:	d10e      	bne.n	801374a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801372c:	4932      	ldr	r1, [pc, #200]	; (80137f8 <etharp_tmr+0x14c>)
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	4613      	mov	r3, r2
 8013732:	005b      	lsls	r3, r3, #1
 8013734:	4413      	add	r3, r2
 8013736:	00db      	lsls	r3, r3, #3
 8013738:	440b      	add	r3, r1
 801373a:	3312      	adds	r3, #18
 801373c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801373e:	2b04      	cmp	r3, #4
 8013740:	d903      	bls.n	801374a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f7ff ff80 	bl	8013648 <etharp_free_entry>
 8013748:	e04a      	b.n	80137e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801374a:	492b      	ldr	r1, [pc, #172]	; (80137f8 <etharp_tmr+0x14c>)
 801374c:	687a      	ldr	r2, [r7, #4]
 801374e:	4613      	mov	r3, r2
 8013750:	005b      	lsls	r3, r3, #1
 8013752:	4413      	add	r3, r2
 8013754:	00db      	lsls	r3, r3, #3
 8013756:	440b      	add	r3, r1
 8013758:	3314      	adds	r3, #20
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	2b03      	cmp	r3, #3
 801375e:	d10a      	bne.n	8013776 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013760:	4925      	ldr	r1, [pc, #148]	; (80137f8 <etharp_tmr+0x14c>)
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	4613      	mov	r3, r2
 8013766:	005b      	lsls	r3, r3, #1
 8013768:	4413      	add	r3, r2
 801376a:	00db      	lsls	r3, r3, #3
 801376c:	440b      	add	r3, r1
 801376e:	3314      	adds	r3, #20
 8013770:	2204      	movs	r2, #4
 8013772:	701a      	strb	r2, [r3, #0]
 8013774:	e034      	b.n	80137e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013776:	4920      	ldr	r1, [pc, #128]	; (80137f8 <etharp_tmr+0x14c>)
 8013778:	687a      	ldr	r2, [r7, #4]
 801377a:	4613      	mov	r3, r2
 801377c:	005b      	lsls	r3, r3, #1
 801377e:	4413      	add	r3, r2
 8013780:	00db      	lsls	r3, r3, #3
 8013782:	440b      	add	r3, r1
 8013784:	3314      	adds	r3, #20
 8013786:	781b      	ldrb	r3, [r3, #0]
 8013788:	2b04      	cmp	r3, #4
 801378a:	d10a      	bne.n	80137a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801378c:	491a      	ldr	r1, [pc, #104]	; (80137f8 <etharp_tmr+0x14c>)
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	4613      	mov	r3, r2
 8013792:	005b      	lsls	r3, r3, #1
 8013794:	4413      	add	r3, r2
 8013796:	00db      	lsls	r3, r3, #3
 8013798:	440b      	add	r3, r1
 801379a:	3314      	adds	r3, #20
 801379c:	2202      	movs	r2, #2
 801379e:	701a      	strb	r2, [r3, #0]
 80137a0:	e01e      	b.n	80137e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80137a2:	4915      	ldr	r1, [pc, #84]	; (80137f8 <etharp_tmr+0x14c>)
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	4613      	mov	r3, r2
 80137a8:	005b      	lsls	r3, r3, #1
 80137aa:	4413      	add	r3, r2
 80137ac:	00db      	lsls	r3, r3, #3
 80137ae:	440b      	add	r3, r1
 80137b0:	3314      	adds	r3, #20
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d113      	bne.n	80137e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80137b8:	490f      	ldr	r1, [pc, #60]	; (80137f8 <etharp_tmr+0x14c>)
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	4613      	mov	r3, r2
 80137be:	005b      	lsls	r3, r3, #1
 80137c0:	4413      	add	r3, r2
 80137c2:	00db      	lsls	r3, r3, #3
 80137c4:	440b      	add	r3, r1
 80137c6:	3308      	adds	r3, #8
 80137c8:	6818      	ldr	r0, [r3, #0]
 80137ca:	687a      	ldr	r2, [r7, #4]
 80137cc:	4613      	mov	r3, r2
 80137ce:	005b      	lsls	r3, r3, #1
 80137d0:	4413      	add	r3, r2
 80137d2:	00db      	lsls	r3, r3, #3
 80137d4:	4a08      	ldr	r2, [pc, #32]	; (80137f8 <etharp_tmr+0x14c>)
 80137d6:	4413      	add	r3, r2
 80137d8:	3304      	adds	r3, #4
 80137da:	4619      	mov	r1, r3
 80137dc:	f000 fe6e 	bl	80144bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	3301      	adds	r3, #1
 80137e4:	607b      	str	r3, [r7, #4]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2b09      	cmp	r3, #9
 80137ea:	f77f af65 	ble.w	80136b8 <etharp_tmr+0xc>
      }
    }
  }
}
 80137ee:	bf00      	nop
 80137f0:	3708      	adds	r7, #8
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	bf00      	nop
 80137f8:	20004524 	.word	0x20004524

080137fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b08a      	sub	sp, #40	; 0x28
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	460b      	mov	r3, r1
 8013806:	607a      	str	r2, [r7, #4]
 8013808:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801380a:	230a      	movs	r3, #10
 801380c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801380e:	230a      	movs	r3, #10
 8013810:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013812:	230a      	movs	r3, #10
 8013814:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013816:	2300      	movs	r3, #0
 8013818:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801381a:	230a      	movs	r3, #10
 801381c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801381e:	2300      	movs	r3, #0
 8013820:	83bb      	strh	r3, [r7, #28]
 8013822:	2300      	movs	r3, #0
 8013824:	837b      	strh	r3, [r7, #26]
 8013826:	2300      	movs	r3, #0
 8013828:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801382a:	2300      	movs	r3, #0
 801382c:	843b      	strh	r3, [r7, #32]
 801382e:	e0ae      	b.n	801398e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013830:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013834:	49a6      	ldr	r1, [pc, #664]	; (8013ad0 <etharp_find_entry+0x2d4>)
 8013836:	4613      	mov	r3, r2
 8013838:	005b      	lsls	r3, r3, #1
 801383a:	4413      	add	r3, r2
 801383c:	00db      	lsls	r3, r3, #3
 801383e:	440b      	add	r3, r1
 8013840:	3314      	adds	r3, #20
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013846:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801384a:	2b0a      	cmp	r3, #10
 801384c:	d105      	bne.n	801385a <etharp_find_entry+0x5e>
 801384e:	7dfb      	ldrb	r3, [r7, #23]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d102      	bne.n	801385a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013854:	8c3b      	ldrh	r3, [r7, #32]
 8013856:	847b      	strh	r3, [r7, #34]	; 0x22
 8013858:	e095      	b.n	8013986 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801385a:	7dfb      	ldrb	r3, [r7, #23]
 801385c:	2b00      	cmp	r3, #0
 801385e:	f000 8092 	beq.w	8013986 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013862:	7dfb      	ldrb	r3, [r7, #23]
 8013864:	2b01      	cmp	r3, #1
 8013866:	d009      	beq.n	801387c <etharp_find_entry+0x80>
 8013868:	7dfb      	ldrb	r3, [r7, #23]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d806      	bhi.n	801387c <etharp_find_entry+0x80>
 801386e:	4b99      	ldr	r3, [pc, #612]	; (8013ad4 <etharp_find_entry+0x2d8>)
 8013870:	f44f 7292 	mov.w	r2, #292	; 0x124
 8013874:	4998      	ldr	r1, [pc, #608]	; (8013ad8 <etharp_find_entry+0x2dc>)
 8013876:	4899      	ldr	r0, [pc, #612]	; (8013adc <etharp_find_entry+0x2e0>)
 8013878:	f002 fafc 	bl	8015e74 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d020      	beq.n	80138c4 <etharp_find_entry+0xc8>
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	6819      	ldr	r1, [r3, #0]
 8013886:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801388a:	4891      	ldr	r0, [pc, #580]	; (8013ad0 <etharp_find_entry+0x2d4>)
 801388c:	4613      	mov	r3, r2
 801388e:	005b      	lsls	r3, r3, #1
 8013890:	4413      	add	r3, r2
 8013892:	00db      	lsls	r3, r3, #3
 8013894:	4403      	add	r3, r0
 8013896:	3304      	adds	r3, #4
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	4299      	cmp	r1, r3
 801389c:	d112      	bne.n	80138c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d00c      	beq.n	80138be <etharp_find_entry+0xc2>
 80138a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138a8:	4989      	ldr	r1, [pc, #548]	; (8013ad0 <etharp_find_entry+0x2d4>)
 80138aa:	4613      	mov	r3, r2
 80138ac:	005b      	lsls	r3, r3, #1
 80138ae:	4413      	add	r3, r2
 80138b0:	00db      	lsls	r3, r3, #3
 80138b2:	440b      	add	r3, r1
 80138b4:	3308      	adds	r3, #8
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d102      	bne.n	80138c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80138be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80138c2:	e100      	b.n	8013ac6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80138c4:	7dfb      	ldrb	r3, [r7, #23]
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	d140      	bne.n	801394c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80138ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ce:	4980      	ldr	r1, [pc, #512]	; (8013ad0 <etharp_find_entry+0x2d4>)
 80138d0:	4613      	mov	r3, r2
 80138d2:	005b      	lsls	r3, r3, #1
 80138d4:	4413      	add	r3, r2
 80138d6:	00db      	lsls	r3, r3, #3
 80138d8:	440b      	add	r3, r1
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d01a      	beq.n	8013916 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80138e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138e4:	497a      	ldr	r1, [pc, #488]	; (8013ad0 <etharp_find_entry+0x2d4>)
 80138e6:	4613      	mov	r3, r2
 80138e8:	005b      	lsls	r3, r3, #1
 80138ea:	4413      	add	r3, r2
 80138ec:	00db      	lsls	r3, r3, #3
 80138ee:	440b      	add	r3, r1
 80138f0:	3312      	adds	r3, #18
 80138f2:	881b      	ldrh	r3, [r3, #0]
 80138f4:	8bba      	ldrh	r2, [r7, #28]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d845      	bhi.n	8013986 <etharp_find_entry+0x18a>
            old_queue = i;
 80138fa:	8c3b      	ldrh	r3, [r7, #32]
 80138fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80138fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013902:	4973      	ldr	r1, [pc, #460]	; (8013ad0 <etharp_find_entry+0x2d4>)
 8013904:	4613      	mov	r3, r2
 8013906:	005b      	lsls	r3, r3, #1
 8013908:	4413      	add	r3, r2
 801390a:	00db      	lsls	r3, r3, #3
 801390c:	440b      	add	r3, r1
 801390e:	3312      	adds	r3, #18
 8013910:	881b      	ldrh	r3, [r3, #0]
 8013912:	83bb      	strh	r3, [r7, #28]
 8013914:	e037      	b.n	8013986 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801391a:	496d      	ldr	r1, [pc, #436]	; (8013ad0 <etharp_find_entry+0x2d4>)
 801391c:	4613      	mov	r3, r2
 801391e:	005b      	lsls	r3, r3, #1
 8013920:	4413      	add	r3, r2
 8013922:	00db      	lsls	r3, r3, #3
 8013924:	440b      	add	r3, r1
 8013926:	3312      	adds	r3, #18
 8013928:	881b      	ldrh	r3, [r3, #0]
 801392a:	8b7a      	ldrh	r2, [r7, #26]
 801392c:	429a      	cmp	r2, r3
 801392e:	d82a      	bhi.n	8013986 <etharp_find_entry+0x18a>
            old_pending = i;
 8013930:	8c3b      	ldrh	r3, [r7, #32]
 8013932:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013934:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013938:	4965      	ldr	r1, [pc, #404]	; (8013ad0 <etharp_find_entry+0x2d4>)
 801393a:	4613      	mov	r3, r2
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	4413      	add	r3, r2
 8013940:	00db      	lsls	r3, r3, #3
 8013942:	440b      	add	r3, r1
 8013944:	3312      	adds	r3, #18
 8013946:	881b      	ldrh	r3, [r3, #0]
 8013948:	837b      	strh	r3, [r7, #26]
 801394a:	e01c      	b.n	8013986 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801394c:	7dfb      	ldrb	r3, [r7, #23]
 801394e:	2b01      	cmp	r3, #1
 8013950:	d919      	bls.n	8013986 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013956:	495e      	ldr	r1, [pc, #376]	; (8013ad0 <etharp_find_entry+0x2d4>)
 8013958:	4613      	mov	r3, r2
 801395a:	005b      	lsls	r3, r3, #1
 801395c:	4413      	add	r3, r2
 801395e:	00db      	lsls	r3, r3, #3
 8013960:	440b      	add	r3, r1
 8013962:	3312      	adds	r3, #18
 8013964:	881b      	ldrh	r3, [r3, #0]
 8013966:	8b3a      	ldrh	r2, [r7, #24]
 8013968:	429a      	cmp	r2, r3
 801396a:	d80c      	bhi.n	8013986 <etharp_find_entry+0x18a>
            old_stable = i;
 801396c:	8c3b      	ldrh	r3, [r7, #32]
 801396e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013970:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013974:	4956      	ldr	r1, [pc, #344]	; (8013ad0 <etharp_find_entry+0x2d4>)
 8013976:	4613      	mov	r3, r2
 8013978:	005b      	lsls	r3, r3, #1
 801397a:	4413      	add	r3, r2
 801397c:	00db      	lsls	r3, r3, #3
 801397e:	440b      	add	r3, r1
 8013980:	3312      	adds	r3, #18
 8013982:	881b      	ldrh	r3, [r3, #0]
 8013984:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013986:	8c3b      	ldrh	r3, [r7, #32]
 8013988:	3301      	adds	r3, #1
 801398a:	b29b      	uxth	r3, r3
 801398c:	843b      	strh	r3, [r7, #32]
 801398e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013992:	2b09      	cmp	r3, #9
 8013994:	f77f af4c 	ble.w	8013830 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013998:	7afb      	ldrb	r3, [r7, #11]
 801399a:	f003 0302 	and.w	r3, r3, #2
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d108      	bne.n	80139b4 <etharp_find_entry+0x1b8>
 80139a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80139a6:	2b0a      	cmp	r3, #10
 80139a8:	d107      	bne.n	80139ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80139aa:	7afb      	ldrb	r3, [r7, #11]
 80139ac:	f003 0301 	and.w	r3, r3, #1
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d102      	bne.n	80139ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80139b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139b8:	e085      	b.n	8013ac6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80139ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80139be:	2b09      	cmp	r3, #9
 80139c0:	dc02      	bgt.n	80139c8 <etharp_find_entry+0x1cc>
    i = empty;
 80139c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139c4:	843b      	strh	r3, [r7, #32]
 80139c6:	e039      	b.n	8013a3c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80139c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80139cc:	2b09      	cmp	r3, #9
 80139ce:	dc14      	bgt.n	80139fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80139d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80139d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139d8:	493d      	ldr	r1, [pc, #244]	; (8013ad0 <etharp_find_entry+0x2d4>)
 80139da:	4613      	mov	r3, r2
 80139dc:	005b      	lsls	r3, r3, #1
 80139de:	4413      	add	r3, r2
 80139e0:	00db      	lsls	r3, r3, #3
 80139e2:	440b      	add	r3, r1
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d018      	beq.n	8013a1c <etharp_find_entry+0x220>
 80139ea:	4b3a      	ldr	r3, [pc, #232]	; (8013ad4 <etharp_find_entry+0x2d8>)
 80139ec:	f240 126d 	movw	r2, #365	; 0x16d
 80139f0:	493b      	ldr	r1, [pc, #236]	; (8013ae0 <etharp_find_entry+0x2e4>)
 80139f2:	483a      	ldr	r0, [pc, #232]	; (8013adc <etharp_find_entry+0x2e0>)
 80139f4:	f002 fa3e 	bl	8015e74 <iprintf>
 80139f8:	e010      	b.n	8013a1c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80139fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80139fe:	2b09      	cmp	r3, #9
 8013a00:	dc02      	bgt.n	8013a08 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013a02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a04:	843b      	strh	r3, [r7, #32]
 8013a06:	e009      	b.n	8013a1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013a08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013a0c:	2b09      	cmp	r3, #9
 8013a0e:	dc02      	bgt.n	8013a16 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013a10:	8bfb      	ldrh	r3, [r7, #30]
 8013a12:	843b      	strh	r3, [r7, #32]
 8013a14:	e002      	b.n	8013a1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a1a:	e054      	b.n	8013ac6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013a1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a20:	2b09      	cmp	r3, #9
 8013a22:	dd06      	ble.n	8013a32 <etharp_find_entry+0x236>
 8013a24:	4b2b      	ldr	r3, [pc, #172]	; (8013ad4 <etharp_find_entry+0x2d8>)
 8013a26:	f240 127f 	movw	r2, #383	; 0x17f
 8013a2a:	492e      	ldr	r1, [pc, #184]	; (8013ae4 <etharp_find_entry+0x2e8>)
 8013a2c:	482b      	ldr	r0, [pc, #172]	; (8013adc <etharp_find_entry+0x2e0>)
 8013a2e:	f002 fa21 	bl	8015e74 <iprintf>
    etharp_free_entry(i);
 8013a32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7ff fe06 	bl	8013648 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013a3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a40:	2b09      	cmp	r3, #9
 8013a42:	dd06      	ble.n	8013a52 <etharp_find_entry+0x256>
 8013a44:	4b23      	ldr	r3, [pc, #140]	; (8013ad4 <etharp_find_entry+0x2d8>)
 8013a46:	f240 1283 	movw	r2, #387	; 0x183
 8013a4a:	4926      	ldr	r1, [pc, #152]	; (8013ae4 <etharp_find_entry+0x2e8>)
 8013a4c:	4823      	ldr	r0, [pc, #140]	; (8013adc <etharp_find_entry+0x2e0>)
 8013a4e:	f002 fa11 	bl	8015e74 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013a52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a56:	491e      	ldr	r1, [pc, #120]	; (8013ad0 <etharp_find_entry+0x2d4>)
 8013a58:	4613      	mov	r3, r2
 8013a5a:	005b      	lsls	r3, r3, #1
 8013a5c:	4413      	add	r3, r2
 8013a5e:	00db      	lsls	r3, r3, #3
 8013a60:	440b      	add	r3, r1
 8013a62:	3314      	adds	r3, #20
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d006      	beq.n	8013a78 <etharp_find_entry+0x27c>
 8013a6a:	4b1a      	ldr	r3, [pc, #104]	; (8013ad4 <etharp_find_entry+0x2d8>)
 8013a6c:	f240 1285 	movw	r2, #389	; 0x185
 8013a70:	491d      	ldr	r1, [pc, #116]	; (8013ae8 <etharp_find_entry+0x2ec>)
 8013a72:	481a      	ldr	r0, [pc, #104]	; (8013adc <etharp_find_entry+0x2e0>)
 8013a74:	f002 f9fe 	bl	8015e74 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d00b      	beq.n	8013a96 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013a7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	6819      	ldr	r1, [r3, #0]
 8013a86:	4812      	ldr	r0, [pc, #72]	; (8013ad0 <etharp_find_entry+0x2d4>)
 8013a88:	4613      	mov	r3, r2
 8013a8a:	005b      	lsls	r3, r3, #1
 8013a8c:	4413      	add	r3, r2
 8013a8e:	00db      	lsls	r3, r3, #3
 8013a90:	4403      	add	r3, r0
 8013a92:	3304      	adds	r3, #4
 8013a94:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013a96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a9a:	490d      	ldr	r1, [pc, #52]	; (8013ad0 <etharp_find_entry+0x2d4>)
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	005b      	lsls	r3, r3, #1
 8013aa0:	4413      	add	r3, r2
 8013aa2:	00db      	lsls	r3, r3, #3
 8013aa4:	440b      	add	r3, r1
 8013aa6:	3312      	adds	r3, #18
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013aac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ab0:	4907      	ldr	r1, [pc, #28]	; (8013ad0 <etharp_find_entry+0x2d4>)
 8013ab2:	4613      	mov	r3, r2
 8013ab4:	005b      	lsls	r3, r3, #1
 8013ab6:	4413      	add	r3, r2
 8013ab8:	00db      	lsls	r3, r3, #3
 8013aba:	440b      	add	r3, r1
 8013abc:	3308      	adds	r3, #8
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013ac2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3728      	adds	r7, #40	; 0x28
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	20004524 	.word	0x20004524
 8013ad4:	080193bc 	.word	0x080193bc
 8013ad8:	080193f4 	.word	0x080193f4
 8013adc:	08019434 	.word	0x08019434
 8013ae0:	0801945c 	.word	0x0801945c
 8013ae4:	08019474 	.word	0x08019474
 8013ae8:	08019488 	.word	0x08019488

08013aec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b088      	sub	sp, #32
 8013af0:	af02      	add	r7, sp, #8
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	607a      	str	r2, [r7, #4]
 8013af8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b00:	2b06      	cmp	r3, #6
 8013b02:	d006      	beq.n	8013b12 <etharp_update_arp_entry+0x26>
 8013b04:	4b48      	ldr	r3, [pc, #288]	; (8013c28 <etharp_update_arp_entry+0x13c>)
 8013b06:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013b0a:	4948      	ldr	r1, [pc, #288]	; (8013c2c <etharp_update_arp_entry+0x140>)
 8013b0c:	4848      	ldr	r0, [pc, #288]	; (8013c30 <etharp_update_arp_entry+0x144>)
 8013b0e:	f002 f9b1 	bl	8015e74 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d012      	beq.n	8013b3e <etharp_update_arp_entry+0x52>
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d00e      	beq.n	8013b3e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	68f9      	ldr	r1, [r7, #12]
 8013b26:	4618      	mov	r0, r3
 8013b28:	f001 f8fc 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 8013b2c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d105      	bne.n	8013b3e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b3a:	2be0      	cmp	r3, #224	; 0xe0
 8013b3c:	d102      	bne.n	8013b44 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013b3e:	f06f 030f 	mvn.w	r3, #15
 8013b42:	e06c      	b.n	8013c1e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013b44:	78fb      	ldrb	r3, [r7, #3]
 8013b46:	68fa      	ldr	r2, [r7, #12]
 8013b48:	4619      	mov	r1, r3
 8013b4a:	68b8      	ldr	r0, [r7, #8]
 8013b4c:	f7ff fe56 	bl	80137fc <etharp_find_entry>
 8013b50:	4603      	mov	r3, r0
 8013b52:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013b54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	da02      	bge.n	8013b62 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013b5c:	8afb      	ldrh	r3, [r7, #22]
 8013b5e:	b25b      	sxtb	r3, r3
 8013b60:	e05d      	b.n	8013c1e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013b62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b66:	4933      	ldr	r1, [pc, #204]	; (8013c34 <etharp_update_arp_entry+0x148>)
 8013b68:	4613      	mov	r3, r2
 8013b6a:	005b      	lsls	r3, r3, #1
 8013b6c:	4413      	add	r3, r2
 8013b6e:	00db      	lsls	r3, r3, #3
 8013b70:	440b      	add	r3, r1
 8013b72:	3314      	adds	r3, #20
 8013b74:	2202      	movs	r2, #2
 8013b76:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013b78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b7c:	492d      	ldr	r1, [pc, #180]	; (8013c34 <etharp_update_arp_entry+0x148>)
 8013b7e:	4613      	mov	r3, r2
 8013b80:	005b      	lsls	r3, r3, #1
 8013b82:	4413      	add	r3, r2
 8013b84:	00db      	lsls	r3, r3, #3
 8013b86:	440b      	add	r3, r1
 8013b88:	3308      	adds	r3, #8
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013b8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b92:	4613      	mov	r3, r2
 8013b94:	005b      	lsls	r3, r3, #1
 8013b96:	4413      	add	r3, r2
 8013b98:	00db      	lsls	r3, r3, #3
 8013b9a:	3308      	adds	r3, #8
 8013b9c:	4a25      	ldr	r2, [pc, #148]	; (8013c34 <etharp_update_arp_entry+0x148>)
 8013b9e:	4413      	add	r3, r2
 8013ba0:	3304      	adds	r3, #4
 8013ba2:	2206      	movs	r2, #6
 8013ba4:	6879      	ldr	r1, [r7, #4]
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f002 f951 	bl	8015e4e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013bac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013bb0:	4920      	ldr	r1, [pc, #128]	; (8013c34 <etharp_update_arp_entry+0x148>)
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	005b      	lsls	r3, r3, #1
 8013bb6:	4413      	add	r3, r2
 8013bb8:	00db      	lsls	r3, r3, #3
 8013bba:	440b      	add	r3, r1
 8013bbc:	3312      	adds	r3, #18
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013bc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013bc6:	491b      	ldr	r1, [pc, #108]	; (8013c34 <etharp_update_arp_entry+0x148>)
 8013bc8:	4613      	mov	r3, r2
 8013bca:	005b      	lsls	r3, r3, #1
 8013bcc:	4413      	add	r3, r2
 8013bce:	00db      	lsls	r3, r3, #3
 8013bd0:	440b      	add	r3, r1
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d021      	beq.n	8013c1c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013bd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013bdc:	4915      	ldr	r1, [pc, #84]	; (8013c34 <etharp_update_arp_entry+0x148>)
 8013bde:	4613      	mov	r3, r2
 8013be0:	005b      	lsls	r3, r3, #1
 8013be2:	4413      	add	r3, r2
 8013be4:	00db      	lsls	r3, r3, #3
 8013be6:	440b      	add	r3, r1
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013bec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013bf0:	4910      	ldr	r1, [pc, #64]	; (8013c34 <etharp_update_arp_entry+0x148>)
 8013bf2:	4613      	mov	r3, r2
 8013bf4:	005b      	lsls	r3, r3, #1
 8013bf6:	4413      	add	r3, r2
 8013bf8:	00db      	lsls	r3, r3, #3
 8013bfa:	440b      	add	r3, r1
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013c0a:	9300      	str	r3, [sp, #0]
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6939      	ldr	r1, [r7, #16]
 8013c10:	68f8      	ldr	r0, [r7, #12]
 8013c12:	f001 ff8b 	bl	8015b2c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013c16:	6938      	ldr	r0, [r7, #16]
 8013c18:	f7f8 fee6 	bl	800c9e8 <pbuf_free>
  }
  return ERR_OK;
 8013c1c:	2300      	movs	r3, #0
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3718      	adds	r7, #24
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}
 8013c26:	bf00      	nop
 8013c28:	080193bc 	.word	0x080193bc
 8013c2c:	080194b4 	.word	0x080194b4
 8013c30:	08019434 	.word	0x08019434
 8013c34:	20004524 	.word	0x20004524

08013c38 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c40:	2300      	movs	r3, #0
 8013c42:	60fb      	str	r3, [r7, #12]
 8013c44:	e01e      	b.n	8013c84 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013c46:	4913      	ldr	r1, [pc, #76]	; (8013c94 <etharp_cleanup_netif+0x5c>)
 8013c48:	68fa      	ldr	r2, [r7, #12]
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	4413      	add	r3, r2
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	440b      	add	r3, r1
 8013c54:	3314      	adds	r3, #20
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013c5a:	7afb      	ldrb	r3, [r7, #11]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d00e      	beq.n	8013c7e <etharp_cleanup_netif+0x46>
 8013c60:	490c      	ldr	r1, [pc, #48]	; (8013c94 <etharp_cleanup_netif+0x5c>)
 8013c62:	68fa      	ldr	r2, [r7, #12]
 8013c64:	4613      	mov	r3, r2
 8013c66:	005b      	lsls	r3, r3, #1
 8013c68:	4413      	add	r3, r2
 8013c6a:	00db      	lsls	r3, r3, #3
 8013c6c:	440b      	add	r3, r1
 8013c6e:	3308      	adds	r3, #8
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d102      	bne.n	8013c7e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013c78:	68f8      	ldr	r0, [r7, #12]
 8013c7a:	f7ff fce5 	bl	8013648 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	3301      	adds	r3, #1
 8013c82:	60fb      	str	r3, [r7, #12]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	2b09      	cmp	r3, #9
 8013c88:	dddd      	ble.n	8013c46 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013c8a:	bf00      	nop
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	20004524 	.word	0x20004524

08013c98 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013c98:	b5b0      	push	{r4, r5, r7, lr}
 8013c9a:	b08a      	sub	sp, #40	; 0x28
 8013c9c:	af04      	add	r7, sp, #16
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d107      	bne.n	8013cb8 <etharp_input+0x20>
 8013ca8:	4b3d      	ldr	r3, [pc, #244]	; (8013da0 <etharp_input+0x108>)
 8013caa:	f240 228a 	movw	r2, #650	; 0x28a
 8013cae:	493d      	ldr	r1, [pc, #244]	; (8013da4 <etharp_input+0x10c>)
 8013cb0:	483d      	ldr	r0, [pc, #244]	; (8013da8 <etharp_input+0x110>)
 8013cb2:	f002 f8df 	bl	8015e74 <iprintf>
 8013cb6:	e06f      	b.n	8013d98 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013cbe:	693b      	ldr	r3, [r7, #16]
 8013cc0:	881b      	ldrh	r3, [r3, #0]
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013cc8:	d10c      	bne.n	8013ce4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013cca:	693b      	ldr	r3, [r7, #16]
 8013ccc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013cce:	2b06      	cmp	r3, #6
 8013cd0:	d108      	bne.n	8013ce4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013cd6:	2b04      	cmp	r3, #4
 8013cd8:	d104      	bne.n	8013ce4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013cda:	693b      	ldr	r3, [r7, #16]
 8013cdc:	885b      	ldrh	r3, [r3, #2]
 8013cde:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013ce0:	2b08      	cmp	r3, #8
 8013ce2:	d003      	beq.n	8013cec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f7f8 fe7f 	bl	800c9e8 <pbuf_free>
    return;
 8013cea:	e055      	b.n	8013d98 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	330e      	adds	r3, #14
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	3318      	adds	r3, #24
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	3304      	adds	r3, #4
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d102      	bne.n	8013d0c <etharp_input+0x74>
    for_us = 0;
 8013d06:	2300      	movs	r3, #0
 8013d08:	75fb      	strb	r3, [r7, #23]
 8013d0a:	e009      	b.n	8013d20 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013d0c:	68ba      	ldr	r2, [r7, #8]
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	3304      	adds	r3, #4
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	429a      	cmp	r2, r3
 8013d16:	bf0c      	ite	eq
 8013d18:	2301      	moveq	r3, #1
 8013d1a:	2300      	movne	r3, #0
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013d20:	693b      	ldr	r3, [r7, #16]
 8013d22:	f103 0208 	add.w	r2, r3, #8
 8013d26:	7dfb      	ldrb	r3, [r7, #23]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d001      	beq.n	8013d30 <etharp_input+0x98>
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	e000      	b.n	8013d32 <etharp_input+0x9a>
 8013d30:	2302      	movs	r3, #2
 8013d32:	f107 010c 	add.w	r1, r7, #12
 8013d36:	6838      	ldr	r0, [r7, #0]
 8013d38:	f7ff fed8 	bl	8013aec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	88db      	ldrh	r3, [r3, #6]
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013d46:	d003      	beq.n	8013d50 <etharp_input+0xb8>
 8013d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d4c:	d01e      	beq.n	8013d8c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013d4e:	e020      	b.n	8013d92 <etharp_input+0xfa>
      if (for_us) {
 8013d50:	7dfb      	ldrb	r3, [r7, #23]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d01c      	beq.n	8013d90 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013d68:	683b      	ldr	r3, [r7, #0]
 8013d6a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013d6c:	693a      	ldr	r2, [r7, #16]
 8013d6e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013d70:	2102      	movs	r1, #2
 8013d72:	9103      	str	r1, [sp, #12]
 8013d74:	f107 010c 	add.w	r1, r7, #12
 8013d78:	9102      	str	r1, [sp, #8]
 8013d7a:	9201      	str	r2, [sp, #4]
 8013d7c:	9300      	str	r3, [sp, #0]
 8013d7e:	462b      	mov	r3, r5
 8013d80:	4622      	mov	r2, r4
 8013d82:	4601      	mov	r1, r0
 8013d84:	6838      	ldr	r0, [r7, #0]
 8013d86:	f000 faeb 	bl	8014360 <etharp_raw>
      break;
 8013d8a:	e001      	b.n	8013d90 <etharp_input+0xf8>
      break;
 8013d8c:	bf00      	nop
 8013d8e:	e000      	b.n	8013d92 <etharp_input+0xfa>
      break;
 8013d90:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013d92:	6878      	ldr	r0, [r7, #4]
 8013d94:	f7f8 fe28 	bl	800c9e8 <pbuf_free>
}
 8013d98:	3718      	adds	r7, #24
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	080193bc 	.word	0x080193bc
 8013da4:	0801950c 	.word	0x0801950c
 8013da8:	08019434 	.word	0x08019434

08013dac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b086      	sub	sp, #24
 8013db0:	af02      	add	r7, sp, #8
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	4613      	mov	r3, r2
 8013db8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013dba:	79fa      	ldrb	r2, [r7, #7]
 8013dbc:	4944      	ldr	r1, [pc, #272]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013dbe:	4613      	mov	r3, r2
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	4413      	add	r3, r2
 8013dc4:	00db      	lsls	r3, r3, #3
 8013dc6:	440b      	add	r3, r1
 8013dc8:	3314      	adds	r3, #20
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	2b01      	cmp	r3, #1
 8013dce:	d806      	bhi.n	8013dde <etharp_output_to_arp_index+0x32>
 8013dd0:	4b40      	ldr	r3, [pc, #256]	; (8013ed4 <etharp_output_to_arp_index+0x128>)
 8013dd2:	f240 22ef 	movw	r2, #751	; 0x2ef
 8013dd6:	4940      	ldr	r1, [pc, #256]	; (8013ed8 <etharp_output_to_arp_index+0x12c>)
 8013dd8:	4840      	ldr	r0, [pc, #256]	; (8013edc <etharp_output_to_arp_index+0x130>)
 8013dda:	f002 f84b 	bl	8015e74 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013dde:	79fa      	ldrb	r2, [r7, #7]
 8013de0:	493b      	ldr	r1, [pc, #236]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013de2:	4613      	mov	r3, r2
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	4413      	add	r3, r2
 8013de8:	00db      	lsls	r3, r3, #3
 8013dea:	440b      	add	r3, r1
 8013dec:	3314      	adds	r3, #20
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	2b02      	cmp	r3, #2
 8013df2:	d153      	bne.n	8013e9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013df4:	79fa      	ldrb	r2, [r7, #7]
 8013df6:	4936      	ldr	r1, [pc, #216]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013df8:	4613      	mov	r3, r2
 8013dfa:	005b      	lsls	r3, r3, #1
 8013dfc:	4413      	add	r3, r2
 8013dfe:	00db      	lsls	r3, r3, #3
 8013e00:	440b      	add	r3, r1
 8013e02:	3312      	adds	r3, #18
 8013e04:	881b      	ldrh	r3, [r3, #0]
 8013e06:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013e0a:	d919      	bls.n	8013e40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013e0c:	79fa      	ldrb	r2, [r7, #7]
 8013e0e:	4613      	mov	r3, r2
 8013e10:	005b      	lsls	r3, r3, #1
 8013e12:	4413      	add	r3, r2
 8013e14:	00db      	lsls	r3, r3, #3
 8013e16:	4a2e      	ldr	r2, [pc, #184]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013e18:	4413      	add	r3, r2
 8013e1a:	3304      	adds	r3, #4
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	68f8      	ldr	r0, [r7, #12]
 8013e20:	f000 fb4c 	bl	80144bc <etharp_request>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d138      	bne.n	8013e9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013e2a:	79fa      	ldrb	r2, [r7, #7]
 8013e2c:	4928      	ldr	r1, [pc, #160]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013e2e:	4613      	mov	r3, r2
 8013e30:	005b      	lsls	r3, r3, #1
 8013e32:	4413      	add	r3, r2
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	440b      	add	r3, r1
 8013e38:	3314      	adds	r3, #20
 8013e3a:	2203      	movs	r2, #3
 8013e3c:	701a      	strb	r2, [r3, #0]
 8013e3e:	e02d      	b.n	8013e9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013e40:	79fa      	ldrb	r2, [r7, #7]
 8013e42:	4923      	ldr	r1, [pc, #140]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013e44:	4613      	mov	r3, r2
 8013e46:	005b      	lsls	r3, r3, #1
 8013e48:	4413      	add	r3, r2
 8013e4a:	00db      	lsls	r3, r3, #3
 8013e4c:	440b      	add	r3, r1
 8013e4e:	3312      	adds	r3, #18
 8013e50:	881b      	ldrh	r3, [r3, #0]
 8013e52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013e56:	d321      	bcc.n	8013e9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013e58:	79fa      	ldrb	r2, [r7, #7]
 8013e5a:	4613      	mov	r3, r2
 8013e5c:	005b      	lsls	r3, r3, #1
 8013e5e:	4413      	add	r3, r2
 8013e60:	00db      	lsls	r3, r3, #3
 8013e62:	4a1b      	ldr	r2, [pc, #108]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013e64:	4413      	add	r3, r2
 8013e66:	1d19      	adds	r1, r3, #4
 8013e68:	79fa      	ldrb	r2, [r7, #7]
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	005b      	lsls	r3, r3, #1
 8013e6e:	4413      	add	r3, r2
 8013e70:	00db      	lsls	r3, r3, #3
 8013e72:	3308      	adds	r3, #8
 8013e74:	4a16      	ldr	r2, [pc, #88]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013e76:	4413      	add	r3, r2
 8013e78:	3304      	adds	r3, #4
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f000 fafb 	bl	8014478 <etharp_request_dst>
 8013e82:	4603      	mov	r3, r0
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d109      	bne.n	8013e9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013e88:	79fa      	ldrb	r2, [r7, #7]
 8013e8a:	4911      	ldr	r1, [pc, #68]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	005b      	lsls	r3, r3, #1
 8013e90:	4413      	add	r3, r2
 8013e92:	00db      	lsls	r3, r3, #3
 8013e94:	440b      	add	r3, r1
 8013e96:	3314      	adds	r3, #20
 8013e98:	2203      	movs	r2, #3
 8013e9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013ea2:	79fa      	ldrb	r2, [r7, #7]
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	005b      	lsls	r3, r3, #1
 8013ea8:	4413      	add	r3, r2
 8013eaa:	00db      	lsls	r3, r3, #3
 8013eac:	3308      	adds	r3, #8
 8013eae:	4a08      	ldr	r2, [pc, #32]	; (8013ed0 <etharp_output_to_arp_index+0x124>)
 8013eb0:	4413      	add	r3, r2
 8013eb2:	1d1a      	adds	r2, r3, #4
 8013eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013eb8:	9300      	str	r3, [sp, #0]
 8013eba:	4613      	mov	r3, r2
 8013ebc:	460a      	mov	r2, r1
 8013ebe:	68b9      	ldr	r1, [r7, #8]
 8013ec0:	68f8      	ldr	r0, [r7, #12]
 8013ec2:	f001 fe33 	bl	8015b2c <ethernet_output>
 8013ec6:	4603      	mov	r3, r0
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3710      	adds	r7, #16
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}
 8013ed0:	20004524 	.word	0x20004524
 8013ed4:	080193bc 	.word	0x080193bc
 8013ed8:	0801952c 	.word	0x0801952c
 8013edc:	08019434 	.word	0x08019434

08013ee0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b08a      	sub	sp, #40	; 0x28
 8013ee4:	af02      	add	r7, sp, #8
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d106      	bne.n	8013f04 <etharp_output+0x24>
 8013ef6:	4b73      	ldr	r3, [pc, #460]	; (80140c4 <etharp_output+0x1e4>)
 8013ef8:	f240 321e 	movw	r2, #798	; 0x31e
 8013efc:	4972      	ldr	r1, [pc, #456]	; (80140c8 <etharp_output+0x1e8>)
 8013efe:	4873      	ldr	r0, [pc, #460]	; (80140cc <etharp_output+0x1ec>)
 8013f00:	f001 ffb8 	bl	8015e74 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d106      	bne.n	8013f18 <etharp_output+0x38>
 8013f0a:	4b6e      	ldr	r3, [pc, #440]	; (80140c4 <etharp_output+0x1e4>)
 8013f0c:	f240 321f 	movw	r2, #799	; 0x31f
 8013f10:	496f      	ldr	r1, [pc, #444]	; (80140d0 <etharp_output+0x1f0>)
 8013f12:	486e      	ldr	r0, [pc, #440]	; (80140cc <etharp_output+0x1ec>)
 8013f14:	f001 ffae 	bl	8015e74 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d106      	bne.n	8013f2c <etharp_output+0x4c>
 8013f1e:	4b69      	ldr	r3, [pc, #420]	; (80140c4 <etharp_output+0x1e4>)
 8013f20:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013f24:	496b      	ldr	r1, [pc, #428]	; (80140d4 <etharp_output+0x1f4>)
 8013f26:	4869      	ldr	r0, [pc, #420]	; (80140cc <etharp_output+0x1ec>)
 8013f28:	f001 ffa4 	bl	8015e74 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	68f9      	ldr	r1, [r7, #12]
 8013f32:	4618      	mov	r0, r3
 8013f34:	f000 fef6 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d002      	beq.n	8013f44 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013f3e:	4b66      	ldr	r3, [pc, #408]	; (80140d8 <etharp_output+0x1f8>)
 8013f40:	61fb      	str	r3, [r7, #28]
 8013f42:	e0af      	b.n	80140a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f4c:	2be0      	cmp	r3, #224	; 0xe0
 8013f4e:	d118      	bne.n	8013f82 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013f50:	2301      	movs	r3, #1
 8013f52:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013f54:	2300      	movs	r3, #0
 8013f56:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013f58:	235e      	movs	r3, #94	; 0x5e
 8013f5a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	3301      	adds	r3, #1
 8013f60:	781b      	ldrb	r3, [r3, #0]
 8013f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f66:	b2db      	uxtb	r3, r3
 8013f68:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	3302      	adds	r3, #2
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	3303      	adds	r3, #3
 8013f76:	781b      	ldrb	r3, [r3, #0]
 8013f78:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013f7a:	f107 0310 	add.w	r3, r7, #16
 8013f7e:	61fb      	str	r3, [r7, #28]
 8013f80:	e090      	b.n	80140a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681a      	ldr	r2, [r3, #0]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	3304      	adds	r3, #4
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	405a      	eors	r2, r3
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	3308      	adds	r3, #8
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4013      	ands	r3, r2
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d012      	beq.n	8013fc0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013fa0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	d00b      	beq.n	8013fc0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	330c      	adds	r3, #12
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d003      	beq.n	8013fba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	330c      	adds	r3, #12
 8013fb6:	61bb      	str	r3, [r7, #24]
 8013fb8:	e002      	b.n	8013fc0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013fba:	f06f 0303 	mvn.w	r3, #3
 8013fbe:	e07d      	b.n	80140bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013fc0:	4b46      	ldr	r3, [pc, #280]	; (80140dc <etharp_output+0x1fc>)
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	4a46      	ldr	r2, [pc, #280]	; (80140e0 <etharp_output+0x200>)
 8013fc8:	460b      	mov	r3, r1
 8013fca:	005b      	lsls	r3, r3, #1
 8013fcc:	440b      	add	r3, r1
 8013fce:	00db      	lsls	r3, r3, #3
 8013fd0:	4413      	add	r3, r2
 8013fd2:	3314      	adds	r3, #20
 8013fd4:	781b      	ldrb	r3, [r3, #0]
 8013fd6:	2b01      	cmp	r3, #1
 8013fd8:	d925      	bls.n	8014026 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013fda:	4b40      	ldr	r3, [pc, #256]	; (80140dc <etharp_output+0x1fc>)
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	4619      	mov	r1, r3
 8013fe0:	4a3f      	ldr	r2, [pc, #252]	; (80140e0 <etharp_output+0x200>)
 8013fe2:	460b      	mov	r3, r1
 8013fe4:	005b      	lsls	r3, r3, #1
 8013fe6:	440b      	add	r3, r1
 8013fe8:	00db      	lsls	r3, r3, #3
 8013fea:	4413      	add	r3, r2
 8013fec:	3308      	adds	r3, #8
 8013fee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	429a      	cmp	r2, r3
 8013ff4:	d117      	bne.n	8014026 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013ff6:	69bb      	ldr	r3, [r7, #24]
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	4b38      	ldr	r3, [pc, #224]	; (80140dc <etharp_output+0x1fc>)
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	4618      	mov	r0, r3
 8014000:	4937      	ldr	r1, [pc, #220]	; (80140e0 <etharp_output+0x200>)
 8014002:	4603      	mov	r3, r0
 8014004:	005b      	lsls	r3, r3, #1
 8014006:	4403      	add	r3, r0
 8014008:	00db      	lsls	r3, r3, #3
 801400a:	440b      	add	r3, r1
 801400c:	3304      	adds	r3, #4
 801400e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014010:	429a      	cmp	r2, r3
 8014012:	d108      	bne.n	8014026 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014014:	4b31      	ldr	r3, [pc, #196]	; (80140dc <etharp_output+0x1fc>)
 8014016:	781b      	ldrb	r3, [r3, #0]
 8014018:	461a      	mov	r2, r3
 801401a:	68b9      	ldr	r1, [r7, #8]
 801401c:	68f8      	ldr	r0, [r7, #12]
 801401e:	f7ff fec5 	bl	8013dac <etharp_output_to_arp_index>
 8014022:	4603      	mov	r3, r0
 8014024:	e04a      	b.n	80140bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014026:	2300      	movs	r3, #0
 8014028:	75fb      	strb	r3, [r7, #23]
 801402a:	e031      	b.n	8014090 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801402c:	7dfa      	ldrb	r2, [r7, #23]
 801402e:	492c      	ldr	r1, [pc, #176]	; (80140e0 <etharp_output+0x200>)
 8014030:	4613      	mov	r3, r2
 8014032:	005b      	lsls	r3, r3, #1
 8014034:	4413      	add	r3, r2
 8014036:	00db      	lsls	r3, r3, #3
 8014038:	440b      	add	r3, r1
 801403a:	3314      	adds	r3, #20
 801403c:	781b      	ldrb	r3, [r3, #0]
 801403e:	2b01      	cmp	r3, #1
 8014040:	d923      	bls.n	801408a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014042:	7dfa      	ldrb	r2, [r7, #23]
 8014044:	4926      	ldr	r1, [pc, #152]	; (80140e0 <etharp_output+0x200>)
 8014046:	4613      	mov	r3, r2
 8014048:	005b      	lsls	r3, r3, #1
 801404a:	4413      	add	r3, r2
 801404c:	00db      	lsls	r3, r3, #3
 801404e:	440b      	add	r3, r1
 8014050:	3308      	adds	r3, #8
 8014052:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014054:	68fa      	ldr	r2, [r7, #12]
 8014056:	429a      	cmp	r2, r3
 8014058:	d117      	bne.n	801408a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	6819      	ldr	r1, [r3, #0]
 801405e:	7dfa      	ldrb	r2, [r7, #23]
 8014060:	481f      	ldr	r0, [pc, #124]	; (80140e0 <etharp_output+0x200>)
 8014062:	4613      	mov	r3, r2
 8014064:	005b      	lsls	r3, r3, #1
 8014066:	4413      	add	r3, r2
 8014068:	00db      	lsls	r3, r3, #3
 801406a:	4403      	add	r3, r0
 801406c:	3304      	adds	r3, #4
 801406e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014070:	4299      	cmp	r1, r3
 8014072:	d10a      	bne.n	801408a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014074:	4a19      	ldr	r2, [pc, #100]	; (80140dc <etharp_output+0x1fc>)
 8014076:	7dfb      	ldrb	r3, [r7, #23]
 8014078:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801407a:	7dfb      	ldrb	r3, [r7, #23]
 801407c:	461a      	mov	r2, r3
 801407e:	68b9      	ldr	r1, [r7, #8]
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f7ff fe93 	bl	8013dac <etharp_output_to_arp_index>
 8014086:	4603      	mov	r3, r0
 8014088:	e018      	b.n	80140bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801408a:	7dfb      	ldrb	r3, [r7, #23]
 801408c:	3301      	adds	r3, #1
 801408e:	75fb      	strb	r3, [r7, #23]
 8014090:	7dfb      	ldrb	r3, [r7, #23]
 8014092:	2b09      	cmp	r3, #9
 8014094:	d9ca      	bls.n	801402c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014096:	68ba      	ldr	r2, [r7, #8]
 8014098:	69b9      	ldr	r1, [r7, #24]
 801409a:	68f8      	ldr	r0, [r7, #12]
 801409c:	f000 f822 	bl	80140e4 <etharp_query>
 80140a0:	4603      	mov	r3, r0
 80140a2:	e00b      	b.n	80140bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80140aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80140ae:	9300      	str	r3, [sp, #0]
 80140b0:	69fb      	ldr	r3, [r7, #28]
 80140b2:	68b9      	ldr	r1, [r7, #8]
 80140b4:	68f8      	ldr	r0, [r7, #12]
 80140b6:	f001 fd39 	bl	8015b2c <ethernet_output>
 80140ba:	4603      	mov	r3, r0
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3720      	adds	r7, #32
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}
 80140c4:	080193bc 	.word	0x080193bc
 80140c8:	0801950c 	.word	0x0801950c
 80140cc:	08019434 	.word	0x08019434
 80140d0:	0801955c 	.word	0x0801955c
 80140d4:	080194fc 	.word	0x080194fc
 80140d8:	0802a6f4 	.word	0x0802a6f4
 80140dc:	20004614 	.word	0x20004614
 80140e0:	20004524 	.word	0x20004524

080140e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b08c      	sub	sp, #48	; 0x30
 80140e8:	af02      	add	r7, sp, #8
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	3326      	adds	r3, #38	; 0x26
 80140f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80140f6:	23ff      	movs	r3, #255	; 0xff
 80140f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80140fc:	2300      	movs	r3, #0
 80140fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	68f9      	ldr	r1, [r7, #12]
 8014106:	4618      	mov	r0, r3
 8014108:	f000 fe0c 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 801410c:	4603      	mov	r3, r0
 801410e:	2b00      	cmp	r3, #0
 8014110:	d10c      	bne.n	801412c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801411a:	2be0      	cmp	r3, #224	; 0xe0
 801411c:	d006      	beq.n	801412c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d003      	beq.n	801412c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d102      	bne.n	8014132 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801412c:	f06f 030f 	mvn.w	r3, #15
 8014130:	e102      	b.n	8014338 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014132:	68fa      	ldr	r2, [r7, #12]
 8014134:	2101      	movs	r1, #1
 8014136:	68b8      	ldr	r0, [r7, #8]
 8014138:	f7ff fb60 	bl	80137fc <etharp_find_entry>
 801413c:	4603      	mov	r3, r0
 801413e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014140:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014144:	2b00      	cmp	r3, #0
 8014146:	da02      	bge.n	801414e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014148:	8a7b      	ldrh	r3, [r7, #18]
 801414a:	b25b      	sxtb	r3, r3
 801414c:	e0f4      	b.n	8014338 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801414e:	8a7b      	ldrh	r3, [r7, #18]
 8014150:	2b7e      	cmp	r3, #126	; 0x7e
 8014152:	d906      	bls.n	8014162 <etharp_query+0x7e>
 8014154:	4b7a      	ldr	r3, [pc, #488]	; (8014340 <etharp_query+0x25c>)
 8014156:	f240 32c1 	movw	r2, #961	; 0x3c1
 801415a:	497a      	ldr	r1, [pc, #488]	; (8014344 <etharp_query+0x260>)
 801415c:	487a      	ldr	r0, [pc, #488]	; (8014348 <etharp_query+0x264>)
 801415e:	f001 fe89 	bl	8015e74 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014162:	8a7b      	ldrh	r3, [r7, #18]
 8014164:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014166:	7c7a      	ldrb	r2, [r7, #17]
 8014168:	4978      	ldr	r1, [pc, #480]	; (801434c <etharp_query+0x268>)
 801416a:	4613      	mov	r3, r2
 801416c:	005b      	lsls	r3, r3, #1
 801416e:	4413      	add	r3, r2
 8014170:	00db      	lsls	r3, r3, #3
 8014172:	440b      	add	r3, r1
 8014174:	3314      	adds	r3, #20
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d115      	bne.n	80141a8 <etharp_query+0xc4>
    is_new_entry = 1;
 801417c:	2301      	movs	r3, #1
 801417e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014180:	7c7a      	ldrb	r2, [r7, #17]
 8014182:	4972      	ldr	r1, [pc, #456]	; (801434c <etharp_query+0x268>)
 8014184:	4613      	mov	r3, r2
 8014186:	005b      	lsls	r3, r3, #1
 8014188:	4413      	add	r3, r2
 801418a:	00db      	lsls	r3, r3, #3
 801418c:	440b      	add	r3, r1
 801418e:	3314      	adds	r3, #20
 8014190:	2201      	movs	r2, #1
 8014192:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014194:	7c7a      	ldrb	r2, [r7, #17]
 8014196:	496d      	ldr	r1, [pc, #436]	; (801434c <etharp_query+0x268>)
 8014198:	4613      	mov	r3, r2
 801419a:	005b      	lsls	r3, r3, #1
 801419c:	4413      	add	r3, r2
 801419e:	00db      	lsls	r3, r3, #3
 80141a0:	440b      	add	r3, r1
 80141a2:	3308      	adds	r3, #8
 80141a4:	68fa      	ldr	r2, [r7, #12]
 80141a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80141a8:	7c7a      	ldrb	r2, [r7, #17]
 80141aa:	4968      	ldr	r1, [pc, #416]	; (801434c <etharp_query+0x268>)
 80141ac:	4613      	mov	r3, r2
 80141ae:	005b      	lsls	r3, r3, #1
 80141b0:	4413      	add	r3, r2
 80141b2:	00db      	lsls	r3, r3, #3
 80141b4:	440b      	add	r3, r1
 80141b6:	3314      	adds	r3, #20
 80141b8:	781b      	ldrb	r3, [r3, #0]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d011      	beq.n	80141e2 <etharp_query+0xfe>
 80141be:	7c7a      	ldrb	r2, [r7, #17]
 80141c0:	4962      	ldr	r1, [pc, #392]	; (801434c <etharp_query+0x268>)
 80141c2:	4613      	mov	r3, r2
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	4413      	add	r3, r2
 80141c8:	00db      	lsls	r3, r3, #3
 80141ca:	440b      	add	r3, r1
 80141cc:	3314      	adds	r3, #20
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	d806      	bhi.n	80141e2 <etharp_query+0xfe>
 80141d4:	4b5a      	ldr	r3, [pc, #360]	; (8014340 <etharp_query+0x25c>)
 80141d6:	f240 32cf 	movw	r2, #975	; 0x3cf
 80141da:	495d      	ldr	r1, [pc, #372]	; (8014350 <etharp_query+0x26c>)
 80141dc:	485a      	ldr	r0, [pc, #360]	; (8014348 <etharp_query+0x264>)
 80141de:	f001 fe49 	bl	8015e74 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80141e2:	6a3b      	ldr	r3, [r7, #32]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d102      	bne.n	80141ee <etharp_query+0x10a>
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d10c      	bne.n	8014208 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80141ee:	68b9      	ldr	r1, [r7, #8]
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	f000 f963 	bl	80144bc <etharp_request>
 80141f6:	4603      	mov	r3, r0
 80141f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d102      	bne.n	8014208 <etharp_query+0x124>
      return result;
 8014202:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014206:	e097      	b.n	8014338 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d106      	bne.n	801421c <etharp_query+0x138>
 801420e:	4b4c      	ldr	r3, [pc, #304]	; (8014340 <etharp_query+0x25c>)
 8014210:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014214:	494f      	ldr	r1, [pc, #316]	; (8014354 <etharp_query+0x270>)
 8014216:	484c      	ldr	r0, [pc, #304]	; (8014348 <etharp_query+0x264>)
 8014218:	f001 fe2c 	bl	8015e74 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801421c:	7c7a      	ldrb	r2, [r7, #17]
 801421e:	494b      	ldr	r1, [pc, #300]	; (801434c <etharp_query+0x268>)
 8014220:	4613      	mov	r3, r2
 8014222:	005b      	lsls	r3, r3, #1
 8014224:	4413      	add	r3, r2
 8014226:	00db      	lsls	r3, r3, #3
 8014228:	440b      	add	r3, r1
 801422a:	3314      	adds	r3, #20
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	2b01      	cmp	r3, #1
 8014230:	d918      	bls.n	8014264 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014232:	4a49      	ldr	r2, [pc, #292]	; (8014358 <etharp_query+0x274>)
 8014234:	7c7b      	ldrb	r3, [r7, #17]
 8014236:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014238:	7c7a      	ldrb	r2, [r7, #17]
 801423a:	4613      	mov	r3, r2
 801423c:	005b      	lsls	r3, r3, #1
 801423e:	4413      	add	r3, r2
 8014240:	00db      	lsls	r3, r3, #3
 8014242:	3308      	adds	r3, #8
 8014244:	4a41      	ldr	r2, [pc, #260]	; (801434c <etharp_query+0x268>)
 8014246:	4413      	add	r3, r2
 8014248:	1d1a      	adds	r2, r3, #4
 801424a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	4613      	mov	r3, r2
 8014252:	697a      	ldr	r2, [r7, #20]
 8014254:	6879      	ldr	r1, [r7, #4]
 8014256:	68f8      	ldr	r0, [r7, #12]
 8014258:	f001 fc68 	bl	8015b2c <ethernet_output>
 801425c:	4603      	mov	r3, r0
 801425e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014262:	e067      	b.n	8014334 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014264:	7c7a      	ldrb	r2, [r7, #17]
 8014266:	4939      	ldr	r1, [pc, #228]	; (801434c <etharp_query+0x268>)
 8014268:	4613      	mov	r3, r2
 801426a:	005b      	lsls	r3, r3, #1
 801426c:	4413      	add	r3, r2
 801426e:	00db      	lsls	r3, r3, #3
 8014270:	440b      	add	r3, r1
 8014272:	3314      	adds	r3, #20
 8014274:	781b      	ldrb	r3, [r3, #0]
 8014276:	2b01      	cmp	r3, #1
 8014278:	d15c      	bne.n	8014334 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801427a:	2300      	movs	r3, #0
 801427c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014282:	e01c      	b.n	80142be <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	895a      	ldrh	r2, [r3, #10]
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	891b      	ldrh	r3, [r3, #8]
 801428c:	429a      	cmp	r2, r3
 801428e:	d10a      	bne.n	80142a6 <etharp_query+0x1c2>
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d006      	beq.n	80142a6 <etharp_query+0x1c2>
 8014298:	4b29      	ldr	r3, [pc, #164]	; (8014340 <etharp_query+0x25c>)
 801429a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801429e:	492f      	ldr	r1, [pc, #188]	; (801435c <etharp_query+0x278>)
 80142a0:	4829      	ldr	r0, [pc, #164]	; (8014348 <etharp_query+0x264>)
 80142a2:	f001 fde7 	bl	8015e74 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	7b1b      	ldrb	r3, [r3, #12]
 80142aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d002      	beq.n	80142b8 <etharp_query+0x1d4>
        copy_needed = 1;
 80142b2:	2301      	movs	r3, #1
 80142b4:	61bb      	str	r3, [r7, #24]
        break;
 80142b6:	e005      	b.n	80142c4 <etharp_query+0x1e0>
      }
      p = p->next;
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	61fb      	str	r3, [r7, #28]
    while (p) {
 80142be:	69fb      	ldr	r3, [r7, #28]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d1df      	bne.n	8014284 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80142c4:	69bb      	ldr	r3, [r7, #24]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d007      	beq.n	80142da <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80142ca:	687a      	ldr	r2, [r7, #4]
 80142cc:	f44f 7120 	mov.w	r1, #640	; 0x280
 80142d0:	200e      	movs	r0, #14
 80142d2:	f7f8 fdf1 	bl	800ceb8 <pbuf_clone>
 80142d6:	61f8      	str	r0, [r7, #28]
 80142d8:	e004      	b.n	80142e4 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80142de:	69f8      	ldr	r0, [r7, #28]
 80142e0:	f7f8 fc28 	bl	800cb34 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80142e4:	69fb      	ldr	r3, [r7, #28]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d021      	beq.n	801432e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80142ea:	7c7a      	ldrb	r2, [r7, #17]
 80142ec:	4917      	ldr	r1, [pc, #92]	; (801434c <etharp_query+0x268>)
 80142ee:	4613      	mov	r3, r2
 80142f0:	005b      	lsls	r3, r3, #1
 80142f2:	4413      	add	r3, r2
 80142f4:	00db      	lsls	r3, r3, #3
 80142f6:	440b      	add	r3, r1
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d00a      	beq.n	8014314 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80142fe:	7c7a      	ldrb	r2, [r7, #17]
 8014300:	4912      	ldr	r1, [pc, #72]	; (801434c <etharp_query+0x268>)
 8014302:	4613      	mov	r3, r2
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	4413      	add	r3, r2
 8014308:	00db      	lsls	r3, r3, #3
 801430a:	440b      	add	r3, r1
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	4618      	mov	r0, r3
 8014310:	f7f8 fb6a 	bl	800c9e8 <pbuf_free>
      }
      arp_table[i].q = p;
 8014314:	7c7a      	ldrb	r2, [r7, #17]
 8014316:	490d      	ldr	r1, [pc, #52]	; (801434c <etharp_query+0x268>)
 8014318:	4613      	mov	r3, r2
 801431a:	005b      	lsls	r3, r3, #1
 801431c:	4413      	add	r3, r2
 801431e:	00db      	lsls	r3, r3, #3
 8014320:	440b      	add	r3, r1
 8014322:	69fa      	ldr	r2, [r7, #28]
 8014324:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014326:	2300      	movs	r3, #0
 8014328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801432c:	e002      	b.n	8014334 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801432e:	23ff      	movs	r3, #255	; 0xff
 8014330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014338:	4618      	mov	r0, r3
 801433a:	3728      	adds	r7, #40	; 0x28
 801433c:	46bd      	mov	sp, r7
 801433e:	bd80      	pop	{r7, pc}
 8014340:	080193bc 	.word	0x080193bc
 8014344:	08019568 	.word	0x08019568
 8014348:	08019434 	.word	0x08019434
 801434c:	20004524 	.word	0x20004524
 8014350:	08019578 	.word	0x08019578
 8014354:	0801955c 	.word	0x0801955c
 8014358:	20004614 	.word	0x20004614
 801435c:	080195a0 	.word	0x080195a0

08014360 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b08a      	sub	sp, #40	; 0x28
 8014364:	af02      	add	r7, sp, #8
 8014366:	60f8      	str	r0, [r7, #12]
 8014368:	60b9      	str	r1, [r7, #8]
 801436a:	607a      	str	r2, [r7, #4]
 801436c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801436e:	2300      	movs	r3, #0
 8014370:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d106      	bne.n	8014386 <etharp_raw+0x26>
 8014378:	4b3a      	ldr	r3, [pc, #232]	; (8014464 <etharp_raw+0x104>)
 801437a:	f240 4257 	movw	r2, #1111	; 0x457
 801437e:	493a      	ldr	r1, [pc, #232]	; (8014468 <etharp_raw+0x108>)
 8014380:	483a      	ldr	r0, [pc, #232]	; (801446c <etharp_raw+0x10c>)
 8014382:	f001 fd77 	bl	8015e74 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014386:	f44f 7220 	mov.w	r2, #640	; 0x280
 801438a:	211c      	movs	r1, #28
 801438c:	200e      	movs	r0, #14
 801438e:	f7f8 f84b 	bl	800c428 <pbuf_alloc>
 8014392:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d102      	bne.n	80143a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801439a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801439e:	e05d      	b.n	801445c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80143a0:	69bb      	ldr	r3, [r7, #24]
 80143a2:	895b      	ldrh	r3, [r3, #10]
 80143a4:	2b1b      	cmp	r3, #27
 80143a6:	d806      	bhi.n	80143b6 <etharp_raw+0x56>
 80143a8:	4b2e      	ldr	r3, [pc, #184]	; (8014464 <etharp_raw+0x104>)
 80143aa:	f240 4263 	movw	r2, #1123	; 0x463
 80143ae:	4930      	ldr	r1, [pc, #192]	; (8014470 <etharp_raw+0x110>)
 80143b0:	482e      	ldr	r0, [pc, #184]	; (801446c <etharp_raw+0x10c>)
 80143b2:	f001 fd5f 	bl	8015e74 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80143bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80143be:	4618      	mov	r0, r3
 80143c0:	f7f6 ff34 	bl	800b22c <lwip_htons>
 80143c4:	4603      	mov	r3, r0
 80143c6:	461a      	mov	r2, r3
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80143d2:	2b06      	cmp	r3, #6
 80143d4:	d006      	beq.n	80143e4 <etharp_raw+0x84>
 80143d6:	4b23      	ldr	r3, [pc, #140]	; (8014464 <etharp_raw+0x104>)
 80143d8:	f240 426a 	movw	r2, #1130	; 0x46a
 80143dc:	4925      	ldr	r1, [pc, #148]	; (8014474 <etharp_raw+0x114>)
 80143de:	4823      	ldr	r0, [pc, #140]	; (801446c <etharp_raw+0x10c>)
 80143e0:	f001 fd48 	bl	8015e74 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	3308      	adds	r3, #8
 80143e8:	2206      	movs	r2, #6
 80143ea:	6839      	ldr	r1, [r7, #0]
 80143ec:	4618      	mov	r0, r3
 80143ee:	f001 fd2e 	bl	8015e4e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	3312      	adds	r3, #18
 80143f6:	2206      	movs	r2, #6
 80143f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80143fa:	4618      	mov	r0, r3
 80143fc:	f001 fd27 	bl	8015e4e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014400:	697b      	ldr	r3, [r7, #20]
 8014402:	330e      	adds	r3, #14
 8014404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014406:	6812      	ldr	r2, [r2, #0]
 8014408:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	3318      	adds	r3, #24
 801440e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014410:	6812      	ldr	r2, [r2, #0]
 8014412:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	2200      	movs	r2, #0
 8014418:	701a      	strb	r2, [r3, #0]
 801441a:	2200      	movs	r2, #0
 801441c:	f042 0201 	orr.w	r2, r2, #1
 8014420:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	2200      	movs	r2, #0
 8014426:	f042 0208 	orr.w	r2, r2, #8
 801442a:	709a      	strb	r2, [r3, #2]
 801442c:	2200      	movs	r2, #0
 801442e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	2206      	movs	r2, #6
 8014434:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	2204      	movs	r2, #4
 801443a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801443c:	f640 0306 	movw	r3, #2054	; 0x806
 8014440:	9300      	str	r3, [sp, #0]
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	68ba      	ldr	r2, [r7, #8]
 8014446:	69b9      	ldr	r1, [r7, #24]
 8014448:	68f8      	ldr	r0, [r7, #12]
 801444a:	f001 fb6f 	bl	8015b2c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801444e:	69b8      	ldr	r0, [r7, #24]
 8014450:	f7f8 faca 	bl	800c9e8 <pbuf_free>
  p = NULL;
 8014454:	2300      	movs	r3, #0
 8014456:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014458:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801445c:	4618      	mov	r0, r3
 801445e:	3720      	adds	r7, #32
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	080193bc 	.word	0x080193bc
 8014468:	0801950c 	.word	0x0801950c
 801446c:	08019434 	.word	0x08019434
 8014470:	080195bc 	.word	0x080195bc
 8014474:	080195f0 	.word	0x080195f0

08014478 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b088      	sub	sp, #32
 801447c:	af04      	add	r7, sp, #16
 801447e:	60f8      	str	r0, [r7, #12]
 8014480:	60b9      	str	r1, [r7, #8]
 8014482:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014494:	2201      	movs	r2, #1
 8014496:	9203      	str	r2, [sp, #12]
 8014498:	68ba      	ldr	r2, [r7, #8]
 801449a:	9202      	str	r2, [sp, #8]
 801449c:	4a06      	ldr	r2, [pc, #24]	; (80144b8 <etharp_request_dst+0x40>)
 801449e:	9201      	str	r2, [sp, #4]
 80144a0:	9300      	str	r3, [sp, #0]
 80144a2:	4603      	mov	r3, r0
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	68f8      	ldr	r0, [r7, #12]
 80144a8:	f7ff ff5a 	bl	8014360 <etharp_raw>
 80144ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3710      	adds	r7, #16
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	0802a6fc 	.word	0x0802a6fc

080144bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b082      	sub	sp, #8
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80144c6:	4a05      	ldr	r2, [pc, #20]	; (80144dc <etharp_request+0x20>)
 80144c8:	6839      	ldr	r1, [r7, #0]
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f7ff ffd4 	bl	8014478 <etharp_request_dst>
 80144d0:	4603      	mov	r3, r0
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	3708      	adds	r7, #8
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd80      	pop	{r7, pc}
 80144da:	bf00      	nop
 80144dc:	0802a6f4 	.word	0x0802a6f4

080144e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b08e      	sub	sp, #56	; 0x38
 80144e4:	af04      	add	r7, sp, #16
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80144ea:	4b79      	ldr	r3, [pc, #484]	; (80146d0 <icmp_input+0x1f0>)
 80144ec:	689b      	ldr	r3, [r3, #8]
 80144ee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80144f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	f003 030f 	and.w	r3, r3, #15
 80144f8:	b2db      	uxtb	r3, r3
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014502:	2b13      	cmp	r3, #19
 8014504:	f240 80cd 	bls.w	80146a2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	895b      	ldrh	r3, [r3, #10]
 801450c:	2b03      	cmp	r3, #3
 801450e:	f240 80ca 	bls.w	80146a6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	685b      	ldr	r3, [r3, #4]
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801451c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014520:	2b00      	cmp	r3, #0
 8014522:	f000 80b7 	beq.w	8014694 <icmp_input+0x1b4>
 8014526:	2b08      	cmp	r3, #8
 8014528:	f040 80b7 	bne.w	801469a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801452c:	4b69      	ldr	r3, [pc, #420]	; (80146d4 <icmp_input+0x1f4>)
 801452e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014530:	4b67      	ldr	r3, [pc, #412]	; (80146d0 <icmp_input+0x1f0>)
 8014532:	695b      	ldr	r3, [r3, #20]
 8014534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014538:	2be0      	cmp	r3, #224	; 0xe0
 801453a:	f000 80bb 	beq.w	80146b4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801453e:	4b64      	ldr	r3, [pc, #400]	; (80146d0 <icmp_input+0x1f0>)
 8014540:	695a      	ldr	r2, [r3, #20]
 8014542:	4b63      	ldr	r3, [pc, #396]	; (80146d0 <icmp_input+0x1f0>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	4619      	mov	r1, r3
 8014548:	4610      	mov	r0, r2
 801454a:	f000 fbeb 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 801454e:	4603      	mov	r3, r0
 8014550:	2b00      	cmp	r3, #0
 8014552:	f040 80b1 	bne.w	80146b8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	891b      	ldrh	r3, [r3, #8]
 801455a:	2b07      	cmp	r3, #7
 801455c:	f240 80a5 	bls.w	80146aa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014562:	330e      	adds	r3, #14
 8014564:	4619      	mov	r1, r3
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f7f8 f9a8 	bl	800c8bc <pbuf_add_header>
 801456c:	4603      	mov	r3, r0
 801456e:	2b00      	cmp	r3, #0
 8014570:	d04b      	beq.n	801460a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	891a      	ldrh	r2, [r3, #8]
 8014576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014578:	4413      	add	r3, r2
 801457a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	891b      	ldrh	r3, [r3, #8]
 8014580:	8b7a      	ldrh	r2, [r7, #26]
 8014582:	429a      	cmp	r2, r3
 8014584:	f0c0 809a 	bcc.w	80146bc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014588:	8b7b      	ldrh	r3, [r7, #26]
 801458a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801458e:	4619      	mov	r1, r3
 8014590:	200e      	movs	r0, #14
 8014592:	f7f7 ff49 	bl	800c428 <pbuf_alloc>
 8014596:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	2b00      	cmp	r3, #0
 801459c:	f000 8090 	beq.w	80146c0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	895b      	ldrh	r3, [r3, #10]
 80145a4:	461a      	mov	r2, r3
 80145a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80145a8:	3308      	adds	r3, #8
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d203      	bcs.n	80145b6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80145ae:	6978      	ldr	r0, [r7, #20]
 80145b0:	f7f8 fa1a 	bl	800c9e8 <pbuf_free>
          goto icmperr;
 80145b4:	e085      	b.n	80146c2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	685b      	ldr	r3, [r3, #4]
 80145ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80145bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80145be:	4618      	mov	r0, r3
 80145c0:	f001 fc45 	bl	8015e4e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80145c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80145c6:	4619      	mov	r1, r3
 80145c8:	6978      	ldr	r0, [r7, #20]
 80145ca:	f7f8 f987 	bl	800c8dc <pbuf_remove_header>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d009      	beq.n	80145e8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80145d4:	4b40      	ldr	r3, [pc, #256]	; (80146d8 <icmp_input+0x1f8>)
 80145d6:	22b6      	movs	r2, #182	; 0xb6
 80145d8:	4940      	ldr	r1, [pc, #256]	; (80146dc <icmp_input+0x1fc>)
 80145da:	4841      	ldr	r0, [pc, #260]	; (80146e0 <icmp_input+0x200>)
 80145dc:	f001 fc4a 	bl	8015e74 <iprintf>
          pbuf_free(r);
 80145e0:	6978      	ldr	r0, [r7, #20]
 80145e2:	f7f8 fa01 	bl	800c9e8 <pbuf_free>
          goto icmperr;
 80145e6:	e06c      	b.n	80146c2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80145e8:	6879      	ldr	r1, [r7, #4]
 80145ea:	6978      	ldr	r0, [r7, #20]
 80145ec:	f7f8 fb20 	bl	800cc30 <pbuf_copy>
 80145f0:	4603      	mov	r3, r0
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d003      	beq.n	80145fe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80145f6:	6978      	ldr	r0, [r7, #20]
 80145f8:	f7f8 f9f6 	bl	800c9e8 <pbuf_free>
          goto icmperr;
 80145fc:	e061      	b.n	80146c2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f7f8 f9f2 	bl	800c9e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	607b      	str	r3, [r7, #4]
 8014608:	e00f      	b.n	801462a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801460a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801460c:	330e      	adds	r3, #14
 801460e:	4619      	mov	r1, r3
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f7f8 f963 	bl	800c8dc <pbuf_remove_header>
 8014616:	4603      	mov	r3, r0
 8014618:	2b00      	cmp	r3, #0
 801461a:	d006      	beq.n	801462a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801461c:	4b2e      	ldr	r3, [pc, #184]	; (80146d8 <icmp_input+0x1f8>)
 801461e:	22c7      	movs	r2, #199	; 0xc7
 8014620:	4930      	ldr	r1, [pc, #192]	; (80146e4 <icmp_input+0x204>)
 8014622:	482f      	ldr	r0, [pc, #188]	; (80146e0 <icmp_input+0x200>)
 8014624:	f001 fc26 	bl	8015e74 <iprintf>
          goto icmperr;
 8014628:	e04b      	b.n	80146c2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014632:	4619      	mov	r1, r3
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7f8 f941 	bl	800c8bc <pbuf_add_header>
 801463a:	4603      	mov	r3, r0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d12b      	bne.n	8014698 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	685b      	ldr	r3, [r3, #4]
 8014644:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014646:	69fb      	ldr	r3, [r7, #28]
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801464e:	4b20      	ldr	r3, [pc, #128]	; (80146d0 <icmp_input+0x1f0>)
 8014650:	691a      	ldr	r2, [r3, #16]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	2200      	movs	r2, #0
 801465a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	2200      	movs	r2, #0
 8014660:	709a      	strb	r2, [r3, #2]
 8014662:	2200      	movs	r2, #0
 8014664:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	22ff      	movs	r2, #255	; 0xff
 801466a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	2200      	movs	r2, #0
 8014670:	729a      	strb	r2, [r3, #10]
 8014672:	2200      	movs	r2, #0
 8014674:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	9302      	str	r3, [sp, #8]
 801467a:	2301      	movs	r3, #1
 801467c:	9301      	str	r3, [sp, #4]
 801467e:	2300      	movs	r3, #0
 8014680:	9300      	str	r3, [sp, #0]
 8014682:	23ff      	movs	r3, #255	; 0xff
 8014684:	2200      	movs	r2, #0
 8014686:	69f9      	ldr	r1, [r7, #28]
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f000 fa73 	bl	8014b74 <ip4_output_if>
 801468e:	4603      	mov	r3, r0
 8014690:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014692:	e001      	b.n	8014698 <icmp_input+0x1b8>
      break;
 8014694:	bf00      	nop
 8014696:	e000      	b.n	801469a <icmp_input+0x1ba>
      break;
 8014698:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f7f8 f9a4 	bl	800c9e8 <pbuf_free>
  return;
 80146a0:	e013      	b.n	80146ca <icmp_input+0x1ea>
    goto lenerr;
 80146a2:	bf00      	nop
 80146a4:	e002      	b.n	80146ac <icmp_input+0x1cc>
    goto lenerr;
 80146a6:	bf00      	nop
 80146a8:	e000      	b.n	80146ac <icmp_input+0x1cc>
        goto lenerr;
 80146aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7f8 f99b 	bl	800c9e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80146b2:	e00a      	b.n	80146ca <icmp_input+0x1ea>
        goto icmperr;
 80146b4:	bf00      	nop
 80146b6:	e004      	b.n	80146c2 <icmp_input+0x1e2>
        goto icmperr;
 80146b8:	bf00      	nop
 80146ba:	e002      	b.n	80146c2 <icmp_input+0x1e2>
          goto icmperr;
 80146bc:	bf00      	nop
 80146be:	e000      	b.n	80146c2 <icmp_input+0x1e2>
          goto icmperr;
 80146c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f7f8 f990 	bl	800c9e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80146c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80146ca:	3728      	adds	r7, #40	; 0x28
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}
 80146d0:	20007dec 	.word	0x20007dec
 80146d4:	20007e00 	.word	0x20007e00
 80146d8:	08019634 	.word	0x08019634
 80146dc:	0801966c 	.word	0x0801966c
 80146e0:	080196a4 	.word	0x080196a4
 80146e4:	080196cc 	.word	0x080196cc

080146e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	460b      	mov	r3, r1
 80146f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80146f4:	78fb      	ldrb	r3, [r7, #3]
 80146f6:	461a      	mov	r2, r3
 80146f8:	2103      	movs	r1, #3
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 f814 	bl	8014728 <icmp_send_response>
}
 8014700:	bf00      	nop
 8014702:	3708      	adds	r7, #8
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	460b      	mov	r3, r1
 8014712:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014714:	78fb      	ldrb	r3, [r7, #3]
 8014716:	461a      	mov	r2, r3
 8014718:	210b      	movs	r1, #11
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f000 f804 	bl	8014728 <icmp_send_response>
}
 8014720:	bf00      	nop
 8014722:	3708      	adds	r7, #8
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}

08014728 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b08c      	sub	sp, #48	; 0x30
 801472c:	af04      	add	r7, sp, #16
 801472e:	6078      	str	r0, [r7, #4]
 8014730:	460b      	mov	r3, r1
 8014732:	70fb      	strb	r3, [r7, #3]
 8014734:	4613      	mov	r3, r2
 8014736:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014738:	f44f 7220 	mov.w	r2, #640	; 0x280
 801473c:	2124      	movs	r1, #36	; 0x24
 801473e:	2022      	movs	r0, #34	; 0x22
 8014740:	f7f7 fe72 	bl	800c428 <pbuf_alloc>
 8014744:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014746:	69fb      	ldr	r3, [r7, #28]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d04c      	beq.n	80147e6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	895b      	ldrh	r3, [r3, #10]
 8014750:	2b23      	cmp	r3, #35	; 0x23
 8014752:	d806      	bhi.n	8014762 <icmp_send_response+0x3a>
 8014754:	4b26      	ldr	r3, [pc, #152]	; (80147f0 <icmp_send_response+0xc8>)
 8014756:	f240 1269 	movw	r2, #361	; 0x169
 801475a:	4926      	ldr	r1, [pc, #152]	; (80147f4 <icmp_send_response+0xcc>)
 801475c:	4826      	ldr	r0, [pc, #152]	; (80147f8 <icmp_send_response+0xd0>)
 801475e:	f001 fb89 	bl	8015e74 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	78fa      	ldrb	r2, [r7, #3]
 8014772:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	78ba      	ldrb	r2, [r7, #2]
 8014778:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801477a:	697b      	ldr	r3, [r7, #20]
 801477c:	2200      	movs	r2, #0
 801477e:	711a      	strb	r2, [r3, #4]
 8014780:	2200      	movs	r2, #0
 8014782:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	2200      	movs	r2, #0
 8014788:	719a      	strb	r2, [r3, #6]
 801478a:	2200      	movs	r2, #0
 801478c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801478e:	69fb      	ldr	r3, [r7, #28]
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	f103 0008 	add.w	r0, r3, #8
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	685b      	ldr	r3, [r3, #4]
 801479a:	221c      	movs	r2, #28
 801479c:	4619      	mov	r1, r3
 801479e:	f001 fb56 	bl	8015e4e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	68db      	ldr	r3, [r3, #12]
 80147a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80147a8:	f107 030c 	add.w	r3, r7, #12
 80147ac:	4618      	mov	r0, r3
 80147ae:	f000 f825 	bl	80147fc <ip4_route>
 80147b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d011      	beq.n	80147de <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	2200      	movs	r2, #0
 80147be:	709a      	strb	r2, [r3, #2]
 80147c0:	2200      	movs	r2, #0
 80147c2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80147c4:	f107 020c 	add.w	r2, r7, #12
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	9302      	str	r3, [sp, #8]
 80147cc:	2301      	movs	r3, #1
 80147ce:	9301      	str	r3, [sp, #4]
 80147d0:	2300      	movs	r3, #0
 80147d2:	9300      	str	r3, [sp, #0]
 80147d4:	23ff      	movs	r3, #255	; 0xff
 80147d6:	2100      	movs	r1, #0
 80147d8:	69f8      	ldr	r0, [r7, #28]
 80147da:	f000 f9cb 	bl	8014b74 <ip4_output_if>
  }
  pbuf_free(q);
 80147de:	69f8      	ldr	r0, [r7, #28]
 80147e0:	f7f8 f902 	bl	800c9e8 <pbuf_free>
 80147e4:	e000      	b.n	80147e8 <icmp_send_response+0xc0>
    return;
 80147e6:	bf00      	nop
}
 80147e8:	3720      	adds	r7, #32
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
 80147ee:	bf00      	nop
 80147f0:	08019634 	.word	0x08019634
 80147f4:	08019700 	.word	0x08019700
 80147f8:	080196a4 	.word	0x080196a4

080147fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80147fc:	b480      	push	{r7}
 80147fe:	b085      	sub	sp, #20
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014804:	4b33      	ldr	r3, [pc, #204]	; (80148d4 <ip4_route+0xd8>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	60fb      	str	r3, [r7, #12]
 801480a:	e036      	b.n	801487a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014812:	f003 0301 	and.w	r3, r3, #1
 8014816:	b2db      	uxtb	r3, r3
 8014818:	2b00      	cmp	r3, #0
 801481a:	d02b      	beq.n	8014874 <ip4_route+0x78>
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014822:	089b      	lsrs	r3, r3, #2
 8014824:	f003 0301 	and.w	r3, r3, #1
 8014828:	b2db      	uxtb	r3, r3
 801482a:	2b00      	cmp	r3, #0
 801482c:	d022      	beq.n	8014874 <ip4_route+0x78>
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	3304      	adds	r3, #4
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d01d      	beq.n	8014874 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	3304      	adds	r3, #4
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	405a      	eors	r2, r3
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	3308      	adds	r3, #8
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	4013      	ands	r3, r2
 801484c:	2b00      	cmp	r3, #0
 801484e:	d101      	bne.n	8014854 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	e038      	b.n	80148c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801485a:	f003 0302 	and.w	r3, r3, #2
 801485e:	2b00      	cmp	r3, #0
 8014860:	d108      	bne.n	8014874 <ip4_route+0x78>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	330c      	adds	r3, #12
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	429a      	cmp	r2, r3
 801486e:	d101      	bne.n	8014874 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	e028      	b.n	80148c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	60fb      	str	r3, [r7, #12]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d1c5      	bne.n	801480c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014880:	4b15      	ldr	r3, [pc, #84]	; (80148d8 <ip4_route+0xdc>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d01a      	beq.n	80148be <ip4_route+0xc2>
 8014888:	4b13      	ldr	r3, [pc, #76]	; (80148d8 <ip4_route+0xdc>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014890:	f003 0301 	and.w	r3, r3, #1
 8014894:	2b00      	cmp	r3, #0
 8014896:	d012      	beq.n	80148be <ip4_route+0xc2>
 8014898:	4b0f      	ldr	r3, [pc, #60]	; (80148d8 <ip4_route+0xdc>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80148a0:	f003 0304 	and.w	r3, r3, #4
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d00a      	beq.n	80148be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80148a8:	4b0b      	ldr	r3, [pc, #44]	; (80148d8 <ip4_route+0xdc>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	3304      	adds	r3, #4
 80148ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d004      	beq.n	80148be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	b2db      	uxtb	r3, r3
 80148ba:	2b7f      	cmp	r3, #127	; 0x7f
 80148bc:	d101      	bne.n	80148c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80148be:	2300      	movs	r3, #0
 80148c0:	e001      	b.n	80148c6 <ip4_route+0xca>
  }

  return netif_default;
 80148c2:	4b05      	ldr	r3, [pc, #20]	; (80148d8 <ip4_route+0xdc>)
 80148c4:	681b      	ldr	r3, [r3, #0]
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	3714      	adds	r7, #20
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop
 80148d4:	2000b4f0 	.word	0x2000b4f0
 80148d8:	2000b4f4 	.word	0x2000b4f4

080148dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80148ea:	f003 0301 	and.w	r3, r3, #1
 80148ee:	b2db      	uxtb	r3, r3
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d016      	beq.n	8014922 <ip4_input_accept+0x46>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	3304      	adds	r3, #4
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d011      	beq.n	8014922 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80148fe:	4b0b      	ldr	r3, [pc, #44]	; (801492c <ip4_input_accept+0x50>)
 8014900:	695a      	ldr	r2, [r3, #20]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	3304      	adds	r3, #4
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	429a      	cmp	r2, r3
 801490a:	d008      	beq.n	801491e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801490c:	4b07      	ldr	r3, [pc, #28]	; (801492c <ip4_input_accept+0x50>)
 801490e:	695b      	ldr	r3, [r3, #20]
 8014910:	6879      	ldr	r1, [r7, #4]
 8014912:	4618      	mov	r0, r3
 8014914:	f000 fa06 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 8014918:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801491a:	2b00      	cmp	r3, #0
 801491c:	d001      	beq.n	8014922 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801491e:	2301      	movs	r3, #1
 8014920:	e000      	b.n	8014924 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014922:	2300      	movs	r3, #0
}
 8014924:	4618      	mov	r0, r3
 8014926:	3708      	adds	r7, #8
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	20007dec 	.word	0x20007dec

08014930 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b086      	sub	sp, #24
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	091b      	lsrs	r3, r3, #4
 8014946:	b2db      	uxtb	r3, r3
 8014948:	2b04      	cmp	r3, #4
 801494a:	d004      	beq.n	8014956 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f7f8 f84b 	bl	800c9e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014952:	2300      	movs	r3, #0
 8014954:	e105      	b.n	8014b62 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	f003 030f 	and.w	r3, r3, #15
 801495e:	b2db      	uxtb	r3, r3
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	b2db      	uxtb	r3, r3
 8014964:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	885b      	ldrh	r3, [r3, #2]
 801496a:	b29b      	uxth	r3, r3
 801496c:	4618      	mov	r0, r3
 801496e:	f7f6 fc5d 	bl	800b22c <lwip_htons>
 8014972:	4603      	mov	r3, r0
 8014974:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	891b      	ldrh	r3, [r3, #8]
 801497a:	89ba      	ldrh	r2, [r7, #12]
 801497c:	429a      	cmp	r2, r3
 801497e:	d204      	bcs.n	801498a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014980:	89bb      	ldrh	r3, [r7, #12]
 8014982:	4619      	mov	r1, r3
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f7f7 fea9 	bl	800c6dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	895b      	ldrh	r3, [r3, #10]
 801498e:	89fa      	ldrh	r2, [r7, #14]
 8014990:	429a      	cmp	r2, r3
 8014992:	d807      	bhi.n	80149a4 <ip4_input+0x74>
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	891b      	ldrh	r3, [r3, #8]
 8014998:	89ba      	ldrh	r2, [r7, #12]
 801499a:	429a      	cmp	r2, r3
 801499c:	d802      	bhi.n	80149a4 <ip4_input+0x74>
 801499e:	89fb      	ldrh	r3, [r7, #14]
 80149a0:	2b13      	cmp	r3, #19
 80149a2:	d804      	bhi.n	80149ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f7f8 f81f 	bl	800c9e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80149aa:	2300      	movs	r3, #0
 80149ac:	e0d9      	b.n	8014b62 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	691b      	ldr	r3, [r3, #16]
 80149b2:	4a6e      	ldr	r2, [pc, #440]	; (8014b6c <ip4_input+0x23c>)
 80149b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80149b6:	697b      	ldr	r3, [r7, #20]
 80149b8:	68db      	ldr	r3, [r3, #12]
 80149ba:	4a6c      	ldr	r2, [pc, #432]	; (8014b6c <ip4_input+0x23c>)
 80149bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80149be:	4b6b      	ldr	r3, [pc, #428]	; (8014b6c <ip4_input+0x23c>)
 80149c0:	695b      	ldr	r3, [r3, #20]
 80149c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149c6:	2be0      	cmp	r3, #224	; 0xe0
 80149c8:	d112      	bne.n	80149f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80149d0:	f003 0301 	and.w	r3, r3, #1
 80149d4:	b2db      	uxtb	r3, r3
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d007      	beq.n	80149ea <ip4_input+0xba>
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	3304      	adds	r3, #4
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d002      	beq.n	80149ea <ip4_input+0xba>
      netif = inp;
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	613b      	str	r3, [r7, #16]
 80149e8:	e02a      	b.n	8014a40 <ip4_input+0x110>
    } else {
      netif = NULL;
 80149ea:	2300      	movs	r3, #0
 80149ec:	613b      	str	r3, [r7, #16]
 80149ee:	e027      	b.n	8014a40 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80149f0:	6838      	ldr	r0, [r7, #0]
 80149f2:	f7ff ff73 	bl	80148dc <ip4_input_accept>
 80149f6:	4603      	mov	r3, r0
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d002      	beq.n	8014a02 <ip4_input+0xd2>
      netif = inp;
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	613b      	str	r3, [r7, #16]
 8014a00:	e01e      	b.n	8014a40 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014a02:	2300      	movs	r3, #0
 8014a04:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014a06:	4b59      	ldr	r3, [pc, #356]	; (8014b6c <ip4_input+0x23c>)
 8014a08:	695b      	ldr	r3, [r3, #20]
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8014a0e:	d017      	beq.n	8014a40 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014a10:	4b57      	ldr	r3, [pc, #348]	; (8014b70 <ip4_input+0x240>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	613b      	str	r3, [r7, #16]
 8014a16:	e00e      	b.n	8014a36 <ip4_input+0x106>
          if (netif == inp) {
 8014a18:	693a      	ldr	r2, [r7, #16]
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d006      	beq.n	8014a2e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014a20:	6938      	ldr	r0, [r7, #16]
 8014a22:	f7ff ff5b 	bl	80148dc <ip4_input_accept>
 8014a26:	4603      	mov	r3, r0
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d108      	bne.n	8014a3e <ip4_input+0x10e>
 8014a2c:	e000      	b.n	8014a30 <ip4_input+0x100>
            continue;
 8014a2e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	613b      	str	r3, [r7, #16]
 8014a36:	693b      	ldr	r3, [r7, #16]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d1ed      	bne.n	8014a18 <ip4_input+0xe8>
 8014a3c:	e000      	b.n	8014a40 <ip4_input+0x110>
            break;
 8014a3e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014a40:	4b4a      	ldr	r3, [pc, #296]	; (8014b6c <ip4_input+0x23c>)
 8014a42:	691b      	ldr	r3, [r3, #16]
 8014a44:	6839      	ldr	r1, [r7, #0]
 8014a46:	4618      	mov	r0, r3
 8014a48:	f000 f96c 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d105      	bne.n	8014a5e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014a52:	4b46      	ldr	r3, [pc, #280]	; (8014b6c <ip4_input+0x23c>)
 8014a54:	691b      	ldr	r3, [r3, #16]
 8014a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014a5a:	2be0      	cmp	r3, #224	; 0xe0
 8014a5c:	d104      	bne.n	8014a68 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7f7 ffc2 	bl	800c9e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014a64:	2300      	movs	r3, #0
 8014a66:	e07c      	b.n	8014b62 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014a68:	693b      	ldr	r3, [r7, #16]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d104      	bne.n	8014a78 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7f7 ffba 	bl	800c9e8 <pbuf_free>
    return ERR_OK;
 8014a74:	2300      	movs	r3, #0
 8014a76:	e074      	b.n	8014b62 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014a78:	697b      	ldr	r3, [r7, #20]
 8014a7a:	88db      	ldrh	r3, [r3, #6]
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	461a      	mov	r2, r3
 8014a80:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014a84:	4013      	ands	r3, r2
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d00b      	beq.n	8014aa2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014a8a:	6878      	ldr	r0, [r7, #4]
 8014a8c:	f000 fc90 	bl	80153b0 <ip4_reass>
 8014a90:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d101      	bne.n	8014a9c <ip4_input+0x16c>
      return ERR_OK;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	e062      	b.n	8014b62 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014aa2:	4a32      	ldr	r2, [pc, #200]	; (8014b6c <ip4_input+0x23c>)
 8014aa4:	693b      	ldr	r3, [r7, #16]
 8014aa6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014aa8:	4a30      	ldr	r2, [pc, #192]	; (8014b6c <ip4_input+0x23c>)
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014aae:	4a2f      	ldr	r2, [pc, #188]	; (8014b6c <ip4_input+0x23c>)
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	f003 030f 	and.w	r3, r3, #15
 8014abc:	b2db      	uxtb	r3, r3
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	b2db      	uxtb	r3, r3
 8014ac2:	b29a      	uxth	r2, r3
 8014ac4:	4b29      	ldr	r3, [pc, #164]	; (8014b6c <ip4_input+0x23c>)
 8014ac6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014ac8:	89fb      	ldrh	r3, [r7, #14]
 8014aca:	4619      	mov	r1, r3
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f7f7 ff05 	bl	800c8dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	7a5b      	ldrb	r3, [r3, #9]
 8014ad6:	2b06      	cmp	r3, #6
 8014ad8:	d009      	beq.n	8014aee <ip4_input+0x1be>
 8014ada:	2b11      	cmp	r3, #17
 8014adc:	d002      	beq.n	8014ae4 <ip4_input+0x1b4>
 8014ade:	2b01      	cmp	r3, #1
 8014ae0:	d00a      	beq.n	8014af8 <ip4_input+0x1c8>
 8014ae2:	e00e      	b.n	8014b02 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014ae4:	6839      	ldr	r1, [r7, #0]
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f7fe fc6a 	bl	80133c0 <udp_input>
        break;
 8014aec:	e026      	b.n	8014b3c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014aee:	6839      	ldr	r1, [r7, #0]
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f7fa f84f 	bl	800eb94 <tcp_input>
        break;
 8014af6:	e021      	b.n	8014b3c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014af8:	6839      	ldr	r1, [r7, #0]
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f7ff fcf0 	bl	80144e0 <icmp_input>
        break;
 8014b00:	e01c      	b.n	8014b3c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014b02:	4b1a      	ldr	r3, [pc, #104]	; (8014b6c <ip4_input+0x23c>)
 8014b04:	695b      	ldr	r3, [r3, #20]
 8014b06:	6939      	ldr	r1, [r7, #16]
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f000 f90b 	bl	8014d24 <ip4_addr_isbroadcast_u32>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d10f      	bne.n	8014b34 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b14:	4b15      	ldr	r3, [pc, #84]	; (8014b6c <ip4_input+0x23c>)
 8014b16:	695b      	ldr	r3, [r3, #20]
 8014b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014b1c:	2be0      	cmp	r3, #224	; 0xe0
 8014b1e:	d009      	beq.n	8014b34 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014b20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b24:	4619      	mov	r1, r3
 8014b26:	6878      	ldr	r0, [r7, #4]
 8014b28:	f7f7 ff4b 	bl	800c9c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014b2c:	2102      	movs	r1, #2
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f7ff fdda 	bl	80146e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014b34:	6878      	ldr	r0, [r7, #4]
 8014b36:	f7f7 ff57 	bl	800c9e8 <pbuf_free>
        break;
 8014b3a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014b3c:	4b0b      	ldr	r3, [pc, #44]	; (8014b6c <ip4_input+0x23c>)
 8014b3e:	2200      	movs	r2, #0
 8014b40:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014b42:	4b0a      	ldr	r3, [pc, #40]	; (8014b6c <ip4_input+0x23c>)
 8014b44:	2200      	movs	r2, #0
 8014b46:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014b48:	4b08      	ldr	r3, [pc, #32]	; (8014b6c <ip4_input+0x23c>)
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014b4e:	4b07      	ldr	r3, [pc, #28]	; (8014b6c <ip4_input+0x23c>)
 8014b50:	2200      	movs	r2, #0
 8014b52:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014b54:	4b05      	ldr	r3, [pc, #20]	; (8014b6c <ip4_input+0x23c>)
 8014b56:	2200      	movs	r2, #0
 8014b58:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014b5a:	4b04      	ldr	r3, [pc, #16]	; (8014b6c <ip4_input+0x23c>)
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014b60:	2300      	movs	r3, #0
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3718      	adds	r7, #24
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	20007dec 	.word	0x20007dec
 8014b70:	2000b4f0 	.word	0x2000b4f0

08014b74 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b08a      	sub	sp, #40	; 0x28
 8014b78:	af04      	add	r7, sp, #16
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
 8014b80:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d009      	beq.n	8014ba0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d003      	beq.n	8014b9a <ip4_output_if+0x26>
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d102      	bne.n	8014ba0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b9c:	3304      	adds	r3, #4
 8014b9e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014ba0:	78fa      	ldrb	r2, [r7, #3]
 8014ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba4:	9302      	str	r3, [sp, #8]
 8014ba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014baa:	9301      	str	r3, [sp, #4]
 8014bac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014bb0:	9300      	str	r3, [sp, #0]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	687a      	ldr	r2, [r7, #4]
 8014bb6:	6979      	ldr	r1, [r7, #20]
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f000 f805 	bl	8014bc8 <ip4_output_if_src>
 8014bbe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3718      	adds	r7, #24
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b088      	sub	sp, #32
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	60f8      	str	r0, [r7, #12]
 8014bd0:	60b9      	str	r1, [r7, #8]
 8014bd2:	607a      	str	r2, [r7, #4]
 8014bd4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	7b9b      	ldrb	r3, [r3, #14]
 8014bda:	2b01      	cmp	r3, #1
 8014bdc:	d006      	beq.n	8014bec <ip4_output_if_src+0x24>
 8014bde:	4b4b      	ldr	r3, [pc, #300]	; (8014d0c <ip4_output_if_src+0x144>)
 8014be0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014be4:	494a      	ldr	r1, [pc, #296]	; (8014d10 <ip4_output_if_src+0x148>)
 8014be6:	484b      	ldr	r0, [pc, #300]	; (8014d14 <ip4_output_if_src+0x14c>)
 8014be8:	f001 f944 	bl	8015e74 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d060      	beq.n	8014cb4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014bf2:	2314      	movs	r3, #20
 8014bf4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014bf6:	2114      	movs	r1, #20
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f7f7 fe5f 	bl	800c8bc <pbuf_add_header>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d002      	beq.n	8014c0a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014c04:	f06f 0301 	mvn.w	r3, #1
 8014c08:	e07c      	b.n	8014d04 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	895b      	ldrh	r3, [r3, #10]
 8014c14:	2b13      	cmp	r3, #19
 8014c16:	d806      	bhi.n	8014c26 <ip4_output_if_src+0x5e>
 8014c18:	4b3c      	ldr	r3, [pc, #240]	; (8014d0c <ip4_output_if_src+0x144>)
 8014c1a:	f240 3289 	movw	r2, #905	; 0x389
 8014c1e:	493e      	ldr	r1, [pc, #248]	; (8014d18 <ip4_output_if_src+0x150>)
 8014c20:	483c      	ldr	r0, [pc, #240]	; (8014d14 <ip4_output_if_src+0x14c>)
 8014c22:	f001 f927 	bl	8015e74 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014c26:	69fb      	ldr	r3, [r7, #28]
 8014c28:	78fa      	ldrb	r2, [r7, #3]
 8014c2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014c32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014c3c:	8b7b      	ldrh	r3, [r7, #26]
 8014c3e:	089b      	lsrs	r3, r3, #2
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	b2db      	uxtb	r3, r3
 8014c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c48:	b2da      	uxtb	r2, r3
 8014c4a:	69fb      	ldr	r3, [r7, #28]
 8014c4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014c54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	891b      	ldrh	r3, [r3, #8]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7f6 fae6 	bl	800b22c <lwip_htons>
 8014c60:	4603      	mov	r3, r0
 8014c62:	461a      	mov	r2, r3
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	719a      	strb	r2, [r3, #6]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014c72:	4b2a      	ldr	r3, [pc, #168]	; (8014d1c <ip4_output_if_src+0x154>)
 8014c74:	881b      	ldrh	r3, [r3, #0]
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7f6 fad8 	bl	800b22c <lwip_htons>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	461a      	mov	r2, r3
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014c84:	4b25      	ldr	r3, [pc, #148]	; (8014d1c <ip4_output_if_src+0x154>)
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	3301      	adds	r3, #1
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	4b23      	ldr	r3, [pc, #140]	; (8014d1c <ip4_output_if_src+0x154>)
 8014c8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d104      	bne.n	8014ca0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014c96:	4b22      	ldr	r3, [pc, #136]	; (8014d20 <ip4_output_if_src+0x158>)
 8014c98:	681a      	ldr	r2, [r3, #0]
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	60da      	str	r2, [r3, #12]
 8014c9e:	e003      	b.n	8014ca8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	681a      	ldr	r2, [r3, #0]
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	2200      	movs	r2, #0
 8014cac:	729a      	strb	r2, [r3, #10]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	72da      	strb	r2, [r3, #11]
 8014cb2:	e00f      	b.n	8014cd4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	895b      	ldrh	r3, [r3, #10]
 8014cb8:	2b13      	cmp	r3, #19
 8014cba:	d802      	bhi.n	8014cc2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014cbc:	f06f 0301 	mvn.w	r3, #1
 8014cc0:	e020      	b.n	8014d04 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014cc8:	69fb      	ldr	r3, [r7, #28]
 8014cca:	691b      	ldr	r3, [r3, #16]
 8014ccc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014cce:	f107 0314 	add.w	r3, r7, #20
 8014cd2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d00c      	beq.n	8014cf6 <ip4_output_if_src+0x12e>
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	891a      	ldrh	r2, [r3, #8]
 8014ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d906      	bls.n	8014cf6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014ce8:	687a      	ldr	r2, [r7, #4]
 8014cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	f000 fd4b 	bl	8015788 <ip4_frag>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	e006      	b.n	8014d04 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cf8:	695b      	ldr	r3, [r3, #20]
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	68f9      	ldr	r1, [r7, #12]
 8014cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d00:	4798      	blx	r3
 8014d02:	4603      	mov	r3, r0
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3720      	adds	r7, #32
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}
 8014d0c:	0801972c 	.word	0x0801972c
 8014d10:	08019760 	.word	0x08019760
 8014d14:	0801976c 	.word	0x0801976c
 8014d18:	08019794 	.word	0x08019794
 8014d1c:	20004616 	.word	0x20004616
 8014d20:	0802a6f0 	.word	0x0802a6f0

08014d24 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014d24:	b480      	push	{r7}
 8014d26:	b085      	sub	sp, #20
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d38:	d002      	beq.n	8014d40 <ip4_addr_isbroadcast_u32+0x1c>
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d101      	bne.n	8014d44 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014d40:	2301      	movs	r3, #1
 8014d42:	e02a      	b.n	8014d9a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d4a:	f003 0302 	and.w	r3, r3, #2
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d101      	bne.n	8014d56 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014d52:	2300      	movs	r3, #0
 8014d54:	e021      	b.n	8014d9a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	3304      	adds	r3, #4
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d101      	bne.n	8014d66 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014d62:	2300      	movs	r3, #0
 8014d64:	e019      	b.n	8014d9a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014d66:	68fa      	ldr	r2, [r7, #12]
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	3304      	adds	r3, #4
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	405a      	eors	r2, r3
 8014d70:	683b      	ldr	r3, [r7, #0]
 8014d72:	3308      	adds	r3, #8
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	4013      	ands	r3, r2
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d10d      	bne.n	8014d98 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	3308      	adds	r3, #8
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	43da      	mvns	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	3308      	adds	r3, #8
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d101      	bne.n	8014d98 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014d94:	2301      	movs	r3, #1
 8014d96:	e000      	b.n	8014d9a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014d98:	2300      	movs	r3, #0
  }
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3714      	adds	r7, #20
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da4:	4770      	bx	lr
	...

08014da8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014dae:	2300      	movs	r3, #0
 8014db0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014db2:	4b12      	ldr	r3, [pc, #72]	; (8014dfc <ip_reass_tmr+0x54>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014db8:	e018      	b.n	8014dec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	7fdb      	ldrb	r3, [r3, #31]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d00b      	beq.n	8014dda <ip_reass_tmr+0x32>
      r->timer--;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	7fdb      	ldrb	r3, [r3, #31]
 8014dc6:	3b01      	subs	r3, #1
 8014dc8:	b2da      	uxtb	r2, r3
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	60fb      	str	r3, [r7, #12]
 8014dd8:	e008      	b.n	8014dec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014de4:	68b9      	ldr	r1, [r7, #8]
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f000 f80a 	bl	8014e00 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d1e3      	bne.n	8014dba <ip_reass_tmr+0x12>
    }
  }
}
 8014df2:	bf00      	nop
 8014df4:	3710      	adds	r7, #16
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	20004618 	.word	0x20004618

08014e00 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b088      	sub	sp, #32
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014e0e:	683a      	ldr	r2, [r7, #0]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d105      	bne.n	8014e22 <ip_reass_free_complete_datagram+0x22>
 8014e16:	4b45      	ldr	r3, [pc, #276]	; (8014f2c <ip_reass_free_complete_datagram+0x12c>)
 8014e18:	22ab      	movs	r2, #171	; 0xab
 8014e1a:	4945      	ldr	r1, [pc, #276]	; (8014f30 <ip_reass_free_complete_datagram+0x130>)
 8014e1c:	4845      	ldr	r0, [pc, #276]	; (8014f34 <ip_reass_free_complete_datagram+0x134>)
 8014e1e:	f001 f829 	bl	8015e74 <iprintf>
  if (prev != NULL) {
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d00a      	beq.n	8014e3e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d005      	beq.n	8014e3e <ip_reass_free_complete_datagram+0x3e>
 8014e32:	4b3e      	ldr	r3, [pc, #248]	; (8014f2c <ip_reass_free_complete_datagram+0x12c>)
 8014e34:	22ad      	movs	r2, #173	; 0xad
 8014e36:	4940      	ldr	r1, [pc, #256]	; (8014f38 <ip_reass_free_complete_datagram+0x138>)
 8014e38:	483e      	ldr	r0, [pc, #248]	; (8014f34 <ip_reass_free_complete_datagram+0x134>)
 8014e3a:	f001 f81b 	bl	8015e74 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	685b      	ldr	r3, [r3, #4]
 8014e44:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	889b      	ldrh	r3, [r3, #4]
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d12a      	bne.n	8014ea6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014e5e:	69bb      	ldr	r3, [r7, #24]
 8014e60:	6858      	ldr	r0, [r3, #4]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	3308      	adds	r3, #8
 8014e66:	2214      	movs	r2, #20
 8014e68:	4619      	mov	r1, r3
 8014e6a:	f000 fff0 	bl	8015e4e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014e6e:	2101      	movs	r1, #1
 8014e70:	69b8      	ldr	r0, [r7, #24]
 8014e72:	f7ff fc49 	bl	8014708 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014e76:	69b8      	ldr	r0, [r7, #24]
 8014e78:	f7f7 fe44 	bl	800cb04 <pbuf_clen>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014e80:	8bfa      	ldrh	r2, [r7, #30]
 8014e82:	8a7b      	ldrh	r3, [r7, #18]
 8014e84:	4413      	add	r3, r2
 8014e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e8a:	db05      	blt.n	8014e98 <ip_reass_free_complete_datagram+0x98>
 8014e8c:	4b27      	ldr	r3, [pc, #156]	; (8014f2c <ip_reass_free_complete_datagram+0x12c>)
 8014e8e:	22bc      	movs	r2, #188	; 0xbc
 8014e90:	492a      	ldr	r1, [pc, #168]	; (8014f3c <ip_reass_free_complete_datagram+0x13c>)
 8014e92:	4828      	ldr	r0, [pc, #160]	; (8014f34 <ip_reass_free_complete_datagram+0x134>)
 8014e94:	f000 ffee 	bl	8015e74 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014e98:	8bfa      	ldrh	r2, [r7, #30]
 8014e9a:	8a7b      	ldrh	r3, [r7, #18]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014ea0:	69b8      	ldr	r0, [r7, #24]
 8014ea2:	f7f7 fda1 	bl	800c9e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	685b      	ldr	r3, [r3, #4]
 8014eaa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014eac:	e01f      	b.n	8014eee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014eae:	69bb      	ldr	r3, [r7, #24]
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014eb4:	69bb      	ldr	r3, [r7, #24]
 8014eb6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014ebe:	68f8      	ldr	r0, [r7, #12]
 8014ec0:	f7f7 fe20 	bl	800cb04 <pbuf_clen>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014ec8:	8bfa      	ldrh	r2, [r7, #30]
 8014eca:	8a7b      	ldrh	r3, [r7, #18]
 8014ecc:	4413      	add	r3, r2
 8014ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ed2:	db05      	blt.n	8014ee0 <ip_reass_free_complete_datagram+0xe0>
 8014ed4:	4b15      	ldr	r3, [pc, #84]	; (8014f2c <ip_reass_free_complete_datagram+0x12c>)
 8014ed6:	22cc      	movs	r2, #204	; 0xcc
 8014ed8:	4918      	ldr	r1, [pc, #96]	; (8014f3c <ip_reass_free_complete_datagram+0x13c>)
 8014eda:	4816      	ldr	r0, [pc, #88]	; (8014f34 <ip_reass_free_complete_datagram+0x134>)
 8014edc:	f000 ffca 	bl	8015e74 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014ee0:	8bfa      	ldrh	r2, [r7, #30]
 8014ee2:	8a7b      	ldrh	r3, [r7, #18]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	f7f7 fd7d 	bl	800c9e8 <pbuf_free>
  while (p != NULL) {
 8014eee:	69bb      	ldr	r3, [r7, #24]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d1dc      	bne.n	8014eae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014ef4:	6839      	ldr	r1, [r7, #0]
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f000 f8c2 	bl	8015080 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014efc:	4b10      	ldr	r3, [pc, #64]	; (8014f40 <ip_reass_free_complete_datagram+0x140>)
 8014efe:	881b      	ldrh	r3, [r3, #0]
 8014f00:	8bfa      	ldrh	r2, [r7, #30]
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d905      	bls.n	8014f12 <ip_reass_free_complete_datagram+0x112>
 8014f06:	4b09      	ldr	r3, [pc, #36]	; (8014f2c <ip_reass_free_complete_datagram+0x12c>)
 8014f08:	22d2      	movs	r2, #210	; 0xd2
 8014f0a:	490e      	ldr	r1, [pc, #56]	; (8014f44 <ip_reass_free_complete_datagram+0x144>)
 8014f0c:	4809      	ldr	r0, [pc, #36]	; (8014f34 <ip_reass_free_complete_datagram+0x134>)
 8014f0e:	f000 ffb1 	bl	8015e74 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014f12:	4b0b      	ldr	r3, [pc, #44]	; (8014f40 <ip_reass_free_complete_datagram+0x140>)
 8014f14:	881a      	ldrh	r2, [r3, #0]
 8014f16:	8bfb      	ldrh	r3, [r7, #30]
 8014f18:	1ad3      	subs	r3, r2, r3
 8014f1a:	b29a      	uxth	r2, r3
 8014f1c:	4b08      	ldr	r3, [pc, #32]	; (8014f40 <ip_reass_free_complete_datagram+0x140>)
 8014f1e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014f20:	8bfb      	ldrh	r3, [r7, #30]
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3720      	adds	r7, #32
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	080197c4 	.word	0x080197c4
 8014f30:	08019800 	.word	0x08019800
 8014f34:	0801980c 	.word	0x0801980c
 8014f38:	08019834 	.word	0x08019834
 8014f3c:	08019848 	.word	0x08019848
 8014f40:	2000461c 	.word	0x2000461c
 8014f44:	08019868 	.word	0x08019868

08014f48 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b08a      	sub	sp, #40	; 0x28
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014f52:	2300      	movs	r3, #0
 8014f54:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014f56:	2300      	movs	r3, #0
 8014f58:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014f62:	2300      	movs	r3, #0
 8014f64:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014f66:	4b28      	ldr	r3, [pc, #160]	; (8015008 <ip_reass_remove_oldest_datagram+0xc0>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014f6c:	e030      	b.n	8014fd0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f70:	695a      	ldr	r2, [r3, #20]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	68db      	ldr	r3, [r3, #12]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d10c      	bne.n	8014f94 <ip_reass_remove_oldest_datagram+0x4c>
 8014f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f7c:	699a      	ldr	r2, [r3, #24]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	691b      	ldr	r3, [r3, #16]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d106      	bne.n	8014f94 <ip_reass_remove_oldest_datagram+0x4c>
 8014f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f88:	899a      	ldrh	r2, [r3, #12]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	889b      	ldrh	r3, [r3, #4]
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d014      	beq.n	8014fbe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014f94:	693b      	ldr	r3, [r7, #16]
 8014f96:	3301      	adds	r3, #1
 8014f98:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014f9a:	6a3b      	ldr	r3, [r7, #32]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d104      	bne.n	8014faa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014fa4:	69fb      	ldr	r3, [r7, #28]
 8014fa6:	61bb      	str	r3, [r7, #24]
 8014fa8:	e009      	b.n	8014fbe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fac:	7fda      	ldrb	r2, [r3, #31]
 8014fae:	6a3b      	ldr	r3, [r7, #32]
 8014fb0:	7fdb      	ldrb	r3, [r3, #31]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d803      	bhi.n	8014fbe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014fba:	69fb      	ldr	r3, [r7, #28]
 8014fbc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d001      	beq.n	8014fca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d1cb      	bne.n	8014f6e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014fd6:	6a3b      	ldr	r3, [r7, #32]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d008      	beq.n	8014fee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014fdc:	69b9      	ldr	r1, [r7, #24]
 8014fde:	6a38      	ldr	r0, [r7, #32]
 8014fe0:	f7ff ff0e 	bl	8014e00 <ip_reass_free_complete_datagram>
 8014fe4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014fe6:	697a      	ldr	r2, [r7, #20]
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	4413      	add	r3, r2
 8014fec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014fee:	697a      	ldr	r2, [r7, #20]
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	da02      	bge.n	8014ffc <ip_reass_remove_oldest_datagram+0xb4>
 8014ff6:	693b      	ldr	r3, [r7, #16]
 8014ff8:	2b01      	cmp	r3, #1
 8014ffa:	dcac      	bgt.n	8014f56 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014ffc:	697b      	ldr	r3, [r7, #20]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3728      	adds	r7, #40	; 0x28
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
 8015006:	bf00      	nop
 8015008:	20004618 	.word	0x20004618

0801500c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b084      	sub	sp, #16
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015016:	2004      	movs	r0, #4
 8015018:	f7f6 fdf4 	bl	800bc04 <memp_malloc>
 801501c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d110      	bne.n	8015046 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015024:	6839      	ldr	r1, [r7, #0]
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f7ff ff8e 	bl	8014f48 <ip_reass_remove_oldest_datagram>
 801502c:	4602      	mov	r2, r0
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	4293      	cmp	r3, r2
 8015032:	dc03      	bgt.n	801503c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015034:	2004      	movs	r0, #4
 8015036:	f7f6 fde5 	bl	800bc04 <memp_malloc>
 801503a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d101      	bne.n	8015046 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015042:	2300      	movs	r3, #0
 8015044:	e016      	b.n	8015074 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015046:	2220      	movs	r2, #32
 8015048:	2100      	movs	r1, #0
 801504a:	68f8      	ldr	r0, [r7, #12]
 801504c:	f000 ff0a 	bl	8015e64 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	220f      	movs	r2, #15
 8015054:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015056:	4b09      	ldr	r3, [pc, #36]	; (801507c <ip_reass_enqueue_new_datagram+0x70>)
 8015058:	681a      	ldr	r2, [r3, #0]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801505e:	4a07      	ldr	r2, [pc, #28]	; (801507c <ip_reass_enqueue_new_datagram+0x70>)
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	3308      	adds	r3, #8
 8015068:	2214      	movs	r2, #20
 801506a:	6879      	ldr	r1, [r7, #4]
 801506c:	4618      	mov	r0, r3
 801506e:	f000 feee 	bl	8015e4e <memcpy>
  return ipr;
 8015072:	68fb      	ldr	r3, [r7, #12]
}
 8015074:	4618      	mov	r0, r3
 8015076:	3710      	adds	r7, #16
 8015078:	46bd      	mov	sp, r7
 801507a:	bd80      	pop	{r7, pc}
 801507c:	20004618 	.word	0x20004618

08015080 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b082      	sub	sp, #8
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
 8015088:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801508a:	4b10      	ldr	r3, [pc, #64]	; (80150cc <ip_reass_dequeue_datagram+0x4c>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	687a      	ldr	r2, [r7, #4]
 8015090:	429a      	cmp	r2, r3
 8015092:	d104      	bne.n	801509e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	4a0c      	ldr	r2, [pc, #48]	; (80150cc <ip_reass_dequeue_datagram+0x4c>)
 801509a:	6013      	str	r3, [r2, #0]
 801509c:	e00d      	b.n	80150ba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d106      	bne.n	80150b2 <ip_reass_dequeue_datagram+0x32>
 80150a4:	4b0a      	ldr	r3, [pc, #40]	; (80150d0 <ip_reass_dequeue_datagram+0x50>)
 80150a6:	f240 1245 	movw	r2, #325	; 0x145
 80150aa:	490a      	ldr	r1, [pc, #40]	; (80150d4 <ip_reass_dequeue_datagram+0x54>)
 80150ac:	480a      	ldr	r0, [pc, #40]	; (80150d8 <ip_reass_dequeue_datagram+0x58>)
 80150ae:	f000 fee1 	bl	8015e74 <iprintf>
    prev->next = ipr->next;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80150ba:	6879      	ldr	r1, [r7, #4]
 80150bc:	2004      	movs	r0, #4
 80150be:	f7f6 fdf3 	bl	800bca8 <memp_free>
}
 80150c2:	bf00      	nop
 80150c4:	3708      	adds	r7, #8
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	20004618 	.word	0x20004618
 80150d0:	080197c4 	.word	0x080197c4
 80150d4:	0801988c 	.word	0x0801988c
 80150d8:	0801980c 	.word	0x0801980c

080150dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b08c      	sub	sp, #48	; 0x30
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	60f8      	str	r0, [r7, #12]
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80150e8:	2300      	movs	r3, #0
 80150ea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80150ec:	2301      	movs	r3, #1
 80150ee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	685b      	ldr	r3, [r3, #4]
 80150f4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80150f6:	69fb      	ldr	r3, [r7, #28]
 80150f8:	885b      	ldrh	r3, [r3, #2]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7f6 f895 	bl	800b22c <lwip_htons>
 8015102:	4603      	mov	r3, r0
 8015104:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015106:	69fb      	ldr	r3, [r7, #28]
 8015108:	781b      	ldrb	r3, [r3, #0]
 801510a:	f003 030f 	and.w	r3, r3, #15
 801510e:	b2db      	uxtb	r3, r3
 8015110:	009b      	lsls	r3, r3, #2
 8015112:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015114:	7e7b      	ldrb	r3, [r7, #25]
 8015116:	b29b      	uxth	r3, r3
 8015118:	8b7a      	ldrh	r2, [r7, #26]
 801511a:	429a      	cmp	r2, r3
 801511c:	d202      	bcs.n	8015124 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801511e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015122:	e135      	b.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015124:	7e7b      	ldrb	r3, [r7, #25]
 8015126:	b29b      	uxth	r3, r3
 8015128:	8b7a      	ldrh	r2, [r7, #26]
 801512a:	1ad3      	subs	r3, r2, r3
 801512c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	88db      	ldrh	r3, [r3, #6]
 8015132:	b29b      	uxth	r3, r3
 8015134:	4618      	mov	r0, r3
 8015136:	f7f6 f879 	bl	800b22c <lwip_htons>
 801513a:	4603      	mov	r3, r0
 801513c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015140:	b29b      	uxth	r3, r3
 8015142:	00db      	lsls	r3, r3, #3
 8015144:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514e:	2200      	movs	r2, #0
 8015150:	701a      	strb	r2, [r3, #0]
 8015152:	2200      	movs	r2, #0
 8015154:	705a      	strb	r2, [r3, #1]
 8015156:	2200      	movs	r2, #0
 8015158:	709a      	strb	r2, [r3, #2]
 801515a:	2200      	movs	r2, #0
 801515c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015160:	8afa      	ldrh	r2, [r7, #22]
 8015162:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015164:	8afa      	ldrh	r2, [r7, #22]
 8015166:	8b7b      	ldrh	r3, [r7, #26]
 8015168:	4413      	add	r3, r2
 801516a:	b29a      	uxth	r2, r3
 801516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801516e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015172:	88db      	ldrh	r3, [r3, #6]
 8015174:	b29b      	uxth	r3, r3
 8015176:	8afa      	ldrh	r2, [r7, #22]
 8015178:	429a      	cmp	r2, r3
 801517a:	d902      	bls.n	8015182 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801517c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015180:	e106      	b.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	627b      	str	r3, [r7, #36]	; 0x24
 8015188:	e068      	b.n	801525c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015192:	889b      	ldrh	r3, [r3, #4]
 8015194:	b29a      	uxth	r2, r3
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	889b      	ldrh	r3, [r3, #4]
 801519a:	b29b      	uxth	r3, r3
 801519c:	429a      	cmp	r2, r3
 801519e:	d235      	bcs.n	801520c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80151a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80151a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80151a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d020      	beq.n	80151ee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80151ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151ae:	889b      	ldrh	r3, [r3, #4]
 80151b0:	b29a      	uxth	r2, r3
 80151b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b4:	88db      	ldrh	r3, [r3, #6]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d307      	bcc.n	80151cc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80151bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151be:	88db      	ldrh	r3, [r3, #6]
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	889b      	ldrh	r3, [r3, #4]
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d902      	bls.n	80151d2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151d0:	e0de      	b.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80151d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151d4:	68ba      	ldr	r2, [r7, #8]
 80151d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80151d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151da:	88db      	ldrh	r3, [r3, #6]
 80151dc:	b29a      	uxth	r2, r3
 80151de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151e0:	889b      	ldrh	r3, [r3, #4]
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d03d      	beq.n	8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80151e8:	2300      	movs	r3, #0
 80151ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80151ec:	e03a      	b.n	8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80151ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151f0:	88db      	ldrh	r3, [r3, #6]
 80151f2:	b29a      	uxth	r2, r3
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	889b      	ldrh	r3, [r3, #4]
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d902      	bls.n	8015204 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015202:	e0c5      	b.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	68ba      	ldr	r2, [r7, #8]
 8015208:	605a      	str	r2, [r3, #4]
      break;
 801520a:	e02b      	b.n	8015264 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801520e:	889b      	ldrh	r3, [r3, #4]
 8015210:	b29a      	uxth	r2, r3
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	889b      	ldrh	r3, [r3, #4]
 8015216:	b29b      	uxth	r3, r3
 8015218:	429a      	cmp	r2, r3
 801521a:	d102      	bne.n	8015222 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801521c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015220:	e0b6      	b.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015224:	889b      	ldrh	r3, [r3, #4]
 8015226:	b29a      	uxth	r2, r3
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	88db      	ldrh	r3, [r3, #6]
 801522c:	b29b      	uxth	r3, r3
 801522e:	429a      	cmp	r2, r3
 8015230:	d202      	bcs.n	8015238 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015236:	e0ab      	b.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523a:	2b00      	cmp	r3, #0
 801523c:	d009      	beq.n	8015252 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015240:	88db      	ldrh	r3, [r3, #6]
 8015242:	b29a      	uxth	r2, r3
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	889b      	ldrh	r3, [r3, #4]
 8015248:	b29b      	uxth	r3, r3
 801524a:	429a      	cmp	r2, r3
 801524c:	d001      	beq.n	8015252 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801524e:	2300      	movs	r3, #0
 8015250:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525e:	2b00      	cmp	r3, #0
 8015260:	d193      	bne.n	801518a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015262:	e000      	b.n	8015266 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015264:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015268:	2b00      	cmp	r3, #0
 801526a:	d12d      	bne.n	80152c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801526e:	2b00      	cmp	r3, #0
 8015270:	d01c      	beq.n	80152ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015274:	88db      	ldrh	r3, [r3, #6]
 8015276:	b29a      	uxth	r2, r3
 8015278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801527a:	889b      	ldrh	r3, [r3, #4]
 801527c:	b29b      	uxth	r3, r3
 801527e:	429a      	cmp	r2, r3
 8015280:	d906      	bls.n	8015290 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015282:	4b45      	ldr	r3, [pc, #276]	; (8015398 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015284:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015288:	4944      	ldr	r1, [pc, #272]	; (801539c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801528a:	4845      	ldr	r0, [pc, #276]	; (80153a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801528c:	f000 fdf2 	bl	8015e74 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015292:	68ba      	ldr	r2, [r7, #8]
 8015294:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015298:	88db      	ldrh	r3, [r3, #6]
 801529a:	b29a      	uxth	r2, r3
 801529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801529e:	889b      	ldrh	r3, [r3, #4]
 80152a0:	b29b      	uxth	r3, r3
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d010      	beq.n	80152c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80152a6:	2300      	movs	r3, #0
 80152a8:	623b      	str	r3, [r7, #32]
 80152aa:	e00d      	b.n	80152c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	685b      	ldr	r3, [r3, #4]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d006      	beq.n	80152c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80152b4:	4b38      	ldr	r3, [pc, #224]	; (8015398 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152b6:	f240 12bf 	movw	r2, #447	; 0x1bf
 80152ba:	493a      	ldr	r1, [pc, #232]	; (80153a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80152bc:	4838      	ldr	r0, [pc, #224]	; (80153a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152be:	f000 fdd9 	bl	8015e74 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	68ba      	ldr	r2, [r7, #8]
 80152c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d105      	bne.n	80152da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	7f9b      	ldrb	r3, [r3, #30]
 80152d2:	f003 0301 	and.w	r3, r3, #1
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d059      	beq.n	801538e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80152da:	6a3b      	ldr	r3, [r7, #32]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d04f      	beq.n	8015380 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d006      	beq.n	80152f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	685b      	ldr	r3, [r3, #4]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	889b      	ldrh	r3, [r3, #4]
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d002      	beq.n	80152fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80152f6:	2300      	movs	r3, #0
 80152f8:	623b      	str	r3, [r7, #32]
 80152fa:	e041      	b.n	8015380 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80152fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152fe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015306:	e012      	b.n	801532e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015310:	88db      	ldrh	r3, [r3, #6]
 8015312:	b29a      	uxth	r2, r3
 8015314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015316:	889b      	ldrh	r3, [r3, #4]
 8015318:	b29b      	uxth	r3, r3
 801531a:	429a      	cmp	r2, r3
 801531c:	d002      	beq.n	8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801531e:	2300      	movs	r3, #0
 8015320:	623b      	str	r3, [r7, #32]
            break;
 8015322:	e007      	b.n	8015334 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015326:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015330:	2b00      	cmp	r3, #0
 8015332:	d1e9      	bne.n	8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015334:	6a3b      	ldr	r3, [r7, #32]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d022      	beq.n	8015380 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	685b      	ldr	r3, [r3, #4]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d106      	bne.n	8015350 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015342:	4b15      	ldr	r3, [pc, #84]	; (8015398 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015344:	f240 12df 	movw	r2, #479	; 0x1df
 8015348:	4917      	ldr	r1, [pc, #92]	; (80153a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801534a:	4815      	ldr	r0, [pc, #84]	; (80153a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801534c:	f000 fd92 	bl	8015e74 <iprintf>
          LWIP_ASSERT("sanity check",
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	685b      	ldr	r3, [r3, #4]
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015358:	429a      	cmp	r2, r3
 801535a:	d106      	bne.n	801536a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801535c:	4b0e      	ldr	r3, [pc, #56]	; (8015398 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801535e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015362:	4911      	ldr	r1, [pc, #68]	; (80153a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015364:	480e      	ldr	r0, [pc, #56]	; (80153a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015366:	f000 fd85 	bl	8015e74 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d006      	beq.n	8015380 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015372:	4b09      	ldr	r3, [pc, #36]	; (8015398 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015374:	f240 12e3 	movw	r2, #483	; 0x1e3
 8015378:	490c      	ldr	r1, [pc, #48]	; (80153ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801537a:	4809      	ldr	r0, [pc, #36]	; (80153a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801537c:	f000 fd7a 	bl	8015e74 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015380:	6a3b      	ldr	r3, [r7, #32]
 8015382:	2b00      	cmp	r3, #0
 8015384:	bf14      	ite	ne
 8015386:	2301      	movne	r3, #1
 8015388:	2300      	moveq	r3, #0
 801538a:	b2db      	uxtb	r3, r3
 801538c:	e000      	b.n	8015390 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801538e:	2300      	movs	r3, #0
}
 8015390:	4618      	mov	r0, r3
 8015392:	3730      	adds	r7, #48	; 0x30
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	080197c4 	.word	0x080197c4
 801539c:	080198a8 	.word	0x080198a8
 80153a0:	0801980c 	.word	0x0801980c
 80153a4:	080198c8 	.word	0x080198c8
 80153a8:	08019900 	.word	0x08019900
 80153ac:	08019910 	.word	0x08019910

080153b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b08e      	sub	sp, #56	; 0x38
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80153be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c0:	781b      	ldrb	r3, [r3, #0]
 80153c2:	f003 030f 	and.w	r3, r3, #15
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	009b      	lsls	r3, r3, #2
 80153ca:	b2db      	uxtb	r3, r3
 80153cc:	2b14      	cmp	r3, #20
 80153ce:	f040 8167 	bne.w	80156a0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80153d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d4:	88db      	ldrh	r3, [r3, #6]
 80153d6:	b29b      	uxth	r3, r3
 80153d8:	4618      	mov	r0, r3
 80153da:	f7f5 ff27 	bl	800b22c <lwip_htons>
 80153de:	4603      	mov	r3, r0
 80153e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	00db      	lsls	r3, r3, #3
 80153e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80153ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ec:	885b      	ldrh	r3, [r3, #2]
 80153ee:	b29b      	uxth	r3, r3
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7f5 ff1b 	bl	800b22c <lwip_htons>
 80153f6:	4603      	mov	r3, r0
 80153f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80153fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fc:	781b      	ldrb	r3, [r3, #0]
 80153fe:	f003 030f 	and.w	r3, r3, #15
 8015402:	b2db      	uxtb	r3, r3
 8015404:	009b      	lsls	r3, r3, #2
 8015406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801540a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801540e:	b29b      	uxth	r3, r3
 8015410:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015412:	429a      	cmp	r2, r3
 8015414:	f0c0 8146 	bcc.w	80156a4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015418:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801541c:	b29b      	uxth	r3, r3
 801541e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015420:	1ad3      	subs	r3, r2, r3
 8015422:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f7f7 fb6d 	bl	800cb04 <pbuf_clen>
 801542a:	4603      	mov	r3, r0
 801542c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801542e:	4ba3      	ldr	r3, [pc, #652]	; (80156bc <ip4_reass+0x30c>)
 8015430:	881b      	ldrh	r3, [r3, #0]
 8015432:	461a      	mov	r2, r3
 8015434:	8c3b      	ldrh	r3, [r7, #32]
 8015436:	4413      	add	r3, r2
 8015438:	2b0a      	cmp	r3, #10
 801543a:	dd10      	ble.n	801545e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801543c:	8c3b      	ldrh	r3, [r7, #32]
 801543e:	4619      	mov	r1, r3
 8015440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015442:	f7ff fd81 	bl	8014f48 <ip_reass_remove_oldest_datagram>
 8015446:	4603      	mov	r3, r0
 8015448:	2b00      	cmp	r3, #0
 801544a:	f000 812d 	beq.w	80156a8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801544e:	4b9b      	ldr	r3, [pc, #620]	; (80156bc <ip4_reass+0x30c>)
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	461a      	mov	r2, r3
 8015454:	8c3b      	ldrh	r3, [r7, #32]
 8015456:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015458:	2b0a      	cmp	r3, #10
 801545a:	f300 8125 	bgt.w	80156a8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801545e:	4b98      	ldr	r3, [pc, #608]	; (80156c0 <ip4_reass+0x310>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	633b      	str	r3, [r7, #48]	; 0x30
 8015464:	e015      	b.n	8015492 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015468:	695a      	ldr	r2, [r3, #20]
 801546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801546c:	68db      	ldr	r3, [r3, #12]
 801546e:	429a      	cmp	r2, r3
 8015470:	d10c      	bne.n	801548c <ip4_reass+0xdc>
 8015472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015474:	699a      	ldr	r2, [r3, #24]
 8015476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015478:	691b      	ldr	r3, [r3, #16]
 801547a:	429a      	cmp	r2, r3
 801547c:	d106      	bne.n	801548c <ip4_reass+0xdc>
 801547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015480:	899a      	ldrh	r2, [r3, #12]
 8015482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015484:	889b      	ldrh	r3, [r3, #4]
 8015486:	b29b      	uxth	r3, r3
 8015488:	429a      	cmp	r2, r3
 801548a:	d006      	beq.n	801549a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	633b      	str	r3, [r7, #48]	; 0x30
 8015492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1e6      	bne.n	8015466 <ip4_reass+0xb6>
 8015498:	e000      	b.n	801549c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801549a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d109      	bne.n	80154b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80154a2:	8c3b      	ldrh	r3, [r7, #32]
 80154a4:	4619      	mov	r1, r3
 80154a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80154a8:	f7ff fdb0 	bl	801500c <ip_reass_enqueue_new_datagram>
 80154ac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80154ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d11c      	bne.n	80154ee <ip4_reass+0x13e>
      goto nullreturn;
 80154b4:	e0f9      	b.n	80156aa <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80154b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b8:	88db      	ldrh	r3, [r3, #6]
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	4618      	mov	r0, r3
 80154be:	f7f5 feb5 	bl	800b22c <lwip_htons>
 80154c2:	4603      	mov	r3, r0
 80154c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d110      	bne.n	80154ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80154cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ce:	89db      	ldrh	r3, [r3, #14]
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7f5 feab 	bl	800b22c <lwip_htons>
 80154d6:	4603      	mov	r3, r0
 80154d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d006      	beq.n	80154ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80154e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e2:	3308      	adds	r3, #8
 80154e4:	2214      	movs	r2, #20
 80154e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80154e8:	4618      	mov	r0, r3
 80154ea:	f000 fcb0 	bl	8015e4e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80154ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f0:	88db      	ldrh	r3, [r3, #6]
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	f003 0320 	and.w	r3, r3, #32
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	bf0c      	ite	eq
 80154fc:	2301      	moveq	r3, #1
 80154fe:	2300      	movne	r3, #0
 8015500:	b2db      	uxtb	r3, r3
 8015502:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015504:	69fb      	ldr	r3, [r7, #28]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d00e      	beq.n	8015528 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801550a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801550c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801550e:	4413      	add	r3, r2
 8015510:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015512:	8b7a      	ldrh	r2, [r7, #26]
 8015514:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015516:	429a      	cmp	r2, r3
 8015518:	f0c0 80a0 	bcc.w	801565c <ip4_reass+0x2ac>
 801551c:	8b7b      	ldrh	r3, [r7, #26]
 801551e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015522:	4293      	cmp	r3, r2
 8015524:	f200 809a 	bhi.w	801565c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015528:	69fa      	ldr	r2, [r7, #28]
 801552a:	6879      	ldr	r1, [r7, #4]
 801552c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801552e:	f7ff fdd5 	bl	80150dc <ip_reass_chain_frag_into_datagram_and_validate>
 8015532:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801553a:	f000 8091 	beq.w	8015660 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801553e:	4b5f      	ldr	r3, [pc, #380]	; (80156bc <ip4_reass+0x30c>)
 8015540:	881a      	ldrh	r2, [r3, #0]
 8015542:	8c3b      	ldrh	r3, [r7, #32]
 8015544:	4413      	add	r3, r2
 8015546:	b29a      	uxth	r2, r3
 8015548:	4b5c      	ldr	r3, [pc, #368]	; (80156bc <ip4_reass+0x30c>)
 801554a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d00d      	beq.n	801556e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015552:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015556:	4413      	add	r3, r2
 8015558:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801555c:	8a7a      	ldrh	r2, [r7, #18]
 801555e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015562:	7f9b      	ldrb	r3, [r3, #30]
 8015564:	f043 0301 	orr.w	r3, r3, #1
 8015568:	b2da      	uxtb	r2, r3
 801556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801556c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	2b01      	cmp	r3, #1
 8015572:	d171      	bne.n	8015658 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015576:	8b9b      	ldrh	r3, [r3, #28]
 8015578:	3314      	adds	r3, #20
 801557a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	685b      	ldr	r3, [r3, #4]
 801558c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015590:	3308      	adds	r3, #8
 8015592:	2214      	movs	r2, #20
 8015594:	4619      	mov	r1, r3
 8015596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015598:	f000 fc59 	bl	8015e4e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801559c:	8a3b      	ldrh	r3, [r7, #16]
 801559e:	4618      	mov	r0, r3
 80155a0:	f7f5 fe44 	bl	800b22c <lwip_htons>
 80155a4:	4603      	mov	r3, r0
 80155a6:	461a      	mov	r2, r3
 80155a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80155ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ae:	2200      	movs	r2, #0
 80155b0:	719a      	strb	r2, [r3, #6]
 80155b2:	2200      	movs	r2, #0
 80155b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80155b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b8:	2200      	movs	r2, #0
 80155ba:	729a      	strb	r2, [r3, #10]
 80155bc:	2200      	movs	r2, #0
 80155be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80155c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80155c6:	e00d      	b.n	80155e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80155c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155ca:	685b      	ldr	r3, [r3, #4]
 80155cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80155ce:	2114      	movs	r1, #20
 80155d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80155d2:	f7f7 f983 	bl	800c8dc <pbuf_remove_header>
      pbuf_cat(p, r);
 80155d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f7f7 fad3 	bl	800cb84 <pbuf_cat>
      r = iprh->next_pbuf;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80155e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d1ee      	bne.n	80155c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80155ea:	4b35      	ldr	r3, [pc, #212]	; (80156c0 <ip4_reass+0x310>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d102      	bne.n	80155fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80155f4:	2300      	movs	r3, #0
 80155f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80155f8:	e010      	b.n	801561c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80155fa:	4b31      	ldr	r3, [pc, #196]	; (80156c0 <ip4_reass+0x310>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015600:	e007      	b.n	8015612 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015608:	429a      	cmp	r2, r3
 801560a:	d006      	beq.n	801561a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015614:	2b00      	cmp	r3, #0
 8015616:	d1f4      	bne.n	8015602 <ip4_reass+0x252>
 8015618:	e000      	b.n	801561c <ip4_reass+0x26c>
          break;
 801561a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801561c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801561e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015620:	f7ff fd2e 	bl	8015080 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015624:	6878      	ldr	r0, [r7, #4]
 8015626:	f7f7 fa6d 	bl	800cb04 <pbuf_clen>
 801562a:	4603      	mov	r3, r0
 801562c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801562e:	4b23      	ldr	r3, [pc, #140]	; (80156bc <ip4_reass+0x30c>)
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	8c3a      	ldrh	r2, [r7, #32]
 8015634:	429a      	cmp	r2, r3
 8015636:	d906      	bls.n	8015646 <ip4_reass+0x296>
 8015638:	4b22      	ldr	r3, [pc, #136]	; (80156c4 <ip4_reass+0x314>)
 801563a:	f240 229b 	movw	r2, #667	; 0x29b
 801563e:	4922      	ldr	r1, [pc, #136]	; (80156c8 <ip4_reass+0x318>)
 8015640:	4822      	ldr	r0, [pc, #136]	; (80156cc <ip4_reass+0x31c>)
 8015642:	f000 fc17 	bl	8015e74 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015646:	4b1d      	ldr	r3, [pc, #116]	; (80156bc <ip4_reass+0x30c>)
 8015648:	881a      	ldrh	r2, [r3, #0]
 801564a:	8c3b      	ldrh	r3, [r7, #32]
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	b29a      	uxth	r2, r3
 8015650:	4b1a      	ldr	r3, [pc, #104]	; (80156bc <ip4_reass+0x30c>)
 8015652:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	e02c      	b.n	80156b2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015658:	2300      	movs	r3, #0
 801565a:	e02a      	b.n	80156b2 <ip4_reass+0x302>

nullreturn_ipr:
 801565c:	bf00      	nop
 801565e:	e000      	b.n	8015662 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015660:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015664:	2b00      	cmp	r3, #0
 8015666:	d106      	bne.n	8015676 <ip4_reass+0x2c6>
 8015668:	4b16      	ldr	r3, [pc, #88]	; (80156c4 <ip4_reass+0x314>)
 801566a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801566e:	4918      	ldr	r1, [pc, #96]	; (80156d0 <ip4_reass+0x320>)
 8015670:	4816      	ldr	r0, [pc, #88]	; (80156cc <ip4_reass+0x31c>)
 8015672:	f000 fbff 	bl	8015e74 <iprintf>
  if (ipr->p == NULL) {
 8015676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d114      	bne.n	80156a8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801567e:	4b10      	ldr	r3, [pc, #64]	; (80156c0 <ip4_reass+0x310>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015684:	429a      	cmp	r2, r3
 8015686:	d006      	beq.n	8015696 <ip4_reass+0x2e6>
 8015688:	4b0e      	ldr	r3, [pc, #56]	; (80156c4 <ip4_reass+0x314>)
 801568a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801568e:	4911      	ldr	r1, [pc, #68]	; (80156d4 <ip4_reass+0x324>)
 8015690:	480e      	ldr	r0, [pc, #56]	; (80156cc <ip4_reass+0x31c>)
 8015692:	f000 fbef 	bl	8015e74 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015696:	2100      	movs	r1, #0
 8015698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801569a:	f7ff fcf1 	bl	8015080 <ip_reass_dequeue_datagram>
 801569e:	e004      	b.n	80156aa <ip4_reass+0x2fa>
    goto nullreturn;
 80156a0:	bf00      	nop
 80156a2:	e002      	b.n	80156aa <ip4_reass+0x2fa>
    goto nullreturn;
 80156a4:	bf00      	nop
 80156a6:	e000      	b.n	80156aa <ip4_reass+0x2fa>
  }

nullreturn:
 80156a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f7f7 f99c 	bl	800c9e8 <pbuf_free>
  return NULL;
 80156b0:	2300      	movs	r3, #0
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3738      	adds	r7, #56	; 0x38
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
 80156ba:	bf00      	nop
 80156bc:	2000461c 	.word	0x2000461c
 80156c0:	20004618 	.word	0x20004618
 80156c4:	080197c4 	.word	0x080197c4
 80156c8:	08019934 	.word	0x08019934
 80156cc:	0801980c 	.word	0x0801980c
 80156d0:	08019950 	.word	0x08019950
 80156d4:	0801995c 	.word	0x0801995c

080156d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80156dc:	2005      	movs	r0, #5
 80156de:	f7f6 fa91 	bl	800bc04 <memp_malloc>
 80156e2:	4603      	mov	r3, r0
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	bd80      	pop	{r7, pc}

080156e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d106      	bne.n	8015704 <ip_frag_free_pbuf_custom_ref+0x1c>
 80156f6:	4b07      	ldr	r3, [pc, #28]	; (8015714 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80156f8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80156fc:	4906      	ldr	r1, [pc, #24]	; (8015718 <ip_frag_free_pbuf_custom_ref+0x30>)
 80156fe:	4807      	ldr	r0, [pc, #28]	; (801571c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015700:	f000 fbb8 	bl	8015e74 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015704:	6879      	ldr	r1, [r7, #4]
 8015706:	2005      	movs	r0, #5
 8015708:	f7f6 face 	bl	800bca8 <memp_free>
}
 801570c:	bf00      	nop
 801570e:	3708      	adds	r7, #8
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}
 8015714:	080197c4 	.word	0x080197c4
 8015718:	0801997c 	.word	0x0801997c
 801571c:	0801980c 	.word	0x0801980c

08015720 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b084      	sub	sp, #16
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d106      	bne.n	8015740 <ipfrag_free_pbuf_custom+0x20>
 8015732:	4b11      	ldr	r3, [pc, #68]	; (8015778 <ipfrag_free_pbuf_custom+0x58>)
 8015734:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015738:	4910      	ldr	r1, [pc, #64]	; (801577c <ipfrag_free_pbuf_custom+0x5c>)
 801573a:	4811      	ldr	r0, [pc, #68]	; (8015780 <ipfrag_free_pbuf_custom+0x60>)
 801573c:	f000 fb9a 	bl	8015e74 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015740:	68fa      	ldr	r2, [r7, #12]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	429a      	cmp	r2, r3
 8015746:	d006      	beq.n	8015756 <ipfrag_free_pbuf_custom+0x36>
 8015748:	4b0b      	ldr	r3, [pc, #44]	; (8015778 <ipfrag_free_pbuf_custom+0x58>)
 801574a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801574e:	490d      	ldr	r1, [pc, #52]	; (8015784 <ipfrag_free_pbuf_custom+0x64>)
 8015750:	480b      	ldr	r0, [pc, #44]	; (8015780 <ipfrag_free_pbuf_custom+0x60>)
 8015752:	f000 fb8f 	bl	8015e74 <iprintf>
  if (pcr->original != NULL) {
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	695b      	ldr	r3, [r3, #20]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d004      	beq.n	8015768 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	695b      	ldr	r3, [r3, #20]
 8015762:	4618      	mov	r0, r3
 8015764:	f7f7 f940 	bl	800c9e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015768:	68f8      	ldr	r0, [r7, #12]
 801576a:	f7ff ffbd 	bl	80156e8 <ip_frag_free_pbuf_custom_ref>
}
 801576e:	bf00      	nop
 8015770:	3710      	adds	r7, #16
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}
 8015776:	bf00      	nop
 8015778:	080197c4 	.word	0x080197c4
 801577c:	08019988 	.word	0x08019988
 8015780:	0801980c 	.word	0x0801980c
 8015784:	08019994 	.word	0x08019994

08015788 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b094      	sub	sp, #80	; 0x50
 801578c:	af02      	add	r7, sp, #8
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	60b9      	str	r1, [r7, #8]
 8015792:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015794:	2300      	movs	r3, #0
 8015796:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801579a:	68bb      	ldr	r3, [r7, #8]
 801579c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801579e:	3b14      	subs	r3, #20
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	da00      	bge.n	80157a6 <ip4_frag+0x1e>
 80157a4:	3307      	adds	r3, #7
 80157a6:	10db      	asrs	r3, r3, #3
 80157a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80157aa:	2314      	movs	r3, #20
 80157ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	685b      	ldr	r3, [r3, #4]
 80157b2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80157b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80157b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	f003 030f 	and.w	r3, r3, #15
 80157c0:	b2db      	uxtb	r3, r3
 80157c2:	009b      	lsls	r3, r3, #2
 80157c4:	b2db      	uxtb	r3, r3
 80157c6:	2b14      	cmp	r3, #20
 80157c8:	d002      	beq.n	80157d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80157ca:	f06f 0305 	mvn.w	r3, #5
 80157ce:	e10f      	b.n	80159f0 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	895b      	ldrh	r3, [r3, #10]
 80157d4:	2b13      	cmp	r3, #19
 80157d6:	d809      	bhi.n	80157ec <ip4_frag+0x64>
 80157d8:	4b87      	ldr	r3, [pc, #540]	; (80159f8 <ip4_frag+0x270>)
 80157da:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80157de:	4987      	ldr	r1, [pc, #540]	; (80159fc <ip4_frag+0x274>)
 80157e0:	4887      	ldr	r0, [pc, #540]	; (8015a00 <ip4_frag+0x278>)
 80157e2:	f000 fb47 	bl	8015e74 <iprintf>
 80157e6:	f06f 0305 	mvn.w	r3, #5
 80157ea:	e101      	b.n	80159f0 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80157ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ee:	88db      	ldrh	r3, [r3, #6]
 80157f0:	b29b      	uxth	r3, r3
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7f5 fd1a 	bl	800b22c <lwip_htons>
 80157f8:	4603      	mov	r3, r0
 80157fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80157fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80157fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015802:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015806:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801580c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	891b      	ldrh	r3, [r3, #8]
 8015812:	3b14      	subs	r3, #20
 8015814:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015818:	e0e0      	b.n	80159dc <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801581a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801581c:	00db      	lsls	r3, r3, #3
 801581e:	b29b      	uxth	r3, r3
 8015820:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015824:	4293      	cmp	r3, r2
 8015826:	bf28      	it	cs
 8015828:	4613      	movcs	r3, r2
 801582a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801582c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015830:	2114      	movs	r1, #20
 8015832:	200e      	movs	r0, #14
 8015834:	f7f6 fdf8 	bl	800c428 <pbuf_alloc>
 8015838:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801583c:	2b00      	cmp	r3, #0
 801583e:	f000 80d4 	beq.w	80159ea <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015844:	895b      	ldrh	r3, [r3, #10]
 8015846:	2b13      	cmp	r3, #19
 8015848:	d806      	bhi.n	8015858 <ip4_frag+0xd0>
 801584a:	4b6b      	ldr	r3, [pc, #428]	; (80159f8 <ip4_frag+0x270>)
 801584c:	f240 3225 	movw	r2, #805	; 0x325
 8015850:	496c      	ldr	r1, [pc, #432]	; (8015a04 <ip4_frag+0x27c>)
 8015852:	486b      	ldr	r0, [pc, #428]	; (8015a00 <ip4_frag+0x278>)
 8015854:	f000 fb0e 	bl	8015e74 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585a:	685b      	ldr	r3, [r3, #4]
 801585c:	2214      	movs	r2, #20
 801585e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015860:	4618      	mov	r0, r3
 8015862:	f000 faf4 	bl	8015e4e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015868:	685b      	ldr	r3, [r3, #4]
 801586a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801586c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801586e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015872:	e064      	b.n	801593e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	895a      	ldrh	r2, [r3, #10]
 8015878:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801587a:	1ad3      	subs	r3, r2, r3
 801587c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	895b      	ldrh	r3, [r3, #10]
 8015882:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015884:	429a      	cmp	r2, r3
 8015886:	d906      	bls.n	8015896 <ip4_frag+0x10e>
 8015888:	4b5b      	ldr	r3, [pc, #364]	; (80159f8 <ip4_frag+0x270>)
 801588a:	f240 322d 	movw	r2, #813	; 0x32d
 801588e:	495e      	ldr	r1, [pc, #376]	; (8015a08 <ip4_frag+0x280>)
 8015890:	485b      	ldr	r0, [pc, #364]	; (8015a00 <ip4_frag+0x278>)
 8015892:	f000 faef 	bl	8015e74 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015896:	8bfa      	ldrh	r2, [r7, #30]
 8015898:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801589c:	4293      	cmp	r3, r2
 801589e:	bf28      	it	cs
 80158a0:	4613      	movcs	r3, r2
 80158a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80158a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d105      	bne.n	80158ba <ip4_frag+0x132>
        poff = 0;
 80158ae:	2300      	movs	r3, #0
 80158b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	60fb      	str	r3, [r7, #12]
        continue;
 80158b8:	e041      	b.n	801593e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80158ba:	f7ff ff0d 	bl	80156d8 <ip_frag_alloc_pbuf_custom_ref>
 80158be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80158c0:	69bb      	ldr	r3, [r7, #24]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d103      	bne.n	80158ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 80158c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158c8:	f7f7 f88e 	bl	800c9e8 <pbuf_free>
        goto memerr;
 80158cc:	e08e      	b.n	80159ec <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80158ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80158d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80158d6:	4413      	add	r3, r2
 80158d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80158dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80158e0:	9201      	str	r2, [sp, #4]
 80158e2:	9300      	str	r3, [sp, #0]
 80158e4:	4603      	mov	r3, r0
 80158e6:	2241      	movs	r2, #65	; 0x41
 80158e8:	2000      	movs	r0, #0
 80158ea:	f7f6 fec3 	bl	800c674 <pbuf_alloced_custom>
 80158ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80158f0:	697b      	ldr	r3, [r7, #20]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d106      	bne.n	8015904 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80158f6:	69b8      	ldr	r0, [r7, #24]
 80158f8:	f7ff fef6 	bl	80156e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80158fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80158fe:	f7f7 f873 	bl	800c9e8 <pbuf_free>
        goto memerr;
 8015902:	e073      	b.n	80159ec <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8015904:	68f8      	ldr	r0, [r7, #12]
 8015906:	f7f7 f915 	bl	800cb34 <pbuf_ref>
      pcr->original = p;
 801590a:	69bb      	ldr	r3, [r7, #24]
 801590c:	68fa      	ldr	r2, [r7, #12]
 801590e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	4a3e      	ldr	r2, [pc, #248]	; (8015a0c <ip4_frag+0x284>)
 8015914:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015916:	6979      	ldr	r1, [r7, #20]
 8015918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801591a:	f7f7 f933 	bl	800cb84 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801591e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015922:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015926:	1ad3      	subs	r3, r2, r3
 8015928:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801592c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015930:	2b00      	cmp	r3, #0
 8015932:	d004      	beq.n	801593e <ip4_frag+0x1b6>
        poff = 0;
 8015934:	2300      	movs	r3, #0
 8015936:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801593e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015942:	2b00      	cmp	r3, #0
 8015944:	d196      	bne.n	8015874 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015946:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015948:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801594c:	4413      	add	r3, r2
 801594e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015950:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015954:	68bb      	ldr	r3, [r7, #8]
 8015956:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015958:	3b14      	subs	r3, #20
 801595a:	429a      	cmp	r2, r3
 801595c:	bfd4      	ite	le
 801595e:	2301      	movle	r3, #1
 8015960:	2300      	movgt	r3, #0
 8015962:	b2db      	uxtb	r3, r3
 8015964:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015966:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801596a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801596e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015970:	6a3b      	ldr	r3, [r7, #32]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d002      	beq.n	801597c <ip4_frag+0x1f4>
 8015976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015978:	2b00      	cmp	r3, #0
 801597a:	d003      	beq.n	8015984 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801597c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801597e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015982:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015984:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015986:	4618      	mov	r0, r3
 8015988:	f7f5 fc50 	bl	800b22c <lwip_htons>
 801598c:	4603      	mov	r3, r0
 801598e:	461a      	mov	r2, r3
 8015990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015992:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015994:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015996:	3314      	adds	r3, #20
 8015998:	b29b      	uxth	r3, r3
 801599a:	4618      	mov	r0, r3
 801599c:	f7f5 fc46 	bl	800b22c <lwip_htons>
 80159a0:	4603      	mov	r3, r0
 80159a2:	461a      	mov	r2, r3
 80159a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80159a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159aa:	2200      	movs	r2, #0
 80159ac:	729a      	strb	r2, [r3, #10]
 80159ae:	2200      	movs	r2, #0
 80159b0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80159b2:	68bb      	ldr	r3, [r7, #8]
 80159b4:	695b      	ldr	r3, [r3, #20]
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80159ba:	68b8      	ldr	r0, [r7, #8]
 80159bc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80159be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159c0:	f7f7 f812 	bl	800c9e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80159c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80159c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80159ca:	1ad3      	subs	r3, r2, r3
 80159cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80159d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80159d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80159d6:	4413      	add	r3, r2
 80159d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80159dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	f47f af1a 	bne.w	801581a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80159e6:	2300      	movs	r3, #0
 80159e8:	e002      	b.n	80159f0 <ip4_frag+0x268>
      goto memerr;
 80159ea:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80159ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3748      	adds	r7, #72	; 0x48
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}
 80159f8:	080197c4 	.word	0x080197c4
 80159fc:	080199a0 	.word	0x080199a0
 8015a00:	0801980c 	.word	0x0801980c
 8015a04:	080199bc 	.word	0x080199bc
 8015a08:	080199dc 	.word	0x080199dc
 8015a0c:	08015721 	.word	0x08015721

08015a10 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b086      	sub	sp, #24
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015a1a:	230e      	movs	r3, #14
 8015a1c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	895b      	ldrh	r3, [r3, #10]
 8015a22:	2b0e      	cmp	r3, #14
 8015a24:	d96e      	bls.n	8015b04 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	7bdb      	ldrb	r3, [r3, #15]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d106      	bne.n	8015a3c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015a34:	3301      	adds	r3, #1
 8015a36:	b2da      	uxtb	r2, r3
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	685b      	ldr	r3, [r3, #4]
 8015a40:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015a42:	693b      	ldr	r3, [r7, #16]
 8015a44:	7b1a      	ldrb	r2, [r3, #12]
 8015a46:	7b5b      	ldrb	r3, [r3, #13]
 8015a48:	021b      	lsls	r3, r3, #8
 8015a4a:	4313      	orrs	r3, r2
 8015a4c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	781b      	ldrb	r3, [r3, #0]
 8015a52:	f003 0301 	and.w	r3, r3, #1
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d023      	beq.n	8015aa2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015a5a:	693b      	ldr	r3, [r7, #16]
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	2b01      	cmp	r3, #1
 8015a60:	d10f      	bne.n	8015a82 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015a62:	693b      	ldr	r3, [r7, #16]
 8015a64:	785b      	ldrb	r3, [r3, #1]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d11b      	bne.n	8015aa2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015a6e:	2b5e      	cmp	r3, #94	; 0x5e
 8015a70:	d117      	bne.n	8015aa2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	7b5b      	ldrb	r3, [r3, #13]
 8015a76:	f043 0310 	orr.w	r3, r3, #16
 8015a7a:	b2da      	uxtb	r2, r3
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	735a      	strb	r2, [r3, #13]
 8015a80:	e00f      	b.n	8015aa2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	2206      	movs	r2, #6
 8015a86:	4928      	ldr	r1, [pc, #160]	; (8015b28 <ethernet_input+0x118>)
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f000 f9d1 	bl	8015e30 <memcmp>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d106      	bne.n	8015aa2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	7b5b      	ldrb	r3, [r3, #13]
 8015a98:	f043 0308 	orr.w	r3, r3, #8
 8015a9c:	b2da      	uxtb	r2, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015aa2:	89fb      	ldrh	r3, [r7, #14]
 8015aa4:	2b08      	cmp	r3, #8
 8015aa6:	d003      	beq.n	8015ab0 <ethernet_input+0xa0>
 8015aa8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015aac:	d014      	beq.n	8015ad8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015aae:	e032      	b.n	8015b16 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ab6:	f003 0308 	and.w	r3, r3, #8
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d024      	beq.n	8015b08 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015abe:	8afb      	ldrh	r3, [r7, #22]
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f7f6 ff0a 	bl	800c8dc <pbuf_remove_header>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d11e      	bne.n	8015b0c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015ace:	6839      	ldr	r1, [r7, #0]
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f7fe ff2d 	bl	8014930 <ip4_input>
      break;
 8015ad6:	e013      	b.n	8015b00 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ade:	f003 0308 	and.w	r3, r3, #8
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d014      	beq.n	8015b10 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015ae6:	8afb      	ldrh	r3, [r7, #22]
 8015ae8:	4619      	mov	r1, r3
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f7f6 fef6 	bl	800c8dc <pbuf_remove_header>
 8015af0:	4603      	mov	r3, r0
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d10e      	bne.n	8015b14 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015af6:	6839      	ldr	r1, [r7, #0]
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7fe f8cd 	bl	8013c98 <etharp_input>
      break;
 8015afe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015b00:	2300      	movs	r3, #0
 8015b02:	e00c      	b.n	8015b1e <ethernet_input+0x10e>
    goto free_and_return;
 8015b04:	bf00      	nop
 8015b06:	e006      	b.n	8015b16 <ethernet_input+0x106>
        goto free_and_return;
 8015b08:	bf00      	nop
 8015b0a:	e004      	b.n	8015b16 <ethernet_input+0x106>
        goto free_and_return;
 8015b0c:	bf00      	nop
 8015b0e:	e002      	b.n	8015b16 <ethernet_input+0x106>
        goto free_and_return;
 8015b10:	bf00      	nop
 8015b12:	e000      	b.n	8015b16 <ethernet_input+0x106>
        goto free_and_return;
 8015b14:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f7f6 ff66 	bl	800c9e8 <pbuf_free>
  return ERR_OK;
 8015b1c:	2300      	movs	r3, #0
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3718      	adds	r7, #24
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	0802a6f4 	.word	0x0802a6f4

08015b2c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b086      	sub	sp, #24
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	60b9      	str	r1, [r7, #8]
 8015b36:	607a      	str	r2, [r7, #4]
 8015b38:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015b3a:	8c3b      	ldrh	r3, [r7, #32]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f7f5 fb75 	bl	800b22c <lwip_htons>
 8015b42:	4603      	mov	r3, r0
 8015b44:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015b46:	210e      	movs	r1, #14
 8015b48:	68b8      	ldr	r0, [r7, #8]
 8015b4a:	f7f6 feb7 	bl	800c8bc <pbuf_add_header>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d125      	bne.n	8015ba0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	8afa      	ldrh	r2, [r7, #22]
 8015b5e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	2206      	movs	r2, #6
 8015b64:	6839      	ldr	r1, [r7, #0]
 8015b66:	4618      	mov	r0, r3
 8015b68:	f000 f971 	bl	8015e4e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015b6c:	693b      	ldr	r3, [r7, #16]
 8015b6e:	3306      	adds	r3, #6
 8015b70:	2206      	movs	r2, #6
 8015b72:	6879      	ldr	r1, [r7, #4]
 8015b74:	4618      	mov	r0, r3
 8015b76:	f000 f96a 	bl	8015e4e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b80:	2b06      	cmp	r3, #6
 8015b82:	d006      	beq.n	8015b92 <ethernet_output+0x66>
 8015b84:	4b0a      	ldr	r3, [pc, #40]	; (8015bb0 <ethernet_output+0x84>)
 8015b86:	f240 1233 	movw	r2, #307	; 0x133
 8015b8a:	490a      	ldr	r1, [pc, #40]	; (8015bb4 <ethernet_output+0x88>)
 8015b8c:	480a      	ldr	r0, [pc, #40]	; (8015bb8 <ethernet_output+0x8c>)
 8015b8e:	f000 f971 	bl	8015e74 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	699b      	ldr	r3, [r3, #24]
 8015b96:	68b9      	ldr	r1, [r7, #8]
 8015b98:	68f8      	ldr	r0, [r7, #12]
 8015b9a:	4798      	blx	r3
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	e002      	b.n	8015ba6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015ba0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015ba2:	f06f 0301 	mvn.w	r3, #1
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3718      	adds	r7, #24
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	080199ec 	.word	0x080199ec
 8015bb4:	08019a24 	.word	0x08019a24
 8015bb8:	08019a58 	.word	0x08019a58

08015bbc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b086      	sub	sp, #24
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
 8015bc4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	60bb      	str	r3, [r7, #8]
 8015bca:	2304      	movs	r3, #4
 8015bcc:	60fb      	str	r3, [r7, #12]
 8015bce:	2300      	movs	r3, #0
 8015bd0:	613b      	str	r3, [r7, #16]
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015bd6:	f107 0308 	add.w	r3, r7, #8
 8015bda:	2100      	movs	r1, #0
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7f1 fe3d 	bl	800785c <osMessageCreate>
 8015be2:	4602      	mov	r2, r0
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d102      	bne.n	8015bf6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bf4:	e000      	b.n	8015bf8 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015bf6:	2300      	movs	r3, #0
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3718      	adds	r7, #24
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	6839      	ldr	r1, [r7, #0]
 8015c10:	2200      	movs	r2, #0
 8015c12:	4618      	mov	r0, r3
 8015c14:	f7f1 fe4c 	bl	80078b0 <osMessagePut>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d102      	bne.n	8015c24 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	73fb      	strb	r3, [r7, #15]
 8015c22:	e001      	b.n	8015c28 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015c24:	23ff      	movs	r3, #255	; 0xff
 8015c26:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3710      	adds	r7, #16
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}

08015c34 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b08c      	sub	sp, #48	; 0x30
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	61f8      	str	r0, [r7, #28]
 8015c3c:	61b9      	str	r1, [r7, #24]
 8015c3e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015c40:	f7f1 fc47 	bl	80074d2 <osKernelSysTick>
 8015c44:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d017      	beq.n	8015c7c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	6819      	ldr	r1, [r3, #0]
 8015c50:	f107 0320 	add.w	r3, r7, #32
 8015c54:	697a      	ldr	r2, [r7, #20]
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7f1 fe6a 	bl	8007930 <osMessageGet>

    if(event.status == osEventMessage)
 8015c5c:	6a3b      	ldr	r3, [r7, #32]
 8015c5e:	2b10      	cmp	r3, #16
 8015c60:	d109      	bne.n	8015c76 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c64:	461a      	mov	r2, r3
 8015c66:	69bb      	ldr	r3, [r7, #24]
 8015c68:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015c6a:	f7f1 fc32 	bl	80074d2 <osKernelSysTick>
 8015c6e:	4602      	mov	r2, r0
 8015c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c72:	1ad3      	subs	r3, r2, r3
 8015c74:	e019      	b.n	8015caa <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c7a:	e016      	b.n	8015caa <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015c7c:	69fb      	ldr	r3, [r7, #28]
 8015c7e:	6819      	ldr	r1, [r3, #0]
 8015c80:	463b      	mov	r3, r7
 8015c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7f1 fe52 	bl	8007930 <osMessageGet>
 8015c8c:	f107 0320 	add.w	r3, r7, #32
 8015c90:	463a      	mov	r2, r7
 8015c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c9a:	461a      	mov	r2, r3
 8015c9c:	69bb      	ldr	r3, [r7, #24]
 8015c9e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015ca0:	f7f1 fc17 	bl	80074d2 <osKernelSysTick>
 8015ca4:	4602      	mov	r2, r0
 8015ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015caa:	4618      	mov	r0, r3
 8015cac:	3730      	adds	r7, #48	; 0x30
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}

08015cb2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015cb2:	b480      	push	{r7}
 8015cb4:	b083      	sub	sp, #12
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d101      	bne.n	8015cc6 <sys_mbox_valid+0x14>
    return 0;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	e000      	b.n	8015cc8 <sys_mbox_valid+0x16>
  else
    return 1;
 8015cc6:	2301      	movs	r3, #1
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	370c      	adds	r7, #12
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd2:	4770      	bx	lr

08015cd4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015cd8:	4803      	ldr	r0, [pc, #12]	; (8015ce8 <sys_init+0x14>)
 8015cda:	f7f1 fc6a 	bl	80075b2 <osMutexCreate>
 8015cde:	4602      	mov	r2, r0
 8015ce0:	4b02      	ldr	r3, [pc, #8]	; (8015cec <sys_init+0x18>)
 8015ce2:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015ce4:	bf00      	nop
 8015ce6:	bd80      	pop	{r7, pc}
 8015ce8:	0802a704 	.word	0x0802a704
 8015cec:	2000b520 	.word	0x2000b520

08015cf0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	60bb      	str	r3, [r7, #8]
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015d00:	f107 0308 	add.w	r3, r7, #8
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7f1 fc54 	bl	80075b2 <osMutexCreate>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d102      	bne.n	8015d1e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d1c:	e000      	b.n	8015d20 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015d1e:	2300      	movs	r3, #0
}
 8015d20:	4618      	mov	r0, r3
 8015d22:	3710      	adds	r7, #16
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}

08015d28 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7f1 fc53 	bl	80075e4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015d3e:	bf00      	nop
 8015d40:	3708      	adds	r7, #8
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}

08015d46 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015d46:	b580      	push	{r7, lr}
 8015d48:	b082      	sub	sp, #8
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7f1 fc94 	bl	8007680 <osMutexRelease>
}
 8015d58:	bf00      	nop
 8015d5a:	3708      	adds	r7, #8
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}

08015d60 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b08c      	sub	sp, #48	; 0x30
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	60f8      	str	r0, [r7, #12]
 8015d68:	60b9      	str	r1, [r7, #8]
 8015d6a:	607a      	str	r2, [r7, #4]
 8015d6c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015d6e:	f107 0314 	add.w	r3, r7, #20
 8015d72:	2200      	movs	r2, #0
 8015d74:	601a      	str	r2, [r3, #0]
 8015d76:	605a      	str	r2, [r3, #4]
 8015d78:	609a      	str	r2, [r3, #8]
 8015d7a:	60da      	str	r2, [r3, #12]
 8015d7c:	611a      	str	r2, [r3, #16]
 8015d7e:	615a      	str	r2, [r3, #20]
 8015d80:	619a      	str	r2, [r3, #24]
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	617b      	str	r3, [r7, #20]
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	61bb      	str	r3, [r7, #24]
 8015d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d8c:	b21b      	sxth	r3, r3
 8015d8e:	83bb      	strh	r3, [r7, #28]
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015d94:	f107 0314 	add.w	r3, r7, #20
 8015d98:	6879      	ldr	r1, [r7, #4]
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7f1 fba9 	bl	80074f2 <osThreadCreate>
 8015da0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3730      	adds	r7, #48	; 0x30
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}
	...

08015dac <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015db0:	4b04      	ldr	r3, [pc, #16]	; (8015dc4 <sys_arch_protect+0x18>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7f1 fc13 	bl	80075e4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015dbe:	2301      	movs	r3, #1
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	2000b520 	.word	0x2000b520

08015dc8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b082      	sub	sp, #8
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015dd0:	4b04      	ldr	r3, [pc, #16]	; (8015de4 <sys_arch_unprotect+0x1c>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7f1 fc53 	bl	8007680 <osMutexRelease>
}
 8015dda:	bf00      	nop
 8015ddc:	3708      	adds	r7, #8
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bd80      	pop	{r7, pc}
 8015de2:	bf00      	nop
 8015de4:	2000b520 	.word	0x2000b520

08015de8 <__libc_init_array>:
 8015de8:	b570      	push	{r4, r5, r6, lr}
 8015dea:	4e0d      	ldr	r6, [pc, #52]	; (8015e20 <__libc_init_array+0x38>)
 8015dec:	4c0d      	ldr	r4, [pc, #52]	; (8015e24 <__libc_init_array+0x3c>)
 8015dee:	1ba4      	subs	r4, r4, r6
 8015df0:	10a4      	asrs	r4, r4, #2
 8015df2:	2500      	movs	r5, #0
 8015df4:	42a5      	cmp	r5, r4
 8015df6:	d109      	bne.n	8015e0c <__libc_init_array+0x24>
 8015df8:	4e0b      	ldr	r6, [pc, #44]	; (8015e28 <__libc_init_array+0x40>)
 8015dfa:	4c0c      	ldr	r4, [pc, #48]	; (8015e2c <__libc_init_array+0x44>)
 8015dfc:	f000 ff7a 	bl	8016cf4 <_init>
 8015e00:	1ba4      	subs	r4, r4, r6
 8015e02:	10a4      	asrs	r4, r4, #2
 8015e04:	2500      	movs	r5, #0
 8015e06:	42a5      	cmp	r5, r4
 8015e08:	d105      	bne.n	8015e16 <__libc_init_array+0x2e>
 8015e0a:	bd70      	pop	{r4, r5, r6, pc}
 8015e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e10:	4798      	blx	r3
 8015e12:	3501      	adds	r5, #1
 8015e14:	e7ee      	b.n	8015df4 <__libc_init_array+0xc>
 8015e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e1a:	4798      	blx	r3
 8015e1c:	3501      	adds	r5, #1
 8015e1e:	e7f2      	b.n	8015e06 <__libc_init_array+0x1e>
 8015e20:	0802a7ac 	.word	0x0802a7ac
 8015e24:	0802a7ac 	.word	0x0802a7ac
 8015e28:	0802a7ac 	.word	0x0802a7ac
 8015e2c:	0802a7b0 	.word	0x0802a7b0

08015e30 <memcmp>:
 8015e30:	b530      	push	{r4, r5, lr}
 8015e32:	2400      	movs	r4, #0
 8015e34:	42a2      	cmp	r2, r4
 8015e36:	d101      	bne.n	8015e3c <memcmp+0xc>
 8015e38:	2000      	movs	r0, #0
 8015e3a:	e007      	b.n	8015e4c <memcmp+0x1c>
 8015e3c:	5d03      	ldrb	r3, [r0, r4]
 8015e3e:	3401      	adds	r4, #1
 8015e40:	190d      	adds	r5, r1, r4
 8015e42:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8015e46:	42ab      	cmp	r3, r5
 8015e48:	d0f4      	beq.n	8015e34 <memcmp+0x4>
 8015e4a:	1b58      	subs	r0, r3, r5
 8015e4c:	bd30      	pop	{r4, r5, pc}

08015e4e <memcpy>:
 8015e4e:	b510      	push	{r4, lr}
 8015e50:	1e43      	subs	r3, r0, #1
 8015e52:	440a      	add	r2, r1
 8015e54:	4291      	cmp	r1, r2
 8015e56:	d100      	bne.n	8015e5a <memcpy+0xc>
 8015e58:	bd10      	pop	{r4, pc}
 8015e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e62:	e7f7      	b.n	8015e54 <memcpy+0x6>

08015e64 <memset>:
 8015e64:	4402      	add	r2, r0
 8015e66:	4603      	mov	r3, r0
 8015e68:	4293      	cmp	r3, r2
 8015e6a:	d100      	bne.n	8015e6e <memset+0xa>
 8015e6c:	4770      	bx	lr
 8015e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8015e72:	e7f9      	b.n	8015e68 <memset+0x4>

08015e74 <iprintf>:
 8015e74:	b40f      	push	{r0, r1, r2, r3}
 8015e76:	4b0a      	ldr	r3, [pc, #40]	; (8015ea0 <iprintf+0x2c>)
 8015e78:	b513      	push	{r0, r1, r4, lr}
 8015e7a:	681c      	ldr	r4, [r3, #0]
 8015e7c:	b124      	cbz	r4, 8015e88 <iprintf+0x14>
 8015e7e:	69a3      	ldr	r3, [r4, #24]
 8015e80:	b913      	cbnz	r3, 8015e88 <iprintf+0x14>
 8015e82:	4620      	mov	r0, r4
 8015e84:	f000 f8a2 	bl	8015fcc <__sinit>
 8015e88:	ab05      	add	r3, sp, #20
 8015e8a:	9a04      	ldr	r2, [sp, #16]
 8015e8c:	68a1      	ldr	r1, [r4, #8]
 8015e8e:	9301      	str	r3, [sp, #4]
 8015e90:	4620      	mov	r0, r4
 8015e92:	f000 f9ff 	bl	8016294 <_vfiprintf_r>
 8015e96:	b002      	add	sp, #8
 8015e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e9c:	b004      	add	sp, #16
 8015e9e:	4770      	bx	lr
 8015ea0:	2000001c 	.word	0x2000001c

08015ea4 <rand>:
 8015ea4:	b538      	push	{r3, r4, r5, lr}
 8015ea6:	4b13      	ldr	r3, [pc, #76]	; (8015ef4 <rand+0x50>)
 8015ea8:	681c      	ldr	r4, [r3, #0]
 8015eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015eac:	b97b      	cbnz	r3, 8015ece <rand+0x2a>
 8015eae:	2018      	movs	r0, #24
 8015eb0:	f000 f916 	bl	80160e0 <malloc>
 8015eb4:	4a10      	ldr	r2, [pc, #64]	; (8015ef8 <rand+0x54>)
 8015eb6:	4b11      	ldr	r3, [pc, #68]	; (8015efc <rand+0x58>)
 8015eb8:	63a0      	str	r0, [r4, #56]	; 0x38
 8015eba:	e9c0 2300 	strd	r2, r3, [r0]
 8015ebe:	4b10      	ldr	r3, [pc, #64]	; (8015f00 <rand+0x5c>)
 8015ec0:	6083      	str	r3, [r0, #8]
 8015ec2:	230b      	movs	r3, #11
 8015ec4:	8183      	strh	r3, [r0, #12]
 8015ec6:	2201      	movs	r2, #1
 8015ec8:	2300      	movs	r3, #0
 8015eca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015ece:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015ed0:	480c      	ldr	r0, [pc, #48]	; (8015f04 <rand+0x60>)
 8015ed2:	690a      	ldr	r2, [r1, #16]
 8015ed4:	694b      	ldr	r3, [r1, #20]
 8015ed6:	4c0c      	ldr	r4, [pc, #48]	; (8015f08 <rand+0x64>)
 8015ed8:	4350      	muls	r0, r2
 8015eda:	fb04 0003 	mla	r0, r4, r3, r0
 8015ede:	fba2 2304 	umull	r2, r3, r2, r4
 8015ee2:	4403      	add	r3, r0
 8015ee4:	1c54      	adds	r4, r2, #1
 8015ee6:	f143 0500 	adc.w	r5, r3, #0
 8015eea:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8015eee:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8015ef2:	bd38      	pop	{r3, r4, r5, pc}
 8015ef4:	2000001c 	.word	0x2000001c
 8015ef8:	abcd330e 	.word	0xabcd330e
 8015efc:	e66d1234 	.word	0xe66d1234
 8015f00:	0005deec 	.word	0x0005deec
 8015f04:	5851f42d 	.word	0x5851f42d
 8015f08:	4c957f2d 	.word	0x4c957f2d

08015f0c <strchr>:
 8015f0c:	b2c9      	uxtb	r1, r1
 8015f0e:	4603      	mov	r3, r0
 8015f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f14:	b11a      	cbz	r2, 8015f1e <strchr+0x12>
 8015f16:	428a      	cmp	r2, r1
 8015f18:	d1f9      	bne.n	8015f0e <strchr+0x2>
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	4770      	bx	lr
 8015f1e:	2900      	cmp	r1, #0
 8015f20:	bf18      	it	ne
 8015f22:	2300      	movne	r3, #0
 8015f24:	e7f9      	b.n	8015f1a <strchr+0xe>

08015f26 <strncmp>:
 8015f26:	b510      	push	{r4, lr}
 8015f28:	b16a      	cbz	r2, 8015f46 <strncmp+0x20>
 8015f2a:	3901      	subs	r1, #1
 8015f2c:	1884      	adds	r4, r0, r2
 8015f2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015f32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015f36:	4293      	cmp	r3, r2
 8015f38:	d103      	bne.n	8015f42 <strncmp+0x1c>
 8015f3a:	42a0      	cmp	r0, r4
 8015f3c:	d001      	beq.n	8015f42 <strncmp+0x1c>
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d1f5      	bne.n	8015f2e <strncmp+0x8>
 8015f42:	1a98      	subs	r0, r3, r2
 8015f44:	bd10      	pop	{r4, pc}
 8015f46:	4610      	mov	r0, r2
 8015f48:	e7fc      	b.n	8015f44 <strncmp+0x1e>
	...

08015f4c <std>:
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	b510      	push	{r4, lr}
 8015f50:	4604      	mov	r4, r0
 8015f52:	e9c0 3300 	strd	r3, r3, [r0]
 8015f56:	6083      	str	r3, [r0, #8]
 8015f58:	8181      	strh	r1, [r0, #12]
 8015f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8015f5c:	81c2      	strh	r2, [r0, #14]
 8015f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f62:	6183      	str	r3, [r0, #24]
 8015f64:	4619      	mov	r1, r3
 8015f66:	2208      	movs	r2, #8
 8015f68:	305c      	adds	r0, #92	; 0x5c
 8015f6a:	f7ff ff7b 	bl	8015e64 <memset>
 8015f6e:	4b05      	ldr	r3, [pc, #20]	; (8015f84 <std+0x38>)
 8015f70:	6263      	str	r3, [r4, #36]	; 0x24
 8015f72:	4b05      	ldr	r3, [pc, #20]	; (8015f88 <std+0x3c>)
 8015f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f76:	4b05      	ldr	r3, [pc, #20]	; (8015f8c <std+0x40>)
 8015f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f7a:	4b05      	ldr	r3, [pc, #20]	; (8015f90 <std+0x44>)
 8015f7c:	6224      	str	r4, [r4, #32]
 8015f7e:	6323      	str	r3, [r4, #48]	; 0x30
 8015f80:	bd10      	pop	{r4, pc}
 8015f82:	bf00      	nop
 8015f84:	080167f1 	.word	0x080167f1
 8015f88:	08016813 	.word	0x08016813
 8015f8c:	0801684b 	.word	0x0801684b
 8015f90:	0801686f 	.word	0x0801686f

08015f94 <_cleanup_r>:
 8015f94:	4901      	ldr	r1, [pc, #4]	; (8015f9c <_cleanup_r+0x8>)
 8015f96:	f000 b885 	b.w	80160a4 <_fwalk_reent>
 8015f9a:	bf00      	nop
 8015f9c:	08016b49 	.word	0x08016b49

08015fa0 <__sfmoreglue>:
 8015fa0:	b570      	push	{r4, r5, r6, lr}
 8015fa2:	1e4a      	subs	r2, r1, #1
 8015fa4:	2568      	movs	r5, #104	; 0x68
 8015fa6:	4355      	muls	r5, r2
 8015fa8:	460e      	mov	r6, r1
 8015faa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015fae:	f000 f8ed 	bl	801618c <_malloc_r>
 8015fb2:	4604      	mov	r4, r0
 8015fb4:	b140      	cbz	r0, 8015fc8 <__sfmoreglue+0x28>
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	e9c0 1600 	strd	r1, r6, [r0]
 8015fbc:	300c      	adds	r0, #12
 8015fbe:	60a0      	str	r0, [r4, #8]
 8015fc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015fc4:	f7ff ff4e 	bl	8015e64 <memset>
 8015fc8:	4620      	mov	r0, r4
 8015fca:	bd70      	pop	{r4, r5, r6, pc}

08015fcc <__sinit>:
 8015fcc:	6983      	ldr	r3, [r0, #24]
 8015fce:	b510      	push	{r4, lr}
 8015fd0:	4604      	mov	r4, r0
 8015fd2:	bb33      	cbnz	r3, 8016022 <__sinit+0x56>
 8015fd4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015fd8:	6503      	str	r3, [r0, #80]	; 0x50
 8015fda:	4b12      	ldr	r3, [pc, #72]	; (8016024 <__sinit+0x58>)
 8015fdc:	4a12      	ldr	r2, [pc, #72]	; (8016028 <__sinit+0x5c>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	6282      	str	r2, [r0, #40]	; 0x28
 8015fe2:	4298      	cmp	r0, r3
 8015fe4:	bf04      	itt	eq
 8015fe6:	2301      	moveq	r3, #1
 8015fe8:	6183      	streq	r3, [r0, #24]
 8015fea:	f000 f81f 	bl	801602c <__sfp>
 8015fee:	6060      	str	r0, [r4, #4]
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	f000 f81b 	bl	801602c <__sfp>
 8015ff6:	60a0      	str	r0, [r4, #8]
 8015ff8:	4620      	mov	r0, r4
 8015ffa:	f000 f817 	bl	801602c <__sfp>
 8015ffe:	2200      	movs	r2, #0
 8016000:	60e0      	str	r0, [r4, #12]
 8016002:	2104      	movs	r1, #4
 8016004:	6860      	ldr	r0, [r4, #4]
 8016006:	f7ff ffa1 	bl	8015f4c <std>
 801600a:	2201      	movs	r2, #1
 801600c:	2109      	movs	r1, #9
 801600e:	68a0      	ldr	r0, [r4, #8]
 8016010:	f7ff ff9c 	bl	8015f4c <std>
 8016014:	2202      	movs	r2, #2
 8016016:	2112      	movs	r1, #18
 8016018:	68e0      	ldr	r0, [r4, #12]
 801601a:	f7ff ff97 	bl	8015f4c <std>
 801601e:	2301      	movs	r3, #1
 8016020:	61a3      	str	r3, [r4, #24]
 8016022:	bd10      	pop	{r4, pc}
 8016024:	0802a70c 	.word	0x0802a70c
 8016028:	08015f95 	.word	0x08015f95

0801602c <__sfp>:
 801602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801602e:	4b1b      	ldr	r3, [pc, #108]	; (801609c <__sfp+0x70>)
 8016030:	681e      	ldr	r6, [r3, #0]
 8016032:	69b3      	ldr	r3, [r6, #24]
 8016034:	4607      	mov	r7, r0
 8016036:	b913      	cbnz	r3, 801603e <__sfp+0x12>
 8016038:	4630      	mov	r0, r6
 801603a:	f7ff ffc7 	bl	8015fcc <__sinit>
 801603e:	3648      	adds	r6, #72	; 0x48
 8016040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016044:	3b01      	subs	r3, #1
 8016046:	d503      	bpl.n	8016050 <__sfp+0x24>
 8016048:	6833      	ldr	r3, [r6, #0]
 801604a:	b133      	cbz	r3, 801605a <__sfp+0x2e>
 801604c:	6836      	ldr	r6, [r6, #0]
 801604e:	e7f7      	b.n	8016040 <__sfp+0x14>
 8016050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016054:	b16d      	cbz	r5, 8016072 <__sfp+0x46>
 8016056:	3468      	adds	r4, #104	; 0x68
 8016058:	e7f4      	b.n	8016044 <__sfp+0x18>
 801605a:	2104      	movs	r1, #4
 801605c:	4638      	mov	r0, r7
 801605e:	f7ff ff9f 	bl	8015fa0 <__sfmoreglue>
 8016062:	6030      	str	r0, [r6, #0]
 8016064:	2800      	cmp	r0, #0
 8016066:	d1f1      	bne.n	801604c <__sfp+0x20>
 8016068:	230c      	movs	r3, #12
 801606a:	603b      	str	r3, [r7, #0]
 801606c:	4604      	mov	r4, r0
 801606e:	4620      	mov	r0, r4
 8016070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016072:	4b0b      	ldr	r3, [pc, #44]	; (80160a0 <__sfp+0x74>)
 8016074:	6665      	str	r5, [r4, #100]	; 0x64
 8016076:	e9c4 5500 	strd	r5, r5, [r4]
 801607a:	60a5      	str	r5, [r4, #8]
 801607c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016080:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016084:	2208      	movs	r2, #8
 8016086:	4629      	mov	r1, r5
 8016088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801608c:	f7ff feea 	bl	8015e64 <memset>
 8016090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016098:	e7e9      	b.n	801606e <__sfp+0x42>
 801609a:	bf00      	nop
 801609c:	0802a70c 	.word	0x0802a70c
 80160a0:	ffff0001 	.word	0xffff0001

080160a4 <_fwalk_reent>:
 80160a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160a8:	4680      	mov	r8, r0
 80160aa:	4689      	mov	r9, r1
 80160ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160b0:	2600      	movs	r6, #0
 80160b2:	b914      	cbnz	r4, 80160ba <_fwalk_reent+0x16>
 80160b4:	4630      	mov	r0, r6
 80160b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80160be:	3f01      	subs	r7, #1
 80160c0:	d501      	bpl.n	80160c6 <_fwalk_reent+0x22>
 80160c2:	6824      	ldr	r4, [r4, #0]
 80160c4:	e7f5      	b.n	80160b2 <_fwalk_reent+0xe>
 80160c6:	89ab      	ldrh	r3, [r5, #12]
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	d907      	bls.n	80160dc <_fwalk_reent+0x38>
 80160cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160d0:	3301      	adds	r3, #1
 80160d2:	d003      	beq.n	80160dc <_fwalk_reent+0x38>
 80160d4:	4629      	mov	r1, r5
 80160d6:	4640      	mov	r0, r8
 80160d8:	47c8      	blx	r9
 80160da:	4306      	orrs	r6, r0
 80160dc:	3568      	adds	r5, #104	; 0x68
 80160de:	e7ee      	b.n	80160be <_fwalk_reent+0x1a>

080160e0 <malloc>:
 80160e0:	4b02      	ldr	r3, [pc, #8]	; (80160ec <malloc+0xc>)
 80160e2:	4601      	mov	r1, r0
 80160e4:	6818      	ldr	r0, [r3, #0]
 80160e6:	f000 b851 	b.w	801618c <_malloc_r>
 80160ea:	bf00      	nop
 80160ec:	2000001c 	.word	0x2000001c

080160f0 <_free_r>:
 80160f0:	b538      	push	{r3, r4, r5, lr}
 80160f2:	4605      	mov	r5, r0
 80160f4:	2900      	cmp	r1, #0
 80160f6:	d045      	beq.n	8016184 <_free_r+0x94>
 80160f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160fc:	1f0c      	subs	r4, r1, #4
 80160fe:	2b00      	cmp	r3, #0
 8016100:	bfb8      	it	lt
 8016102:	18e4      	addlt	r4, r4, r3
 8016104:	f000 fdc0 	bl	8016c88 <__malloc_lock>
 8016108:	4a1f      	ldr	r2, [pc, #124]	; (8016188 <_free_r+0x98>)
 801610a:	6813      	ldr	r3, [r2, #0]
 801610c:	4610      	mov	r0, r2
 801610e:	b933      	cbnz	r3, 801611e <_free_r+0x2e>
 8016110:	6063      	str	r3, [r4, #4]
 8016112:	6014      	str	r4, [r2, #0]
 8016114:	4628      	mov	r0, r5
 8016116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801611a:	f000 bdb6 	b.w	8016c8a <__malloc_unlock>
 801611e:	42a3      	cmp	r3, r4
 8016120:	d90c      	bls.n	801613c <_free_r+0x4c>
 8016122:	6821      	ldr	r1, [r4, #0]
 8016124:	1862      	adds	r2, r4, r1
 8016126:	4293      	cmp	r3, r2
 8016128:	bf04      	itt	eq
 801612a:	681a      	ldreq	r2, [r3, #0]
 801612c:	685b      	ldreq	r3, [r3, #4]
 801612e:	6063      	str	r3, [r4, #4]
 8016130:	bf04      	itt	eq
 8016132:	1852      	addeq	r2, r2, r1
 8016134:	6022      	streq	r2, [r4, #0]
 8016136:	6004      	str	r4, [r0, #0]
 8016138:	e7ec      	b.n	8016114 <_free_r+0x24>
 801613a:	4613      	mov	r3, r2
 801613c:	685a      	ldr	r2, [r3, #4]
 801613e:	b10a      	cbz	r2, 8016144 <_free_r+0x54>
 8016140:	42a2      	cmp	r2, r4
 8016142:	d9fa      	bls.n	801613a <_free_r+0x4a>
 8016144:	6819      	ldr	r1, [r3, #0]
 8016146:	1858      	adds	r0, r3, r1
 8016148:	42a0      	cmp	r0, r4
 801614a:	d10b      	bne.n	8016164 <_free_r+0x74>
 801614c:	6820      	ldr	r0, [r4, #0]
 801614e:	4401      	add	r1, r0
 8016150:	1858      	adds	r0, r3, r1
 8016152:	4282      	cmp	r2, r0
 8016154:	6019      	str	r1, [r3, #0]
 8016156:	d1dd      	bne.n	8016114 <_free_r+0x24>
 8016158:	6810      	ldr	r0, [r2, #0]
 801615a:	6852      	ldr	r2, [r2, #4]
 801615c:	605a      	str	r2, [r3, #4]
 801615e:	4401      	add	r1, r0
 8016160:	6019      	str	r1, [r3, #0]
 8016162:	e7d7      	b.n	8016114 <_free_r+0x24>
 8016164:	d902      	bls.n	801616c <_free_r+0x7c>
 8016166:	230c      	movs	r3, #12
 8016168:	602b      	str	r3, [r5, #0]
 801616a:	e7d3      	b.n	8016114 <_free_r+0x24>
 801616c:	6820      	ldr	r0, [r4, #0]
 801616e:	1821      	adds	r1, r4, r0
 8016170:	428a      	cmp	r2, r1
 8016172:	bf04      	itt	eq
 8016174:	6811      	ldreq	r1, [r2, #0]
 8016176:	6852      	ldreq	r2, [r2, #4]
 8016178:	6062      	str	r2, [r4, #4]
 801617a:	bf04      	itt	eq
 801617c:	1809      	addeq	r1, r1, r0
 801617e:	6021      	streq	r1, [r4, #0]
 8016180:	605c      	str	r4, [r3, #4]
 8016182:	e7c7      	b.n	8016114 <_free_r+0x24>
 8016184:	bd38      	pop	{r3, r4, r5, pc}
 8016186:	bf00      	nop
 8016188:	20004620 	.word	0x20004620

0801618c <_malloc_r>:
 801618c:	b570      	push	{r4, r5, r6, lr}
 801618e:	1ccd      	adds	r5, r1, #3
 8016190:	f025 0503 	bic.w	r5, r5, #3
 8016194:	3508      	adds	r5, #8
 8016196:	2d0c      	cmp	r5, #12
 8016198:	bf38      	it	cc
 801619a:	250c      	movcc	r5, #12
 801619c:	2d00      	cmp	r5, #0
 801619e:	4606      	mov	r6, r0
 80161a0:	db01      	blt.n	80161a6 <_malloc_r+0x1a>
 80161a2:	42a9      	cmp	r1, r5
 80161a4:	d903      	bls.n	80161ae <_malloc_r+0x22>
 80161a6:	230c      	movs	r3, #12
 80161a8:	6033      	str	r3, [r6, #0]
 80161aa:	2000      	movs	r0, #0
 80161ac:	bd70      	pop	{r4, r5, r6, pc}
 80161ae:	f000 fd6b 	bl	8016c88 <__malloc_lock>
 80161b2:	4a21      	ldr	r2, [pc, #132]	; (8016238 <_malloc_r+0xac>)
 80161b4:	6814      	ldr	r4, [r2, #0]
 80161b6:	4621      	mov	r1, r4
 80161b8:	b991      	cbnz	r1, 80161e0 <_malloc_r+0x54>
 80161ba:	4c20      	ldr	r4, [pc, #128]	; (801623c <_malloc_r+0xb0>)
 80161bc:	6823      	ldr	r3, [r4, #0]
 80161be:	b91b      	cbnz	r3, 80161c8 <_malloc_r+0x3c>
 80161c0:	4630      	mov	r0, r6
 80161c2:	f000 fb05 	bl	80167d0 <_sbrk_r>
 80161c6:	6020      	str	r0, [r4, #0]
 80161c8:	4629      	mov	r1, r5
 80161ca:	4630      	mov	r0, r6
 80161cc:	f000 fb00 	bl	80167d0 <_sbrk_r>
 80161d0:	1c43      	adds	r3, r0, #1
 80161d2:	d124      	bne.n	801621e <_malloc_r+0x92>
 80161d4:	230c      	movs	r3, #12
 80161d6:	6033      	str	r3, [r6, #0]
 80161d8:	4630      	mov	r0, r6
 80161da:	f000 fd56 	bl	8016c8a <__malloc_unlock>
 80161de:	e7e4      	b.n	80161aa <_malloc_r+0x1e>
 80161e0:	680b      	ldr	r3, [r1, #0]
 80161e2:	1b5b      	subs	r3, r3, r5
 80161e4:	d418      	bmi.n	8016218 <_malloc_r+0x8c>
 80161e6:	2b0b      	cmp	r3, #11
 80161e8:	d90f      	bls.n	801620a <_malloc_r+0x7e>
 80161ea:	600b      	str	r3, [r1, #0]
 80161ec:	50cd      	str	r5, [r1, r3]
 80161ee:	18cc      	adds	r4, r1, r3
 80161f0:	4630      	mov	r0, r6
 80161f2:	f000 fd4a 	bl	8016c8a <__malloc_unlock>
 80161f6:	f104 000b 	add.w	r0, r4, #11
 80161fa:	1d23      	adds	r3, r4, #4
 80161fc:	f020 0007 	bic.w	r0, r0, #7
 8016200:	1ac3      	subs	r3, r0, r3
 8016202:	d0d3      	beq.n	80161ac <_malloc_r+0x20>
 8016204:	425a      	negs	r2, r3
 8016206:	50e2      	str	r2, [r4, r3]
 8016208:	e7d0      	b.n	80161ac <_malloc_r+0x20>
 801620a:	428c      	cmp	r4, r1
 801620c:	684b      	ldr	r3, [r1, #4]
 801620e:	bf16      	itet	ne
 8016210:	6063      	strne	r3, [r4, #4]
 8016212:	6013      	streq	r3, [r2, #0]
 8016214:	460c      	movne	r4, r1
 8016216:	e7eb      	b.n	80161f0 <_malloc_r+0x64>
 8016218:	460c      	mov	r4, r1
 801621a:	6849      	ldr	r1, [r1, #4]
 801621c:	e7cc      	b.n	80161b8 <_malloc_r+0x2c>
 801621e:	1cc4      	adds	r4, r0, #3
 8016220:	f024 0403 	bic.w	r4, r4, #3
 8016224:	42a0      	cmp	r0, r4
 8016226:	d005      	beq.n	8016234 <_malloc_r+0xa8>
 8016228:	1a21      	subs	r1, r4, r0
 801622a:	4630      	mov	r0, r6
 801622c:	f000 fad0 	bl	80167d0 <_sbrk_r>
 8016230:	3001      	adds	r0, #1
 8016232:	d0cf      	beq.n	80161d4 <_malloc_r+0x48>
 8016234:	6025      	str	r5, [r4, #0]
 8016236:	e7db      	b.n	80161f0 <_malloc_r+0x64>
 8016238:	20004620 	.word	0x20004620
 801623c:	20004624 	.word	0x20004624

08016240 <__sfputc_r>:
 8016240:	6893      	ldr	r3, [r2, #8]
 8016242:	3b01      	subs	r3, #1
 8016244:	2b00      	cmp	r3, #0
 8016246:	b410      	push	{r4}
 8016248:	6093      	str	r3, [r2, #8]
 801624a:	da08      	bge.n	801625e <__sfputc_r+0x1e>
 801624c:	6994      	ldr	r4, [r2, #24]
 801624e:	42a3      	cmp	r3, r4
 8016250:	db01      	blt.n	8016256 <__sfputc_r+0x16>
 8016252:	290a      	cmp	r1, #10
 8016254:	d103      	bne.n	801625e <__sfputc_r+0x1e>
 8016256:	f85d 4b04 	ldr.w	r4, [sp], #4
 801625a:	f000 bb0d 	b.w	8016878 <__swbuf_r>
 801625e:	6813      	ldr	r3, [r2, #0]
 8016260:	1c58      	adds	r0, r3, #1
 8016262:	6010      	str	r0, [r2, #0]
 8016264:	7019      	strb	r1, [r3, #0]
 8016266:	4608      	mov	r0, r1
 8016268:	f85d 4b04 	ldr.w	r4, [sp], #4
 801626c:	4770      	bx	lr

0801626e <__sfputs_r>:
 801626e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016270:	4606      	mov	r6, r0
 8016272:	460f      	mov	r7, r1
 8016274:	4614      	mov	r4, r2
 8016276:	18d5      	adds	r5, r2, r3
 8016278:	42ac      	cmp	r4, r5
 801627a:	d101      	bne.n	8016280 <__sfputs_r+0x12>
 801627c:	2000      	movs	r0, #0
 801627e:	e007      	b.n	8016290 <__sfputs_r+0x22>
 8016280:	463a      	mov	r2, r7
 8016282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016286:	4630      	mov	r0, r6
 8016288:	f7ff ffda 	bl	8016240 <__sfputc_r>
 801628c:	1c43      	adds	r3, r0, #1
 801628e:	d1f3      	bne.n	8016278 <__sfputs_r+0xa>
 8016290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016294 <_vfiprintf_r>:
 8016294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016298:	460c      	mov	r4, r1
 801629a:	b09d      	sub	sp, #116	; 0x74
 801629c:	4617      	mov	r7, r2
 801629e:	461d      	mov	r5, r3
 80162a0:	4606      	mov	r6, r0
 80162a2:	b118      	cbz	r0, 80162ac <_vfiprintf_r+0x18>
 80162a4:	6983      	ldr	r3, [r0, #24]
 80162a6:	b90b      	cbnz	r3, 80162ac <_vfiprintf_r+0x18>
 80162a8:	f7ff fe90 	bl	8015fcc <__sinit>
 80162ac:	4b7c      	ldr	r3, [pc, #496]	; (80164a0 <_vfiprintf_r+0x20c>)
 80162ae:	429c      	cmp	r4, r3
 80162b0:	d158      	bne.n	8016364 <_vfiprintf_r+0xd0>
 80162b2:	6874      	ldr	r4, [r6, #4]
 80162b4:	89a3      	ldrh	r3, [r4, #12]
 80162b6:	0718      	lsls	r0, r3, #28
 80162b8:	d55e      	bpl.n	8016378 <_vfiprintf_r+0xe4>
 80162ba:	6923      	ldr	r3, [r4, #16]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d05b      	beq.n	8016378 <_vfiprintf_r+0xe4>
 80162c0:	2300      	movs	r3, #0
 80162c2:	9309      	str	r3, [sp, #36]	; 0x24
 80162c4:	2320      	movs	r3, #32
 80162c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162ca:	2330      	movs	r3, #48	; 0x30
 80162cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80162d0:	9503      	str	r5, [sp, #12]
 80162d2:	f04f 0b01 	mov.w	fp, #1
 80162d6:	46b8      	mov	r8, r7
 80162d8:	4645      	mov	r5, r8
 80162da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80162de:	b10b      	cbz	r3, 80162e4 <_vfiprintf_r+0x50>
 80162e0:	2b25      	cmp	r3, #37	; 0x25
 80162e2:	d154      	bne.n	801638e <_vfiprintf_r+0xfa>
 80162e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80162e8:	d00b      	beq.n	8016302 <_vfiprintf_r+0x6e>
 80162ea:	4653      	mov	r3, sl
 80162ec:	463a      	mov	r2, r7
 80162ee:	4621      	mov	r1, r4
 80162f0:	4630      	mov	r0, r6
 80162f2:	f7ff ffbc 	bl	801626e <__sfputs_r>
 80162f6:	3001      	adds	r0, #1
 80162f8:	f000 80c2 	beq.w	8016480 <_vfiprintf_r+0x1ec>
 80162fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162fe:	4453      	add	r3, sl
 8016300:	9309      	str	r3, [sp, #36]	; 0x24
 8016302:	f898 3000 	ldrb.w	r3, [r8]
 8016306:	2b00      	cmp	r3, #0
 8016308:	f000 80ba 	beq.w	8016480 <_vfiprintf_r+0x1ec>
 801630c:	2300      	movs	r3, #0
 801630e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016316:	9304      	str	r3, [sp, #16]
 8016318:	9307      	str	r3, [sp, #28]
 801631a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801631e:	931a      	str	r3, [sp, #104]	; 0x68
 8016320:	46a8      	mov	r8, r5
 8016322:	2205      	movs	r2, #5
 8016324:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016328:	485e      	ldr	r0, [pc, #376]	; (80164a4 <_vfiprintf_r+0x210>)
 801632a:	f7e9 ffa1 	bl	8000270 <memchr>
 801632e:	9b04      	ldr	r3, [sp, #16]
 8016330:	bb78      	cbnz	r0, 8016392 <_vfiprintf_r+0xfe>
 8016332:	06d9      	lsls	r1, r3, #27
 8016334:	bf44      	itt	mi
 8016336:	2220      	movmi	r2, #32
 8016338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801633c:	071a      	lsls	r2, r3, #28
 801633e:	bf44      	itt	mi
 8016340:	222b      	movmi	r2, #43	; 0x2b
 8016342:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016346:	782a      	ldrb	r2, [r5, #0]
 8016348:	2a2a      	cmp	r2, #42	; 0x2a
 801634a:	d02a      	beq.n	80163a2 <_vfiprintf_r+0x10e>
 801634c:	9a07      	ldr	r2, [sp, #28]
 801634e:	46a8      	mov	r8, r5
 8016350:	2000      	movs	r0, #0
 8016352:	250a      	movs	r5, #10
 8016354:	4641      	mov	r1, r8
 8016356:	f811 3b01 	ldrb.w	r3, [r1], #1
 801635a:	3b30      	subs	r3, #48	; 0x30
 801635c:	2b09      	cmp	r3, #9
 801635e:	d969      	bls.n	8016434 <_vfiprintf_r+0x1a0>
 8016360:	b360      	cbz	r0, 80163bc <_vfiprintf_r+0x128>
 8016362:	e024      	b.n	80163ae <_vfiprintf_r+0x11a>
 8016364:	4b50      	ldr	r3, [pc, #320]	; (80164a8 <_vfiprintf_r+0x214>)
 8016366:	429c      	cmp	r4, r3
 8016368:	d101      	bne.n	801636e <_vfiprintf_r+0xda>
 801636a:	68b4      	ldr	r4, [r6, #8]
 801636c:	e7a2      	b.n	80162b4 <_vfiprintf_r+0x20>
 801636e:	4b4f      	ldr	r3, [pc, #316]	; (80164ac <_vfiprintf_r+0x218>)
 8016370:	429c      	cmp	r4, r3
 8016372:	bf08      	it	eq
 8016374:	68f4      	ldreq	r4, [r6, #12]
 8016376:	e79d      	b.n	80162b4 <_vfiprintf_r+0x20>
 8016378:	4621      	mov	r1, r4
 801637a:	4630      	mov	r0, r6
 801637c:	f000 fae0 	bl	8016940 <__swsetup_r>
 8016380:	2800      	cmp	r0, #0
 8016382:	d09d      	beq.n	80162c0 <_vfiprintf_r+0x2c>
 8016384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016388:	b01d      	add	sp, #116	; 0x74
 801638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801638e:	46a8      	mov	r8, r5
 8016390:	e7a2      	b.n	80162d8 <_vfiprintf_r+0x44>
 8016392:	4a44      	ldr	r2, [pc, #272]	; (80164a4 <_vfiprintf_r+0x210>)
 8016394:	1a80      	subs	r0, r0, r2
 8016396:	fa0b f000 	lsl.w	r0, fp, r0
 801639a:	4318      	orrs	r0, r3
 801639c:	9004      	str	r0, [sp, #16]
 801639e:	4645      	mov	r5, r8
 80163a0:	e7be      	b.n	8016320 <_vfiprintf_r+0x8c>
 80163a2:	9a03      	ldr	r2, [sp, #12]
 80163a4:	1d11      	adds	r1, r2, #4
 80163a6:	6812      	ldr	r2, [r2, #0]
 80163a8:	9103      	str	r1, [sp, #12]
 80163aa:	2a00      	cmp	r2, #0
 80163ac:	db01      	blt.n	80163b2 <_vfiprintf_r+0x11e>
 80163ae:	9207      	str	r2, [sp, #28]
 80163b0:	e004      	b.n	80163bc <_vfiprintf_r+0x128>
 80163b2:	4252      	negs	r2, r2
 80163b4:	f043 0302 	orr.w	r3, r3, #2
 80163b8:	9207      	str	r2, [sp, #28]
 80163ba:	9304      	str	r3, [sp, #16]
 80163bc:	f898 3000 	ldrb.w	r3, [r8]
 80163c0:	2b2e      	cmp	r3, #46	; 0x2e
 80163c2:	d10e      	bne.n	80163e2 <_vfiprintf_r+0x14e>
 80163c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80163c8:	2b2a      	cmp	r3, #42	; 0x2a
 80163ca:	d138      	bne.n	801643e <_vfiprintf_r+0x1aa>
 80163cc:	9b03      	ldr	r3, [sp, #12]
 80163ce:	1d1a      	adds	r2, r3, #4
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	9203      	str	r2, [sp, #12]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	bfb8      	it	lt
 80163d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80163dc:	f108 0802 	add.w	r8, r8, #2
 80163e0:	9305      	str	r3, [sp, #20]
 80163e2:	4d33      	ldr	r5, [pc, #204]	; (80164b0 <_vfiprintf_r+0x21c>)
 80163e4:	f898 1000 	ldrb.w	r1, [r8]
 80163e8:	2203      	movs	r2, #3
 80163ea:	4628      	mov	r0, r5
 80163ec:	f7e9 ff40 	bl	8000270 <memchr>
 80163f0:	b140      	cbz	r0, 8016404 <_vfiprintf_r+0x170>
 80163f2:	2340      	movs	r3, #64	; 0x40
 80163f4:	1b40      	subs	r0, r0, r5
 80163f6:	fa03 f000 	lsl.w	r0, r3, r0
 80163fa:	9b04      	ldr	r3, [sp, #16]
 80163fc:	4303      	orrs	r3, r0
 80163fe:	f108 0801 	add.w	r8, r8, #1
 8016402:	9304      	str	r3, [sp, #16]
 8016404:	f898 1000 	ldrb.w	r1, [r8]
 8016408:	482a      	ldr	r0, [pc, #168]	; (80164b4 <_vfiprintf_r+0x220>)
 801640a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801640e:	2206      	movs	r2, #6
 8016410:	f108 0701 	add.w	r7, r8, #1
 8016414:	f7e9 ff2c 	bl	8000270 <memchr>
 8016418:	2800      	cmp	r0, #0
 801641a:	d037      	beq.n	801648c <_vfiprintf_r+0x1f8>
 801641c:	4b26      	ldr	r3, [pc, #152]	; (80164b8 <_vfiprintf_r+0x224>)
 801641e:	bb1b      	cbnz	r3, 8016468 <_vfiprintf_r+0x1d4>
 8016420:	9b03      	ldr	r3, [sp, #12]
 8016422:	3307      	adds	r3, #7
 8016424:	f023 0307 	bic.w	r3, r3, #7
 8016428:	3308      	adds	r3, #8
 801642a:	9303      	str	r3, [sp, #12]
 801642c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801642e:	444b      	add	r3, r9
 8016430:	9309      	str	r3, [sp, #36]	; 0x24
 8016432:	e750      	b.n	80162d6 <_vfiprintf_r+0x42>
 8016434:	fb05 3202 	mla	r2, r5, r2, r3
 8016438:	2001      	movs	r0, #1
 801643a:	4688      	mov	r8, r1
 801643c:	e78a      	b.n	8016354 <_vfiprintf_r+0xc0>
 801643e:	2300      	movs	r3, #0
 8016440:	f108 0801 	add.w	r8, r8, #1
 8016444:	9305      	str	r3, [sp, #20]
 8016446:	4619      	mov	r1, r3
 8016448:	250a      	movs	r5, #10
 801644a:	4640      	mov	r0, r8
 801644c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016450:	3a30      	subs	r2, #48	; 0x30
 8016452:	2a09      	cmp	r2, #9
 8016454:	d903      	bls.n	801645e <_vfiprintf_r+0x1ca>
 8016456:	2b00      	cmp	r3, #0
 8016458:	d0c3      	beq.n	80163e2 <_vfiprintf_r+0x14e>
 801645a:	9105      	str	r1, [sp, #20]
 801645c:	e7c1      	b.n	80163e2 <_vfiprintf_r+0x14e>
 801645e:	fb05 2101 	mla	r1, r5, r1, r2
 8016462:	2301      	movs	r3, #1
 8016464:	4680      	mov	r8, r0
 8016466:	e7f0      	b.n	801644a <_vfiprintf_r+0x1b6>
 8016468:	ab03      	add	r3, sp, #12
 801646a:	9300      	str	r3, [sp, #0]
 801646c:	4622      	mov	r2, r4
 801646e:	4b13      	ldr	r3, [pc, #76]	; (80164bc <_vfiprintf_r+0x228>)
 8016470:	a904      	add	r1, sp, #16
 8016472:	4630      	mov	r0, r6
 8016474:	f3af 8000 	nop.w
 8016478:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801647c:	4681      	mov	r9, r0
 801647e:	d1d5      	bne.n	801642c <_vfiprintf_r+0x198>
 8016480:	89a3      	ldrh	r3, [r4, #12]
 8016482:	065b      	lsls	r3, r3, #25
 8016484:	f53f af7e 	bmi.w	8016384 <_vfiprintf_r+0xf0>
 8016488:	9809      	ldr	r0, [sp, #36]	; 0x24
 801648a:	e77d      	b.n	8016388 <_vfiprintf_r+0xf4>
 801648c:	ab03      	add	r3, sp, #12
 801648e:	9300      	str	r3, [sp, #0]
 8016490:	4622      	mov	r2, r4
 8016492:	4b0a      	ldr	r3, [pc, #40]	; (80164bc <_vfiprintf_r+0x228>)
 8016494:	a904      	add	r1, sp, #16
 8016496:	4630      	mov	r0, r6
 8016498:	f000 f888 	bl	80165ac <_printf_i>
 801649c:	e7ec      	b.n	8016478 <_vfiprintf_r+0x1e4>
 801649e:	bf00      	nop
 80164a0:	0802a730 	.word	0x0802a730
 80164a4:	0802a770 	.word	0x0802a770
 80164a8:	0802a750 	.word	0x0802a750
 80164ac:	0802a710 	.word	0x0802a710
 80164b0:	0802a776 	.word	0x0802a776
 80164b4:	0802a77a 	.word	0x0802a77a
 80164b8:	00000000 	.word	0x00000000
 80164bc:	0801626f 	.word	0x0801626f

080164c0 <_printf_common>:
 80164c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164c4:	4691      	mov	r9, r2
 80164c6:	461f      	mov	r7, r3
 80164c8:	688a      	ldr	r2, [r1, #8]
 80164ca:	690b      	ldr	r3, [r1, #16]
 80164cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80164d0:	4293      	cmp	r3, r2
 80164d2:	bfb8      	it	lt
 80164d4:	4613      	movlt	r3, r2
 80164d6:	f8c9 3000 	str.w	r3, [r9]
 80164da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80164de:	4606      	mov	r6, r0
 80164e0:	460c      	mov	r4, r1
 80164e2:	b112      	cbz	r2, 80164ea <_printf_common+0x2a>
 80164e4:	3301      	adds	r3, #1
 80164e6:	f8c9 3000 	str.w	r3, [r9]
 80164ea:	6823      	ldr	r3, [r4, #0]
 80164ec:	0699      	lsls	r1, r3, #26
 80164ee:	bf42      	ittt	mi
 80164f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80164f4:	3302      	addmi	r3, #2
 80164f6:	f8c9 3000 	strmi.w	r3, [r9]
 80164fa:	6825      	ldr	r5, [r4, #0]
 80164fc:	f015 0506 	ands.w	r5, r5, #6
 8016500:	d107      	bne.n	8016512 <_printf_common+0x52>
 8016502:	f104 0a19 	add.w	sl, r4, #25
 8016506:	68e3      	ldr	r3, [r4, #12]
 8016508:	f8d9 2000 	ldr.w	r2, [r9]
 801650c:	1a9b      	subs	r3, r3, r2
 801650e:	42ab      	cmp	r3, r5
 8016510:	dc28      	bgt.n	8016564 <_printf_common+0xa4>
 8016512:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016516:	6822      	ldr	r2, [r4, #0]
 8016518:	3300      	adds	r3, #0
 801651a:	bf18      	it	ne
 801651c:	2301      	movne	r3, #1
 801651e:	0692      	lsls	r2, r2, #26
 8016520:	d42d      	bmi.n	801657e <_printf_common+0xbe>
 8016522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016526:	4639      	mov	r1, r7
 8016528:	4630      	mov	r0, r6
 801652a:	47c0      	blx	r8
 801652c:	3001      	adds	r0, #1
 801652e:	d020      	beq.n	8016572 <_printf_common+0xb2>
 8016530:	6823      	ldr	r3, [r4, #0]
 8016532:	68e5      	ldr	r5, [r4, #12]
 8016534:	f8d9 2000 	ldr.w	r2, [r9]
 8016538:	f003 0306 	and.w	r3, r3, #6
 801653c:	2b04      	cmp	r3, #4
 801653e:	bf08      	it	eq
 8016540:	1aad      	subeq	r5, r5, r2
 8016542:	68a3      	ldr	r3, [r4, #8]
 8016544:	6922      	ldr	r2, [r4, #16]
 8016546:	bf0c      	ite	eq
 8016548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801654c:	2500      	movne	r5, #0
 801654e:	4293      	cmp	r3, r2
 8016550:	bfc4      	itt	gt
 8016552:	1a9b      	subgt	r3, r3, r2
 8016554:	18ed      	addgt	r5, r5, r3
 8016556:	f04f 0900 	mov.w	r9, #0
 801655a:	341a      	adds	r4, #26
 801655c:	454d      	cmp	r5, r9
 801655e:	d11a      	bne.n	8016596 <_printf_common+0xd6>
 8016560:	2000      	movs	r0, #0
 8016562:	e008      	b.n	8016576 <_printf_common+0xb6>
 8016564:	2301      	movs	r3, #1
 8016566:	4652      	mov	r2, sl
 8016568:	4639      	mov	r1, r7
 801656a:	4630      	mov	r0, r6
 801656c:	47c0      	blx	r8
 801656e:	3001      	adds	r0, #1
 8016570:	d103      	bne.n	801657a <_printf_common+0xba>
 8016572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801657a:	3501      	adds	r5, #1
 801657c:	e7c3      	b.n	8016506 <_printf_common+0x46>
 801657e:	18e1      	adds	r1, r4, r3
 8016580:	1c5a      	adds	r2, r3, #1
 8016582:	2030      	movs	r0, #48	; 0x30
 8016584:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016588:	4422      	add	r2, r4
 801658a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801658e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016592:	3302      	adds	r3, #2
 8016594:	e7c5      	b.n	8016522 <_printf_common+0x62>
 8016596:	2301      	movs	r3, #1
 8016598:	4622      	mov	r2, r4
 801659a:	4639      	mov	r1, r7
 801659c:	4630      	mov	r0, r6
 801659e:	47c0      	blx	r8
 80165a0:	3001      	adds	r0, #1
 80165a2:	d0e6      	beq.n	8016572 <_printf_common+0xb2>
 80165a4:	f109 0901 	add.w	r9, r9, #1
 80165a8:	e7d8      	b.n	801655c <_printf_common+0x9c>
	...

080165ac <_printf_i>:
 80165ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80165b4:	460c      	mov	r4, r1
 80165b6:	7e09      	ldrb	r1, [r1, #24]
 80165b8:	b085      	sub	sp, #20
 80165ba:	296e      	cmp	r1, #110	; 0x6e
 80165bc:	4617      	mov	r7, r2
 80165be:	4606      	mov	r6, r0
 80165c0:	4698      	mov	r8, r3
 80165c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80165c4:	f000 80b3 	beq.w	801672e <_printf_i+0x182>
 80165c8:	d822      	bhi.n	8016610 <_printf_i+0x64>
 80165ca:	2963      	cmp	r1, #99	; 0x63
 80165cc:	d036      	beq.n	801663c <_printf_i+0x90>
 80165ce:	d80a      	bhi.n	80165e6 <_printf_i+0x3a>
 80165d0:	2900      	cmp	r1, #0
 80165d2:	f000 80b9 	beq.w	8016748 <_printf_i+0x19c>
 80165d6:	2958      	cmp	r1, #88	; 0x58
 80165d8:	f000 8083 	beq.w	80166e2 <_printf_i+0x136>
 80165dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80165e4:	e032      	b.n	801664c <_printf_i+0xa0>
 80165e6:	2964      	cmp	r1, #100	; 0x64
 80165e8:	d001      	beq.n	80165ee <_printf_i+0x42>
 80165ea:	2969      	cmp	r1, #105	; 0x69
 80165ec:	d1f6      	bne.n	80165dc <_printf_i+0x30>
 80165ee:	6820      	ldr	r0, [r4, #0]
 80165f0:	6813      	ldr	r3, [r2, #0]
 80165f2:	0605      	lsls	r5, r0, #24
 80165f4:	f103 0104 	add.w	r1, r3, #4
 80165f8:	d52a      	bpl.n	8016650 <_printf_i+0xa4>
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	6011      	str	r1, [r2, #0]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	da03      	bge.n	801660a <_printf_i+0x5e>
 8016602:	222d      	movs	r2, #45	; 0x2d
 8016604:	425b      	negs	r3, r3
 8016606:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801660a:	486f      	ldr	r0, [pc, #444]	; (80167c8 <_printf_i+0x21c>)
 801660c:	220a      	movs	r2, #10
 801660e:	e039      	b.n	8016684 <_printf_i+0xd8>
 8016610:	2973      	cmp	r1, #115	; 0x73
 8016612:	f000 809d 	beq.w	8016750 <_printf_i+0x1a4>
 8016616:	d808      	bhi.n	801662a <_printf_i+0x7e>
 8016618:	296f      	cmp	r1, #111	; 0x6f
 801661a:	d020      	beq.n	801665e <_printf_i+0xb2>
 801661c:	2970      	cmp	r1, #112	; 0x70
 801661e:	d1dd      	bne.n	80165dc <_printf_i+0x30>
 8016620:	6823      	ldr	r3, [r4, #0]
 8016622:	f043 0320 	orr.w	r3, r3, #32
 8016626:	6023      	str	r3, [r4, #0]
 8016628:	e003      	b.n	8016632 <_printf_i+0x86>
 801662a:	2975      	cmp	r1, #117	; 0x75
 801662c:	d017      	beq.n	801665e <_printf_i+0xb2>
 801662e:	2978      	cmp	r1, #120	; 0x78
 8016630:	d1d4      	bne.n	80165dc <_printf_i+0x30>
 8016632:	2378      	movs	r3, #120	; 0x78
 8016634:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016638:	4864      	ldr	r0, [pc, #400]	; (80167cc <_printf_i+0x220>)
 801663a:	e055      	b.n	80166e8 <_printf_i+0x13c>
 801663c:	6813      	ldr	r3, [r2, #0]
 801663e:	1d19      	adds	r1, r3, #4
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	6011      	str	r1, [r2, #0]
 8016644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801664c:	2301      	movs	r3, #1
 801664e:	e08c      	b.n	801676a <_printf_i+0x1be>
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	6011      	str	r1, [r2, #0]
 8016654:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016658:	bf18      	it	ne
 801665a:	b21b      	sxthne	r3, r3
 801665c:	e7cf      	b.n	80165fe <_printf_i+0x52>
 801665e:	6813      	ldr	r3, [r2, #0]
 8016660:	6825      	ldr	r5, [r4, #0]
 8016662:	1d18      	adds	r0, r3, #4
 8016664:	6010      	str	r0, [r2, #0]
 8016666:	0628      	lsls	r0, r5, #24
 8016668:	d501      	bpl.n	801666e <_printf_i+0xc2>
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	e002      	b.n	8016674 <_printf_i+0xc8>
 801666e:	0668      	lsls	r0, r5, #25
 8016670:	d5fb      	bpl.n	801666a <_printf_i+0xbe>
 8016672:	881b      	ldrh	r3, [r3, #0]
 8016674:	4854      	ldr	r0, [pc, #336]	; (80167c8 <_printf_i+0x21c>)
 8016676:	296f      	cmp	r1, #111	; 0x6f
 8016678:	bf14      	ite	ne
 801667a:	220a      	movne	r2, #10
 801667c:	2208      	moveq	r2, #8
 801667e:	2100      	movs	r1, #0
 8016680:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016684:	6865      	ldr	r5, [r4, #4]
 8016686:	60a5      	str	r5, [r4, #8]
 8016688:	2d00      	cmp	r5, #0
 801668a:	f2c0 8095 	blt.w	80167b8 <_printf_i+0x20c>
 801668e:	6821      	ldr	r1, [r4, #0]
 8016690:	f021 0104 	bic.w	r1, r1, #4
 8016694:	6021      	str	r1, [r4, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d13d      	bne.n	8016716 <_printf_i+0x16a>
 801669a:	2d00      	cmp	r5, #0
 801669c:	f040 808e 	bne.w	80167bc <_printf_i+0x210>
 80166a0:	4665      	mov	r5, ip
 80166a2:	2a08      	cmp	r2, #8
 80166a4:	d10b      	bne.n	80166be <_printf_i+0x112>
 80166a6:	6823      	ldr	r3, [r4, #0]
 80166a8:	07db      	lsls	r3, r3, #31
 80166aa:	d508      	bpl.n	80166be <_printf_i+0x112>
 80166ac:	6923      	ldr	r3, [r4, #16]
 80166ae:	6862      	ldr	r2, [r4, #4]
 80166b0:	429a      	cmp	r2, r3
 80166b2:	bfde      	ittt	le
 80166b4:	2330      	movle	r3, #48	; 0x30
 80166b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80166ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80166be:	ebac 0305 	sub.w	r3, ip, r5
 80166c2:	6123      	str	r3, [r4, #16]
 80166c4:	f8cd 8000 	str.w	r8, [sp]
 80166c8:	463b      	mov	r3, r7
 80166ca:	aa03      	add	r2, sp, #12
 80166cc:	4621      	mov	r1, r4
 80166ce:	4630      	mov	r0, r6
 80166d0:	f7ff fef6 	bl	80164c0 <_printf_common>
 80166d4:	3001      	adds	r0, #1
 80166d6:	d14d      	bne.n	8016774 <_printf_i+0x1c8>
 80166d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166dc:	b005      	add	sp, #20
 80166de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166e2:	4839      	ldr	r0, [pc, #228]	; (80167c8 <_printf_i+0x21c>)
 80166e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80166e8:	6813      	ldr	r3, [r2, #0]
 80166ea:	6821      	ldr	r1, [r4, #0]
 80166ec:	1d1d      	adds	r5, r3, #4
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	6015      	str	r5, [r2, #0]
 80166f2:	060a      	lsls	r2, r1, #24
 80166f4:	d50b      	bpl.n	801670e <_printf_i+0x162>
 80166f6:	07ca      	lsls	r2, r1, #31
 80166f8:	bf44      	itt	mi
 80166fa:	f041 0120 	orrmi.w	r1, r1, #32
 80166fe:	6021      	strmi	r1, [r4, #0]
 8016700:	b91b      	cbnz	r3, 801670a <_printf_i+0x15e>
 8016702:	6822      	ldr	r2, [r4, #0]
 8016704:	f022 0220 	bic.w	r2, r2, #32
 8016708:	6022      	str	r2, [r4, #0]
 801670a:	2210      	movs	r2, #16
 801670c:	e7b7      	b.n	801667e <_printf_i+0xd2>
 801670e:	064d      	lsls	r5, r1, #25
 8016710:	bf48      	it	mi
 8016712:	b29b      	uxthmi	r3, r3
 8016714:	e7ef      	b.n	80166f6 <_printf_i+0x14a>
 8016716:	4665      	mov	r5, ip
 8016718:	fbb3 f1f2 	udiv	r1, r3, r2
 801671c:	fb02 3311 	mls	r3, r2, r1, r3
 8016720:	5cc3      	ldrb	r3, [r0, r3]
 8016722:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016726:	460b      	mov	r3, r1
 8016728:	2900      	cmp	r1, #0
 801672a:	d1f5      	bne.n	8016718 <_printf_i+0x16c>
 801672c:	e7b9      	b.n	80166a2 <_printf_i+0xf6>
 801672e:	6813      	ldr	r3, [r2, #0]
 8016730:	6825      	ldr	r5, [r4, #0]
 8016732:	6961      	ldr	r1, [r4, #20]
 8016734:	1d18      	adds	r0, r3, #4
 8016736:	6010      	str	r0, [r2, #0]
 8016738:	0628      	lsls	r0, r5, #24
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	d501      	bpl.n	8016742 <_printf_i+0x196>
 801673e:	6019      	str	r1, [r3, #0]
 8016740:	e002      	b.n	8016748 <_printf_i+0x19c>
 8016742:	066a      	lsls	r2, r5, #25
 8016744:	d5fb      	bpl.n	801673e <_printf_i+0x192>
 8016746:	8019      	strh	r1, [r3, #0]
 8016748:	2300      	movs	r3, #0
 801674a:	6123      	str	r3, [r4, #16]
 801674c:	4665      	mov	r5, ip
 801674e:	e7b9      	b.n	80166c4 <_printf_i+0x118>
 8016750:	6813      	ldr	r3, [r2, #0]
 8016752:	1d19      	adds	r1, r3, #4
 8016754:	6011      	str	r1, [r2, #0]
 8016756:	681d      	ldr	r5, [r3, #0]
 8016758:	6862      	ldr	r2, [r4, #4]
 801675a:	2100      	movs	r1, #0
 801675c:	4628      	mov	r0, r5
 801675e:	f7e9 fd87 	bl	8000270 <memchr>
 8016762:	b108      	cbz	r0, 8016768 <_printf_i+0x1bc>
 8016764:	1b40      	subs	r0, r0, r5
 8016766:	6060      	str	r0, [r4, #4]
 8016768:	6863      	ldr	r3, [r4, #4]
 801676a:	6123      	str	r3, [r4, #16]
 801676c:	2300      	movs	r3, #0
 801676e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016772:	e7a7      	b.n	80166c4 <_printf_i+0x118>
 8016774:	6923      	ldr	r3, [r4, #16]
 8016776:	462a      	mov	r2, r5
 8016778:	4639      	mov	r1, r7
 801677a:	4630      	mov	r0, r6
 801677c:	47c0      	blx	r8
 801677e:	3001      	adds	r0, #1
 8016780:	d0aa      	beq.n	80166d8 <_printf_i+0x12c>
 8016782:	6823      	ldr	r3, [r4, #0]
 8016784:	079b      	lsls	r3, r3, #30
 8016786:	d413      	bmi.n	80167b0 <_printf_i+0x204>
 8016788:	68e0      	ldr	r0, [r4, #12]
 801678a:	9b03      	ldr	r3, [sp, #12]
 801678c:	4298      	cmp	r0, r3
 801678e:	bfb8      	it	lt
 8016790:	4618      	movlt	r0, r3
 8016792:	e7a3      	b.n	80166dc <_printf_i+0x130>
 8016794:	2301      	movs	r3, #1
 8016796:	464a      	mov	r2, r9
 8016798:	4639      	mov	r1, r7
 801679a:	4630      	mov	r0, r6
 801679c:	47c0      	blx	r8
 801679e:	3001      	adds	r0, #1
 80167a0:	d09a      	beq.n	80166d8 <_printf_i+0x12c>
 80167a2:	3501      	adds	r5, #1
 80167a4:	68e3      	ldr	r3, [r4, #12]
 80167a6:	9a03      	ldr	r2, [sp, #12]
 80167a8:	1a9b      	subs	r3, r3, r2
 80167aa:	42ab      	cmp	r3, r5
 80167ac:	dcf2      	bgt.n	8016794 <_printf_i+0x1e8>
 80167ae:	e7eb      	b.n	8016788 <_printf_i+0x1dc>
 80167b0:	2500      	movs	r5, #0
 80167b2:	f104 0919 	add.w	r9, r4, #25
 80167b6:	e7f5      	b.n	80167a4 <_printf_i+0x1f8>
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d1ac      	bne.n	8016716 <_printf_i+0x16a>
 80167bc:	7803      	ldrb	r3, [r0, #0]
 80167be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80167c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167c6:	e76c      	b.n	80166a2 <_printf_i+0xf6>
 80167c8:	0802a781 	.word	0x0802a781
 80167cc:	0802a792 	.word	0x0802a792

080167d0 <_sbrk_r>:
 80167d0:	b538      	push	{r3, r4, r5, lr}
 80167d2:	4c06      	ldr	r4, [pc, #24]	; (80167ec <_sbrk_r+0x1c>)
 80167d4:	2300      	movs	r3, #0
 80167d6:	4605      	mov	r5, r0
 80167d8:	4608      	mov	r0, r1
 80167da:	6023      	str	r3, [r4, #0]
 80167dc:	f7ea fc7c 	bl	80010d8 <_sbrk>
 80167e0:	1c43      	adds	r3, r0, #1
 80167e2:	d102      	bne.n	80167ea <_sbrk_r+0x1a>
 80167e4:	6823      	ldr	r3, [r4, #0]
 80167e6:	b103      	cbz	r3, 80167ea <_sbrk_r+0x1a>
 80167e8:	602b      	str	r3, [r5, #0]
 80167ea:	bd38      	pop	{r3, r4, r5, pc}
 80167ec:	2000b51c 	.word	0x2000b51c

080167f0 <__sread>:
 80167f0:	b510      	push	{r4, lr}
 80167f2:	460c      	mov	r4, r1
 80167f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167f8:	f000 fa48 	bl	8016c8c <_read_r>
 80167fc:	2800      	cmp	r0, #0
 80167fe:	bfab      	itete	ge
 8016800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016802:	89a3      	ldrhlt	r3, [r4, #12]
 8016804:	181b      	addge	r3, r3, r0
 8016806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801680a:	bfac      	ite	ge
 801680c:	6563      	strge	r3, [r4, #84]	; 0x54
 801680e:	81a3      	strhlt	r3, [r4, #12]
 8016810:	bd10      	pop	{r4, pc}

08016812 <__swrite>:
 8016812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016816:	461f      	mov	r7, r3
 8016818:	898b      	ldrh	r3, [r1, #12]
 801681a:	05db      	lsls	r3, r3, #23
 801681c:	4605      	mov	r5, r0
 801681e:	460c      	mov	r4, r1
 8016820:	4616      	mov	r6, r2
 8016822:	d505      	bpl.n	8016830 <__swrite+0x1e>
 8016824:	2302      	movs	r3, #2
 8016826:	2200      	movs	r2, #0
 8016828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801682c:	f000 f9b6 	bl	8016b9c <_lseek_r>
 8016830:	89a3      	ldrh	r3, [r4, #12]
 8016832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801683a:	81a3      	strh	r3, [r4, #12]
 801683c:	4632      	mov	r2, r6
 801683e:	463b      	mov	r3, r7
 8016840:	4628      	mov	r0, r5
 8016842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016846:	f000 b869 	b.w	801691c <_write_r>

0801684a <__sseek>:
 801684a:	b510      	push	{r4, lr}
 801684c:	460c      	mov	r4, r1
 801684e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016852:	f000 f9a3 	bl	8016b9c <_lseek_r>
 8016856:	1c43      	adds	r3, r0, #1
 8016858:	89a3      	ldrh	r3, [r4, #12]
 801685a:	bf15      	itete	ne
 801685c:	6560      	strne	r0, [r4, #84]	; 0x54
 801685e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016866:	81a3      	strheq	r3, [r4, #12]
 8016868:	bf18      	it	ne
 801686a:	81a3      	strhne	r3, [r4, #12]
 801686c:	bd10      	pop	{r4, pc}

0801686e <__sclose>:
 801686e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016872:	f000 b8d3 	b.w	8016a1c <_close_r>
	...

08016878 <__swbuf_r>:
 8016878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801687a:	460e      	mov	r6, r1
 801687c:	4614      	mov	r4, r2
 801687e:	4605      	mov	r5, r0
 8016880:	b118      	cbz	r0, 801688a <__swbuf_r+0x12>
 8016882:	6983      	ldr	r3, [r0, #24]
 8016884:	b90b      	cbnz	r3, 801688a <__swbuf_r+0x12>
 8016886:	f7ff fba1 	bl	8015fcc <__sinit>
 801688a:	4b21      	ldr	r3, [pc, #132]	; (8016910 <__swbuf_r+0x98>)
 801688c:	429c      	cmp	r4, r3
 801688e:	d12a      	bne.n	80168e6 <__swbuf_r+0x6e>
 8016890:	686c      	ldr	r4, [r5, #4]
 8016892:	69a3      	ldr	r3, [r4, #24]
 8016894:	60a3      	str	r3, [r4, #8]
 8016896:	89a3      	ldrh	r3, [r4, #12]
 8016898:	071a      	lsls	r2, r3, #28
 801689a:	d52e      	bpl.n	80168fa <__swbuf_r+0x82>
 801689c:	6923      	ldr	r3, [r4, #16]
 801689e:	b363      	cbz	r3, 80168fa <__swbuf_r+0x82>
 80168a0:	6923      	ldr	r3, [r4, #16]
 80168a2:	6820      	ldr	r0, [r4, #0]
 80168a4:	1ac0      	subs	r0, r0, r3
 80168a6:	6963      	ldr	r3, [r4, #20]
 80168a8:	b2f6      	uxtb	r6, r6
 80168aa:	4283      	cmp	r3, r0
 80168ac:	4637      	mov	r7, r6
 80168ae:	dc04      	bgt.n	80168ba <__swbuf_r+0x42>
 80168b0:	4621      	mov	r1, r4
 80168b2:	4628      	mov	r0, r5
 80168b4:	f000 f948 	bl	8016b48 <_fflush_r>
 80168b8:	bb28      	cbnz	r0, 8016906 <__swbuf_r+0x8e>
 80168ba:	68a3      	ldr	r3, [r4, #8]
 80168bc:	3b01      	subs	r3, #1
 80168be:	60a3      	str	r3, [r4, #8]
 80168c0:	6823      	ldr	r3, [r4, #0]
 80168c2:	1c5a      	adds	r2, r3, #1
 80168c4:	6022      	str	r2, [r4, #0]
 80168c6:	701e      	strb	r6, [r3, #0]
 80168c8:	6963      	ldr	r3, [r4, #20]
 80168ca:	3001      	adds	r0, #1
 80168cc:	4283      	cmp	r3, r0
 80168ce:	d004      	beq.n	80168da <__swbuf_r+0x62>
 80168d0:	89a3      	ldrh	r3, [r4, #12]
 80168d2:	07db      	lsls	r3, r3, #31
 80168d4:	d519      	bpl.n	801690a <__swbuf_r+0x92>
 80168d6:	2e0a      	cmp	r6, #10
 80168d8:	d117      	bne.n	801690a <__swbuf_r+0x92>
 80168da:	4621      	mov	r1, r4
 80168dc:	4628      	mov	r0, r5
 80168de:	f000 f933 	bl	8016b48 <_fflush_r>
 80168e2:	b190      	cbz	r0, 801690a <__swbuf_r+0x92>
 80168e4:	e00f      	b.n	8016906 <__swbuf_r+0x8e>
 80168e6:	4b0b      	ldr	r3, [pc, #44]	; (8016914 <__swbuf_r+0x9c>)
 80168e8:	429c      	cmp	r4, r3
 80168ea:	d101      	bne.n	80168f0 <__swbuf_r+0x78>
 80168ec:	68ac      	ldr	r4, [r5, #8]
 80168ee:	e7d0      	b.n	8016892 <__swbuf_r+0x1a>
 80168f0:	4b09      	ldr	r3, [pc, #36]	; (8016918 <__swbuf_r+0xa0>)
 80168f2:	429c      	cmp	r4, r3
 80168f4:	bf08      	it	eq
 80168f6:	68ec      	ldreq	r4, [r5, #12]
 80168f8:	e7cb      	b.n	8016892 <__swbuf_r+0x1a>
 80168fa:	4621      	mov	r1, r4
 80168fc:	4628      	mov	r0, r5
 80168fe:	f000 f81f 	bl	8016940 <__swsetup_r>
 8016902:	2800      	cmp	r0, #0
 8016904:	d0cc      	beq.n	80168a0 <__swbuf_r+0x28>
 8016906:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801690a:	4638      	mov	r0, r7
 801690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801690e:	bf00      	nop
 8016910:	0802a730 	.word	0x0802a730
 8016914:	0802a750 	.word	0x0802a750
 8016918:	0802a710 	.word	0x0802a710

0801691c <_write_r>:
 801691c:	b538      	push	{r3, r4, r5, lr}
 801691e:	4c07      	ldr	r4, [pc, #28]	; (801693c <_write_r+0x20>)
 8016920:	4605      	mov	r5, r0
 8016922:	4608      	mov	r0, r1
 8016924:	4611      	mov	r1, r2
 8016926:	2200      	movs	r2, #0
 8016928:	6022      	str	r2, [r4, #0]
 801692a:	461a      	mov	r2, r3
 801692c:	f7ea fb83 	bl	8001036 <_write>
 8016930:	1c43      	adds	r3, r0, #1
 8016932:	d102      	bne.n	801693a <_write_r+0x1e>
 8016934:	6823      	ldr	r3, [r4, #0]
 8016936:	b103      	cbz	r3, 801693a <_write_r+0x1e>
 8016938:	602b      	str	r3, [r5, #0]
 801693a:	bd38      	pop	{r3, r4, r5, pc}
 801693c:	2000b51c 	.word	0x2000b51c

08016940 <__swsetup_r>:
 8016940:	4b32      	ldr	r3, [pc, #200]	; (8016a0c <__swsetup_r+0xcc>)
 8016942:	b570      	push	{r4, r5, r6, lr}
 8016944:	681d      	ldr	r5, [r3, #0]
 8016946:	4606      	mov	r6, r0
 8016948:	460c      	mov	r4, r1
 801694a:	b125      	cbz	r5, 8016956 <__swsetup_r+0x16>
 801694c:	69ab      	ldr	r3, [r5, #24]
 801694e:	b913      	cbnz	r3, 8016956 <__swsetup_r+0x16>
 8016950:	4628      	mov	r0, r5
 8016952:	f7ff fb3b 	bl	8015fcc <__sinit>
 8016956:	4b2e      	ldr	r3, [pc, #184]	; (8016a10 <__swsetup_r+0xd0>)
 8016958:	429c      	cmp	r4, r3
 801695a:	d10f      	bne.n	801697c <__swsetup_r+0x3c>
 801695c:	686c      	ldr	r4, [r5, #4]
 801695e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016962:	b29a      	uxth	r2, r3
 8016964:	0715      	lsls	r5, r2, #28
 8016966:	d42c      	bmi.n	80169c2 <__swsetup_r+0x82>
 8016968:	06d0      	lsls	r0, r2, #27
 801696a:	d411      	bmi.n	8016990 <__swsetup_r+0x50>
 801696c:	2209      	movs	r2, #9
 801696e:	6032      	str	r2, [r6, #0]
 8016970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016974:	81a3      	strh	r3, [r4, #12]
 8016976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801697a:	e03e      	b.n	80169fa <__swsetup_r+0xba>
 801697c:	4b25      	ldr	r3, [pc, #148]	; (8016a14 <__swsetup_r+0xd4>)
 801697e:	429c      	cmp	r4, r3
 8016980:	d101      	bne.n	8016986 <__swsetup_r+0x46>
 8016982:	68ac      	ldr	r4, [r5, #8]
 8016984:	e7eb      	b.n	801695e <__swsetup_r+0x1e>
 8016986:	4b24      	ldr	r3, [pc, #144]	; (8016a18 <__swsetup_r+0xd8>)
 8016988:	429c      	cmp	r4, r3
 801698a:	bf08      	it	eq
 801698c:	68ec      	ldreq	r4, [r5, #12]
 801698e:	e7e6      	b.n	801695e <__swsetup_r+0x1e>
 8016990:	0751      	lsls	r1, r2, #29
 8016992:	d512      	bpl.n	80169ba <__swsetup_r+0x7a>
 8016994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016996:	b141      	cbz	r1, 80169aa <__swsetup_r+0x6a>
 8016998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801699c:	4299      	cmp	r1, r3
 801699e:	d002      	beq.n	80169a6 <__swsetup_r+0x66>
 80169a0:	4630      	mov	r0, r6
 80169a2:	f7ff fba5 	bl	80160f0 <_free_r>
 80169a6:	2300      	movs	r3, #0
 80169a8:	6363      	str	r3, [r4, #52]	; 0x34
 80169aa:	89a3      	ldrh	r3, [r4, #12]
 80169ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80169b0:	81a3      	strh	r3, [r4, #12]
 80169b2:	2300      	movs	r3, #0
 80169b4:	6063      	str	r3, [r4, #4]
 80169b6:	6923      	ldr	r3, [r4, #16]
 80169b8:	6023      	str	r3, [r4, #0]
 80169ba:	89a3      	ldrh	r3, [r4, #12]
 80169bc:	f043 0308 	orr.w	r3, r3, #8
 80169c0:	81a3      	strh	r3, [r4, #12]
 80169c2:	6923      	ldr	r3, [r4, #16]
 80169c4:	b94b      	cbnz	r3, 80169da <__swsetup_r+0x9a>
 80169c6:	89a3      	ldrh	r3, [r4, #12]
 80169c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80169cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80169d0:	d003      	beq.n	80169da <__swsetup_r+0x9a>
 80169d2:	4621      	mov	r1, r4
 80169d4:	4630      	mov	r0, r6
 80169d6:	f000 f917 	bl	8016c08 <__smakebuf_r>
 80169da:	89a2      	ldrh	r2, [r4, #12]
 80169dc:	f012 0301 	ands.w	r3, r2, #1
 80169e0:	d00c      	beq.n	80169fc <__swsetup_r+0xbc>
 80169e2:	2300      	movs	r3, #0
 80169e4:	60a3      	str	r3, [r4, #8]
 80169e6:	6963      	ldr	r3, [r4, #20]
 80169e8:	425b      	negs	r3, r3
 80169ea:	61a3      	str	r3, [r4, #24]
 80169ec:	6923      	ldr	r3, [r4, #16]
 80169ee:	b953      	cbnz	r3, 8016a06 <__swsetup_r+0xc6>
 80169f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80169f8:	d1ba      	bne.n	8016970 <__swsetup_r+0x30>
 80169fa:	bd70      	pop	{r4, r5, r6, pc}
 80169fc:	0792      	lsls	r2, r2, #30
 80169fe:	bf58      	it	pl
 8016a00:	6963      	ldrpl	r3, [r4, #20]
 8016a02:	60a3      	str	r3, [r4, #8]
 8016a04:	e7f2      	b.n	80169ec <__swsetup_r+0xac>
 8016a06:	2000      	movs	r0, #0
 8016a08:	e7f7      	b.n	80169fa <__swsetup_r+0xba>
 8016a0a:	bf00      	nop
 8016a0c:	2000001c 	.word	0x2000001c
 8016a10:	0802a730 	.word	0x0802a730
 8016a14:	0802a750 	.word	0x0802a750
 8016a18:	0802a710 	.word	0x0802a710

08016a1c <_close_r>:
 8016a1c:	b538      	push	{r3, r4, r5, lr}
 8016a1e:	4c06      	ldr	r4, [pc, #24]	; (8016a38 <_close_r+0x1c>)
 8016a20:	2300      	movs	r3, #0
 8016a22:	4605      	mov	r5, r0
 8016a24:	4608      	mov	r0, r1
 8016a26:	6023      	str	r3, [r4, #0]
 8016a28:	f7ea fb21 	bl	800106e <_close>
 8016a2c:	1c43      	adds	r3, r0, #1
 8016a2e:	d102      	bne.n	8016a36 <_close_r+0x1a>
 8016a30:	6823      	ldr	r3, [r4, #0]
 8016a32:	b103      	cbz	r3, 8016a36 <_close_r+0x1a>
 8016a34:	602b      	str	r3, [r5, #0]
 8016a36:	bd38      	pop	{r3, r4, r5, pc}
 8016a38:	2000b51c 	.word	0x2000b51c

08016a3c <__sflush_r>:
 8016a3c:	898a      	ldrh	r2, [r1, #12]
 8016a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a42:	4605      	mov	r5, r0
 8016a44:	0710      	lsls	r0, r2, #28
 8016a46:	460c      	mov	r4, r1
 8016a48:	d458      	bmi.n	8016afc <__sflush_r+0xc0>
 8016a4a:	684b      	ldr	r3, [r1, #4]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	dc05      	bgt.n	8016a5c <__sflush_r+0x20>
 8016a50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	dc02      	bgt.n	8016a5c <__sflush_r+0x20>
 8016a56:	2000      	movs	r0, #0
 8016a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016a5e:	2e00      	cmp	r6, #0
 8016a60:	d0f9      	beq.n	8016a56 <__sflush_r+0x1a>
 8016a62:	2300      	movs	r3, #0
 8016a64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016a68:	682f      	ldr	r7, [r5, #0]
 8016a6a:	6a21      	ldr	r1, [r4, #32]
 8016a6c:	602b      	str	r3, [r5, #0]
 8016a6e:	d032      	beq.n	8016ad6 <__sflush_r+0x9a>
 8016a70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016a72:	89a3      	ldrh	r3, [r4, #12]
 8016a74:	075a      	lsls	r2, r3, #29
 8016a76:	d505      	bpl.n	8016a84 <__sflush_r+0x48>
 8016a78:	6863      	ldr	r3, [r4, #4]
 8016a7a:	1ac0      	subs	r0, r0, r3
 8016a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a7e:	b10b      	cbz	r3, 8016a84 <__sflush_r+0x48>
 8016a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016a82:	1ac0      	subs	r0, r0, r3
 8016a84:	2300      	movs	r3, #0
 8016a86:	4602      	mov	r2, r0
 8016a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016a8a:	6a21      	ldr	r1, [r4, #32]
 8016a8c:	4628      	mov	r0, r5
 8016a8e:	47b0      	blx	r6
 8016a90:	1c43      	adds	r3, r0, #1
 8016a92:	89a3      	ldrh	r3, [r4, #12]
 8016a94:	d106      	bne.n	8016aa4 <__sflush_r+0x68>
 8016a96:	6829      	ldr	r1, [r5, #0]
 8016a98:	291d      	cmp	r1, #29
 8016a9a:	d848      	bhi.n	8016b2e <__sflush_r+0xf2>
 8016a9c:	4a29      	ldr	r2, [pc, #164]	; (8016b44 <__sflush_r+0x108>)
 8016a9e:	40ca      	lsrs	r2, r1
 8016aa0:	07d6      	lsls	r6, r2, #31
 8016aa2:	d544      	bpl.n	8016b2e <__sflush_r+0xf2>
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	6062      	str	r2, [r4, #4]
 8016aa8:	04d9      	lsls	r1, r3, #19
 8016aaa:	6922      	ldr	r2, [r4, #16]
 8016aac:	6022      	str	r2, [r4, #0]
 8016aae:	d504      	bpl.n	8016aba <__sflush_r+0x7e>
 8016ab0:	1c42      	adds	r2, r0, #1
 8016ab2:	d101      	bne.n	8016ab8 <__sflush_r+0x7c>
 8016ab4:	682b      	ldr	r3, [r5, #0]
 8016ab6:	b903      	cbnz	r3, 8016aba <__sflush_r+0x7e>
 8016ab8:	6560      	str	r0, [r4, #84]	; 0x54
 8016aba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016abc:	602f      	str	r7, [r5, #0]
 8016abe:	2900      	cmp	r1, #0
 8016ac0:	d0c9      	beq.n	8016a56 <__sflush_r+0x1a>
 8016ac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ac6:	4299      	cmp	r1, r3
 8016ac8:	d002      	beq.n	8016ad0 <__sflush_r+0x94>
 8016aca:	4628      	mov	r0, r5
 8016acc:	f7ff fb10 	bl	80160f0 <_free_r>
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	6360      	str	r0, [r4, #52]	; 0x34
 8016ad4:	e7c0      	b.n	8016a58 <__sflush_r+0x1c>
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	4628      	mov	r0, r5
 8016ada:	47b0      	blx	r6
 8016adc:	1c41      	adds	r1, r0, #1
 8016ade:	d1c8      	bne.n	8016a72 <__sflush_r+0x36>
 8016ae0:	682b      	ldr	r3, [r5, #0]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d0c5      	beq.n	8016a72 <__sflush_r+0x36>
 8016ae6:	2b1d      	cmp	r3, #29
 8016ae8:	d001      	beq.n	8016aee <__sflush_r+0xb2>
 8016aea:	2b16      	cmp	r3, #22
 8016aec:	d101      	bne.n	8016af2 <__sflush_r+0xb6>
 8016aee:	602f      	str	r7, [r5, #0]
 8016af0:	e7b1      	b.n	8016a56 <__sflush_r+0x1a>
 8016af2:	89a3      	ldrh	r3, [r4, #12]
 8016af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016af8:	81a3      	strh	r3, [r4, #12]
 8016afa:	e7ad      	b.n	8016a58 <__sflush_r+0x1c>
 8016afc:	690f      	ldr	r7, [r1, #16]
 8016afe:	2f00      	cmp	r7, #0
 8016b00:	d0a9      	beq.n	8016a56 <__sflush_r+0x1a>
 8016b02:	0793      	lsls	r3, r2, #30
 8016b04:	680e      	ldr	r6, [r1, #0]
 8016b06:	bf08      	it	eq
 8016b08:	694b      	ldreq	r3, [r1, #20]
 8016b0a:	600f      	str	r7, [r1, #0]
 8016b0c:	bf18      	it	ne
 8016b0e:	2300      	movne	r3, #0
 8016b10:	eba6 0807 	sub.w	r8, r6, r7
 8016b14:	608b      	str	r3, [r1, #8]
 8016b16:	f1b8 0f00 	cmp.w	r8, #0
 8016b1a:	dd9c      	ble.n	8016a56 <__sflush_r+0x1a>
 8016b1c:	4643      	mov	r3, r8
 8016b1e:	463a      	mov	r2, r7
 8016b20:	6a21      	ldr	r1, [r4, #32]
 8016b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016b24:	4628      	mov	r0, r5
 8016b26:	47b0      	blx	r6
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	dc06      	bgt.n	8016b3a <__sflush_r+0xfe>
 8016b2c:	89a3      	ldrh	r3, [r4, #12]
 8016b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b32:	81a3      	strh	r3, [r4, #12]
 8016b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b38:	e78e      	b.n	8016a58 <__sflush_r+0x1c>
 8016b3a:	4407      	add	r7, r0
 8016b3c:	eba8 0800 	sub.w	r8, r8, r0
 8016b40:	e7e9      	b.n	8016b16 <__sflush_r+0xda>
 8016b42:	bf00      	nop
 8016b44:	20400001 	.word	0x20400001

08016b48 <_fflush_r>:
 8016b48:	b538      	push	{r3, r4, r5, lr}
 8016b4a:	690b      	ldr	r3, [r1, #16]
 8016b4c:	4605      	mov	r5, r0
 8016b4e:	460c      	mov	r4, r1
 8016b50:	b1db      	cbz	r3, 8016b8a <_fflush_r+0x42>
 8016b52:	b118      	cbz	r0, 8016b5c <_fflush_r+0x14>
 8016b54:	6983      	ldr	r3, [r0, #24]
 8016b56:	b90b      	cbnz	r3, 8016b5c <_fflush_r+0x14>
 8016b58:	f7ff fa38 	bl	8015fcc <__sinit>
 8016b5c:	4b0c      	ldr	r3, [pc, #48]	; (8016b90 <_fflush_r+0x48>)
 8016b5e:	429c      	cmp	r4, r3
 8016b60:	d109      	bne.n	8016b76 <_fflush_r+0x2e>
 8016b62:	686c      	ldr	r4, [r5, #4]
 8016b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b68:	b17b      	cbz	r3, 8016b8a <_fflush_r+0x42>
 8016b6a:	4621      	mov	r1, r4
 8016b6c:	4628      	mov	r0, r5
 8016b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b72:	f7ff bf63 	b.w	8016a3c <__sflush_r>
 8016b76:	4b07      	ldr	r3, [pc, #28]	; (8016b94 <_fflush_r+0x4c>)
 8016b78:	429c      	cmp	r4, r3
 8016b7a:	d101      	bne.n	8016b80 <_fflush_r+0x38>
 8016b7c:	68ac      	ldr	r4, [r5, #8]
 8016b7e:	e7f1      	b.n	8016b64 <_fflush_r+0x1c>
 8016b80:	4b05      	ldr	r3, [pc, #20]	; (8016b98 <_fflush_r+0x50>)
 8016b82:	429c      	cmp	r4, r3
 8016b84:	bf08      	it	eq
 8016b86:	68ec      	ldreq	r4, [r5, #12]
 8016b88:	e7ec      	b.n	8016b64 <_fflush_r+0x1c>
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	bd38      	pop	{r3, r4, r5, pc}
 8016b8e:	bf00      	nop
 8016b90:	0802a730 	.word	0x0802a730
 8016b94:	0802a750 	.word	0x0802a750
 8016b98:	0802a710 	.word	0x0802a710

08016b9c <_lseek_r>:
 8016b9c:	b538      	push	{r3, r4, r5, lr}
 8016b9e:	4c07      	ldr	r4, [pc, #28]	; (8016bbc <_lseek_r+0x20>)
 8016ba0:	4605      	mov	r5, r0
 8016ba2:	4608      	mov	r0, r1
 8016ba4:	4611      	mov	r1, r2
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	6022      	str	r2, [r4, #0]
 8016baa:	461a      	mov	r2, r3
 8016bac:	f7ea fa86 	bl	80010bc <_lseek>
 8016bb0:	1c43      	adds	r3, r0, #1
 8016bb2:	d102      	bne.n	8016bba <_lseek_r+0x1e>
 8016bb4:	6823      	ldr	r3, [r4, #0]
 8016bb6:	b103      	cbz	r3, 8016bba <_lseek_r+0x1e>
 8016bb8:	602b      	str	r3, [r5, #0]
 8016bba:	bd38      	pop	{r3, r4, r5, pc}
 8016bbc:	2000b51c 	.word	0x2000b51c

08016bc0 <__swhatbuf_r>:
 8016bc0:	b570      	push	{r4, r5, r6, lr}
 8016bc2:	460e      	mov	r6, r1
 8016bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bc8:	2900      	cmp	r1, #0
 8016bca:	b096      	sub	sp, #88	; 0x58
 8016bcc:	4614      	mov	r4, r2
 8016bce:	461d      	mov	r5, r3
 8016bd0:	da07      	bge.n	8016be2 <__swhatbuf_r+0x22>
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	602b      	str	r3, [r5, #0]
 8016bd6:	89b3      	ldrh	r3, [r6, #12]
 8016bd8:	061a      	lsls	r2, r3, #24
 8016bda:	d410      	bmi.n	8016bfe <__swhatbuf_r+0x3e>
 8016bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016be0:	e00e      	b.n	8016c00 <__swhatbuf_r+0x40>
 8016be2:	466a      	mov	r2, sp
 8016be4:	f000 f864 	bl	8016cb0 <_fstat_r>
 8016be8:	2800      	cmp	r0, #0
 8016bea:	dbf2      	blt.n	8016bd2 <__swhatbuf_r+0x12>
 8016bec:	9a01      	ldr	r2, [sp, #4]
 8016bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016bf6:	425a      	negs	r2, r3
 8016bf8:	415a      	adcs	r2, r3
 8016bfa:	602a      	str	r2, [r5, #0]
 8016bfc:	e7ee      	b.n	8016bdc <__swhatbuf_r+0x1c>
 8016bfe:	2340      	movs	r3, #64	; 0x40
 8016c00:	2000      	movs	r0, #0
 8016c02:	6023      	str	r3, [r4, #0]
 8016c04:	b016      	add	sp, #88	; 0x58
 8016c06:	bd70      	pop	{r4, r5, r6, pc}

08016c08 <__smakebuf_r>:
 8016c08:	898b      	ldrh	r3, [r1, #12]
 8016c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c0c:	079d      	lsls	r5, r3, #30
 8016c0e:	4606      	mov	r6, r0
 8016c10:	460c      	mov	r4, r1
 8016c12:	d507      	bpl.n	8016c24 <__smakebuf_r+0x1c>
 8016c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016c18:	6023      	str	r3, [r4, #0]
 8016c1a:	6123      	str	r3, [r4, #16]
 8016c1c:	2301      	movs	r3, #1
 8016c1e:	6163      	str	r3, [r4, #20]
 8016c20:	b002      	add	sp, #8
 8016c22:	bd70      	pop	{r4, r5, r6, pc}
 8016c24:	ab01      	add	r3, sp, #4
 8016c26:	466a      	mov	r2, sp
 8016c28:	f7ff ffca 	bl	8016bc0 <__swhatbuf_r>
 8016c2c:	9900      	ldr	r1, [sp, #0]
 8016c2e:	4605      	mov	r5, r0
 8016c30:	4630      	mov	r0, r6
 8016c32:	f7ff faab 	bl	801618c <_malloc_r>
 8016c36:	b948      	cbnz	r0, 8016c4c <__smakebuf_r+0x44>
 8016c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c3c:	059a      	lsls	r2, r3, #22
 8016c3e:	d4ef      	bmi.n	8016c20 <__smakebuf_r+0x18>
 8016c40:	f023 0303 	bic.w	r3, r3, #3
 8016c44:	f043 0302 	orr.w	r3, r3, #2
 8016c48:	81a3      	strh	r3, [r4, #12]
 8016c4a:	e7e3      	b.n	8016c14 <__smakebuf_r+0xc>
 8016c4c:	4b0d      	ldr	r3, [pc, #52]	; (8016c84 <__smakebuf_r+0x7c>)
 8016c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016c50:	89a3      	ldrh	r3, [r4, #12]
 8016c52:	6020      	str	r0, [r4, #0]
 8016c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c58:	81a3      	strh	r3, [r4, #12]
 8016c5a:	9b00      	ldr	r3, [sp, #0]
 8016c5c:	6163      	str	r3, [r4, #20]
 8016c5e:	9b01      	ldr	r3, [sp, #4]
 8016c60:	6120      	str	r0, [r4, #16]
 8016c62:	b15b      	cbz	r3, 8016c7c <__smakebuf_r+0x74>
 8016c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c68:	4630      	mov	r0, r6
 8016c6a:	f000 f833 	bl	8016cd4 <_isatty_r>
 8016c6e:	b128      	cbz	r0, 8016c7c <__smakebuf_r+0x74>
 8016c70:	89a3      	ldrh	r3, [r4, #12]
 8016c72:	f023 0303 	bic.w	r3, r3, #3
 8016c76:	f043 0301 	orr.w	r3, r3, #1
 8016c7a:	81a3      	strh	r3, [r4, #12]
 8016c7c:	89a3      	ldrh	r3, [r4, #12]
 8016c7e:	431d      	orrs	r5, r3
 8016c80:	81a5      	strh	r5, [r4, #12]
 8016c82:	e7cd      	b.n	8016c20 <__smakebuf_r+0x18>
 8016c84:	08015f95 	.word	0x08015f95

08016c88 <__malloc_lock>:
 8016c88:	4770      	bx	lr

08016c8a <__malloc_unlock>:
 8016c8a:	4770      	bx	lr

08016c8c <_read_r>:
 8016c8c:	b538      	push	{r3, r4, r5, lr}
 8016c8e:	4c07      	ldr	r4, [pc, #28]	; (8016cac <_read_r+0x20>)
 8016c90:	4605      	mov	r5, r0
 8016c92:	4608      	mov	r0, r1
 8016c94:	4611      	mov	r1, r2
 8016c96:	2200      	movs	r2, #0
 8016c98:	6022      	str	r2, [r4, #0]
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	f7ea f9ae 	bl	8000ffc <_read>
 8016ca0:	1c43      	adds	r3, r0, #1
 8016ca2:	d102      	bne.n	8016caa <_read_r+0x1e>
 8016ca4:	6823      	ldr	r3, [r4, #0]
 8016ca6:	b103      	cbz	r3, 8016caa <_read_r+0x1e>
 8016ca8:	602b      	str	r3, [r5, #0]
 8016caa:	bd38      	pop	{r3, r4, r5, pc}
 8016cac:	2000b51c 	.word	0x2000b51c

08016cb0 <_fstat_r>:
 8016cb0:	b538      	push	{r3, r4, r5, lr}
 8016cb2:	4c07      	ldr	r4, [pc, #28]	; (8016cd0 <_fstat_r+0x20>)
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	4605      	mov	r5, r0
 8016cb8:	4608      	mov	r0, r1
 8016cba:	4611      	mov	r1, r2
 8016cbc:	6023      	str	r3, [r4, #0]
 8016cbe:	f7ea f9e2 	bl	8001086 <_fstat>
 8016cc2:	1c43      	adds	r3, r0, #1
 8016cc4:	d102      	bne.n	8016ccc <_fstat_r+0x1c>
 8016cc6:	6823      	ldr	r3, [r4, #0]
 8016cc8:	b103      	cbz	r3, 8016ccc <_fstat_r+0x1c>
 8016cca:	602b      	str	r3, [r5, #0]
 8016ccc:	bd38      	pop	{r3, r4, r5, pc}
 8016cce:	bf00      	nop
 8016cd0:	2000b51c 	.word	0x2000b51c

08016cd4 <_isatty_r>:
 8016cd4:	b538      	push	{r3, r4, r5, lr}
 8016cd6:	4c06      	ldr	r4, [pc, #24]	; (8016cf0 <_isatty_r+0x1c>)
 8016cd8:	2300      	movs	r3, #0
 8016cda:	4605      	mov	r5, r0
 8016cdc:	4608      	mov	r0, r1
 8016cde:	6023      	str	r3, [r4, #0]
 8016ce0:	f7ea f9e1 	bl	80010a6 <_isatty>
 8016ce4:	1c43      	adds	r3, r0, #1
 8016ce6:	d102      	bne.n	8016cee <_isatty_r+0x1a>
 8016ce8:	6823      	ldr	r3, [r4, #0]
 8016cea:	b103      	cbz	r3, 8016cee <_isatty_r+0x1a>
 8016cec:	602b      	str	r3, [r5, #0]
 8016cee:	bd38      	pop	{r3, r4, r5, pc}
 8016cf0:	2000b51c 	.word	0x2000b51c

08016cf4 <_init>:
 8016cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cf6:	bf00      	nop
 8016cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cfa:	bc08      	pop	{r3}
 8016cfc:	469e      	mov	lr, r3
 8016cfe:	4770      	bx	lr

08016d00 <_fini>:
 8016d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d02:	bf00      	nop
 8016d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d06:	bc08      	pop	{r3}
 8016d08:	469e      	mov	lr, r3
 8016d0a:	4770      	bx	lr
